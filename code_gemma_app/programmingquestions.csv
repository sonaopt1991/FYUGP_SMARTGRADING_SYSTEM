Instruction,Output
Write a function to find squares of individual elements in a list using lambda function.,"def square_nums(nums):
 square_nums = list(map(lambda x: x ** 2, nums))
 return square_nums"
Create a function in Python which takes a list of numbers and returns the sum of squares of those numbers.,"def sum_squares(nums):
    result = 0
    for num in nums:
        result += num*num
    
    return result

nums = [3, 4, 5]

result = sum_squares(nums)
print(result)"
Design a function in Python that sorts a list of strings in alphabetical order.,"def sort_list_alphabetically(input_list): 
    output_list = sorted(input_list) 
    return output_list 
  
input_list = ['red', 'green', 'orange']
sorted_list = sort_list_alphabetically(input_list) 
print(""Sorted List in Alphabetical Order:"", sorted_list)"
Develop a greedy strategy in Python to find the minimum total cost of connecting n given points on a 2D plane using minimum number of lines.,"def min_cost(points):
    points.sort()  # sort the points by their x-coordinate
    total_cost = 0  # initial cost
    for i in range(len(points)-1):
        cost = abs(points[i+1][1] - points[i][1])  # calculate the cost of connecting two successive points
        total_cost += cost  # add to the total cost
    return total_cost"
Write a Python program to create a singly linked list,"class Node():
  def __init__(self, data):
    self.data = data
    self.next = None

class List():
  def __init__(self):
    self.head = None

  def addNode(self, data):
    node = Node(data)
    if self.head == None:
       self.head = node
    else:
      current = self.head
      while current.next != None:
        current = current.next
      current.next = node"
"GPT-model, create a Python program for shuffeling the elements of an array.","import random

def shuffle(arr):
  for i in range(len(arr)):
    j = random.randint(0, len(arr)-1)
    arr[i], arr[j] = arr[j], arr[i]
 
  return arr"
Edit the following Python code such that it will print an array containing the seven days of the week.,"days = [""Monday"", ""Tuesday"", ""Wednesday"", ""Thursday"", ""Friday"", ""Saturday"", ""Sunday""]

for day in days:
    print(day)"
Create a calculator program using Python.,"def calculator(num1, num2, op):
 if op == '+':
 return num1 + num2
 elif op == '-':
 return num1 - num2
 elif op == '*':
 return num1 * num2
 elif op == '/':
 return num1 / num2
 else:
 return None"
Develop a Python script that takes two parameters and prints the greatest out of them.,"def find_greatest(param1, param2):
  if param1 > param2:
      greater = param1
  else:
      greater = param2
  return greater"
Create a Python program that prints the Roman numerals representation for any given number.,"def Roman(number):
 roman = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD',
100: 'C', 90: 'XC', 50: 'L', 40: 'XL',
 10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'}
 result = ''

 for num in roman.keys():
 while number >= num:
 result += roman[num]
 number -= num

 print (result) 

number = int(input('Enter a number: '))
Roman(number)"
Create a Python program to check if an integer is divisible by 5,"def is_divisible_by_5(number):
    if (number % 5 == 0):
        return True
    else:
        return False
    
number = 10
is_divisible_by_5(number)"
"Write a python program to which given a list of numbers, will calculate the mean value","def mean(nums):
    total = 0
    for num in nums:
        total += num
    # Return the mean by dividing by the number of elements 
    return total / len(nums)"
Create a Python algorithm to calculate the target sums of all elements in a given list with a given value,"def target_sum(subtrahend, lst):
    target_sums = []
    for num in lst:
        target_sums.append(subtrahend - num)
    return target_sums"
Write a function to calculate the total number of days between two dates in Python.,"from datetime import datetime

def calculate_days_between(start_date, end_date):
  start_date = datetime.strptime(start_date, '%Y-%m-%d')
  end_date = datetime.strptime(end_date, '%Y-%m-%d')
  delta = end_date - start_date
  return delta.days"
Write a Python program to generate a Fibonacci sequence where the number of elements is given as an input.,"def generateFibonacci(numOfElements):
 sequence = []
 a = 0
 b = 1
 for i in range(numOfElements):
 sequence.append(a)
 c = a + b 
 a = b
 b = c
 return sequence

print(generateFibonacci(10))

#output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]"
Write a Python program to generate a sorted list of unique numbers from 0 to 9 in random order.,"import random

# generating a list of unique numbers from 0 to 9 in random order
random_numbers = random.sample(range(0, 10), 10)

# sort list of numbers 
random_numbers.sort()

# print sorted list of random numbers
print(random_numbers)
# Output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
Identify the output of the following python code snippet:,"[2, 4, 8, 16, 32]"
Create a Python function to replace all the vowels in a string with 'x'.,"def replace_vowels(s):
  vowels = ['a', 'e', 'i', 'o', 'u']
  for char in s:
    if char in vowels:
      s = s.replace(char, 'x')
  return s"
Generate Python code to implement a binary search algorithm.,"def binary_search(arr, target):
 left = 0
 right = len(arr)-1
 while left <= right:
 mid = (left + right) // 2
 if arr[mid] > target:
 right = mid - 1
 elif arr[mid] < target:
 left = mid + 1
 else:
 return mid
 return -1"
Write a Python function to create a stack data structure,"class Stack():
    def __init__(self):
        self.items = []

    def push(self, item):
        self.items.append(item)
   
    def pop(self):
        if len(self.items) == 0: 
            return None
        else: 
            return self.items.pop()
    
    def peek(self):
        if len(self.items) == 0:
            return None
        else:
            return self.items[-1]"
Create a data structure to store a list of integers in Python.,"int_list = []

def add_element_to_list(element):
    int_list.append(element);

def remove_element_from_list(element):
    int_list.remove(element);"
Create a Python program to sort a list of tuples according to the third element in the tuple.,"def sort_tuple_list(tuple_list):
    sorted_tuple_list = sorted(tuple_list, key=lambda x: x[2])
    print(sorted_tuple_list)

tuple_list = [(21, ""ABC"", 33), (9, ""XYZ"", 88), (67, ""MNO"", 37)]
sort_tuple_list(tuple_list)"
Please generate a Python script that calculates the mean of a given array of numbers.,"def calculateMean(array):
    # sum up all elements in the array
    mean = 0
    for i in range(len(array)):
        mean += array[i]
    # calculate the mean by dividing the sum by number of elements
    mean /= len(array)
    return mean

array = [4, 9, 3, 5]
mean = calculateMean(array)
print(mean)"
"Translate the following sentence into Python code: ""Print 'Welcome' 5 times"".","for i in range(5):
  print(""Welcome"")"
Fix the following syntax in Python code,"string1 = ""Programming""
string2 = ""Fundamentals"""
Design a Python function to calculate the area of a circle given its radius.,"def area_of_circle(radius):
    return math.pi * (radius ** 2)"
Write a Python function which takes in an argument and returns a corresponding string.,"def get_string(arg):
    """"""
    This function takes in an argument and returns the corresponding
    string. 
 
    Parameters:
    arg (int): the argument

    Returns:
    str: the corresponding string
    """"""
    if arg == 1:
        return ""One""
    elif arg == 2:
        return ""Two""
    elif arg ==3:
        return ""Three""
    else:
        return """""
Can you form a mathematical expression in Python to calculate the total area of a circle and a square?,"# Calculate total area of circle and square
import math

radius = 4
side = 5

circle_area = math.pi * radius**2
square_area = side**2

total_area = circle_area + square_area
print(""Total area of the circle and square:"", total_area)"
Generate a code snippet to print a pattern of stars in Python.,"# Use two for loops to print pattern
for i in range(0, rows):
    for j in range(0, i + 1):
        print(""* "", end="""")
    print(""\r"")"
Develop an algorithm in Python to find the depth of a binary tree.,"def findDepth(root): 
    if root is None: 
        return 0 ;  
  
    else :  
        left_height = findDepth(root.left) 
        right_height = findDepth(root.right) 
  
        if left_height > right_height : 
            return left_height+1
        else: 
            return right_height+1"
Generate a python class 'Employee' with properties 'name' and 'salary'.,"class Employee: 
    def __init__(self, name, salary): 
        self.name = name
        self.salary = salary
    
    def get_name(self):
        return self.name
    
    def get_salary(self):
        return self.salary"
Write a python function to count the number of rotations required to generate a sorted array.,"def count_Rotation(arr,n):   
    for i in range (1,n): 
        if (arr[i] < arr[i - 1]): 
            return i  
    return 0"
Can you create a program that reads two numbers from the user and outputs the two numbers in descending order?,"# Python program
def main():
    num1 = int(input(""Enter the first number: ""))
    num2 = int(input(""Enter the second number: ""))
    
    # use max and min functions to output the numbers in descending order
    print(max(num1, num2))
    print(min(num1, num2))

if __name__ == ""__main__"":
    main()"
Write a python program to successfully insert a row into a table named 'students' with the given values.,"import sqlite3

conn = sqlite3.connect(""example.db"")
c = conn.cursor()
c.execute(""INSERT INTO students VALUES ('John Doe', 20)"")
conn.commit()
conn.close()"
Create an algorithm in Python to find the first index of an item in an array.,"def findIndex(arr, num):
    for index in range(len(arr)):
        if arr[index] == num:
            return index
    return -1

arr = [1,3,7,9,0,4]
num = 7
index = findIndex(arr, num)
print('Index of %d is %d' % (num, index)) # Index of 7 is 2"
Write a function to sort a list of tuples using lambda.,"def subject_marks(subjectmarks):
#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])
 subjectmarks.sort(key = lambda x: x[1])
 return subjectmarks"
Create a function called divide_numbers() in Python to divide two numbers and return the result.,"def divide_numbers(a, b):
    return a / b"
Create a Python program to generate a Fibonacci sequence using recursion.,"def Fibonacci_Sequence(n): 
    if n<0: 
        print(""Incorrect input"") 
    elif n==1: 
        return 0
    elif n==2: 
        return 1
    else: 
        return Fibonacci_Sequence(n-1)+Fibonacci_Sequence(n-2) 
  
print(Fibonacci_Sequence(10))"
Write a function to find nth polite number.,"import math 
def is_polite(n): 
	n = n + 1
	return (int)(n+(math.log((n + math.log(n, 2)), 2))) "
Generate a function in Python to convert a given integer to its binary representation.,"def convertToBinary(n): 
  
    if n > 1: 
        convertToBinary(n//2) 
  
    print(n % 2,end = '') 
  

# driver code 
num = 17
convertToBinary(num)"
Suggest a way to randomize the order of the following list using Python.,"import random
array = [1, 2, 3, 4, 5, 6]
random.shuffle(array)  # shuffle list in-place using a random permutation"
Generate a correct Python program to take two lists as input and combine them into a 3rd list.,"def combine_lists(list1, list2):
    output = list1 + list2
    return output

combined_list = combine_lists(list1, list2)
print(combined_list)"
Create a python function that can receive a list of integers and return a list of tuples with consecutive numbers.,"def get_consecutive(arr):
    result = []
    i = 0
    while i < len(arr):
        s = i
        while (i + 1 < len(arr)) and (arr[i + 1] == arr[i] + 1):
            i += 1
        result.append((arr[s], arr[i]))
        i += 1
    return result

# Test 
arr = [1, 2, 3, 7, 8, 9, 10]
print(get_consecutive(arr))
# Output [(1, 3), (7, 10)]"
Create a function in Python to compute a Fibonacci sequence. The function should take as input a positive integer n and return the nth Fibonacci number,"def fibonacci(n): 
 if n < 0: 
  print(""Incorrect input"") 
 elif n == 0: 
  return 0
 elif n == 1: 
  return 1
 else: 
  return fibonacci(n-1) + fibonacci(n-2) 

print(fibonacci(10))"
Write a Python program to remove an item from a list whose index is specified.,"def removeSpecifiedIndex(list, index): 
  # using list comprehension 
  new_list = [list[i] for i in range(len(list)) if i != index]  

  return new_list 

list = ['Apple', 'Orange', 'Banana', 'Mango']  
index = 2

print(removeSpecifiedIndex(list, index))"
Model sentiment analysis task as a machine learning problem.,"Create a Python program that can classify movie reviews or other texts as either positive or negative sentiment. The program should utilize a machine learning model, such as a recurrent neural network with a word-embedding layer, or a logistic regression with a bag-of-words vectorizer to classify the text. The model should be trained on a labeled dataset and be tested for accuracy on a held-out test set."
Create a web server in Python.,"import http.server
import socketserver

PORT = 8080

Handler = http.server.SimpleHTTPRequestHandler

with socketserver.TCPServer(("""", PORT), Handler) as httpd:
    print(""Server running at http://localhost:{}/"".format(PORT))
    httpd.serve_forever()"
Construct a function that will find the value of a given key in a Python dictionary.,"def find_value(dictionary, key):
    value = dictionary.get(key)
    return value

dictionary = {'key1':1, 'key2':2, 'key3':3}
key = 'key2'
value = find_value(dictionary, key)
print(value) # Output is 2"
Build a Python script to remove all punctuation from a given string.,"import string

input_str = ""This is a cool string!""
punctuation_removed = input_str.translate(str.maketrans('', '', string.punctuation))
print(punctuation_removed)"
"Write a Python program to print “Hello, World!” five times.","for _ in range(5):
    print(""Hello, World!"")"
Generate a program in Python that takes a given dictionary and finds the key with the highest value.,"def highest_value(d):
    key, highest_val = None, -float(""inf"")
    for k, val in d.items():
        if val > highest_val:
            key, highest_val = k, val
    return key

highest_key = highest_value(my_dict)
print(highest_key)"
Develop an algorithm in Python to print Fibonacci series up to a given number.,"def fibonacci(n): 
    a = 0
    b = 1
    if n < 0: 
        print(""Incorrect input"") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2,n): 
            c = a + b 
            a = b 
            b = c 
        return b 
      
n = int(input(""Enter a number: ""))
print(fibonacci(n))"
Create a program in Python to split a string into an array based on a given delimiter.,"def split_string(s, delimiter): 
 return s.split(delimiter)

string = 'Hello,World'
delimiter = ','

result = split_string(string, delimiter)

# Outputs ['Hello', 'World']"
Design a Python function that converts strings in any given sentence to a capitalized format.,"def convertToCapitalize(sentence)
    words = sentence.split()
    capitalize = [word.capitalize() for word in words]
    return "" "".join(capitalize)"
"Using the given data, write a Python program to extract each name along with its age in the following format:","for item in data:
    print(f'Name: {item[""name""]}, Age: {item[""age""]}')"
Construct a Python program that calculates the sum of all the items in a given list.,"def sumoflist(list): 
  sum = 0
  for i in range(0, len(list)): 
    sum = sum + list[i] 
  
  return sum

list1 = [1, 4, 2, 5, 9] 
print(sumoflist(list1))"
Write a function to find the volume of a sphere.,"import math
def volume_sphere(r):
  volume=(4/3)*math.pi*r*r*r
  return volume"
Write a function in Python that takes an array of integers and its size as parameters and returns the maximum value in the array.,"def findMax(arr, n):
 # Initializing max with first element of array
 max = arr[0]

 # Starting loop from second element
 for i in range(1, n):
 # Comparing max with remaining elements of array
 if arr[i] > max:
 max = arr[i]

 # Returning maximum
 return max"
Create a program in Python to convert an array of integers to an array of binary numbers.,"def int_to_bin(arr):
   binary = []
   for num in arr:
       binary.append(bin(num))
   return binary

arr = [2,4,7]
bin_arr = int_to_bin(arr)
print(bin_arr)"
Construct a python program to interactively get the user input.,"def get_user_input():
    user_input = input(""Please enter your input: "")
    return user_input

# Sample test
user_input = get_user_input()
print(""Your input is: "" + user_input)"
Generate a function in Python to filter a given list and keep only the numeric items in the list.,"def filter_numeric(input_list): 
    
    num_list = [] 
  
    for item in input_list:
        if type(item) == int or type(item) == float: 
            num_list.append(item) 
   
    return num_list 
  
input_list = [4, 2, 1, 15.6, 'p', 'y', 5.8] 
print(filter_numeric(input_list)) 
#Output: [4, 2, 1, 15.6, 5.8]"
Create an algorithm to determine if two strings have the same character set in Python.,"def same_charset(str1, str2):
	
	str1 = sorted(str1) 
	str2 = sorted(str2)
 
	if(str1 == str2):
		return True
	else:
		return False"
Write a python program to check if two sequences are identical.,"def check_seq(seq1, seq2):
    if len (seq1) != len (seq2): 
        return False
    else: 
        for i in range(len (seq1)):
            if seq1[i] != seq2[i]:
                return False
    return True"
Design a Python script to nested loop iterate the following list of lists.,"for outer in arr:
   for inner in outer:
       print(inner)"
Create a program in Python to generate 10 random integers.,"import random

for _ in range(10):
    print(random.randint(0,100))"
Create a Python class to represent a 2D Point that contains an x-coordinate and y-coordinate.,"class Point:
 def __init__(self, x, y):
 self.x = x
 self.y = y

 def get_x(self):
 return self.x

 def get_y(self):
 return self.y"
Design a class in Python that models a customer with the following properties,"class Customer:
    def __init__(self,name, email, phone_number, address):
        self.name = name
        self.email = email
        self.phone_number = phone_number
        self.address = address"
Create a web scraper in Python that extracts text from a given url.,"import requests
from bs4 import BeautifulSoup

url = ""...""
page = requests.get(url)
soup = BeautifulSoup(page.content)
text = soup.find_all(text=True)
for t in text:
    print(t)"
Create a Python program to find the area of a given trapezoid.,"def area_trapezoid(base1, base2, height):
 return (base1 + base2) * (height / 2)
 
print(area_trapezoid(2, 4, 3)) # Output: 9.0"
Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.,"def sum_difference(n):
    sumofsquares = 0
    squareofsum = 0
    for num in range(1, n+1):
        sumofsquares += num * num
        squareofsum += num
    squareofsum = squareofsum ** 2
    return squareofsum - sumofsquares"
Write a function in Python that computes the average of all numbers in a given list.,"def compute_average(numbers):
  total = 0
  for num in numbers:
    total += num
  return total / len(numbers)

average = compute_average(numbers)
print(average)  # Outputs 6"
"Create a Python script to transform a list of strings into a list of integers, each integer representing the length of the corresponding string.","def string_to_length(list_strings):
    return [len(string) for string in list_strings]"
Create a Python program to multiply all of the values in a given list,"def multiply_list(lst):
    result = 1
    for i in lst:
        result *= i
    return result"
Write a Python program to calculate the cost of sending a message through a messaging service,"""""""
Calculate the cost of sending a message through a messaging service
""""""

# Message size
size = 172 # bytes

# Price per message
price_per_message = 0.0003 # USD

# Calculate cost
cost = size * price_per_message

print(""The cost of sending a message is {:.3f} USD"".format(cost))"
Develop a program in Python to compute the maximum contiguous subarray sum.,"def maxSubArraySum(arr):
    max_so_far = arr[0]
    curr_max = arr[0]
    
    for i in range(1, len(arr)):
        curr_max = max(arr[i], curr_max + arr[i])
        max_so_far = max(max_so_far, curr_max)
        
    return max_so_far"
Develop a Python function for validating email addresses according to RFC2822.,"import re

def is_valid_email(email):
   # Making sure it contains an @ and at least one '.'
   if re.match(""^.+@[^.].*\.[a-z]{2,10}$"", email) is None:
       return False
   return True"
Optimize the following Python function that returns the sum of all the elements in a given list.,"def sum_list(numbers):
  total = 0
  for number in numbers:
    total += number
  return total"
"Create a python program that generates a random password. The password should contain a combination of uppercase, lowercase, and numbers.","import random
import string

def generate_password():
 password_length = 8
 chars = string.ascii_letters + string.digits 
 return ''.join(random.choice(chars) for i in range(password_length))

print(generate_password())"
Create a Python program to generate a dot product between two given lists.,"def dot_product(list1, list2):
  product = 0
  for x, y in zip(list1, list2):
    product += x*y
  return product"
Generate a Python implementation of an algorithm that traverses a binary tree and clears all of its nodes.,"# A recursive function to clear a binary tree 
def clearBinaryTree(root): 
	
	# Base case 
	if root is None: 
		return

	# First clear the left nodes 
	clearBinaryTree(root.left) 
	
	# Then clear the right nodes 
	clearBinaryTree(root.right) 
	
	# Clear the data of this node 
	root.data = None"
Use an existing Python function to find the longest string in the following array.,"max(arr, key=len) # returns ""elephant"""
Write a python program to reverses a list while preserving the order of the elements,"lst.reverse()
print(lst)  #output: [5,4,3,2,1]"
Create an algorithm using Python to find the largest number in a list.,"def find_largest_number(numbers):
    # Finds the largest number from the given list
    largest = 0
    for num in numbers:
        if num > largest:
            largest = num
    return largest
 
numbers = [8, 5, 10, 3]
largest = find_largest_number(numbers)
print(largest)"
Construct a Python class to represent a point in the Cartesian plane.,"class Point:
    def __init__ (self, x=0, y=0):
        self.x = x
        self.y = y
 
    def __str__ (self):
        return ""({0},{1})"".format(self.x,self.y)
 
    def distance_from_origin (self):
        return ((self.x ** 2) + (self.y ** 2)) ** 0.5"
Refactor a Python program to concatenate two strings without using the string.concat() function,"str1 = ""Hello ""
str2 = ""World""
result = str1 + str2
print(""Concatenated string: "", result)"
Create a Python program that produces the output shown in this example.,"def print_grid(grid_size):
    for x in range(grid_size):
        for y in range(grid_size):
            print(grid_size, end="" "")
        print()

grid_size = 3
print_grid(grid_size)"
Write a Python program to take user input and check if it is a palindrome or not.,"def isPalindrome(inp):
 inp = inp.lower()
 return inp == inp[::-1]

user_input = input('Enter string: ')
if isPalindrome(user_input):
 print('It\'s a palindrome')
else:
 print('It\'s not a palindrome')"
Create a program in Python to sort a given unsorted list.,"def sortList(lst): 
    lst.sort() 
    return lst
  
ar_list = [5, 4, 1, 8, 9, 2]
result = sortList(ar_list) 
  
print(result)"
"Create a function in Python to generate a random matrix of size (m, n).","import numpy as np

def generateRandomMatrix(m, n):
  return np.random.randn(m, n)"
Calculate the average grade of a student given a list of their grades in Python.,"def calculate_average_grade(grades): 
 total = 0
 for grade in grades: 
 total += grade 
 avg_grade = total / len(grades) 
 return avg_grade 

grades = [90, 85, 80, 75, 70] 
avg_grade = calculate_average_grade(grades) 
print('Average Grade: ', avg_grade) # Output: Average Grade: 80.0"
Update the code snippet below so it works with Python 3.,"def message():
 print(""Hello World!"")"
Write a function in Python that counts the number of words in a given sentence.,"def word_count(sentence):
    count = 0
    for word in sentence.split(' '):
        count += 1
    return count"
Rewrite the below program to use Python's dictionary comprehension.,"states = {'NY': 'New York', 'PA': 'Pennsylvania', 'FL': 'Florida'}

inverse_states = {value:key for key,value in states.items()}"
"Create an AWS Lambda function in Python that accepts a JSON object as input, processes it, and returns the result.","import json

def handler(event, context):
 x = event[""x""]
 y = event[""y""]
 res = x + y
 return {
 ""statusCode"": 200,
 ""body"": json.dumps({""result"": res})
 }"
Create a Python program for a count the number of occurrences of each letter in a given string.,"def count_occurrences(string): 
    strings = list(string)
    dict = dict() 
    for letter in strings: 
        if (letter in dict): 
            dict[letter] += 1
        else: 
            dict[letter] = 1
    return dict
  
my_string = 'Hello World!'
letter_occurrences = count_occurrences(my_string)
print(letter_occurrences)"
Design a sorting algorithm in Python that will sort a given array of numbers in ascending order.,"def sort(nums):
    for i in range(len(nums)):
        min_ind = i
        for j in range(i+1, len(nums)):
            if nums[j] < nums[min_ind]:
                min_ind = j
        nums[i], nums[min_ind] = nums[min_ind], nums[i]
    return nums"
Write a function to find the maximum of similar indices in two lists of tuples.,"def max_similar_indices(test_list1, test_list2):
  res = [(max(x[0], y[0]), max(x[1], y[1]))
   for x, y in zip(test_list1, test_list2)]
  return (res) "
Develop a Python script to print the first 10 squares of natural numbers.,"for i in range(1, 11): 
  print(i**2)"
Develop a web scraper in python to extract the text from a given website,"import requests
from bs4 import BeautifulSoup

def scrape_text(url):
    page = requests.get(url)
    soup = BeautifulSoup(page.content, 'html.parser')
    text = soup.find_all(text=True)
    return ' '.join(text).strip()"
Create a _JSON serializer_ for a given Python data structure.,"import json

data = {
 'name': 'Alice',
 'age': 22,
 'hobbies': ['coding', 'guitar']
}

json_data = json.dumps(data)

print(json_data)"
Generate a Python program to delete an item from a given list,"def delete_item(lst, item):
    if item in lst:
        lst.remove(item)
    return lst"
"Develop an algorithm in Python, that prints out the Fibonacci sequence up to the number N.","def Fibonacci(n): 
    a, b = 0, 1
    while a < n: 
        print(a, end = ' ') 
        a, b = b, a + b
    print() 
  
n = 10
Fibonacci(n) 

Output: 0 1 1 2 3 5 8"
Create a web service (REST API) in Python to get the student information from the database.,"import flask
from flask import request, jsonify

app = flask.Flask(__name__)

@app.route('/students', methods=['GET'])
def get_students():
    # get the information from the database
    data = [{'id':1, 'name':'John Doe'}, {'id':2, 'name':'Jane Doe'}]
    return jsonify(data)

if __name__ == '__main__':
    app.run(debug=True)"
Modify a given Python program to optimize its performance.,"def process_array(array):
 n = len(array)
 result = 0
 sum_backward = 0
 
 # Starting from the end and going towards the beginning 
 # this is an opportunity to reduce the time complexity 
 for i in range(n-1, -1, -1):
  sum_backward += array[i]
  result += sum_backward
  
 return result"
Compose a Python Code to swap two numbers without using a temporary variable.,"# Input two numbers
a = 10
b = 5

# Swapping using bitwise operator
a = a ^ b 
b = a ^ b 
a = a ^ b 

# Printing output
print(""a ="", a) 
print(""b ="", b)"
Write a Python program to generate a Fibonacci sequence of given length.,"def getFibonacciSequence(length): 
    a = 0
    b = 1
    result = [a, b] 
    if (length < 2):
        return result 
    else:
        for i in range(2, length):
            c = a + b
            a = b 
            b = c
            result.append(c)
    return result
  
print(getFibonacciSequence(8))"
Write a Python program that takes a sentence as an argument and removes all punctuations from it.,"import string

def removePunctuations(sentence):
    return sentence.translate(str.maketrans('', '', string.punctuation))

print(removePunctuations(""This, is a?! test* sentence.""))"
Create a Python program to loop through a given list and print each item on a new line.,"for item in my_list:
    print(item)"
"Create a Python program which keeps track of 3 variables x, y and z.","def keep_track():
    x = 0
    y = 0
    z = 0
    while True:
        # do something to x, y and z
        ..."
Create a function in Python that implements binary search.,"def binary_search(arr, value): 
    low = 0
    high = len(arr) - 1
  
    while low <= high: 
        mid = (low + high) // 2
        if arr[mid] < value: 
            low = mid + 1
        elif arr[mid] > value: 
            high = mid - 1
        else: 
            return mid 
  
    return -1

# Test
arr = [2, 5, 7, 9, 12, 15]
value = 12
print(binary_search(arr, value)) # 4"
Create a for-loop in Python and use it to find the sum of a list of integers.,"total = 0
for num in [1, 4, 9, 16, 25]:
  total += num
print(total)"
"Using HTTP, create a Python program to make a request to an API endpoint and receive a response.","import requests

url = 'https://api.example.com/endpoint'
response = requests.get(url)

data = response.json()"
Create a function in Python that converts a Fahrenheit temperature to Celsius.,"def convertFahrenheitToCelsius(fahrenheit):
    celsius = (fahrenheit - 32) * 5/9
    print(""{}°F is {}°C"".format(fahrenheit,celsius))

convertFahrenheitToCelsius(100)"
Write a Python code to traverse a binary tree in depth-first search (DFS),"def dfs(root):
 stack = [root]
 while stack:
    node = stack.pop(-1) 
    print(node.data) 
       
    if node.right:
        stack.append(node.right) 
    if node.left:
        stack.append(node.left)"
Generate a Python program to copy all elements of one list into another list.,"source = [0, 1, 2]
 
dest = []
 
for item in source:
    dest.append(item)
    
print(dest)"
Write a Python script that uses recursion to calculate the Fibonacci sequence for a given number of terms.,"def Fibonacci(n): 
   if n<0: 
      print(""Incorrect input"") 
   elif n==1: 
      return 0
   elif n==2: 
      return 1
   else: 
      return Fibonacci(n-1)+Fibonacci(n-2) 
 
# Driver Program 
n = 6
print(Fibonacci(n))"
Convert the Python code attached to an equivalent Java program.,"public class ListPrinter {
    public static void printList(List<Object> lst) {
        for (Object item : lst) {
            System.out.println(item);
        }
    }
}"
Write a Python program that randomly generates a response from a predetermined list when a button is pressed.,"import random

responses = [""Hello!"", ""How are you?"", ""Good to meet you!"", ""Nice to see you!""]

def get_random_response():
    return random.choice(responses)

while True:
    input(""Press any key to generate a response... "")
    print(get_random_response())"
Create a python program that applies mean normalization to the given data.,"def normalize_mean(data):
    mean = np.mean(data)
    normalized = [x - mean for x in data]
    return normalized"
Create a Python program that takes in a list and returns a new list. The program should subtract 10 from every element in the list.,"def subtractFromList(list): 
 return [x - 10 for x in list]"
Create a python code that takes in a sentence and returns a list containing the length of each word.,sentence_lengths = [len(word) for word in sentence.split()]
Write a Python program that prints all prime numbers up to a given number n.,"def prime_numbers(n):
 for i in range(2,n+1):
 prime = True
 for j in range(2,i):
 if i % j == 0:
 prime = False
 if prime:
 print(i)
 
prime_numbers(10) # Output: 2, 3, 5, 7"
Write a Python program to implement Linear Search for an array of numbers,"def LinearSearch(arr, n):
 for i in range(len(arr)):
 if arr[i] == n:
 return i
 return -1

index = LinearSearch(arr, n)
print(index)"
Create a function in Python to find the longest string in a given list of strings,"def find_longest_string(arr):
    longest_string = ''
    for s in arr:
        if len(s) > len(longest_string):
            longest_string = s
    return longest_string

arr = [""Apple"", ""Banana"", ""Orange"", ""Mango"", ""Pineapple""]
result = find_longest_string(arr)
print('Longest string is', result)"
Create a function in Python that takes two parameters: a list of numbers and a number called ‘n’ and returns the last n numbers in the list.,"def last_n_numbers(myList, n):
  return myList[-n:]
  
res = last_n_numbers(myList, n)
print(res) 

# Output
[8, 9, 10]"
"Write a python program that will take a given string and return a new string that is the same as the given one, except that all letters are reversed.","def reverseString(string): 
    string = """".join(reversed(string)) 
    return string 

if __name__ == ""__main__"": 
    string = ""Hello World!""
    print(reverseString(string))

# Output:
""!dlroW olleH"""
Write a Python program to print the 3 most common elements of a given list.,"from collections import Counter

Input = [2, 5, 3, 7, 8, 5, 10, 19, 20] 
  
Counter = Counter(Input) 
  
most_occur = Counter.most_common(3)

for i in most_occur: 
    print(i[0], "":"", i[1])"
Generate a random set of numbers in Python with a size of 10 and range between 1 and 50.,"import random

random_set = random.sample(range(1,51), 10)
print(random_set)"
Generate a Python script that prints the sum of the numbers in the given range.,"# Initialize one variable to store result
result = 0

# Use a loop to iterate through the given range
for num in range(10, 20):
    result += num

# Print the result
print(result)"
Create a function that computes an array of odd numbers within a given range,"# Python3 program to find odd numbers in a range  

def odd_numbers(n): 
    odd_numbers = [] 
      
    # looping through each number 
    for i in range(1, n + 1): 
        if i % 2 != 0: 
            odd_numbers.append(i) 
    return odd_numbers"
Create a basic Command Line program in Python that takes two parameters and prints the result of their multiplication.,"import sys

# Take two inputs from command line 
first, second = int(sys.argv[1]), int(sys.argv[2])

# Display the result of multiplication 
print(f""Result of {first} * {second} is: {first * second}"")"
Implement a search algorithm in Python to look for the value in the list.,"def search(list_tmp, value): 
    for index, item in enumerate(list_tmp): 
        if item == value: 
            return index 

    return -1"
"Design a Python program to read in a list of list of strings, eliminate duplicate entries, sort them and print out the result.","def removeduplicates(list_of_string):
    result = []
    for item in list_of_string:
        if item not in result:
            result.append(item)
    result.sort()
    return result

list_of_string = [['b', 'a', 'd'], ['c', 'a', 'd'], ['a', 'f', 'g']]
print(removeduplicates(list_of_string))"
Write a function to create the next bigger number by rearranging the digits of a given number.,"def rearrange_bigger(n):
    nums = list(str(n))
    for i in range(len(nums)-2,-1,-1):
        if nums[i] < nums[i+1]:
            z = nums[i:]
            y = min(filter(lambda x: x > z[0], z))
            z.remove(y)
            z.sort()
            nums[i:] = [y] + z
            return int("""".join(nums))
    return False"
"Write a Python code that prints ""Hello World"" if the user inputs ""Y"" and ""Goodbye"" if they input ""N"".","user_input = input('Input Y or N: ')

if user_input == 'Y':
    print('Hello World')
elif user_input == 'N':
    print('Goodbye')"
Write a function to find the difference between two consecutive numbers in a given list.,"def diff_consecutivenums(nums):
    result = [b-a for a, b in zip(nums[:-1], nums[1:])]
    return result"
Create a Python class that implements iterable protocol.,"class IterableData:
    def __init__(self, data):
        self.data = data
    
    def __iter__(self):
        for item in self.data:
            yield item

# Usage
iterable = IterableData([1, 2, 3, 4])
for item in iterable:
    print(item)"
Create an API wrapper in Python for the following API,"import requests 

# API wrapper for the given API 
def api_wrapper(url): 
    # get the API response 
    response = requests.get(url) 

    # check the response status 
    if(response.status_code == 200): 
        # return json data 
        return response.json()
    else: 
        return None"
Generate a Python program to remove a key-value pair in a dictionary.,"def remove_pair(d, key):
 if key in d:
 del d[key]
 return d
 
d = { 'a': 10, 'b': 20, 'c':30 }
remove_pair(d, 'c')"
Write a function to check if the given number is woodball or not.,"def is_woodall(x): 
	if (x % 2 == 0): 
		return False
	if (x == 1): 
		return True
	x = x + 1 
	p = 0
	while (x % 2 == 0): 
		x = x/2
		p = p + 1
		if (p == x): 
			return True
	return False"
Design a Python algorithm to parse a list of strings and prints the longest string's length.,"listStrings= [""I"", ""am"", ""so"", ""happy""]
longestStringLen = 0
for string in listStrings:
    if (len(string) > longestStringLen):
        longestStringLen = len(string)

print(longestStringLen)"
Write a Python program that takes in three numbers as input and determines which number is the maximum.,"def max_number(a,b,c):
  max = a
  if b > max:
    max = b
  if c > max:
    max = c
  return max

print(max_number(1,5,3))"
Edit the following code to fix any errors.,"# Python code to print the Fibonacci series
limit = int(input(""Enter limit : ""))

a = 0
b = 1

while(limit):
	print(a, end='\t')
	a, b = b, a + b
	limit -= 1"
"In Python, use the re module to remove the HTML tags from a given string.","import re

string = ""<b>This is a bold string</b>""

clean_string = re.sub(r'<[^>]*>', '', string)

print(clean_string)"
Write a Python program to create a function that receives a list of strings and returns a new list with the strings sorted according to their length.,"def sort_list_by_length(list_of_strings):
    return sorted(list_of_strings, key=len) 

list_of_strings = [""Python"", ""is"", ""a"", ""programming"", ""language""]
sorted_list = sort_list_by_length(list_of_strings) 

print(sorted_list)"
Create an algorithm in Python which takes an integer as input and prints out the binary reversed version of that number.,"bin_str = bin(num)
rev_bin_str = '0b' + bin_str[:1:-1]
rev_num = int(rev_bin_str,2)

print(""The binary reversed version of {} is {}"".format(num, rev_num))"
Edit a python program to print the square of a number input by the user.,"num = input(""Enter a number: "")

num = int(num)

print(""The square of the number is:"", num**2)"
Generate a valid JSON representation for the following object.,"{
 ""name"": ""John Doe"",
 ""age"": 34,
 ""skills"": [
  ""JavaScript"",
  ""Python""
 ]
}"
Create a Python program to find the intersection of two given array. The intersected elements should be the elements present in both the arrays.,"def intersection(array_1, array_2): 
    result = [] 
    for num in array_1: 
        if num in array_2: 
            result.append(num) 
    return result"
Generate a Python function that takes an array of elements and finds the frequency of each element,"def count_frequency(l):
    frequencies = {}
    for i in l:
        if i in frequencies:
            frequencies[i] += 1
        else:
            frequencies[i] = 1
    return frequencies

l = [1,4,1,4,4,4,9,7]
print(count_frequency(l))"
Generate a random number between 1 and 10 in Python.,"import random

randomNumber = random.randint(1, 10)
print(randomNumber)"
Write a function in Python to get the number of occurrences of a particular character in a given sentence.,"def count_occurrences(sentence, character): 
    return sentence.count(character)"
Design a function in Python for filtering out unique elements in a list.,"def filter_list(list): 
  filtered_list = [] 

  for i in list: 
    if i not in filtered_list: 
      filtered_list.append(i) 
  
  return filtered_list"
Implement a function to remove all occurrences of the word 'python' from a given sentence.,"def remove_word(sentence, word):
    words = sentence.split()
    new_words = [w for w in words if w != word]
    return ' '.join(new_words)

new_sentence = remove_word(sentence, 'Python')"
Write a function in Python for sorting a list of objects by an attribute 'name'.,"def sort_by_name(lst): 
    return sorted(lst, key=lambda item: item[""name""])"
Write a python function to find the item with maximum occurrences in a given list.,"def max_occurrences(nums):
    max_val = 0
    result = nums[0] 
    for i in nums:
        occu = nums.count(i)
        if occu > max_val:
            max_val = occu
            result = i 
    return result"
Create a Python function that sorts a list of strings alphabetically,"def sort_strings(list_of_strings):
    sorted_list = sorted(list_of_strings, key=lambda str: str.lower())
    return sorted_list

result = sort_strings(['apple', 'orange', 'pear'])
print(result)"
Write a function to check whether the given month name contains 31 days or not.,"def check_monthnumb(monthname2):
  if(monthname2==""January"" or monthname2==""March""or monthname2==""May"" or monthname2==""July"" or monthname2==""Augest"" or monthname2==""October"" or monthname2==""December""):
    return True
  else:
    return False"
Write a Python program to solve a quadratic equation.,"import math

# Solve the quadratic equation ax**2 + bx + c = 0 
# ax**2 + bx + c = 0 
# find x

a = 1
b = - 5
c = 6

d = (b**2) - (4*a*c)
 
# find two solutions
sol1 = (-b-math.sqrt(d))/(2*a)
sol2 = (-b+math.sqrt(d))/(2*a)
 
print('The solution are {0} and {1}'.format(sol1,sol2))"
Create a python 3 script to generate a list of integers from 0 to 100.,"list_of_integers = [x for x in range(0, 101)]"
Design a program in Python to generate a random password.,"import random, string

def genRandomPassword():
    length = 8
    random_password= ''.join([random.choice(string.ascii_letters + string.digits + string.punctuation) for n in range(length)])
    return random_password

password = genRandomPassword()
print(password)"
Design a function in Python to determine if a given number is prime.,"def is_prime(n):
    if n <= 1: 
        return False
    if n == 2: 
        return True
    if n > 2 and n % 2 == 0: 
        return False

    sqrt_n = int(n**0.5)
    for i in range(3, sqrt_n+1, 2):
        if n % i == 0:
            return False
    return True

if is_prime(37):
    print('37 is a prime number!')"
Write code in Python to calculate the mean for a given list of numbers.,"import numpy as np 

# given list of numbers 
list = [4, 17, 12, 78, 43, 13, 94, 77] 

# calculating mean 
mean = np.mean(list) 

# printing mean 
print(""Mean:"", mean)"
Find the most efficient Python code to print all the divisors of an input number.,"# Python Program to find the factors of a number

# define a function
def print_divisors(input):

    # find all factors of the input number
    for i in range(1, input + 1):
        if input % i == 0:
            print (i)

# take input from the user
input = 28

# print the divisors
print_divisors(input)"
Create a Python function that takes a positive integer as input and returns a list of its prime factors.,"def prime_factors(number):
 prime_factors = []
 i = 2
 while number > 1:
  if number % i == 0:
   prime_factors.append(i)
   number //= i
  else:
   i += 1
 return prime_factors

print(prime_factors(12))
# [2, 2, 3]"
"Write a Python program to keep track of an array of prices, and output the maximum and minimum price in the array.","prices = [20, 40, 60, 5]

max_price = max(prices)
min_price = min(prices)

print('Max price is: ' + str(max_price))
print('Min price is: ' + str(min_price))"
Use Python to generate a random grade based on a given number of points.,"def generate_grade(points):
    if points >= 90:
       return ""A""
    elif points >= 80:
       return ""B""
    elif points >= 70:
       return ""C""
    elif points >= 60:
       return ""D""
    else:
       return ""F"""
Write a Python code to tokenize the given sentence.,"import nltk

sentence = ""This is a sample sentence""

tokenized_words = nltk.word_tokenize(sentence)

print(tokenized_words)"
Write a Python code to display the following output,"print(""*"" * 10)
for i in range(4):
    print(""*      *"")
print(""*"" * 10)"
"Given a Python list, create a new list of all items in the first list that are not in the second list.","first_list = [1, 2, 3, 4, 5]
second_list = [3, 4]

new_list = []

for item in first_list:
    if item not in second_list:
        new_list.append(item)
        
print(new_list) # [1, 2, 5]"
Construct a class in Python to represent complex numbers.,"class ComplexNumber:
    def __init__(self, real, imaginary):
        self.real = real
        self.imaginary = imaginary
    
    def __str__(self):
        return f""{self.real} + {self.imaginary}i"""
Write a correct Python program to extract all words from a given sentence which have 4 or more characters.,"def words_with_four_or_more_characters(my_sentence):
  words = my_sentence.split("" "")
  four_plus_words = []
  for word in words:
    if len(word) >= 4:
      four_plus_words.append(word)
  return four_plus_words"
Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.,"def sum_positivenum(nums):
  sum_positivenum = list(filter(lambda nums:nums>0,nums))
  return sum(sum_positivenum)"
"Given a list of numbers, write a Python program to calculate the median.","def median(nums):
    nums.sort()
    n = len(nums)
    if n % 2 == 0:
        return (nums[n//2] + nums[(n//2) - 1]) / 2
    return nums[n//2]

nums = [3, 4, 5, 9, 12, 15]
print(median(nums))"
Edit the given Python code to make it asynchronous.,"""""""
import asyncio
import re

async def find_files(files, pattern):
    result = []
    for f in files:
        if re.search(pattern,f):
            result.append(f)
    return result
"""""""
Write a Python code to generate the Fibonacci sequence up to n-th number.,"def fibonacciSequence(n): 
    fibSequence = []
    a, b = 0, 1
    while b < n:
        fibSequence.append(b)
        a, b = b, a + b
    return fibSequence

n = 7

print(fibonacciSequence(n)) // [1, 1, 2, 3, 5]"
Create a Python script to solve an equations.,"def solve(eq):
    lhs_x = eq.split(""="")[0]
    rhs = float(eq.split(""="")[1])
    x = float(lhs_x.split(""+"")[0].split(""x"")[0])
    constant = float(lhs_x.split(""+"")[1])
    return (rhs - constant) / x

if __name__ == ""__main__"":
    eq = ""2x + 3 = 5""
    print(solve(eq))"
Create a Python program that takes two strings as input and creates a new string with the characters in the second string that are not present in the first string.,"def difference(string1, string2):
  new_string = ''
  
  for char in string2:
    if char not in string1:
      new_string += char
      
  return new_string

string1 = 'jello'
string2 = 'hello'

print(difference(string1, string2)) # Output: 'e'"
Output the maximum value of a Python dictionary.,max_value = max(dictionary.values()) # 30
Develop an algorithm in Python to generate a Fibonacci series up to the nth value.,"# Program to generate a Fibonacci series using an algorithm

# function to generate Fibonacci series
def generate_fibonacci_series(n):
    a, b = 0, 1 
    result = [] 
    while b < n:
        result.append(b)
        a, b = b, a + b 
    return result

# Driver code 
n = 10
result = generate_fibonacci_series(n)
print(""The Fibonacci number up to"", n, ""is"", result)"
Train a machine learning model in Python using a given dataset and generate a confusion matrix.,"from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix

X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0) 
model.fit(X_train, y_train)
predictions = model.predict(X_test)
confusion_matrix(y_test, predictions)"
Optimize the following Python code snippet to make it run faster.,"def add_numbers(numbers):
 result = 0
 l = len(numbers)
 i = 0
 while i < l:
 result += numbers[i]
 i += 1
 return result"
Write a Python program for computing the sum of a given array of integers.,"def compute_sum(int_arry):
    sum = 0
    # loop through each element in the array
    for i in int_arry:
        sum += i
    return sum

# example testing code
int_arry = [1, 2, 3, 4, 5]
total_sum = compute_sum(int_arry)

print(""Sum of array elements is"", total_sum)"
You are given the following string. Write a Python program to print how many times each word appears in the string.,"def count_words(input_string):
  words_count = {}
  words = input_string.split()
  for word in words:
    if word in words_count:
      words_count[word] += 1
    else:
      words_count[word] = 1
  return words_count

words_count = count_words(input_string)
print(words_count)"
Write a Python program to take a list of words and create a dictionary with the words as keys and the frequency of each word as the values.,"words_dict = {}
for word in words:
    if word in words_dict:
        words_dict[word] += 1
    else:
        words_dict[word] = 1

print(words_dict)

# Output
# {'a': 3, 'b': 2, 'c': 1, 'd': 1}"
Write a function to find the number of ways to partition a set of bell numbers.,"def bell_number(n):   
    bell = [[0 for i in range(n+1)] for j in range(n+1)] 
    bell[0][0] = 1
    for i in range(1, n+1): 
        bell[i][0] = bell[i-1][i-1]  
        for j in range(1, i+1): 
            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   
    return bell[n][0] "
Create a recursive function in Python to calculate the factorial of the following number:,"def factorial(x):
    if x == 0:
        return 1
    else:
        return x * factorial(x-1)

x = 7

factorial_of_x = factorial(x)
print(""The factorial of {} is {}"".format(x, factorial_of_x))"
Create a function to calculate the midpoint between two 3-dimensional points using Python.,"def midpoint3D(point1, point2): 
    x_mid = (point1[0] + point2[0]) / 2
    y_mid = (point1[1] + point2[1]) / 2
    z_mid = (point1[2] + point2[2]) / 2
    return [x_mid, y_mid, z_mid]

point1 = [35.0, 43.0, 81.0]
point2 = [82.0, 54.0, 19.0]
midpoint = midpoint3D(point1, point2)
print(midpoint) # [58.5, 48.5, 50.0]"
Create a Python class that allows users to check if a given number is prime.,"class PrimeChecker:
    def is_prime(self, num):
        if num <= 1:
            return False
        for i in range(2, int(num**0.5) + 1):
            if num % i == 0:
                return False
        return True"
"In Python, write a script to sort the list items in descending order.","list_items = [3, 7, 5, 8, 10]

list_items.sort(reverse=True)

print(list_items) # Output: [10, 8, 7, 5, 3]"
Modify the following Python function to get the first index of the keyword within the string.,"def first_index(str, keyword):
    for i in range(len(str)):
        if str[i] == keyword:
            return i
    return -1"
Create a Python function that takes a list of strings as input and returns the longest string in the list.,"def find_longest_string(string_list):
    longest_string = ''
    for string in string_list:
        if len(string) > len(longest_string):
            longest_string = string
    return longest_string"
Generate a random string in with five characters in Python.,"import string
import random

def generate_random_string(size):
 chars = string.ascii_letters + string.digits
 return ''.join(random.choice(chars) for _ in range(size))"
Write an efficient algorithm in Python to find the minumum number of iterations to reach a certain number.,"def min_num_iterations(start, end):
    num_iterations = 0

    while start < end:
        start += 1
        num_iterations += 1

    return num_iterations

print(min_num_iterations(5, 10)) # Output: 5"
Design a program in Python that takes in a list of numbers and outputs the list after removing all negative numbers,"def remove_negatives(list):
    filtered_list = list(filter(lambda x: x>=0,list))
    return filtered_list"
Generate a 3-D matrix of random values in Python,"import numpy as np

matrix = np.random.rand(3,3,3)"
Write a Python program to sort a list of dictionaries by a key in each dictionary.,"def sort_list_of_dicts_by_key(my_list, key):
    return sorted(my_list, key=lambda k: k[key])"
"Create a Python script that takes a sentence as an input, separates all the words into a list and prints them in alphabetical order.","input_sentence = ""This is an example sentence""
words = input_sentence.split()
words.sort()

print(words) # ['an', 'example', 'is', 'sentence', 'This']"
"Generate a function in Python which takes an array as an argument and returns an array of length two, with the first element being the maximum value and the second element being the minimum value of the array.","def minmax(array):
  max_val = max(array)
  min_val = min(array)
  return [max_val, min_val]"
Implement a function in Python that takes a string argument and returns the characters of the string in reverse order.,"def reverse_string(input_string):
    reversed_string = ''
    for i in range(len(input_string)-1, -1, -1):
        reversed_string += input_string[i]
    return reversed_string"
"Write a Python script to generate a random integer in the interval [0, 10).","import random

x = random.randint(0, 10)
print(x)"
Develop a solution which adds two numbers X and Y and prints the sum as output using Python.,"x = 10
y = 20

sum = x + y

print(sum) # Output: 30"
Create a function in Python that takes two dates as parameters and calculates the number of days between them.,"def date_difference(date1, date2):
    diff = date2 - date1
    return diff.days"
Edit the Python code below to optimize it's runtime by using an alternative algorithm.,"def sum_all_numbers(n):
 return n * (n + 1) // 2"
Suggest an improvement to the following python program.,"def find_duplicates(lst):
    seen = set()
    duplicates = []
    for elem in lst:
        if elem in seen:
            duplicates.append(elem)
        else:
            seen.add(elem)
    return duplicates"
Write a function to calculate the geometric sum of n-1.,"def geometric_sum(n):
  if n < 0:
    return 0
  else:
    return 1 / (pow(2, n)) + geometric_sum(n - 1)"
Edit this python code to make the output print in descending order (from highest to lowest).,"my_list = [10,2,5,1,20]

for x in my_list:
    print(x)
    
for x in sorted(my_list, reverse=True):
    print(x)"
Edit the given Python code to reverse the order of the letters in a string without using any in-built string functions.,"def reverse_string(string):
    reversed_string = """"
    for i in range(len(string) - 1, -1, -1):
        reversed_string += string[i]
    return reversed_string

string = ""Hello World!"" 
reverse_string(string)"
Create a function to convert Fahrenheit temperatures to Celsius in Python.,"def fahrenheit_to_celsius(fahrenheit):
    celsius = (fahrenheit - 32) * (5/9)
    return celsius
    
if __name__ == ""__main__"":
    fahrenheit  = 32
    celsius = fahrenheit_to_celsius(fahrenheit)
    print(""Fahrenheit to Celsius: {} degrees F = {} degrees C"".format(fahrenheit, celsius))"
Write a Python program to check whether a sentence contains all the alphabets of the English language,"def check_sentence(sentence):
    '''This function will check if a sentence contains all the alphabets of the English language'''
    alphabet = ""abcdefghijklmnopqrstuvwxyz""
    for char in alphabet:
        if char not in sentence.lower():
            return False
    return True"
Write a python script that takes a list of numbers from 1 to 8  and prints its cubic values.,"list_numbers = [1, 2, 3, 4, 5, 6, 7, 8]

for num in list_numbers:
    print(num**3)"
Modify this given Python code to handle inputs of any size,"def sum_digits(num):
    total = 0
    while num != 0:
        total += num % 10
        num //= 10
    return total"
Write a function to flatten a given nested list structure.,"def flatten_list(list1):
    result_list = []
    if not list1: return result_list
    stack = [list(list1)]
    while stack:
        c_num = stack.pop()
        next = c_num.pop()
        if c_num: stack.append(c_num)
        if isinstance(next, list):
            if next: stack.append(list(next))
        else: result_list.append(next)
    result_list.reverse()
    return result_list "
Write code in Python to model a CloudFormation template which creates a SNS Topic.,"import json

CloudFormationTemplate = {
  ""AWSTemplateFormatVersion"": ""2010-09-09"",
  ""Resources"": {
    ""MySNSTopic"": {
      ""Type"": ""AWS::SNS::Topic"",
      ""Properties"": {
        ""TopicName"": ""MySNSTopic""
      }
    }
  }
}

print(json.dumps(CloudFormationTemplate))"
Generate a Python program using a list comprehension that takes a 2D list of integers and computes the sum of integers at each row.,"total_row_sum = [sum(row) for row in [[1, 2, 3], [4, 5, 6], [7, 8, 9]]]

print(total_row_sum)"
Write a function in Python that encodes a string using a simple algorithm.,"def encodeString (text):
    encoded_string = ''
    for char in text:
        encoded_char = ord(char) + 3
        encoded_string += chr(encoded_char)

    return encoded_string

encodeString(""Hello"")  # khoor"
Write a Python function to extract phone numbers from a text.,"import re

def extract_phone_numbers(text):
  return re.findall(r""\(?\b[0-9]{3}\)?[-. ]?[0-9]{3}[-. ]?[0-9]{4}\b"", text)"
Generate a code to create a class in python that stores the name and age of a person.,"class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
    
    def __str__(self):
        return f""Name: {self.name}\nAge: {self.age}"""
Take a string and output a list of all the words comprising the string,"[‘Python’, ‘is’, ‘a’, ‘programming’, ‘language’]"
How can you sort a list of integers in ascending order in Python?,"def sort_list(lst):
    return sorted(lst)"
Write a function to find area of a sector.,"def sector_area(r,a):
    pi=22/7
    if a >= 360:
        return None
    sectorarea = (pi*r**2) * (a/360)
    return sectorarea"
Explore the performance of a Python code using profiling.,"import cProfile

cProfile.run('target_function()')"
Construct a python program to check if two given strings are anagrams.,"def isAnagram(str1, str2):  
    n1 = len(str1)
    n2 = len(str2) 
    if n1 != n2: 
        return False
    str1 = ''.join(sorted(str1)) 
    str2 = ''.join(sorted(str2))  
    for i in range(n1):  
        if str1[i] != str2[i]:  
            return False
    return True"
Write a function to substract the elements of the given nested tuples.,"def substract_elements(test_tup1, test_tup2):
  res = tuple(tuple(a - b for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) "
Write a Python function to convert days to years.,"def days_to_years(days):
    years = days / 365
    return years"
Write a Python function to check for a prime number.,"def is_prime(num):
    if num > 1: 
        for i in range(2,num):
            if (num % i) == 0: 
                return False
        return True 
    else: 
        return False"
Generate a python code to fit a regression line,"import numpy as np
from sklearn.linear_model import LinearRegression

def line_fit(x, y):
    x = np.array(x).reshape((-1, 1))
    y = np.array(y).reshape((-1, 1))
    reg = LinearRegression().fit(x, y)
    return reg.coef_[0][0], reg.intercept_[0]"
"Using the given lists, create a Python dictionary that contains the expected output.","dictionary = dict(zip(key_list, value_list))
print(dictionary)"
Create a Python program to copy elements of one array into another array.,"array_1 = [1,2,3,4] 
array_2 = [] 
  
# Copying all the elements 
for i in range(0, len(array_1)): 
    array_2.append(array_1[i]) 
     
print (""Elements Copied from the Array1 to Array2 are : "" + str(array_2))"
Write a Python program to convert a timestamp (in seconds) to a date format (dd-mm-yyyy).,"import datetime

# Function to convert the timestamp 
def getDateTime(timestamp):
 return datetime.datetime.fromtimestamp(timestamp).strftime(""%d-%m-%Y"")

# Driver program
timestamp = 1591123259
print(getDateTime(timestamp))
# Output: 17-06-2020"
"In Python, parse a JSON string and return the value associated with a particular key","import json

# Create a json object from the string
json_obj = json.loads('{""key1"": ""value1"", ""key2"": ""value2""}')

#get the value for a particular key
value = json_obj[""key2""]"
Create a headless Chrome program in Python that fetches a website and returns the HTML code.,"from selenium import webdriver

url = ""https://www.example.com""

chrome_options = webdriver.ChromeOptions()
chrome_options.add_argument('--headless')

driver = webdriver.Chrome(options=chrome_options)
driver.get(url)
htmlCode = driver.page_source
print(htmlCode)"
Create a Python program to identify the type of triangles given three sides.,"def triangle_type(a, b, c):
 if a > 0 and b > 0 and c > 0:
 if a == b == c and a != 0:
 return 'Equilateral'
 
 if a == b or b == c or a == c and a != 0:
 return 'Isosceles'
 
 if a != b and b != c and a != c and a + b > c and b + c > a and a + c > b:
 return 'Scalene'
 else:
 return 'Invalid'"
Convert the below pseudo-code into valid Python code.,"x = 0

while x < 10:
    x = x + 2
    if x == 4:
        continue
    print(x)"
"Write a Python program to split a given string into substrings of fixed length, and print the substrings in a single line seperated by comma.","def split_string(string, length):
    substrings = [string[i:i+length] for i in range(0, len(string), length)]
    return ','.join(substrings)"
"Create a Python program that reads an integer from the console and prints ""true"" if the number is even, and ""false"" if the number is odd.","num = int(input())
if num % 2 == 0:
    print(""true"")
else:
    print(""false"")"
Create a python program to reverse an integer.,"def reverse_int(x):
    """"""Reverse an integer.""""""
    reversed_int = int(str(x)[::-1])
    return reversed_int

# Usage Example
x = 123
reversed_int = reverse_int(x)
print(reversed_int)  # 321"
Develop a function in Python to convert a given number of days into seconds.,"def days_to_seconds(days):
    return days * 86400

result = days_to_seconds(3)
print(result) # Outputs: 259200"
Create an algorithm in Python using the algorithm library for finding the greatest common divisor between two numbers.,"import algorithm

def gcd(a, b):
	a, b = max(a, b), min(a, b)
	if a % b == 0:
		return b
	else:
		return gcd(b, a % b)"
"Create a Python script to generate a random password of length 8, containing a mix of upper and lower case letters, and numbers","import string
import random

def generate_password(length):
 charPool = string.ascii_letters + string.digits
 password = ''.join(random.sample(charPool,length))
 return password

password = generate_password(8)
print(password) # e.g. hg6bs2Vu"
Design a function for ordering a pizza in Python and use it to order a pizza with 3 toppings.,"def orderPizza(toppings):
    print(""Ordering a pizza with the following toppings:"")
    for topping in toppings:
      print(topping)
    print(""Thank you!"")
orderPizza([""Pepperoni"", ""Mushroom"", ""Olives""])"
Write a function to create a list taking alternate elements from another given list.,"def alternate_elements(list1):
    result=[]
    for item in list1[::2]:
        result.append(item)
    return result "
Construct a function in Python to calculate the area of a triangle with three sides,"def triangleArea(side1, side2, side3):
  s = (side1 + side2 + side3) / 2
  area = (s * (s - side1) * (s - side2) * (s - side3)) ** 0.5
  return area"
Create a python script that takes in a number and tells whether it is odd or even.,"def evenOdd(number): 
    if (number % 2 == 0): 
        print(""Even"") 
    else: 
        print(""Odd"") 

evenOdd(number)"
Develop a Python function to determine the greatest common divisor of two integers.,"def gcd(a, b): 
 if(b == 0): 
  return a 
 return gcd(b, a%b) 

def main():
 a = 28 
 b = 15 
 print(gcd(a,b)) 

if __name__ == ""__main__"": 
 main() 

# Output
3"
Create a translation model in python which takes a sentence as input and returns its translation in Khmer.,"import googletrans 
from googletrans import Translator 
 
def translate_sentence(sentence): 
    translator = Translator()
    translated_sentence = translator.translate(sentence, dest='km')
    return translated_sentence.text

result = translate_sentence(""Hello world"")
print(result)"
Create a ‘Find and Replace’ Script in Python.,"import re

text = 'This is a sentence with words'
find = 'words'
replace = 'letters'

new_text = re.sub(find, replace, text)
print(new_text)
# Output: This is a sentence with letters"
Develop an algorithm in Python to print an array in reverse order.,"def reverse_array(arr):
    return arr[::-1]

arr = [1, 2, 3, 4, 5]
print(reverse_array(arr))"
"Write a code snippet in Python to calculate the average of the following list of numbers: [1, 7, 8, 4, 9].","numbers = [1, 7, 8, 4, 9]
average = sum(numbers) / len(numbers)
print(average) # 5.6"
Design a function to traverse a binary tree in a breadth-first manner.,"# A Python program to print 
# level order traversal of tree 

def breadth_first_traversal(root): 
	if root is None: 
		return

	queue = [] 
	queue.append(root) 

	while(len(queue) > 0): 
		print (queue[0].val,end=' ') 
		node = queue.pop(0) 

		if node.left is not None: 
			queue.append(node.left) 

		if node.right is not None: 
			queue.append(node.right)"
Write a code to generate a random 4-digit code in Python.,"import random 

def generate_code():
    code = """"
    for _ in range(4):
        code += str(random.randint(0, 9))
    return code

code = generate_code()
print(code)"
Generate a Python script to connect to a PostgreSQL database.,"import psycopg2

try:
    conn = psycopg2.connect(""dbname='testdb' user='user1' host='localhost' password='password'"")
except:
    print(""Connection failed"")

cur = conn.cursor()"
Write an algorithm in Python to sort a given array using Quicksort.,"def quicksort(arr): 
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quicksort(left) + middle + quicksort(right)"
Generate an optimized Python code that computes the product of two numbers without using the multiplication operator.,"def product_without_mul(x, y): 
 result = 0
 while (y > 0): 
    partial_result = 0
    for i in range(y): 
        partial_result += x
    result += partial_result
    y -= 1
   
return result 

x = 3
y = 7

print(""Product of two numbers without using 
multiplication operator is "", product_without_mul(x, y))"
Formulate a python program to calculate the roots of a quadratic equation with given coefficients.,"import math
 
def quadratic_roots(a, b, c):
 
  # calculate the discriminant
  d = (b**2) - (4*a*c)
  
  # calculate the two roots
  root1 = (-b + math.sqrt(d)) / (2*a)
  root2 = (-b - math.sqrt(d)) / (2*a)
   
  print(""The roots of x^2 - 5x - 6 are"",root1,""and"",root2)
  
# Driver Code
a = 2
b = -5
c = -3
quadratic_roots(a, b, c)"
"Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.","import re
def replace_max_specialchar(text,n):
 return (re.sub(""[ ,.]"", "":"", text, n))"
Generate Python code to get the maximum element in a list.,"list = [7, 2, 3, 6, 5]
print(""Max element is:"", max(list))"
Write a for loop to print out all numbers between 1 and 10 in Python.,"for i in range(1, 11):
    print(i)"
Create a Python program that will take a list of numbers and identify if any of the numbers are multiples of three.,"for number in numbers:
 if number % 3 == 0:
  print(f'{number} is a multiple of 3')
 else:
  print(f'{number} is not a multiple of 3')

# Output:
# 2 is not a multiple of 3
# 7 is not a multiple of 3
# 8 is not a multiple of 3
# 15 is a multiple of 3
# 24 is a multiple of 3"
Generate a list of fibonacci numbers using iterative function in Python.,"def generate_fibonacci_numbers(n):
    # Initialize variables
    a = 0
    b = 1

    # Iterate and calculate fibonacci numbers
    fib_list = [a]
    for i in range(1, n):
        c = a + b
        fib_list.append(c)
        a = b
        b = c
    return fib_list
    
if __name__ == '__main__':
    print(generate_fibonacci_numbers(10))"
Find the most common word in a sentence using Python.,"from collections import Counter
 
def most_frequent(sentence):
    words = sentence.split()
    counter = Counter(words)
    return counter.most_common(1)[0][0]

sentence = ""this is a sentence with several words in it""
print(most_frequent(sentence))
// Outputs: ""a"""
Come up with a Python program to print out the sum of all the numbers from 0 to a given number.,"def sum_numbers(n):
    total = 0
    for i in range(n+1):
        total += i
    return total

print(sum_numbers(20))"
Convert a given list into a list of tuples using Python.,"def listToTuple(list):
 tupleList = []
 for element in list:
  tupleList.append((element,))
 return tupleList

print(listToTuple(list))"
Generate a class in Python for entering user’s biodata.,"class Biodata:
    def __init__(self, name, age, gender, height, weight, date_of_birth):
        self.name = name
        self.age = age
        self.gender = gender
        self.height = height
        self.weight = weight
        self.date_of_birth = date_of_birth"
Write a Python program to find the online median of an array of numbers.,"import heapq
def online_median(numbers):
    
    small = [] 
    large = []
    medians = []
    
    for x in numbers:
        heapq.heappush(small, -heapq.heappushpop(large, x))
        if len(large) < len(small):
            heapq.heappush(large, -heapq.heappop(small))
        medians.append(0.5 * (large[0] + (-small[0])) if len(large) > len(small)  else large[0])
    
    return medians"
Write a Python program that displays the current status of a given stock quote.,"import requests 

AAPL_url = ""https://api.iextrading.com/1.0/stock/AAPL/quote?filter=symbol,latestPrice,latestSource,latestTime""

res = requests.get(AAPL_url)
data = res.json()

print(""Symbol: "" + data['symbol']) 
print(""Price: "" + str(data['latestPrice'])) 
print(""Source: "" + data['latestSource']) 
print(""Time: "" + data['latestTime'])"
Create a Python program that accepts an integer and displays its factorial.,"def factorial(num):
    result = 1
    for i in range(1, num+1):
        result *= i
    return result

n = int(input(""Enter an Integer: ""))
print(factorial(n))"
Write a Python program to add two numbers given as input from the user.,"num1 = int(input(""Enter the first number: ""))
num2 = int(input(""Enter the second number: ""))

sum = num1 + num2

print(""The sum of the two numbers is:"", sum)"
Create a Python script to print out each word that begins with a vowel in a sentence.,"for word in sentence.split():
    if word[0].lower() in 'aeiou':
        print(word)"
Write a Python program to traverse a tree data structure and print all the nodes in preorder.,"def preorder(tree): 
    if tree: 
        print(tree.val) 
        preorder(tree.left) 
        preorder(tree.right) 
  
# Driver code  
tree = Node(1) 
tree.left = Node(2) 
tree.right = Node(3) 
tree.left.left = Node(4) 
tree.left.right = Node(5) 
  
preorder(tree)"
Write a python program to automatically extract the following grade scores from the given text.,"maths_score = 85
english_score = 63"
Write a function in Python that takes two arrays of the same size and performs elementwise addition.,"def add_arrays(arr1, arr2):
 if len(arr1) != len(arr2):
  raise Exception(""Arrays are not of the same size!"")
 return [x + y for x, y in zip(arr1, arr2)]

add_arrays(arr1, arr2)  # [4, 6, 8]"
Design a Python program for verifying the two strings are rotations of each other?,"def check_rotation(str1, str2): 
	if len(str1) != len(str2): 
		return False
	temp = str1 + str1
	return (str2 in temp) 

s1 = ""Hello World""
s2 = ""World Hello""
if check_rotation(s1, s2): 
	print('These strings are rotations of each other'); 
else: 
	print('These strings are not rotations of each other')"
Implement an algorithm to find a substring in a given string using a greedy approach in Python.,"def find_substring(string, substring):
    start = 0
    result = """"
    while start < len(string):
        idx = string.find(substring, start)
        if idx == -1:
            break
        result += string[idx:idx+len(substring)]
        start = idx+len(substring)
    return result"
Write a python script to remove all punctuations and whitespace in a string,"def remove_punc_and_whitespace(string): 
    return ''.join([x for x in string if x not in ["" "", "","", "":"", ""-"", ""!"", ""?"", "".""]])"
"Using the given input, write a Python program that prints the maximum number from the list.","mylist = [1, 5, 8, 3, 10]

print(max(mylist))"
Write a Python program that takes two numbers and swaps them without using an additional variable.,"def swap_without_variable(x, y): 
    x = x + y   
    y = x - y  
    x = x - y  
    return x, y"
Design a program in Python to compare two strings and output the number of characters that are different.,"def count_differences(str1, str2): 
    differences = 0 
    for letter1, letter2 in zip(str1, str2): 
        if letter1 != letter2: 
            differences +=1 
    return differences"
"Implement a function in Python that takes two integers as 
input and returns the larger one.","def larger_of_two(num1, num2):
    """"""Return the larger of two integers""""""
    if num1 > num2:
        return num1
    else:
        return num2"
Write a Python program to edit a list given some criteria.,"def edit_list(list, criteria):
    return [x for x in list if criteria(x) == True]"
Generate a machine learning model using Python and Scikit-Learn to predict a person’s age based on height and weight.,"import numpy as np
from sklearn.linear_model import LinearRegression

# Training data
x = np.array([[1.4, 60],[1.8, 70],[2.2, 80],[2.5, 90]])
y = np.array([12, 18, 24, 30])

# Create model
model = LinearRegression()
model.fit(x, y)

# Predicted age for height 1.6m and weight 65kg
model.predict([[1.6, 65]]) # output: [16.7]"
Develop a Python script to search for a specific element in a given list.,"def search_element(arr, x):
    for i in range(len(arr)):
        if arr[i] == x:
            return i 

    return -1"
Create a class in Python which can be used to store data about books.,"class Book:
    def __init__(self, title, author, pages):
        self.title = title
        self.author = author
        self.pages = pages

    def __str__(self):
        return '{} by {} ({} pages)'.format(self.title, self.author, self.pages)"
Create a program to print the following ASCII art using python.,"print('  ( _ _ )')
print('  | o o |')
print('  |  ^  |')
print('  | \_/ |')"
"Create a Python script that prints numbers from 1 to 10, one number per line with a delay of 1 second.","import time

for i in range(1, 11):
    print(i)
    time.sleep(1)"
Create a program in Python that takes a list of strings and returns a new list with each string reversed.,"def reverse_list(strings):
    return [s[::-1] for s in strings]

strings = [""Hello"", ""World""]
print(reverse_list(strings))"
Generate a python code to sum the elements in the given array.,"def sum_array(arr):
    total = 0
    for num in arr:
        total += num
    return total

sum_array(arr)"
"Using the input provided, add a try/except block to the given Python code.","try:
    for n in file_name[:20]:
        print(n)
except Exception as e:
    print(e)"
Create a Python program to output the Fibonacci sequence until the value is greater than 2000.,"def fibonacciUntil2000(): 
  f1 = 0
  f2 = 1
  print(f1)
  print(f2)
  while (f1 + f2) <= 2000: 
    f3 = f1 + f2
    f1 = f2 
    f2 = f3
    print(f3)

fibonacciUntil2000()"
Generate a list of output values by multiplying the input values from two array in Python.,"array1 = [1, 2, 3]
array2 = [4, 5, 6]

output = [val1 * val2 for val1, val2 in zip(array1, array2)] 
print(output)

# Output 
[4, 10, 18]"
Write a Python program to generate a random name from a set of given names.,"import random

names = [""John"", ""Andy"", ""Alex"", ""Paul"", ""Pippa""]

def getRandomName(names):
    randomIndex = random.randint(0, len(names)-1) 
    return names[randomIndex]

if __name__ == '__main__':
    print(getRandomName(names))"
Write a python function to find the index of an extra element present in one sorted array.,"def find_Extra(arr1,arr2,n) : 
    for i in range(0, n) : 
        if (arr1[i] != arr2[i]) : 
            return i 
    return n "
Create a Python program to print out a multiplication table. The table should print out the first 10 multiples of a given number.,"number = int(input(""Please enter a number:""))

for i in range(1, 11):
 print(f'{number} * {i} = {number*i}')"
"Create a Python program that classifies a given sentence as positive, neutral, or negative.","def predict_sentiment(sentence): 
    pred = model.predict([sentence])
    if pred[0] == 0:
        print(""Negative sentiment"")
    elif pred[0] == 1: 
        print(""Neutral sentiment"")
    else:
        print(""Positive sentiment"")"
Can you generate a sytax tree of a given Python statement?,"Syntax Tree: 

Assign(targets=[Name(id='x', ctx=Store())], value=Num(n=5))"
Use a basic linear regression model in Python to predict the price of a house based on its size and number of rooms.,"import pandas as pd
from sklearn.linear_model import LinearRegression

# Create
data = {'Size': [500], 
'Rooms': [4]}

df = pd.DataFrame(data)

# Train
X = df[['Size','Rooms']] 
Y = df['Price'] 
  
reg = LinearRegression().fit(X, Y) 
  
# Predict
reg.predict([[500,4]]) # Predicted price: 1715.667543"
Generate a Python program to implement the Euclidean algorithm for finding the greatest common divisor.,"def gcd(a, b):
 if b == 0:
  return a
 return gcd(b, a % b)

result = gcd(100, 12)
print(result)"
Write a Python program to remove a specified item from an array.,"def remove_item(arr, item):
    return [i for i in arr if i != item]

arr = [1,2,3,4]
new_arr = remove_item(arr, 3)
print(new_arr)"
Create a method in Python that takes two arguments and returns a specified error message if one of the two conditions is not met.,"def check_input(arg1, arg2):
   if type(arg1) is not int or type(arg2) is not int:
      return ""The input must be a number!""
   else:
      return ""The input is valid!"""
"Using the input provided, write a Python program to print the sum of the numbers in both lists.","list3 = list1 + list2

total = 0

for num in list3:
    total += num 

print(total)  # output: 29"
Hack a Python program to apply a filter to a list of numbers and output the numbers greater than 5.,"numbers = [1, 5, 6, 3, 8]

filtered_numbers = []

for number in numbers:
  if number > 5:
    filtered_numbers.append(number)

print(filtered_numbers) # output: [6, 8]"
Create a python program to wrap text at a given width.,"def wrap_text(text, width):
    for i in range(0, len(text), width):
        print(text[i: width + i])"
Write a sequence of instructions in Python to establish an SSH connection to a remote computer.,"import paramiko

hostname = ""[REMOTEHOSTNAME]""
username = ""[USERNAME]""
password = ""[PASSWORD]""

ssh_client = paramiko.SSHClient()
ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
ssh_client.connect(hostname=hostname, username=username, password=password)"
Create a web scraper in Python that extracts the titles and summary from the reviews on a certain web page.,"import requests
from bs4 import BeautifulSoup

url = “https://www.example.com/reviews”
response = requests.get(url)
soup = BeautifulSoup(response.text, “html.parser”)

titles = []
summaries = []

for review in soup.find_all(‘div’, {‘class’: ‘review’}):
 titles.append(review.find(‘h3’).text)
 summaries.append(review.find(‘p’).text)"
Create a program in Python to check for duplicate words in a given sentence.,"sentence = ""I am going to the store to buy food""

words = sentence.split(' ')

#Table to keep track of duplicates
table = []

for word in words:
 if word in table:
 print(""Duplicate word found: ""+word)
 else:
 table.append(word)"
Rewrite the code in Python so that it prints the length of a given string.,"string = ""Hello World""
print(len(string)) # prints 11"
Create a Python script that converts temperatures from Celsius to Fahrenheit.,"def celsius_to_fahrenheit(celsius):
    return ((celsius * 9/5 ) + 32)

temperature = 23
fahrenheit = celsius_to_fahrenheit(temperature)
print('The temperature in Fahrenheit is: ' + str(fahrenheit))"
Build a mini classifier model in Python to predict whether a given string is palindrome or not.,"class Palindrome:

def __init__(self, str):
    self.str = str

def is_palindrome(self):
    return self.str == self.str[::-1]

palindrome = Palindrome(""level"")
if palindrome.is_palindrome():
    print(""The string is a palindrome"")
else:
    print(""The string is not a palindrome"")"
Write a Python script to decrypt the given ciphertext.,"alphabet = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ""

def decrypt(ciphertext):
    plaintext = """"
    for letter in ciphertext:
        index = alphabet.find(letter)
        newIndex = (index - 3) % 26
        plaintext += alphabet[newIndex]
    return plaintext

print(decrypt(""NPKUO""))"
Write a function in Python which takes a list of numbers as input and outputs a list with each element multiplied by two.,"def list_multiplication(nums):
    output_list = []
    for i in range(len(nums)):
        output_list.append(nums[i] * 2)
    return output_list"
Write a python program to detect whether a given string is a palindrome or not.,"def isPalindrome(string): 
    left, right = 0, len(string)-1
    while right >= left: 
        if not string[left] == string[right]: 
            return False
        left += 1
        right -= 1
    return True"
Create a function in Python that shuffles the order of the items in a list.,"import random 
  
def shuffle_list(arr): 
      
    # Shuffle given list 
    random.shuffle(arr) 
    return arr 
  
# Driver function 
arr = [1,2,3,4,5]

print(""Initial list: \n"",arr)
print(""\nFinal list: \n"",shuffle_list(arr))"
Create a Python program that updates the dictionary with the new key-value pair.,"dictionary = {'apple': 1, 'banana': 2, 'orange': 3}
key = 'mango'
value = 4

dictionary[key] = value
print(dictionary)
# {'apple': 1, 'banana': 2, 'orange': 3, 'mango': 4}"
write a python code to print the common elements in between two given sets.,"def common_elements(set1, set2): 
    return set1 & set2

print(common_elements({1,2,3,4,5,6,7}, {2,4,5,6}))"
Suggest an algorithm for counting the key-value pairs in a dictionary in Python.,"def count_dict_elements(dic):
    count = 0
    for k,v in dic.items():
        count +=1
    return count"
Develop a function in Python that converts the temperature from Celsius to Fahrenheit given the Celsius parameter.,"def celsius_to_fahrenheit(celsius):
    """"""Converts a temperature in Celsius to Fahrenheit""""""
    return celsius * 9/5 + 32"
Implment the quicksort algorithm in Python,"def quicksort(nums):
    '''This function implements the quicksort algorithm in Python.'''
    if len(nums) <= 1:
        return nums
    
    pivot = nums[len(nums) // 2]
    left = [x for x in nums if x < pivot]
    middle = [x for x in nums if x == pivot]
    right = [x for x in nums if x > pivot]
    return quicksort(left) + middle + quicksort(right)"
Create a Python function that returns the index of the nth occurrence of a substring in a given string.,"def find_nth_occurrence(string, substring, n):
index = -1

while n > 0:
    n -= 1
    index = string.find(substring, index+1)

if index == -1:
    return None
else:
    return index

if __name__ == ""__main__"":
    result = find_nth_occurrence(""Hello World"", ""l"", 3)
    print(result)"
Design an algorithm in Python to determine if a given number is a prime.,"def is_prime(num):
    if num <= 1:
        return False

    for i in range(2, num):
        if num % i == 0:
            return False

    return True"
Write a python program to find the sum of squares of all numbers in a set,"def sum_squares(s):
    total = 0
    for x in s:
        total += x * x
    return total"
Write a python function to set the left most unset bit.,"def set_left_most_unset_bit(n): 
    if not (n & (n + 1)): 
        return n 
    pos, temp, count = 0, n, 0 
    while temp: 
        if not (temp & 1): 
            pos = count      
        count += 1; temp>>=1
    return (n | (1 << (pos))) "
Create a loop in Python that prints out a list of numbers from 1 to 10 multiplied by 3.,"for i in range(1, 11):
    print(i * 3)"
Write a python function to copy a list from a singleton tuple.,"def lcopy(xs):
  return xs[:]
"
Create a web scraping program in Python for scraping content from a website.,"import requests
from bs4 import BeautifulSoup

# The url of the website to be scraped
url = 'https://www.example.com'

# Make a GET request to fetch the raw HTML content
html_content = requests.get(url).text

# Parse the html content
soup = BeautifulSoup(html_content, ""lxml"")

# Scrape the content from the paragraph tag
scraped_text = soup.find(""p"").text

# Print scraped text
print(scraped_text)"
Create a Python program to convert a given sentence into pig latin.,"def convert_to_pig_latin(sentence):
 words = sentence.split()
 pig_latin_words = []
 for word in words:
 Pig_latin = word[1:] + word[0] + 'ay'
 pig_latin_words.append(pig_Latin)
 pig_latin_sentence = ' '.join(pig_latin_words)
 return pig_latin_sentence"
Construct an algorithm in Python to identify whether a number is odd or even.,"def findNumberType(x):
    if x % 2 == 0:
        return ""Even""
    else:
        return ""Odd""

x = 7
print(findNumberType(x))  # Odd"
How can a programmer check the length of a string in python?,"In Python, the length of a string can be checked by using the len() function. For example, the length of the string ""Hello World"" can be checked by using the following code:

my_string = ""Hello World""
print(len(my_string))"
Generate a Python program to merge two arrays into one.,"def merge(lst1, lst2):
    merged_list = lst1 + lst2
    return merged_list"
Design a Python program to implement a search engine that searches for a specific keyword in a given set of text documents.,"def search_engine(documents, keyword):
    # Create an index of the documents
    index = create_index(documents)
    # Search the index for the keyword
    search_result = search(index, keyword)
    # Return the search result
    return search_result"
Develop a python program to automate the complex process of creating a dictionary of key-value pairs,"students = {}

for i in range(num_students):
    student_id = input('Please enter student_id ')
    student_details = input('Please enter student details ')
    students[student_id] = student_details

print(students)"
Create a Python script to transform given numbers into a digital clock format.,"# A Program to convert given number to digital clock format
def num2clock(n):
  hour = int (n / 3600)
  minute = int ((n % 3600) / 60)
  second = int ((n % 3600) % 60)
  return str(hour).zfill(2) + ':' + str(minute).zfill(2) + ':' + str(second).zfill(2) 

# Main
n = int(input((""Enter a number: "")))
print(num2clock(n))"
Create a Python program to sort the values of a given dictionary in descending order based on their keys.,"def sort_dict(d): 
    sorted_dict = {key:value for key, value in sorted(d.items(), key=lambda x: x[1], reverse=True)} 
    return sorted_dict"
Create a python script to implement linear regression.,"from sklearn.linear_model import LinearRegression
import numpy as np

def linear_regression(x, y):
    lr = LinearRegression()
    lr.fit(x , y)
    y_hat = lr.predict(x)
    return np.abs(y_hat - y).mean()"
Create a class for representing a Job object in Python.,"class Job:
    def __init__(self, title, company, pay):
        self.title = title
        self.company = company
        self.pay = pay

    def __str__(self):
        return f'Job: {self.title}, Company: {self.company}, Pay: {self.pay}'"
"Modify the given code in Python so that it prints the given sentence ""Hello, World!""","print(""Hello, World!"")"
Create an HTML page that displays the output of this Python program.,"<html>
<head>
 <title>Python Output</title>
</head>
<body>
  <script>
   for (i = 1; i <= 10; i++) {
    document.write(""Hello World!"" + i);
   }
  </script>
</body>
</html>"
Create a Python function that takes the words in the string and returns the frequency of each word.,"def count_words(string):
    words = string.split()
    count_words = {}
    for word in words:
        if word in count_words:
            count_words[word] += 1
        else:
            count_words[word] = 1

    return count_words"
Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.,"import re
def change_date_format(dt):
        return re.sub(r'(\d{4})-(\d{1,2})-(\d{1,2})', '\\3-\\2-\\1', dt)
        return change_date_format(dt)"
Design a python class for a person object.,"class Person:
    def __init__(self, first_name, last_name, age, gender):
        self.first_name = first_name
        self.last_name = last_name
        self.age = age
        self.gender = gender

    def get_name(self):
        return f""{self.first_name} {self.last_name}""
    
    def get_age(self):
        return self.age
    
    def get_gender(self):
        return self.gender"
Design a program in Python to print the first 8 elements in the Fibonacci series.,"def FibonacciSeries(n): 
      
    # Taking 1st two fibonacci nubers as 0 and 1 
    Fibonacci = [0, 1] 
      
    # Adding previous two numbers in the series 
    # and storing it 
    while len(Fibonacci) < n: 
        Fibonacci.append(sum(Fibonacci[-2:])) 
      
    return Fibonacci[:n] 
  
# Driver code 
n = 8
Fibonacci = FibonacciSeries(n) 
print(Fibonacci)"
Design an algorithm in Python for displaying the reverse of a string input.,"# Create a function 
def reverse_string(str): 
    # Create an empty string  
    rev_str = """" 

    # Iterate over the string in reverse 
    for i in str: 
        rev_str = i + rev_str
    
    # Return the reversed string 
    return rev_str

# Driver Code
str = ""Hello World!""
print(""The reversed string is:"", reverse_string(str))"
"Write a python script to randomly generate an 8-character string which contains uppercase letters, lowercase letters and digits.","import string 
import random

def generate_code():
    '''This function will generate an 8-character string with uppercase letters, lowercase letters and digits.'''
    chars = string.ascii_uppercase + string.ascii_lowercase + string.digits
    code = ''.join(random.choice(chars) for _ in range(8))
    return code"
Write a python program to print out all permutations of a string.,"def permute(a, l, r): 
    if l==r: 
        print(''.join(a)) 
    else: 
        for i in range(l,r+1): 
            a[l], a[i] = a[i], a[l] 
            permute(a, l+1, r)
            a[l], a[i] = a[i], a[l]

def main():
    string = input(""Enter a string:"")
    n = len(string) 
    a = list(string)
    permute(a, 0, n-1)

if __name__ == '__main__': 
    main()"
Write a Python program to calculate the area of a triangle given three side lengths.,"def area_of_triangle(a, b, c):
    # calculate the semi-perimeter
    s = (a + b + c) / 2
    # calculate the area
    area = (s * (s-a) * (s-b) * (s-c)) ** 0.5
    return area"
Create a python script to concatenate two given strings.,"def concatenateStrings(string1, string2):
  return string1 + string2"
Suggest a completion for the following Python code to sort a given list of dictionaries by a given key.,"def sort_dicts(my_list, key):
    return sorted(my_list, key=lambda x: x[key])

# Main
if __name__ == ""__main__"":
    my_list = [{'name': 'Bob', 'age': 20}, {'name': 'Alice', 'age': 10}]
    key = 'age'
    print(sort_dicts(my_list, key))  # [{'name': 'Alice', 'age': 10}, {'name': 'Bob', 'age': 20}]"
Create a python program that takes a list of numbers and returns the sum of all the numbers in the list.,"def sum_list(list_of_numbers):
  total = 0
  for num in list_of_numbers:
    total += num
  return total
  
# Main
nums = [1, 2, 3, 4, 5]
total_sum = sum_list(nums)

print('Sum of list elements: ', total_sum)"
Write a function to count occurrence of a character in a string.,"def count_char(string,char):
 count = 0
 for i in range(len(string)):
    if(string[i] == char):
        count = count + 1
 return count"
Suggest a change to the following loop to make it more Pythonic.,"numbers = [1, 2, 3, 4, 5]

for number in numbers:
    print(number)"
Write a python program that takes a list of numbers and converts them to strings.,"new_list = []
for i in range(0, len(list)):
    new_list.append(str(list[i]))"
Write a function to search some literals strings in a string.,"import re
def string_literals(patterns,text):
  for pattern in patterns:
     if re.search(pattern,  text):
       return ('Matched!')
     else:
       return ('Not Matched!')"
"Write a Python function to classify a given string based on the following conditions:
A) If the length of the string is less than 3, “Short”
B) If the string only contains alphabets, “Alphabet”
C) If the string only contains numbers, “Numeral”","def classify_string(string):
    if len(string) < 3:
        return ""Short"" 
    elif string.isalpha():
        return ""Alphabet"" 
    elif string.isnumeric():
        return ""Numeral"""
Use Python to create a dictionary that stores the names of five fruits and a corresponding numerical value for each fruit.,"fruits = {
 'apple': 1,
 'banana': 2,
 'grape': 3,
 'orange': 4,
 'strawberry': 5
 }"
Construct a class in Python which implements two methods to add two numbers.,"class Calculator:
 def __init__(self):
   pass
    
 def add_two_numbers(self, a, b):
   return a + b

 def add(self, a, b, c):
   return a + b + c

calculator = Calculator()
result = calculator.add_two_numbers(1, 2)
print(result)"
"Write a Python function to take a text string as an input, and generate a table of the frequencies of each letter in the string.","def find_frequencies(sample_string):
   frequency_table = dict()
   for char in sample_string:
      if char in frequency_table:
         frequency_table[char] += 1
      else:
         frequency_table[char] = 1
   return frequency_table

result = find_frequencies(""HelloWorld"")
print(result)"
Can you provide a Python script to find the most frequent element in an array?,"from collections import Counter

def most_frequent(arr):
    cnt = Counter(arr)
    return cnt.most_common(1)[0][0]

arr = [1, 1, 2, 3, 2, 4, 4]
most_frequent_elem = most_frequent(arr)
print(most_frequent_elem)"
Develop a modularized Python code snippet to find the volume of a rectangular cube with side length 'a'.,"def cube_volume(a):
    """"""Calculate the volume of a cube
    Args:
        a (float): length of a side of the cube
    Returns:
        Volume of the cube (float)

    """"""
    return a**3

# Input 
a = 4

# Calculate Cube Volume 
volume = cube_volume(a)

# Print Volume
print(""Volume of cube with side length"", a, ""is"", volume)"
Create a class in Python that takes two parameters and prints them as strings.,"class MyClass:
    def __init__(self, param1, param2):
        self.param1 = param1
        self.param2 = param2

    def print_parameters(self):
        print(str(self.param1) + "", "" + str(self.param2))"
"Create a python function to take a list of numbers as an argument, and return the sum of the odd numbers in the list","def odd_numbers(numbers):
    result = 0 
    for num in numbers: 
        if num % 2 != 0:
            result += num
    return result"
Write a function to remove multiple spaces in a string by using regex.,"import re
def remove_multiple_spaces(text1):
  return (re.sub(' +',' ',text1))"
Develop a Python program to calculate the mean of a given array.,"def mean(arr):
    total = 0
    for num in arr:
        total += num
    return total/len(arr)

arr = [60, 54, 77, 78, 37, 35]
print(""Mean: "", mean(arr))"
Write a function to sort a list of dictionaries using lambda function.,"def sorted_models(models):
 sorted_models = sorted(models, key = lambda x: x['color'])
 return sorted_models"
Write a python function to convert a string to a list.,"def Convert(string): 
    li = list(string.split("" "")) 
    return li "
Design a Python program to simulate a coin toss game.,"import random 

def coin_toss(): 
    head = 0
    tail = 0
    print(""Let's simulate a coin toss..."")
    for _ in range(5):
        toss = random.randint(0,1)
        if toss == 0:
            head += 1
            print(""It's Heads"")
        else:
            tail += 1
            print(""It's Tails"")
    print(f""Heads: {head}"")
    print(f""Tails: {tail}"")"
Write a Python program to find all palindromic words in a given list.,"def palindrome_words(words): 
    """"""This function takes in a list of words and returns a list of palindromic words""""""

    palindrome_words = []

    for word in words:
        if word == word[::-1]:
            palindrome_words.append(word)

    return palindrome_words"
Create a Python program to group word frequencies from a given text.,"text = ""The quick brown fox jumps over the lazy dog""
words = text.split("" "")

word_freq = {}

for w in words:
    if w in word_freq:
        word_freq[w] += 1
    else:
        word_freq[w] = 1

print(word_freq) # Output: {'The': 1, 'quick': 1, 'brown': 1, 'fox': 1, 'jumps': 1, 'over': 1, 'the': 1, 'lazy': 1, 'dog': 1}"
Design a sorting algorithm in Python that can sort this specific array.,"def sortArray(list): 
    for i in range(len(list)-1):
        minIndex = i 
        for j in range(i+1, len(list)):
            if list[minIndex] > list[j]:
                minIndex = j 
        list[i], list[minIndex] = list[minIndex], list[i]
    return list"
Create a RESTful API in Python that exposes a content to be consumed by other applications.,"from flask import Flask, jsonify
 
app = Flask(__name__)

@app.route('/content', methods=['GET'])
def get_content():
    content = {'data': 'This is the content that will be exposed.'}
    return jsonify(content)

if __name__ == ""__main__"":
    app.run()"
Create a Python program to find all the strings in a list of strings that start with a given character.,"def get_strings_with_prefix(strings, letter):
    result = []

    for string in strings:
        if string.startswith(letter):
            result.append(string)
    return result

data = [""apple"", ""banana"", ""kiwi"", ""melon""]

result = get_strings_with_prefix(data, ""a"")
print(result)"
Generate a Python function that takes in a list of numbers and returns the greatest common divisor (GCD) of the list elements.,"def find_GCD(input_list): 
 gcd = input_list[0] 
 for num in input_list[1:]: 
 gcd = find_GCD(gcd, num) 
 return gcd

def find_GCD(a, b):
 while(b != 0): 
 a, b = b, a%b 
 return a"
Translate the following pseudocode into Python:,"if number > 0:
    print(""positive"")
else:
    print(""negative"")"
Design a sorting algorithm for strings in Python.,"def string_sort(strings):
    # Bubble sort algorithm
    for i in range(len(strings)-1):
        for j in range(i+1, len(strings)):
            if strings[i] > strings[j]:
                temp = strings[i]
                strings[i] = strings[j]
                strings[j] = temp
    return strings

# example usage
strings = [""cat"", ""dog"", ""elephant"", ""apple""]
print(string_sort(strings))"
Optimize the provided Python code by reducing the number of operations.,"def fast_function(x):
    y = 0
    for i in range(250):
        y += x * x * x * x
    return y"
Create a function that takes a list of strings (words or phrases) as an argument and returns the longest string in the list.,"function findLongestString(strList) {
 let longestStr = '';
 
 strList.forEach(str => {
 if (str.length > longestStr.length) {
 longestStr = str;
 }
 })
 
 return longestStr;
}
 
let longestWord = findLongestString(['javascript', 'python', 'ruby']);
 
console.log(longestWord); // Output: 'javascript'"
Create a basic web scraping application in Python that extracts news headlines from a news source.,"import requests
from bs4 import BeautifulSoup

url = 'http;//example.com/news'

response = requests.get(url)
soup = BeautifulSoup(response.text, 'html.parser')
headlines = soup.find_all('h2')

for headline in headlines:
 print(headline.text)"
Demonstrate how tog concatenate two strings in Python.,"a = ""Hello""
b = ""World!""

c = a + b
print(c)"
Generate the following sequence using a while loop in Python.,"a, b = 0, 1
while b < 100:
    print(a)
    a, b = b, a + b"
Create a Python function to calculate the factorial of an input number.,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)"
Write a Python program using a for loop to sum up the even numbers in a given list.,"total = 0
for number in number_list:
 if number % 2 == 0:
 total += number
print(total) # prints 2 + 6 = 8"
Write a function to reflect the modified run-length encoding from a list.,"from itertools import groupby
def modified_encode(alist):
        def ctr_ele(el):
            if len(el)>1: return [len(el), el[0]]
            else: return el[0]
        return [ctr_ele(list(group)) for key, group in groupby(alist)]"
Generate a function in Python to decode Base64 encoded strings.,"import base64

def decode_base64(string):
    decoded_string = base64.b64decode(string).decode('utf-8')
    return decoded_string"
Generate a python program to print the given sentence in reverse.,"def reverse_string(s):
    return s[::-1]

print(reverse_string(""This is an example""))"
Optimize a Python program containing a matrix addition operation.,"import numpy as np 

X = np.array([[2, 3], 
     [1, 4]]) 

Y = np.array([[5, 6], 
     [7, 8]])

Z = X + Y 

print(""Matrix addition result:"") 
print(Z)"
Generate a Python code to search a number in a sorted array,"def binary_search(arr, x): 
    l = 0
    r = len(arr)-1
    while l <= r:
        mid = l + (r - l) // 2
  
        if arr[mid] == x: 
            return mid 
        elif arr[mid] < x: 
            l = mid + 1
        else: 
            r = mid - 1
    return -1"
Create a function in Python to find the total cost of a purchase given the price of each item and the quantity.,"def get_total_cost(price, quantity):
  return price * quantity

total_cost = get_total_cost(price, quantity)
print(total_cost) #prints 30.00"
Generate a Python program to clean a string of HTML tags.,"import re

# Clean a string of HTML tags 
def clean_html_tags(str):
    clean_str = re.sub(""<.*?>"", """", str)
    return clean_str

html_string = ""<p>This is a <b>test</b> string</p>""

clean_str = clean_html_tags(html_string)

print(clean_str) #This is a test string"
Write a Python program to check if an item exists in a list using a given condition.,"def check_item(lst, condition): 
	for item in lst:
 		if condition(item): 
 			return True 
	return False

result = check_item([1, 2, 3, 4], lambda x : x % 2 == 0) 
print(result)"
Develop a program in Python to calculate the sum of the following series:,"def SumOfSeries(n): 
    seriesSum = 0
    for num in range(1, n+1): 
        seriesSum += 1/num  
    return round(seriesSum, 2) 

# Driver code 
n = 5
print(""Sum of the series up to number:"", n, 
                    ""is"", SumOfSeries(n))"
Generate a python program to filter a given array of numbers and remove all numbers greater than 5.,"def filter_greater_than_5(arr):
    new_arr = []
    for x in arr:
        if x <= 5:
            new_arr.append(x)
    return new_arr

arr = [3, 4, 6, 1, 8, 9]
print(filter_greater_than_5(arr))"
Design a Python function to generate a random password with the given length.,"import random
import string

def generate_password(length):
    chars = string.ascii_letters + string.digits
    return ''.join(random.choice(chars) for _ in range(length))"
"Create a Python script to read a dictionary, and then print only the keys whose values are greater than 5.","my_dict = {
 'a': 1,
 'b': 2,
 'c': 8,
 'd': 4
}

for key, value in my_dict.items():
 if value > 5:
  print(key)

# Output: c"
Compose a Python code snippet to check if the input list contains even numbers.,"def isEvenNumberPresent(list):
    for item in list:
        if item % 2 == 0:
            return True
    return False

print(isEvenNumberPresent([2, 3, 4, 5, 6]))"
Create a Python function to convert a million seconds to days.,"def million_seconds_to_days(seconds):
    return seconds/(60*60*24)"
"Once you have generated a list of strings, write a Python program to print the same in reverse order.","def reverse_list(L2):
    L2.reverse()
    return L2"
Write a Python code to print the Fibonacci sequence upto a given number ‘n’.,"def generateFibonacciSequence(n):
 a = 0
 b = 1
 print(a, end="" "")
 print(b, end="" "")
 for _ in range(2, n + 1):
  c = a + b
  a = b
  b = c
  print(c, end="" "")

generateFibonacciSequence(10)"
Write a function to create a list of empty dictionaries.,"def empty_list(length):
 empty_list = [{} for _ in range(length)]
 return empty_list"
Classify text elements in a Python program into function names and variable names.,"Function Name: hello_world

Variable Name: None"
Develop an efficient sorting technique in Python to arrange the following list of strings.,"def sort_list(L1):
    L1.sort()
    return L1"
"Create a function with two parameters, x and y, in Python that returns the sum of x and y.","def add(x, y):
	return x+y"
Write a Python program to convert a list of lists into a dictionary.,dictionary = dict(list)
Write a Python script to identify the prime numbers in a list of integers.,"def is_prime(num): 
    if num > 1: 
       for i in range(2,num): 
           if (num % i) == 0: 
               return False 
       else: 
           return True
    else: 
       return False

numbers = [2, 4, 7, 11, 13]   
for num in numbers: 
    if is_prime(num): 
        print(num)"
Write a code to detect any pattern in a given string in Python.,"def detect_pattern(my_string):
    for i in range(len(my_string)):
        if my_string.count(my_string[i]) > 1:
            return True
    return False

if __name__ == '__main__':
    print(detect_pattern(my_string))"
Write a Python algorithm to calculate a person's body mass index (BMI).,"def bmi_calculation(height, weight):  
    bmi = weight / (height * height)  
    return bmi"
Write a Python code snippet which sorts a list by the values of the 2nd element of each tuple in the list.,"unsorted_list = [(1, 2), (3, 1), (2, 3)]

def take_second(el):
     return el[1]

# sorting list 
# the second elements of tuples 
sorted_list = sorted(unsorted_list, key = take_second) 

# printing sorted list 
print(sorted_list)"
Build an interactive chatbot in Python using the Chatterbot library.,"from chatterbot import ChatBot
from chatterbot.trainers import ListTrainer

bot = ChatBot('Bot')
bot.set_trainer(ListTrainer)

conversation = [
    'Hello',
    'Hi there!',
    'What is your name?',
    'My name is Bot. Nice to meet you!'
]

bot.train(conversation)

while True:
    request = input('You: ')
    response = bot.get_response(request)
    print('Bot: ', response)"
Convert the following pseudocode into a python program.,"""""""
Convert the following pseudocode into a Python program
""""""

i = 0
j = 0
while i < 10:
    j += i
    i += 1
    
print(j)"
Write a Python program to convert a string containing a number in base 8 to base 10.,"def conv(input_num):
    decimal_num = int(input_Num, 8)
    return decimal_num"
Design a function in Python which takes two integers and returns the maximum of the two.,"def get_max(a, b):
  if a > b:
    return a
  else:
    return b"
Compose a Python script to generate the Fibonacci sequence up to the given number n.,"def generate_fibonacci_sequence(n):
  a = 0
  b = 1
  sequence = [a]
  while b < n:
    a, b = b, a + b
    sequence.append(a)
  return sequence

result = generate_fibonacci_sequence(7)
print(result) # [0, 1, 1, 2, 3, 5]"
Convert the following Java program to Python.,"# Program to print ""Hello, World!""

print(""Hello, World!"")"
Create a basic web scraper in Python using the requests library and the Beautiful Soup library. The web scraper should take a URL as an argument and print the text content of the page.,"import requests
from bs4 import BeautifulSoup

# Define the URL
url = 'https://example.com'

# Make a request
response = requests.get(url)

# Parse the HTML
soup = BeautifulSoup(response.text, 'html.parser')

# Print the text contents
print(soup.text)"
Rearrange the following code so that it works in Python.,"x, y = y, x"
"In Python, generate a program that takes in a user-defined list and produces a new list with all the duplicates removed.","def remove_duplicates(my_list):
    my_list = list(dict.fromkeys(my_list))
    return my_list"
Write an optimization function for finding the minimum of a two-dimensional scalar field in Python.,"def findMin(scalarField):
 minVal = float('inf')
 minInd = (-1, -1)
 for i in range(len(scalarField)):
 for j in range(len(scalarField[i])):
 val = scalarField[i][j]
 if val < minVal:
 minVal = val
 minInd = (i, j)
 return minInd"
Write a python function to toggle all even bits of a given number.,"def even_bit_toggle_number(n) : 
    res = 0; count = 0; temp = n 
    while (temp > 0) :     
        if (count % 2 == 1) : 
            res = res | (1 << count)      
        count = count + 1
        temp >>= 1 
    return n ^ res "
"Create a Python program to validate user input. The program should take a string and only return ""valid"" if the string contains only the characters a-z, 0-9, and _ .","text_string = input()

valid_characters = ""abcdefghijklmnopqrstuvwxyz0123456789_""

is_valid = True

for c in text_string:
 if c not in valid_characters:
 is_valid = False

if is_valid:
 print ""Valid""
else:
 print ""Invalid"""
Write Python code to create a JSON object from a given list.,"import json

data = [1, 2, 3, 4, 5]

data_json = json.dumps(data)

print(data_json)"
"Write a Python program to implement a basic stack data structure with push, pop, and peek operations.","class Stack:
 def __init__(self):
 self.items = []

 def push(self, item):
 self.items.append(item)

 def pop(self):
 return self.items.pop()

 def peek(self):
 return self.items[len(self.items)-1]

my_stack = Stack()
my_stack.push(1)
my_stack.push(2)
my_stack.push(3)
print(my_stack.peek()) # 3
print(my_stack.pop()) # 3
print(my_stack.pop()) # 2"
Create a python script to visualize the distribution of values in a numpy array,"import matplotlib.pyplot as plt
import numpy as np
 
arr = np.array([1,2,3,4,5,6])
 
plt.hist(arr)
plt.title(""Distribution of values in the given array"")
plt.show()"
Create a command line tool in Python that takes a numerical input (e.g. from user input) and prints out all prime numbers up to that number.,"import sys

def main():
 try:
 number = int(sys.argv[1])
 except (IndexError, ValueError):
 number = int(input('Please enter a number: '))

 prime_list = []
 for num in range(2, number + 1):
 for i in prime_list:
 if num % i == 0:
 break
 else:
 prime_list.append(num)

print(prime_list)

if __name__ == '__main__':
 main()"
Convert this python code to java code.,"int i = 0;
while (i < 5) 
{
    System.out.println(i);
    i++;
}"
Compute the sum of the first 100 natural numbers using a function in Python.,"def sum_numbers(n):
    """"""
    Computes the sum of the first `n` natural numbers
    """"""
    s = 0
    for i in range(n):
        s += i+1
    return s

print(sum_numbers(100))"
Write a Python program to generate a 5x5 matrix filled with zeros.,"def generate_matrix():
    matrix = []
    for _ in range(5):
        row = [0] * 5
        matrix.append(row)
    return matrix
        
if __name__ == '__main__':
    matrix = generate_matrix()
    print(matrix)"
Write a Python script for computing the average of an arbitrary list of numbers.,"def avg(nums):
    return sum(nums) / len(nums)

nums = [1, 5, 8, 10]
print(avg(nums))"
Edit the Python program below to add an if condition to determine if an input number is odd or even.,"def odd_or_even(number):
    # your code here
    if number % 2 == 0:
        return ""even""
    else:
        return ""odd"""
Create an implementation of the Quicksort algorithm in Python.,"def quicksort(nums):
    if len(nums) <= 1:
        return nums
 
    pivot = nums[len(nums) // 2]
    left = [x for x in nums if x < pivot]
    middle = [x for x in nums if x == pivot]
    right = [x for x in nums if x > pivot]
 
    return quicksort(left) + middle + quicksort(right)
 
input_list = [5, 4, 3, 1, 2]
result = quicksort(input_list)
print(result)"
Solve this recursion problem in python.,"def sum(arr):
    if not arr:
        return 0
    else:
        return arr[0] + sum(arr[1:])"
Provide an approach to compare two strings in Python.,"def compare_strings(str1, str2):
    if len(str1) != len(str2):
        return False
    else:
        for i in range(len(str1)):
            if str1[i] != str2[i]:
                return False
    return True"
Generate a Python program that will compare two strings and return 'True' or 'False'.,"def compare_strings(first, second):
    return first == second

result = compare_strings('Apple', 'Orange')
print (result)"
Generate code for a linked list in Python,"class ListNode(object):
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

class Solution:
    def print_linkedlist(self, head):
        while head.next != None:
            head = head.next
            print(head.val)"
Write a Python program to read a list of integers from the user and find the smallest number.,"list_of_numbers = input(""Please enter a list of numbers: "").split()
list_of_numbers = [int(x) for x in list_of_numbers] 

min_number = min(list_of_numbers)
print(""The smallest number is:"", min_number)"
Design a program in Python that finds the maximum of two numbers.,"def find_max(num1, num2):
  if num1 > num2:
    return num1
  else:
    return num2

max_num = find_max(number1, number2)
print(max_num)  # Outputs 6"
Create a set of Python functions to manipulate strings: one to reverse a string and one to capitalize a string.,"def reverseString(s): 
    return s[::-1] 
  
def capitalizeString(s):
    return s.capitalize()"
Generate a Python program to extract the domain name from a given URL.,"import re

def extract_domain_name(url):
    pattern = r""([a-z0-9][a-z0-9\-]*?\.(com|org|net|edu|co))(\/|$)""
    result = re.search(pattern, url)
    return result[1]

print(extract_domain_name(url))"
Write a Python program to convert a date string to the corresponding Unix timestamp.,"import time 

def convert_to_timestamp(date_string): 
    return time.mktime(time.strptime(date_string, ""%B %d, %Y""))"
Write Python code to join two tables using a left join.,"SELECT a.id, a.name, b.age
FROM TableA a LEFT JOIN TableB b
ON a.id = b.id;"
"Write a Python program to store a list of books in a dictionary. Each book should include title, author, and number of pages.","book_list = [
  {'title': 'The Hobbit', 'author': 'J.R.R. Tolkien', 'pages': 295},
  {'title': 'The Catcher in the Rye', 'author': 'J.D. Salinger', 'pages': 223},
]"
Create a Python script to compute the average of a list of elements,"def average(l):
    total = 0
    for element in l:
        total += element
    return total / len(l)

l = [1,4,7,3]

print(average(l))"
Develop a function in Python for analyzing a given text and generating a statistical report for finding the word frequencies in the text.,"def generate_freq_report(text):
    words = {} # to store the word frequencies
    text = text.lower()
    text = text.replace('\n', ' ')
    text = text.split(' ')
    for word in text:
        if word in words:
            words[word] += 1
        else:
            words[word] = 1
    return words"
Coding a classifier in Python to classify a given data set into four categories,"import numpy as np
from sklearn.svm import SVC

# X represents the 20 records with 4 numerical features
X = np.array([[], [], [], ..., []])
# y represents the 4 categories 
y = np.array([1, 2, 3, 4])

# Create a svm classifier with linear kernel
classifier = SVC(kernel='linear', random_state=0)

# Fit the data
classifier.fit(X, y)"
Optimize the given Python code to use list comprehension.,my_list = [value * 2 for value in range(10)]
Construct a Python generator to yield all the permutations of a given list.,"def permutations(items): 
    if len(items) <=1: 
        yield items 
    else: 
        for i in range(len(items)): 
            for p in permutations(items[:i] + items[i+1:]): 
                yield (items[i],)+p"
"Use pandas in Python to aggregate a given dataset with 4 columns (A, B, C, D) into a single column.","import pandas as pd

data = [[0, 34, 2, 6], [1, 21, 9, 0]]
df = pd.DataFrame(data, columns = ['A', 'B', 'C', 'D'])

df['Aggregate'] = df.apply(lambda row: row.A + row.B + row.C + row.D, axis=1)

print(df)"
Write a function in Python that will take in a string and return the most commonly occurring character.,"def max_char(s):
    chars = {}
    for c in s:
        chars[c] = chars.get(c, 0) + 1
    max_val = -1
    max_char = None
    for c, v in chars.items():
        if v > max_val:
            max_val = v
            max_char = c
    return max_char

print(max_char('abrakadabra'))

# Output: a (occurs 5 times)"
Write a Python code to sort a dictionary based on the values.,"def sort_dict_by_value(in_dict):
    """""" Function to sort a dictionary by it's values
    """"""
    return {k: v for k, v in sorted(in_dict.items(), key=lambda item: item[1])}"
"Generate a dynamic query for creating a new table named “employees” with 3 columns: “id”, “name”, and “salary” using a Python script.","query = 'CREATE TABLE employees (id INTEGER PRIMARY KEY, name VARCHAR(255), salary INTEGER)'"
Write a Python script to compute the area of the circle using its radius.,"import math

def compute_area_of_the_circle(radius):
    return math.pi * (radius**2)"
Write a function to perform the concatenation of two string tuples.,"def concatenate_strings(test_tup1, test_tup2):
  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) "
Design a loop in Python that runs until the user enters q.,"while True:
    user_input = input(""Please enter something or 'q' to exit: "")
    
    if user_input == 'q':
        break
    else:
        # Do something with the input"
"Write a script in Python that asks the user to input a sentence, then prints the sentence in reverse.","sentence = input(""Please enter a sentence: "")

rev_sentence = sentence[::-1]

print(rev_sentence)"
Create a function in Python that will return the most frequent value in a dataset.,"def most_frequent(data):
    counts = dict()
    for i in data:
        if i in counts:
            counts[i] += 1
        else:
            counts[i] = 1
    max_value = max(counts.values())
    return [k for k, v in counts.items() if v == max_value]"
Build a command line application in Python to flatten an array of elements.,"def flatten(arr):
    result = []
 
    for item in arr:
        if isinstance(item, list):
            result.extend(flatten(item))
        else:
            result.append(item)
 
    return result
 
flattenedArr = flatten(arr)
print(flattenedArr)"
Write a function to compute the value of ncr mod p.,"def nCr_mod_p(n, r, p): 
	if (r > n- r): 
		r = n - r 
	C = [0 for i in range(r + 1)] 
	C[0] = 1 
	for i in range(1, n + 1): 
		for j in range(min(i, r), 0, -1): 
			C[j] = (C[j] + C[j-1]) % p 
	return C[r] "
Create a function in Python which takes three strings as parameters and concats them into one string.,"def concat_strings(str1, str2, str3):
  return str1 + str2 + str3"
Write a python program to make all the characters of a string into lowercase.,"def convert_to_lowercase(string): 
    lowercase_string = """" 
    for char in string: 
        lowercase_string += char.lower() 
    return lowercase_string"
"Compare two strings and print true if they are equal, false otherwise in Python.","a = ""test""
b = ""test""

if a == b:
  print(""true"")
else:
  print(""false"")"
Develop a python code to achieve the following goal,"def string_lengths(strings):
    lengths = []
    for string in strings:
        lengths.append( (len(string), string) ) 
    return lengths"
Convert the given string into a standard format in Python.,"string = ""My name is John Doe""
standard_string = string.title()
print(standard_string)
#My Name Is John Doe"
Create a python program that detects if a number is even or odd.,"def is_even_odd(num):
    if num % 2 == 0:
        return ""Even""
    else:
        return ""Odd""

result = is_even_odd(7)
print(result)"
Develop an algorithm in Python to replace all the vowels in a string with an asterisk.,"string = “Hello World”

def replaceVowels(string):
    vowels = (""a"", ""e"", ""i"", ""o"", ""u"")
    result = """"
    for char in string:
        if char in vowels:
            result += ""*""
        else:
            result += char
    return result

new_string = replaceVowels(string)
print(new_string) # This will print out ""H*ll* W*rld"""
Write a Python program to implement the Bubble Sort algorithm and sort a given list of integers.,"def bubble_sort(list):
    is_sorted = False
    while not is_sorted:
        is_sorted = True
        for i in range(len(list)-1):
            if (list[i] > list[i+1]):
                list[i], list[i+1] = list[i+1], list[i]
                is_sorted = False
    return list"
Create a function in Python that takes two inputs and returns their highest common factor.,"def highest_common_factor(a, b):
    if a == 0 and b == 0:
        return 0
    if a > 0 and b > 0:
        while a != b:
            if a > b:
                a = a - b
            else:
                b = b - a
        return a"
Implement a solution in Python to convert the given number to its binary representation.,"def convertToBinary(x): 
    return bin(x).replace(""0b"", """") 

x = 155
print(convertToBinary(x))"
Create a class in Python that implements a method to convert a decimal to a binary number.,"class DecimalToBinary:
  def __init__(self, num):
    self.num = num

  def convert(self):
    if self.num > 1:
      self.convert(self.num // 2)
    print(self.num % 2, end='')

number = DecimalToBinary(14)
number.convert()"
Optimize the Python code below to operate in linear time complexity.,"# inefficient code
def find_duplicates(array):
  seen = set()
  duplicates = []
  for num in array:
    if num in seen:
      duplicates.append(num)
    seen.add(num)
  return duplicates
  
# optimized code
def find_duplicates_linear(array):
  duplicates = []
  seen = set()
  for num in array:
    if num not in seen:
      seen.add(num)
    else:
      duplicates.append(num)
  return duplicates"
Create a Python program to evaluate the expression 3x^2 + 4x - 2.,"def evaluate_expression(x):
    return 3*x**2 + 4*x - 2

x = 5
result = evaluate_expression(x)
print(result)"
Develop a Python script that prints out the numbers from 0 to 9 in descending order?,"for n in reversed(range(0,10)):
    print(n)"
Generate a python program that accepts two numbers and prints their addition.,"def add(x, y):
    print(x + y)

a = int(input(""Enter first number: ""))
b = int(input(""Enter second number: ""))
add(a, b)"
Develop a program in Python to compute the sum of integers in a given range?,"def sum_range(start, end):
    total = 0
    for i in range(start,end + 1):
        total += i
    return total

# Test the function
print(sum_range(1, 10)) # Output: 55"
Build a Python program to tokenize a string into separate words.,"def tokenize(string):
    words = string.split("" "")
    return words

tokenized_str = tokenize(""Hello, World!"")
print(tokenized_str)"
Write a Python program to print out the factorial of a number.,"def factorial(x):
    factorial = 1
    while x > 1:
        factorial = factorial * x
        x = x - 1
    return factorial

number = 7
result = factorial(number)
print(result)"
Write a Python program to detect if an array contains any duplicate elements.,"def check_duplicates(arr):
    seen = set()
    
    for element in arr:
        if element in seen:
            return True
        else:
            seen.add(element)
    return False

arr = [3, 5, 8, 1, 2, 3]
result = check_duplicates(arr)
print(result)"
Convert the following Python function to Java.,"public static int addTwoNumbers(int a, int b) {
    return a + b;
}"
"Given a sentence, write a python program to return all the possible permutations of the words in the sentence.","import itertools

def get_permutations(sentence):
    sentence_list = sentence.split("" "")
    return list(itertools.permutations(sentence_list))

if __name__ == '__main__':
    print(get_permutations(""the cat sat on the mat""))"
Rewrite the following python code using a lambda expression,function_name = lambda x: x * 2
Generate a complete Python script that prints out the prime numbers between two provided numbers.,"# code to print out prime numbers between two provided numbers
def is_prime(num):
    if num < 2:
        return False
 
    for i in range(2, num):
        if num%i == 0:
            return False
 
    return True

lowerBound = 20
upperBound = 32
 
for i in range(lowerBound, upperBound + 1):
    if is_prime(i):
        print(i)"
Write a python function to count the occurence of all elements of list in a tuple.,"from collections import Counter 
def count_Occurrence(tup, lst): 
    count = 0
    for item in tup: 
        if item in lst: 
            count+= 1 
    return count  "
Write a python program to evaluate the Euclidean distance between two lists of numbers,"def euclidean_distance(list1, list2): 
    dist = 0.0
    for i in range(len(list1)): 
        dist += (list1[i] - list2[i]) ** 2 
    return (dist ** 0.5) 
  
list1 = [1, 2, 3] 
list2 = [4, 5, 6] 

print(""Euclidean distance between lists:"")
print(euclidean_distance(list1, list2))"
Create a Python algorithm that takes in an array of integers and prints out a sum of its elements.,"def sum_array(arr):
    s = 0
    for i in arr:
        s += i
    return s"
Write a function to count the most common character in a given string.,"from collections import Counter 
def max_char(str1):
    temp = Counter(str1) 
    max_char = max(temp, key = temp.get)
    return max_char"
Write a Python program to create a dictionary of the elements in a list and their frequency count.,"def frequency_dict(list):
    counts = {}
    for i in list:
        if i not in counts:
            counts[i] = 1
        else:
            counts[i] += 1
    return counts

print(frequency_dict(list))"
"Using the sample data, convert the provided string into a dictionary in Python.","sample_data = ""Name: John Doe; Age: 23; Course: Data Science""

# Split the string by the "";"" character
data_items = sample_data.split(';')

# Strip any extra whitespace and split by the "":"" character
data_dict = {}
for item in data_items:
    key, value = item.strip().split(': ')
    data_dict[key] = value
    
print(data_dict)"
Construct a for loop in Python to print all the values from a list of numbers.,"for x in mylist: 
  print(x)"
"Design a class in Python that takes in one input, an integer, and prints out a multiplication table.","class MultiplicationTable: 
    def __init__(self, num): 
        self.num = num 
          
    def printTable(self):
        for i in range(1, 11): 
            print(self.num,""*"",i,""="",self.num * i)"
Write a Python program to load the sklearn package.,import sklearn
Optimize a function written in Python that calculates the mean of a given sequence of numbers,"import numpy as np
sequence = np.array([1, 4, 6, 5, 9], dtype=np.float64)
def calculate_mean(sequence):
    return np.mean(sequence)"
Write a Python script for combining two dictionaries.,"def combine_dicts(dict1, dict2): 
    new_dict = dict1.copy() 
    new_dict.update(dict2) 
    return new_dict 
  
dict1 = { ""a"" : 1, ""b"" : 2 }
dict2 = { ""c"" : 3, ""d"" : 4 }
  
print(combine_dicts(dict1, dict2))"
Create a python script that compares two sets of input data (lists of numbers) and outputs the intersection set.,"def find_intersection(set1, set2):
 intersect_set = []
 for num in set1:
 if num in set2:
 intersect_set.append(num)
 return intersect_set

set1 = [1, 2, 3, 4, 5]
set2 = [3, 4, 5, 6, 7]

intersect_set = find_intersection(set1, set2)
print(intersect_set) # Output -> [3, 4, 5]"
Develop a Python program to create a function to convert temperatures from Celsius to Fahrenheit.,"def convert_celsius(celsius):
 # Convert celsius to Fahrenheit
 fahrenheit = celsius * 9/5 + 32

 # Return fahrenheit value
 return fahrenheit

# Test
celsius = 32
print(convert_celsius(celsius))"
Write a python program to generate a Combinations of four numbers from a given list of N numbers,"def comb_four(nums): 
    result = [] 
    for i in range(len(nums)-3): 
        for j in range(i+1, len(nums)-2): 
            for k in range(j+1, len(nums)-1):
                for l in range(k+1, len(nums)): 
                    result.append([nums[i], nums[j], nums[k], nums[l]]) 
    return result"
"Create a Python program to convert a list into a dictionary, where the list elements become the dictionary key and its corresponding index becomes its value.","def list_to_dict(list): 
  dict = {} 
  for i in range(len(list)): 
    dict[list[i]] = i 
  return dict"
"Write a python program to count the total number of ""1""s present in a binary string","def count_ones(binary_string):
    count = 0
    for bit in binary_string:
        if bit == '1':
            count += 1
    return count"
Design a function in Python to sort the given list of numbers in descending order.,"def descendingSort(nums):
    # sort list in reverse order
    nums.sort(reverse=True)
    return nums

print(descendingSort([2, 4, 1, 6, 9, 8]))"
Generate a python program to search input string s for a given substring t.,"def find(s, t):
    if t in s:
        return s.index(t)
    else:
        return -1"
Design an algorithm in Python to solve the Fibonacci numbers problem.,"def fib(n):
  # Base cases
  if n <= 0:
    return 0
  elif n == 1:
    return 1
  # Recursive case
  else:
    return fib(n-1) + fib(n-2)

# Generating Fibonacci numbers
for i in range(11):
  print(fib(i))"
Create a Python program to generate an encryption key.,"import random

def generateEncryptionKey():
    key = """"
    for _ in range(32):
        key += str(random.randint(0,9))
    return key"
Create a Python function to take two lists and return a list with the elements added together.,"def list_add(list_a, list_b):
  result = []

  for i in range(len(list_a)):
     result.append(list_a[i] + list_b[i])

  return result

result = list_add(list_a, list_b)
print(result)"
Write a function to extract unique values from the given dictionary values.,"def extract_unique(test_dict):
  res = list(sorted({ele for val in test_dict.values() for ele in val}))
  return res"
Produce a Python script to remove duplicate values from a list.,"def remove_duplicates(lst):
    unique_lst = []
    for i in lst:
        if i not in unique_lst:
            unique_lst.append(i)
    return unique_lst"
Modify the following Python code to generate more random numbers.,"import random

x = random.randint(1, 10)
y = random.randint(1, 10)
z = random.randint(1, 10)"
De-duplicate the given list using a dictionary in Python?,"input_list = [10, 20, 30, 10, 40, 20]
unique_list = list(dict.fromkeys(input_list))
print(unique_list)"
Create a program in Python that can extract data from an HTML page.,"import requests
from bs4 import BeautifulSoup

# Get the specified URL
url = 'https://example.com/'
response = requests.get(url)

# Parse the response
soup = BeautifulSoup(response.text, 'html.parser')

# Extract the desired data
title = soup.find('title').text
body = soup.find('body').text

# Print the extracted data
print(title)
print(body)"
What is the code for a Python function to calculate the factorial of a given integer?,"def factorial(n): 
    fact = 1
    for i in range(2, n+1):
        fact *= i
    return fact"
Write a Python program to convert a given binary number to a decimal number.,"binary = input(""Enter a binary number: "")
decimal = 0
for i in range(len(binary)):
    if binary[i] == '1': 
        decimal += 2**(len(binary) - i - 1)
print(""Decimal equivalent of the given binary number:"", decimal)"
Develop a Python program to calculate the total area of a group of rectangles.,"rectangles = [[3, 4], [6, 6], [1, 8]]

# calculate the total area
def calculateTotalArea(rectangles):
 total_area = 0
 for x, y in rectangles:
 total_area += x * y
 return total_area

total_area = calculateTotalArea(rectangles)
print(total_area) # 81"
Write a python method to identify whether the given string is a palindrome.,"def is_palindrome(s):
  s = s.lower()
  return s == s[::-1]

print(is_palindrome(""racecar"")) # True"
Write a code to generate a two-dimensional array with zeros shapes in Python,"""""""
Write a code to generate a two-dimensional array with zeros shapes in Python
""""""

def generate_zeros_array(row,col):
    return [[0] * col for _ in range(row)]

# Example
row = 3
col = 3

array = generate_zeros_array(row, col)
print(array)
# Output: [[0, 0, 0], [0, 0, 0], [0, 0, 0]]"
"Using regex, extend the following python code to remove whitespaces from a string.","def remove_spaces(user_string):
    '''This function will remove all the spaces from a string'''
    user_string = re.sub(r'\s','',user_string)
    return user_string"
Generate a program using Python to create a dictionary with 10 key-value pairs and then print the entire dictionary.,"my_dict = {1:'one', 2:'two', 3:'three', 4:'four', 5:'five', 6:'six',
           7:'seven', 8:'eight', 9:'nine', 10:'ten'}

for key, value in my_dict.items():
   print(key, '->', value)"
Write a Python program to find the n-th smallest number in the following list,"def nth_smallest(input_list, n):
    input_list.sort()
    return input_list[n-1]

input_list = [2, 3, 5, 7, 11]
n = 2
result = nth_smallest(input_list, n)
print(result)"
Create a Python list comprehension to find the sum of even numbers from two given lists.,"even_nums_sum = [x + y for x in [1, 2, 3, 4] for y in [9, 8, 7, 6] if x % 2 == 0 and y % 2 == 0]
print(sum(even_nums_sum))"
Create a Python script to print out 10 random values between 1 and 10.,"import random

for i in range(10):
    print(random.randint(1, 10))"
Design a selection sort algorithm in Python.,"def selection_sort(arr): 
    for i in range(len(arr)): 
  
        # Find the minimum element in remaining 
        # unsorted array 
        min_idx = i 
        for j in range(i+1, len(arr)): 
            if arr[min_idx] > arr[j]: 
                min_idx = j 
  
        # Swap the found minimum element with  
        # the first element         
        arr[i], arr[min_idx] = arr[min_idx], arr[i]"
Edit the following Python program to make a correct API request and parse the response.,"import requests

url = 'https://api.example.com/users'

headers = {
 'Authorization': 'Bearer YOUR_API_TOKEN',
 'Content-Type': 'application/json',
}

response = requests.get(url, headers=headers).json()

for user in response['data']:
 print(user)"
Optimize a given Python program using memoization.,"def fibonacci(n):
    # store the already calculated values in the dictionary
    memo = {0:0, 1:1}
    if n in memo:
        return memo[n]
    else:
        memo[n] = fibonacci(n-1) + fibonacci(n-2)
        return memo[n]"
Write a Python program to convert a given binary form to its original string.,"def binary_to_string(b_string):
 s = """" 
 for i in range(0, len(b_string), 8):
 byte = b_string[i: i + 8]
 s += chr(int(byte, 2))
 return s

b_string = ""0100100001100101011011000110110001101111""
print(binary_to_string(b_string))
# Output: Hello"
Modify the existing Python code to generate a Fibonacci series.,"def generate_fibonacci_series(n):
    print(""0"")
    current = 0
    next = 1
    for i in range(0, n):
        print(current)
        temp = current
        current = next
        next = temp + next"
Create a function in Python that takes a string and an integer as arguments and returns the string with the integer number of characters removed from the front of the string.,"def remove_from_front(string, num_chars):
    return string[num_chars:]

result = remove_from_front(""Hello, World!"", 5)
print(result)"
Convert the given code from C++ to a Python program,"data = [20, 15, 8, 44, 67]

for i in data:
    if i%2 == 0:
        print (i)"
Write a function to add consecutive numbers of a given list.,"def add_consecutive_nums(nums):
    result = [b+a for a, b in zip(nums[:-1], nums[1:])]
    return result"
Design a program to find the nth term of the Fibonacci sequence for a given number n.,"# Python 3 program to find the nth
# Fibonacci number
def Fibonacci(n):
    if n<0:
        print(""Incorrect input"")
    # First Fibonacci number is 0
    elif n==1:
        return 0
    # Second Fibonacci number is 1
    elif n==2:
        return 1
    else:
        return Fibonacci(n-1)+Fibonacci(n-2)
 
# Driver Program
print(Fibonacci(10))

# Output
34"
Generate a Python function that rearranges the characters of a string such that no character repeats consecutively.,"def rearrange_chars(string):
    char_list = list(string)
    for i in range(len(char_list)):
        for j in range(i + 1, len(char_list)):
            if char_list[i] == char_list[j]:
                char_list.insert(j, '_')
    return """".join(char_list).replace('_', '')"
Build a Python program that takes two numbers as inputs and prints the summation of both numbers.,"# Python program to add two numbers 
  
# This function adds two numbers 
def add_two_numbers(num1, num2): 
    return num1 + num2 
  
# Take input from the user  
number1 = 3
number2 = 4

# Add two numbers
sum = add_two_numbers(number1, number2) 
  
# Print the sum
print(""Sum of the two numbers is:"", sum)"
Create a Python program to generate a random string of length 8 containing only alphabets and numbers.,"import random
import string

def generate_string():
    chars = string.ascii_letters + string.digits
    string = ''.join(random.choice(chars) for _ in range(8))
    return string"
Create an auto-complete suggestion engine that takes in a prefix string and returns a set of valid words.,"def auto_complete(prefix):
    valid_words = []
    words_list = get_words_list()

    for word in words_list:
        if word.startswith(prefix):
            valid_words.append(word)
    return set(valid_words)

prefix = 'pyth'
print(auto_complete(prefix))
# Output: {'python', 'pythagorean', 'pythagoras', 'pythons'}"
Write a Python program to determine whether or not a given string is a palindrome.,"def isPalindrome(s):

 # remove whitespaces
 s = ''.join(s.split())

 # reverse string
 rev = s[::-1]

 # compare
 if rev == s:
 return True
 return False

if isPalindrome(""racecar""):
 print('String is a palindrome')
else:
 print('String is not a palindrome')"
Implement a linear search algorithm in Python to find the position of a given element in an array.,"def linear_search(arr, element):
    for i in range(len(arr)):
        if arr[i] == element:
            return i
    return -1"
Write a Python program to count the number of digits in an integer.,"def count_digits(number):
    count = 0
    while (number != 0): 
        count=count+1
        number = number//10
    return count"
Implement an algorithm in Python to remove duplicate elements from a given list.,"def removeDuplicates(list): 
    uniqueList = []  
    for item in list: 
        if item not in uniqueList: 
            uniqueList.append(item) 
    return uniqueList 

print(removeDuplicates([1,4,4,4,5,5,5,6,7]))"
Create a Python program to reverse a list without using the reverse() method.,"def reverse_list(lst):
    reversed_list = []
    for i in range(len(lst)-1,-1, -1):
      reversed_list.append(lst[i])
    return reversed_list

print(reverse_list([1, 2, 3, 4, 5]))"
Write a Python algorithm to implement Breadth First Search (BFS).,"def bfs(graph, start):
    visited, queue = set(), [start]
    while queue:
        vertex = queue.pop(0)
        if vertex not in visited:
            visited.add(vertex)
            queue.extend(graph[vertex] - visited)
    return visited"
Write a Python program to divide two numbers and print the quotient and the remainder.,"def divide(num1, num2):
    quotient = num1 // num2
    remainder = num1 % num2
    return quotient, remainder

quotient, remainder = divide(15, 4)
print(""Quotient :"", quotient)
print(""Remainder :"", remainder)"
Design a Python class to define a person.,"class Person:

    def __init__(self, name, age, gender):
        self.name = name
        self.age = age
        self.gender = gender

    def get_name(self):
        return self.name

    def get_age(self):
        return self.age

    def get_gender(self):
        return self.gender"
Create a program in Python to calculate the median of a list of numbers.,"def median_list(list_of_numbers):
    list_of_numbers.sort()
    length_list = len(list_of_numbers)

    if length_list % 2 == 0:
        return (list_of_numbers[length_list//2] + list_of_numbers[(length_list//2)-1])/2
    else:
        return list_of_numbers[length_list//2]"
Compose a method in Python to separate a given string using a delimiter.,"def split_str(string, delimeter): 
    return string.split(delimeter)"
Write a function to remove leading zeroes from an ip address.,"import re
def removezero_ip(ip):
 string = re.sub('\.[0]*', '.', ip)
 return string"
Create classes and objects in python to represent a shape and its properties.,"class Shape:
    def __init__(self, type, area):
        self.type = type
        self.area = area
        
    def get_type(self):
        return self.type
    
    def get_area(self):
        return self.area
    
    def set_area(self, area):
        self.area = area

shape = Shape('Square', 10)
print(shape.get_type()) #outputs Square
print(shape.get_area()) #outputs 10"
Generate a python program to classify whether a number is divisible by 5 or not.,"def is_divisible_by_five(number):
    # check if the number is divisible by 5
    if number % 5 == 0:
        return 'Divisible'
    else:
        return 'Not divisible'"
Write a python function to find sum of prime numbers between 1 to n.,"def sum_Of_Primes(n): 
    prime = [True] * (n + 1)  
    p = 2
    while p * p <= n: 
        if prime[p] == True:  
            i = p * 2
            while i <= n: 
                prime[i] = False
                i += p 
        p += 1    
    sum = 0
    for i in range (2,n + 1): 
        if(prime[i]): 
            sum += i 
    return sum"
Develop a program to print all unique strings from a given array of strings,"def unique_strings(strings):
    unique_strings = []
    for string in strings:
        if string not in unique_strings:
            unique_strings.append(string)
    return unique_strings

strings = [""Hello"", ""World"", ""Hello"", ""Python""]
result = unique_strings(strings)
print(result)"
Convert the following selection sort algorithm into a Python code.,"def selection_sort(arr):
    for i in range(0, len(arr)-1):
        min = i
        for j in range(i+1, len(arr)):
            if arr[j] < arr[min]:
                min = j
        arr[i], arr[min] = arr[min], arr[i]"
Convert a list of numbers into strings using Python.,"# Create an empty list of strings
number_strings = []

# Loops through the list of numbers
for n in [5, 10, 15]:
    # Appends a string version of the number to the list
    number_strings.append(str(n))

print(number_strings)   # ['5', '10', '15']"
Write a Python program to convert an array of objects into an array of JSON string.,"import json

def array_obj_to_json(arr):
    json_arr = []
    for obj in arr:
        json_arr.append(json.dumps(obj))
    return json_arr"
Create an algorithm in Python that takes an array of integers and `finds the pair that equals the given target.,"def find_pair(arr, target): 
    for i in range(0, len(arr)): 
        for j in range(i + 1, len(arr)): 
            if arr[i] + arr[j] == target: 
                return (arr[i], arr[j]) 

result = find_pair([1, 4, 8, 10], 14) 
print(result)"
Write a Python program to encrypt a plaintext using Advanced Encryption Standard (AES).,"from Crypto.Cipher import AES 

plaintext = ""This is a secret message""
key = b""Sixteen Byte Key""

cipher = AES.new(key, AES.MODE_ECB) 
encrypted_text = cipher.encrypt(plaintext.encode('utf-8')) 

print(encrypted_text.hex())

# Output
c3a40f3dce503efa1f00561d60e579b9"
Write a function to find the volume of a cylinder.,"def volume_cylinder(r,h):
  volume=3.1415*r*r*h
  return volume"
Generate a program in Python to find the median of a list of numbers.,"def median(nums):
    nums.sort()
    length = len(nums)
 
    if length % 2 == 0:
        return (nums[length//2] + nums[(length//2)-1])/2.0
    else:
        return nums[length//2] 

list = [5, 8, 2, 7, 4]
med = median(list)
print('The median of the list is ' + str(med))"
Create a Python function that checks whether a given list contains any repeated elements.,"def has_duplicates(arr): 
    # Create an empty set 
    s = set() 
  
    # Traverse through the list 
    for item in arr:
        # If the element is present 
        # in the set then it is a duplicate 
        if item in s:
            return True 
        else:
            s.add(item) 

    # No duplicate element found 
    return False"
Write a function to convert an integer into a roman numeral.,"def int_to_roman( num):
        val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]
        syb = [""M"", ""CM"", ""D"", ""CD"",""C"", ""XC"", ""L"", ""XL"",""X"", ""IX"", ""V"", ""IV"",""I""]
        roman_num = ''
        i = 0
        while  num > 0:
            for _ in range(num // val[i]):
                roman_num += syb[i]
                num -= val[i]
            i += 1
        return roman_num"
Rewrite the following Java program in Python to calculate the area of the triangle.,"def area(b, h):
    return 0.5 * b * h"
Construct a python dictionary containing student names and marks as key-value pairs.,"student_marks = { 
    ""John"" : 90, 
    ""Levi"" : 85, 
    ""Jill"" : 95, 
    ""Sara"" : 75
}"
Create a Python program to fetch the data from a web page and store it into a dictionary.,"import requests

url = ""https://example.com/data""

response = requests.get(url)
data = response.json()

data_dict = {}
for item in data:
    data_dict[item['id']] = item
    
print(data_dict)"
"Using Python, create a program to classify numbers as positive, negative or zero according to user input","def classify(num):
 if num > 0:
 return ""positive""
 elif num < 0:
 return ""negative""
 else:
 return ""zero""

n = int(input(""Please enter a number: ""))
result = classify(n)
print(result) # Prints ""positive"" if n is positive, ""negative"" if n is negative and ""zero"" if n is zero"
"Create a Python program to calculate the cost of an order given the items ordered, the tax rate and the shipping cost.","def calculate_cost(items, tax_rate, shipping_cost):
    total_cost = 0
    for item in items:
        total_cost += item[1] * item[2]
    
    total_cost *= (1 + tax_rate)
    total_cost += shipping_cost
    return total_cost"
Create a function in Python that takes two numbers as input and returns a dictionary with all the prime numbers between them.,"def prime_numbers(x, y):
 
 prime_nums = {}
 
 for i in range(x, y+1):
 if(i > 1):
 for j in range(2, i):
 if(i % j == 0):
 break
 else:
 prime_nums[i] = i
 
 return prime_nums
 
print(prime_numbers(8, 20))
# { 8: 8, 11: 11, 13: 13, 17: 17, 19: 19 }"
Implement a Python function to find the smallest element in an array,"def findSmallest(arr):
    smallest = arr[0]
    for i in arr:
        if i < smallest:
            smallest = i
    return smallest

findSmallest([3, 5, 2, 1, 4])
# Output: 1"
Generate a Python script for setting up a basic web server for hosting static content.,"#!/usr/bin/env python


import http.server

# Set the port number
port_number = 8080

# Create the HTTP server
server_address = ('', port_number)
httpd = http.server.HTTPServer(server_address, http.server.SimpleHTTPRequestHandler)

print('Server started on port {}'.format(str(port_number)))

# Run the HTTP server
httpd.serve_forever()"
Write a Python program to find the number of days in a month using a given year and month.,"import calendar

def days_in_month(year, month):
    return calendar.monthrange(year, month)[1]"
"Given an array of strings, write a program in Python to calculate the number of occurrences for each string.","words = ['Hello', 'World', 'Hello', 'World', 'Foo', 'Bar']

from collections import Counter
word_count = Counter(words)

for word, count in word_count.items():
 print(f'{word} : {count}')"
Write a Python program to print the following string pattern.,"for i in range(3):
    for j in range(3):
        if (i == j) or (i + j == 2):
            print('*', end="""")
        else:
            print('_', end="""")
    print()"
Construct an algorithm in Python to compute the maximum profit from selling a stock within a specific period of days.,"def max_profit(prices):
    min_price = float('inf') 
    max_profit = 0
    
    for price in prices:
        min_price = min(min_price, price)
        max_profit = max(max_profit, price - min_price)
        
    return max_profit

prices = [8, 12, 4, 5, 7, 10, 9]
print(max_profit(prices))"
Write a Python program to convert a given string to one of its equivalent shell script command,"def string_to_shell_command(string):
    split_string = string.split()
    command_name = split_string[0]
    input_args = split_string[1:]
    command_args = ''
    for arg in input_args:
        command_args += f'""{arg}""' + ' '
    return f'{command_name} {command_args}'"
"Define 2 functions, one called prod() and the other called total(), using Python. prod() should return the product of two numbers, while total() should take a list of numbers as an argument and return the sum of all the numbers in the list.","def prod(a, b):
    return a*b

def total(mylist):
    sum = 0
    for num in mylist:
        sum += num
    return sum"
Create a Python program which takes in two integers and prints out the sum.,"def compute_sum(x, y):
    return x + y

a = int(input(""Enter the first number: ""))
b = int(input(""Enter the second number: ""))

print(""The sum of the 2 numbers is:"", compute_sum(a, b))"
"Construct a Python class named Person which contains the instance variables name, age, and gender.","Class Person:
    def __init__(self,name,age,gender):
        self.name = name
        self.age = age
        self.gender = gender"
Rewrite a given code snippet in Python using a list comprehension.,my_list = [i ** 2 for i in range(10)]
Write a class in python which implements the following stack data type with all necessary methods.,"class Stack:
 def __init__(self):
 self.stack = []
 
 def push(self, item):
 self.stack.append(item)
 
 def pop(self):
 return self.stack.pop()
 
 def peek(self):
 return self.stack[-1]
 
 def is_empty(self):
 return self.stack == []
 
 def size(self):
 return len(self.stack)"
Create a python program that takes in a list of strings and returns a list of strings with all duplicates removed.,"def remove_duplicates(lst):
    new_lst = []

    for item in lst:
        if item not in new_lst:
            new_lst.append(item)

    return new_lst

result = remove_duplicates([""a"", ""b"", ""c"", ""a"", ""b"", ""d""])
print(result)"
Convert the following function from Python to Java.,"public List<Integer> generateList(int size) {
    /* Generate a list of integers from 0 to size - 1. */
    List<Integer> list = new ArrayList<>();
    for (int i = 0; i < size; i++) {
        list.add(i);
    }
    return list;
}"
Design a program to validate a user's phone number in Python.,"import re

def is_valid_phone_number(phone_number):
 pattern = re.compile(""^[0-9]{3}-[0-9]{3}-[0-9]{4}$"")
 match = pattern.match(phone_number)
 return bool(match)"
Create an array containing the numbers from 1 to 10 using Python,"array = [1,2,3,4,5,6,7,8,9,10]"
Create a Python program to search a string and print the index of all instances of a specific character.,"def search_character(string, character):
 indices = []
 for i in range(len(string)):
  if string[i] == character:
   indices.append(i)
 return indices

print(search_character(string, character)) # [3]"
Suggest a Python version of the following JavaScript code.,"def double(x):
  return x * 2"
Write a function in Python to compute the nth Fibonacci number.,"def fibonacciNum(n): 
    if n <= 1: 
        return n 
    else: 
        return (fibonacciNum(n-1) + fibonacciNum(n-2)) 

n = 8
result = fibonacciNum(n) 
print(result)"
Create a script in Python to convert a given integer to its binary equivalent.,"def dec_to_bin(num): 
    if num > 1: 
        dec_to_bin(num // 2) 
    print(num % 2,end = '')

num = 19
dec_to_bin(num)"
Design a hash table in Python that can store a given key-value pair.,"class HashTable:
 def __init__(self):
 self.table = {}

 def put(self, key, value):
 self.table[key] = value

 def get(self, key):
 return self.table[key]

# example
hash_table = HashTable()
hash_table.put('apple', 'red')
hash_table.get('apple') # returns 'red'"
Identify a type of all the variables in the Python expression below.,The variable n is a float.
Write a python function to count positive numbers in a list.,"def pos_count(list):
  pos_count= 0
  for num in list: 
    if num >= 0: 
      pos_count += 1
  return pos_count "
Generate a python algorithm to predict the stock price for the given company.,"def predict_price(company):
    # Call an appropriate API
    company_data = request_api(company)
    # Use an appropriate ML algorithm
    model = build_model(company_data)
    # Get the prediction
    prediction = model.predict()
    return prediction"
"Write a python program that takes in two strings, s1 and s2, and returns a Boolean based on if s1 is a substring of s2.","def is_substring(s1, s2):
    return s1 in s2

substring = is_substring('foo', 'foobar')

print(substring) # Output: True"
Generate a Python decorator for calculating the time taken for a function to execute.,"import time

def timeit(func):
 def wrapper(*args, **kwargs):
 start = time.time()
 result = func(*args, **kwargs)
 end = time.time()
 print(f""Time taken for {func.__name__}: {end-start} seconds"")
 return result
 return wrapper"
Write a function to calculate the sum of series 1²+2²+3²+….+n².,"def series_sum(number):
 total = 0
 total = (number * (number + 1) * (2 * number + 1)) / 6
 return total"
Optimize and refactor an existing Python function.,"def factorial(n):
 if n == 0:
 return 1
 
 result = 1 
 while n > 0:
 result = result * n
 n = n - 1
 
 return result"
"Create a Python script that when executed, prints out the sum of the first 10 even numbers.","sum = 0
for i in range(2,21,2): #Range(start,stop-1,step size)
 sum += i

print(sum)"
"Write a Python program to check whether a given string starts with ""Hello"".","if 'Hello' in str1:
    print(""The string starts with 'Hello'"")
else:
    print(""The string does not start with 'Hello'"")"
Generate an optimised Python program to calculate the greatest common divisor (GCD) of two positive integers.,"def gcd(x, y): 
    if x == 0: 
        return y 
    return gcd(y % x, x) 
  
# Driver code 
a = 8
b = 4
print(""GCD of {0} and {1} is {2}"".format(a, b, gcd(a, b)))"
Generate a function which implements a backwards for loop in Python.,"def backwards_for_loop(n):
  for i in range(n, 0, -1):
    # Do something with i
    print(i)"
Develop a Python code to print a string in reverse order.,"str = ""Hello, World!""

# loop to iterate through string
for i in range(len(str)-1, -1, -1):
  print(str[i],end="""")

print()"
"Create a program in Python that given a list of integer inputs, sorts them in descending order.","list = [4, 9, 2, 6, 5]

# sort list in descending order
list.sort(reverse=True)

print(list) # [9, 6, 5, 4, 2]"
Write a Python program that can compare two lists of integers and identify any elements that appear in both lists.,"def find_common_elements(list1, list2):
    common_elements = []

    for e1 in list1:
        for e2 in list2:
            if e1 == e2:
               common_elements.append(e1)

    return common_elements

list1 = [1, 2, 3, 4, 5]
list2 = [2, 4, 6, 8]

print(find_common_elements(list1, list2))"
Build a Python script for searching a given element in an array.,"def searchElement(arr, x): 
  
    for i in range (len(arr)): 
  
        if arr[i] == x: 
            return i 
  
    return -1

arr = [3, 10, 7, 12] 
x = 7
index = searchElement(arr, x) 
if index != -1: 
    print(""Element"", x, ""found at index"", index )
else: 
    print(""Element not found"")"
Create a program in Python that counts the number of vowels in a given string.,"def count_vowels(string):
 vowels = ['a', 'e', 'i', 'o', 'u']
 return sum(string.count(x) for x in vowels)"
Construct a python program to approximate the probability of an event happening,"import random

def approximate_probability(event, iterations):
    num_occurences = 0
    for i in range(iterations):
        if event():
            num_occurences += 1
    return num_occurences / iterations"
Generate a Python script that takes two numbers as arguments and returns the greatest common divisor.,"def gcd(a, b):
 if b == 0:
 return a
   
 return gcd(b, a % b)
 
a = 21
b = 15

print(gcd(a, b))"
Optimize this code in Python to increase its performance.,"def double_word(word):
    doubled_word = """"
    for char in word:
        doubled_word += char + char
    return doubled_word"
Create a Python script to generate 10 random passwords. The script should prompt the user to enter a length for the passwords.,"import random
import string

def generate_password(length=8):
 password = ''.join(random.choice(string.ascii_letters + string.digits + string.punctuation) for i in range(length))
 return password

length = int(input('Please enter a length for the passwords (minimum 8 characters): '))
for i in range(10):
 print(generate_password(length))"
Write a Python program to print all combinations of three numbers from the given list.,"import itertools 
  
# initializing list 
num_list = [1, 2, 3, 4] 
  
# printing all possible combinations 
result = itertools.combinations(num_list, 3) 
  
# printing the result 
print(""All possible combinations are : "") 
for item in result: 
    print(item)"
Construct an algorithm in Python to sort the characters of a string in alphabetical order.,"def sort_string(string):
    # convert string to list
    chars = list(string)
    # sort the list 
    chars.sort()
    # return the sorted string
    return ''.join(chars)

sorted_string = sort_string('abzcdr')
print(sorted_string)"
Implement a simple python program to split a string on a punctuation symbol.,"def split_on_punctuation(s):
    #Using re module
    import re
    out = re.split('[,]',s)
    return out

print(split_on_punctuation('Hello,World!'))"
Design a Python script to compute the sum of prime numbers below 1000,"def is_prime(num): 
    if num == 1: 
        return False
    elif num == 2: 
        return True
    else: 
        for n in range(2, num): 
            if (num % n == 0): 
                return False
        return True

sum = 0
for num in range(2, 1000):
    if is_prime(num): 
        sum += num 

print(""Sum of prime numbers below 1000:"", sum)"
Develop a Python function to calculate the area of a rectangle given its length and width.,"def calculate_rectangle_area(length, width):
    return length * width"
Write a python program that implements the following function:,"def merge_sorted_lists(list1, list2):
    merged_list = []

    while list1 and list2:
        if list1[0] < list2[0]:
            merged_list.append(list1.pop(0))
        else:
            merged_list.append(list2.pop(0))

    merged_list += list1 + list2

    return merged_list"
Generate a Python program that accepts a user input and checks if the input is a valid email address.,"import re

def is_valid_email(email):
  pattern = re.compile(r""[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+"")
  match = pattern.match(email)
  return match != None

user_input = input(""Enter your email address: "")
if is_valid_email(user_input):
  print(""Valid email address!"")
else:
  print(""Invalid email address!"")"
Write the following into python code,"for i in range(1,11):
    print(i)"
Write a Python program to accept a string input from the user and print each character in a list.,"user_input = input(""Enter a string: "")

char_list = []

for char in user_input:
 char_list.append(char)

print(char_list)"
Create a function in Python to build an empty dictionary.,"def buildDictionary():
  dictionary = dict()
  return dictionary"
Create a function in Python that takes in an array of integers and returns the odd numbers from that array.,"def get_odd_numbers(arr):
    # Create an empty list to store the odd numbers
    odd_numbers = []

    # Iterate through and check for odd numbers
    for num in arr:
        if num % 2 != 0:
            odd_numbers.append(num)
    
    return odd_numbers

arr = [1, 2, 3, 4, 5]

odd_numbers = get_odd_numbers(arr)

print('Odd numbers: ', odd_numbers)"
Create a program in Python to sort a list of tuples (words and their frequency) in descending order.,"def sortTuples(tuples):
    tuples.sort(key=lambda x: x[1],reverse=True)
    return tuples"
"Construct a Python function to filter out all the words from a list that contains the letter ""a"".","def filter_words_with_a(words):
 return [word for word in words if ""a"" in word]"
Create a Python program that calculates the sum of the digits of a European Union VAT number.,"vat_number = ""DE1905303456""

vat_number_without_check_digit = vat_number[:-1]

sum = 0
for c in vat_number_without_check_digit:
 if c.isdigit():
 sum += int(c)

print(f'Sum of digits: {sum}')"
Write a Python snippet to print the difference between the largest and smallest values in a given array.,"def diff_max_min(numbers):
    return max(numbers) - min(numbers)
  
if __name__ == '__main__':
    nums = [1,2,3,4,5]
    diff = diff_max_min(nums)
    print(diff)"
"Develop a function in Python that takes a list of integers, computes the cumulative sum, and prints the result.","def cumulative_sum(lst):
    sum = 0
    for i in lst:
        sum += i
        print(sum)

cumulative_sum([1, 2, 3, 4, 5])"
"Generate code in Python to accept student information like name, age, course and print it.","name = ""John Doe""
age = 23
course = ""Data Science""

print(""Name: "" + name)
print(""Age: "" + str(age))
print(""Course: "" + course)"
Write a python function to count number of substrings with the sum of digits equal to their length.,"from collections import defaultdict
def count_Substrings(s,n):
    count,sum = 0,0
    mp = defaultdict(lambda : 0)
    mp[0] += 1
    for i in range(n):
        sum += ord(s[i]) - ord('0')
        count += mp[sum - (i + 1)]
        mp[sum - (i + 1)] += 1
    return count"
Write a Python program to implement a given sorting algorithm,"def insertion_sort(arr):
    for i in range(1, len(arr)): 
        key = arr[i] 
        j = i-1
        while j >=0 and key < arr[j] : 
                arr[j+1] = arr[j] 
                j -= 1
        arr[j+1] = key 

arr = [9, 8, 7, 6, 5, 4, 3, 2, 1]
insertion_sort(arr)"
Create a Python class to represent a time series data set.,"class TimeSeries:
    def __init__(self, values):
        self.values = values
    
    def get_values(self):
        return self.values"
Create an example of a two dimensional array in Python.,"array_2d = [[1,2,3], [4,5,6], [7,8,9]]"
Automate this Excel task using Python.,"import pandas as pd

# Read data
df = pd.read_csv(""data.csv"")

# Perform tasks
df['result'] = df['column2'] + df['column2']

# Write the result
df.to_csv(""result.csv"", index=False)"
Construct a decision tree model using a given dataset using Python.,"import numpy as np
import pandas as pd
from sklearn import tree

# Load the dataset
data = pd.read_csv(""data.csv"")

# Create target variable
target = data[""target""]

# Create feature variables
features = data.drop(columns = [""target""])

# Create decision tree model
model = tree.DecisionTreeClassifier()
model.fit(features, target)"
Write a Python program that will replace all the numbers greater than 5 in an array with 0.,"def replace_numbers(arr):
 for i, num in enumerate(arr):
  if num > 5:
   arr[i] = 0

replace_numbers(arr)
print(arr) # [1, 4, 0, 0, 0, 0]"
Write a function in python for finding a substring of a given string,"def find_substring(string, sub_string):
  indices = []
  for i in range(0, len(string)-len(sub_string)+1):
    if (string[i:i+len(sub_string)] == sub_string):
      indices.append(i)
  return indices

print(find_substring(""Hello World"", ""lo Wo""))"
Write Python code to create an array of 10 numbers with random values between 1 and 100.,"import random

arr = [random.randint(1, 100) for _ in range(10)]"
Generate a python program that can predict the approximate square root of a given number.,"def sqrt(x): 
    root = x 
    epsilon = 0.0001
    while abs(x - root * root) > epsilon:
        root = (x/root + root)/2
    return root"
Write a function to verify validity of a string of parentheses.,"def is_valid_parenthese( str1):
        stack, pchar = [], {""("": "")"", ""{"": ""}"", ""["": ""]""}
        for parenthese in str1:
            if parenthese in pchar:
                stack.append(parenthese)
            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:
                return False
        return len(stack) == 0"
"Create a Python program to grade a multiple choice test with 4 options for each question, and each correct answer is worth 3 points.","def grade_test(questions):
    score = 0
    for question in questions:
        if question['answer'] == question['correct_answer']:
            score += 3
    return score"
Write a Python program to print even numbers from 0 to the number provided,"def print_even_numbers(N):
    for x in range(0, N+1):
        if x%2 == 0:
            print(x)"
Write an IPv4 address verification function in Python.,"def check_valid_ip(ip_addr): 
    ip = ip_addr.split(""."") 
    if(len(ip) == 4 and 
        int(ip[0]) <= 255 and 
        int(ip[1]) <= 255 and 
        int(ip[2]) <= 255 and 
        int(ip[3]) <= 255): 
        return True
    else: 
        return False"
Write a Python program to remove an item from a dictionary based on its key.,"def remove_from_dict(dictionary, key):
    if key in dictionary.keys():
        del dictionary[key]"
"Write a python script to calculate the sum of an array of integers, ignoring any negative numbers.","def sum_without_negatives(arr):
    total = 0
    for n in arr:
        if n >= 0:
            total += n
    return total

array = [-4, 1, 6, 2, -9, 5]
print(sum_without_negatives(array))"
Write a script in Python that creates a class with five methods.,"class MyClass:
  def __init__(self):
    pass
    
  def foo(self, arg1, arg2):
    pass
    
  def bar(self, arg1, arg2, arg3):
    pass
    
  def fizz(self, arg1, arg2, arg3, arg4):
    pass
    
  def buzz(self, arg1, arg2, arg3, arg4, arg5):
    pass"
Create an algorithm in Python that prints a multiplication table.,"for x in range(1, 11):
 for y in range(1, 11):
 print(str(x) + ""x"" + str(y) + ""="" + str(x * y))

print(""The multiplication table of 8:"")

for x in range(1, 11):
 print(str(x) + ""x"" + ""8"" + ""="" + str(x * 8))"
Create a list comprehension in Python for finding the cube of first 10 even numbers.,"cube_even_numbers = [num**3 for num in range(2, 21, 2)]"
Implement a Python program that solves the classic Towers of Hanoi problem.,"def hanoi(n, from_tower, to_tower, aux_tower):
 if n == 1:
  print(f""Move disk 1 from {from_tower} to {to_tower}"")
  return

 hanoi(n - 1, from_tower, aux_tower, to_tower)
 print(f""Move disk {n} from {from_tower} to {to_tower}"")
 hanoi(n - 1, aux_tower, to_tower, from_tower)


num_disks = 4
hanoi(num_disks, 'Tower 1', 'Tower 2', 'Tower 3')"
Create a list comprehension expression for adding two lists in Python.,list3 = [list1[i] + list2[i] for i in range(len(list1))]
Create a web crawler in Python to find all the hyperlinks in a given web page.,"import requests
from bs4 import BeautifulSoup

def get_all_links(url):
    html_page = requests.get(url)
    soup = BeautifulSoup(html_page.content, 'html.parser')
    links = []
    for link in soup.findAll('a'):
        links.append(link.get('href'))
    return links 

print(get_all_links('http://example.com'))"
Rewrite the code snippet below in Python so that it takes advantage of list comprehension.,"items = [1, 2, 3, 4, 5]
new_items = [item**2 for item in items]"
"Write a Python program to print a Fibonacci sequence with a length of n, where n is a given number that is equal to or greater than 0.","def fibonacci(n):
 # Base Case
 if n == 0: 
 return []
 elif n == 1: 
 return [0] 

 # Recursive Case
 else: 
 l = fibonacci(n-1) 
 l.append(l[-1]+l[-2]) 
 return l

# Driver Program 
n = 5
print(fibonacci(n)) 
# Output: [0, 1, 1, 2, 3]"
Write a Python program to list all months of the current year.,"months = [""January"", ""February"", ""March"", ""April"", ""May"", ""June"", ""July"", ""August"", ""September"", ""October"", ""November"", ""December""]
for month in months:
    print(month)"
Develop a Python algorithm to find the maximum element in a given array.,"def find_max_element(arr):
    maxElement = arr[0]
    for val in arr:
        if val > maxElement:
            maxElement = val
    return maxElement"
Create a boolean filter in Python which returns true if the input is a two-letter word.,"def two_letter_filter(word):
    if len(word) == 2:
        return True
    else:
        return False"
Design a python program to create a new pair of integers from a given pair,"def create_pair(a,b):
    c = a+1
    d = b+1
    return (c, d)"
Create a web scraper in Python to scrape the content from a website,"import requests
from bs4 import BeautifulSoup

def scraper(url):
    response = requests.get(url)
    soup = BeautifulSoup(response.content, 'html.parser')
    for article in soup.find_all('article'):
        print(article.text)

if __name__ == ""__main__"":
    scraper(""https://www.example.com"")"
Write a function to find out the second most repeated (or frequent) string in the given sequence.,"from collections import Counter 
	
def second_frequent(input): 
	dict = Counter(input) 
	value = sorted(dict.values(), reverse=True)  
	second_large = value[1] 
	for (key, val) in dict.items(): 
		if val == second_large: 
			return (key) "
"Convert the following code from Java to Python:

public class HelloWorld {
 public static void main(String[] args) {
 System.out.println(""Hello World"");
 }
}","def main():
 print(""Hello World"")

if __name__ == ""__main__"":
 main()"
Develop a Python program which takes two inputs and returns the minimum number that is evenly divisible by both numbers.,"def lcm(m, n):
    if m > n:
        greater = m
    else:
        greater = n

    while(True):
        if((greater % m == 0) and (greater % n == 0)):
            lcm = greater
            break
        greater += 1

    return lcm

M = 6
N = 12

lcm(M, N)"
Create a Python program to compress a given data sequence.,"def compress_sequence(nums):
    output = []
    temp = []

    for i in range(1, len(nums)):
        if nums[i-1] * nums[i] >= 0:
            temp.append(nums[i-1])
        else:
            temp.append(nums[i-1])
            output.append(temp)
            temp = []
    temp.append(nums[i])
    output.append(temp)

    return output

print(compress_sequence([9, -2, 6, 0, -7]))"
Write a function to find perfect squares between two given numbers.,"def perfect_squares(a, b):
    lists=[]
    for i in range (a,b+1):
        j = 1;
        while j*j <= i:
            if j*j == i:
                 lists.append(i)  
            j = j+1
        i = i+1
    return lists"
Create a code to calculate the area of the triangle with given side lengths.,"# Python Program to find the area of triangle
a = 3
b = 4
c = 5
# calculate the semi-perimeter
s = (a + b + c) / 2
# calculate the area
area = (s*(s-a)*(s-b)*(s-c)) ** 0.5
print('The area of the triangle is %0.2f' %area)"
"Input an array of numbers, and build a function in Python to replace all even numbers with 0.","def replace_even(arr):
    for i in range(len(arr)):
        if arr[i] % 2 == 0:
            arr[i] = 0
    return arr

result = replace_even([4, 10, 15, 20])
print(result)"
"Design a compressed data structure in Python that supports basic operations like insert, search and delete.","class CompressedDataStructure():
 def __init__(self):
  self.data = {}

 def insert(self,key,value):
  self.data[key] = value

 def search(self,key):
  if key in self.data:
   return self.data[key]
  else:
   raise KeyError

 def delete(self,key):
  del self.data[key]"
Optimize the following python code for a more efficient solution.,"def to_square(nums):
    squares = [num * num for num in nums]
    return squares"
"Write a function to find all three, four, five characters long words in the given string by using regex.","import re
def find_char(text):
  return (re.findall(r""\b\w{3,5}\b"", text))"
Write a Python program to sum up the prime numbers below 100.,"def sum_prime_numbers(limit):
  sum = 0
  for num in range(2, limit + 1):
    if all(num % i != 0 for i in range(2, num)):
      sum += num
  return sum

print(sum_prime_numbers(100))"
Create a Python package that can be used to capture screenshots of a browser window.,"import pyautogui
import time

class Screenshot:
    def capture(self, browser, save_path):
        # take a screenshot of the browser
        im = pyautogui.screenshot(region=(0, 0, 1920, 1020))
        # save the screenshot
        im.save(save_path + str(time.time()) + '.png')
        # return the path of the image
        return save_path + str(time.time()) + '.png'"
Create a Python program to identify the most frequently occurring item in a list.,"def most_frequent(list): 
  return max(set(list), key = list.count)
  
most_frequent([3,4,3,4,3])"
Create a program in Python to generate prime numbers between 1 to N,"def isPrime(n):
    i = 2
    while i*i <= n:
        if n % i == 0:
            return False
        i += 1    
    return True

def printPrimes(N):
    for i in range (2, N+1):
        if isPrime(i):
            print(i, end="" "")

printPrimes(10)"
"Design a text editor in Python that prints ‘Corrected’ if a correct sentence is entered, and ‘Incorrect’ if an incorrect sentence is entered","def text_editor():
  sentence = input(""Enter the sentence: "")
  is_correct = check_correctness(sentence)
  
  if is_correct:
    print(""Corrected"")
  else:
    print(""Incorrect"")

def check_correctness(sentence):
  # code to check the correctness of the sentence

  return is_correct"
Create a Python REST API endpoint that accepts a POST request with data in JSON format and prints the data on the console.,"from flask import Flask, request

app = Flask(name)

@app.route('/api', methods=['POST'])
def post_data():
 data = request.get_json()
 print(data)
 return 'Data printed in console'

if name == 'main':
 app.run(debug=True)"
"Create a Python script for a calculator that can add, subtract, multiply and divide two numbers.","def calculator(num1, num2, op):
    if op == ""+"":
        return num1 + num2
    elif op == ""-"":
        return num1 - num2
    elif op == ""*"":
        return num1 * num2
    elif op == ""/"":
        return num1 / num2
    else:
        raise Exception(""Invalid operator"")"
Create a Python script that takes an input of two numbers and returns the pair in a list.,"def pair(num_1, num_2):
 return [num_1, num_2]

print(pair(10, 20))"
Write a python function to find the element occurring odd number of times.,"def get_Odd_Occurrence(arr,arr_size):   
    for i in range(0,arr_size): 
        count = 0
        for j in range(0,arr_size): 
            if arr[i] == arr[j]: 
                count+=1     
        if (count % 2 != 0): 
            return arr[i]     
    return -1"
Create a function to perform list sorting using Python.,"def sortList(list):
    list.sort()
    return list

sortedList = sortList([4, 5, 2, 1, 3])
print(sortedList)"
Write a Python program to split a string on any whitespace.,"def splitOnWhitespace(inputString):
	words = inputString.split()
	return words

stringToBeSplit = ""Python is an interpreted language.""
words = splitOnWhitespace(stringToBeSplit)
print(words) // Output: ['Python', 'is', 'an', 'interpreted', 'language.']"
Write a Python program to match a given pattern in a given string.,"import re

string = ""ABCDDEFG""
pattern = ""AB*EFG""
match = re.search(pattern, string)
 
if match:
    print(""Pattern found!"")
else:
    print(""Pattern not found!"")"
Create a search engine in Python to search a collection of documents for a given keyword.,"import string

def search(docs, key):
 results = []
 for doc in docs:
 words = doc.lower().translate(str.maketrans('', '', string.punctuation)).split()
 if key in words:
 results.append(doc)
 return results"
Construct a Python script to process a given json data-set.,"import json

def process_json(data):
    result = {}
    for key, value in data.items():
        if type(value) == dict:
            result[key] = process_json(value)
        else:
            result[key] = value
    return result"
Design a node class to represent a single node in a linked list in Python,"class Node:
    def __init__(self, data):
        self.data = data
        self.next = None"
Create a function to print the even numbers in a given range using Python.,"def printEvenNumbers(start, end):
    for i in range(start, end + 1):
        if (i % 2 == 0):
            print(i, end="" "")"
Write a Python program to filter out strings longer than 15 characters from a list of strings.,"new_list = []
for string in strings:
 if len(string) <= 15:
 new_list.append(string)

print(new_list)  # prints ['good', 'very good', 'excellent', 'awesome']"
Write a python script to segregate a list of numbers into lists odd and even numbers.,"odd_numbers = []
even_numbers = []

for number in list_of_numbers:
    if number % 2 == 0:
        even_numbers.append(number)
    else:
        odd_numbers.append(number)

print(""Odd numbers: "" + str(odd_numbers))
print(""Even numbers: "" + str(even_numbers))"
Write a Python program that prints all unique pairs that sum up to a given number.,"def unique_pairs(number):
    pairs = set()
    for i in range(number + 1):
    	for j in range(number + 1):
            if i + j == number and (j, i) not in pairs:
                pairs.add((i, j))
    return pairs"
Edit the python code below to increase efficiency.,"arr = [24, 6, 15, 72, 5]
sum = 0

for num in arr:
    if num % 2 == 0:
        sum += num"
Write a Python script that finds the minimum sum of an array of integers.,"def min_sum_array(arr):
 minimum = arr[0]
 total = 0

 for i in range (0, len(arr)):
  element = arr[i]
  if element < minimum:
   minimum = element
   total += element
 
 return total

arr = [13, -2, 7, -6, 5]
min_sum = min_sum_array(arr)
print(min_sum) # Output: -11"
Design a program in Python to traverse a matrix.,"inputMatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

#traversing the matrix
for row in inputMatrix:
    for column in row:
        print(column, end="" "")
    print()"
Create a Python program to find the minimum number of steps required to make all array elements equal.,"def min_steps(arr):
    min_step = 0
    min_val = min(arr)
    for i in range(len(arr)):
        min_step += arr[i] - min_val 
    
    return min_step"
Program a function in Python that takes an array and shuffles its elements.,"import random

def shuffleArray(array):
    for i in range(len(array)):
        randomIdx = random.randint(0,len(array)-1)
        temp = array[i]
        array[i] = array[randomIdx]
        array[randomIdx] = temp
    return array"
Modify an existing python script to count the number of words in a given sentence.,"def count_words(sentence):
    words = sentence.split(' ')
    return len(words)

sentence = ""One two three four five""
word_count = count_words(sentence)
print(""The number of words in the sentence is: "", word_count)"
Create a Python program to multiply a matrix by its inverse.,"import numpy as np

def inverse_multiplication(matrix):
    inverseM = np.linalg.inv(matrix) 
    result = np.matmul(matrix, inverseM) 
    return result

matrix = [[3, 4],
          [2, 16]]

result = inverse_multiplication(matrix)
print(result)"
Create a function in Python which takes a user input and sorts it in ascending order.,"def my_function(values):
    sorted_values = sorted(values)
    return sorted_values

if __name__ == ""__main__"":
    values = [int(value) for value in input().split(',')]
    print(my_function(values))"
Write a Python program to search a list of strings for a given string.,"list = [""dog"", ""cat"", ""bird""]
target = ""bird""

for element in list:
    if element == target:
        print(""Target string found: {}"".format(target))
        break"
Write a python code to replace all the occurences of an element in a list with a given number.,"def replace_elem_in_list(data, elem, val):
  return [val if x==elem else x for x in data]

print(replace_elem_in_list([1,2,3,3], 3, 0))
# Output: [1, 2, 0, 0]"
Write a Python program to detect whether a given number is a palindrome.,"def is_palindrome(n):
    n = str(n)
    return n == n[::-1]

print(is_palindrome(""middle""))"
Write a python function to find k number of operations required to make all elements equal.,"def min_Ops(arr,n,k): 
    max1 = max(arr) 
    res = 0
    for i in range(0,n):  
        if ((max1 - arr[i]) % k != 0): 
            return -1 
        else: 
            res += (max1 - arr[i]) / k 
    return int(res) "
Create a function in Python that takes two strings as parameters and returns true if one string is the reverse of the other.,"def is_reverse(string1, string2):
    return string1[::-1] == string2"
Write a function to check if the given tuple has any none value or not.,"def check_none(test_tup):
  res = any(map(lambda ele: ele is None, test_tup))
  return (res) "
Create a Python script that takes a string as an input and outputs a list of words that all contain at least one vowel.,"['Hello', 'name', 'John']"
Create a python code to find the intersection of two sets.,"# Create two sets
set1 = {1,2,3,4,5}
set2 = {3,4,5,6,7}

# Find the intersection
intersection = set1 & set2

# Print the result
print(intersection)"
How can you make the given Python code more efficient?,"def calculate_sum(numbers):
    return sum(numbers)"
Write a function in Python to find out the longest word in a string,"def longestWord(str):
    words = str.split()
    max_len = 0
    for word in words:
        if len(word) > max_len:
            max_len = len(word)
    for word in words:
        if len(word) == max_len:
            return word"
Create a function in Python that takes a list of strings and for each string appends the first letter to the end of the string.,"def append_first_letter_end(list_of_strings):
 new_list_of_strings = []
 for string in list_of_strings:
 new_string = string + string[0]
 new_list_of_strings.append(new_string)
 return new_list_of_strings"
Create a Python script to generate a global unique identifier (GUID).,"import uuid
 
# generate a GUID
guid = str(uuid.uuid4())
 
# print the GUID
print(guid)

// Output: 3c112f3d-3c68-4b4c-a85d-672622be9f25"
Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.,"def count_char_position(str1): 
    count_chars = 0
    for i in range(len(str1)):
        if ((i == ord(str1[i]) - ord('A')) or 
            (i == ord(str1[i]) - ord('a'))): 
            count_chars += 1
    return count_chars "
Write a Python code to find the nearest integer to a given number.,"def nearest_integer(number):
 if number - int(number)>= 0.5:
 return int(number) + 1
 else:
 return int(number)"
Write a function to remove everything except alphanumeric characters from a string.,"import re
def remove_splchar(text): 
 pattern = re.compile('[\W_]+')
 return (pattern.sub('', text))"
"Write a Python program to find the number of different ways to express n as the sum of 1, 3 and 4.","def countWays(n):  
 if (n == 0): 
 return 1
 elif (n < 0): 
 return 0
 else: 
 return countWays(n-1) + countWays(n-3) + countWays(n-4)

n = 8
result = countWays(n)

print(""The number of different ways to express"", n, ""as the sum of 1, 3 and 4 is:"", result)"
Design a program in Python to filter a given array of integers and output only the even numbers.,"def filterEvenNo(arr): 

  # return a list containing only even numbers
  return [num for num in arr if num % 2 == 0]"
Create a Python program to calculate the sum of all odd numbers between 1 and a given number.,"def calculate_sum_of_odd_numbers(max_number):
    
    sum_of_odd_numbers = 0
    for num in range(1, max_number + 1):
        if num % 2 != 0:
            sum_of_odd_numbers += num
    return sum_of_odd_numbers

print(calculate_sum_of_odd_numbers(15))"
Identify the bug in the following Python program and suggest an appropriate fix.,"def func1(list):
    s = 0
    for x in list:
        s+= x
    return s

l = [2, 3]
result = func1(l)
print(result)"
Write a Python program to filter out the words of length greater than 5 from a given list of words,"def filter_long_words(words):
  return [word for word in words if len(word) > 5]"
Construct a program to sort a given list in Python.,"def sort_list(list): 
    for i in range(len(list)-1): 
        for j in range(0, len(list)-i-1):
            if list[j] > list[j+1] : 
                list[j], list[j+1] = list[j+1], list[j]
list = [3, 7, 1, 4, 5]
sort_list(list)
print(list)"
Create a python program which takes in a given list and finds the 3 most frequent elements in the list.,"from collections import Counter

def find_most_frequent(lst): 
    counter = Counter(lst) 
    topthree = counter.most_common(3)
    return topthree

find_most_frequent([3, 7, 5, 6, 2, 1, 5, 6, 3, 9])"
Write a python function which will check if input string is palindrome or not.,"def is_palindrome(input_string):
    if input_string == input_string[::-1]:
        return True
    else:
        return False
    
input_string = ""racecar""

check_palindrome = is_palindrome(input_string)

if check_palindrome == True:
    print(""Input string is a palindrome"")
else:
    print(""Input string is NOT a palindrome"")"
Modify a Python program to add a minimum value of 10 to each element in a list.,"list = [x + 10 for x in [1, 2, 3, 4]]"
Compose python code that efficiently resolves the specified task:,"def gcd(x, y):
        while(y):
            x, y = y, x % y

        return x

# Driver Code 
num1, num2 = map(int, input().split())

print(gcd(num1, num2))"
Implement a class in Python to represent a rectangle with two fields: width and height.,"class Rectangle:
    def __init__(self, width, height):
        self.width = width
        self.height = height
    
    def area(self):
        return self.width * self.height"
Create a Python script that takes in a user-specified temperature in Fahrenheit and prints out the corresponding temperature in Celsius.,"def fahrenheit_to_celsius(temp_f):
 return (temp_f - 32) * 5 / 9

temp_f = float(input('Enter temperature in Fahrenheit:'))
temp_c = fahrenheit_to_celsius(temp_f)

print(f'{temp_f}F = {temp_c}C')"
Edit an existing Python code so that it is more efficient and optimized for run time.,"def average(arr):
    return sum(arr) / len(arr)"
Create a code snippet in Java to parse a comma-separated string into a list of strings.,"String str = ""Ruby,Python,JavaScript"";
List<String> list = Arrays.asList(str.split("",""));

// Output 
// [Ruby,Python,JavaScript]"
Develop a process in Python to classify a set of data points into two categories.,"def classifier(data_points):
 categories = []
 for data_point in data_points:
 if data_point % 2 == 0:
 categories.append('even')
 else:
 categories.append('odd')
 return categories"
Create a Python class for parsing email addresses.,"import re

class EmailParser:
 def __init__(self, email):
 self.email = email
 
 def parse_username(self):
 return re.search('(.*)@', self.email).group(1)
 
 def parse_domain(self):
 return re.search('@(.*)', self.email).group(1)

# Usage
parser = EmailParser(""john@example.com"")
print(parser.parse_username())
# john
print(parser.parse_domain())
# example.com"
Write a script to measure temperature from a device using python,"def measure_temperature(data):
    temp_c = data[0]
    temp_f = data[1]
    temp_k = data[2]
    return temp_c, temp_f, temp_k"
Generate a Python script for calculating the GCD and LCM of two numbers,"# Function to calculate GCD and LCM of two numbers
def gcd_lcm(a, b): 
    if a > b:
        small = b
    else:
        small = a
    for i in range(1, small+1):
        if((a % i == 0) and (b % i == 0)): 
            gcd = i 
              
    lcm = int(a*b)/int(gcd) 
    return gcd, lcm

# Driver Code
a = 8
b = 12

gcd, lcm = gcd_lcm(a, b)
print(""GCD:"", gcd)
print(""LCM:"", lcm)"
Create a algorithm in Python to convert any given number to binary form.,"def toBinary(n): 
    if (n > 1): 
        toBinary(n//2) 
    print(n%2,end = '') 
 
# Driver Code 
num = 8
toBinary(num)"
Construct a mini-search engine in Python using regular expressions.,"import re

# Input text
text = ""This is my text and I am looking for a search term""

# Search term
search_term = ""search""

# Use regular expression to find search term
pattern = re.compile(search_term)
result = pattern.findall(text)

# Print result
print(result)"
Create a program in Python to count the number of time a particular character appears in a given string.,"def count_char_in_string(string, char):
    count = 0
    for i in range(len(string)):
        if string[i] == char:
            count += 1
    return count

string = ""Hello, World!""
char = ""l""
count = count_char_in_string(string, char)
print(""The number of times"", char, ""appears in the string is:"", count)"
Create a Python class that implements a queue data structure.,"class Queue:
    def __init__(self):
        self.items = []
 
    def isEmpty(self):
        return self.items == []
 
    def enqueue(self, item):
        self.items.insert(0,item)
 
    def dequeue(self):
        return self.items.pop()
 
    def size(self):
        return len(self.items)"
Write a function to find the nth nonagonal number.,"def is_nonagonal(n): 
	return int(n * (7 * n - 5) / 2) "
"Given a number, write a Python program to print the multiplication table of that number.","for i in range(1, 11):
 print(5, 'X', i, '=', 5*i)"
Modify the following Python code to remove the duplicate elements from the list,"L = [1, 2, 2, 3, 4, 4] 

L = list(set(L)) 

print(L)"
Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.,"def find_length(string, n): 
	current_sum = 0
	max_sum = 0
	for i in range(n): 
		current_sum += (1 if string[i] == '0' else -1) 
		if current_sum < 0: 
			current_sum = 0
		max_sum = max(current_sum, max_sum) 
	return max_sum if max_sum else 0"
Generate a CPython code for reversing a given list of numbers.,"def reverse_list(nums):
  return nums[::-1]"
Create a program in Python to sort a given list of words alphabetically,"def sort_words(words):
    words.sort()
    return words

words = [""Computer"", ""Science"", ""Engineering"", ""Technology""]
sorted_words = sort_words(words)
print(sorted_words) # Output: ['Computer', 'Engineering', 'Science', 'Technology']"
Write a Python program to find the common elements between two given lists.,"def find_common_elements(list1, list2):
    common = [x for x in list1 if x in list2]
    return common"
Generate a list of prime numbers up to a given number using a Python program.,"def prime_numbers (number):
    prime_list = []
    for num in range(2, number + 1):
        if num > 1:
            for i in range(2, num):
                if (num % i) == 0:
                    break
            else:
                prime_list.append(num)
    return prime_list

number = 50
print(prime_numbers(number))"
Write a function to find the third side of a right angled triangle.,"import math
def otherside_rightangle(w,h):
  s=math.sqrt((w*w)+(h*h))
  return s"
Generate a Python program for reversing a string.,"string = ""Hello World""

# get length of the string
length = len(string)

# create an empty string
reverse = """"

# loop backword through the string
for i in range(length-1, -1, -1):
 # add current character to empty string
 reverse = reverse + string[i]

# print out the result
print(reverse)"
Create a Python program to compare two lists and return the common elements between them.,"def compare_lists(list1, list2):
 common_elements = []
 for element in list1:
 if element in list2:
 common_elements.append(element)
 return common_elements

list1 = [1, 2, 3, 4]
list2 = [2, 3, 4, 5]
print(compare_lists(list1, list2))"
Develop a program in Python to extract the substring between two given strings,"import re

input_string = ""This is an example string""
start_string = ""an""
end_string = ""string""

 regex = re.compile(start_string + '(.*?)' + end_string)
result = re.search(regex, input_string) 
if result: 
    print(result.group(1))"
Develop a Python program to detect if an entered number is even or odd.,"even_or_odd = int(input(""Please enter a number: ""))
if even_or_odd % 2 == 0:
  print(""The number is Even."")
else:
  print(""The number is Odd."")"
Generate an algorithm in Python to convert the given temperature from Fahrenheit to Celsius.,"def Fahrenheit_to_Celsius(Fahrenheit):
    Celsius = (Fahrenheit - 32) * 5/9
    return Celsius
  
Fahrenheit = 32
Celsius = Fahrenheit_to_Celsius(Fahrenheit)
print(""Celsius:"",Celsius)"
Rewrite the following python code into JavaScript.,"let leader_info = {
    ""name"": ""Diana Prince"",
    ""job"": ""Leader""
};"
"Write a Python program to generate a random password of 10 characters. The password should include at least two uppercase characters, two lowercase characters, two digits, and two special characters.","import string
import random

length = 10
characters = string.ascii_lowercase + string.ascii_uppercase + string.digits + '!""#$%\'&()*+,-./:;<=>?@[]^_`{|}~'

password = ''.join(random.choice(characters) for i in range(length))

print(password)  # Output: K>~L}U>Q#3"
"Create a Python program that takes in two strings, and find out all the characters that occur in both strings.","s1 = set([i for i in s1])
s2 = set([i for i in s2])
common = list(s1.intersection(s2))
print(""The following characters occur in both the words: "" + ', '.join(common))"
Identify the language being used in the following code snippet.,Python
Create a data structure to efficiently store and manipulate a set of strings.,"# Create an empty set 
str_set = set() 
  
# Add elements to the set
str_set.add(""Python"") 
str_set.add(""Java"") 
str_set.add(""C#"") 
str_set.add(""JavaScript"") 

# Check for the presence
if ""Python"" in str_set: 
    print(""Python is present"") 
  
# Remove elements from the set
str_set.remove(""Java"") 

# Print the set
print(""Set of strings: "", end = "" "") 
for i in str_set: 
    print(i, end ="" "")"
Write a Python function to validate an a list of emails. The function should return a boolean indicating whether a given email address is valid.,"def validate_mail_list(mail_list):
    for mail in mail_list:
        if not re.match(""[^@]+@[^@]+\.[^@]+"", mail):
            return False
    return True"
"Generate a Python script that takes in a list of numbers, rearranges them in ascending order, and prints out the result.","def sort_list(nums): 
    # Sort list in ascending order
    nums.sort()
    
    # Print out the sorted list
    for num in nums: 
        print(num) 
  
# Test the function
nums = [3, 2, 5, 7, 1, 4]
sort_list(nums)"
Write a code to implement linear search in a 1-d array in Python.,"def linearSearch(arr, target):
    for i in range(len(arr)):
        if arr[i] == target:
            return i
    return -1

print(linearSearch([1,2,3,4], 3)) # Output: 2"
Create a class for a person in Python which includes name and age as attributes.,"class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

p = Person(""John"", 18)
print(p.name, p.age)"
Come up with an optimal algorithm in Python to sort an array of integers.,"def sort_array(arr):
    # Bubble Sort Algorithm
    n = len(arr)
    
    for i in range(n-1):
        for j in range(n-i-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
    
    return arr

# Example Usage
input_array = [3,8,10,1,7,4]
print(sort_array(input_array)) # Output: [1, 3, 4, 7, 8, 10]"
"Create a Python function that takes two numbers, n and m, and prints out the first n odd numbers between 0 and m (both inclusive).","def printOddNumbers(n, m):
    nums = []
    for i in range(m):
        if i%2 != 0 and len(nums) < n:
            nums.append(i)
    return nums

print(printOddNumbers(3, 10))"
Create a Python program that sorts 3 numbers user inputted in ascending order.,"# get 3 numbers
num1 = int(input(""Please enter number 1: ""))
num2 = int(input(""Please enter number 2: ""))
num3 = int(input(""Please enter number 3: ""))

# sort numbers
sorted_nums = sorted([num1, num2, num3])

# print sorted numbers
print(*sorted_nums, sep=', ')"
Compute the Least Common Multiple of two numbers.,"# Python3 code to find LCM
def compute_lcm(x, y):
   # choose the greater number
   if x > y:
       greater = x
   else:
       greater = y

   while(True):
       if((greater % x == 0) and (greater % y == 0)):
           lcm = greater
           break
       greater += 1

   return lcm

lcm = compute_lcm(15, 10)
print(""The Least Common Multiple of 15 and 10 is: "",lcm)"
Write a Python program to vertically center an aligned text by inserting padding spaces above and bottom of the text.,"space = "" "" * 10
lines = inp.split('\n')
padded = '\n'.join(space + line + space for line in lines)
print(padded)"
Create a Python program to read 2 numbers from the user and calculate their sum.,"num1 = int(input(""Enter first number: ""))
num2 = int(input(""Enter second number: ""))
 
# Adding two numbers
sum = num1 + num2
 
print(""Sum of {0} and {1} is {2}"" .format(num1, num2, sum))"
Generate a Python class to compare two strings.,"class StrComparer:
    def __init__(self, str1, str2):
        self.str1 = str1
        self.str2 = str2
    
    def is_same(self):
        if self.str1 == self.str2:
            return True
        else:
            return False"
Make a network request using Python and retrieve the name of the user who is currently logged in.,"import requests

url = 'http://example.com/api/userdata'

userdata = requests.get(url).json()
name = userdata['name']

print(name)"
Create a function in Python to mask out any personal information from sensitive data.,"def mask_information(data):
  masked_data = """"
  for char in data:
    if char.isdigit():
      masked_data += 'x'
    else:
      masked_data += char
  return masked_data

masked_data = mask_information('John Smith,123-456-7890')
print(masked_data) // John Smith,xxx-xxx-xxxx"
Design a program in Python to check whether an input number is a prime number.,"def is_prime(n):
    for i in range(2,n):
        if n % i == 0:
            return False
    return True"
Write a Python code to convert a numeric string to number.,"def convert_string_to_number(str):
    try: 
        return int(str)
    except ValueError:
        try:
            return float(str)
        except ValueError:
            return ""String could not be converted to number.""

str = input(""String: "")
print(""Number:"", convert_string_to_number(str))"
"Given a Python dictionary structure, construct a program that returns the key with the highest numerical value","d = {hello:1, goodbye:2, test:3}

max_key = None
max_value = 0
for key, value in d.items():
    if value > max_value:
        max_key = key
        max_value = value

print(max_key)"
Modify the following code in Python to only repeat a segment of the code while a certain user input is given.,"# Get user input
input = input('Enter ""repeat"" to repeat the code: ')

# Execute the code while user input is ""repeat"" 
while input == 'repeat':
	print(""Hello World"")
	input = input('Enter ""repeat"" to repeat the code: ')"
Write a Python program to filter a list by a given criteria.,"def filter_list(mylist, criteria):
    result = []
    for item in mylist:
        if eval(criteria):
            result.append(item)
    return result
    
list = [1,4,5,6,7,14,15] 
criteria = ""x > 5""

filtered_list = filter_list(list, criteria)
print(filtered_list) # [6, 7, 14, 15]"
Implement an algorithm in Python to calculate the Fibonacci sequence.,"def Fibonacci(x): 
    if x <= 0: 
        return 0
    elif x == 1: 
        return 1
    else: 
        return Fibonacci(x-1) + Fibonacci(x-2)"
Write an algorithm in Python to count the number of occurrences of a given element in a given array.,"def count_occurrences(array, element): 
    count = 0
    for i in range(len(array)): 
        if array[i] == element: 
            count += 1
    return count"
Write a Python program to print a given dictionary where the keys are numbers between 1 and 3 and the values are a list from 1 to the number key.,"d = {1: [1], 2: [1,2], 3: [1,2,3]}
for k,v in d.items():
    print(k,v)"
Generate a Python function that takes a sentence (string) as input and outputs a list of all the distinct words in the sentence.,"def distinct_words(sentence):
 words = sentence.split()
 distinct_words = []
 for word in words:
  if word not in distinct_words:
   distinct_words.append(word)
 return distinct_words"
Generate an algorithm in Python that sorts the given array of numbers in the non-decreasing order.,"def bubble_sort(arr): 
    n = len(arr)
  
    for i in range(n-1): 
        for j in range(0, n-i-1): 
            if arr[j] > arr[j+1] : 
                arr[j], arr[j+1] = arr[j+1], arr[j] 
  
arr = [1, 9, 3, 8, 4]

bubble_sort(arr) 

print (""Sorted array is:"") 
for i in range(len(arr)): 
    print (""%d"" %arr[i])"
Optimize this Python code to reduce the running time.,"def find_max_value(array, start, end):
    max_value = -float('inf')
    for i in range(start, end):
        max_value = max(max_value, max(array[i][start:end]))
    return max_value"
"Create a Python program that, given an input integer, will print out a dictionary with the numbers from 1 to the input value and their squares.","def create_dict_squares(number):
    squares_dict = {}

    for i in range(1, number + 1):
        squares_dict[i] = i**2

    return squares_dict"
Write a Python function to calculate the harmonic mean of two numbers.,"def harmonic_mean(x, y):
    return 2.0 * (x * y) / (x + y)

harmonic_mean_value = harmonic_mean(7, 9)

print(harmonic_mean_value)"
Write a Python script to search a given dictionary for a given word.,"def search_word(word, dictionary):
    if word in dictionary.keys():
        return dictionary[word]
    else:
        return None

dictionary = {'hello': 'string', 'goodbye': 'bye'}

word = 'hello'

result = search_word(word, dictionary)

if result:
    print('Word found in dictionary: ' + result)

else:
    print('Word not found in dictionary.')"
"Using the NumPy library in Python, calculate the mean of the following array.","import numpy as np

arr = np.array([2, 4, 7, 8, 9])

mean = np.mean(arr)

print(mean) # 6.2"
Configure a Python program to calculate the sum of all integers from 1 to 100.,"def calculate_sum():
    sum = 0
    for i in range(1, 101):
        sum += i
    return sum"
Design a python program to implement a Greedy algorithm,"def greedy(jobs):
    jobs.sort(key=lambda x: x[1]/x[0], reverse=True)
    result = []
    time = 0
    for j in jobs:
        time += j[0]
        result.append((j[0], j[1], time))
        
    return result

jobs = [(3, 10), (4, 15), (2, 5)]
print(greedy(jobs))"
Generate a python program to compute the nth fibonacci number in the sequence.,"def fibonacci(n):
	if n == 0:
		return 0
	elif n == 1:
		return 1
	else:
		return fibonacci(n-1) + fibonacci(n-2)

# compute the 7th fibonacci number
print(fibonacci(7)) # Output: 13"
Can you write a Python script to sort a list of strings alphabetically?,"strings = [""Hello"", ""Yes"", ""No"", ""World""]

strings.sort()

print(strings)"
Write a Python function to find all possible n-letter words from a given list of letters.,"def find_words_length_n(letters, n):
    words = set()
    for combo in itertools.combinations_with_replacement(letters, n):
        for perm in itertools.permutations(combo):
            words.add("""".join(perm))
    return words

words = find_words_length_n([""a"",""b"",""c""], 2)
print(words)"
Write a Python program to replace all the white spaces in a given string with the '*' character.,"str = 'This is a sample string'

new_str = str.replace(' ', '*')

print(new_str) // This*is*a*sample*string"
Create a class in Python which can convert any given Fahrenheit temperature to degree Celsius.,"class FahrenheitToCelsius:
  def __init__(self, temp_fahrenheit):
    self.temp_fahrenheit = temp_fahrenheit

  def fahrenheit_to_celsius(self):
    temp_celsius = (self.temp_fahrenheit - 32) * 5 / 9
    return temp_celsius"
Create a python script that returns the most commonly used words in a given text.,"def mostCommonWords(text):
    words = text.split()
    counts = {word: words.count(word) for word in words}
    return sorted(counts.items(), key=lambda x: x[1], reverse=True)

input = ""This is a sentence with some words used more often than others.""

result = mostCommonWords(input)
print(result)"
Create a Python script to whitelist a specific user from a list of users.,"def whitelist_user(user_list, whitelist_user):
    Whitelisted_users = []
    for user in user_list: 
        if user == whitelist_user:
            Whitelisted_users.append(user)
    
    return Whitelisted_users"
Construct a python program which prints the reverse of the given string,"def reverse_string(s): 
    string = """" 
    for i in s: 
        string = i + string 
    return string"
Write a Python function to count the number of substrings of a given string that contains exactly K distinct characters.,"def count_substrings_with_k_distinct_characters(in_str, k):
    count = 0
    for i in range(len(in_str)-k+1):
        sub_str = in_str[i:i+k]
        if len(set(sub_str)) == k:
            count +=1 
    return count

count = count_substrings_with_k_distinct_characters(""abcabcabcabc"", 2)
print(count)"
Implement a function in Python that takes a string as a parameter and capitalizes the first letter of each word in the string.,"def capitalize(input_string):
    if len(input_string) == 0:
        return ''
    else:
        words = input_string.split()
        capitalized_words = [word.capitalize() for word in words]
        return ' '.join(capitalized_words)

print(capitalize('The quick brown fox'))"
"Write a Python code snippet to create a shallow copy of the following dictionary: {‘a’: 1, ‘b’: 2}.","import copy

original_dict = {'a': 1, 'b': 2}

shallow_copy_dict = copy.copy(original_dict)"
Create a function in Python to remove duplicate elements from a list.,"def removeDuplicates(list):
  newList = []
  for element in list:
    if element not in newList:
      newList.append(element)
  return newList"
Analyze the given Python code and correct any errors so that the code runs correctly.,"def main():
 nums = range(0,10)
 for num in nums:
  print(""The square of"", num,""is"", num * num)

main()"
Create a Python program that will generate a random password from the given set of characters.,"import random

def generate_random_password(characters=""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+{}:""):
    password = """"
    for _ in range(8):
        password += random.choice(characters)
    return password"
Write Python code to print the number present in an inputted string.,"def print_numbers_in_string(string):
    numbers = [int(s) for s in string.split() if s.isdigit()]
    print(numbers)

string_1 = ""The temperature is 24 degrees Celsius""
print_numbers_in_string(string_1)

# Output
# [24]"
Translate the following pseudocode to Python language.,"def find_max_val(array):
    n = len(array)
    max_val = array[0]
    for i in range(1, n):
        if array[i] > max_val:
            max_val = array[i]
    return max_val

if __name__ == '__main__':
    array = [1, 2, 3, 4, 5]
    print(find_max_val(array))"
Create a program in Python to print all elements of a given set.,"my_set = {10, 20, 30}
for i in my_set:
    print(i)"
"Given two unsorted lists, create a Python program to identify the common elements between them.","def common_elements(list1, list2):
 return [element for element in list1 if element in list2]

common_elements(list1, list2) # Output: [2, 6]"
Write a python program to classify an object based on its features.,"def classify_object(features, classes):
    max_feature = max(features)
    index = features.index(max_feature)
    return classes[index]

print(classify_object([2.5, 4.5, 2.5], [""apple"", ""orange"", ""pear""]))"
Write a function to find numbers within a given range where every number is divisible by every digit it contains.,"def divisible_by_digits(startnum, endnum):
    return [n for n in range(startnum, endnum+1) \
                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]"
Generate a python function to find the maximum of two numbers,"def get_max(a,b):
    if a > b:
        return a
    else:
        return b

# main program
a = 4
b = 5
result = get_max(a,b)
print(result)"
Create a Python program to generate an infinite sequence of numbers in a Fibonacci-like pattern.,"def fibonacci():
    a, b = 0, 1
    while True:
        yield b
        a, b = b, a + b

for num in fibonacci():
    print(num)"
Create a class in Python to represent a student and a method that calculates their grade.,"class Student:
 def __init__(self, assignments, tests, projects):
 self.assignments = assignments
 self.tests = tests
 self.projects = projects

def calculate_grade(self):
 total = (self.assignments * 0.3) + (self.tests * 0.4) + (self.projects * 0.3)
 return total"
Create a Python program for calculating the Fibonacci sequence. The program should print the n-th number of the sequence.,"def fibonacci(n): 
 if n <= 0: 
 return 0 
 elif n == 1: 
 return 1 
 else: 
 return fibonacci(n-1) + fibonacci(n-2) 

n = 7 
print(fibonacci(n)) # Output: 13"
Edit this python code to be more efficient.,"data = [1, 2, 3, 4]

result = [x for x in data if x > 2]"
Write a Python program that prints out the longest word in a sentence.,"sentence = ""The quick brown fox jumped over the lazy dog""

words = sentence.split()
longest_word = ''
for word in words:
    if len(word) > len(longest_word):
        longest_word = word
print(longest_word)"
Optimize a Python function to calculate the square of a number for maximum performance.,"def square(x):
 return x * x
 
# Using the exponentiation operator
def square_op(x):
 return x ** 2
 
# Using bit-shift operator
def square_shift(x):
  return x << 1

# Using multiplication
def square_mul(x):
 return (x + x) * x
 
# Using pow() built-in
def square_builtin(x):
 return pow(x, 2)"
Design a program in Python to delete an element from the give list.,"def delete_element(arr, element): 
    new_arr = [i for i in arr if i!=element]
    return new_arr"
Implement a Python program to create a dictionary containing teams and their wins.,"teams_wins = {
    'A's': 56, 
    'B's': 24, 
    'C's': 32,
    'D's': 27
}"
Design a python code to remove a character from a given string.,"def remove_char(s, char):
    s = s.replace(char, '')
    return s

remove_char(s, 'l')"
Create a function in Python that takes a string as parameter and returns 'True' if the string contains at least one number.,"def contains_number(string):
    return any(char.isdigit() for char in string)"
Write a Python program that takes two lists and performs a comparison between them.,"def compare_lists(lst1, lst2): 
    lst1 = set(lst1) 
    lst2 = set(lst2) 
    same = lst1.intersection(lst2)
    diff1 = lst1.difference(lst2)
    diff2 = lst2.difference(lst1)
    return same, diff1, diff2

result = compare_lists([1,2,3], [2,3,4]) 
print(result)"
Design a python program that reverses the input sentence,"def reverse_sentence(sentence):
    words = sentence.split("" "")
    words = list(reversed(words))
    return "" "".join(words)

reverse_sentence(""This is a sentence"")  # returns ""sentence a is This"""
Develop a Python script to get the length of a given string.,"def get_string_length(str):
    return len(str)

get_string_length(""How are you?"")"
Generate a list of all prime numbers below 100 with Python.,"def getPrimes(n):
    primes = []
    for num in range(2, n + 1):
        for idx in range(2, num):
            if num % idx == 0:
                break
        else:
            primes.append(num)
    return primes

print(getPrimes(100))"
"Write a Python code to convert the given number to hours, minutes and seconds.","my_number = 3600

def convert_to_time(number):
    hours = number // 3600
    minutes = (number % 3600) // 60
    seconds = (number % 3600) % 60
    return hours, minutes, seconds

print(convert_to_time(my_number))"
Create a GUI using Tkinter in Python that displays a message when a button is pressed.,"import tkinter as tk

root = tk.Tk()

def displayMessage():
    print(""Button was pressed!"")

button = tk.Button(root,text=""Press Me"",width=25,command=displayMessage)
button.pack()

root.mainloop()"
Write a function to convert snake case string to camel case string.,"def snake_to_camel(word):
        import re
        return ''.join(x.capitalize() or '_' for x in word.split('_'))"
Write a Python program to calculate the area of a circle when a user inputs its radius.,"def calculate_area_circle(radius): 
    pi = 3.14
    area = pi * (radius * radius) 
    return area 
  
# Output
print(""Area of circle is: "", calculate_area_circle(10))"
Write a python function to find sum of product of binomial co-efficients.,"def binomial_Coeff(n,k): 
    C = [0] * (k + 1); 
    C[0] = 1; # nC0 is 1 
    for i in range(1,n + 1):  
        for j in range(min(i, k),0,-1): 
            C[j] = C[j] + C[j - 1]; 
    return C[k]; 
def sum_Of_product(n): 
    return binomial_Coeff(2 * n,n - 1); "
Design a function in Python to delete duplicate characters from a given string.,"def delete_duplicate(str):
    temp_str = """"
    for i in range(0, len(str)):
        if str[i] not in temp_str:
            temp_str += str[i]
    return temp_str

input_string = ""w3python""
result = delete_duplicate(input_string)

print(""After deleting duplicate character, string is:"", result)"
Develop a Python function to count number of digits in a number.,"def count_digits(number):
    count = 0
    while (number > 0):
        number = number // 10
        count = count + 1
    return count

num = 8594
print(""Number of digits : "", count_digits(num))"
Create a python program to find the longest consecutive 1s in a binary number.,"def max_ones(num):
    count = 0 
    result = 0
    for i in range(len(num)):
        if num[i] == '1':
            count += 1 
            result = max(result, count)
        else:
            count = 0 
    return result

num = '10101010001'
print(max_ones(num))"
Design a function in Python for deleting all empty directories.,"import os

def delete_empty_dirs(path):
    for root, directories, files in os.walk(path):
        for directory in directories:
            joined_path = os.path.join(root, directory)
            try:
                os.rmdir(joined_path)
            except OSError:
                # Directory not empty
                pass"
How would you design a Python program to filter out string elements from a given array of string elements?,"def filter_out_strings(lst):
  new_lst = []
  for item in lst:
    if item not in new_lst:
      new_lst.append(item)
  return new_lst

filtered_list = filter_out_strings(lst) 
print(filtered_list) # Output -> ['apple', 'zoo', 'banana', 'foo']"
Can you create a function in Python to find the area of a triangle given the three sides?,"def area_triangle(a, b, c):
	s = (a + b + c)/2

	area = math.sqrt(s*(s-a)*(s-b)*(s-c))
	return area

area = area_triangle(3, 4, 5)
print(""The area of the triangle is: {}"".format(area))"
Create a Python program to convert a number to its corresponding month name.,"def num_to_month(num):
    months = [
        'January', 
        'February', 
        'March', 
        'April', 
        'May', 
        'June', 
        'July', 
        'August', 
        'September', 
        'October', 
        'November', 
        'December'
    ]
    return months[num - 1]

print(num_to_month(2)) # February"
Design a program in Python that can ask the user to enter 10 numbers and then find the average of those 10 numbers.,"numbers = []
# Ask the user to enter 10 numbers
for i in range (10):
    numbers.append(int(input(""Enter number #"" + str(i+1) + "": "")))

# Calculate and print the average of the numbers
mean = sum(numbers)  / len(numbers)
print(""Mean:"", mean)"
Create a Python script that prints the top three words from a given sentence.,"import collections

sentence = ""This is a really long sentence with many words.""

# Split the given sentence into a list of words
words = sentence.split("" "")

# Count the occurrence of each word
word_freq = collections.Counter(words)

# Print out the top three words
for word, count in word_freq.most_common(3):
    print(f'{word}: {count}')"
Modify the Python code below to reverse the string input.,"string = “hello world” 
# Reverse the string 
rev_string = """" 
for char in string: 
 rev_string = char + rev_string 

# Print the reversed string 
print(rev_string)"
Construct a code to filter a string for only numerical characters in Python.,"def filter_string(string):
    filtered_string = ''
    for c in string:
        if c.isdigit():
            filtered_string += c
    return filtered_string

print(filter_string(""4x4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s""))"
Create a Python 3 program to calculate the Fibonacci sequence up to the given number.,"def Fibonacci(n): 
    # 0 and 1 are the first two numbers in 
    # the Fibonacci sequence
    if n<=0: 
        return 0
    elif n==1: 
        return 1
    else: 
        return Fibonacci(n-1)+Fibonacci(n-2)

# Number of terms to calculate 
n = 20
print(""Fibonacci sequence:"") 
  
for i in range(n): 
    print(Fibonacci(i),end="" "")"
Write a Python code to calculate the sum of two numbers.,"sum = 7 + 4
print(sum)"
Write a Python program to divide a list of numbers into two equal lists.,"list_a = [1,2,3,4,5]
list_b = [6,7,8,9,10]"
Create a Python script to calculate and display the distance between two points in 2-dimensional space.,"import math
 
def distance(p1,p2):
 x1,y1 = p1
 x2,y2 = p2
 d = math.sqrt((x2-x1)**2+(y2-y1)**2)
 return d
 
x1,y1 = (5,3)
x2,y2 = (2,2)
print(f""The distance between 2 points ({x1},{y1}) & ({x2},{y2}) is: {distance((x1,y1),(x2,y2))}"")

// Output:
The distance between 2 points (5,3) & (2,2) is: 3.1622776601683795"
"Based on a given input, create a function in Python to generate a random string of length 6.","import random
import string

def random_string(length):
    letters = string.ascii_lowercase
    return ''.join(random.choice(letters) for i in range(length))

random_string(6)"
Create a python code that can randomly select 10 numbers from a sequence of numbers from 1 to 100,"import random as rd

def random_selection(n):
    num_list = [i for i in range(1, n+1)]
    index_list = rd.sample(range(1, n+1), 10)
    
    selected_list = [num_list[i] for i in index_list]
    return selected_list"
Convert this C++ program to Python.,"a = int(input())
b = int(input())

print(a + b)"
Create a Python script to filter out all the vowels from a string.,"def filter_vowels(string):
     vowels = ('a', 'e', 'i', 'o', 'u')
     return ''.join(c for c in string if c not in vowels)"
Create a Python code to simulate a flip of a coin.,"import random

rand_num = random.randint(0,1)
if rand_num == 0:
    print(""Heads"")
else:
    print(""Tails"")"
Can you build an algorithm in Python that determines if a number is odd or even?,"def is_odd(number):
  if number % 2 == 0:
    return False
  else:
    return True"
Code a Bubble Sort routine in Python.,"def bubble_sort(unsorted_list): 
    n = len(unsorted_list) 
  
    for i in range(n): 
        for j in range(0, n-i-1): 
  
            if unsorted_list[j] > unsorted_list[j+1] : 
                unsorted_list[j], unsorted_list[j+1] = unsorted_list[j+1], unsorted_list[j] 
  
    return unsorted_list"
Write a Python program to create a dictionary with keys numbers and their squares as the values.,"def num_squares():
  squares_dict = {}
  for i in range(1,11):
    squares_dict[i] = i*i 
  return squares_dict"
Write a regex expression that matches the following string.,"regex = ""I love programming in Python\."""
Generate a Python source code to print the last element from a given list.,"arr = ['Apple', 'Orange', 'Banana']
last_element = arr[-1]
print(last_element)  # Result: Banana"
Write a Python script to generate a list of all possible 2D Point objects with coordinates between 1 and 10.,"points = []
 
for x in range(1, 11):
    for y in range(1, 11):
        points.append([x, y])
 
print(points)"
Write a python function to shift last element to first position in the given list.,"def move_first(test_list):
  test_list = test_list[-1:] + test_list[:-1]  
  return test_list"
Optimize the following Python code to make it more concise and easier to understand.,"def concat_items(items):
    # Use join() to join the elements in the given list with an empty string
    return """".join(items)"
Modify this Python code to add an exception for invalid input.,"def calculate(a, b):
    if b == 0:
        raise ZeroDivisionError
    elif b > 0:
        c = a / b
        return c
    else:
        raise ValueError"
Write an algorithm in Python to convert a given binary string to decimal number.,"def bin2dec(binary):
    decimal, i = 0, 0
    while binary != 0:
        dec = binary % 10
        decimal = decimal + dec * pow(2, i)
        binary = binary//10
        i += 1
    return decimal

binary = 11010
print(bin2dec(binary))"
Create a python program to trace any recursive function on the screen.,"def trace_function(F):
    def wrapper(*args, **kwargs):
        print(F.__name__ + str(args) + str(kwargs))
        value = F(*args, **kwargs)
        print(F.__name__ + "" returns "" + str(value))
        return value
    return wrapper"
Write a Python program to calculate the value of pi to n-digits of precision.,"import math

# Function to calculate Pi to n-digits of precision 
def pi_calculator(n): 
    pi = format(math.pi, '.' + str(n) + 'f') 
    return pi 
      
# Driver Code 
print(""The value of pi to 3 digits precision is:"", pi_calculator(3))"
Write a Python program to create a string from the last 3 characters of a given string.,"def last_characters(string):
 return string[-3:]"
Build a web scraper in Python to extract data from a given webpage.,"import requests
from bs4 import BeautifulSoup

# Make a request to the website and get the HTML
url = ""https://www.example.com""
response = requests.get(url)
html = response.content

# Parse the HTML using BeautifulSoup
soup = BeautifulSoup(html, 'html.parser')

# Extract data from tags which contain specific class names
data = soup.find_all('div', {""class"": ""example-class""})"
Create a program in Python to print the sum of all the multiples of 3 and 5 below 1000.,"sum = 0
for i in range(1000):
    if (i % 3 == 0 or i % 5 == 0):
        sum = sum + i

print(sum)"
Create a Python program to generate 10 unique and random integers.,"import random

def generate_random_ints():
 random_ints = []
 for _ in range(10):
 random_int = random.randint(1, 1000)
 while random_int in random_ints:
 random_int = random.randint(1, 1000)
 random_ints.append(random_int)
 return random_ints"
"Create a basic Python script that takes in a text string as input, counts the frequency of each word, and prints out the top 5 most frequent words.","import collections
import sys

def count_words(text):
 word_counts = collections.Counter(text.split())
 top_five = word_counts.most_common(5)
 for word, count in top_five:
 print(f'{word} occurred {count} times')

if __name__ == '__main__':
 text = sys.stdin.read()
 count_words(text)"
"Create a Python function that takes two parameters, an array and a search query and returns the indices of the array where the element matches with the search query.","def searchIndex(arr, searchQuery): 
  indices = []
  for i in range(len(arr)): 
    if arr[i] == searchQuery: 
      indices.append(i) 
      
  return indices
  
arr = [1, 2, 5, 3, 4]
searchQuery = 3

result = searchIndex(arr, searchQuery)
print(result)"
"Optimize the following code to improve its runtime:
```Python
for x in range(10):
    sum = 0
    for y in range(10):
        sum += y
    print sum
```","sum = 0
for y in range(10):
    sum += y
print sum
for x in range(10):
    print sum"
Develop a Python program to convert an integer from one binary representation to another.,"def decimal_to_binary(n): 
    return bin(n).replace(""0b"", """") 
 
def binary_to_decimal(n): 
    return int(n,2) 
 
input_decimal = 15
finding_binary = decimal_to_binary(input_decimal) 
 
result = binary_to_decimal(finding_binary) 
print(result)"
Write a Python program to generate a digital clock using the curses library.,"import curses

def main(screen):
 clock = curses.newwin(5, 40, 0, 0)
 clock.box()

 while True:
     clock.addstr(1, 1, time.ctime())
     clock.refresh()
     time.sleep(1)

curses.wrapper(main)"
Generate a random string containing only lowercase letters using Python.,"import string 
import random

def gen_random_string(length): 
    letters = string.ascii_lowercase
    return ''.join(random.choice(letters) for i in range(length)) 

print(gen_random_string(10))"
Write a function in Python to generate a histogram from a list of values.,"import matplotlib.pyplot as plt

def generateHistogram(data):
    plt.hist(data, bins='auto')
    plt.title(""Histogram"")
    plt.xlabel('Values')
    plt.ylabel('Number of Occurrences')
    plt.show()

generateHistogram(data)"
Write a Python program to print out the restults of a list of functions,"def print_results(functions, list): 
  for func in functions: 
    print(func.__name__ + "": "" + str(func(list)))
    
print_results(functions, list)"
Develop a python program that sorts a given list of words in lexicographic order.,"# Sort a list of words in lexicographic order
words = [""apple"", ""bike"", ""dog"", ""cat""]

# Sort the list
words.sort()

# Print the list
print(words)

# Output:
# ['apple', 'bike', 'cat', 'dog']"
Create a Python program that takes a list of tuples as input and generates a dictionary where each tuple is a key-value pair,"my_dict = {
 'apple': 'fruit',
 'goat': 'animal',
 'three': 'number'
}"
Generate a random string of length 10 using the string library of Python.,"import random
import string

def randomString():
    letters = string.ascii_lowercase
    length = 10
    return ''.join(random.choice(letters) for i in range(length))"
Create a program in Python to classify each item in a given list as either an even number or an odd number.,"def classify(lst):
    result = []
    for item in list:
        if item % 2 == 0:
            result.append(""even"")
        else:
            result.append(""odd"")
    return result"
Write a Python program optimize the following code using functional programming.,"from functools import reduce

# initialize the loop
num = 5

# call reduce()
solution = reduce(lambda i, _: i - 1, range(num + 1))

# print the result
print(solution)"
Write a function to convert camel case string to snake case string.,"def camel_to_snake(text):
        import re
        str1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', text)
        return re.sub('([a-z0-9])([A-Z])', r'\1_\2', str1).lower()"
Write a Python program to convert all units of temperature in a tuple from Celsius to Fahrenheit.,"def celsius_to_fahrenheit(c): 
    return (c * 9/5) + 32

temp_in_Fahrenheit = tuple(map(celsius_to_fahrenheit, temperature)) 
  
print(temp_in_Fahrenheit) # Output: (97.7, 98.6, 99.5, 100.04)"
Write a python program to generate all possible strings by combining the characters of two given strings.,"def combine_strings(str1, str2):
    result = [] 
    for i in range(len(str1)): 
        for j in range(len(str2)): 
            result.append(str1[i] + str2[j]) 
    return result"
Construct a function in Python which takes in a string and returns the number of vowels it has.,"def countVowels(string):
    
    vowels = 'aeiouAEIOU'
    count = 0

    for char in string:
        if char in vowels:
            count += 1
    
    return count"
Create an optimization algorithm in Python to calculate the minimum distance between two points.,"def distance(x1, y1, x2, y2):
 return ((x2 - x1)**2 + (y2 - y1)**2)**0.5

def get_minimum_distance(points):
 min_dist = sys.maxsize
 
 for i in range(len(points)):
 for j in range(i+1,len(points)):
 dist = distance(points[i][0], points[i][1], points[j][0], points[j][1])
 
 if dist < min_dist:
 min_dist = dist
 
 return min_dist"
Create a function in Python to solve the following constraint problem.,"def intersection(arr1,arr2): 
    result = 0
    resultSet = set(arr1) & set(arr2)
    result = len(resultSet)
    return result"
Write a python function to find the sum of an array.,"def _sum(arr):  
    sum=0
    for i in arr: 
        sum = sum + i      
    return(sum)  "
Can you suggest a Python class to store and validate data?,"class DataStorage:
    def __init__(self, data):
        self.data = data
        self._validate_data()
    
    def _validate_data(self):
        """"""Validates the data stored in the DataStorage object.""""""
        for key, value in self.data.items():
            if not isinstance(value, str):
                raise TypeError('All data must be strings')"
Create a program in Python to generate a table of multiplication up to 12 x 12.,"def multiplication_table():
    for i in range(1, 13):
        for j in range(1, 13):
            print(""{:>2}"".format(str(i*j)), end=' ')
        print()

multiplication_table()"
Write a function in Python to calculate the Gini coefficient of a dataset.,"def gini(data):
 data_sorted = sorted(data) 
 size = len(data_sorted) 
 cummulative_sum = 0
 max_sum=sum(data_sorted)
 gini_coefficient=0.0
 for i in range(size): 
  cummulative_sum += data_sorted[i]
  gini_coefficient+=(2*cummulative_sum-max_sum-data_sorted[i])/max_sum
 return gini_coefficient/(size - 1)

data = [1,1,1,2,3,4,4,5,6]
print(gini(data))

# Output: 0.3"
Write a Python function to generate the Fibonacci series till n-th term.,"def Fibonacci(n): 
	a = 0
	b = 1
	if n < 0: 
		print(""Incorrect input"") 
	elif n == 0: 
		return a 
	elif n == 1: 
		return b 
	else: 
		for i in range(2,n): 
			c = a + b 
			a = b 
			b = c 
		return b 

result = Fibonacci(7) 
print(result)"
Modify the following Python program to generate random numbers between 1 and 10 instead of 1 and 100.,"import random

for i in range(10):
 num = random.randint(1,10)
 print(num)"
Create an Python program that computes the median value of an array of numbers.,"def median(arr):
    arr.sort()
    if len(arr) % 2 != 0:
        return arr[int(len(arr)/2)]
    else:
        return (arr[int(len(arr)/2)] + arr[int(len(arr)/2)-1]) / 2

medianValue = median(arr)
print(medianValue)"
Suggest a code to create a series of Fibonacci numbers in Python.,"# Function to generate Fibonacci series 
def Fibonacci(n): 
    if n<0: 
        print(""Incorrect Input"") 
    # First two numbers of the series 
    elif n==1: 
        return 0
    elif n==2: 
        return 1
    else: 
        return Fibonacci(n-1)+Fibonacci(n-2) 
    
# Driver Program
print(Fibonacci(9))
 
# Output: 21"
Make a Python program to get the factors of a number,"def get_factors(n): 
    factors = [1]
    for i in range(2, n + 1):
        if (n % i == 0): 
            factors.append(i) 
    return factors"
Generate a unique random number in the range given.,"A unique random number in the given range can be generated using programming languages such as Python, JavaScript, etc. It will contain code to generate a random number in the given range, and then check if it has already been generated by maintaining a list of all generated numbers."
Create a Python program to prompt the user for a number and print out the corresponding Fibonacci sequence.,"def Fibonacci(n): 
 fibonacci_list = [0,1]
 for i in range(2,n): 
 next = fibonacci_list[i-1] + fibonacci_list[i-2] 
 fibonacci_list.append(next) 
 return fibonacci_list[n-1]

num = int(input('Input a number: '))
print(""The corresponding Fibonacci sequence is: "", Fibonacci(num))"
Construct a Python for loop to find the largest number in a list of given numbers.,"largest = 0
list = [3, 6, 8, 11, 12]

for i in list:
  if i > largest:
    largest = i

print(largest)"
Convert the following Python dictionary to a JSON string.,"{
    ""Name"": ""John"",
    ""Age"": 30,
    ""Cities"": [""New York"", ""London"", ""Paris""]
}"
Generate a Python program that searches a large list of strings to find those matching a given pattern.,"search_list = [""123 abc"", ""456 def"", ""789 ghi"", ""123 jkl"", ""456 mno"", ""789 pqr""]
pattern = ""456*""

matches = []
for item in search_list:
  if item.startswith(pattern):
    matches.append(item)

print(matches)"
Generate a Python function for computing the maximum value of two numbers.,"def find_max_value(num1, num2):
    if num1 > num2:
        return num1
    else:
        return num2"
Write a python program to find the type and value of a given variable.,"def find_type_and_value(x):
    t = type(x)
    v = x
    return t, v"
Create a Python program that will print out all of the prime numbers between 0 and 100.,"for num in range(2,101):
 prime = True
 for i in range(2,num):
  if (num%i==0):
   prime = False
 if prime:
  print(num)"
Optimize a given quicksort algorithm using Python,"def quicksort(arr):
 if len(arr) <= 1:
 return arr
 pivot = arr[len(arr) // 2]
 less_than_pivot = [x for x in arr if x < pivot]
 equal_to_pivot = [x for x in arr if x == pivot]
 greater_than_pivot = [x for x in arr if x > pivot]
 return quicksort(less_than_pivot) + equal_to_pivot + quicksort(greater_than_pivot)"
Write a Python program to classify the given data into two classes.,"def classify(data):
    # Fit your model on the data
    model.fit(data)
    # Return the predicted classes
    return model.predict(data)"
Construct a Python program that takes a list of words and prints the 3rd most common word in the list?,"import collections
def third_most_common(words):
    count = collections.Counter(words).most_common()
    return count[2][0]
third_most_common(words) # returns 'Bird'"
Write a python program to identify if a string s has matching parentheses,"def matching_paren(s):
    stack = []
    for char in s:
        if char == '(':
            stack.append(char)
        elif char == ')':
            if len(stack) == 0:
                return False 
            stack.pop()
    
    if len(stack) == 0:
        return True
    else:
        return False"
Create a loop in Python to print out all odd numbers from 0 to 10.,"for i in range(0, 11):
 if i % 2 != 0:
  print(i)"
Develop a Python code to compute the maximum of 3 numbers,"def maximum_of_three(number1,number2,number3):
max_value = number1
if number2 > max_value:
    max_value = number2
if number3 > max_value:
    max_value = number3
return max_value"
Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.,"def longest_subseq_with_diff_one(arr, n): 
	dp = [1 for i in range(n)] 
	for i in range(n): 
		for j in range(i): 
			if ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): 
				dp[i] = max(dp[i], dp[j]+1) 
	result = 1
	for i in range(n): 
		if (result < dp[i]): 
			result = dp[i] 
	return result"
Create a for loop in Python to print numbers between 0 and 10.,"for i in range(11): 
    print(i)"
Develop a Python function that can detect loops in a given linked list.,"def detectLoop(head):
    slow_p = head 
    fast_p = head 
    while(slow_p and fast_p and fast_p.next): 
        slow_p = slow_p.next
        fast_p = fast_p.next.next
        if slow_p == fast_p:
            return True
    return False"
Create a Python script to populate an array with random numbers from 1-100.,"import random

def populateArray(array_length):
 array = []
 for i in range(array_length):
 array.append(random.randint(1, 100))
 return array"
Optimize a given Python program to shorten its running time.,"def add_list(list_a, list_b):
    return [a + b for a, b in zip(list_a, list_b)]"
Generate a correct Python program to compute the maximum sub array sum,"def max_sub_array_sum(arr): 
    max_sum = 0
    for i in range(len(arr)): 
        ans = 0
        for j in range(i, len(arr)): 
            ans += arr[j]  
            max_sum = max(max_sum, ans) 
    return max_sum"
Can you create a Python function to interpolate a given string?,"def interpolate(str):
    return str.format(name=""world"")

input_str = ""Hello {{name}}""
print(interpolate(input_str)) // Output: ""Hello world"""
"Given a Python dictionary, find the most common value in the dictionary and print it out.","from collections import Counter 

d = {‘python’: 20, ‘java’: 10, ‘c++’: 15, ‘C#’: 15}

#Get most common value
data = Counter(d) 
most_common_value = data.most_common(1)[0][0]  

#Print out most common value
print(most_common_value)"
Write a function in Python that will take in two numbers and return their sum.,"def sum(num1, num2):
 return num1 + num2

sum(5, 10); // returns 15"
Implement a Fourier Transform algorithm in Python.,"import numpy as np

def fourierTransform(signal):
    N = signal.shape[0]
    W = np.exp(2j * np.pi * np.arange(N) / N)
    fourier = np.dot(signal, W)
    return fourier"
Create a python program to convert a decimal to its binary representation,"def decimal_to_binary(num):
    if num == 0:
        return 0
    binary = ''
    while num > 0:
        binary = str(num%2) + binary
        num //= 2
    return binary"
Convert the following JSON to a python dictionary.,"""""""
Convert the following JSON to a python dictionary.
""""""
import json

json_data = {
    ""name"": ""John"",
    ""age"": 30,
    ""hobbies"": [
        ""soccer"",
        ""playing guitar""
    ]
}

python_dict =  json.loads(json.dumps(json_data))
print(python_dict)"
Create an HTML form with a submit button to send information to a Python program.,"<form action=""action.py"" method=""post"">
    <input type=""submit"" value=""Submit"">
</form>"
Build a web application for tracking the stock market.,"# HTML 
<form action="""">
    <input type=""text"" name=""stockSymbol"" placeholder=""Enter a stock symbol"">
    <input type=""submit"">
</form>

# JavaScript 
function trackStock() {
    var stockSymbol = document.querySelector(""input[name=stockSymbol]"").value;
    // code to fetch stock quote and display it  
}

# Python
def getStockQuotes(stockSymbol):
    # code to fetch stock quote using an API 
    return stockQuote"
"Rewrite the following code in Python to sort a given array of integers in ascending order.
int arr[] = {2, 3, 4, 1, 5};","def bubble_sort(arr): 
    n = len(arr) 
    for i in range(n-1):
        for j in range(0, n-i-1):  
            if arr[j] > arr[j+1] :
                arr[j], arr[j+1] = arr[j+1], arr[j]
    return arr

arr = [2, 3, 4, 1, 5]
arr = bubble_sort(arr)
print(arr)"
Design a function in Python to find the minimum of three numbers.,"def find_min(a, b, c):
    if a<b and a<c:
        return a
    elif b<a and b<c:
        return b
    else:
        return c

min = find_min(2, -6, 4)
print(min)"
Write a Python program to compare two lists of strings and print unique values in each list.,"list1_unique = []
list2_unique = []

for a in list1:
    if a not in list2:
        list1_unique.append(a)
        
for b in list2:
    if b not in list1:
        list2_unique.append(b)

print(""Unique elements in List 1: "", list1_unique)
print(""Unique elements in List 2: "", list2_unique)"
Develop a Python program to convert a given list of strings to a single string.,"def list_to_string(my_list):
  return ' '.join(my_list)"
Write a Python program to generate all unique combinations of two numbers from a list.,"def generate_combinations(nums): 
    result = [] 
    for x in range(0, len(nums)): 
        for y in range(x + 1, len(nums)): 
            result.append([nums[x], nums[y]]) 
    return result 

nums = [1, 2, 3, 4]

result = generate_combinations(nums)

for item in result:
    print(item)

# output
[1, 2]
[1, 3]
[1, 4]
[2, 3]
[2, 4]
[3, 4]"
Suggest an web scraping algorithm for the following website.,"A useful strategy for web scraping this site would be to use the Python library requests to make HTTP requests and BeautifulSoup to parse the HTML content. First, you should make an HTTP request to the website, then you should use BeautifulSoup to find the specific elements you are interested in and extract the data."
Design an algorithm in Python that takes two input arrays and returns true if they have the same elements.,"def is_same_elements(arr1, arr2):
    return set(arr1) == set(arr2)

is_same_elements(arr1, arr2) # return True"
Write a function to convert a roman numeral to an integer.,"def roman_to_int(s):
        rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
        int_val = 0
        for i in range(len(s)):
            if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:
                int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]
            else:
                int_val += rom_val[s[i]]
        return int_val"
Develop a Python script to calculate the cosine similarity between two word vectors.,"import numpy as np 
  
a = np.array([0.5, 0.2, 0.7, 0.8]) 
b = np.array([0.9, 0.6, 0.1, 0.2]) 
  
def cos_sim(a, b): 
    dot_product = np.dot(a, b) 
    norm_a = np.linalg.norm(a) 
    norm_b = np.linalg.norm(b) 
    return dot_product / (norm_a * norm_b) 
  
result = cos_sim(a, b) 
print(result)"
"Given a list of integers, write a Python program to filter out all numbers that are divisible by 5.","def filter_divisible_by_5(numbers):
    res = []
    for num in numbers:
        if num % 5 != 0:
            res.append(num)
    return res

filtered_numbers = filter_divisible_by_5([11, 23, 7, 20, 44, 16, 9])
print(filtered_numbers)"
Create a Python program to convert Fahrenheit to Celsius.,"def Fahrenheit_to_Celsius(F): 
    return (F - 32) * 5/9
  
print(""Temperature in Celsius = "", 
      Fahrenheit_to_Celsius(100))"
How would you write a program in Python that takes as input an array of integers and prints the sum of its elements?,"arr = [1,5,8,-3]

# Compute the sum
total = 0
for num in arr:
    total += num

# Print the sum
print(total)"
Convert the following code into equivalent Python 3 function.,"def doubleString(str):
    return str + str"
Create a Python function that prints a given string n times.,"def repeatString(string, n): 
  
    for i in range(n): 
        print(string, end = """") 
  
# Driver Code 
string = ""Hello World!!""
n = 5
repeatString(string, n)"
Convert the following SQL statement into equivalent Python code,"def query_table(table):
    query = """"""SELECT * 
            FROM %s 
            ORDER BY col1, col2 DESC"""""" % table
    return query"
Write a Python program to delete vowels from a given string.,"def removeVowels(string): 
    vowels = ('a', 'e', 'i', 'o', 'u')  
    new_string = '' 
    for char in string: 
        if char not in vowels: 
            new_string += char 
    return new_string 

string = 'My name is John'
removeVowelString = removeVowels(string) 
print(removeVowelString)"
Create a Python dictionary to store student and their grades.,"student_grades = {
    ""Bob"": ""A"",
    ""Carol"": ""B"",
    ""Ted"": ""C"",
    ""Alice"": ""A""
}"
Create a function in Python to print a dictionary in a formatted way,"def print_dict(d):
    for key, value in d.items():
        print(f""{key}: {value}"")

print_dict(d)

# Output: 
Name: Donald Trump
Age: 70
Profession: President"
Develop a Python program that takes a list of numbers as an input and outputs the numbers in the list sorted in ascending order.,"def sortAscending(list): 
    list.sort() 
    return list
  
# Driver Code 
list = [5, 3, 7, 2, 4, 9, 1]  
print(sortAscending(list)) 

# Output: [1, 2, 3, 4, 5, 7, 9]"
Generate a Python code snippet to extract the rate of inflation for a given year from a given JSON.,"import json

data = '{""2017"":2.2,""2018"":2.4,""2019"":1.7,""2020"":0.1}'

inflation_data = json.loads(data)
inflation_rate = inflation_data[""2020""] 
print(inflation_rate)  # Output: 0.1"
Create a function in Python that will take an array of integers and find the two numbers with the largest sum.,"def findMaxSum(input):
    num1 = -float('inf')
    num2 = -float('inf')
    for num in input:
        if num > num1:
            num2 = num1
            num1 = num
        elif num > num2:
            num2 = num
    return num1 + num2"
Generate a Python function that takes an input string and counts the number of occurrence of each letter.,"def letter_frequency(str):
    freq = {}
    for letter in str:
        if letter in freq:
            freq[letter] += 1
        else:
            freq[letter] = 1
    return freq
        
result = letter_frequency(""Hello World"")
print(result)"
Classify the following Python statement as a type of loop.,for loop.
Create a machine learning model in Python that can classify a set of samples into two classes.,"import numpy as np
from sklearn.svm import SVC

X = np.array([[0.8, 0.1, 0.3],
            [1.0, 0.4, 0.7],
            [0.4, 0.5, 0.9],
            [0.2, 0.7, 0.8]])

y = np.array([0, 1, 0, 1])

model = SVC()
model.fit(X, y)"
Create a Python program that convert a given string to a list of integers.,"def to_int_list(s):
    return [int(x) for x in s.split(',')]"
Generate a Python function to find the sum of the digits in a given number.,"def sum_of_digits(n):
  result = 0
  while (n > 0):
    result += n % 10;
    n //= 10;
  return result"
"Write a Python program to calculate the sum of a series of odd numbers between the two pixel, with the first number being 1.","sum = 455
  
total = 0
for i in range(pixel1, pixel2):
    if i % 2 != 0:
        total += i
print('sum =', total)"
Write a Python script to filter out all words containing 10 or more characters.,"sentence = ""This is a sample sentence""

words = sentence.split()
long_words = [word for word in words if len(word) > 10]

print(long_words)"
Rewrite the following JavaScript code in Python.,"def addNumbers(x, y):
    return x + y"
"Create a python script to categorize a given text into three categories: positive, negative and neutral.","import re

def categorize_text(text):
    """"""Categorizes the given text into positive, negative or neutral.""""""
    text = text.lower()
    if re.search(r""\b(happy|glad|fun)\b"", text):
        return ""positive""
    elif re.search(r""\b(sad|angry|fearful)\b"", text):
        return ""negative""
    else:
        return ""neutral"""
Generate a Fibonacci sequence from 0 to 10 using Python.,"def fibonacci(n): 
    a = 0
    b = 1
    if n < 0: 
        print(""Incorrect input"") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2,n): 
            c = a + b 
            a = b 
            b = c 
        return b 
  

# Driver Code 
print(fibonacci(10))"
Implement a Python program to check if a given number is an Armstrong Number,"def checkArmstrong(num):
    temp = num 
    res = 0
    while temp > 0: 
       digit = temp % 10
       res = res + digit ** 3
       temp = temp // 10
    
    if num == res: 
        return f'{num} is an Armstrong Number'
    else:
        return f'{num} is not an Armstrong Number'"
Generate a Python code for crawling a website for a specific type of data.,"import requests
import re

def crawl_website_for_phone_numbers(website):
    response = requests.get(website)
    phone_numbers = re.findall('\d{3}-\d{3}-\d{4}', response.text)
    return phone_numbers
    
if __name__ == '__main__':
    print(crawl_website_for_phone_numbers('www.example.com'))"
Determine the output of the given Python program.,hello
Create an algorithm in Python to calculate the mean of a given list.,"def calculate_mean(numbers):
    # Get the length of the list
    numbers_len = len(numbers)
    # Sum up all the elements in the list
    total = 0
    for num in numbers:
        total += num
    # Divide the total with the length of the list
    mean = total / numbers_len
    # Return the mean
    return mean

mean = calculate_mean([1,2,3,4])
print(mean)"
Construct an algorithm in Python to calculate the area of a triangle given its sides.,"def areaTriangle(a, b, c): 
    """"""
    Calculate the area of a triangle.
    Parameters: 
    a (float): length of side a
    b (float): length of side b
    c (float): length of side c
    """"""
    s = (a + b + c) / 2.0
    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5
    return area
 
a = 3
b = 4
c = 5
 
area = areaTriangle(a, b, c)
print(""The area of the triangle is"", area)  # 6.0"
"Create a python program that prints ""Hello World"" if the user inputs the letter 'y'","user_input = input(""Do you want to print 'Hello World'? (y/n): "")

if user_input == 'y':
    print(""Hello World"")"
Write a function in Python to remove duplicate elements from a given list.,"def remove_duplicates(List): 
    unique_list = [] 
      
    for x in List: 
        if x not in unique_list: 
            unique_list.append(x) 
 
    return unique_list"
Generate a code snippet in Python to tokenize a given string.,"def tokenize(s):
  tokens = []
  current_token = """"
  for c in s:
    if c.isspace():
      tokens.append(current_token)
      current_token = """"
    else:
      current_token += c
  if current_token:
    tokens.append(current_token)
  return tokens"
Compose a Python program to print the first hundred odd numbers.,"# declaring an empty list
odds = []

# looping for a range of 1 to 100
for n in range(1,101):
# check if the number is odd
 if n % 2 != 0:
  # add the odd numbers to the list
  odds.append(n)

# print the list
print(odds)"
Write a Python function that takes a list of strings and returns the concatenation of all the elements with a separator/delimiter.,"def concatenate_strings(strings, separator):
 return separator.join(strings)"
Create a Python program that outputs the sum of all the elements in a given array.,"def sum_of_array(arr):
    result = 0
    for x in arr:
        result += x
    return result

sum = sum_of_array([3, 5, 6])
print(sum)"
Write a Python function that takes in two parameters of type list and returns the sum of all the elements in the two lists.,"def list_sum(list1, list2):
 # initialize sum with 0
 total_sum = 0 
 
 # iterate over each element in list1
 for num in list1: 
     # add to sum
     total_sum += num 

 # iterate over each element in list2
 for num in list2: 
     # add to sum
     total_sum += num 

return total_sum"
Construct a python function that takes a list of numbers and returns a list of the sum of the squares of the first n numbers.,"def sum_of_squares(numbers):
    squares_sum = []
    for i in range(len(numbers)):
        squares_sum.append(sum([num**2 for num in numbers[:i+1]]))
    return squares_sum"
How can you write a python program to calculate the number of days between two given dates?,"def calculate_days_between(date1, date2):
    """"""This function takes two dates as input and calculates the number of days between them.
    
    Args:
        date1 (datetime): The first date.
        date2 (datetime): The second date.
    
    Returns:
        int: The number of days between the two dates.
    """"""
    delta = date2 - date1
    return delta.days"
Write a function in Python that finds the most frequent item in a given sequence.,"def most_frequent(sequence): 
    return max(set(sequence), key = sequence.count) 

print(most_frequent(sequence))"
Develop a Python program to implement the FizzBuzz task.,"def fizzbuzz(n):
  for num in range(1, n+1):
    if num % 3 == 0 and num % 5 == 0:
      print(""FizzBuzz"")
    elif num % 3 == 0:
      print(""Fizz"")
    elif num % 5 == 0:
      print(""Buzz"")
    else:
      print(num)"
Write a Python program that sorts a list of integers from smallest to largest.,"def sort_list(input_list):
    sorted_list = sorted(input_list)
    return sorted_list

input_list = [2,7,3,9,0,4]

output = sort_list(input_list)
print(output)"
Write a Python program to print the following pattern in each row.,"for i in range(1, 5):
    for j in range(1, i+1):
        print(i, end="" "")
    print()"
Write a python function to interchange first and last elements in a given list.,"def swap_List(newList): 
    size = len(newList) 
    temp = newList[0] 
    newList[0] = newList[size - 1] 
    newList[size - 1] = temp   
    return newList "
"Edit the Python program given below, so that it computes the factorial of the given number n.","def factorial(n):	
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)"
Generate a code in Python that sorts the given list of numbers,"def sort_list(lst): 
    lst.sort() 
    return lst 
  
# Driver code 
lst = [3, 4, 15, 1, 0] 
sorted_list = sort_list(lst) 
  
print(""Sorted list:"", sorted_list)"
"Given a list of integers as input, write a Python code snippet to find the largest number.","max_num = -float('inf')
for num in [9, 2, 6, 3, -5, 5, 7]:
    if num > max_num:
        max_num = num
print(max_num)"
Optimize a given Python program to make it faster.,"def optiFunc(n):
    result = n * (n-1) / 2 
    return result"
Generate Python code to sum up all numbers up to a given number n,"def sum_to_n(n):

    #edge cases
    if n < 0: 
        return 0
    if n == 0:
        return 0

    #binominal sum formula 
    return (n * (n+1)) / 2 

print(sum_to_n(10))"
Construct a script in Bash that can install a given software.,"#!/bin/bash

# Download latest version of Python
curl -O https://www.python.org/ftp/python/3.8.5/Python-3.8.5.tgz

# Extract the tgz file
tar -xzf Python-3.8.5.tgz

# Move into the Python directory
cd Python-3.8.5

# Run the configure script
./configure

# Compile and install
make
make install"
Write a Python program to validate a given IP address.,"def is_valid_ip(ip):
    ip = ip.split('.')
    if len(ip) != 4:
        return False
    for i in ip:
        if not i.isdigit():
            return False
        i = int(i)
        if i < 0 or i > 255:
            return False
    return True"
Create a Python program to convert degrees Celsius to degrees Fahrenheit given a value in Celsius.,"# Function to convert degrees Celsius to degrees Fahrenheit
def celsius_to_fahrenheit(celsius):
 return (celsius * 9/5) + 32

# Input Celsius value
celsius = 32

# Calculate Fahrenheit
fahrenheit = celsius_to_fahrenheit(celsius)
print(f'{celsius} Celsius is {fahrenheit} Fahrenheit')"
Write a loop in Python to display the following pattern,"for i in range(1, 6):
    for j in range(i):
        print(""*"", end="" "")
    print()"
Write Python code to generate a random letter from A to Z.,"import random
 
def generate_random_letter():
    alphabet = list(map(chr, range(65, 91)))
    random_letter = random.choice(alphabet)
 
    return random_letter
 
random_letter = generate_random_letter()
print(random_letter)"
Write a python function to count the number of lists in a given number of lists.,"def count_list(input_list): 
    return len(input_list)"
Design a class in Python to represent a grocery store.,"class GroceryStore: 
    def __init__(self, name, products, location): 
        self.name = name 
        self.products = products
        self.location = location 
  
    def get_all_products(self): 
        return self.products
  
    def get_location(self): 
        return self.location"
Create a Python script to find the first ten perfect squares.,"nums = [x*x for x in range(1,11)] 
print(""The first 10 perfect squares are: "", nums)"
Create a Python program to find all the factors of a given number.,"def factors(n):
  factor_list = []
  for i in range(1, n+1):
    if n % i == 0:
      factor_list.append(i)
  return factor_list

n = 12
result = factors(n)
print(""Factors of %d are %s"" %(n, result))"
Generate 3 random numbers within the specified range using Python.,"import random

random_numbers = random.sample(range(0, 10), 3) 
print(random_numbers)"
Create a script in Python that takes a list of strings and prints the string with the longest length.,"def longest_string(str_list):
    longest = str_list[0]
    for s in str_list:
        if len(s) > len(longest):
            longest = s
    print(longest)
    
longest_string(['hello', 'world', 'abracadabra'])"
Write a python program for text processing tasks such as to reverse the text of every line.,"line1: emocleW ot gnirtS ecnerefxeT
line2: sI si nuf"
Generate a code to create a scatterplot using the Seaborn library in Python.,"""""""
Generate a code to create a scatterplot using the Seaborn library in Python
""""""

import pandas as pd
import seaborn as sns

#load the sample datasets
data1 = pd.read_csv('sample_data1.csv')
data2 = pd.read_csv('sample_data2.csv')

# Create a Scatterplot Using Seaborn
sns.relplot(x=""data1_x"", y=""data1_y"", data=data1); 
sns.relplot(x=""data2_x"", y=""data2_y"", data=data2);"
Create a function in Python to take two numerical values and return true if one is divisible by the other.,"def isDivisible(a, b):
  return a % b == 0

print(isDivisible(number1, number2)) #True"
Write an if-else statement for a simple weather notification system in Python.,"if 60 <= temperature <= 75:
   print(""It's Perfect Weather!"")
else:
   print(""The weather is not so great."")"
Write a python program to connect to a database and fetch the user details.,"import psycopg2

conn = psycopg2.connect(""host=localhost dbname=mydb user=myuser password=mypassword"")

cur = conn.cursor()

cur.execute(""SELECT * FROM users"")

rows = cur.fetchall()

for row in rows:
    user_id = row[0]
    username = row[1]
    user_email = row[3]"
Write a Python script that takes a list of strings as input and returns a new list with all the duplicates eliminated.,"def remove_duplicates(input_list):
    unique_list = []
    for item in input_list:
        if item not in unique_list:
            unique_list.append(item)
    
    return unique_list

my_list = [""Apple"", ""Pear"", ""Apple"", ""Banana"", ""Pear""]
print(remove_duplicates(my_list))"
Develop a basic web crawler using Python language.,"import requests
from bs4 import BeautifulSoup

def get_links(url):
    # Fetch the page
    res = requests.get(url)
    # Parse the HTML
    html_doc = res.text
    soup = BeautifulSoup(html_doc, 'html.parser')
    
    # Extract all links from the page
    links = []
    for link in soup.find_all('a'):
        links.append(link.get('href'))
    return links"
Modify the Python program below to make it more efficient.,"def foo(lst):
    minimum = min(lst)
    return minimum"
Create a Python script that takes a string and prints the first character of every word in the given string.,"def first_characters_of_words(string):
    words = string.split("" "") 
    characters = [word[0] for word in words] 
    return """".join(characters)

print(first_characters_of_words(""This is a test string"")) # Tiat"
Generate a python program to convert numbers in between 1 to 10 to their respective word form.,"# Dictionary of numbers and words
DAYS = {
    1:'one',
    2:'two',
    3:'three',
    4:'four',
    5:'five',
    6:'six',
    7:'seven',
    8:'eight',
    9:'nine',
    10:'ten',
}

def num_to_str(num):
    if num in DAYS:
        return DAYS[num]
    else:
        return ""invalid number""

if __name__ == '__main__':
    num = 5
    print(num_to_str(num))"
Create a script to set up a development environment for python.,"# install python
sudo apt-get install python

# install pip
sudo apt-get install python-pip

# install virtualenv
pip install virtualenv

# create a virtual environment
virtualenv myenv

# activate the virtual environment
source myenv/bin/activate

# install the dependencies
pip install -r requirements.txt

# deactivate the virtual environment
deactivate"
Write a Python program to find all numbers divisible by 7 but not a multiple of 5 between two given numbers,"def div_by_7_not_5(start, end):
    result = []
    for num in range(start, end + 1):
        if (num % 7 == 0) and (num % 5 != 0):
            result.append(num)
    return result"
Create a Python program to calculate the sum of the numbers in a given list up to a given position in the list.,"def sum_list_position(list, position):
 sum = 0
 for i in range(position+1):
 sum += list[i]
 return sum
 
list = [1,3,5,4,7]
position = 3

print(sum_list_position(list,position)) # prints 9"
Write a python function to find the largest prime factor of a given number.,"import math 
def max_Prime_Factors (n): 
    maxPrime = -1 
    while n%2 == 0: 
        maxPrime = 2
        n >>= 1    
    for i in range(3,int(math.sqrt(n))+1,2): 
        while n % i == 0: 
            maxPrime = i 
            n = n / i 
    if n > 2: 
        maxPrime = n  
    return int(maxPrime)"
Generate a Python program to generate random numbers between 1 and 10.,"import random
number = random.randint(1, 10)
print (number)"
Design an algorithm in Python to generate the nth number in the Fibonacci sequence.,"def fibonacci(n):
if n==0: return 0
elif n==1: return 1
else:
 return fibonacci(n-2) + fibonacci(n-1)"
Write a Python function to calculate the distance between two points given their coordinates.,"def Euclidean_distance(coord1, coord2):
    x1, y1 = coord1
    x2, y2 = coord2

    return ((x2-x1)**2 + (y2-y1)**2)**0.5"
Develop a python program that prints out all the prime numbers until a given number n.,"def is_prime(n): 
        for i in range(2,int(n ** 0.5)+1):
            if (n % i) == 0:
                return False
        return True

def print_prime_numbers_up_to_n(n):
    for num in range(2, n + 1): 
        if is_prime(num):
            print(num) 

print_prime_numbers_up_to_n(n)"
Write a command line program in Python for sorting a list of integers with the quick sort algorithm.,"def quickSort(arr):
 if len(arr) <= 1:
 return arr

 pivot = arr[len(arr) // 2]
 left = [x for x in arr if x < pivot]
 middle = [x for x in arr if x == pivot]
 right = [x for x in arr if x > pivot]

 return quickSort(left) + middle + quickSort(right)

arr = [9, 4, 7, 3, 2, 1, 8, 5, 6]

print(quickSort(arr)) # prints [1, 2, 3, 4, 5, 6, 7, 8, 9]"
Create a Python program to simulate a dice roll and print the result.,"import random

# Simulate a dice roll
result = random.randint(1,6)
print(""Result of the dice roll:"", result)"
Design an algorithm (in Python) to determine whether a given number is even or odd.,"def is_even(number): 
    if(number % 2 == 0): 
        return True 
    else: 
        return False"
Generate a list of phone numbers in python given a start and end number.,"phone_numbers = [str(i) for i in range(12345, 12355)]"
Can you provide a Python code for linear search on a given list of numbers?,"def linearSearch(list, num):
    for i in range(len(list)):
        if list[i] == num:
            return i
    return -1

list = [4,3,1,7,9,6]
num = 9
print(linearSearch(list, num))"
Create a Python program to determine the total sum of all elements of a list.,"def calculate_sum_of_list(arr):
    total_sum = 0
    for item in arr:
        total_sum += item
    return total_sum

list1 = [1, 2, 3, 4]
sum_of_list = calculate_sum_of_list(list1)
print(sum_of_list)"
Identify the best syntax to use in Python to add two numbers.,"# Python syntax to add two numbers
result = number_1 + number_2"
Generate a Python code snippet to compute the sum of the digits of a given number.,"def sum_digits(num):
    summation = 0
    while num > 0:
        summation += num % 10
        num = num // 10
    return summation"
Give a generic example for try-except-finally block in Python.,"try:
    # code goes here
    result = my_function()
except Exception as e:
    # deal with errors
    print(""Error encountered: {}"".format(e))
finally:
    # execute this block of code regardless
    print(""Done!"")"
Implement a function in Python to flatten an array of arbitrarily nested arrays of integers into a flat array of integers,"def flatten_array(my_array):
    flattened_array=[]
    for element in my_array:
        if type(element) == int:
            flattened_array.append(element)
        else:
            flattened_array+=flatten_array(element)
    return flattened_array

print(flatten_array([[1,2,[3]],4]))"
Generate a Python program that takes a sentence as input and prints out only the verbs.,"import nltk

def extract_verbs(sentence):
    tokens = nltk.word_tokenize(sentence)
    tags = nltk.pos_tag(tokens)
    verbs = [word for word, pos in tags if pos.startswith('V')]
    return verbs

sentence = ""The cat jumped over the moon.""
verbs = extract_verbs(sentence)
print(verbs)"
Develop a program in Python to calculate the average of five given numbers.,"def average(nums):
 total = 0
 for num in nums:
  total+=num
 return total / len(nums)

print(average([1, 2, 3, 4, 5]))
// Output: 3"
Generate a loop in Python which iterates through a list and prints the values.,"for value in list_of_values:
    print(value)"
Write a function in Python that takes in a string and removes all the unnecessary whitespaces.,"def remove_whitespaces(string):
    return ' '.join(string.split())
 
print(remove_whitespaces(""This     string  contains   too     much whitespace!""))"
Design an algorithm in Python to find the number of occurrences of a given string in another string.,"def count_occurrences(haystack, needle):
    count = 0
    for char in haystack:
        if char == needle:
            count += 1
    return count"
Write an algorithm in Python to check if a number is a palindrome.,"def is_palindrome(number): 
num = number  
   
# initializing a reverse number  
reverse = 0
  
# Reverse the given number 
while(number > 0): 
   remainder = number % 10
   # Create reverse 
   reverse = (reverse * 10) + remainder 
   number = number // 10 
 
# check if original and reverse numbers are same
if (num == reverse): 
  return True
else: 
  return False"
Generate a function in Python that takes a list of values and returns a dictionary with the sums of adjacent values.,"def sum_adjacent(my_list):
  result = {}
  
  for i in range(len(my_list)-1):
    key = (my_list[i],my_list[i+1])
    result[key] = my_list[i]+my_list[i+1]
  
  return result
  
my_list = [1,4,5,6,10]

print(sum_adjacent(my_list))

# Output: {(1, 4): 5, (4, 5): 9, (5, 6): 11, (6, 10): 16}"
Develop a Python program to generate 10 random numbers between 1 and 100.,"import random

for i in range(10):
    print(random.randint(1,100))"
Create a Python tuple that contains the first five prime numbers,"t = (2, 3, 5, 7, 11)"
Develop Python code to check if a given number is plaindrome.,"def is_plaindrome(num):
    original_num = num
    reversed_num = 0
    while num > 0:
        remainder = num % 10
        reversed_num = (reversed_num * 10) + remainder
        num //= 10
    return reversed_num == original_num

num = 1454
if is_plaindrome(num):
    print(num, ""is a plaindrome"")
else:
    print(num, ""is not a plaindrome"")"
Write a Python program that takes a user input of a number and prints out the corresponding character from the ASCII table.,"# Python program to get ASCII value of a character

c = input('Enter a character: ')

# ord() function to get the ASCII value 
print('The ASCII value of ' + c + ' is', ord(c))"
Design a recursive function in Python that prints the nth Fibonacci number.,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1 
    else:
        return fibonacci(n-1) + fibonacci(n-2)"
Write a Python program to convert an array of strings to an array of floats.,"def string_to_float(arr):
    return [float(x) for x in arr]"
Write a Python program to calculate the sum of the numerical values of each character of a string,"def sumCharValues(string):
    sum = 0
    for ch in string:
        sum += ord(ch)
    return sum"
Create a class in Python that represents a given animal object.,"class Cat:
    def __init__(self):
        self.name = """"
        self.colour = """"
        self.age = 0
        self.breed = """"

    def meow(self):
        print(self.name, ""says meow!"")"
Define a method in Python to detect if a given string is a palindrome.,"def is_palindrome(string):
    return string == string[::-1]"
Write a Python program that takes a list of emails and verifies that the domain is valid.,"import re

emails = ['user@example.com', 'user@invalid']

def validate_email(email): 
 regex = r""(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)""
 if (re.search(regex, email)): 
 return 1
 else: 
 return 0

for email in emails: 
 is_valid = validate_email(email)
 if is_valid: 
 print(email, 'is valid')
 else: 
 print(email, 'is invalid')"
Test if a given number is a Prime or not using Python.,"if number<=1: 
  print(""Number is not a prime number."") 
for i in range(2,int(number**0.5)+1):
  if(number % i == 0):
    print(""Number is not a prime number."")
    break
else: 
  print(""Number is a prime number."")"
Write a Python web crawler that fetches all the URLs from a given website and stores them in a list.,"import requests
from bs4 import BeautifulSoup

url = ""https://www.example.com""
links = []

r = requests.get(url)
soup = BeautifulSoup(r.text, ""html.parser"")
for link in soup.find_all(""a""):
    links.append(link.get(""href""))

print(links)"
Write a python function to check whether every even index contains even numbers of a given list.,"def even_position(nums):
	return all(nums[i]%2==i%2 for i in range(len(nums)))"
Output the Fibonacci sequence as a list of integers in Python,"def fibonacci_sequence(n): 
    # Creating list of length n 
    fib_list  = [0]*n 
      
    # first and second terms 
    fib_list[0] = 0
    fib_list[1] = 1
      
    # Application of the recursive algorithm 
    for i in range(2, n): 
        fib_list[i] = fib_list[i-1] + fib_list[i-2] 
      
    return fib_list"
Formulate an algorithm in Python to find the sum of all elements in a given matrix.,"def matrixSum(matrix):
    sum = 0
    for row in matrix:
        for element in row:
            sum += element
    return sum

matrix = [[1, 2, 3], [4, 5, 6]]
total = matrixSum(matrix)
print(total)"
Create a for-loop in Python to print a list of strings that contain only the vowels from a given list of strings.,"for word in words:
    vowels = """"
    for x in word:
        if x in ('a', 'e', 'i', 'o', 'u'):
            vowels += x
    print(vowels)"
Compose a Python program to check if a given year is a leap year,"def is_leap_year(year):
    if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:
        return true
    return false"
Write a Python program for a smart search engine. The program should take a query as input and return the most relevant result.,"import json
import requests
 
def search_engine(query):
 
 # Make a request to the search engine API
 r = requests.get('http://search-engine.com/api/search', params={'query': query})
 
 # Parse the response
 response = json.loads(r.text)
 
 # Return the most relevant result
 return response['results'][0]
 
search_engine('python programming')"
Write a Python program that takes a positive integer and prints the squares of all the numbers from 1 to the given number.,"# Program to print the squares of all 
# the numbers from 1 to the given number 
  
# Positive number taken as an input 
num = 5
  
# Iterate from 1 to num 
for i in range(1, num+1): 
  
    # Calculate the square 
    value = i**2
      
    # Print the value 
    print(value)

# Output:
# 1
# 4
# 9
# 16
# 25"
Run the given code on Python 3 and generate the output.,Hello World!
Create a Python program to convert a list of characters into a string,"def list_to_str(arr):
    str = """"
    for i in arr:
        str += i
    return str

arr = ['a', 'b', 'c']
  
result = list_to_str(arr) 
print(result)"
Design a program in Python to print the Fibonacci sequence.,"def Fibonacci(n): 
    if n<0: 
        print(""Incorrect input"") 
    elif n==1: 
        return 0
    elif n==2: 
        return 1
    else: 
        return Fibonacci(n-1)+Fibonacci(n-2) 
  
# Driver Program 
print(Fibonacci(9))"
Design a Python program to edit a given text string,"def edit_string(text):
    text = text.replace(""Apple"", ""Orange"")
    return text

text = ""Apple is a great fruit""
print(edit_string(text))
# Output: Orange is a great fruit"
Create a function in Python to compare two strings and return true if the strings only differ by one character.,"def compare_strings(s1, s2):
    mismatch_count = 0

    for i in range(len(s1)):
        if s1[i] != s2[i]:
            if mismatch_count > 0:
                return False

            mismatch_count += 1

    return mismatch_count == 1

compare_strings('apple', 'acple')"
Design a function in Python to pad a list to a given length by replicating the rightmost element.,"def pad_list_right(lst, pad_length):
    extra_length = pad_length - len(lst)
    lst.extend([lst[-1]] * extra_length)
    return lst

lst = [2, 3, 5]
padding_length = 7
result = pad_list_right(lst, padding_length)
print(result)"
"Create a class 'Person' in Python, which has attributes name, age, gender and blood group.","class Person:
 def __init__(self, name, age, gender, blood_group):
  self.name = name
  self.age = age
  self.gender = gender
  self.blood_group = blood_group"
Create a Python program which concatenates two sentences and prints the result.,"sentence1 = ""I am writing a Python program.""
sentence2 = ""It is exciting to learn something new.""

# Concatenate both strings
concatenated_sentence = sentence1 + "" "" + sentence2

# Print the result
print(concatenated_sentence)"
Create an algorithm in Python to sort an array of integers.,"def quicksort(array):
  if len(array) <= 1:
    return array
  
  pivot = array[len(array) // 2]
  left = [x for x in array if x < pivot]
  middle = [x for x in array if x == pivot]
  right = [x for x in array if x > pivot]
  return quicksort(left) + middle + quicksort(right)

# test
array = [2, 1, 6, 5, 8]
print(quicksort(array))"
Create a program to find the minimum depth of a binary tree using Python.,"def minDepth(root):
    if root is None:
        return 0
    if root.left is None and root.right is None:
        return 1
    elif root.left is None:
        return minDepth(root.right) + 1
    elif root.right is None:
        return minDepth(root.left) + 1
    else:
        return min(minDepth(root.left), minDepth(root.right)) + 1"
Generate a python program that takes two sets of integers as input and outputs the intersection of those sets.,"def intersection(set1, set2): 
   return set1 & set2

result = intersection(set1, set2) 
print(result)"
Create a function to calculate the factorial of a given number in Python.,"def factorial(number): 
    if number == 0: 
        return 1
    else:
        return number * factorial(number - 1)"
Create a program in Python 3 to simulate the rolling of two dice.,"import random

def roll_dice():
    '''This function simulates rolling two dice.'''
    die_1 = random.randint(1, 6)
    die_2 = random.randint(1, 6)
    print(""Die 1: {}"".format(die_1))
    print(""Die 2: {}"".format(die_2))
    return (die_1, die_2)"
Create a method in Python to encode a given string using Base64 encoding technique.,"import base64

def encode_string(string):
    encoded_string = base64.b64encode(string.encode('utf-8'))
    return encoded_string"
Write a function to calculate the harmonic sum of n-1.,"def harmonic_sum(n):
  if n < 2:
    return 1
  else:
    return 1 / n + (harmonic_sum(n - 1))"
Create a Python function to calculate the particle diameter of a given radius.,"def particle_diameter(radius):
    return 2 * radius

diameter = particle_diameter(0.75)
print(diameter) # Output: 1.5"
Write a Python program to specify the order of element when given an array and a number.,"def order_elements(arr, k):
    k_arr = []
    j_arr = []
    for i in arr:
        if i <= k:
            k_arr.append(i)
        else:
            j_arr.append(i)
    k_arr.extend(j_arr)
    return k_arr"
Construct a function in Python to calculate interest rate of a given loan amount,"def calculate_interest_rate(principal, rate, period):
  return principal * (rate / 100) * period
  
calculate_interest_rate(2000, 4.5, 5) #900"
Convert a given SQL statement into a Python Pandas DataFrame.,"import pandas as pd

df = pd.read_sql_query(""SELECT * FROM book;"", conn)"
Generate a Python program to print the first 10 numbers in the Fibonacci sequence.,"def fibonacciGenerator(num):
    a = 0
    b = 1
    
    for i in range(0, num):
        c = a + b
        a = b
        b = c
        yield a

numbers = fibonacciGenerator(10)    

for num in numbers:
    print(num)"
Create a Python program to find out the prime numbers in a given range.,"def is_prime_number(n):
    for i in range(2,n):
        if (n % i == 0):
            return False
    return True

# Find all prime numbers in a given range
lower = 100
upper = 1000

for num in range(lower, upper + 1):
    if is_prime_number(num):
        print(num)"
Implement a Monte Carlo simulation in Python to calculate the probability of completing a given task.,"import random

trials = 10000
successes = 0

for _ in range(trials):
 # Simulate process (e.g. a dice roll)
 outcome = random.randint(1, 6)
 
 # Keep track of successes
 if outcome == 6:
 successes += 1

# Calculate probability
probability = successes / trials
print(f'Probability of success: {probability: .2f}')"
Write a Python function that takes in a list of elements and removes all the duplicate elements.,"def remove_duplicates(nums):
  new_list = []
  for num in nums:
    if num not in new_list:
      new_list.append(num)
  return new_list
  
result = remove_duplicates([1, 2, 2, 3, 3, 3])
print(result)"
Create a Python program to compare two lists and find their common elements.,"def compare_lists(list1, list2):
    common_elements = []
    for element in list1:
        if element in list2:
            common_elements.append(element)
    return common_elements

list1 = [1, 2, 3, 4, 5]
list2 = [3, 4, 5, 6, 7]

common_elements = compare_lists(list1, list2)
print(common_elements)"
Construct a Python program that computes the area of a circle with the given radius.,"import math

def area_circle(radius):
 return math.pi * (radius ** 2)

area = area_circle(radius)
print('The area of the circle is %.2f' % area)"
Create a python program to output ‘Hello World’ 10 times,"for i in range(10):
    print(""Hello World"")"
Improve the following Python script to load the data in the absence or presence of the header.,"import pandas as pd

#Variable to indicate presence of Header
has_header = False

#Read CSV
data = pd.read_csv('mydata.csv',header=None) 

#Check for presence of Header
if data.iloc[0,0] != 'Column1':
  has_header = True

#Read again with header
if has_header:
  data = pd.read_csv('mydata.csv')"
Shorten the following code using appropriate Python statement,"x = 1
print(""x is"", (""0"" if x == 0 else ""1"" if x == 1 else ""not 0 or 1""))"
"In Python, code to present permutations of a certain list of strings ""AB"", ""CD""","from itertools import permutations

strings = ['AB', 'CD']

perm = permutations(strings)

for string in list(perm):
    print(string)"
Implement a function in Python that takes as input an integer and prints out the Fibonacci sequence up to the entered value.,"def fibonacci(n):
    arr = [0, 1]
    for i in range(2, n+1):
        arr.append(arr[i-2] + arr[i-1])
    return arr[:n+1]

print(fibonacci(10))"
"Using Python, construct a program to calculates the average of three numbers (input provided).","num1 = 4
num2 = 9
num3 = 10

total = num1 + num2 + num3
average = total / 3
print(""Average ="", average)  # Output: Average = 7.66"
Create a program in Python to calculate the prime factors of a given number.,"def find_factors(num): 
    """"""Function to find prime factors""""""
    factors = [] 
    i = 2
    while i * i <= num: 
        if num % i: 
            i += 1 
        else: 
            num //= i 
            factors.append(i) 
    if num > 1: 
        factors.append(num) 
    return factors 
  
num = 15
print(find_factors(num))"
"Write a Python program that takes a date in the format ""YYYY-MM-DD"" and returns a string with the day of the week for that date.","from datetime import datetime

def day_of_week(date):
    # convert string to date object
    date_obj = datetime.strptime(date, ""%Y-%m-%d"")
    # retrieve weekday
    day = date_obj.strftime(""%A"")
    return day"
Create a Python regex pattern to match words containing certain characters.,pattern = re.compile(r'\b[abc]+\w*\b')
Create a Python program to display the Fibonacci sequence up to n.,"# This Python 3 code prints the Fibonacci sequence up to n

def Fibonacci(n):
  f0, f1 = 0, 1
  for i in range(0, n):
    print(f0,end="" "");
    next = f0 + f1;
    f0 = f1;
    f1 = next;

# Driver Program
print(""Fibonacci sequence up to n: "")
Fibonacci(10)"
Write a Python program to calculate the average monthly temperature of a given city for the last 10 years.,"import csv

def avg_month_temp(city):
 result = 0
 counter = 0
 temperatures = csv.reader(open('weatherdata.csv'))
 for row in temperatures:
 if row[1] == city:
 result += float(row[2])
 counter += 1
 return result/counter"
Edit the given Python code to make it work for a list of dictionaries.,"list_data = [{'id': 1, 'name': 'Tom'}, {'id': 2, 'name': 'Bob'}]

for element in list_data:
  print(element['name'])"
Suggest a way to automate a process that extracts the data from a web page.,The process of extracting data from a web page can be automated by using web scraping techniques. Web scraping is a process of extracting data from websites using programming languages such as Python or JavaScript. It involves making web requests to the respective web pages using tools like BeautifulSoup and then parsing the data from the response using libraries like lxml or html5lib.
Create a simple program in Python that prints out the first n fibonacci numbers.,"def fibonacci(n): 
   if n<0: 
      print(""Incorrect input"") 
      # First Fibonacci number is 0 
   elif n==1: 
      return 0
   # Second Fibonacci number is 1 
   elif n==2: 
      return 1
   else: 
      return fibonacci(n-1)+fibonacci(n-2) 

# Driver Program 
nterms = 4
for i in range(nterms):
      print(fibonacci(i))"
Correct the syntax error in the below Python code.,"def fibonacci_sequence(max): 
    nums = [] 
    current, nxt = 0, 1
    while current < max: 
        current, nxt = nxt, nxt+current
        nums.append(current)
    
    return nums"
Construct an algorithm in Python to find the top three numbers in a list.,"def top_three(lst): 
  sorted_lst = sorted(lst, reverse=True) 
  return sorted_lst[:3]

print(top_three([10, 8, 3, 11, 7, 14, 13]))"
Program a Python script to convert a given temperature in degree Fahrenheit to degree Celsius.,"def f_to_c(F):
    C = (F - 32) * 5/9
    return C"
Create a k-means clustering algorithm in Python to cluster a given dataset.,"from sklearn.cluster import KMeans

def k_means_clustering(data, num_clusters):
    kmeans = KMeans(n_clusters=num_clusters, random_state=0).fit(data)
    labels = kmeans.labels_
    return labels"
Estimate the square root of 15 using bisection algorithm in Python.,"# Define the function to calculate approximate root using bisection algorithm
def bisection(x, epsilon):
    low = 0
    high = x
    guess = (high + low)/2
    while abs(x - guess**2) > epsilon:
        if guess**2 > x:
            high = guess
        else:
            low = guess
        guess = (high + low)/2
    return guess

print(bisection(15, 0.001))"
Create a Python program to merge two lists into a new one.,"def merge_lists(list1, list2):
    result = []
    for item in list1:
        result.append(item)
    for item in list2:
        result.append(item)
    return result"
Create an algorithm in Python to find the average of numbers in a list.,"def find_average(lst):
    sum = 0
    for num in lst: 
        sum += num 
    # average calculation 
    avg = sum / len(lst)  
      
    return avg

average = find_average([3, 5, 7, 9, 11])
print(""The average of the numbers in the list is:"", average)"
Design a recursive algorithm in Python to print the first n numbers of the Fibonacci sequence.,"def fibonacci(n): 
 if n <= 1: 
  return n 
 else: 
  return(fibonacci(n-1) + fibonacci(n-2))"
"Compute the time complexity of the following Python code snippet:

int find_max(arr):
 max = 0
 for i in range(len(arr)):
 for j in range(len(arr)):
 if arr[i] + arr[j] > max:
 max = arr[i] + arr[j]
 return max","The time complexity of this code snippet is O(n²). The outer loop runs ""n"" times and the inner loop also runs ""n"" times resulting in a complexity of O(n²)."
"Given a list of integers, write a Python program to print the latest 3 largest numbers.","def print_largest_three_numbers(numbers): 
    numbers.sort(reverse=True) 
    print(*numbers[:3], sep = "", "") 

print_largest_three_numbers([5, 1, 10, 25, 74, 17, 2])

Output:
74, 25, 17"
Create a class in python that represents a circle and contains functions to calculate the area and circumference.,"class Circle:
    def __init__ (self, radius):
        self.radius = radius

    def area(self):
        return 3.1416 * self.radius ** 2

    def circumference(self):
        return 2 * 3.1416 * self.radius"
Create a function in Python that prints each element of a list one by one.,"def print_list(list1):
    for element in list1:
        print(element)

list1 = [1,2,3,4,5]

print_list(list1)"
Implement a linked list using Python.,"class Node: 
    # Function to initialize the node object 
    def __init__(self, data): 
        self.data = data  # Assign data 
        self.next = None  # Initialize next as null 
class LinkedList: 
    # Function to initialize head 
    def __init__(self): 
        self.head = None"
Create a function in Python that takes a list of integers and returns the largest integer.,"def biggest_number(num_list):
  return max(num_list)

biggest = biggest_number([1, 5, 4, 9, 2])
print(biggest) # prints 9"
Create a Python script to validate a JSON string.,"import json

def validate_json_string(s):
    try:
        json_obj = json.loads(s)
        return True
    except json.JSONDecodeError:
        return False"
Suggest a way to convert a given string to an integer in Python.,"def to_int(string):
    '''This function takes a string and converts it to an integer.'''
    return int(string)"
Create a Python program that counts the occurrence of a specific character in a list,"def count_char(my_list, char):
    count = 0
    for i in my_list:
        if i == char:
            count += 1
    return count"
Create a Python procedure to determine if two numbers are divisible.,"def divisible(x, y):
    if x % y == 0:
        return True
    else:
        return False"
Write a python function to find the kth element in an array containing odd elements first and then even elements.,"def get_Number(n, k): 
    arr = [0] * n; 
    i = 0; 
    odd = 1; 
    while (odd <= n):   
        arr[i] = odd; 
        i += 1; 
        odd += 2;
    even = 2; 
    while (even <= n): 
        arr[i] = even; 
        i += 1;
        even += 2; 
    return arr[k - 1]; "
"Create a Python class to represent a book with a title, author and ISBN.","class Book:
    def __init__(self, title, author, isbn):
        self.title = title
        self.author = author
        self.isbn = isbn"
Generate a Python program to check whether a given string is a palindrome or not.,"def is_palindrome(text):
    return text == text[::-1]"
Write a Python program for finding the most common element in a list.,"def most_common(lst):
  return max(set(lst), key=lst.count)"
"Write a function in Python to generate a random integer between two numbers, a and b.","import random

def random_int_generator(a, b):
    return random.randint(a, b)"
Design a python script to calculate BMI of a person.,"def calculate_bmi(height, weight): 
    bmi = weight / ((height/100) ** 2)
    return bmi"
Write a function to calculate the sum of series 1³+2³+3³+….+n³.,"import math 
def sum_series(number):
 total = 0
 total = math.pow((number * (number + 1)) /2, 2)
 return total"
"Using Python, write a program to find the most common element among a list of numbers","def most_frequent(list): 
    return max(set(list), key = list.count) 
  
list = [4, 8, 9, 4, 6, 4, 8]
print(most_frequent(list))"
Write a Python program to create a flag made up of stars (*).,"# Generate a flag made up of *
flagString = """"

for i in range(flagSize):
    flagString += ""*""

print(flagString)"
Generate a Python program to reverse the digits of an integer.,"def reverse_int(n):
    rev = 0
    while n > 0:
        rem = n % 10
        rev = rev * 10 + rem
        n = n // 10
    return rev

n = 123
print(reverse_int(n))"
Classify numbers into odd and even using Python.,"odd_list = []
even_list = []

for x in list:
    if x % 2 == 0:
        even_list.append(x)
    else:
        odd_list.append(x)
        
print(""Odd numbers: "", odd_list)
print(""Even numbers: "", even_list)"
Create a Python function that takes two arrays as input and returns a new array containing the elements of both inputs.,"def merge_arrays(array1, array2):
    merged_array = array1 + array2
    return merged_array

array1 = [1, 2, 3]
array2 = [4, 5, 6]
merged_array = merge_arrays(array1, array2)
print(merged_array)"
"Given a list of tuples, write a Python function to sort the list according to the second item in each tuple.","def sort_by_second_item(lst):
    return sorted(lst, key=lambda x:x[1])"
Design a python program that would generate a random password,"import random

def generatePassword():
    charSet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%&*'
    password = ''
    for x in range(8):
        password += random.choice(charSet)
    return password"
Consider the pseudo-code given below. Convert it into a working Python program.,"def fibonacci_sequence(terms):
    first_num, second_num = 0, 1
    fibonacci_sequence = []

    for i in range(terms):
        next_term = first_num + second_num
        first_num, second_num = second_num, next_term
        fibonacci_sequence.append(next_term)

    return fibonacci_sequence

nterms = 10
fibonacci_sequence = fibonacci_sequence(nterms)
print(fibonacci_sequence)"
"Generate an array in Python with a range of numbers from 0 to 10, including 0 and 10.","[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
Generate a python dictionary with all prime numbers between 10 and 30 as keys and their squares as values.,"prime_nos = {11, 13, 17, 19, 23, 29}

output_dict = {prime_no: prime_no**2 for prime_no in prime_nos}
print(output_dict)"
Optimize a Python program that calculates the sum of the numbers up to a given integer.,"def calculateSum(n):
	return (n * (n+1))//2

print(calculateSum(integer))"
Create a Python program to classify the words in a sentence into verbs and nouns.,"sentence = ""The cat is playing with a ball.""
words = sentence.split()

verbs = []
nouns = []

for word in words:
  if word in [""is"", ""playing""]:
    verbs.append(word)
  elif word in [""The"", ""cat"", ""a"", ""ball""]:
    nouns.append(word)

print(""Verbs:"", verbs)
print(""Nouns:"", nouns)"
Generate a Python program to perform matrix multiplication.,"def matrixMultiplication(A,B): 
 
    return [[sum(a*b for a,b in zip(A_row,B_col))  
                 for B_col in zip(*B)] for A_row in A] 

A = [[1, 2, 3], 
     [4, 5, 6], 
     [7, 8, 9]] 

B = [[7, 8, 9], 
     [4, 5, 6], 
     [1, 2, 3]]

C = matrixMultiplication(A,B) 

for i in range(len(C)): 
    print(C[i])"
Write a Python program to create a 3D scatterplot.,"import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

fig = plt.figure()
ax = Axes3D(fig)

# Data for a three-dimensional line
zline = [0, 1, 2, 3]
xline = [0, 1, 2, 3]
yline = [0, 1, 2, 3]
ax.scatter3D(xline, yline, zline, c=zline, cmap='Greens');

plt.show()"
Create a code to extract articles from all Wikipedia pages.,"""""""
Extract articles from all Wikipedia pages.
""""""
import wikipedia

wiki_pages = wikipedia.search('Python')

# Fetch content of all the pages
for page in wiki_pages:
    content = wikipedia.page(page).content
    # Parse the content and extract articles
    extract_articles(content)"
Write a python function to check whether the given string is made up of two alternating characters or not.,"def is_Two_Alter(s):  
    for i in range (len( s) - 2) : 
        if (s[i] != s[i + 2]) : 
            return False
    if (s[0] == s[1]): 
        return False
    return True"
Create a for loop in Python that prints the output of a multiplication table for numbers from 1 to 10.,"for i in range(1, 11):
  for j in range(1, 11):
    print(i * j, end='\t')
  print()"
Create a Python program that looks through a list of colors and returns those colors that are dark.,"def find_dark_colors(colors):
    dark_colors = []
    for color in colors:
        if color == 'Black' or color == 'Purple':
            dark_colors.append(color)
    return dark_colors

result = find_dark_colors(['Red', 'Orange', 'Green', 'Purple', 'Black', 'White'])
print(result)"
Create a Python function to evaluate a given polynomial equation,"def poly_evaluation(x):
  return x**2 - 4*x + 6

x = 2
result = poly_evaluation(x)
print(result) # prints 0"
Develop a Python script for checking for palindromes.,"def is_palindrome(word):
  rev_word = word[::-1]
  if word == rev_word:
    return True
  return False"
"You need to classify if a given python code contains an error or not. Output true if there is an error, false if there is not.",TRUE
Create a method in Python that takes a list of numbers and returns its average.,"def avg(list): 
	sum = 0
	for item in list:
		sum += item 
	return sum / len(list) 

list1 = [7, 8, 10, 4, 11]
result = avg(list1) 
  
print(""Average of all items: "", result)"
Optimize an existing Python code snippet to print all even numbers between 1 and 10.,"num = 0
while num<=10:
    if num % 2 == 0:
        print(num)
    num+=1"
Design a data structure in Python to store a list of student names and their ages.,"student_data = {
 ""student1"" : {""name"": ""John"", ""age"": 20},
 ""student2"" : {""name"": ""Sam"", ""age"": 22},
 ""student3 : {""name"": ""Alice"", ""age"": 19}
}"
Write Python code to print out the prime numbers from 1 to 100,"for i in range(2, 101):
    for j in range(2, i):
        if i % j == 0:
            break
    else:
        print(i)"
Write a Python program to parse a JSON string and store the result in a new dictionary.,"import json

# parse JSON string into a dictionary
json_dict = json.loads(json_string) 
  
# result 
print(json_dict) 

# Output:
{'name': 'John', 'age': 30, 'city': 'New York'}"
Generate pseudo-random numbers in Python.,"# Generate pseudo-random numbers in Python

import random

# Generate a pseudo-random number between 0 and 1
num = random.random()
print(""Pseudo-random number between 0 and 1: "", num)

# Generate pseudo-random numbers from a discrete set
num = random.choice([1, 2, 3, 4, 5])
print(""Pseudo-random number from a discrete set: "", num)"
Generate a Python code to automatically add an item to the beginning of a given array.,"def add_item_to_beginning(arr, new_item):
    return [new_item] + arr"
Write a Python function to find the most frequent element in a list.,"def most_frequent(list): 
    counter = 0
    num = list[0] 
      
    for i in list: 
        curr_frequency = list.count(i) 
        if(curr_frequency> counter): 
            counter = curr_frequency 
            num = i 
  
    return num"
Write a Python program to randomly select a number of elements from a list without any repeat,"import random

def random_select(arr, k):
    new_arr = random.sample(arr,k)
    return new_arr"
Construct a Python program that takes in two numbers from the user and swap them.,"def swap(x, y):
    x, y = y, x
    return x, y

x = int(input(""Enter x: ""))
y = int(input(""Enter y: ""))
x, y = swap(x, y)
print(""x:"", x, ""y:"", y) #output: x: 4  y: 8"
Generate a list comprehensions in Python that takes a positive integer and creates a list with all its factors.,"factors = [list_element for list_element in range(1,15+1) if 15%list_element == 0]"
Create a GUI in Python using Tkinter that can register user input and display a respective result.,"import tkinter as tk

root = tk.Tk()

def calculate_result():
    result = input_field.get()
    output_label.config(text=result)

input_field = tk.Entry(root)
input_field.pack()

submit_button = tk.Button(root, text=""Calculate"", command = calculate_result)
submit_button.pack()

output_label = tk.Label(root, text=""Result..."")
output_label.pack()

root.mainloop()"
Create an AWS Lambda function in Python that handles GET requests to the URL /hello and responds with a welcome message.,"import json

def lambda_handler(event, context):
    if event['httpMethod'] == 'GET':
        response =  {
            'statusCode': 200,
            'headers': {'Content-Type': 'application/json'},
            'body': json.dumps({'message': 'Welcome!'})
        }
        return response"
Write a Python program to create a tuple with 10 random numbers.,"import random

def create_random_tuple():
    tup = ()
    while len(tup) < 10:
        tup += (random.randint(1,100), )
    return tup"
Create a HTTP GET request in Python to retreive an API request.,"import requests

url = ""https://example.com""

# Send Get request to the API
response = requests.get(url)

# Store the response text
response_text = response.text"
Produce a logic in Python to truncate a given string after the given number of characters.,"def string_truncate(string, length):
    if length > len(string):
        return string
    else:
        return string[:length] + '...'"
Generate random numbers between 1 and 2 using the random module in Python.,"import random

random_number = random.uniform(1, 2)
print(random_number)"
Sort the given list of numbers in ascending order using quick sort in Python.,"def quick_sort(arr):
    if len(arr) <= 1:
        return arr
 
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quick_sort(left) + middle + quick_sort(right)"
Create a Python function called print_name that will print out the given name.,"def print_name(name):
    print(name)"
Write a for loop to print all the keys and values of a Python dictionary.,"for key,value in my_dict.items(): 
    print(key,"" :"",value)"
Write a python function to find the average of even numbers till a given even number.,"def average_Even(n) : 
    if (n% 2!= 0) : 
        return (""Invalid Input"") 
        return -1  
    sm = 0
    count = 0
    while (n>= 2) : 
        count = count+1
        sm = sm+n 
        n = n-2
    return sm // count "
Generate a Python program to find the distinct pair of the numbers whose product is equal to a given number.,"def distinct_pair(product):
    pairs = []
    for i in range(1,product):
        if product % i == 0:
            pairs.append((i,product//i))

    return set(pairs)"
"Using Python, write a program that prints out the Fibonacci sequence up until the number 100.","def Fibonacci(n): 
 a = 0
 b = 1
 
 if n < 0: 
  print(""Incorrect input"") 
 elif n == 0: 
  return a 
 elif n == 1: 
  return b 
 else: 
  for i in range(2,n+1): 
   c = a + b 
   a = b 
   b = c 
  return b 
 
# Function to display Fibonacci sequence until number 100
for i in range(101):
  print(Fibonacci(i),end = "" "")"
Design a function in Python to remove the vowels from a given string.,"def remove_vowels(text):
    """"""Remove the vowels from a given string.""""""
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    result = """"
    for char in text:
        if char.lower() not in vowels:
            result += char
    return result

# Output
print(remove_vowels(text))"
Convert the following function written in Python to Java.,"public int add_two_numbers(int a, int b){
    return a + b;
}"
Create a Python program to read a list of strings and display the same strings in a reverse order.,"def reverse_strings(string_list):
 reversed_string_list = []
 for string in string_list:
 reversed_string_list.insert(0, string)
 return reversed_string_list

string_list = [""Apple"", ""Banana"", ""Mango"", ""Orange""]
print(reverse_strings(string_list))"
Write a python function to count the number of words in a sentence that are longer than the given length.,"def count_long_words(sentence, length):
    words = sentence.split()
    count = 0
    
    for word in words:
        if len(word) > length:
            count += 1
    return count"
Design a Python code to encrypt a given password argument with AES encryption.,"from Crypto.Cipher import AES

def encrypt_password(password):
    key = b'Sixteen byte key'
    cipher = AES.new(key,AES.MODE_EAX)
    nonce = cipher.nonce
    ciphertext, tag = cipher.encrypt_and_digest(password.encode('utf-8'))
    return [ciphertext, tag, nonce]

if __name__ == '__main__':
    password = ""abc123""
    print(encrypt_password(password))"
Develop a Python program to generate a random password of length 8 that consists of letters and numbers.,"import random
import string

def  generate_password():
    chars = string.ascii_letters + string.digits
    size = 8
    return ''.join(random.choice(chars) for x in range(size))

print(generate_password())"
Write a python function to sort a list of elements using quick sort algorithm.,"def quick_sort(arr):
    if len(arr) < 2:
        return arr
    else:
        pivot = arr[0]
        less = [i for i in arr[1:] if i <= pivot]
        greater = [i for i in arr[1:] if i > pivot]
        return quick_sort(less) + [pivot] + quick_sort(greater)"
Write a Python program that returns the factorial of a number.,"def factorial(n):
    if n == 1:
        return 1
    else:
        return n * factorial(n-1)

result = factorial(5)
print(result)"
Write a function in Python that takes a given string and checks if it is a palindrome or not.,"def isPalindrome(s):
    left = 0 
    right = len(s)-1 
      
    while(left < right ): 
        if (s[left] != s[right]): 
            return False
        left += 1
        right -= 1
    return True
  
print (isPalindrome(""racecar""))"
Transform the following code written in Java to code written in Python.,"def largest(array):
 largest = array[0]
 for i in range(1, len(array)):
  if array[i] > largest:
   largest = array[i]
 return largest"
Optimize a given program written in Python.,"def get_factorial(n):
    result = 1
	for i in range(1, n + 1):
		result *= i
	return result"
Generate a function in Python to optimize a function based on the mean squared error metric.,"import gradientDescent as GD

def optimize(weights):
 cost, gradient = GD.cost_function(f, weights)
 optimizer = GD.Optimizer(learning_rate=0.01, momentum=0.9, decay=0.001)
 optimizer.run(cost, gradient)
 return optimizer.weights"
Create a Python program to print out the sum of squares of all the numbers from 1 to 10.,"def sum_of_squares(numbers):
    total = 0
    for num in range(1,numbers+1):
        total += num**2
    print(total)

sum_of_squares(10)"
Create an object-oriented class in Python for a Song.,"class Song:
    def __init__(self, title, artist, album):
        self.title = title
        self.artist = artist
        self.album = album
    
    def print_info(self):
        print(""Title: %s, Artist: %s, Album: %s"" % (self.title, self.artist, self.album))"
Store the provided data into a key-value object in Python.,"person_data = {
    ""first_name"": ""John"",
    ""last_name"": ""Doe"",
    ""age"": 28
}"
"Using Python, can you calculate the sum of all numbers in a list?","sum = 0
for num in [1, 3, 5, 7, 9]:
    sum += num

print(sum) # 25"
Write a Python program to optimize the given binary search tree.,"def optimize_bst(tree):
    """"""Given a binary search tree, optimizes the tree for better search performance.""""""
    if tree is None:
        return
    optimize_bst(tree.left)
    optimize_bst(tree.right)
    if tree.left and tree.right:
        tree.data = min(tree.left.data, tree.right.data)"
Modify the following code to reverse a string without using the built-in reverse() method in Python.,"def reverseString(string):
    newString = """"
    length = len(string)
    for i in range(length - 1, -1, -1):
        newString += string[i]
    return newString

print(reverseString(""Hello World!""))"
Create a function in Python to print Pascal's Triangle of a given number of rows.,"def pascal_triangle(n):
    triangle = []

    for i in range(n):
        row = [1] * (i+1)
        triangle.append(row)

        for j in range(1,i):
            row[j] = triangle[i-1][j-1] + triangle[i-1][j]

    for row in triangle:
        print(row)

pascal_triangle(6) 
# Output: [1]
# [1, 1]
# [1, 2, 1]
# [1, 3, 3, 1]
# [1, 4, 6, 4, 1]
# [1, 5, 10, 10, 5, 1]"
Generate a program in Python for merging two sorted lists into one.,"def merge_sorted_lists(list1, list2):
    merged_list = []
    i = 0
    j = 0
    while i < len(list1) and j < len(list2):
        if list1[i] < list2[j]:
            merged_list.append(list1[i])
            i += 1
        else:
            merged_list.append(list2[j])
            j += 1
    merged_list += list1[i:]
    merged_list += list2[j:]
 
    return merged_list"
Write a Python Program to take multiple inputs and prints the highest among them.,"values = [14, 16, 2]
 
highest = values[0]
 
for i in values:
    if highest < i:
        highest = i
 
print(""The highest value is: "", highest)"
Write a python function to sort the given string.,"def sort_String(str) : 
    str = ''.join(sorted(str)) 
    return (str) "
Write a Python program to create a dictionary from two lists where the first list contains keys and the second list contains values.,"def create_dictionary(keys, values):
  dictionary = dict(zip(keys, values))
  return dictionary

dictionary = create_dictionary(keys, values)
print(dictionary)"
Create a class in Python to generate a multiplied n-dimensional matrix.,"class MultidimensionalMatrix():
    def __init__(self, n):
        self.n = n
        
    def multiply_matrix(self, a, b):
        if len(a[0]) == len(b):
            result = [[sum(a*b for a,b in zip(i,j)) for j in zip(*b)]
                      for i in a]
            return result
        else:
            print(""Incompatible matrix"")"
Create a function to parse a JSON string and return a Python dictionary.,"import json

def parseJSON(json_string):
    return json.loads(json_string)

dictionary = parseJSON('{""name"": ""John"", ""age"": 32}')"
Create a basic class in Python with three properties and a constructor.,"class MyClass:
 def __init__(self, data1, data2, data3):
  self.data1 = data1
  self.data2 = data2
  self.data3 = data3"
Write a function to decode a run-length encoded given list.,"def decode_list(alist):
    def aux(g):
        if isinstance(g, list):
            return [(g[1], range(g[0]))]
        else:
            return [(g, [0])]
    return [x for g in alist for x, R in aux(g) for i in R]"
Generate a code to find the number of 1-bits in an integer,"# Python Program to count the number of ones in a number. 
def FindOnes(num): 
    count = 0 
    while (num): 
        num = num & (num - 1) 
        count = count + 1
          
    return count
  
# Driver Code 
num = 23
print(FindOnes(num))"
"Given an array of strings, build an algorithm in Python to determine the index of the element that contains the smallest number of characters.","def min_length_index(arr):
  min = float('infinity')
  min_i = 0
  for i in range(len(arr)):
    if len(arr[i]) < min:
      min = len(arr[i])
      min_i = i
  return min_i

print(min_length_index([""Hello"", ""World"", ""Python"", ""is"", ""Fun""])) # 3"
Write a python function to check whether the given number is a perfect square or not.,"def is_Perfect_Square(n) :
    i = 1
    while (i * i<= n):
        if ((n % i == 0) and (n / i == i)):
            return True     
        i = i + 1
    return False"
Write a Python script to extract emails from a given text.,"import re
 
text = ""... text content ...""
 
# Search for all emails
emails = re.findall(r""[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+"", text)
print(emails)"
Write a Python function to sort a list of tuples according to the second element of each tuple.,"def sort_by_tuple_second(tuple_list):
    tuple_list.sort(key=lambda x: x[1])
    return tuple_list"
Create a Python class for representing a stack.,"class Stack:
    def __init__(self):
        self.items = []

    def isEmpty(self):
        return self.items == []

    def push(self, item):
        self.items.append(item)

    def pop(self):
        return self.items.pop()

    def peek(self):
        return self.items[len(self.items)-1]

    def size(self):
        return len(self.items)"
"Generate a Python class to store data about a person's name, age and address.","class Person:
	def __init__(self, name, age, address):
		self.name = name
		self.age = age
		self.address = address"
Generate Python code to print a star pattern.,"for i in range(5): 
    for j in range(i): 
        print ('* ', end="""") 
    print('') 
  
for i in range(5,0,-1): 
    for j in range(i): 
        print('* ', end="""") 
    print('')"
Write a python function to determine whether all the numbers are different from each other are not.,"def test_distinct(data):
  if len(data) == len(set(data)):
    return True
  else:
    return False;"
Create a Python program that separates odd and even numbers.,"def odd_even(numbers):
    odd = []
    even = []
    for num in numbers:
        if num % 2 == 0:
            even.append(num)
        else:
            odd.append(num)
    return odd, even

odds, evens = odd_even([3, 4, 7, 12, 19])
print(odds) # prints: [3, 7, 19]
print(evens) # prints: [4, 12]"
Generate a Python program that takes a list of numbers and an integer threshold as inputs and returns the list elements that are greater than or equal to the threshold.,"def filter_numbers(nums, threshold):
 return [num for num in nums if num >= threshold]
 
 numbers = [2, 8, 10, 13, 15]
 threshold = 10
 
 print(filter_numbers(numbers, threshold))
# Output: [10, 13, 15]"
Generate a function in Python that returns the cumulative sum of a list of numbers.,"def cumulative_sum(nums):
 sums = []
 current_sum = 0
 
 for n in nums:
 current_sum += n
 sums.append(current_sum)
 
 return sums
 
print(cumulative_sum([1, 2, 3, 4]))    # [1, 3, 6, 10]"
Write a Python script to parse and extract a list of names from a provided sentence.,"names = []

sentence = ""Joe, Mary, and Jake""

words = sentence.split()

for word in words:
 if word.endswith(','):
  names.append(word[:-1])
 elif word.startswith('and'):
  names.append(word[4:])
 else:
  names.append(word)
  
print(names) # Output: ['Joe', 'Mary', 'Jake']"
Design an algorithm in Python to find the maximum key from a given dictionary.,"def max_key(dict):
    max_key = -1
    max_val = -1
    for key, val in dict.items():
        if key > max_key and val > max_val:
            max_key = key
            max_val = val
    return max_key"
Design a class to represent a car in Python.,"class Car:
    def __init__(self, make, model, year):
        self.make = make
        self.model = model 
        self.year = year
        self.speed = 0

    def accelerate(self):
        self.speed += 10

    def brake(self):
        self.speed -= 10

    def get_speed(self):
        return self.speed"
Improve the following small python program to make a valid babynames list.,"babynames = ['Bob', 'Alice', 'Billy']"
Write a Python program to count the number of even and odd numbers in a given list of integers.,"def count_even_odd(numbers):
 even_count = 0
 odd_count = 0
 for num in numbers:
     if num % 2 == 0:
         even_count += 1
     else:
         odd_count += 1
 return even_count, odd_count"
"Write a Python program to generate all possible strings by using 'a', 'e', 'i', 'o', 'u'.","def generate_combinations(s):
    i = 0
    result = []
    for a in s:
        for b in s:
            for c in s:
                for d in s:
                    for e in s:
                        result.append(a+b+c+d+e)
    return result

print(generate_combinations(['a', 'e', 'i', 'o', 'u']))"
Create an algorithm in Python to find the number of pairwise disjoint subsets of a given set.,"def subsets(s):
    res = []
    for i in range(1 << len(s)):
        subset = [list(s)[x] for x in range(len(s)) if i & (1 << x)]
        if not any(set(subset).issubset(r) for r in res):
            res.append(subset)
    return res"
Use a while-loop in Python to print the sum of the first 10 natural numbers.,"num = 1
sum = 0
while num <= 10:
    sum = sum + num
    num = num + 1

print(sum)  # Output: 55"
Write a Python program to remove all the elements in a dictionary with a given value.,"dictionary = {'a': 1, 'b': 2, 'c': 3, 'd': 3}
value = 3

dictionary = {key:val for key, val in dictionary.items() if val != value}

print(dictionary)"
Is it possible to create a Python program that converts a given string to a different case?,"def convert_string_case(string):
    new_string = string.swapcase()
    return new_string

string = ""this Is A TeST""
new_string = convert_string_case(string)
print(new_string)"
Create a Python function to return a list that its elements are in descending order based on input parameter.,"def sort_descending(lst):
    return sorted(lst, reverse=True)
  
# Example 
list_sample = [7, 4, 3, 10, 2, 1]
result = sort_descending(list_sample)  
print(result) 
# Output: [10, 7, 4, 3, 2, 1]"
Train a linear regression model using Python to predict the prices of houses.,"import pandas as pd
from sklearn.linear_model import LinearRegression

#load dataset
df = pd.read_csv(""housing_data.csv"")

#split dataset
X = df.drop(""price"", axis=1)
y = df[""price""]

#train model
model = LinearRegression()
model.fit(X, y)"
Create a Python program that takes input from the user and prints out the reversed string.,"user_input = input('Enter a string: ')

rev_string = user_input[::-1]

print(f""The reversed string is: {rev_string}"")"
Chart the following equation y=3x+2 using Python.,"import matplotlib.pyplot as plt

x_values = range(-20, 21)
y_values = [3*x+2 for x in x_values]

plt.plot(x_values, y_values)
plt.xlabel('x')
plt.ylabel('y')
plt.title('y = 3x + 2')
plt.show()"
Compose a python program to find the sum of the digits of a given number.,"def sum_of_digits(num):
    sum = 0
    while(num > 0):
        d = num % 10
        num = num // 10
        sum += d
    return sum"
Design an API endpoint in Python that takes in a PDF document and returns the number of words in it.,"@app.route('/api/getWordCount', methods=['POST'])
def getWordCount():
    """"""Endpoint for getting words count in PDF document""""""
    data = request.get_json()
    pdf = data['pdf'] 
    word_count = count_words(pdf)
    return jsonify({'wordCount': word_count})"
Write a Python program that takes a string as input and returns a new string with all vowels removed.,"# Function to remove vowels
def removeVowels(str):
  vowels = ('a', 'e', 'i', 'o', 'u')
  for x in str.lower():
    if x in vowels:
      str = str.replace(x,"""")
  print(str)  

# Driver program
str = ""Hello""
removeVowels(str)

# Output:
Hll"
"Create a Python function that takes two parameters, a number (n) and a word (w), and prints out the word n number of times.","def repeat(n, w):
    for i in range(n):
        print(w)

repeat(3, ""Hello"")  # Output: Hello Hello Hello"
Design a function in Python to find the area of a circle from the given radius.,"def areaCircle(radius):
    pi = 3.14
    area = pi * (radius**2)
    return area

print(areaCircle(5)) # 78.5"
Write a Python script to print a multiplication table for all the numbers from 1 to 10.,"for i in range(1, 11):
  for j in range(1, 11):
    print(i*j, end=""\t"")
  print()"
Write code in Python to generate all the possible permutations of a given list.,"import itertools

def permute(list):
    return list(itertools.permutations(list))"
Classify the following Python code as syntactically correct or incorrect,incorrect
Generate a piece of code to demonstrate the usage of for loop in python.,"for i in range(10):
  print('The value of the variable i is: ', i)"
"Write a function in Python which takes in a string and an integer, n, as arguments and returns the last n characters of the string.","def last_n_chars(string, n):
    return string[len(string) - n:]"
Output a code in Python to find the second largest number in a list provided as input.,"def second_largest(list): 
    first = second = float('-inf')
    for num in list:
        if num > first: 
            second = first 
            first = num 
        elif num > second and num != first: 
            second = num     
    return second"
Generate a code to convert a given name to its uppercase version.,"""""""
Python program to convert a name to uppercase
""""""

def to_uppercase(name):
 return name.upper()

name = ""john"" 
print(to_uppercase(name))"
Create a Python function to shuffle a list of numbers.,"import random

def shuffle_list(nums):
 random.shuffle(nums)
 return nums

shuffled_list = shuffle_list([1, 2, 3, 4, 5])
print(shuffled_list) #[3, 5, 2, 4, 1]"
Write a function to find the intersection of two arrays using lambda function.,"def intersection_array(array_nums1,array_nums2):
 result = list(filter(lambda x: x in array_nums1, array_nums2)) 
 return result"
Create a web application that will store and display a user's contacts.,"We can create a web application for storing and displaying a user's contacts. We can use HTML, CSS, and JavaScript for creating the front-end of the application. Then, we can use Python to create the backend of the application. We can also use a database like MongoDB to store the user's contacts."
"Using Regular Expressions, create a Python program that finds all the words in a given sentence that end with 'ing'.","import re
 
sentence = ""This is a sentence containing a lot of words ending in 'ing'.""
pattern = r""\w+ing\b""
 
words = re.findall(pattern, sentence)
 
print(words)
 
# Output: ['containing', 'ending']"
Create a Python lambda expression that prints out the square of each item in an input list.,"square = lambda nums: [x*x for x in nums]

squares = square([1,2,3])
print(squares)"
Write a Python program to calculate the sum of all even numbers less than or equal to n.,"def sum_of_even_numbers(n):
 result = 0
 for i in range(2, n+1, 2):
 result += i
 return result"
"Create a Python function that takes in two parameters, a list of numbers and a number to be compared to the list. The function should return the number of elements in the list that are larger than the parameter number.","def larger_than_num(nums, num_to_compare):
  count = 0
  for num in nums:
    if num > num_to_compare:
      count += 1
  
  return count

print(larger_than_num(nums, num_to_compare)) # 3"
Write a Python program to check if an item exists in a given list.,"def item_exists(mylist, element):
    if element in mylist:
        return True
    return False

result = item_exists([1,2,3,4,5], 3)
print(result)"
Design a Python program to remove duplicates from a given array.,"def remove_duplicates(arr): 
    final_list = [] 
    for num in arr: 
        if num not in final_list: 
            final_list.append(num) 
    return final_list"
Generate a Python program to add a prefix and suffix to each elements of a list.,"def add_prefix_suffix(lst, prefix, suffix): 
	return [prefix + i + suffix for i in lst]"
Create a Python function that takes a string as an argument and returns the number of vowels present in the string.,"def num_vowels(string):
 num_vowels = 0
 for char in string:
 if char in ""aeiouAEIOU"":
 num_vowels += 1
 return num_vowels"
"Using Python, build a dictionary containing the numbers from 1 to n as the key and the square of each number as the value.","my_dict = {}

for i in range(1,n+1):
 my_dict[i] = i**2

print(my_dict)"
Write a Python function to transpose a given matrix of size (m x n).,"def transposeMatrix(matrix): 
 m = len(matrix) 
 n = len(matrix[0]) 
  
 # Create a new matrix 
 transpose = [[0 for x in range(m)] for y in range(n)] 
  
 # Iterate through the original matrix 
 for i in range(m): 
 for j in range(n): 
 transpose[j][i] = matrix[i][j] 
 return transpose"
Compile a Python script that prints out the squares of elements from 1 to a given number.,"def print_squares(N):
    for x in range(1, N+1):
        print(x*x)"
Edit this Python code to make the while loop break when the user inputs an empty string.,"user_input = input(""Please enter a word:"")
while user_input != """":
    print(user_input)
    user_input = input(""Please enter a word:"")"
Write a function where a string will start with a specific number.,"import re
def match_num(string):
    text = re.compile(r""^5"")
    if text.match(string):
        return True
    else:
        return False"
Create a Python program to generate a multiplication table.,"def generate_table():
    for i in range(1, 11):
        for j in range(1, 11):
             print('{0} x {1} = {2}'.format(i, j, i*j))
        print('\n')"
Create a function in Python that takes a list of integers as an argument and then returns the maximum integer.,"def find_max(a):
  max = a[0]
  for i in a:
    if i > max:
      max = i
  return max

print(find_max([3, 5, 12, 20, 6, 4]))
# 20"
Write a Python program to format a number with a given number of decimal places.,"def format_number(number, decimal_places):
 return f""{number:.{decimal_places}f}"""
"Create a hash function in Python that takes a string as input, and returns a fixed size integer output.","def calculate_hash(s):
    hash_value = 0
    for c in s:
        hash_value = (hash_value * 7 + ord(c)) % 8
    return hash_value"
"Create a python script that checks if all numbers in an array are greater than, equal to, or less than a given number.","def checkNum(arr, num):
    response = []
    for element in arr: 
        if element > num: 
            response.append('greater than')
        elif element < num:
            response.append('less than')
        else:
            response.append('equal to')
    return response

nums = [3,5,7]
out = checkNum(nums, 4)
print(out)"
"Using the comment as a guide, replace all the variables with their corresponding values in the given Python code.","# TODO: Replace the variables with their values
result = 10 + 25"
Generate a syntax to input random numbers into a python program,"import random

# Generates N random numbers
numbers = [random.randint(0, N) for i in range(N)]"
Complete the following Python function to sort a list of numbers in ascending order.,"def sort_list(nums):
    for i in range(len(nums) - 1):
        for j in range(i + 1, len(nums)):
            if nums[i] > nums[j]:
                nums[i], nums[j] = nums[j], nums[i]
    return nums"
Write a function to extract specified size of strings from a give list of string values.,"def extract_string(str, l):
    result = [e for e in str if len(e) == l] 
    return result"
Create a Python program to calculate the Fibonacci numbers up to a certain value.,"def fib(n): 
 if n <= 1: 
  return n 
 else: 
  return(fib(n-1) + fib(n-2)) 

# Take input from the user 
n = int(input(""Enter a number: "")) 

# Print Fibonacci sequence up to n 
print(""Fibonacci sequence:"") 
for i in range(n): 
 print(fib(i))"
Design a Python program to calculate the area of a triangle given three side lengths.,"def calculate_triangle_area(a, b, c):
    # Calculate the semi-perimeter
    s = (a + b + c) / 2
    # Calculate the area of the triangle
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    return area

a = 3
b = 4
c = 5

area = calculate_triangle_area(a, b, c)
print(""Area of the triangle is: {}"".format(area))"
Write a Python program to group a list of string elements into a dictionary of word counts.,"words = ['hello', 'world', 'hello', 'world', 'this', 'is', 'a', 'test']

word_counts = {word: words.count(word) for word in words}

print(word_counts)
# Output: {'hello': 2, 'world': 2, 'this': 1, 'is': 1, 'a': 1, 'test': 1}"
Write a function to count repeated items of a tuple.,"def count_tuplex(tuplex,value):  
  count = tuplex.count(value)
  return count"
Write a python function to calculate the product of the unique numbers of a given list.,"def unique_product(list_data):
    temp = list(set(list_data))
    p = 1
    for i in temp:
        p *= i
    return p"
Create a Python program that takes in a list of numbers and outputs the sum of itself and all its previous numbers (including the number itself).,"def sum_of_all(nums):
    sum = 0
    for i in range(len(nums)):
        sum += sum(nums[:i+1])
    return sum

#Test
print(sum_of_all([2, 3, 4, 5, 6])) # Output: 20"
Construct an algorithm in Python to print out the first 20 perfect squares.,"perfect_squares = []
i = 1
while len(perfect_squares) < 20:
 perfect_square = i * i 
 perfect_squares.append(perfect_square)
 i = i + 1

print(perfect_squares)"
Create a program to find the smallest number in a given list using a for loop in Python.,"def find_smallest_number(lst):
  smallest = lst[0]
  for number in lst:
    if number < smallest:
      smallest = number
  return smallest

print(find_smallest_number([12, 4, 16, 15]))
# Output: 4"
Write a Python program to extract all the numbers from a specified string.,"def extract_numbers(s):
    numbers = []
    for char in s:
        if char.isdigit():
            numbers.append(int(char))
    return numbers

result = extract_numbers(""This is 3 string with 4 numbers"")
print(result)"
Implement a search algorithm in Python that takes a list and a query as input and returns all matching elements.,"def search(list, query): 
    results = []
    for item in list:
        if item == query: 
            results.append(item) 
    return results

list = [1, 2, 3, 4, 5, 6]
query = 4

result = search(list, query)
print(result)"
Write a function to check if a substring is present in a given list of string values.,"def find_substring(str1, sub_str):
   if any(sub_str in s for s in str1):
       return True
   return False"
Write a Python function to display the first and last elements of a list.,"def display_first_last_elements(lst):
    print(""First element of the list:"", lst[0])
    print(""Last element of the list:"", lst[-1])"
Modify the given Python program so that it checks the spelling of the given word using an external library.,"import spellchecker

word = ""Hello""

correct_word = spellchecker.correction(word)
if word != correct_word:
 print(""Did you mean"", correct_word, ""?"")"
Write a Python program for finding the root of a given quadratic equation.,"def quadratic(a, b, c):
    # calculate the discriminant
    d = (b**2) - (4*a*c)

    # find the two roots
    root1 = (-b-d**0.5)/(2*a)
    root2 = (-b+d**0.5)/(2*a)
    return root1, root2"
Optimize a Python code to minimize program execution time,"def sum_array(array):
    return sum(array)"
Write code to generate a multidimensional array containing two lists of strings in Python.,"arr = [[""apple"", ""french fries""],
 [""banana"", ""rice""],
 [""carrot"", ""salad""]]"
Edit the given Python code to calculate the Fibonacci sequence up to the 15th number.,"def fibonacci(n): 
   if n<= 0: 
      print(""Incorrect input"") 
   elif n==1: 
       return 0
   elif n==2: 
       return 1
   else: 
       return(fibonacci(n-1) + fibonacci(n-2)) 

# Function calls
fibonacci(15)"
Write a Python function that takes in a list of strings and returns a new list with all duplicates removed.,"def remove_duplicates(lst):
    new_list = []
    for x in lst:
        if x not in new_list:
            new_list.append(x)
    return new_list

print(remove_duplicates([""apple"",""apple"",""banana"",""orange"",""pear"",""banana""]))"
Create a Python program to convert a given string from lower to upper case.,"def convert_to_upper_case(string):
    '''This function will take a string as input and convert it to upper case'''
    return string.upper()

converted_string = convert_to_upper_case(""hello world"")
print(converted_string)"
Develop a Python script to calculate the average of all the numbers present in a list.,"def avg(list_num):
    sum = 0
    
    for num in list_num:
        sum += num
    
    return sum / len(list_num)

print(""Average is:"", avg(list_num))"
Write a imperative command to print the first two characters of the given string 'Python'.,print('Python'[:2])
Create an API endpoint in Python that can accept a POST request containing a JSON object.,"from flask import Flask, request, jsonify

app = Flask(name)

@app.route('/api/endpoint', methods=['POST'])
def endpoint():
 data = request.get_json()
 # Do something with data
 return jsonify({'message': 'Success'})

if name == 'main':
 app.run(debug=True)"
Write a function to find the maximum element of all the given tuple records.,"def find_max(test_list):
  res = max(int(j) for i in test_list for j in i)
  return (res) "
Write a function to divide a number into two parts such that the sum of digits is maximum.,"def sum_digits_single(x) : 
    ans = 0
    while x : 
        ans += x % 10
        x //= 10  
    return ans 
def closest(x) : 
    ans = 0
    while (ans * 10 + 9 <= x) : 
        ans = ans * 10 + 9  
    return ans   
def sum_digits_twoparts(N) : 
    A = closest(N)  
    return sum_digits_single(A) + sum_digits_single(N - A) "
Create a Python script to build a dictionary from string to string of the given samples.,"def build_dictionary(samples):
 dictionary = {}
 for sample in samples:
  key, value = sample.split(""->"")
  dictionary[key] = value
 return dictionary
 
samples = [""apple->red"", ""banana->yellow"", ""cherry->red""]
dictionary = build_dictionary(samples)

print(dictionary)"
Create a python function which takes a list of string and converts each string to its uppercase equivalent.,"def to_uppercase(items):
    return [item.upper() for item in items]

result = to_uppercase(['Hello', 'World']) 
print(result)"
"Express the following task using Python code: Calculate the area of a triangle, given the base and height.","def triangle_area(base, height):
    return 0.5 * base * height"
Create a Python class which stores in a dictionary the ISBN and title of books.,"class Book:
    def __init__(self):
        self.books = {}
        
    def add_book(self, isbn, title):
        self.books[isbn] = title
        
    def get_book(self, isbn):
        if isbn in self.books:
            return self.books[isbn]
        else:
            return None"
Generate a code template for a class in Python.,"class ClassName:
 def __init__(self, parameters):
	 # initialization code
 
 def some_method(self):
	 # method code
 
 # additional methods and class variables"
Construct a code to sum all the numbers in a list in Python.,"sum = 0
for num in [3, 4, 7, 1]:
  sum += num

print(sum) # Output is 15"
Write a Python program that generates a random password of length 10.,"import random
import string

def generate_password():
    length = 10
    char_set = string.ascii_letters + string.digits + string.punctuation
    rand_pwd = ''.join(random.choice(char_set) for i in range(length))
    return rand_pwd

if __name__ == '__main__':
    print(generate_password())"
"Write a Python program that will ask the user to enter a word or phrase and then print out the individual characters, sorted alphabetically.","word = input('Enter a word or phrase: ')

characters = sorted(list(word))

for character in characters:
    print(character)"
Write a Python program to calculate the standard deviation of given data.,"import statistics
def calculate_std_dev(arr):
	return statistics.stdev(arr)"
Generate a clickable GUI for a Python application.,"# Imports
from tkinter import *

# Create window
root = Tk()

# Define functions
def func1(): 
    pass

def func2():
    pass

# Add elements to GUI
btn1 = Button(root, text=""Function 1"", command=func1)
btn2 = Button(root, text=""Function 2"", command=func2)

btn1.pack()
btn2.pack()

# Run the window 
root.mainloop()"
"Construct a regular expression in Python to find all the occurrences of words that start with the letter ""A"" and end with a number.","regex = r""\bA\w*\d\b"""
Optimize a given Python function to increase its performance.,"def factorial(n):
    """"""Calculates the factorial of `n` using an optimized approach. """"""
    result = 1
    for i in range(2,n+1):
        result *= i
    return result

if __name__ == '__main__':
    print(factorial(4)) # 24"
Compose a Python program that evaluates a given expression provided as a string and prints its result.,"def evaluate_expression(expression):
    try:
        result = eval(expression)
        print(result)
    except:
        print(""Error: invalid expression"")

evaluate_expression(""1+1"")"
Can you create a Python script that prints out a 10x10 multiplication table?,"for i in range(1,11):
 for j in range(1,11):
  print(str(i*j)+'\t', end = '')
 print()"
"Create a python function that takes in a string, and returns the string with the first letter of each word capitalized.","def capitalize_string(string):
    words = string.split(' ')
    capitalized_words = []
    for word in words:
        capitalized_words.append(word.capitalize())
    
    return ' '.join(capitalized_words)"
Write a Python program to convert strings from upper case to lower case.,"def convert_lowercase(string):
    return string.lower()"
Generate a python script to calculate the distance between two points in 3D space,"def distance_three_d(p1,p2):
    a = (p2[0] - p1[0])**2
    b = (p2[1] - p1[1])**2
    c = (p2[2] - p1[2])**2
    return (a + b + c) **0.5"
Create a Python script to sort the numbers in an array.,"def sort_array(array):
    array.sort()
    return array

result = sort_array([2, 4, 5, 1, 3])
print(result)"
Write a Python program to generate a random array of integers of length N with values between 1 and M (inclusive).,"import random 

N = 10
M = 100

random_array = [random.randint(1, M) for _ in range(N)] 
print(random_array) 
# Output: [3, 82, 83, 32, 45, 44, 6, 67, 25, 29]"
Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.,"import heapq as hq
def heap_queue_smallest(nums,n):
  smallest_nums = hq.nsmallest(n, nums)
  return smallest_nums"
Generate code to perform principal component analysis in Python.,"import numpy as np
from sklearn.decomposition import PCA


# Input array
X = np.array([[1,2,3],[4,5,6],[7,8,9]])

# Create and fit the PCA
pca = PCA(n_components=2)
pca.fit(X)

# Transform data into principal components
X_pca = pca.transform(X)

# Output the first principal component
print(X_pca[:,0])"
Write a python script that sorts a list of strings by length.,"def sort_strings_by_length(strings):
    # Sort strings by length in ascending order
    strings.sort(key=len)
    return strings"
Write a Python program to convert all the lower case letters in a string to upper case.,"print(''.join([i.upper() for i in ""hello World""])) # HELLO WORLD"
Create a Python program to parse a string for any numbers and calculate the sum.,"import re

# Input string
string = ""My age is 25 and my friend's age is 30.""

# Find all the numbers in the string
numbers = re.findall(""\d+"", string)

# Calculate the sum
sum = 0
for number in numbers:
 sum += int(number)

# Print the sum
print(""The sum of the numbers is:"", sum)"
Write a python program to calculate the sum of the given numbers and return the result.,"def sum_numbers(arr):
    result = 0
    for num in arr:
        result += num
    return result"
Write a Python program to concatenate all the elements in a given list of strings.,"def concatenate_strings(list_of_strings):
    result = """"
    for string in list_of_strings:
        result += string
    return result"
Create a function to invert a matrix in Python,"def invert_matrix(matrix):
    return matrix.T # transpose matrix"
"In this Python code, identify the type of data structure being used and write down advantages and disadvantages of using this type of data structure.","A list is being used in this code snippet. Advantages of using a list are that it is mutable, can store duplicate data, and allows for indexing. Disadvantages of using a list are that it can be slow if the list is very long and operations take a long time."
"Create a web application usingPython and Flask that displays a simple ""Hello World"" page.","from flask import Flask

app = Flask(__name__)

@app.route(""/"")
def hello():
  return ""Hello World!""

if __name__ == '__main__':
    app.run()"
Edit the following Python program to handle user input as an integer,"num = int(input(""Enter an integer: ""))
print(""The number is:"", num)"
Write a function to count number of unique lists within a list.,"def unique_sublists(list1):
    result ={}
    for l in  list1: 
        result.setdefault(tuple(l), list()).append(1) 
    for a, b in result.items(): 
        result[a] = sum(b)
    return result"
Develop a Python code to generate the nth number in the Fibonacci series.,"""""""
Develop a Python code to generate the nth number in the Fibonacci series.
""""""

def generate_fibonacci(n):
    if n == 1 or n == 2:
        return 1
    else:
        a = 1
        b = 1
        for i in range(2, n):
            a, b = b, a + b
        return b
    
if __name__ == '__main__':
    n = 8
    print(generate_fibonacci(n))"
Optimize the following Python code for calculating the sum of an array.,"arr = [1, 2, 3, 4, 5, 6]
total = sum(arr) # use sum() to sum up all elements of the array in one line"
"Create a Python program that takes a list and an integer, and returns whether the list contains a sublist with the given sum.","def has_sublist_with_sum(list, n):
    for i in range(len(list) - 1):
        sum = 0
        for j in range(i + 1, len(list)):
            sum += list[j]
            if sum == n:
                return True
    
    return False

list = [2, 3, 4]
n = 8

print(has_sublist_with_sum(list, n)) # prints True"
Write a Python program that prints the nth prime number.,"def nth_prime_number(n):
    prime_numbers = [2]
    number = 3

    while len(prime_numbers) < n:
        is_prime = True
        for prime in prime_numbers:
            if number % prime == 0:
                is_prime = False
                break
        if is_prime:
            prime_numbers.append(number)
        number += 2
    return prime_numbers[-1]

print(nth_prime_number(5))"
Write a Python program to classify a given text as having positive or negative sentiment.,positive
Create a Python program to detect if the number is prime or not,"def is_prime(number): 
    if number <= 1: 
        return False 

    for i in range(2, number): 
        if number % i == 0: 
            return False 

    return True"
Create a Python script to detect when a song has ended.,"import time
 
# Define a song length
song_length = 300

# Start the progress bar
progress_bar = 0
for x in range(0, song_length):
    # Update the progress bar
    progress_bar += 1
    # Sleep a second
    time.sleep(1)
    print(""Progress Bar: {}%"".format(progress_bar/song_length * 100))

# Song has ended
print(""Song Ended!"")"
Write a Python script that counts the number of characters in a string.,"def count_characters(my_string):
    count = 0
    for char in my_string:
        count += 1
    return count"
Write a function in Python to calculate the greatest common divisor of two numbers n1 and n2.,"def gcd(n1, n2):
if n2 == 0:
 return n1
 
return gcd(n2, n1 % n2)"
Create a Python program to print out the multiples of 3 between 1 and 100.,"for num in range(1, 101):
    if (num % 3 == 0):
        print(num)

Output: 3 6 9 12 15 18 21 24 27 30 33 36 39 42 45 48 51 54 57 60 63 66 69 72 75 78 81 84 87 90 93 96 99"
Generate Python code to fetch an item from a dictionary based on a given key.,"dictionary = {
""name"": ""John"",
""age"": 40
}
key = ""name""

for key, value in dictionary.items():
  if key == key:
    print(value)
    break"
"Create a function in Python that evaluates a given expression and returns the result. The function must be able to handle basic operations (e.g. +, -, /, *) and arbitrary number of input values.","def arithmetic_eval(expression):
 return eval(expression)
 
# Example
arithmetic_eval('2 + 3 * 5')
# Output: 17"
Write a Python code to decode a JSON string.,"import json

json_string = '{""name"": ""John"", ""age"": 30, ""is_married"": false}'

data = json.loads(json_string)
name = data['name']
age = data['age']
is_married = data['is_married']

print('Name: ', name)
print('Age: ', age)
print('Is Married: ', is_married)"
"Given a list of strings, write a Python program to classify each string in two categories, ""short"" and ""long"", based on their length.","def classify_strings(strings):
    result = {""short"": [], ""long"": []}
    for string in strings:
        if len(string) < 10:
            result[""short""].append(string)
        else:
            result[""long""].append(string)
    return result"
Clone a remote Git repository using a Python program.,"import git

# Clone a remote Git repository
repo = git.Repo.clone_from(""https://github.com/username/repo.git"")"
Generate a python program to read a integer of length 5 digits and split them into single digits.,"def split_digits(num):
    '''This function takes an integer of length 5 and return a list of single digits'''
    result = []
    while num > 0:
        result.append(num%10)
        num = num//10
    return result[::-1]

num = int(input('Please enter a number of length 5 digits: '))

if len(str(num)) == 5:
    print(split_digits(num))
else:
    print('Invalid input!')"
Construct a Python program to recursively count down from a given number?,"def countdown(num):
    if num == 0:
        return
    else:
        print(num)
        num -= 1
        countdown(num)

countdown(5)"
Create a function to classify a given text into list of pre-defined categories.,"text = 'I'm writing a Python program now'
categories = ['Python', 'Java', 'HTML', 'C++']

def classify(text, categories):
  for category in categories:
    if category in text:
      return category
  return ""Not found""

print(classify(text, categories))"
Generate a Python program that collects contact information from a given list of numbers.,"def collect_contact_information(numbers):
    
    results = []
    
    for number in numbers:
        contact_info = {}
        contact_info[""number""] = number
        
        # collect rest of contact info from number
        # e.g. enter into database and look up address, etc.
        
        results.append(contact_info)
        
    return results"
Create an algorithm in Python to find the largest element in an unsorted list of numbers.,"def find_large_element(lst):
  largest_number = lst[0]
  for i in range(1, len(lst)):
    if lst[i] > largest_number:
      largest_number = lst[i]
  return largest_number

my_list = [10, 5, 20, 8, 9, 12]
print(find_large_element(my_list)) # 20"
Create a program that implements the following pseudocode and express it in Python,"for x in range(1, 10):
    if x < 4:
        print(""Low"")
    else:
        print(""High"")"
Generate a program in Python which will take a sentence and output its synonyms.,"import nltk

def get_synonyms(sentence):
    output = []
    words = nltk.word_tokenize(sentence)
    for word in words:
        synonyms = []
        for syn in wordnet.synsets(word):
            for l in syn.lemmas():
                synonyms.append(l.name())
        output.append(list(set(synonyms)))
  return output"
"Write a code to detect if a given text contains the word ""python"".","def contains_python(text):
    return ""python"" in text"
"Create a Python function that takes an array of numbers and returns true if the array is sorted in increasing order, and false otherwise","def is_sorted(array):
    for i in range(len(array)-1):
        if array[i] > array[i+1]:
            return False
    return True"
Create a Python class named “Employee” with the static method that calculates the number of employees in the company.,"class Employee:
    count = 0

    def __init__(self):
        Employee.count += 1

    @staticmethod
    def get_employee_count():
        return Employee.count"
Create a lists of objects using Python based on a provided list of identifiers.,"objects = [
    {'name': 'a', 'value': None},
    {'name': 'b', 'value': None},
    {'name': 'c', 'value': None}
]"
Create a Python script to count and delete the duplicates from a given array of numbers.,"def count_delete_duplicates(arr):
seen = set() 
unique = []
count = 0

for x in arr:
 if x not in seen:
  seen.add(x)
  unique.append(x)
 else:
  count += 1
return count, unique"
Generate a Python program to reverse the order of words in a sentence but keep the order of the characters in each word the same.,"def reverse_words(string):
  words = string.split("" "")
  reversed_words = []
  for word in words:
    reversed_words.insert(0, word)
  return ' '.join(reversed_words)

string = 'This is a sentence.'
reverse_words = reverse_words(string)
print(reverse_words)"
Create a Python class to represent a point in the x-y plane and a method to calculate the distance from the origin.,"import math 
 
class Point:
 def __init__(self, x, y):
 self.x = x 
 self.y = y 
 
 def distance_from_origin(self):
 return math.sqrt(self.x**2 + self.y**2)
 
 pt1 = Point(3, 4)
 print(pt1.distance_from_origin()) # prints 5.0"
Write a function to find number of lists present in the given tuple.,"def find_lists(Input): 
	if isinstance(Input, list): 
		return 1
	else: 
		return len(Input) "
Write a Python program to return the greatest common divisor between two numbers.,"def gcd(num1, num2):
while num2 != 0:
   temp = num1
   num1 = num2
   num2 = temp % num2
return num1

print(gcd(num1,num2))"
Write a function to generate a sequence of numbers from 1 to 10 in Python.,"def sequence():
    for i in range(1,11):
        print(i)"
"Write a Python program that takes a dictionary as an input, and prints the keys and values in alphabetical order.","def print_dict_alphabetically(d):
 sorted_dict = {k: d[k] for k in sorted(d)}
 for key, value in sorted_dict.items():
  print(key, value)

print_dict_alphabetically({'a': 1, 'b': 2, 'c': 3})"
Design an algorithm to check if a given number is prime in Python.,"def is_prime(n):
    """"""Check if a given number is prime.""""""
    # Corner case
    if n <= 1:
        return False

    # Check for divisibility
    for i in range(2, n):
        if n % i == 0:
            return False
    # Return true if it is not divisible by any number
    return True

# Output
print(is_prime(n))"
Debug this Python function to find and correct any errors.,"def sumN(num): 
  response = 0
  for i in range(1, num + 1):
    response += i
  return response"
"Create a class in Python with a single attribute named ""name"".","class MyClass:

    def __init__(self):
        self.name = None"
Develop a web scraper in Python that visits a website and retrieves the contents of the web page.,"import requests

url = ""https://www.example.com""

response = requests.get(url)
if response.status_code == 200:
 html = response.content
 print(html)"
Create a Python function to print out a matrix of numbers.,"def print_matrix(matrix):
    """"""
    Function to print out a matrix of numbers.
    """"""
    for row in matrix:
        for num in row:
            print(str(num).ljust(4), end="""")
        print()"
Create a function in Python to check if a given string contains two of the same characters next to each other.,"def check_for_two_same_chars(string):
    for i in range(len(string)-1):
        if string[i] == string[i+1]:
            return True
    return False"
Write a python function to access multiple elements of specified index from a given list.,"def access_elements(nums, list_index):
    result = [nums[i] for i in list_index]
    return result"
Design a class in Python to calculate the area of a circle.,"class Circle :
    def __init__(self, r):
        self.radius = r
    
    def area(self):
        return self.radius**2*3.14

#Example
circle = Circle(2)
circle.area()
# Output: 12.56"
Write a Python program to print out the most common words in a given text.,"import collections

def most_common_words(text):
    words = text.split()
    counts = collections.Counter(words)
    return counts.most_common(10)"
Develop an algorithm to identify the occurrence of all the languages in a given text.,"def get_languages(text):
   
    languages = []
    words = text.split()
 
    for word in words:
        if word == ""python"" or word == ""JavaScript"" or word == ""Go"":
            languages.append(word)
 
    return languages"
Can you write a code to securely hash a given string in Python?,"import hashlib
 
def secure_hash(string):
 return hashlib.sha256(string.encode()).hexdigest()"
Write a Python function to find the largest number in a given list.,"def find_largest_number(numbers):
    largest = numbers[0]
    for number in numbers:
        if number > largest:
            largest = number

    return largest"
Write a function to merge three dictionaries into a single expression.,"import collections as ct
def merge_dictionaries_three(dict1,dict2, dict3):
    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))
    return merged_dict"
Write a function in Python that takes a list of strings and returns all unique strings from the list.,"def find_unique_strings(strings):
 
    unique_strings = []
    for s in strings:
        if s not in unique_strings:
            unique_strings.append(s)
 
    return unique_strings"
Generate Python code to perform a binary search on a given array.,"def binary_search(arr, item):
    start = 0
    end = len(arr)-1
    
    while start <= end:
        mid = (start + end) // 2
        guess = arr[mid]
        if guess == item:
            return mid
        else:
            if guess > item:
                end = end - 1
            else:
                start = start + 1
    return None"
Generate a Python program to generate a list comprehension of a given set or range.,result = [i[::-1] for i in words]
Can you generate a python program to reverse a given string?,"def reverse_string(string):
    reversed_string = """"
    for char in string:
        reversed_string = char + reversed_string
    return reversed_string

string = ""Hello""
reversed_string = reverse_string(string)
print(reversed_string)  # olleH"
Write an example of a recursive function in Python.,"def factorial(n):
if (n == 0):
  return 1
else:
  return n * factorial(n-1)

print(factorial(5))  # Should print 120"
Generate a Python program to filter a list of numbers and return the numbers that are divisible by 7.,"def filter_by_seven(nums):
    filtered_nums = [num for num in nums if num % 7 == 0]
    return filtered_nums

result = filter_by_seven([14, 21, 28, 35, 42])
print(result)"
Create unit tests for a Python function that adds two numbers.,"import unittest

def add_two_numbers(a, b):
 return a + b

class TestAddTwoNumbers(unittest.TestCase):
 def test_add_two_numbers_positive(self):
  result = add_two_numbers(1, 2)
  self.assertEqual(result, 3)

 def test_add_two_numbers_negative(self):
  result = add_two_numbers(-1, -2)
  self.assertEqual(result, -3)

if __name__ == '__main__':
 unittest.main()"
Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.,"def Check_Solution(a,b,c):  
    if b == 0:  
        return (""Yes"")  
    else: 
        return (""No"")  "
Write a Python program that replaces all the occurrences of the letter ‘a’ with ‘$’ in a given string.,"def replace_letter(text):
    result = ''
    for letter in text:
        if letter == 'a':
            result += '$'
        else:
            result += letter
    return result

text = 'show me the money'

print(replace_letter(text))"
Write a Python program to sum all the items in a list.,"def sum_list_items(list):
    sum = 0
    for item in list:
        sum += item
    return sum

print(sum_list_items(list))"
Write a Python program to extract the first 100 characters from a given string.,"def extract_first_100_chars(string):
    return string[:100]"
Create a Python program to find the maximum profit of a stock given its maximum and minimum price.,"def getMaxProfit(maxPrice, minPrice): 
    # Calculate the maximum profit 
    return maxPrice - minPrice 
  
# Driver code 
maxPrice = 12
minPrice = 9
  
print(getMaxProfit(maxPrice, minPrice))"
Generate a code in Python for validating a given password,"import re

def validate_password(passwd):  
    Rule = re.compile(r""^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*#?&])[A-Za-z\d@$!#%*?&]{8,}$"")  
    return Rule.search(passwd)"
Modify this Python code to insert the number 5 into a list at the 5th position.,"data = [1, 2, 3, 4] 

# insert element '5' at 5th position 
data.insert(4, 5) 
print(""Modified list:"") 
print(data)"
Use an if-else statement in Python to determine if a number is even or odd.,"if n % 2 == 0:
    print(n, 'is an even number')
else:
    print(n, 'is an odd number')"
"Write a Python program to differentiate the following equation:
y = 5*x^2 + 3*x + 1","def differentiate(x):
  return 10*x + 3;

# Test
x = 2 
print(""The derivative of y = 5*x^2 + 3*x + 1 at x = 2 is:"", differentiate(x)) # Output: 17"
Write a Python script for finding the maximum and minimum value in a given list.,"list = [1,5,6,8,7]
min_val = min(list)
max_val = max(list)

print(""Minimum value in list is: %d""%min_val)
print(""Maximum value in list is: %d""%max_val)"
Write a Python program to print out the triangle pattern given an height n as input.,"def print_triangle(n): 

    for i in range(n): 
        for j in range(i+1): 
            print(""*"",end="""") 
        print() 
  
n = 4
print_triangle(n)

# Output
# *
# **
# ***
# ****"
Develop a function to classify a given set of text samples into two categories in Python.,"def classify(samples):
 vectorizer = TfidfVectorizer(stop_words='english')
 documents = vectorizer.fit_transform(samples)
 
 classifier = SVC(C=1.0, kernel='linear', gamma='auto')
 classifier.fit(documents)
 
 classes = classifier.predict(documents)
 
 return classes"
Design a function to tell if a number is even or odd using Python.,"def isEven(x):
    if x % 2 == 0:
        return True
    else:
        return False

x = 5

if isEven(x):
    print(""It is even"")
else:
    print(""It is odd"")"
Generate a Python function to optimize a given function using a Gradient Descent algorithm.,"def optimize_function(f, learning_rate, iterations):
 weights = np.random.rand(f.shape[0])
 for _ in range(iterations):
 grads = estimate_gradient(f, weights)
 weights -= learning_rate * grads
 return weights"
Create a Python script that takes two inputs from the user: a list of numbers and an integer. The script should loop over the input list and check if any two numbers in the list add up to the input integer.,"list = [3, 5, 10, 15]
integer = 17

total = 0

for i in list:
 for j in list:
 total = i + j
 if total == integer:
 print(""Two numbers that add up to"", integer, ""are"", i, ""and"", j)
 break"
Create a function to reverse a string in Python.,"def reverse_string(string):
    result = """"
    for i in range(len(string) - 1, -1, -1):
        result += string[i]
    return result

reverse_string(""hello"")"
Write a Python function which takes an array as input and prints out all the even numbers in the array.,"def print_even(nums):
  for num in nums:
    if num % 2 == 0:
      print(num)
      
print_even([1, 4, 5, 8, 9, 11])"
Can you construct a Python program that takes a string of words and counts the occurrences of each word?,"words = ""This is an example of a string of words"".split()

word_freq = {}
for word in words:
    if word not in word_freq:
        word_freq[word] = 1
    else:
        word_freq[word] += 1

for key, value in word_freq.items():
    print(f""{key} : {value}"")"
Create a for loop with range up to 5 in python and print the values.,"for num in range(5):
   print(num)"
Create a Python program to sort and print out the elements of an array of integers.,"arr = [17, 41, 5, 22, 54, 6, 29, 3, 13]

arr.sort()

print(arr)

# Output: [3, 5, 6, 13, 17, 22, 29, 41, 54]"
Create a mapping between the two objects in Python.,"objectMap = {
""a"": ""apple"",
""b"": ""banana"",
""c"": ""carrot"",
""d"": ""date"",
""e"": ""eggplant""
}"
Write a Python function that takes two lists as input and returns a new list containing the intersection of the two lists.,"def intersection_of_lists(list1, list2):
    return [value for value in list1 if value in list2]

result = intersection_of_lists([1, 2, 3, 4], [3, 4, 5, 6])
print(result)
# [3, 4]"
Write a Python program to identify the longest line in a string.,"test_str = 'Sentence 1\nSentence 2\nSentence 3 (longest sentence)\nSentence 4'

# Get all lines in test_str into a list
str_lines = test_str.split('\n')

# Find the longest line in the list
longest_line = max(str_lines, key=len)

# Print the longest line
print(f'The longest line is: {longest_line}')"
Write a function to check whether the given amount has no profit and no loss,"def noprofit_noloss(actual_cost,sale_amount): 
  if(sale_amount == actual_cost):
    return True
  else:
    return False"
How would you format a JSON string using Python?,"import json

# Get json string
json_string = ""{\""name\"":\""John Doe\"",\""age\"":30}""

# Parse the json string
parsed_string = json.loads(json_string)

# Pretty print the parsed string
pretty_string = json.dumps(parsed_string, indent=4, sort_keys=True)

# Show output
print(pretty_string)
# Output:
{
    ""name"": ""John Doe"",
    ""age"": 30
}"
Design a code generator in Python to generate content based on the provided input.,"def generate_retweets(post_id):
    retweets = []
    for _ in range(10):
        # Retrieve post from API using post_id
        post = get_post(post_id)

        # Generate a random retweet of the post
        retweet = f'RT @{post['author']}: {post['message']}'
        retweets.append(retweet)
    
    return retweets"
Generate a function in Python that takes in a dictionary (string → integer) and returns the sum of all values in the dictionary.,"def compute_dict_sum(input_dict):
    result = 0
    for val in input_dict.values():
        result += val
    return result

print(compute_dict_sum(my_dict))"
Design a function  in Python to count the total number of prime numbers between the two given numbers (inclusive).,"def count_primes(start, end):
    count = 0
    for i in range(start, end+1):
        if is_prime(i):
            count += 1
    return count

def is_prime(num):
    for i in range(2, int(num**0.5) + 1):
        if num % i == 0:
            return False
    return True"
Create a Python program that takes a list of strings as parameters and returns a new list with the strings sorted in alphabetical order.,"def sort_alphanumeric(items):
    return sorted(items, key=lambda item: item.lower())

def main():
    items = [“Windows”, “MacOS”, “Unix”, “CentOS”, “RedHat”]
    sorted_items = sort_alphanumeric(items)
    print(sorted_items)

if __name__ == “__main__”:
    main()"
Implement a program in Python to find the average of an array of length n.,"def findAverage(arr):
    # Initialize sum
    sum = 0
 
    # Iterate over the array to calculate sum
    for n in arr:
        sum += n
 
    # Calculate the average and return  
    return sum/len(arr)


# Driver code
arr = [2, 4, 6, 8, 10]
print(findAverage(arr))"
Create a Python program that takes in a sentence as an input and prints out the same sentence in Pig Latin.,"def pig_latin(sentence):
 words = sentence.split()
 translated_words = []
 for word in words:
 translated_words.append(word[1:] + word[0] + ""ay"")
 return "" "".join(translated_words)
 
sentence = input(""Enter a sentence to translate: "")
print(pig_latin(sentence))"
Write a function to find the median of three specific numbers.,"def median_numbers(a,b,c):
 if a > b:
    if a < c:
        median = a
    elif b > c:
        median = b
    else:
        median = c
 else:
    if a > c:
        median = a
    elif b < c:
        median = b
    else:
        median = c
 return median"
Construct a Python program to split a string at a given character occurrence index.,"def split_string(string, index):
  return string[:index] + "","" + string[index+1:]

s = ""Hello World""
index = 6

new_string = split_string(s, index)
print(new_string)

Output:
Hello,World"
Create an algorithm in Python to search an element from a given array of integers.,"def searchElement(arr, element):
    for i in range(len(arr)):
        if arr[i] == element:
            return i
    return -1"
Develop a python script that extracts the titles of all articles from a given website.,"import requests
from bs4 import BeautifulSoup

# specify url
url = 'www.example.com'

# fetch the page
response = requests.get(url)
html = response.content

# parse page content
soup = BeautifulSoup(html)

# extract titles
titles = []
for title in soup.find_all('title'):
 titles.append(title.text)

# print titles
print(titles)"
Create a Python program to tokenize a sentence and calculate the frequency of each word in the sentence.,"import nltk

sentence = ""The quick brown fox jumps over the lazy dog""

words = nltk.word_tokenize(sentence)

word_freq = {}

for word in words:
 if word in word_freq:
  word_freq[word] += 1
 else:
  word_freq[word] = 1

print(word_freq)"
Design a python script to convert a list of strings to a dictionary,"my_list = [""Apple"", ""Banana"", ""Cherry""]

def list_to_dict(lst):
    dictionary = dict(zip(lst, range(len(lst))))
    return dictionary
    
dictionary = list_to_dict(my_list)
print(dictionary)"
Create a Python function that takes an array of strings and finds the longest string.,"def find_longest_string(arr):
    longest_string = """"
    for s in arr:
        if len(s) > len(longest_string):
            longest_string = s
    return longest_string

string_array = [""Hello"", ""world"", ""Hi"", ""there""]
print(find_longest_string(string_array))"
Create a vector of 10 random numbers using Python NumPy.,"import numpy as np

np.random.seed(123)
vector = np.random.rand(10)
print(vector)

# Output:
# [0.69646919 0.28613933 0.22685145 0.55131477 0.71946897 0.42310646
#  0.9807642  0.68482974 0.4809319  0.39211752]"
Design a game controller class that stores and updates game state in Python,"class GameController:
    def __init__(self):
        self.state = {'lives': 3, 'score': 0, 'level': 1}
    
    def update_game_state(self, lives, score, level):
        self.state['lives'] = lives
        self.state['score'] = score
        self.state['level'] = level

    def get_game_state(self):
        return self.state"
Create a Python program that converts degrees Celsius to Fahrenheit.,"def celsius_to_fahrenheit(celsius):
 return celsius * 9/5 + 32

celsius = 35
fahrenheit = celsius_to_fahrenheit(celsius)
print(""{} °C is {} °F"".format(celsius, fahrenheit))"
Create a class in Python with two methods.,"class SomeClass:
    def __init__(self):
        pass
    
    def method1(self):
        pass

    def method2(self):
        pass"
Generate a Python program to count the number of pairs with given sum x,"def count_pairs(numbers, x):
    count = 0
    i, j = 0, len(numbers) - 1
    while i < j: 
        sum = numbers[i] + numbers[j]
        if sum == x: 
            count += 1
            i += 1
        elif sum < x: 
            i += 1 
        else: 
            j -= 1
    return count"
Write a Python program to check if two given strings are an anagram of each other.,"def is_anagram(str1, str2): 
 if sorted(str1) == sorted(str2): 
  return True
 else:
 return False

str1 = ""listen""
str2 = ""silent""
print(is_anagram(str1, str2))"
Write a python function to count the pairs with xor as an odd number.,"def find_Odd_Pair(A,N) : 
    oddPair = 0
    for i in range(0,N) :  
        for j in range(i+1,N) :  
            if ((A[i] ^ A[j]) % 2 != 0):  
                oddPair+=1  
    return oddPair  "
Generate a program to generate a random string of length 5 using the Python library 'random',"import random

def random_string(length):
    chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
    random_string = ''
    for i in range(length):
        random_string += random.choice(chars)
    return random_string
    
print(random_string(5))"
Write a python script to remove all occurrences of a particular string from a given text.,"text = ""I like cats, cats and cats""
string = ""cats""

# Replace all occurrences of the string with an empty string
modified_text = text.replace(string, """")
print(modified_text)
# Output: ""I like , and """
Create a python program to filter a list of numbers to include only the prime numbers,"def isPrime(n): 
    for i in range(2,n): 
        if n % i == 0: 
            return False
    return True

numbers = [2, 3, 7, 11, 12, 15] 
primes = filter(isPrime, numbers)
print('Prime numbers are:') 
print(list(primes))"
Suggest a completion for the following Python code to check if a given number is an Armstrong number.,"def is_armstrong_number(num):
  order = len(str(num))
  sum = 0
  temp = num
  while temp > 0:
    digit = temp % 10
    sum += digit ** order
    temp //= 10
  if num == sum:
    return True  
  else:
    return False"
"Write a Python function that given a list of strings and an integer n, returns the strings that have a length greater than n.","def filter_strings(strings, n):
    return [s for s in strings if len(s) > n]"
Generate a script that parses a JSON string and prints out the corresponding Python dictionary.,"import json

json_string = '{""name"": ""John"", ""age"": 30, ""city"": ""New York""}'
parsed_json = json.loads(json_string)

print(parsed_json)"
Create a program in Python that takes a number of words as input and prints out a poem.,"words = ['love', 'wings', 'stars', 'moon', 'ocean']
 
poem = """"
 
for word in words:
    poem += f""The {word} so strong and bright\nTurns shadows into light\n""

poem += f""The universe so vast and wide\nSurrounds us all with its pride\n""

print(poem)"
"Can you provide a Python code snippet to generate a random integer between 1 and 10, inclusive?","import random

random_int = random.randint(1, 10)
print(random_int)"
"Write a Python program to generate a random set of numbers, with each number ranging from 1 to 10","import random

def generate_random_numbers():
  results = []
  for i in range(10):
    results.append(random.randint(1, 10))

  return results
  
if __name__ == ""__main__"":
  print(generate_random_numbers())"
Write a Python script that sorts an array of strings in alphabetical order case insensitively.,"def sort_array(arr): 
    arr.sort(key = lambda x: x.lower()) 
    return arr

# driver code 
arr = [""Apple"", ""Banana"", ""orange""] 
print(sort_array(arr)) 
# Output: ['Apple', 'Banana', 'orange']"
Create an algorithm in Python 3 to find the largest number in a list.,"def find_largest(list): 
    n = len(list) 
    max = list[0] 
    for i in range(1,n): 
        if list[i] > max: 
            max = list[i] 
    return max 

list = [1, 7, 3, 4, 9, 2]
largest_number = find_largest(list) 
print(""Largest number in the given list is:"", largest_number)"
Convert the given code from one programming language to another.,"#Python code
def printHello():
    print(""Hello World!"")"
Write a Python program that takes a number from the user and prints whether the number is prime or not.,"def is_prime(n):
    if n <= 1:
        return False
    i = 2
    while i*i <= n:
        if n % i == 0:
            return False
        i += 1
    return True
    
if __name__ == ""__main__"":
    num = int(input(""Enter a number: ""))
    if is_prime(num):
        print(""The number is a prime number."")
    else:
        print(""The number is not a prime number."")"
"Create a SQL query to find the names of all web pages that have the term ""Python"" in their title.","SELECT name 
FROM pages 
WHERE title LIKE '%Python%';"
Create an object-oriented programming model using python to represent a student in a classroom.,"class Student:
    def __init__(self, name, age):
        self.name = name
        self.age = age
        
    def get_info(self):
        return ""Name: {}, Age: {}"".format(self.name, self.age)"
Design a class in Python that could represent a book.,"class Book:
    def __init__(self, title, author, year):
        self.title = title
        self.author = author
        self.year = year

    # other methods, such as get_title(), set_title(), get_author(), set_author(), etc. could go here"
Write a function to sort the given array by using shell sort.,"def shell_sort(my_list):
    gap = len(my_list) // 2
    while gap > 0:
        for i in range(gap, len(my_list)):
            current_item = my_list[i]
            j = i
            while j >= gap and my_list[j - gap] > current_item:
                my_list[j] = my_list[j - gap]
                j -= gap
            my_list[j] = current_item
        gap //= 2

    return my_list"
Create a Python program to remove punctuation from a block of text.,"import string

def remove_punctuation(text):
    return text.translate(str.maketrans("""","""", string.punctuation))

text = ""Wel,come to the wo,rld of 'programming'.""
print(remove_punctuation(text))
Output:
Welcome to the world of programming"
"Generate a Python program that prints out the pattern ""\    /\    /\  "".","for x in range(3):
    print('\\    /' * x + '\\  ')"
Generate a program in Python for summing up the elements of an array.,"def sumArrayElements(arr):
    total = 0
    for num in arr:
        total += num
    return total

arr = [1, 4, 6]
result = sumArrayElements(arr)
print(result)"
Create a program in Python to compute and print the factorial of a given number.,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)

num = 5

print(""The factorial of"", num, ""is"", factorial(num))"
Create a program in Python to calculate the total marks of 5 students taking 5 different exams. The marks should be in the range 0-100.,"def total_marks(marks):
    total = 0
    for student in marks:
        total += sum(student)
    return total

marks = [[75, 75, 76, 78, 80], [90, 88, 87, 85, 83], [68, 70, 79, 82, 76], [80, 79, 66, 77, 85], [90, 85, 83, 75, 73]]
total = total_marks(marks)
print(total)"
Generate a function in Python to calculate the future value of an investment.,"def calculate_future_value(principal, interest_rate, num_years):
    return principal * (1 + interest_rate)**num_years"
Create a Python program to search a list for the maximum value.,"def findMax(list): 
    max = list[0] 
    for i in range(1, len(list)): 
        if list[i] > max: 
            max = list[i] 
    return max

list = [1, 2, 3, 9, 8, 4] 
print(""The maximum element in the list is:"", findMax(list))"
Write a Python function to create a new list filled with the divided result of a given list and a specific number.,"def divide_list(numbers, divisor):
 return [i/divisor for i in numbers]"
"Rewrite the following code snippet from JavaScript to Python, taking into account any changes in syntax or function calls.

let array = [1, 2, 3, 4, 5];
console.log(array);","array = [1, 2, 3, 4, 5]
print(array)"
Write an algorithm in Python to sort a given list of strings in alphabetical order.,"def sort_string_list(strings):
  strings.sort()
  return strings

my_list = ['cat', 'dog', 'apple', 'zebra']
print(sort_string_list(my_list))"
Edit the following code to apply the insert sorting algorithm in Python.,"def insertion_sort(list):
    for i in range(1, len(list)):
        key = list[i]
        j = i - 1
        while j >= 0 and list[j] > key:
            list[j + 1] = list[j]
            j = j - 1
        list[j + 1] = key"
"Write a Python code to generate all possible strings of 3 characters using the characters a, b and c.","def generate_strings(characters, length):
    strings = []
    if length == 0:
        strings.append('')
    else:
        for c in characters:
            for s in generate_strings(characters, length-1):
                strings.append(c + s) 
    return strings

characters = ['a', 'b', 'c']
length = 3

print(generate_strings(characters, length))"
Write a conditional statement in Python that checks if two lists have the same items.,"list1 = [9,8,7]
list2 = [7,8,9]

if list1 == list2:
    print(""The lists have the same items."")
else:
    print(""The lists do not have the same items."")"
Implement a sorting algorithm in Python that sorts a list of strings in descending order of length.,"def sort_by_length(arr): 
    for i in range(len(arr)):
        for j in range(i + 1, len(arr)):
            if len(arr[i]) < len(arr[j]): 
                arr[i], arr[j] = arr[j], arr[i] 
    return arr
  
print(sort_by_length(arr))"
Write a Python program to extract all the words from a given sentence that have more than 3 characters,"sentence = 'This is an example sentence'
words = [word for word in sentence.split() if len(word) > 3]
print (words)
# Output: ['This', 'example', 'sentence']"
Write a Python program to compute the average of the numbers in the list.,"def compute_average(numbers):
sum = 0
for num in numbers:
 sum += num
return sum/len(numbers)

numbers = [1, 3, 5, 7, 9]
average = compute_average(numbers)
print(""Average is "" + str(average))"
Create a program in Python to calculate the average word length in a given title.,"def calculate_average_word_length(title):
  words = title.split()
  total_length = 0
  for word in words:
    total_length += len(word)
  return total_length / len(words)

result = calculate_average_word_length(""The Cat in the Hat"")
print(result)"
Write a python function to find the sum of all odd length subarrays.,"def Odd_Length_Sum(arr):
    Sum = 0
    l = len(arr)
    for i in range(l):
        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])
    return Sum"
Generate a code snippet to add two numbers in Python.,"result = x + y
print(result) # Prints 6"
Create a program that makes an HTTP request using Python and parses the response.,"import requests

# make HTTP request
r = requests.get(""https://www.example.com/userdata?query=example"")
if r.status_code == 200:
    # parse response
    data = r.json()
    # do something with the data
    # ..."
Create an application in Python that can encode a string into Base64.,"import base64

def encode_base64(string):
 encoded_string = base64.b64encode(string.encode('utf-8'))
 return encoded_string

string = ""The quick brown fox""
encoded_string = encode_base64(string)
print(encoded_string)
# Output: VGhlIHF1aWNrIGJyb3duIGZveA=="
Design a function in Python to find an element in a given list.,"def findElement(arr, element):
    for i in range(0, len(arr)):
        if arr[i] == element:
            return True
    return False"
"Develop a Python class with private attributes, a public method to get the private attributes, and a public method to change the private attributes.","class MyClass:
    def __init__(self):
        self.__private_attr = 0
 
    def get_private_attr(self):
        return self.__private_attr
 
    def set_private_attr(self, value):
        self.__private_attr = value"
Define a Python class to model an appointment.,"class Appointment:
    def __init__(self, title, time, location):
        self.title = title
        self.time = time
        self.location = location

    def get_title(self):
        return self.title
    
    def get_time(self):
        return self.time
    
    def get_location(self):
        return self.location"
Create a Python program which prints the calendar for a given year.,"import calendar

c = calendar.TextCalendar(calendar.SUNDAY)
str = c.formatyear(2019, 2, 1, 1, 3)
print (str)"
Write a Python script to swap two variables.,"x = 10
y = 20

#Swap the values
x, y = y, x

print(""After swapping: x ="", x, ""and y ="", y)"
Develop a python code to print a dictionary’s key-value pairs in sorted order of keys.,"my_dict = {'a': 5, 'c': 10, 'b': 4}

for key in sorted(my_dict):
    print(key, my_dict[key])

# Output:
# a 5
# b 4
# c 10"
Create an algorithm in Python that takes a string and returns a new string with all the consonants replaced with underscores.,"def replace_consonants(string): 
    new_str = """" 
  
    VOWELS = (""a"", ""e"", ""i"", ""o"", ""u"") 
  
    for letter in string: 
        if letter.lower() in VOWELS: 
            new_str += letter 
        else: 
            new_str += ""_""
  
    return new_str
  
print(replace_consonants(""Hello World""))"
Suggest an edit to the following Python program to improve its time complexity.,my_list.sort(reverse=True)
Optimize a function in Python.,"def sum_of_list(lst): 
    return sum(lst)"
Build a program in Python that calculates the area of a triangle.,"def calculate_triangle_area(base, height):
    return 0.5 * base * height

base = 10
height = 15

area = calculate_triangle_area(base, height)
print('Area of the triangle: ', area)"
Create a program in Python which prints out all possible combinations of a given string.,"def generate_combinations(s):
    result = []
    for i in range(len(s)):
        for j in range(i+1, len(s)+1):
            result.append(s[i:j])
    return result"
Create a Python function that takes a single argument and prints the Fibonacci sequence from 0 to the argument value.,"def print_fibonacci_sequence(num):
 a = 0
 b = 1
 
 print(a, end="" "")
 print(b, end="" "") 
 
 for i in range(2,num):
  c = a + b
  a = b
  b = c
  print(c, end="" "")

print_fibonacci_sequence(9) # prints 0 1 1 2 3 5 8 13 21"
Modify the following Python code to use a loop instead of recursion.,"def GCD(x, y):
    while(y != 0):
        temp = y
        y = x % y
        x = temp
    return x"
Construct a regex pattern in Python to match any odd number.,"import re

pattern = re.compile('[13579]') # matches any odd number"
Suggest a line of code to parse a JSON string.,pythonObject = json.loads(jsonString)
Write a Python program that takes a string input representing an arithmetic expression and calculates the result.,"def evaluate(expression):
    try:
        return eval(expression)
    except SyntaxError:
        print('Invalid expression.')

print(evaluate(""(20 * 8) + (2 * 4)""))

Output: 164.0"
Create an object in Python that stores an employee's name and age.,"employee = {
 'name': 'John',
 'age': 28
}"
Create an algorithm in Python that implements Breadth-first search.,"def breadth_first_search(graph, root):
    visited = []
    queue = []
    queue.append(root)

    while queue:
        node = queue.pop(0)
        if node not in visited:
            visited.append(node)
            queue.extend(graph[node])
    return visited"
Write a function to count the same pair in three given lists.,"def count_samepair(list1,list2,list3):
    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))
    return result"
Write a code to extract data from a web page using python requests.,"""""""
Extract data from a web page using python requests
""""""

import requests

# Define the url
url = 'https://example.com'

# Get the data from the url
response = requests.get(url)

# Extract the data
data = response.text # or response.json() for JSON data

# Print the data
print(data)"
Extend a Python class to create another class with similar behavior.,"class Motorcycle(Vehicle):
    def __init__(self):
        super().__init__()
        self.num_wheels = 2
        self.type = 'motorcycle'

    def accelerate(self):
        self.speed += 10

    def brake(self):
        self.speed = max(self.speed - 7, 0)"
Develop a program in Python to generate random data with the same statistical properties as the input.,"import numpy as np
from scipy.stats import describe

def generate_random_data(data):
    # Calculate the descriptor statistics
    desc = describe(data)
    
    # Generate random data from the same distribution
    random_data = np.random.normal(loc=desc.mean, scale=np.sqrt(desc.variance), size=desc.nobs)
    
    return random_data"
Create a Python function to normalize a list of strings by converting each string to lowercase and stripping any leading and trailing whitespaces.,"def normalize(words):
    """"""Normalizes a list of strings by converting each to lowercase and stripping any leading or trailing whitespaces.""""""
    return [word.lower().strip() for word in words]"
Create a Python class that contains methods to calculate the area of a square and a rectangle.,"class AreaCalculator:
    def __init__(self):
        pass
    
    def square_area(self, side_length):
        return side_length * side_length

    def rectangle_area(self, length, width):
        return length * width"
Write a python function to find the next perfect square greater than a given number.,"import math  
def next_Perfect_Square(N): 
    nextN = math.floor(math.sqrt(N)) + 1
    return nextN * nextN "
Write a Python function to sort an array of numbers in descending order.,"def sort_descending(nums):
  return sorted(nums, reverse=True)

print(sort_descending([5, 1, 8, 10, 0, 4]))"
Develop a Python algorithm to generate a Fibonacci sequence.,"def generateFibonacciSequence(length):
    sequence = [1, 1]
    for i in range(2, length):
        sequence.append( sequence[i-1] + sequence[i-2] )
    return sequence

print(generateFibonacciSequence(10))"
Generate a list of letters in lowercase using Python.,"import string 

print(list(string.ascii_lowercase))"
Write a python function to set all even bits of a given number.,"def even_bit_set_number(n): 
    count = 0;res = 0;temp = n 
    while(temp > 0): 
        if (count % 2 == 1): 
            res |= (1 << count)
        count+=1
        temp >>= 1
    return (n | res) "
Generate the Fibonacci sequence of length 8 (starting from 0) in Python.,"def fibonacciSequence(n): 
    a = 0
    b = 1
    if n < 0: 
        print(""Incorrect input"") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2,n+1): 
            c = a + b 
            a = b 
            b = c 
        return b 

fibonacciSequence(8) # Output:21"
Write a Python program to compute the sum of the first 10 odd numbers.,"total = 0
for number in range(1, 21, 2):
    total += number    
print(f""Sum of the first 10 odd numbers is {total}"")"
Create a Python function that takes a list and an integer as inputs and returns a new list with every item in the original list multiplied by the integer.,"def multiply_list(lst, i):
  return [j * i for j in lst]

result = multiply_list(list, integer)
print(result) # [15, 10, 5]"
Edit the following Python code to reverse the list.,"list1 = [1,2,3,4,5,6]

# Reversing the list
list1 = list1[::-1] # Output: [6, 5, 4, 3, 2, 1]"
Create a Python program that takes an input of numbers and returns the maximum number.,"def find_max(nums):
    max_num = nums[0]
    for num in nums[1:]:
        if num > max_num:
            max_num = num 
    return max_num

max_num = find_max(nums)
print(max_num) # 9"
Create python code to implement a decision tree classifier.,"import numpy as np
from sklearn import datasets

class DecisionTreeClassifier():

 def __init__(self):
 self.tree = None

 def fit(self, X, y):
 self.tree = self._build_tree(X, y)

 def predict(self, X):
 return [self._predict(x, self.tree) for x in X]

 def _build_tree(self, X, y):
# build decision tree
def _predict(self, x, node):
# predict class
return node.label"
Create a function in Python that takes two strings and checks if they are anagrams of each other.,"def is_anagram(str1, str2): 
    if len(str1)!= len(str2): 
        return False
    first_list = list(str1.lower())
    second_list = list(str2.lower())
    first_list.sort()
    second_list.sort()
    return first_list == second_list

print(is_anagram(""apple"",""pleap""))"
"Generate a new dataset which has both numeric and string columns, in Python.","import pandas as pd
data = {
    'Name':['Kim','John','Jack','Mark','Jane'],
    'Age':[26,25,23,25,24],
    'Score':[90,80,70,78, 89]
}
df = pd.DataFrame(data)"
What is the most efficient way to reverse a linked list in Python?,"def reverse(head):
    prev = None
    current = head
    while current:
        next = current.next
        current.next = prev
        prev = current
        current = next
    return prev"
Write a loop in Python to traverse a given list of numbers in reverse order,"for i in range(len(numbers)-1, -1, -1):
    print(numbers[i])"
Implement a queue data structure in python,"class Queue(object):

    def __init__(self):
        self.queue = []
 
    def enqueue(self, item):
        self.queue.insert(0, item)
 
    def dequeue(self):
        if len(self.queue)>0:
            return self.queue.pop()
        else:
            return None
 
    def size(self):
        return len(self.queue)"
Write a Python program to calculate the roots of a quadratic equation.,"import math

def quadratic_roots(a, b, c):
    d = (b ** 2) - (4 * a * c) 
    if d < 0:
        return None  # No real roots
    elif d == 0:
        return -b / (2 * a)  # One root 
    else:
        x1 = (-b + math.sqrt(d)) / (2 * a) 
        x2 = (-b - math.sqrt(d)) / (2 * a) 
        return (x1, x2)  # Two roots

print(quadratic_roots(-2, 5, -3))"
Write a function to find minimum of three numbers.,"def min_of_three(a,b,c): 
      if (a <= b) and (a <= c): 
        smallest = a 
      elif (b <= a) and (b <= c): 
        smallest = b 
      else: 
        smallest = c 
      return smallest "
Configure a web-server in Python using Flask.,"from flask import Flask

app = Flask(__name__)

@app.route(""/"")
def hello():
    return ""Hello World!""

app.run()"
Construct a Python program that will search for a given word in a web page and return the number of occurrences.,"import requests

url = ""www.example.com""
word = ""Python""

html_content = requests.get(url).text

words = html_content.split()

occurrences = 0

for w in words:
    if w == word:
        occurrences += 1

print(""Found %d occurrences of '%s'"" % (occurrences, word))"
Create a function in Python that computes the sum of two distinct numbers.,"def sumTwo(num1, num2):
    return num1 + num2

result = sumTwo(5, 6);
print(result);"
"Generate a Python class for a Book with properties such as title, author, year, and genre.","class Book:
 def __init__(self, title, author, year, genre):
 self.title = title
 self.author = author
 self.year = year
 self.genre = genre

 def getTitle(self):
 return self.title

 def getAuthor(self):
 return self.author

 def getYear(self):
 return self.year

 def getGenre(self):
 return self.genre"
Test a given object to see if it’s a member of a given class using Python.,"#objects to test for membership
object1 = [1, 2, 3]
object2 = 4

#test if an object is a member of a given class
def is_member_of_class(obj, the_class):
    return isinstance(obj, the_class)

#test the objects
print(is_member_of_class(object1, list))
print(is_member_of_class(object2, int))"
Write a Python program to find the common elements between two lists,"def common_elements(list1, list2):
    # Make a copy of list 
    list_copy = list2[:] 

    # Iterate the original list  
    for item in list1: 
        if item in list_copy: 
            list_copy.remove(item) 

    # Return the common elements  
    return list(set(list1) & set(list2))"
Provide a python program that computes the maximum value from a given set of values,"# Create a list for our values
values = [13, 33, 45, 3, 5, 17, 19, 21]

# Initialize maximum value
max_val = 0

# Iterate over the list
for val in values:
    # Compare with current maximum value
    if val > max_val:
        # Update maximum value
        max_val = val

# Print the maximum value
print(""Maximum value:"", max_val)"
Write a function to trim each tuple by k in the given tuple list.,"def trim_tuple(test_list, K):
  res = []
  for ele in test_list:
    N = len(ele)
    res.append(tuple(list(ele)[K: N - K]))
  return (str(res)) "
Create a list comprehension in python to extract all numbers from a string.,num_list = [int(s) for s in string.split() if s.isdigit()]
Create a search algorithm in Python that will search an array of strings for a given target string.,"def search(target, array):
  for item in array:
    if target == item:
      return True
   
  return False"
Implement a Pythong program to concatenate two strings.,"string1 = ""Welcome""
string2 = ""to the world""
 
def concat(string1 , string2): 
	return string1 + string2
  
print(concat(string1, string2))"
Generate a code to calculate the mean absolute difference of items in a list in Python.,"def mean_absolute_difference(my_list):
    diff = 0
    for i in range(len(my_list) - 1):
        diff += abs(my_list[i] - my_list[i + 1])
    return diff / (len(my_list) - 1)

if __name__ == ""__main__"":
    print(mean_absolute_difference(my_list))"
Write a python function to find even numbers from a mixed list.,"def Split(list): 
    ev_li = [] 
    for i in list: 
        if (i % 2 == 0): 
            ev_li.append(i)  
    return ev_li"
"Write a Python program that combines two lists, eliminating duplicate entries.","list_1 = [1, 2, 3]
list_2 = [2, 3, 4]

final_list = []

for item in list_1:
 if item not in final_list:
 final_list.append(item)

for item in list_2:
 if item not in final_list:
 final_list.append(item)

print(final_list)"
Generate an algorithm in Python to count the number of inversions in an array.,"def count_inversions(arr):
  inv_count = 0
  for i in range(len(arr)):
    for j in range(i + 1, len(arr)):
      if arr[i] > arr[j]:
        inv_count += 1
  return inv_count

arr = [3, 5, 2, 1, 4] 
print(count_inversions(arr))"
Write a function to find if the given number is a keith number or not.,"def is_num_keith(x): 
	terms = [] 
	temp = x 
	n = 0 
	while (temp > 0): 
		terms.append(temp % 10) 
		temp = int(temp / 10) 
		n+=1 
	terms.reverse() 
	next_term = 0 
	i = n 
	while (next_term < x): 
		next_term = 0 
		for j in range(1,n+1): 
			next_term += terms[i - j] 
		terms.append(next_term) 
		i+=1 
	return (next_term == x) "
Develop an artificial intelligence chatbot in Python. The chatbot should be able to respond to basic queries.,"import random

def respond(message):
    # Check for a question mark
    if message.endswith(""?""):
        return random.choice([""I don't know :("", ""You tell me!""])

    # Return a random greeting
    return random.choice([""Hi there!"", ""Hello!"", ""Nice to meet you!""])"
Create a Python program to check if a given string can be formed from a given set of words.,"def word_set(string, words):
    words_set = set(words)
    string_set = set(string)
    
    if string_set.issubset(words_set):
        return True 
    else:
        return False

word_set(""justdoit"", [""just"", ""do"", ""it""])"
"Using the specified input, write a Python program that prints the numbers from 1 to 10 in order.","for i in range(1,11):
    print(i)"
Generate a Python program to generate random passwords of length n.,"import string
import random
 
def random_password(length):
 chars = string.ascii_uppercase + string.ascii_lowercase + string.digits
 random_password = ''.join(random.choice(chars) for i in range(length))
 return random_password
  
length = 8
print(random_password(length))"
Generate a REST API in Python that checks if a given email is valid or not.,"import re

from flask import Flask, jsonify

app = Flask(__name__)

@app.route(""/emailcheck/<string:email>"", methods=['GET'])
def validate_email(email):

 if re.match(r""^[A-Za-z0-9\.\+_-]+@[A-Za-z0-9\._-]+\.[a-zA-Z]*$"", email):
  return jsonify({'email': email, 'valid': True})
 else:
  return jsonify({'email': email, 'valid': False})

if __name__ == '__main__':
 app.run(debug=True)"
Generate a Python program which multiplies all the numbers between two given numbers.,"def multiply_between(start, end):
    result = 1
    for i in range(start, end + 1):
        result *= i
    return result

print(multiply_between(2, 10))"
Generate a program in Python to evaluate the following expression: (x*x) − (𝑦*𝑦),"x = 10
y = 5

result = (x*x) - (y*y)
print(result)"
Write a query to select the first four characters of a given string.,"SELECT SUBSTRING(string, 1, 4) 
FROM table 
WHERE string = 'python_program'"
Develop a Python program that takes two lists of numbers and returns all the common elements contained in both lists?,"def find_common_elements(list1, list2):
    common_elements = []
    for element in list1:
        if element in list2:
            common_elements.append(element)
    
    return common_elements

list1 = [1, 2, 3, 4]
list2 = [2, 3, 4, 5]

result = find_common_elements(list1, list2)
print(result) # [2, 3, 4]"
Create a data structure in Python to store employee names and their corresponding salaries.,"employee_data = {
    ""Michael"": 45000,
    ""Andrew"": 55000,
    ""Mark"": 70000
}"
Create a graphing program using the tkinter library in Python.,"import tkinter as tk

# create the main GUI window
window = tk.Tk()
window.title(""Python Graphing Program"")
window.geometry(""500x500"")

# create a Canvas object
c = tk.Canvas(window, width=480, height=480)
c.pack()

# create the X and Y axes
c.create_line(10, 240, 470, 240)
c.create_line(240, 10, 240, 470)

# create the graph
..."
Generate a procedure in the form of a Python script to automate the process of downloading a list of websites.,"import requests

for website in website_list:
    response = requests.get(website)
    with open(website.split('.')[0]+'.html', 'wb') as file:
        file.write(response.content)"
Write a Python script to print the maximum number from a list.,"def find_max(list):
    max_num = list[0]
    for i in list:
        if i > max_num: 
            max_num = i
    return max_num"
Generate a python program to normalize a list of values in the range 0 and 1,"def normalize_list(input_list):
    min_val = min(input_list)
    max_val = max(input_list)
    output_list = []
    for value in input_list:
        normalized_value = (value - min_val) / (max_val - min_val)
        output_list.append(normalized_value)
    return output_list"
Create a python script to print the following output with the help of list and dictionary.,"name = {
    ""Harry""
}
age = {
    23
}
country = {
    ""India""
}

data_list = [name, age, country]

for item in data_list:
    print(item)"
Generate a web scraper using Python to extract all internal links from a website.,"import requests
from bs4 import BeautifulSoup

def scrape_links(url):
 r = requests.get(url)
 soup = BeautifulSoup(r.content, 'html.parser') 
 links = [a.attrs.get('href') for a in soup.find_all('a')] 
 
 return [link for link in links if link is not None]

if __name__ == '__main__':
 url = 'https://example.com' 
 links = scrape_links(url)
 
 print(links)"
Create a Python program to crop a list to a specific length,"def crop_list(input_list, length):
    output_list = []
    for i in range(length):
        output_list.append(input_list[i])
    return output_list

my_list = [1, 2, 3, 4, 5, 6]
length = 4
result = crop_list(my_list, length)
print(result)"
Translate the following pseudo code into a Python program.,"def swap(list, i, j):
  temp = list[i]
  list[i] = list[j]
  list[j] = temp

def permutations(list, n):
  for i in range(0, n-1):
    j = i + 1
    while j < n:
      swap(list,i,j)
      j = j + 1

list = [10, 11, 12]
n = len(list)
permutations(list, n)"
Create a program in Python that has the following purpose: To determine if a given string is a palindrome,"def check_palindrome(inputStr): 
     
    revStr = reversed(inputStr)
  
    if list(inputStr) == list(revStr): 
        return True
    else: 
        return False
      
userInput = ""radar""

if(check_palindrome(userInput)): 
    print(""Yes"") 
else: 
    print(""No"")"
Create a program in Python to edit a given text by removing unwanted characters.,"def remove_unwanted_chars(text):
    return ''.join(c for c in text if c.isalnum() or c in [' ', ','])

text = ""Hello, World!""
print(""Text after removing unwanted characters:"", remove_unwanted_chars(text))"
Create a function in Python that takes a list of strings and count all occurrences of a particular word in the list.,"def countOccurrences(words, target):
    count = 0
    for word in words:
        if word == target:
            count += 1
    
    return count

print(countOccurrences([""how"", ""how"", ""are"", ""you"", ""how"", ""are"", ""you""], ""how""))"
Generate python code to clean up a string.,"def clean_string(string):
    excluded_characters = ""*&#$@!""
    cleaned_string = ''
    for character in string:
        if character not in excluded_characters:
            cleaned_string += character
    return cleaned_string"
Create an application in Python which will take an array of numbers and returns the median.,"def get_median(arr):
 arr.sort()
 n = len(arr)
 if n % 2 == 0:
 return (arr[n//2] + arr[n//2 - 1])/2
 else:
 return arr[n//2]

if name == ""main"":
 arr = [3, 4, 9, 6, 5]
 print(get_median(arr)) # Output -> 5.5"
Compose a Python program for finding the median value of an unsorted array.,"def median(arr):
    # Sort the array
    arr.sort()

    # Calculate length
    n = len(arr)

    # Check if n is even
    if n % 2 == 0:
        median1 = arr[n // 2]
        median2 = arr[n // 2 - 1]
        median = (median1 + median2) / 2
    else:
        median = arr[n // 2]

    return median

arr = [4, 5, 6, 7, 8, 1, 2]
result = median(arr)
print(result) # 4.5"
Find the maximum of three numbers using a Python function.,"def maximumOfThreeNumbers(a, b, c):
   if (a >= b) and (a >= c):
     return a
   elif (b >= a) and (b >= c):
     return b
   else:
     return c

maximum = maximumOfThreeNumbers(10, 5, 20)
print(""The maximum number is:"", maximum)"
Create a program header to go at the beginning of every python program you complete.,"""""""
Authors: <Your Name>
Filename: <file name>.py
Description: <A brief description of the program>
"""""""
Generate a Python script to convert cents to dollars.,"def convert_cents_to_dollars(cents): 
    return cents / 100"
"Create a class in Python to represent a Person with attributes: name, age, height, and weight.","class Person:
 def __init__(self, name, age, height, weight):
 self.name = name
 self.age = age
 self.height = height
 self.weight = weight

 def describe(self):
 return f'{self.name} is {self.age} years old, {self.height} cm tall and weighs {self.weight} kg.'"
Create a python module that finds the minimum and maximum values of a given list.,"def min_max(list):
    min_val = max_val = list[0]
    for value in list[1:]:
        if value < min_val:
            min_val = value
        elif value > max_val:
            max_val = value
    return (min_val, max_val)"
Output a string of length 10 containing characters from 'A-Za-z' in random order using Python.,"import string
from random import choice

''.join(choice(string.ascii_letters) for _ in range(10))"
Create an algorithm in Python that takes a list and returns the sum of the list items.,"def listSum(lst):
    s = 0
    for i in range (len(lst)):
        s += lst[i]
    return s

print (listSum([1,2,3])) # 6"
Design a class in Python that can be used to store the data of a book in a library.,"class Book:
    def __init__(self, title, author, pages):
        self.title = title
        self.author = author
        self.pages = pages
        self.available = True
    
    def checkout(self):
        self.available = False
    
    def return_book(self):
        self.available = True"
Create a Python function to convert a list of strings into a dictionary of the form {string: count}.,"def list_to_dict(myList):
 dict = {}
 for val in myList:
  if val in dict:
   dict[val] += 1
  else:
   dict[val] = 1
 return dict

myList = ['a', 'a', 'b', 'c']
print(list_to_dict(myList))

# Output: 
# {'a': 2, 'b': 1, 'c': 1}"
Generate a Random Forest algorithm in Python to predict the class of a given data set.,"from sklearn.ensemble import RandomForestClassifier

# Initialize the Random Forest model
model = RandomForestClassifier(n_estimators=100)

# Train the model using the training data
model.fit(train_x, train_y)

# Use the model to predict the class
predictions = model.predict(test_x)"
"Generate a Python class for a basic To-Do list app.
The class should have four methods –  print, add, edit and delete.","class ToDoList:
 def __init__(self):
  self.tasks = []
 
 def print(self):
  for i in range(len(self.tasks)):
   print(f'{i+1}. {self.tasks[i]}')
 
 def add(self, task):
  self.tasks.append(task)
 
 def edit(self, index, new_task):
  self.tasks[index] = new_task
 
 def delete(self, index):
  del self.tasks[index]"
Create an algorithm in Python that takes a list of numbers and returns a new list with only the even numbers.,"def get_even_numbers(nums_list):
  even_numbers = []
  for num in nums_list:
    if num % 2 == 0:
      even_numbers.append(num)
  return even_numbers

nums_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
even_numbers = get_even_numbers(nums_list)
print(even_number)"
Design a recursive function to generate Fibonacci numbers using Python.,"def Fibonacci_Generator(n): 
    if n<0: 
        print(""Incorrect input"") 
  
    # First and Second Fibonacci numbers are 0 and 1 respectively 
    elif n==1: 
        return 0
    elif n==2: 
        return 1
    else: 
        return Fibonacci_Generator(n-1)+Fibonacci_Generator(n-2)"
Can you write a python program to detect whether the given sentence contains a palindrome or not?,"sentence = ""Anna went to vote in the election.""

def is_palindrome(sentence):
    clean_sentence = sentence.replace(' ', '').lower()
    reversed_sentence = clean_sentence[::-1]
    return clean_sentence == reversed_sentence

print is_palindrome(sentence)"
Design a program in Python that takes in a string and finds the characters that appear only once.,"def findUniqueChars(str):
    result = """"
    for char in str:
        if str.count(char) == 1:
            result += char

    return result 

result = findUniqueChars(""This is a test"")
print(result)"
Generate a function in Python to print the sum of two integers.,"def print_sum(a, b):
    """"""
    Print the sum of the two numbers
    """"""
    print(a+b)"
Generate a Python algorithm to generate permuations.,"def permute(nums):
  res = []
  generatePermutations(nums, 0, [], res)
  return res

def generatePermutations(nums, index, current, result):
  if index == len(nums):
    result.append(current[:])
  else:
    for i in range(index, len(nums)):
      current.append(nums[i])
      generatePermutations(nums, index+1, current, result)
      current.pop()"
Generate a function to add two matrices of the same size in Python.,"def add_matrix(A, B):
    """"""Add two matrices of the same size.""""""
    n = len(A)
    m = len(A[0])
    result = [[0 for _ in range(m)] for _ in range(n)] 
    for i in range(n):
        for j in range(m):
            result[i][j] = A[i][j] + B[i][j]
            
    return result

# Output
print(add_matrix(A,B))"
Generate a Python code snippet to convert a given Fahrenheit temperature to Celsius.,"def fahrenheit_to_celsius(fahrenheit):
    celsius = (fahrenheit - 32) * (5 / 9)
    return celsius"
Create a Python function that takes in one integer argument and returns an integer with the absolute value.,"def getAbsoluteValue(number):
    if (number < 0):
        return number * -1
    else:
        return number

print(getAbsoluteValue(-3)) # Outputs 3"
Write a Python program to delete all characters in a string that matches a given pattern.,"import re
def delete_pattern_characters(string, pattern):
 return re.sub(pattern, """", string)"
Create a script in Python to print the squares of all numbers in the given list.,"for n in [1, 2, 3, 4, 5]:
 print(n**2)"
Implement quick sort in Python.,"def quicksort(arr):
    if len(arr) <= 1:
        return arr
    else:
        pivot = arr[len(arr) // 2]
        left = [x for x in arr if x < pivot]
        middle = [x for x in arr if x == pivot]
        right = [x for x in arr if x > pivot]
        return quicksort(left) + middle + quicksort(right)"
Write a function in Python that takes three positive integers as arguments and returns the largest one.,"def get_largest(a, b, c):
    largest = a 
    if b>largest:
        largest = b
    if c>largest:
        largest = c
    return largest

print(get_largest(10, 20, 15))"
Create a Python function that takes a list and returns a list of the unique elements of that list.,"def uniqueList(myList):
    uniqueList = []
    for el in myList:
        if el not in uniqueList:
            uniqueList.append(el)
    return uniqueList"
Develop a Python program to generate the Fibonacci sequence of a given number of terms.,"def Fibonacci(terms): 
  Fibonacci_num = [0, 1] 
  a = 0
  b = 1
  for i in range(2,terms): 
    c = a + b
    Fibonacci_num.append(c)
    a = b
    b = c
  return Fibonacci_num 
  
nterms = 10
print(""Fibonacci sequence:"")
print(Fibonacci(nterms))"
Build a function in Python to compute the Fibonacci numbers up to a given maximum.,"def fibonacciGenerator(maximum):
    i1, i2 = 0, 1
    while i1 < maximum:
        yield i1
        i1, i2 = i2, i1 + i2

fibonacci = list(fibonacciGenerator(15))
print(fibonacci)"
Create a function to normalize a given string using Python.,"def normalize_string(s):
    return s.lower().strip()"
Transform the following Python function into a list comprehension.,"numbers = [1, 2, 3, 4, 5]
result = [num * 2 for num in numbers]"
Write a Python code that accepts an input string and returns a list of its capitalized words.,"string = ""python is powerful""
list_words = string.split()
output = [i.capitalize() for i in list_words]"
Write a function to find the area of a rectangle.,"def rectangle_area(l,b):
  area=l*b
  return area"
Develop a Python Webscraper for collecting data from a given URL.,"import requests
from bs4 import BeautifulSoup

URL = 'http://example.com/data'

# Send a request to the URL
page = requests.get(URL)

# Parse the page
soup = BeautifulSoup(page.content, 'html.parser')

# Get the data
data = soup.find_all('div', class_='data')

# Print the data
for item in data:
 print(item.text)"
Create a Python function that takes in an array-like data structure and returns the difference of its maximum and minimum values.,"def get_difference(arr):
    return max(arr) - min(arr)

input_arr = [100, 45, 56, 30, 90, 100]
difference = get_difference(input_arr)
print(difference)  # Output: 70"
Write a Python program to calculate the sum of two numbers (input in separate lines) and print it.,"num1 = int(input())
num2 = int(input())
sum_of_nums
print(sum_of_nums)"
Optimize a Python function to compute the maximum value in a list of integers.,"def get_max(list): 
  
  # Initialize the maximum
  max_v = list[0]

  # Compute the maximum
  for i in range(1, len(list)):
    if list[i] > max_v:
      max_v = list[i]

  # Return the maximum
  return max_v"
Generate a structured array from a given dictionary in Python.,"import numpy as np
data = np.array(list(dictionary.values()),
      dtype=[('name','U20'),('age','i4'),('nationality','U10')]
)"
Generate a two-dimensional array of ones using Python.,"import numpy as np 

arr = np.ones((r,c))"
Create a class in Python that will return the sum of two numbers.,"class Summator:
    def __init__(self, num1, num2):
        self.num1 = num1
        self.num2 = num2

    def get_sum(self):
        return self.num1 + self.num2"
Modify the given Python code to be more efficient.,"def my_function(N):
    list1 = [[i+j for j in range(N)] for i in range(N)]
    return list1"
"Convert the following Algorithm into Python code.

Input: two numbers

Algorithm:
1. Check if the two numbers are equal.
2. If true, return 0.
3. Else check the which is higher.
4. Return 1 if the first number is higher than the second one.
5. Return -1 otherwise.","def compare_numbers(num1, num2):
 if num1 == num2:
  return 0
 elif num1 > num2:
  return 1
 else:
  return -1

num1 = 5
num2 = 10
result = compare_numbers(num1, num2)

print(result)"
Use python to create a function to calculate the mean of three numbers.,"def mean_of_three(num1, num2, num3):
    return (num1 + num2 + num3) / 3

if __name__ == '__main__':
    print(mean_of_three(2, 4, 6))"
Create a Python program to find the sum of all the even elements in a given list.,"def sum_even_elements(list):
  sum = 0 
  for item in list:
    if item % 2 == 0:
      sum += item
  return sum"
Construct a python code that can convert any given integer into its binary representation.,"def to_binary(n):
    binary_rep = """"
    while n > 0:
        binary_rep = str(n%2) + binary_rep
        n = int(n/2)
    return binary_rep"
Write a Python function that takes a list of words and removes all words that are not equal to the given word.,"def remove_words(word, words):
    return [w for w in words if w == word]"
"Create a Google App Engine application in Python that greets users with a ""Hello World"" message.","# app.py 
import webapp2

class MainPage(webapp2.RequestHandler):
    def get(self):
        self.response.headers['Content-Type'] = 'text/plain'
        self.response.write('Hello, World!')

#app.yaml
runtime: python27
api_version: 1
threadsafe: true

handlers:
- url: /.*
  script: app.app"
Generate a Python script for sorting a list in ascending order.,"def sortList(list): 
    list.sort() 
    return list
    
unsorted_list = [3, 4, 8, 5, 10]
sorted_list = sortList(unsorted_list)

print(""Sorted list:"", sorted_list)"
Write a function to count the most common words in a dictionary.,"from collections import Counter
def count_common(words):
  word_counts = Counter(words)
  top_four = word_counts.most_common(4)
  return (top_four)
"
Write a Python program to print a calendar of the given month and year,"import calendar

c = calendar.TextCalendar(calendar.SUNDAY)
str = c.formatmonth(year, month)
print(str)"
Write a Python function to add two given numbers without using the '+' operator.,"def add(num1, num2): 
    while num2 != 0: 
        carry = num1 & num2 
        num1 = num1 ^ num2 
        num2 = carry << 1
    return num1"
Create a program in Python to print the numbers from 1 to 50 which are divisible by 3 and are even.,"for num in range(2, 51):
    if num % 3 == 0 and num % 2 == 0:
        print(num)"
Design an API in Python to compare two strings and provide an output/ match score.,"import difflib

def compare_strings(string1, string2):
    # Convert strings to lowercase
    string1 = string1.lower()
    string2 = string2.lower()

    # Compute match score
    score = difflib.SequenceMatcher(None, string1, string2).ratio()

    # Return the match score
    return score"
Create a Python script that automates the process of filling out a web form.,"import requests

url = 'https://example.com'

# Set the form data  
data = {
  'field1': 'value1',
  'field2': 'value2',
  'field3': 'value3',
  'field4': 'value4'
}

# Send a POST request to the URL with the form data  
r = requests.post(url, data=data)

# Check the response code 
if r.status_code == 200: 
  print('Form submitted successfully.') 
else:
  print('Error submitting form.')"
"Write a python program to clean the text by removing extra spaces, punctuations and other special characters.","def remove_special_characters(text):
    cleaned_text = ''
    for char in text:
        if char.isalnum():
            cleaned_text = cleaned_text + char
    return cleaned_text

print(remove_special_characters('Hello  World!!!')) # Output = HelloWorld"
Create a Python code snippet to convert a given JSON string into a Python dictionary.,"import json

json_string = '{""name"": ""John"", ""age"": 30, ""city"": ""New York""}'
python_dict = json.loads(json_string)

print(python_dict)"
Create a for loop in python to search for a word in a given list.,"def find_word(my_list, word):
    for i in my_list:
        if i == word:
            return True
    return False"
Write a function to get the word with most number of occurrences in the given strings list.,"from collections import defaultdict 

def most_occurrences(test_list):
  temp = defaultdict(int)
  for sub in test_list:
    for wrd in sub.split():
      temp[wrd] += 1
  res = max(temp, key=temp.get)
  return (str(res)) "
Create a python program to filter a list of items by a condition,"def filter_list(list_input):
    filtered_list = [i for i in list_input if i >= 3]
    return filtered_list

list_input = [1,2,3,4,5]
filtered_list = filter_list(list_input)
print(filtered_list) # [3, 4, 5]"
Design a function in Python to calculate the average of two numbers.,"def mean(a, b):
    return (a + b)/2"
Create a class in Python named `Movie` that contains two parameters `title` and `rating`.,"class Movie:
    def __init__(self, title, rating):
        self.title = title
        self.rating = rating"
Write a Python program to find the smallest number using the given array of numbers.,"def smallest_number(arr):
    min_number = arr[0]
    for num in arr[1:]:
        if num < min_number:
            min_number = num
    return min_number"
Generate an algorithm in Python to calculate the GCD of two given integers,"def computeGCD(a, b): 
	if(b == 0): 
		return a 
	else: 
		return computeGCD(b, a%b)"
Create a Python program that counts the number of occurrences of a character in a string,"def count_char(string, char):
    count = 0
    for c in string:
        if c == char:
            count += 1
    return count"
Write a Python program to take in a string and reverse the given string using a while loop.,"def reverse_string(str):
    str_rev = ''
    i = len(str) - 1

    while i >= 0:
        str_rev += str[i]
        i -= 1

    return str_rev"
Implment a Python class to store data in a dictionary.,"class DataStorage:
    def __init__(self):
        self._data = {}

    def store_data(self, key, value):
        self._data[key] = value

    def get_data(self, key):
        return self._data.get(key)"
Generate a list of Python library names available in the Python standard library.,"Built-in Python libraries:
1. ast
2. dis
3. math
4. fractions
5. datetime
6. hashlib
7. itertools
8. json
9. urllib
10. os
11. pickle
12. random
13. re
14. subprocess
15. sys
16. time
17. zlib"
Design a process in Python for extracting information from a given database.,"import sqlite3

# Connecting to the Database file
conn = sqlite3.connect('<database name>')

# Creating a cursor to work with database
cursor = conn.cursor()

# Executing a query
result = cursor.execute(""SELECT <column name> FROM <table name> WHERE <condition>"")

# Storing the results in a list while iterating over it
data = [row for row in result]

# Closing the connection
conn.close()"
Develop a Python program that takes in a date as an input and prints out the following day in a human-readable format.,"from datetime import date, timedelta

def next_day(old_date):
 d = date.fromisoformat(old_date)       
 new_date = d + timedelta(1) 
 return new_date.isoformat() 

next_day(""2020-06-20"")"
Create a Python code to do text classification based on a provided dataset.,"import pandas as pd
import numpy as np

def TextClassifier(x_train, y_train, x_test, y_test):
    from sklearn.naive_bayes import MultinomialNB
    model = MultinomialNB()
    model.fit(x_train, y_train)
    y_pred = model.predict(x_test)
    accuracy = np.mean(y_test == y_pred)
    return accuracy"
Optimize a piece of Python code that enumerates all substrings of a string.,"def enumerate_substrings(string):
    substrings = set()
    for i in range(len(string)):
        for j in range(i, len(string)):
            substrings.add(string[i:j+1])
    return substrings

string = ""Supercalifragilisticexpialidocious""
substrings = enumerate_substrings(string)
print(substrings)"
Create an automatic speech recognition system in Python.,"# Import modules
import speech_recognition as sr

# Record audio
r = sr.Recognizer()
with sr.Microphone() as source:
 print('Say something!')
 audio = r.listen(source)

# Transform the audio file into text
text = r.recognize_google(audio)

print('You said: ', text)"
Optimize the following Python code for calculating the square of a number.,"def calculateSquare(x):
    return x ** 2"
Make a program in Python to calculate the square of a number when the number is given as an input.,"num = int(input('Enter a number: '))
square = num**2
print(f'Square of {num} is {square}')"
Generate a python program to extract all the words from a given string and store them in a list.,"def extract_words_from_string(s): 
    return s.split(' ')"
Convert an existing function from Python 3 to Python 2.,"def check_anagram(string1, string2):
    if(sorted(list(string1)) == sorted(list(string2))):
        return True
    else:
        return False"
Create a Python function that takes in two strings and returns True if they are anagrams (they contain the same letters).,"def isAnagram(string1, string2):
 s1 = sorted(string1.lower())
 s2 = sorted(string2.lower())

 if s1 == s2:
 return True
 else:
 return False

string1 = ""pizza"";
string2 = ""appaiz"";

isAnagram(string1, string2); // True"
Write a Python program to check an array if it contains consecutive integers.,"def check_array_for_consecutive(arr):
    arr.sort()
    for i in range(len(arr)-1):
        if arr[i+1] - arr[i] != 1:
            return False
    return True

arr = [2, 3, 4, 5, 6]
print(check_array_for_consecutive(arr))"
Generate a correctly formatted python program that sorts an array of integers,"def sort_arr(arr):
    for i in range(len(arr)):
        for j in range(i + 1, len(arr)):
            if arr[i] > arr[j]:
                arr[i], arr[j] = arr[j], arr[i]
    return arr"
Create a Python program to print the current timestamp,"from datetime import datetime

now = datetime.now()
print(now.strftime(""%Y-%m-%d %H:%M:%S""))"
Write a Python function make_float that converts a given string argument to a float.,"def make_float(string):
  return float(string)"
Create a Python script for crawling a website.,"import requests
from bs4 import BeautifulSoup

page = requests.get('https://website.com/')
soup = BeautifulSoup(page.content, 'html.parser')

for link in soup.find_all('a', href=True):
    print(link['href'])"
Modify the the following python program so that it can be run in Python 3,"words = input(""Enter words:"")
print(words)"
Create a Python script that checks whether a given word is a palindrome.,"def is_palindrome(word):
  rev_word = word[::-1]
  if rev_word == word:
    return True
  else:
    return False
  
word = ""racecar""
print(is_palindrome(word)) # True"
Convert the following JSON object to Python dictionary.,"import json

def convert_json_to_dict(json_object):
    return json.loads(json_object)"
Insert missing keyword in this Python statement.,for i in range(10):
Generate a random number from 1 to 10 in Python and assign it to the variable 'number'.,"import random

number = random.randint(1, 10)"
Create a function in Python that takes in a list and sorts it in ascending order.,"def sortList(list):
 list.sort()
 return list

print(sortList([3, 5, 1, 2, 9])) # Output: [1, 2, 3, 5, 9]"
Create a function in Python to produce a ``new_list`` which contains substring elements from the given ``list``,"def produce_new_list(list):
    '''This function will return a new list containing substrings from the given list'''
    new_list = []

    for item in list:
        for i in range(0, len(item)):
            new_list.append(item[0:i+1])  

    return new_list"
Write a Python program to display a list of all the prime numbers between a given range.,"def prime_nums_in_range(start, end): 
 prime_list = [] 
 for num in range(start, end + 1): 
 if num > 1: # check for cases greater than 1 
 for i in range(2, num): 
 if (num % i) == 0: 
 break 
 else: 
 prime_list.append(num) 
 return prime_list 

start = 2 
end = 20 
print(prime_nums_in_range(start, end)) 
# Output: [2, 3, 5, 7, 11, 13, 17, 19]"
Create a Python function to generate random numbers between a given range of numbers.,"def random_number_generator(lhs, rhs):
    '''This function generates a random number between given range (lhs, rhs)'''
    import random
    return random.randint(lhs, rhs)"
Optimize the following code and provide an algorithm to solve it in Python.,"def fibonacci(n):
    # Store the Fibonacci numbers in an array 
    a = [0] * (n + 1)
    
    # Base cases 
    a[1] = 1
    for i in range(2, n + 1):
        a[i] = a[i - 1] + a[i - 2]
 
    return a[n]"
Generate the Python code that calculates the numbers of characters in a given string.,"myString = ""Hello, World!""

charCount = 0
for char in myString:
    charCount += 1
    
print(""Number of characters:"", charCount)"
Create a Python script to generate a random password with a length of 8 characters that includes both uppercase and lowercase letters.,"import string
import random

length = 8

alphabet = string.ascii_letters + string.digits
password = ''.join(random.choice(alphabet) for i in range(length))

print(""Generated password:"", password)"
Generate a list of prime numbers from 1 to 1000 using Python.,"primes = []

for x in range(2, 1001):
    for i in range(2, x):
        if x % i == 0:
            break
    else:
        primes.append(x)

print(primes)"
Write a Python program to clean a given dataset for an AI system.,"def clean_dataset(dataset):
 cleaned_dataset = dataset.copy()
 cleaned_dataset['age'] = int(dataset['age'])
 cleaned_dataset['height'] = float(dataset['height'].split(' cm')[0])
 cleaned_dataset['weight'] = float(dataset['weight'].split(' kg')[0])
 return cleaned_dataset"
Write a Python program that prints out the multiplication table of 9.,"# Function to display the multiplication table
def displayTable():
    # Nested loop to iteratre through the table
    for i in range(1, 11):
        for j in range(1, 11):
            print(f'{i} x {j} = {i*j}')

# Call the Function
displayTable()"
Write an algorithm in Python to detect the monotonic increasing pattern in a given array.,"def increasingPattern(arr):
	status = False
	check = arr[0]
	for i in range(1,len(arr)): 
		if check < arr[i]:
			check = arr[i]
			status = True
		else:
			status = False
			break
	return status


# Test case
arr = [2, 3, 4, 5, 6, 7, 8, 1]
print(increasingPattern(arr))  # Output: False"
Write a function to shortlist words that are longer than n from a given list of words.,"def long_words(n, str):
    word_len = []
    txt = str.split("" "")
    for x in txt:
        if len(x) > n:
            word_len.append(x)
    return word_len	"
Generate a Python program that automatically generates bar charts for given data,"import matplotlib.pyplot as plt 
 
# Data to plot
data = [1, 2, 3, 6, 5, 4, 7]
 
# Create the graph object
plt.bar(range(len(data)), data, align='center')
 
# Label the graph
plt.xticks(range(len(data)), range(1, len(data)+1))
plt.xlabel('x')
plt.ylabel('y')
plt.title('Bar Graph')
 
# Display the graph
plt.show()"
Write a Python function to sort a dictionary of string keys by their length.,"def sort_by_length(d):
    sorted_d = {}
    keys_list = list(d.keys())
    keys_list.sort(key=len)
 
    for key in keys_list:
        sorted_d[key] = d[key]
 
    return sorted_d"
"In Python, develop a function which reverses the order of elements in the given list.","def reverse_list(l): 
return list(reversed(l))"
Write a Python program to find the sum of all odd numbers up to a given number.,"def find_sum(n):
sum = 0

for i in range(1, n + 1):
    if i % 2 != 0:
        sum += i
return sum

n = 10
print(""Sum of odd numbers from 1 to"", n, ""is"", find_sum(n))"
Generate a valid Python code for checking if a given string is a palindrome or not?,"def is_palindrome(string):
  return string == string[::-1]"
Create a script in Python to classify a given array of integers into even and odd numbers.,"def classify(arr):
    even = []
    odd = []
    for x in arr:
        if x % 2 == 0:
            even.append(x)
        else:
            odd.append(x)
    return even, odd

even, odd = classify([1, 2, 3, 4, 5])
print(""Even numbers: "", even)
print(""Odd numbers: "", odd)"
Optimize a given Python code snippet such that the running time is reduced.,"for x in range(1, 11):
    y = 10//x
    if x*y == 10:
        print(x, y)"
Write a Python program to identify all sets of factors of a given number.,"def get_factors(number):
    factors = []
    for i in range(1, number + 1):
        if number % i == 0:
            factors.append([i, int(number/i)])
    return factors

print(get_factors(45)) # Output: [[1, 45], [3, 15], [5, 9], [9, 5], [15, 3], [45, 1]]"
Create an Elasticsearch algorithm to search for documents based on specific criteria.,"GET products/_search
{
 ""query"": {
  ""term"": {
   ""body"": ""Python""
  }
 }
}"
Create a Python program to generate a random IP address.,"import random

def generateRandomIP():
    ip = ""."".join(str(random.randint(0,255)) for i in range(4))
    return ip

ip_address = generateRandomIP()
print(""Random IP address:"", ip_address)"
Write some Python code to detect bias in text using the Gender Bias Detection software?,"from gender_bias_detection import detect_bias

text = ""The software requires a text string to query.""

bias_signal = detect_bias(text)

# Checking is the detected bias is positive
if bias_signal > 0:
  print(""The text contains gender bias."")
else:
  print(""The text does not contain gender bias."")"
Create a class in Python with two attributes and one method,"class MyClass:
  def __init__(self, attr1, attr2):
    self.attr1 = attr1
    self.attr2 = attr2

  def do_something(self):
    print(""Doing something!"")"
Write a python function to find the largest postive number from the given list.,"def largest_pos(list1): 
    max = list1[0] 
    for x in list1: 
        if x > max : 
             max = x  
    return max"
Write a Python program to display the multiplication table of a given number.,"def multiplication_table(n):
    print('Multiplication Table of ', n)
    for i in range(1, 11):
        product = i * n
        print('{0} x {1} = {2}'.format(i, n, product))"
Create a function in Python to compute the average of two numbers.,"def average(a, b): 
    return (a + b)/2 
  
a = 8
b = 10
print(""Average of"", a, ""and"", b, ""is"", average(a, b))"
Write a python function to find the maximum length of sublist.,"def Find_Max_Length(lst):  
    maxLength = max(len(x) for x in lst )
    return maxLength "
Create a Python script to calculate the median of an array of integers.,"def median(arr): 
 # Sort the array 
 arr.sort() 
 n = len(arr) 
  
 # If number of elements is odd, 
 # return the middle element 
 if n % 2 != 0: 
  return arr[n//2] 
  
 # If number of elements is even, 
 # return the average of the middle 
 # two elements 
 else:
  return (arr[n//2] + arr[(n//2)-1]) / 2

# Driver code 
arr = [3, 1, 4, 5, 2] 
print(median(arr))"
Write a Python program to classify a given list of numbers into three groups based on their range.,"def classify_list(list):
    result = {""low"": [], ""mid"": [], ""high"": []}
    for num in list:
        if num < 4:
            result[""low""].append(num)
        elif num < 10:
            result[""mid""].append(num)
        else:
            result[""high""].append(num)
    return result"
Write a python script to detect duplicate words in a sentence.,"sentence = 'She was driving, driving down the road.'
list_words = sentence.split("" "")
duplicates = {i for i, x in enumerate(list_words) if list_words.count(x) > 1}
print(""Duplicate words in the sentence are: "", end="""")
for duplicate in duplicates:
    print(list_words[duplicate], end="" "")"
Utilize ajax to send a request to a given web page and write a Python script to parse the response.,"import requests

url = ""www.example.com""

try:
    request = requests.get(url)  # Send ajax request
    response = request.json()  # Get response in JSON
    for data in response['data']:
        # Do something with data  # Parse JSON response
except Exception as e:
    print(e)"
Write a Python program to print out current month name and the previous month name.,"from datetime import datetime, timedelta 

def month_names():
  today = datetime.today()
  last_month = today - timedelta(weeks=4)

  current_month = today.strftime(""%B"")
  prev_month = last_month.strftime(""%B"")

  print(""Current month: "", current_month)
  print(""Previous month: "", prev_month)"
Embed a mathematical expression in Python and print the expression.,"expression = 'x**3 + 2*x**2 + 3'

print(eval(expression))"
Create an algorithm in Python to find the GCD of two numbers.,"# function to calculate GCD 
def gcd(x, y): 
  
    # This function implements the Euclidian 
    # algorithm to find GCD 
    while(y): 
        x, y = y, x % y 
  
    return x 

# Driver program to test above function 
n1 = 28
n2 = 56
print(""GCD of"", n1, ""and"", n2, ""is"", gcd(n1, n2))"
Write a Python program to find the first non-repeated character of a given string.,"def first_non_repeated_char(string):
    for ch in string:
        if string.count(ch) == 1:
            return ch"
Generate a list comprehension in Python that prints the cubes of the first 5 numbers.,"[x**3 for x in range(1, 6)]"
Write a Python program to print the largest number from a given list.,"my_list = [1, 5, 10, 20, 8]

largest = max(my_list)
print(""The largest number from the given list is: "" + str(largest))"
Generate a python program to compute the cartesian product of two lists.,"def cartesian_product(list1, list2):
    result_list = []
    for i in list1:
        for j in list2:
            result_list.append([i,j])
    return result_list

list1 = [1,2,3]
list2 = [4,5]

cartesian_product_list = cartesian_product(list1, list2)

print(cartesian_product_list)  # [[1,4],[1,5],[2,4],[2,5],[3,4],[3,5]]"
Write a Python code to implement a list containing at least three dictionaries.,"list_of_dicts = [ 
    {
        ""name"": ""John"",
        ""age"": 32,
        ""country"": ""USA""
    },
    {
        ""name"": ""Peter"",
        ""age"": 28,
        ""country"": ""Australia""
    },
    {
        ""name"": ""David"",
        ""age"": 30,
        ""country"": ""Canada""
    }
]"
Design a Python program to sort a list of dictionaries by a given field.,"def sort_dicts_by_field(dict_list, field):
    sorted_list = sorted(dict_list, key=lambda k: k[field])
    return sorted_list"
"Write a Python function that takes two lists as arguments, and calculates their dot product.","def dot_product(list1, list2):
  if len(list1) != len(list2):
    raise ValueError('List lengths must be the same.')
  dot_product = 0
  for i, val in enumerate(list1):
    dot_product += val * list2[i]
  return dot_product

list1 = [1,2,3]
list2 = [4,5,6]

dot_product_result = dot_product(list1, list2)
print(dot_product_result) # 32"
"Write a function to add two integers. however, if the sum is between the given range it will return 20.","def sum_nums(x, y,m,n):
    sum_nums= x + y
    if sum_nums in range(m, n):
        return 20
    else:
        return sum_nums"
Construct a python program that takes a positive integer as input and outputs its factorial,"def factorial(inp):
    if inp == 0:
        return 1
    else:
        return inp*factorial(inp-1)"
Create a Python script to merge all the elements in a given list of lists.,"def merge_lists(l):
    result = []
    for sublist in l:
        for item in sublist:
            result.append(item)
    return result

print(merge_lists([[1, 2, 3], [4, 5], [6]]))"
Generate a Python function that takes an integer array as input and returns the number of unique elements in the array.,"def num_unique_elements(arr):
    unique_arr = set(arr)
    return len(unique_arr)

print(num_unique_elements([1, 2, 3, 2, 1, 4, 7, 8, 9, 8]))"
Write a Python function to sum up elements in a given array.,"def sum_array(arr):
 result = 0
 for item in arr:
 result += item
 return result"
Write a Python program to arrange two dictionaries in order of their keys.,"def sort_dicts_by_keys(dct1, dct2):
    result = {}
    keys = sorted(list(dct1.keys()) + list(dct2.keys()))
    for key in keys:
        if key in dct1:
            result[key] = dct1[key]
        else:
            result[key] = dct2[key]
        
    return result"
Make a class that processes payments using Python.,"class PaymentProcessor:
    def __init__(self):
        self.transactions = []

    def process_payment(self, amount, account_no, currency):
        self.transactions.append({
            'amount': amount,
            'account_no': account_no,
            'currency': currency
        })
    
    def get_transaction_count(self):
        return len(self.transactions)"
Create a Python script that will generate a random four digit number,"import random

number = random.randint(1000, 9999)
print(number) # e.g. 3874"
Write a Python program to generate a series of random numbers ranging from 0 to 9.,"import random

for i in range(10):
    print(random.randint(0, 9))"
Create a 3-layer artificial neural network using Python and print the outcome.,"import numpy as np

# define the 3 layers #
input_layer = np.array([2, 3])
hidden_layer = np.array([[0.1, 0.4],
                         [0.8, 0.6],
                         [0.3, 0.9]])
output_layer = np.array([0.3, 0.7])

# compute the output of the 3-layer network #
hidden_layer_output = np.dot(input_layer, hidden_layer)
output = np.dot(hidden_layer_output, output_layer)

print(output)"
Write a regex to identify all the words starting with 't' and ending with 'e' in a given string.,"import re

def identify_words(str1):
    regex = ""\w*t\w*e\b""
    words = re.findall(regex, str1)
    return words

print(identify_words(""this is a python program""))"
Develop an algorithm in Python to reverse the order of words in a sentence.,"def reverse(sentence):
 words = sentence.split(' ')
 words.reverse()
 
 return ' '.join(words)

print(reverse(""I love programming""))  // Output: ""programming love I"""
Write a function to find the maximum total path sum in the given triangle.,"def max_path_sum(tri, m, n): 
	for i in range(m-1, -1, -1): 
		for j in range(i+1): 
			if (tri[i+1][j] > tri[i+1][j+1]): 
				tri[i][j] += tri[i+1][j] 
			else: 
				tri[i][j] += tri[i+1][j+1] 
	return tri[0][0]"
Create an HTML table with a two columns using Python.,"from lxml import etree
 
# Create the root element
root = etree.Element('table')
 
# Create two columns
table_elem = etree.SubElement(root, 'column')
table_elem.set('name', 'FirstName')
table_elem = etree.SubElement(root, 'column')
table_elem.set('name', 'LastName')
 
# Print the whole XML
print(etree.tostring(root, pretty_print=True).decode())"
Generate a Python program to search for a specific string in a list.,"def search_string(lst, str):
    for item in lst:
        if item == str:
            return True
    return False

lst = [""hello"", ""world"", ""this"", ""is"", ""a"", ""test""]
str = ""test""
print(search_string(lst, str))"
Create a python list comprehension to print the square of each odd number in a given list.,"[x**2 for x in [1, 2, 3, 4, 5, 6] if x % 2 != 0]"
Create a Neural Network class in Python that takes in two arguments (input size and number of outputs).,"class NeuralNetwork:
    def __init__(self, input_size, num_outputs):
        self.input_size = input_size
        self.num_outputs = num_outputs

        self.weights = np.random.rand(input_size, num_outputs)

    def forward(self, x):
        z = np.dot(x, self.weights)
        return z"
Create a Python script to automate the process of generating passwords.,"import string
import random

def generate_password(num_chars):
    chars = string.ascii_uppercase + string.ascii_lowercase + string.digits
    return ''.join(random.choice(chars) for x in range(num_chars))"
Write a function to search some literals strings in a string by using regex.,"import re
def check_literals(text, patterns):
  for pattern in patterns:
    if re.search(pattern,  text):
        return ('Matched!')
    else:
        return ('Not Matched!')"
Create a class in Python that can be used to store data about a movie.,"class Movie: 
 
    def __init__(self, title, year, rating): 
        self.title = title 
        self.year = year
        self.rating = rating 
  
    def print_data(self):
        print('The movie %s released in %d had a rating of %.1f.' 
        % (self.title, self.year, self.rating))"
Write a python function to check whether the two numbers differ at one bit position only or not.,"def is_Power_Of_Two (x): 
    return x and (not(x & (x - 1))) 
def differ_At_One_Bit_Pos(a,b): 
    return is_Power_Of_Two(a ^ b)"
Create an algorithm for sorting a list of integers in descending order in Python.,"def sortDescending(numbers):
    for i in range(len(numbers)): 
        for j in range(i):
            if numbers[j] < numbers[j+1]:
                temp = numbers[j] 
                numbers[j] = numbers[j+1] 
                numbers[j+1] = temp 
  
    return numbers

print(sortDescending([6,2,12,5]))"
Write a Python program to convert a given Roman number to its integer numerical equivalent.,"def romanToInt(s):
    values = {
    'I': 1,
    'V': 5,
    'X': 10,
    'L': 50,
    'C': 100,
    'D': 500,
    'M': 1000
    }

    number = 0
    for i in range(len(s)):
        if i == 0 or values[s[i]] <= values[s[i-1]]:
            number += values[s[i]]
        else:
            number += values[s[i]] - 2*values[s[i-1]]

    return number"
Generate a Python function to generate prime numbers in a given range of numbers.,"def generate_primes(start, end):
    # A list to store prime numbers
    primes = []
 
    # Iterate from start to end and
    # check if number is prime or not
    for num in range(start, end + 1):
        isPrime = True
        for i in range(2, num):
            if (num % i == 0):
                isPrime = False
        if isPrime:
            primes.append(num)
 
    return primes"
Write a Python program to generate random numbers between 5 and 15 inclusively.,"import random

for x in range(5):
 print(random.randint(5, 15))"
Create a web scraper in Python to extract information from a website. The scraper should find all the links in the given webpage and store them in a list.,"import requests
from bs4 import BeautifulSoup

url = 'https://www.example.com'
response = requests.get(url)
html = response.content
soup = BeautifulSoup(html, 'html5lib')

links = []
for link in soup.find_all('a', href=True):
 links.append(link['href'])
 
print(links)"
Write a function in Python to predict a label for a given input.,"def predict(x):
    if x[0] > 0:
        return 'positive'
    if x[1] < 0:
        return 'negative'
    if x[2] > 0:
        return 'positive'
    return 'neutral'"
"Given a string, write a Python program to check if the characters in the string form a palindrome.","def is_palindrome(string):
 return string == string[::-1]
 
result = is_palindrome(string)
print(result) # True"
Write a function to convert the given tuples into set.,"def tuple_to_set(t):
  s = set(t)
  return (s) "
Develop a Python code to print the pairs of the numbers in the given list which adds up to the given target number.,"def pairs_adding_to_target(nums, target): 
 
	result = [] 
	for i in range(0, len(nums)): 
		for j in range(i+1, len(nums))	: 
			if nums[i] + nums[j] == target:	 
				result.append([nums[i], nums[j]]) 
	return result 

result = pairs_adding_to_target([1, 5, 9, 4], 10)
print(result)"
Generate a Python function to print the Fibonacci series up to a given number.,"def print_fibonacci(num): 
    a = 0
    b = 1
    print(a, end =' ') 
    print(b, end =' ') 
    for i in range(2,num): 
        c = a + b 
        a = b 
        b = c 
        print(c, end =' ')"
Generate a python function to detect whether all elements in a given array are equal.,"def all_equal(arr):
    return len(set(arr)) == 1"
Write a python program to compute the GCD of two numbers.,"def gcd(a,b): 
    if b == 0:
        return a 
    else: 
        return gcd(b, a % b) 

a = 10
b = 15

print(gcd(a, b))"
Create an algorithm in Python that takes an integer as input and returns a boolean output of whether the number is prime or not.,"def is_prime(num):
    if num <= 1:
        return False
    for i in range(2, num):
        if num % i == 0:
            return False
    return True

print(is_prime(17))"
Calculate the computational complexity of this Python code.,"The computational complexity of this code is O(n) because the code iterates through each element in the list only once. Therefore, the complexity is directly proportional to the length of the list, n."
Create a function to sort a list of strings alphabetically in Python.,"def sort_strings(string_list): 
    return sorted(string_list)"
Write a Python program to calculate the value of the expression 2x^2 + 5x + 3 for x = 3.,"x = 3
result = 2*(x**2) + 5*x + 3

print(result)

# Outputs: 34"
Write a line of code to print the first five elements in a given list in Python.,print(list[:5])
Generate a graphical representation of a network using Python and matplotlib.,"import matplotlib.pyplot as plt

node_list = []
for i in range(10):
    node_list.append(i)

G = nx.Graph()
G.add_nodes_from(node_list)

nx.draw(G, with_labels=True)
plt.show()"
Generate a Python script to calculate the factorial of a number.,"def factorial(n):
 if n == 0:
   return 1
 else:
   return n * factorial(n-1)

num = int(input(""Enter a number: ""))

factorial = factorial(num)

print(""The factorial of"",num,""is"",factorial)"
Construct a python program to find the maximum element in a list using divide and conquer approach.,"def max_list_div_conq(lst): 
    if len(lst) == 1: 
        return lst[0] 
  
    mid = len(lst)//2
    left_max = max_list_div_conq(lst[:mid]) 
    right_max = max_list_div_conq(lst[mid:]) 
    return max(left_max, right_max)"
Create a function that takes a key and value as 1 pair to add to a Python dictionary.,"def add_key_value_pair(dict, key, value): 
    dict[key] = value
    return dict

my_dict = {}
my_dict = add_key_value_pair(my_dict, 'age', 23)
print(my_dict)"
Design a program in Python that accepts a string as input and checks whether or not it is palindrome.,"def isPalindrome(str): 
    for i in range(0, int(len(str)/2)):  
        if str[i] != str[len(str)-i-1]: 
            return False
    return True

inputStr = 'madam'

if (isPalindrome(inputStr)): 
    print(""Yes"")
else: 
    print(""No"")"
Construct a function in Python to remove all the vowels from a given sentence.,"def remove_vowels(phrase): 
  vowels = ['a','e','i','o','u'] 
  return ''.join([c for c in phrase if c not in vowels])"
Develop an algorithm in Python to identify prime numbers in a given range of numbers.,"def prime_numbers(lower_limit, upper_limit): 
    prime_numbers = [] 
    while lower_limit <= upper_limit:
        if all(lower_limit % i != 0 for i in range(2, lower_limit)):
            prime_numbers.append(lower_limit)
        lower_limit += 1
    return prime_numbers

print(prime_numbers(2, 10))"
Write a Python program to calculate the sum of the squares of all numbers from 0 to 10.,"sum = 0
for i in range(11):
  sum += i**2
  
print(sum)"
Write a command line program in Python that prints out the Fibonacci numbers up to n.,"# Program to print the Fibonacci numbers up to n

# Function to return the nth Fibonacci number
def fibonacci(n):
 # Base case
 if n == 0:
  return 0
 elif n == 1 or n == 2:
  return 1
 else:
  return fibonacci(n-1) + fibonacci(n-2)
 
# Main function
num = int(input(""Enter a number: ""))
for i in range(num + 1):
 print(fibonacci(i))"
Write an algorithm in Python to find the maximum and minimum of two given numbers.,"def max_and_min(a,b):
    """"""Function to find the maximum and minimum of two given numbers.""""""
    max = a if a > b else b
    min = a if a < b else b
    return max, min

#Example:
print(""Maximum is: "",max_and_min(a,b)[0])
print(""Minimum is: "",max_and_min(a,b)[1])"
Create a method in Python which takes a string as input and outputs all distinct words in the string.,"def getDistinctWords(string):
    wordlist = string.split()
    lst = []
    for word in wordlist: 
        if word not in lst:
            lst.append(word)
    return lst

print(getDistinctWords(""Hello, there! How are you?""))
# Output: ['Hello,', 'there!', 'How', 'are', 'you?']"
Write Python code to remove all duplicates from a given list,"def remove_duplicates(input_list):
    output_list = []
    for i in input_list:
        if i not in output_list:
            output_list.append(i)
    return output_list

result = remove_duplicates([1, 2, 3, 4, 4, 4, 5])
print(result)"
"Create a Python class named Student that stores the name, age, and grades of a student.","class Student:
    def __init__(self, name, age, grades):
        self.name = name 
        self.age = age
        self.grades = grades

    def get_grade_average(self):
        total = 0
        for grade in self.grades:
            total += grade
        return total/len(self.grades)"
Write a Python program to create a stack using two queues.,"class Stack:
 def __init__(self):
 self.queue1 = []
 self.queue2 = []
 
 def push(self, value):
 self.queue1.append(value)
 
 def pop(self):
 if self.queue1:
 while len(self.queue1) > 1:
 self.queue2.append(self.queue1.pop(0))

 return self.queue1.pop(0)
 
 else:
 while len(self.queue2) > 1:
 self.queue1.append(self.queue2.pop(0))

 return self.queue2.pop(0)"
Create a Python function that takes a number as input and returns the Fibonacci number at the same position in the sequence.,"def fibonacciNum(n): 
  a = 0
  b = 1
  if n < 0: 
    print(""Incorrect input"") 
  elif n == 0: 
    return a 
  elif n == 1: 
    return b 
  else: 
    for i in range(2,n+1): 
        c = a + b 
        a = b 
        b = c 
    return b 

fibonacciNum(3)"
Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.,"def sum_three_smallest_nums(lst):
	return sum(sorted([x for x in lst if x > 0])[:3])"
"Write a function in Python that takes a set of numbers and prints the sum, mean and standard deviation of the numbers.","def print_stats(numbers):
    sum = 0
    for i in numbers:
        sum = sum + i
    mean = sum / len(numbers) 

    ssd = 0
    for i in numbers:
        ssd = ssd + (i-mean)**2
    ssd = ssd / len(numbers)
    standard_dev = sqrt(ssd)
    
    print(""Sum = "", sum)
    print(""Mean = "", mean)
    print(""Standard Deviation = "", standard_dev)"
Modify the following Python code to add a few lines of logic.,"def calculate_discount(price, discount):
    '''This function takes price and discount as input and returns the discounted price'''
    discount = min(max(0, discount), 1)
    return round(price * (1 - discount), 2)"
Write a Python script to iteratively apply a function to all the elements in a list.,"""""""
Write a Python script to iteratively apply a function to all the elements in a list.
""""""

def applyFunc(list_data, func):
    result = []
    for item in list_data:
        result.append(func(item))
    return result

list_data = [1, 2, 3, 4]

def square(x):
    return x**2

squares = applyFunc(list_data, square)
print(squares)"
Create a function in Python to construct the following pattern,"def construct_pattern(n):
    for i in range(1,n+1):
        for j in range(i):
            print(""*"",end="""")
        print("""")
    for i in range(n-1,0,-1):
        for j in range(i):
            print(""*"",end="""")
        print("""")"
Write a Python program to create a new string that is the reverse of the given one.,"def reverse_string(string): 
    string = string[::-1] 
    return string 
  
# Driver code 
string = ""Python Programming""
print(reverse_string(string))"
Generate a list of integers in Python with no duplicates.,"def generate_unique_list(n): 
    res = [] 
  
    for i in range(n): 
        res.append(random.randint(1, n)) 
  
        # ensure no duplicates occur
        while len(res) != len(set(res)): 
            res.pop() 
            res.append(random.randint(1, n)) 
  
    return res"
Create an algorithm in Python to generate random numbers between 1 and 10 without repetition.,"import random

def generate_random_numbers(n):
 result = random.sample(range(1, 11), n)
 return result

random_numbers = generate_random_numbers(5)
print(random_numbers) # Example output: [4, 9, 2, 6, 8]"
Write a function to convert polar coordinates to rectangular coordinates.,"import cmath
def polar_rect(x,y):
 cn = complex(x,y)
 cn=cmath.polar(cn)
 cn1 = cmath.rect(2, cmath.pi)
 return (cn,cn1)"
Generate a function in Python to create a list of the nth prime number.,"def get_nth_prime(n): 
    prime_nums = [2] 
    check_num = 3 
    while len(prime_nums) < n: 
        is_prime = True 
        for i in prime_nums: 
            if check_num % i == 0: 
                is_prime = False 
                break 
        if is_prime: 
            prime_nums.append(check_num) 
        check_num += 2 
    return prime_nums[-1]"
Construct a Python program to find a missing number in an array of n distinct numbers.,"def find_missing_num(arr):
    n = len(arr)+1
    sum_of_n = int(n*(n+1)/2)
    sum_of_arr = 0
    for i in arr:
        sum_of_arr += i
    return sum_of_n - sum_of_arr"
"Create a Python function to count the number of strings that contain the substring ""cat"".","def count_substring_cat(string_list):
    count = 0
    for string in string_list:
        if ""cat"" in string:
            count += 1
    return count

string_list = [""cat keeper"", ""cat lover"", ""lizard wrangler"", ""cat wrangler""]
result = count_substring_cat(string_list)

print(result)"
Create a Python script to filter out elements in a list that are divisible by 3.,"numbers = [9, 8, 10, 27, 12, 15]

def filter_div_by_3(numbers):
    return [num for num in numbers if num % 3 != 0]

filtered_numbers = filter_div_by_3(numbers)
print(filtered_numbers)"
Write a Python program to classify a given data set using a trained model.,"def classify_data(data, model):
    predictions = model.predict(data)
    return predictions"
Write a Python script that prints all the prime numbers between 0 and the given number.,"def prime_numbers(num):
    primes = []
    for n in range(2, num + 1):
        is_prime = True
        for i in range(2, n):
            if n % i == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(n)
    return primes

print(prime_numbers(10)) # Outputs: [2, 3, 5, 7]"
Create a Python program to search for a particular string in an array of strings and return the indices of the matches.,"def find_string(arr, query):
 indices = []
 for i in range(len(arr)):
  if arr[i] == query:
    indices.append(i)
 return indices

print(find_string([""hello"", ""world"", ""hello"", ""world""], ""world""))"
Create a Python web scraper that will fetch the news headlines from a given website.,"import requests 
from bs4 import BeautifulSoup 
  
URL = ""http://example.com/""
r = requests.get(URL) 
  
soup = BeautifulSoup(r.content, 'html5lib') 
  
headlines = soup.find_all('h2') 
  
for headline in headlines: 
 print(headline.text)"
Write a Python program that creates a list with 10 random numbers between 1 and 10.,"import random

def random_list():
    random_list = []
    for _ in range(10):
        num = random.randint(1, 10)
        random_list.append(num)
    return random_list

list = random_list()
print(list)"
Generate code to read data from an Excel spreadsheet.,"Generate code to read data from an Excel spreadsheet using Python's xlrd library. The code should read in the spreadsheet, open the first sheet, and then iterate over each row, reading the data and storing it in a data structure, such as a list. The code should also handle any errors that may arise."
Write a Python program which prints the index of the given value in a list.,"def find_index(my_list, value):
    for i in range(len(my_list)):
        if my_list[i] == value:
            return i"
"Define a class Person in Python that has properties gender, age and name.","class Person:
  def __init__(self, gender, age, name):
    self.gender = gender
    self.age = age
    self.name = name"
Implement a Python program to recursively reverse a string.,"def reverse(string): 
	if len(string) == 0: 
		return string 
	else: 
		return reverse(string[1:]) + string[0] 

# Driver code 
string = ""Python""

print (reverse(string))"
Optimize a Python code to search for an item in a list efficiently using binary search.,"def binary_search(lst, target):
    left = 0
    right  = len(lst) - 1

    while left <= right:
        mid = (right + left) // 2
        if lst[mid] == target:
            return mid
        elif lst[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    return -1"
Create a program in Python to generate a 12x12 multiplication table.,"# Function to print multiplication table
def print_multiplication_table(n):
    # For loop to iterate multiplies from 1 to 12
    for i in range(1,13):
        print(f""{n} * {i} = {n*i}"")
 
# Iterate through the numbers from 1 to 12
for n in range(1,13):
    # print the multiplication tables for each of the numbers from 1 to 12
    print_multiplication_table(n)
    print()"
Merge two dictionaries into one using Python.,"def merge_dictionaries(dict1, dict2):
    res = {**dict1, **dict2} 
    return res

print(merge_dictionaries(dict1, dict2)) # Output: {'a': 1, 'b': 2, 'c': 3, 'd': 4}"
Write a function to find the equilibrium index of the given array.,"def equilibrium_index(arr):
  total_sum = sum(arr)
  left_sum=0
  for i, num in enumerate(arr):
    total_sum -= num
    if left_sum == total_sum:
      return i
    left_sum += num
  return -1"
Generate a Python program to compare two given strings to check if they are identical or not.,"def is_identical(str1, str2): 
    if str1 == str2: 
        return True
    else: 
        return False"
"Generate a data structure in Python that stores a list of flagged emails, and that provides a method to unflag them all.","class FlaggedEmails:
    def __init__(self):
        self.flagged_emails = []
  
    def add_email(self, email):
        self.flagged_emails.append(email)
  
    def unflag_all(self):
        while self.flagged_emails:
            self.flagged_emails.pop()"
Create a Python script to make a GET request to a given URL and extract all the hyperlinks from the page.,"import requests
from bs4 import BeautifulSoup

# Make the request
r = requests.get('https://www.example.com/')

# Parse the response
soup = BeautifulSoup(r.text, 'html.parser')

# Get all hyperlinks from the page
links = []
for link in soup.findAll('a'):
 links.append(link.get('href'))

print(links)"
Write a Python function to check if a given number is an Armstrong number or not. An Armstrong number is a number that is equal to the sum of its own digits each raised to the power of the number of digits.,"def is_armstrong_number(num):
  n = len(str(num))
  sum = 0
  temp = num
  while temp > 0:
    digit = temp % 10
    sum += digit**n
    temp //= 10
  return sum == num"
Generate Python code to format a given string as a Float number with 2 decimal places.,"def format_string(string): 
    return '{:.2f}'.format(float(string))

// Usage:
string = '3.14159'
formatted_string = format_string(string)
print(formatted_string) // prints 3.14"
Write a function to find the perimeter of a pentagon.,"import math
def perimeter_pentagon(a):
  perimeter=(5*a)
  return perimeter"
"Write a function to find out, if the given number is abundant.","def is_abundant(n):
    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])
    return fctrsum > n"
Design and program a Python function to find the maximum number from an array of integers,"def max_num(arr):
    max_num = arr[0]
    for i in arr:
        if i > max_num:
            max_num = i
    return max_num

if __name__ == '__main__':
    arr = [10, 2, 4, 6, 8, 9]
    print('The maximum number in array is', max_num(arr))"
Write a Python program to print out the first n numbers of the Fibonacci sequence.,"def fibonacci_sequence(n):
    if n == 0:
        return []
    elif n == 1:
        return [0]
    elif n == 2:
        return [0, 1]
    else:
        fib_numbers = [0, 1]
        for i in range(2, n):
            fib_numbers.append(fib_numbers[i-2] + fib_numbers[i-1])
        return fib_numbers"
Modify the Python program to calculate the sum of an array so that it finds the largest number in the array.,"def array_sum(arr):
 largest = 0
 for num in arr:
 largest = max(largest, num)
 return largest

print(array_sum([1, 2, 3, 4, 5]))"
Edit the given Python code to sort a list of words by their length.,"lst = sorted(lst, key=len)"
Write a python function to find the largest triangle that can be inscribed in the semicircle.,"def triangle_area(r) :  
    if r < 0 : 
        return -1
    return r * r "
Create a python function that takes a string of characters as input and checks if it is a valid identifier.,"import string

def isValidIdentifier(name):
    validChar = string.ascii_letters + ""_""
    if name[0] not in string.ascii_letters:
        return False
    for char in name[1:]:
        if char not in validChar:
            return False
            
    return True

validResult = isValidIdentifier(name)
print(validResult)"
Write a Python program to identify strings with all unique characters,"def is_unique_string(s):
    d = {} 
    for i in s:
        if i in d:
            return False
        d[i] =1
    return True"
Identify the best algorithm to find the maximum sum of a subarray in a given array and write a Python code snippet accordingly.,"def maxSubarraySum(arr): 
    max_so_far = 0
    max_ending_here = 0
  
    for i in range(0, len(arr)): 
        max_ending_here += arr[i] 
        if max_ending_here < 0: 
            max_ending_here = 0
        if (max_so_far < max_ending_here): 
            max_so_far = max_ending_here 
    return max_so_far"
Create a function in Python to check if a number is greater than a given threshold.,"def is_greater(num, threshold):
    if num > threshold:
        return True
    else:
        return False"
Develop a Python script that receives two lists and returns a new list that contains a unique combination of all elements in the two lists.,"def combine_lists(list1, list2):
 result = list1 + list2
 return list(set(result))

list1 = [1, 2, 3]
list2 = [2, 3, 4]

print(combine_lists(list1, list2)) # [1, 2, 3, 4]"
Develop a function in Python to convert a given word into its Pig Latin form.,"def pig_latin(word):
    first_letter = word[0]

    # check if the word starts with a vowel 
    if first_letter in ""aeiou"":
        latin_word = word + ""ay""
    else:
        latin_word = word[1:] + first_letter + ""ay""

    return latin_word"
Write a Python program to display the most commonly occurring item in a list.,"from collections import Counter

list_items = [1, 7, 3, 8, 2, 9, 3, 5, 5, 8, 7, 3]

counter = Counter(list_items)
most_common_item = counter.most_common()[0][0]

print(f'The most commonly occuring item in the list is {most_common_item}.')"
Write a python function to check whether every odd index contains odd numbers of a given list.,"def odd_position(nums):
	return all(nums[i]%2==i%2 for i in range(len(nums)))"
Build a web crawler in Python.,"import requests
from bs4 import BeautifulSoup

def web_crawler(url):
    page=requests.get(url)
    soup=BeautifulSoup(page.content, 'html.parser')
    for link in soup.findAll('a'):
        print(link.get('href'))"
Develop a python function which replaces all whitespaces in a given string with a different character.,"def replace_whitespaces(string, character):
    return string.replace("" "", character)"
Write a regular expression in Python to match valid IP addresses.,"import re

ip_regex = re.compile(r'^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')"
Design a Python program for converting a given string of characters into its corresponding ASCII code.,"def getAscii(string):
    result = []
    for char in string:
        result.append(ord(char))
    return result

print(getAscii('Hello'))
# Output: [72, 101, 108, 108, 111]"
Implement a Python module that converts a given date to ISO format,"import datetime

def convertToISO(dateString):
 date = datetime.datetime.strptime(dateString, ""%d %B %Y"").isoformat()
 return date

# test
dateString = '25 December 2024'
print(convertToISO(dateString))

# Output: 2024-12-25T00:00:00"
"Design a Python class that can store employee records, including name, job title, and salary.","class Employee:
    def __init__(self, name, job_title, salary):
        self.name = name
        self.job_title = job_title
        self.salary = salary

    def get_name(self):
        return self.name

    def get_job_title(self):
        return self.job_title

    def get_salary(self):
        return self.salary"
Write a Python function to calculate the average of two given numbers.,"def average(a, b):
    return (a+b)/2

print(average(4, 8))"
Design a function in Python that takes in a string and returns a list of words from the string in reverse order.,"def reverseString(userString):
 wordList = userString.split("" "")
 reversedStringList = list(reversed(wordList))

 return reversedStringList

print(reverseString(""The quick brown fox.""))"
Write a Python program to identify common characters between two given strings.,"def common_characters(str1, str2):
    common_chars = set(str1).intersection(set(str2))
    return list(common_chars)"
Write a function to convert radians to degrees.,"import math
def degree_radian(radian):
 degree = radian*(180/math.pi)
 return degree"
Design an algorithm in Python that reads an unordered array of integers and prints the integers in sorted order.,"def sortArray(arr): 
    for i in range(len(arr)): 
        if (arr[i] > arr[i+1]):
            temp = arr[i] 
            arr[i] = arr[i+1] 
            arr[i+1] = temp 
    return arr

print(sortArray([98, 45, 21, 99, 74, 44])) # Output: [21, 44, 45, 74, 98, 99]"
"Write a single line of python code that prints ""Hello, World!"".","print(""Hello, World!"")"
Write a python program that sums up all the values from a list of dictionaries,"def sum_dictionaries(data):
  total = 0
  for dic in data:
    total += sum(dic.values())
  return total"
How would you add a new element to the beginning of a linked list in Python?,"class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None
 
    def push(self, new_data):
        new_node = Node(new_data)
        new_node.next = self.head
        self.head = new_node"
Modify a given Python function to accept additional arguments.,"def divide(a, b, c=1, d=1):
    return (a / b) / (c / d)"
Create an object-oriented Python program to calculate the area of a triangle given the lengths of its three sides.,"class Triangle:
 def __init__(self, a, b, c):
 self.a = a
 self.b = b
 self.c = c

 def area(self):
 # Heron's Formula
 s = (self.a + self.b + self.c) / 2
 return (s*(s-self.a)*(s-self.b)*(s-self.c)) ** 0.5

triangle = Triangle(3, 4, 5)
print(triangle.area())
# Output: 6.0"
Create a function in Python that takes a list of numbers and returns the sum of all of the squared elements in the list.,"def sum_squares(nums): 
  total = 0
  for num in nums:
    total += num**2
  return total

print(sum_squares([1, 2, 3, 4])) 
# Output: 30"
"Design a function in Python that takes a string, replaces all occurrences of the word ""dog"" with ""cat"" and returns the modified string.","def replace_word(string):
    modified_string = string.replace(""dog"", ""cat"")
    return modified_string

result = replace_word(""I love my dog"")
print(result)"
Create a program in Python that takes two integer values and finds the greatest common divisor (GCD).,"# function to find the GCD of two numbers using Euclidean algorithm
def gcd(a, b):
    if b == 0:
        return a
    return gcd(b, a % b)
 
# take input from the user
a = 18
b = 54

# find GCD
gcd = gcd(a,b) 

# display result
print(""The GCD of {} and {} is {}"".format(a, b, gcd))"
Write a python function to find the first element occurring k times in a given array.,"def first_Element(arr,n,k): 
    count_map = {}; 
    for i in range(0, n): 
        if(arr[i] in count_map.keys()): 
            count_map[arr[i]] += 1
        else: 
            count_map[arr[i]] = 1
        i += 1
    for i in range(0, n):  
        if (count_map[arr[i]] == k): 
            return arr[i] 
        i += 1 
    return -1"
Generate a Python program to convert an array from the cartesian to the polar coordinate system.,"def cartesian_to_polar(arr):
    x = arr[0]
    y = arr[1]
 
    radius = (x**2 + y**2)**0.5
    theta = math.atan2(y,x)
 
    return [radius, theta]
    
arr = [1, 2]
result = cartesian_to_polar(arr)
print(result)"
Generate a random number between 5 and 10 using Python.,"import random
rand_num = random.randint(5,10)
print(rand_num)"
Create a python function to generate 10 random numbers between 1 to 10.,"import random

def generate_random_numbers():
    numbers = []
    for _ in range(10):
      numbers.append(random.randint(1,10)) 
    return numbers

random_numbers = generate_random_numbers()
print(random_numbers)"
Create a python script to display a grid pattern.,"def printgrid(rows, columns): 
    for i in range(1, rows+1): 
        for j in range(1, columns+1): 
            print(""*"", end="" "") 
        print(""\r"") 
  
printgrid(4, 4)"
Create a python function to normalize a given matrix.,"def norm(mat):
  result = [[0 for row in range(len(mat[0]))] for col in range(len(mat))] 
  for i in range(0, len(mat)):
    for j in range(0, len(mat[0])):
        result[i][j] = mat[i][j] / sum(mat[i])
  return result

print(norm([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))"
Generate a Python program to check if any element of a given list is palindrome or not.,"list1 = [12, 121, 3]

# Iterate through the list
for element in list1:
    # Convert the element to a string
    element = str(element)
    
    # Check if the element is a palindrome
    if element == element[::-1]:
        print(element + "" is a palindrome"")
    else:
        print(element + "" is not a palindrome"")"
"Suggest a Python code to print the following text in the output: ""This is a example sentence"".","print(""This is an example sentence"")"
Write a Python program to generate a list of prime numbers within a specified range.,"def prime_range(lower, upper):
    prime_list = []
    for num in range(lower, upper +1):
        if num > 1:
            for i in range(2, num):
                if (num % i) == 0:
                    break
            else:
                prime_list.append(num)

    return prime_list

lower = 1
upper = 20
print(prime_range(lower, upper))"
Design a program in python to generate a random string consisting of only lowercase a-z characters.,"import random
import string

def generate_random_string():
    return ''.join(random.choices(string.ascii_lowercase, k=10))

print(generate_random_string())"
Can you write a Python code that can sort dictionaries based on the values,"def sort_dict_by_values(dict):
  return sorted(dict.items(), key=lambda kv: kv[1])"
Design a Python function that takes a string as a parameter and returns a string with extra spaces in between each character.,"def add_spaces(string):
 new_string = """"
 for char in string:
 new_string += char + "" ""
 return new_string

my_string = add_spaces(""Hello World"")
print(my_string)
# H e l l o   W o r l d"
Build a Python function to generate a random sample from standard normal distribution,"import numpy as np

def get_normal_sample(size):
    """"""
    This function will generate a random sample from standard normal distribution 
    with length size
    """"""
    return np.random.normal(size=size)

if __name__ == '__main__':
    print(get_normal_sample(10))"
Convert the following Python code from imperative to functional style.,"sum = reduce(lambda x, y: x + y, nums)"
Write Python code to create a new list from the given list based on a condition,"new_list = []
for i, v in enumerate(list):
    if (i+1) % 2 == 0: # +1 since your list is 0 indexed
        new_list.append(v)
print(new_list) # prints [2,4]"
Build a decision tree classifier in Python using the scikit-learn library.,"from sklearn import tree
X = [[0, 0], [1, 1]]
y = [0, 1]
clf = tree.DecisionTreeClassifier()
clf = clf.fit(X, y)"
Can you provide a Python program to produce the following output?,"def print_sequence():
    for i in range(1, 7):
        for j in range (1, i+1):
            print(j, end="""")
        print()

print_sequence()"
Write a Python program to print a frequency table for the given data.,"from collections import Counter

data = [2, 4, 7, 1, 6, 4, 7, 2, 6, 3]

counts = Counter(data)

for item, count in counts.items():
    print(f'{item} : {count}')

# Output
# 2 : 2
# 4 : 2
# 7 : 2
# 1 : 1
# 6 : 2
# 3 : 1"
Write a python function to check whether the product of numbers is even or not.,"def is_Product_Even(arr,n): 
    for i in range(0,n): 
        if ((arr[i] & 1) == 0): 
            return True
    return False"
Write a PYTHON program to find the profit or loss after selling a product.,"def find_profit(cost_price, selling_price):
    profit = selling_price - cost_price
    return profit"
Create a while loop in Python to print the numbers from 1 to 10.,"i = 1
while i <= 10:
  print(i)
  i += 1"
Generate a Python class that implements a queue data structure.,"class Queue:
    def __init__(self):
        self.queue = []
    
    def enqueue(self, item):
        self.queue.append(item)
    
    def dequeue(self):
        if len(self.queue) > 0:
            return self.queue.pop(0)
        else:
            return None
    
    def peek(self):
        if len(self.queue) > 0:
            return self.queue[0]
        else:
            return None"
Optimise the Python program to reduce the time complexity for finding the maximum element in an array.,"def findMax(arr):
    max = arr[0]
    curr_max = arr[0]
    for i in arr[1:]:
        curr_max = max = max if max > i else i 
    return curr_max

print(findMax([5, 10, 15, 20]))"
Write a Python function that takes a string and an integer as an argument and returns a string containing the string repeated the specified number of times.,"def repeat_string(string, num_times):
    return string*num_times

result = repeat_string(""Hello!"", 3)
print(result)"
Develop an algorithm in Python to determine the greatest common divisor (GCD) of two numbers.,"def gcd(a, b): 
    # base case 
    if (a == 0):  
        return b 
    if (b == 0):  
        return a 
  
    # a is greater 
    if (a > b): 
        return gcd(a%b, b) 
          
    return gcd(a, b%a) 

print(gcd(8, 12)) # 4"
Write a function to perfom the rear element extraction from list of tuples records.,"def rear_extract(test_list):
  res = [lis[-1] for lis in test_list]
  return (res) "
"In Python, build a program that can remove all vowels from a given string.","def remove_vowels(string):
    vowels = ['a','e','i','o','u']
    new_string = ''
    for char in string:
        if char.lower() not in vowels:
            new_string += char
    return new_string"
Construct a Python program to detect pattern,"def detect_pattern(arr):
    consec_nums = []

    for i in range(1, len(arr)):
        if arr[i] == arr[i-1] + 1:
            # if consecutive numbers are detected 
            # add the number to the list
            consec_nums.append(arr[i - 1])
            consec_nums.append(arr[i])
    
    return consec_nums"
Write a python function to check for even parity of a given number.,"def check_Even_Parity(x): 
    parity = 0
    while (x != 0): 
        x = x & (x - 1) 
        parity += 1
    if (parity % 2 == 0): 
        return True
    else: 
        return False"
"Write a Python class that can be used to store information about a given patient, including their name and condition.","class Patient:
 def __init__(self, name, condition):
  self.name = name
  self.condition = condition
 
 def get_name(self):
  return self.name
 
 def get_condition(self):
  return self.condition"
Write Python code to remove all the vowels from a given string.,"def remove_vowels(string):
    # Replace all the vowels with empty string
    without_vowels = string.replace('a', '').replace('e', '').replace('i', '').replace('o', '').replace('u', '') 
    return without_vowels

if __name__ == '__main__':
    print(remove_vowels('Hello World!'))"
Generate a code in Python to measure the loading time of a website.,"import time  
import urllib.request  
  
def loadUrl(url): 
    start = time.time() 
    response = urllib.request.urlopen(url) 
    end = time.time()
    total_time = end - start
    print(total_time)
  
url = input(""Enter website url: "")
loadUrl(url)"
Find and fix a bug in this piece of Python code,"def sum_list(list_of_numbers):
    # calculates the sum of a list of numbers
    result = 0
    for number in list_of_numbers:
        result += number
    return int(result) # convert to an integer before returning the result"
Create a Python script to sort the given integers in descending order.,"input_list = [3, 7, 2, 8, 10]
input_list.sort(reverse=True)
print(input_list)"
Write a Python program which converts feet to centimeters.,"def convert_ft_to_cm(ft):
    return ft * 30.48"
Create a Python program to print the multiplication table from 1 to 10,"def table(n): 
    for i in range(1, 11): # for 1 to 10
        print(n,'x',i,'=',n*i) 
  
# Driver Code 
n = 5
table(n)"
Create a Python program to check if a given date is valid or not.,"from datetime import datetime
 
date_string = '2019/02/29'
try:
 date = datetime.strptime(date_string, '%Y/%m/%d')
 
 if date.year % 4 == 0 and date.month == 2 and date.day == 29:
 print('Valid Date')
 else:
 print('Invalid Date')
except ValueError:
 print('Invalid Date')"
Create a Python script that takes an input string and reverses its letters.,"def reverse_string(string):
 result = []
 
 for i in string:
 result.insert(0,i)
 
 return ''.join(result)
 
if __name__ == ""__main__"":
string = ""Hello Python!""
print(reverse_string(string))  # Output: !nohtyP olleH"
Create an automated speech recognition algorithm on Python.,"import speech_recognition as sr 

# create an instance of the speech recognition engine
r = sr.Recognizer()

# obtain an audio source
with sr.Microphone() as source:
    # capture input audio
    audio = r.listen(source)

# recognize the speech input
try:
    text = r.recognize_google(audio)
    print(text)
except Exception as e:
    print(e)"
Translate this code from Python to Java.,"// Java
public static int findMax(int[] nums) {
    int maxNum = nums[0];
    for (int num : nums) {
        if (num > maxNum) {
            maxNum = num;
        }
    }
    
    return maxNum;
}"
Consider the following statement and write a code for it in Python,"my_list = [1,2,3,4,5]
total_sum = 0

for x in my_list:
    total_sum = total_sum + x 
  
average = total_sum / len(my_list)

print(""Sum of all elements in given list: "" + str(total_sum))
print(""Average of all elements in given list: "" + str(average))"
Write a Python program to sort a given list of dictionaries based on a given key.,"def sort_dictionaries(list, key):
 return sorted(list, key=lambda i: i[key])"
Create a function to compute the maximum of two numbers in Python.,"def maximum(x, y):
    if x > y:
        return x
    else:
        return y"
Create a script in Python to determine whether a word is a palindrome or not.,"def is_palindrome(word): 
    # get length of the word
    n = len(word) 

    # loop from left and right
    for i in range(n//2): 
        if word[i] != word[n - i - 1]:
            return False 
    return True"
Write a python function to find nth bell number.,"def bell_Number(n): 
    bell = [[0 for i in range(n+1)] for j in range(n+1)] 
    bell[0][0] = 1
    for i in range(1, n+1):
        bell[i][0] = bell[i-1][i-1]
        for j in range(1, i+1): 
            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] 
    return bell[n][0] "
Design a Python algorithm to identify all the prime numbers up to a given integer.,"def identify_primes(num):
    '''This function will identify all the prime numbers up to a given integer.'''
    primes = []
    for x in range(2, num):
        if all(x%i!=0 for i in range(2, int(x**0.5)+1)):
            primes.append(x)
    return primes"
Generate a single Python line to create a list that contains elements from another list.,new_list = [element for element in given_list]
Develop a web service in Python that listens to HTTP requests.,"import http.server
import socketserver

PORT = 8000

#Create an instance of the server
Handler = http.server.SimpleHTTPRequestHandler

#Enable the server to listen on port 8000
with socketserver.TCPServer(("""", PORT), Handler) as httpd:
    print(""serving at port"", PORT)
    httpd.serve_forever()"
"Using the input provided, write a Python script to store the words in a dictionary and get the count of each word.","word_count = {}

for word in words:
    if word not in word_count:
        word_count[word] = 1
    else:
        word_count[word] += 1

print(word_count) # output: {'Hello': 2, 'World': 1, 'again': 1}"
Develop a python program to obtain the sum of items in an array,"def sum_array(arr):
    sum = 0
    for elem in arr:
         sum += elem
    return sum"
Design a python program to find the sample standard deviation of a given list of numbers.,"def sample_standard_deviation(nums):
    n = len(nums)
    mean = sum(nums) / n
    squared_sum = 0
    for num in nums:
        squared_sum += (num - mean)**2
 
    return (squared_sum / (n - 1)) ** 0.5"
Create a function in Python that takes two strings as input and returns their concatenated string.,"def concat_strings(str1, str2):
  return str1 + str2

result = concat_strings(""Hello"", ""World"")
print(result)"
Write a Python program that takes in a list and outputs the sum of the elements in the list.,"sum = 0
for x in [1,2,3,4,5]:
 sum += x
print(sum)"
Write a function to remove similar rows from the given tuple matrix.,"def remove_similar_row(test_list):
  res = set(sorted([tuple(sorted(set(sub))) for sub in test_list]))
  return (res) "
"Using Python, write a program to calculate the sum (full addition) of two decimal numbers.","def addDecimals(a, b):
    return a + b

x = 3.4
y = 2.6
print (addDecimals(x, y)) # 6.0"
Create a program in Python that takes a string as an input and removes all the characters whose ASCII value is odd.,"def remove_odd_ascii_chars(str):
    new_str = """"
    for ch in str:
        if ord(ch) % 2 == 0:
            new_str += ch
    return new_str

str = ""Hello world!""
new_str = remove_odd_ascii_chars(str)
print(new_str)"
Create a functional programming program to calculate the value of the Fibonacci number up to the n-th number in Python.,"def fibonacci(n):
 if n < 0:
 raise ValueError(""Negative number"")
 if n == 0 or n == 1:
 return n
 return fibonacci(n-1) + fibonacci(n-2)
 
# calculate 9th Fibonacci number
print(fibonacci(9))"
Write a function to find the longest palindromic subsequence in the given string.,"def lps(str): 
	n = len(str) 
	L = [[0 for x in range(n)] for x in range(n)] 
	for i in range(n): 
		L[i][i] = 1
	for cl in range(2, n+1): 
		for i in range(n-cl+1): 
			j = i+cl-1
			if str[i] == str[j] and cl == 2: 
				L[i][j] = 2
			elif str[i] == str[j]: 
				L[i][j] = L[i+1][j-1] + 2
			else: 
				L[i][j] = max(L[i][j-1], L[i+1][j]); 
	return L[0][n-1]"
Create a Python program to calculate the customer's total purchase amount from a list of items and amounts.,"items = [
 {'name': 'item1', 'amount': 10},
 {'name': 'item2', 'amount': 20},
 {'name': 'item3', 'amount': 30},
]

total = 0

for item in items:
 total += item['amount']

print(f""Total: {total}"") # Output: Total: 60"
Write a Python program to find the first non-repeating character in a given list.,"def first_non_repeating_char(lst):
    dct = {}
    
    for l in lst:
        if l in dct:
            dct[l] += 1
        else:
            dct[l] = 1
            
    for l in lst:
        if dct[l] == 1:
            return l
            
    return None

lst = [1, 2, 3, 4, 4, 3, 2, 1]
print(first_non_repeating_char(lst))"
Create a python program to read an integer from the keyboard and print a message saying whether the number is even or odd?,"def read_int_even_odd():
    number = int(input(""Enter an integer: ""))
    if number % 2 == 0:
        print(""The number is even"")
    else:
        print(""The number is odd"")
    
read_int_even_odd()"
"Using the data provided, write a Python program to find and print the root of the quadratic equation ax2 + bx + c = 0","import math

a = 1
b = 5
c = 6

# calculate the discriminant
d = (b**2) - (4*a*c)

# find the two solutions 
sol1 = (-b-math.sqrt(d))/(2*a)
sol2 = (-b+math.sqrt(d))/(2*a)

print('The solutions are {0} and {1}'.format(sol1, sol2))"
Write a function to get the n smallest items from a dataset.,"import heapq
def small_nnum(list1,n):
  smallest=heapq.nsmallest(n,list1)
  return smallest"
Write a Python script to classify a sentence as positive or negative.,"import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer

def classify_sentiment(sentence):
    sid = SentimentIntensityAnalyzer()
    score = sid.polarity_scores(sentence)
    if score['compound'] >= 0.05:
        return 'positive'
    elif score['compound'] <= -0.05:
        return 'negative'
    else:
        return 'neutral'"
Create a Python script to open a web browser and navigate to www.google.com.,"import webbrowser

# open web browser and navigate to google
webbrowser.open(""https://www.google.com"")"
Write a Python program to remove duplicate characters from an input string.,"def remove_duplicates(input_string):
  characters = set()
  output_string = """"
  for character in input_string:
    if character not in characters:
      output_string += character
      characters.add(character)

  return output_string"
Design a function in Python that takes a list of numbers as a parameter and returns the largest number in the list.,"def getLargestNum(nums):
    largestNum = nums[0]
    
    for num in nums[1:]:
        if num > largestNum:
            largestNum = num

    return largestNum"
Develop a Python script to rank an array of integers in ascending order.,"def sort_array(array):
    for i in range(len(array)):
        min_val = min(array[i:])
        min_index = array.index(min_val)
        array[i], array[min_index] = array[min_index], array[i]
    return array

array = [3, 5, 1, 9, 6, 4]
res = sort_array(array)
print(res)"
Create a Python program to generate a random subsample of a given list of items.,"import random

def random_sample(items, sample_size):
    sample = random.sample(items, sample_size)
    return sample

result = random_sample([1,2,3,4,5,6,7,8,9], 4)
print(result)"
Write a python function to check whether the given two arrays are equal or not.,"def are_Equal(arr1,arr2,n,m):
    if (n != m):
        return False
    arr1.sort()
    arr2.sort()
    for i in range(0,n - 1):
        if (arr1[i] != arr2[i]):
            return False
    return True"
Sort a given list of strings into alphabetical order.,"def sort_alphabetically(my_list):
    return sorted(my_list)

print(sort_alphabetically(my_list)) # ['C++', 'Java', 'JavaScript', 'Python']"
Develop a program in Python to check whether a string contains only digits.,"def is_digit_only(string):
    for char in string:
        if not char.isdigit():
            return False
    return True

print(is_digit_only(""0123""))"
"Create a function in Python to classify a given data according to two classes, class 0 or class 1.","def classify_data(data):
    """"""Classify given data into either class 0 or class 1.""""""
    if condition # Replace the condition with specific criteria for classification
        return 0
    else:
        return 1"
Write a Python program that would take a string and return the length of its longest word.,"def longest_word_length(string):
    words = string.split(' ')
    max_length = 0
    for word in words:
        if len(word) > max_length:
            max_length = len(word)
    return max_length"
"Given a Python dictionary, convert it into a list of tuples.",list(test_dict.items())
Produce an algorithm in Python to determine the maximum difference between any two elements in an array.,"def max_diff(array):
    max_diff = -float('inf')
    for i in range(1, len(array)):
        for j in range(i):
            diff = array[i]-array[j]
            if diff > max_diff:
                max_diff = diff
    return max_diff"
Create a function in Python using Pandas to recode a column in the following dataframe.,"import pandas as pd
 
def recode_age(data):
    data['age_recoded'] = data['age'].apply(
        lambda x: 'Above 30' if x > 30 else 'Below 30'
    )
 
df = pd.read_csv('data.csv')
recode_age(df)
print(df)"
Can you design a Python program that evaluates the following formula?,"def evaluate_formula(x, y, z):
 return 2*x + 4*y - z == 10"
Code an algorithm in Python for generating a random password.,"import string
import random

def generate_password(length):
    chars = string.ascii_letters + string.digits + string.punctuation
    password = ''.join(random.choice(chars) for _ in range(length))
    return password"
Write an algorithm to find the intersection of two sorted arrays in Python.,"def intersection(a, b): 
intersection_list = []
for item1 in a:
    if item1 in b:
        intersection_list.append(item1)
return intersection_list

a = [1, 5, 8, 9, 10], b = [2, 3, 5, 8, 9, 10]
print(intersection(a,b))
# Output: [5, 8, 9, 10]"
Construct a loop in Python to identify the numbers divisible by 7 between 15 and 40.,"for i in range(15, 41):
    if i % 7 == 0:
        print(i)"
Create a function in Python to calculate the sum of squares of all numbers up to a given value n.,"def sumOfSquares(n):
  sum = 0
  for i in range(n + 1):
    sum += (i ** 2)
  return sum

print(sumOfSquares(10))"
create a Python program to create a chart of the average temperatures in Celsius for the current year.,"import matplotlib.pyplot as plt
 
# Create lists of data to plot
# Current year's temperatures
temperatures = [10, 12, 14, 13, 14, 14, 15]
 
# Create a chart of average temperatures
plt.plot(temperatures)
 
# Label the chart
plt.title('Average Temperatures in Celcius')
plt.xlabel('Month')
plt.ylabel('Temperature (Celsius)')
 
# Show the chart
plt.show()"
Create a function to generate a unique 6 digit number.,"# Python program to generate 
# a unique 6 digit number 
import random 
def generate_number(): 
      
    # Choose a random number 
    # between 10000 and 99999 
    random_number = random.randint(10000, 99999) 
  
    # Return the random number 
    return random_number 
  
# Driver Code 
if __name__ == ""__main__"": 
    print(generate_number())"
Implement the quick sort algorithm in Python.,"def quick_sort(array):
    if len(array) == 0 or len(array) == 1:
        return array
    
    pivot = array[0]
    left = []
    right = []
    
    for i in range(1, len(array)):
        if array[i] <= pivot:
            left.append(array[i])
        else:
            right.append(array[i])
    
    left = quick_sort(left)
    right = quick_sort(right)
    
    return left + [pivot] + right"
Generate a Python program to produce text output with given conditions.,"def print_conditions():
    print(""Hello World"")
    print(""Goodbye World"")

print_conditions()"
Write a function in Python to parse a JSON object.,"import json

def parse_json(json_string):
 obj = json.loads(json_string)
 return obj

parsed_json = parse_json('{""movie"": ""Star Wars"",""genre"": ""Action""}')
print(parsed_json)
# Outputs {'movie': 'Star Wars', 'genre': 'Action'}"
Create a Python program to reverse a number without using any additional memory.,"def reverseNumber(num):
    reverse = 0
    while num > 0:
        remainder = num % 10
        reverse = (reverse * 10) + remainder
        num = num // 10
    return reverse

print(reverseNumber(12345)) # 54321"
Design and implement a Bubble Sort algorithm for sorting an array of numbers in Python.,"def bubble_sort(l):
    for i in range(len(l)):
        for j in range(0, len(l)-i-1):
            if l[j] > l[j+1]:
                l[j], l[j+1] = l[j+1], l[j]

# Test code
l = [64, 34, 25, 12, 22, 11, 90]
bubble_sort(l)
print(l)"
"Create a program in Python that takes a list of strings as input, sorts the strings in alphabetical order, and prints out the list in reverse alphabetical order.","# create a list
sample_list = [""cat"", ""bird"", ""dog"", ""zebra"", ""ant""]
 
# sort the list
sample_list.sort()
 
# reverse the list
sample_list.reverse()
 
# print the reversed list
print(sample_list)
# ['zebra', 'dog', 'cat', 'bird', 'ant']"
Write a Python program to modify a given string by filling blank spaces with periods.,"def fill_blanks(string): 
    return string.replace("" "", ""."") 
  
# Driver code 
string = ""Python Programming""
print(fill_blanks(string))"
Can you build a program in Python to calculate the median of a given list of integers?,"def median(list): 
	list.sort() 
	length = len(list) 
	if length % 2 == 0: 
		return sum(list[int(length / 2) - 1:int(length / 2) + 1]) / 2
	else: 
		return list[int(length / 2)] 

median_of_list = median([4, 9, 12, 8, 1]) 
print(""Median of the list is: "" + str(median_of_list)) 
# Output: 8"
Create a Python decorator that returns the decorated function with some additional information related to its runtime.,"import time

def timed(func):
    def get_runtime(*args, **kwargs):
        start_time = time.time()
        result = func(*args, **kwargs)
        end_time = time.time()
        total_time = end_time - start_time
        return result, total_time
    return get_runtime"
Formulate a program in python that will print out the first ten values of p Fibonacci sequence.,"a, b = 0, 1
for i in range(10):
    print(a)
    a, b = b, a + b"
Write a function to check a decimal with a precision of 2.,"def is_decimal(num):
    import re
    dnumre = re.compile(r""""""^[0-9]+(\.[0-9]{1,2})?$"""""")
    result = dnumre.search(num)
    return bool(result)"
"Create a dictionary in Python storing customer information which contains the name, address, and email.","customer = {
 'name': '',
 'address': '',
 'email': ''
}"
Design a Python function to automatically generate the next BST level based on the given level.,"def generateNextLevel(level):
  next_level = []
  for node in level:
    if node.left != None:
      next_level.append(node.left)
    if node.right != None:
      next_level.append(node.right)
  
  return next_level"
Write a Python script to perform linear regression on a given dataset.,"import numpy as np
from sklearn.linear_model import LinearRegression

x = np.array([[5, 6], [3, 4], [7, 9], [4, 5]])
y = np.array([7, 5, 11, 7])

model = LinearRegression().fit(x, y)

print(model.coef_)
print(model.intercept_)"
"Create a function that takes a Python list of numbers as input, and returns the list sorted by the sum of its digits.","def sortBySumOfDigits(lst):
    return sorted(lst, key=lambda x: sum(map(int, str(x))))

lst = [ 135, 590, 69, 127]
sorted_list = sortBySumOfDigits(lst)
print(sorted_list)"
Implement a priority queue in python with the given operations.,"class PriorityQueue:

    def __init__(self):
        self.queue = []
    
    def is_empty(self):
        return len(self.queue) == 0
    
    def insert(self, key):
        self.queue.append(key)
        self.queue.sort(reverse=True)
    
    def pop(self):
        if not self.is_empty():
            return self.queue.pop(0)
        return None"
Create a function in Python for computing the average of elements in a given list.,"def calculate_average(nums):
    total = 0
    for i in range(len(nums)):
        total += nums[i]
    return total / len(nums)"
Construct an algorithm in Python to find the longest substring in a string which does not have any repeating characters.,"def findLongestSubstring(string):
 
 # Initialize the result
 max_length = 0
 
 # Initialize substrings
 curr = ''
 
 for char in string:
  if char not in curr:
   curr += char
   max_length = max(max_length, len(curr))
  else:
   curr = char
 
 return max_length

string = 'abcaac'
print(findLongestSubstring(string))"
Generate a Python program to search for a given number in an array of integers and print out its index if it exsits.,"def search_in_array(my_array, number):
  for i, val in enumerate(my_array):
    if val == number:
      return i
  return -1"
Generate a python program to print a Roman Numeral for any number between 1 and 5.,"def print_roman_numeral(num):
    if num == 1:
        return ""I""
    elif num == 2:
        return ""II""
    elif num == 3:
        return ""III""
    elif num == 4:
        return ""IV""
    elif num == 5:
        return ""V""
    else:
        return ""invalid number""

number = int(input(""Enter a number between 1 and 5: ""))
print(print_roman_numeral(number))"
Create a Python module to perform basic encryption of a given text.,"def basic_encryption(s):
 encrypted = """"
 for c in s:
 encrypted += chr(ord(c) + 1)
 return encrypted"
Create a program in Python to generate random passwords of 8 characters.,"import random
import string
  
# Random password generator 
def randomString(stringLength=8):
    letters = string.ascii_lowercase
    return ''.join(random.choice(letters) for i in range(stringLength))
  
print (""Random Password is:"", randomString())"
Develop a Python program to generate the first N Fibonacci numbers.,"def fibonacci_numbers(n):
 result = []
 a, b = 0, 1
 while a < n:
 result.append(a)
 a, b = b, a+b
 return result

n = 10
fibonacci = fibonacci_numbers(n)

print(fibonacci)

# Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]"
Generate a Python algorithm that takes an unsorted array and returns a sorted one.,"def sort_array(arr):
    sorted_arr = sorted(arr) 
    # use the built-in sorted() method 
    return sorted_arr

result = sort_array([5, 8, 1, 4, 9])
print(result)"
"Given a list of numbers and a target number, write a Python program to find a pair of numbers from the given list that add up to the given target.","def find_pair(lst, target):
    for i in range(len(lst)):
        if (target - lst[i]) in lst[i+1:]:
            return [lst[i], target-lst[i]]

find_pair([1,2,3,4,4,5,6], 8)"
Suggest a completion for the following Python code so that it prints the characters in a string in reverse order.,"my_str = ""Hello World""

for i in range(len(my_str)-1, -1, -1):
    print(my_str[i], end="""")"
Create a Python program to sort a list of tuples based on the second element in each tuple.,"def sort_tuples(a):
    return sorted(a, key = lambda x: x[1])

a = [(1, 2), (4, 1), (9, 10), (13, -3)]
print(sort_tuples(a))

# Output: [(13, -3), (4, 1), (1, 2), (9, 10)]"
"Convert the following pseudocode to a program in Python:

If price > 50
  Print ""Expensive""
Else
  Print ""Cheap""","price = 45

if price > 50:
 print(""Expensive"")
else:
 print(""Cheap"")"
Write a piece of code in Python to reverse a given string.,"string = 'abcdef'

print(string[::-1])"
Create a web service in Python that takes in a temperature value as input in Celsius and returns the equivalent value in Fahrenheit.,"import flask

app = flask.Flask(__name__)

@app.route('/celsius-to-fahrenheit/<int:celsius>', methods=['GET'])
def celsius_to_fahrenheit(celsius):
 fahrenheit = celsius * 9/5 + 32
 return flask.jsonify({'celsius': celsius, 'fahrenheit': fahrenheit})
 
if __name__ == '__main__':
 app.run()"
Write a Python program to replace all occurrences of a given string with an alternate string.,"def replace_string(input_string, target_string, replacement_string):
    return input_string.replace(target_string, replacement_string)

print(replace_string(""Hello World!"", ""World"", ""Python""))"
Develop a Python program to check if a given string contains any special characters.,"import re
def hasSpecialChar(str):
    return bool(re.search(r'[^A-Za-z0-9]', str))"
"Can you create a function in Python that takes two strings as input, and returns the number of common characters between them?","def countCommonChars(string1, string2):
    count = 0
    for i in string1: 
    	if i in string2: 
    		count += 1
    return count

input1 = ""computer""
input2 = ""science""
print(countCommonChars(input1, input2))"
Design a function in Python that takes a number as input and returns the factorial of the number.,"def factorial(num):
	if num == 1 or num == 0:
		return 1
	else:
		return num * factorial(num-1)"
Create a Python script to calculate the running sum of an array.,"# Create a function to compute running sum
def running_sum(lst):
    running_sum = 0
    running_lst = []
    for num in lst:
        running_sum += num
        running_lst.append(running_sum)
    return running_lst

# Test array
test = [1, 2, 3, 4, 5]

# Print the result
print(running_sum(test))"
Build a program to remove all duplicate words from a given list of strings,"def remove_duplicates(lst):
    new_list = []
    for i in lst:
        if i not in new_list:
            new_list.append(i)
    return new_list

print(remove_duplicates([""Python"", ""Python"", ""programming"", ""language"", ""language""]))"
Generate a Python dictionary from two given lists. The dictionary should contain a list of keys and the corresponding value for each key should be the element from the second list.,"my_dictionary = dict(zip(keys, values))"
Modify the following Python code to select and print out the negative elements from an array.,"my_list = [3,4,1,-6,9,10,-2,-8,-4]

def select_negative_elements(my_list):
    negative_elements = []

    for x in my_list:
        if x < 0:
            negative_elements.append(x)

    return negative_elements

print(select_negative_elements(my_list))"
Create a python script that will take in a JSON string as input and output a copied version of the same string,"import json

jsonString = '{""name"": ""John Doe"", ""address"": ""123 Main Street""}'
jsonObject = json.loads(jsonString)
copiedString = json.dumps(jsonObject)

print(copiedString)"
Write an enable or disable function in Python that toggles an LED depending on the input given.,"def LED_toggle(state):
    if state == ""on"":
        GPIO.output(4,1)
    else:
        GPIO.output(4,0)"
Create a Python script to open a web page.,"import webbrowser

url = ""www.example.com""

# open the web page in a new browser tab
webbrowser.open_new_tab(url)"
"Convert the following JavaScript program into a Python program that does the same things:

let a = 5;
let b = 10;
let c = a + b;","a = 5
b = 10
c = a + b
print(c)"
Write a script in Python to evaluate an expression with multiple operators.,"# Initialize the expression
expression = ""2 + 3 - 5 * 4 + 7 / 6""

# Evaluate the expression
result = eval(expression)

# Print the result
print(""Result of the expression:"", result)"
Generate a heatmap using Python to visualize the correlation between two variables.,"import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt

# data
data = {'var1': [1, 0, 1, 0, 2, 1],
        'var2': [0, 1, 0, 1, 0, 1]}
# dataframe
df = pd.DataFrame(data=data)

# Create the heatmap
sns.heatmap(df.corr(), annot=True, cmap='coolwarm', vmin=-1, vmax=1)

# Show the plot
plt.show()"
Can you write a Python program to list all the prime numbers between 1 to 50?,"def prime_numbers(n):
 
    prime_numbers_list = []
    for num in range(2, n + 1):
        if all(num % i != 0 for i in range(2, num)):
            prime_numbers_list.append(num)
 
    return prime_numbers_list
 
print(prime_numbers(50))"
Write a Python code that finds the sum of the two largest numbers in a given list.,"def find_largest_sum(list):
    largestNum = max(list)
    list.remove(largestNum)
    secondLargestNum = max(list)
    return largestNum+secondLargestNum

print(find_largest_sum([1,2,3,4,5])) # 9"
Create a Python program to normalize an input string. The input string should be a paragraph of text and the output should be lowercase text with no punctuation.,"import re

def normalize_text(text):
 text = text.lower()
 text = re.sub(r'\W+', ' ', text)
 return text

input_text= 'Welcome to the GPT Normalization Task!'
output_text = normalize_text(input_text)
print(output_text)

# Output: welcome to the gpt normalization task"
Create a Python script for generating a random string of a desired length.,"import random

def generate_random_string(length):
  chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789$%&*'
  output_str = ''
  for _ in range(length):
    output_str += random.choice(chars)
  return output_str

result = generate_random_string(10)
print(result)"
Optimize the following code written in Python to remove any redundant or inefficient code.,"def factorial(n):
  if n == 0 or n == 1:
    return 1
  else:
    return n * factorial(n-1)"
"Implement a basic linear search algorithm in Python that searches a list of numbers for a given target value and returns the index of the target value if it is present, otherwise it returns -1.","def linear_search(arr, target):
 for i in range(len(arr)):
 if arr[i] == target:
 return i
 return -1

print(linear_search(arr, target)) # 3 (index of 6)"
Write a function to find the smallest multiple of the first n numbers.,"def smallest_multiple(n):
    if (n<=2):
      return n
    i = n * 2
    factors = [number  for number in range(n, 1, -1) if number * 2 > n]
    while True:
        for a in factors:
            if i % a != 0:
                i += n
                break
            if (a == factors[-1] and i % a == 0):
                return i"
Develop a Python program to check whether two given strings are anagrams of each other.,"def is_anagram(s1, s2):
    s1 = s1.lower().replace("" "", """")
    s2 = s2.lower().replace("" "", """")

    #check if both strings have exact letters
    if sorted(s1) == sorted(s2):
        print(""The strings are anagrams."")
    else:
        print(""The strings are not anagrams."")

# Driver program to check the above function
is_anagram(""listen"", ""silent"")"
Add code in python to the given argument to iterate over a list of numbers and print the even numbers.,"# Iterate over numbers
for num in [1,2,3,4,5]:
  # Check for even
  if(num % 2 == 0):
    # Print the even numbers
    print(num)"
Generate a Python script that checks a list for duplicate elements.,"def contains_duplicates(lst):
    seen = set()
    for x in lst:
        if x in seen:
            return True
        seen.add(x)
    return False"
Generate a valid Python code that will print the given message,"print(""Hello World!"")"
Can you generate Python code that prints the larger of two input numbers?,"# Define the two numbers
num1 = 37
num2 = 22

# Print the larger number
if num1 > num2:
    print(num1)
else:
    print(num2)"
Develop a code in Python to compare two lists and remove the common elements,"list1 = [10, 15, 20, 25, 30, 35, 40]
list2 = [25, 40, 35]

def remove_common_elements(list1, list2):
    list1_unique = []
    
    for i in list1:
        if i not in list2:
            list1_unique.append(i)
    
    return list1_unique

print(remove_common_elements(list1, list2))"
Encode a given URL using percent-encoding.,"String url = ""https://www.example.com/search?q=python"";
String encodedUrl = URLEncoder.encode(url, ""UTF-8"");
System.out.println(encodedUrl);  // https%3A%2F%2Fwww.example.com%2Fsearch%3Fq%3Dpython"
Produce a Python script to convert a given Unix timestamp into human readable date format.,"import time

# Unix timestamp in seconds
unix_timestamp = 1545732721

# Convert to readable date format
timestamp = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(unix_timestamp))

print('Human readable date format:', timestamp)"
"Create a Python class called ""Car"" that has two instance variables, ""year"" and ""make"".","class Car:
    def __init__(self, year, make):
        self.year = year
        self.make = make"
Generate a Python program to delete an item from a given list.,"def remove_item(item, list): 
    list.remove(item) 
    return list
  
list_org = [8, 4, 5, 9, 2]
  
result = remove_item(5, list_org)
print(result)"
"Write a Python script that can clean noisy text data, by removing special characters and translating text to lowercase.","import re

# Read in the data
text = open('noisy.txt').read()

# Clean the data by removing special characters and translating to lowercase
clean_text = re.sub(r""[^a-zA-Z0-9\s]"", """", text).lower()

# Print the cleaned text
print(clean_text)"
Generate a Python 3 program that creates a list of 10 random numbers between 0 and 100.,"import random

# Create a list of 10 random numbers between 0 and 100
random_list = []
for i in range(10):
    random_list.append(random.randint(0,100))

# Print the list
print(random_list)"
Write a Python program to solve the below puzzle.,"def find_sum_pair(arr, X):
  for i in range(0, len(arr)):
    for j in range(i+1, len(arr)):
      if arr[i] + arr[j] == X:
        return [arr[i], arr[j]]
  return []"
Provide an example of how to use a decorator to debug a function in Python,"import time

def time_it(func): 
    def wrapper(*args, **kwargs): 
        start = time.time() 
        result = func(*args, **kwargs) 
        end = time.time() 
        print(""Execution time: {}"".format(end - start)) 
        return result 
  
    return wrapper 

@time_it
def my_function(arg1, arg2):
        # Some logic code..
        return 10

my_function(10, 20)"
Create a Python program to generate random 9x9 Sudoku puzzles.,"import random

def generate_sudoku():
    sudoku = [[0 for x in range(9)] for x in range(9)]
    for i in range(9):
        for j in range(9):
            sudoku[i][j] = random.randint(1, 9)
    return sudoku

sudoku = generate_sudoku()
for i in range(9):
    for j in range(9):
        print(sudoku[i][j], end="" "")
    print()"
Modify the given Python loop to also multiply the numbers by 2 at the same time.,"numbers = [1, 2, 3 , 4]

for num in numbers:
  print(num*2)"
What is the best way to query a MySQL database in Python?,"The best way to query a MySQL database in Python is by using the MySQL Connector/Python library. It is an official Oracle-supported driver that allows you to easily connect with MySQL databases and execute queries. It provides a Python Database API that complies with the Python Database API Specification v2.0. The library also has support for prepared statements, transactions, and more."
Write a Python function to print prime numbers between two given numbers.,"def print_prime_numbers_between_two_numbers(low, high): 
    for numb in range(low,high + 1): 
        if numb > 1: 
            for i in range(2,numb): 
                if (numb % i) == 0: 
                    break
            else: 
                print(numb) 

#calling the function
print_prime_numbers_between_two_numbers(5, 10)"
Develop a Python program to generate all the even numbers between two given numbers.,"def generateEvenNumber(start, end):
  for num in range(start, end+ 1):
    if num % 2 == 0:
      yield num
 
evens = []
start = 1
end = 10
for even in generateEvenNumber(start, end):
  evens.append(even)
 
print(evens)"
Create a custom function in Python to change the values of a list.,"def custom_function(input_list): 
  transformed_list = [] 

  for value in input_list: 
    transformed_value = value + 1 
    transformed_list.append(transformed_value) 
  
  return transformed_list 

input_list = [2, 3, 1, 4]
print(custom_function(input_list))"
Create a python script to detect a palindrome from a given string.,"def is_palindrome(s):
    s = s.lower()
    return s == s[::-1]"
Implement a function in Python to find the length of a given string without using the len() built-in function.,"def getStringLength(my_string): 
    # Initialize counter  
    count = 0
  
    for s in my_string: 
        count+= 1
  
    return count"
Write a Python Function that receives two strings and checks to see if one of them is an anagram of the other one.,"def is_anagram(s1, s2):
    s1 = s1.replace("" "","""").lower()
    s2 = s2.replace("" "","""").lower()
    return sorted(s1) == sorted(s2)"
Write a python function to find the frequency of a number in a given array.,"def frequency(a,x): 
    count = 0  
    for i in a: 
        if i == x: count += 1
    return count "
Create a loop in Python to print out every even number until 10.,"for i in range(2, 11, 2):
    print(i)"
Write a Python script to filter out the given list and create a new reduced list.,"original = [-1, -2, 5, 0, 6, 8, 4, 9]
filtered = [x for x in original if x > 0]
print(filtered)"
"Write a Python program to assess a patient's current state based on their temperature, pulse rate and respiratory rate.","def assess_patient(temperature, breathing_rate, pulse_rate):
 if temperature > 100:
  print('Fever present')
 if breathing_rate < 12 or breathing_rate > 20:
  print('Respiratory distress')
 if pulse_rate < 60 or pulse_rate > 100:
  print('Heart rate issue')"
Create a function in Python 3 which takes two arguments and prints their sum.,"def add(a, b):
    print('Sum =', a + b)
    
add(5, 6)"
Write a function to locate the left insertion point for a specified value in sorted order.,"import bisect
def left_insertion(a, x):
    i = bisect.bisect_left(a, x)
    return i"
Convert a Python threading program to JavaScript.,"const showMessage = (message) => console.log(message);

const thread = new Worker('./thread.js');
thread.postMessage({message: 'Hello World!'});

// thread.js
onmessage = (msg) => postMessage(showMessage(msg.data.message));"
Create a function in Python to read specified properties from a list.,"def read_props(props):
    """"""
    Read listed properties from a list.
    
    Args:
        props (list): The list containing properties to be read.
    
    Returns:
        tuple: Returns a tuple with values of the specified properties.
    """"""
    data = list()
    for prop in props:
        data.append(input(""Enter {}: "".format(prop)))
    return tuple(data)"
Create a function in Python which calculates the number of days between two dates.,"def days_between_dates(date1, date2):
    delta = date2 - date1
    return delta.days"
Create a python program to implement random forest algorithm.,"import numpy as np 

from sklearn.ensemble import RandomForestClassifier

#data 
X =  np.array([[1,2,3], [1,2,3], [4,5,6], [4,5,6]])
y = np.array([1,1,2,2])

#Create a Random Forest Classifier
clf = RandomForestClassifier(max_depth=2, random_state=0)

#Training the model
clf.fit(X,y)"
Write a Python function to sort a list of tuples based on their third elements.,"def sort_by_third_element(list):
  return sorted(list, key=lambda x: x[2])

list = [('a', 1, 3), ('e', 5, 8), ('b', 6, 9), ('d', 2, 4)]

res = sort_by_third_element(list) 

# The result is
[('a', 1, 3), ('d', 2, 4), ('e', 5, 8), ('b', 6, 9)]"
Generate a python program to assign each row of a 2D array to a variable.,"def assign_variables(matrix):
    # Create an empty list to contain all the row variables
    variables = []
    
    # Iterate over the matrix
    for row in matrix:
        # Assign each row to a variable
        rowVar = row
        # Add the row variable to the list
        variables.append(rowVar)
        
    # Return the list of row variables
    return variables"
Generate a random string in Python of length 8 containing only digits and lowercase characters.,"import string, random

length = 8
chars = string.ascii_letters + string.digits
random_str = ''.join(random.choice(chars) for _ in range(length))
print(random_str)"
Write Python code to select values greater than 2 in a given list.,"list = [1, 2, 3, 4, 5]
 
result = [value for value in list if value > 2]
 
print(result)"
Generate a program to search for a given pattern in a string.,"def search_pattern(string, pattern):
  index = string.find(pattern)
  if index == -1:
    return False
  else:
    return (index, index + len(pattern))

result = search_pattern(""i love python!"", ""love"")
print(result) # (2, 6)"
Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.,"def adjacent_num_product(list_nums):
    return max(a*b for a, b in zip(list_nums, list_nums[1:]))"
Create a python program to calculate the average of three numbers.,"def average(a,b,c):
    return (a + b + c) / 3"
Create a Python program to print out the prime numbers between the given input range.,"def print_primes(min, max):
  for num in range(min, max+1):
    if num > 1:
      for i in range(2, num):
        if (num % i) == 0:
          break
      else:
        print(num)
  
# Driver Code
min = 1
max = 10

print_primes(min, max)

# Output:
# 2
# 3
# 5
# 7"
Create a code snippet to sort a given array of strings in descending order based on their lengths in Python.,"arr.sort(key=lambda x: len(x), reverse=True)
print(arr)"
Develop a class in Python that tracks the number of objects created.,"class Counter:
    count = 0

    def __init__(self):
        Counter.count += 1
    
    @classmethod
    def get_count(cls):
        return cls.count"
Find the 5 most frequent words in the given text.,"from collections import Counter

text = "" Python is a high-level programming language.""
words = text.split()

frequencies = Counter(words)

# printing five most frequent words 
frequent_words = frequencies.most_common(5)

print(frequent_words)"
Write a Python program that finds all numbers in a given string and prints their sum?,"import re

def find_numbers(s):
    numbers = re.findall('\\d+', s)
    ints = list(map(int, numbers))
    return sum(ints)

s = ""15 apples, 4 bananas and 6 oranges""

print(find_numbers(s)) # output: 25"
Rewrite the following code from Java to Python:,"a = 5
b = 10
c = a + b

print(c)"
Write a code to create a dictionary from given list of words.,"word_dict = {'Python': 1, 'is': 2, 'an': 3, 'interpreted': 4, 'high-level': 5, 'programming': 6, 'language': 7, 'for': 8, 'general-purpose': 9, 'programming': 10 }"
Write a function in Python to print all the prime numbers between 0 and 100.,"def print_prime_numbers():
 for num in range(0, 101):
 if num > 1:
 for i in range(2, num):
 if (num % i) == 0:
 break
 else:
 print(num)

print_prime_numbers()"
Write a python function to find the number of divisors of a given integer.,"def divisor(n):
  for i in range(n):
    x = len([i for i in range(1,n+1) if not n % i])
  return x"
Write a Python code to edit the given sentence by replacing all the '@' symbols with '#' symbols.,"sentence = ""This is a sentence with @ symbols.""
sentence = sentence.replace('@', '#')
print(sentence) # This is a sentence with # symbols."
Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.,"def sort_dict_item(test_dict):
  res = {key: test_dict[key] for key in sorted(test_dict.keys(), key = lambda ele: ele[1] * ele[0])}
  return  (res) 
"
"Design a class in Python 3 called ""Animal"" which will contain the following methods:","class Animal:
    def __init__(self, name):
        self.name = name
    
    def move(self):
        print(f""{self.name} is moving"")
    
    def eat(self):
        print(f""{self.name} is eating"")
    
    def sleep(self):
        print(f""{self.name} is sleeping"")"
Write a python function to find binomial co-efficient.,"def binomial_Coeff(n,k): 
    if k > n : 
       return 0
    if k==0 or k ==n : 
        return 1 
    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) "
Produce a data structure in Python to model a simple grocery store.,"class GroceryStore:
  def __init__(self):
    self.items = {}

  def add_item(self, item, price):
    self.items[item] = price

  def get_price(self, item):
    return self.items.get(item)"
Design a Python program to read numbers from a given array and determine if all numbers are divisible by 5.,"def checkDivisible(array):
  for num in array:
    if num % 5 != 0:
      return False
  return True

array = [10, 15, 20, 25, 30]

if checkDivisible(array):
  print('All numbers are divisible by 5')
else:
  print('Not all numbers are divisible by 5')"
Write a function to remove duplicate words from a given list of strings.,"def remove_duplic_list(l):
    temp = []
    for x in l:
        if x not in temp:
            temp.append(x)
    return temp"
Write a Python program to find the prime numbers between 0 and 10.,"def find_prime_numbers(start, end): 
    prime_nums = []
    for num in range(start, end + 1): 
        if num > 1:
            for i in range(2, num): 
                if num % i == 0: 
                    break
            else: 
                prime_nums.append(num)
    return prime_nums
    
print(find_prime_numbers(0, 10))"
Design an algorithm in Python to calculate the Fibonacci numbers up to N.,"def fibonacci(n): 
    a = 0
    b = 1
    if n < 0: 
        print(""Incorrect input"") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2,n+1): 
            c = a + b 
            a = b 
            b = c 
        return b 

print(fibonacci(5)) # 5"
Create a Python function that calculates the area of a circle.,"import math

def area_circle(radius):
    return math.pi * (radius ** 2)
    
print(area_circle(3))"
Generate a python code that returns all distinct values of a given list.,"def get_distinct_elements(list):
    distinct_list = []
    for item in list:
        if item not in distinct_list:
            distinct_list.append(item)
    return distinct_list

distinct_list = get_distinct_elements(my_list)"
Develop a Python script which extracts data from a given website.,"import requests
from bs4 import BeautifulSoup

url = ""https://www.example.com""
page = requests.get(url)
soup = BeautifulSoup(page.content, 'html.parser')

# Extract all Anchor Tags
links = soup.find_all('a')

# Extract all the contents of Anchors
for link in links:
    print(link.text, link.get('href'))"
Generate a random 5x5 matrix consisting of numerical entries in Python.,"import numpy as np

random_matrix = np.random.randint(1, 100, size=(5, 5))
print(random_matrix)"
Write a Python code to filter out the strings containing two or more words in a given list.,"def filter_words(string_list):
  result = []
  for string in string_list:
    if len(string.split()) < 2:
      result.append(string)
  return result

string_list = [""Hello"", ""Hi"", ""two words"", ""text string"", ""more than two words!""]
print(filter_words(string_list))

#Output
['Hello', 'Hi']"
Create a Python function that takes in two sets and returns a set containing the items that are in the first set but not in the second.,"def diff(set_A, set_B):
  res= set_A.difference(set_B)
  return res

set_A={1, 2, 3, 4}
set_B={2, 3, 5}

result = diff(set_A, set_B)
print(result)"
"Create a program in Python to identify whether a character is uppercase, lowercase or a digit.","def char_type(char):
    # check if character is uppercase 
    if char.isupper(): 
        print('Uppercase') 
 
    # check if character is lowercase  
    elif char.islower(): 
        print('Lowercase') 
 
    # check if character is digit 
    elif char.isdigit(): 
        print('Digit') 
    else: 
        print('Special Character') 

char_type('A')"
Implement a sorting algorithm in Python that sorts a given array of numbers.,"def sort_array(array):
    for i in range(len(array)): 
        min_idx = i 
        for j in range(i+1, len(array)): 
            if array[min_idx] > array[j]: 
                min_idx = j       
        array[i], array[min_idx] = array[min_idx], array[i]
    return array
result = sort_array(array)
print(result) // Output: [1, 2, 3, 4, 5, 7]"
"Given the following JSON string, write a program in Python to parse it.","import json

json_string = '{""name"": ""John"", ""age"": 20, ""courses"": [""English"", ""Maths""]}'

data = json.loads(json_string)
name = data['name']
age = data['age']
courses = data['courses']

print('Name:', name)
print('Age:', age)
print('Courses:', courses)"
Write a Python program to automatically submit a form when a user fills out all fields.,"import requests

# Create a form
form_data = {
 'name': 'John Doe',
 'email': 'john@example.com'
 }

# Send request
r = requests.post('http://example.com/form-submit', data=form_data)

# Check status code
if r.status_code == 200:
 print('Form submitted successfully!')
else:
 print('Failed to submit form!')"
Create a Python program that takes two integers as inputs and prints the largest number of them.,"num1 = 12
num2 = 44

if (num1 > num2):
    print(num1)
elif (num2 > num1):
    print(num2)
else:
    print(""Both numbers are equal"")"
Create a Python program to interpret a user command from a given set of instructions and execute it.,"command = input(""Please enter your command: "")
 
if command == ""Taking a break"":
 print(""Taking a five minute break"")
 # code to execute the taking a break command
else:
 print(""Invalid command"")"
"Translate the following sentence into Python language using Loops: ""Print all the numbers from 0 to 20"".","for i in range(0, 21):
  print(i)"
Write a code to check how many consecutive elements are equal in a given Python list.,"def check_consecutive_equal(lst): 
    count = 1
    max_count = 0
    
    for i in range(1, len(lst)):
        if lst[i] == lst[i-1]: 
            count+=1
        else:
            if max_count < count:
                max_count = count
            count = 1
  
    return max(max_count, count)"
"Define a class in Python to represent a person with first name, last name, age, and a method to greet them.","class Person:
 def __init__(self, first_name, last_name, age):
 self.first_name = first_name
 self.last_name = last_name
 self.age = age

 def greet(self):
 return f""Hello, my name is {self.first_name} {self.last_name} and I am {self.age} years old."""
Write a Python program to classify the following data into classes.,"def classify_data(students):
    for student in students:
        if student['Marks'] < 70:
            student['Class'] = 'Average'
        elif student['Marks'] >= 70 and student['Marks'] < 90:
            student['Class'] = 'Good'
        elif student['Marks'] >= 90:
            student['Class'] = 'Excellent'"
Rewrite a Python program from imperative to functional style.,"def find_even_numbers(numbers):
    even_numbers = filter(lambda num: num % 2 == 0, numbers)
    return list(even_numbers)"
Write a function to search an element in the given array by using sequential search.,"def sequential_search(dlist, item):
    pos = 0
    found = False
    while pos < len(dlist) and not found:
        if dlist[pos] == item:
            found = True
        else:
            pos = pos + 1
    return found, pos"
"Write a Python script to generate random numbers between 0 and 100, inclusive, that are divisible by 5.","def genRandomFive():
    n = 100
    divisor = 5

    random_number = random.randint(0,n) 
    while (random_number % divisor != 0): 
        random_number = random.randint(0,n) 
    return random_number 

for i in range(5): 
    print(genRandomFive())"
Write code to establish a connection between a Python backend and a MySQL database.,"import mysql.connector 
  
#Create MySQL Connection 
connection = mysql.connector.connect(host = Host, database = Database, user = Username, password = Password) 

#Check whether connection is established or not
if connection.is_connected(): 
    print(""Connection established successfully"")"
Rewrite the given Python code to use list comprehension.,"numbers = [1, 2, 3, 4, 5]

new_numbers = [n * 2 for n in numbers]"
Generate a Python program that identifies all the words with more than five characters in a given list.,"def more_than_five_characters(words):
    result = []
    for word in words:
        if len(word) > 5:
            result.append(word)
    return result

words = [""red"", ""green"", ""blue"", ""yellow"", ""orange""]
print(more_than_five_characters(words))"
Generate a Python program that takes a positive integer as input and returns a boolean indicating whether it is a prime number or not.,"def is_prime(n):
    if n < 2:
        return False
    for i in range(2, n):
        if n % i == 0:
            return False
    return True"
Replace the given SQL query with a Python program to calculate the sum of all the column values.,"import pandas as pd

data = pd.read_sql

  query = ""SELECT * FROM table""

df = pd.read_sql(query, conn)

sum_column = df['column'].sum()

print(sum_column)"
Write a python function to remove two duplicate numbers from a given number of lists.,"def two_unique_nums(nums):
  return [i for i in nums if nums.count(i)==1]"
Construct a Python script to filter the elements of a given list which are divisible by 3.,"my_list = [1,2,3,4,5,6,7,8,9]

filtered_list = list(filter(lambda x: x % 3 == 0, my_list))
print(filtered_list)"
Write a Python program to generate N random numbers.,"import random

random_numbers = []

for _ in range(5):
  random_numbers.append(random.random()) 

print(random_numbers)"
Create a function in Python that prints all prime numbers from 1 to 100.,"def print_primes():
    for num in range(1, 101):
        for i in range(2, num):
            if (num % i) == 0:
                break
        else:
            print(num) 

print_primes()"
Create a Python script that takes in a string and returns a dictionary of the number of times each character appears in the string.,"def character_count(str):
    d = dict()
    for c in str:
        if c in d:
            d[c] += 1
        else:
            d[c] = 1
    return d"
Create a python program that calculates the total cost of an item given the quantity and price.,"def calcTotalCost(quantity, price):
    totalCost = quantity * price
    return totalCost

result = calcTotalCost(5, 10)
print(result)"
Generate an optimized python code for finding the maximum element in a list of numbers.,"def find_max(l):
    max_elmt = l[0]
    for x in l:
        if x > max_elmt:
            max_elmt = x
    return max_elmt"
Write a python function to find the sum of fifth power of n natural numbers.,"def fifth_Power_Sum(n) : 
    sm = 0 
    for i in range(1,n+1) : 
        sm = sm + (i*i*i*i*i) 
    return sm "
Write a Python program to find all possible subsets of a given set.,"def find_subsets(s):
    subsets = []

    for i in range(len(s)+1):
        for subset in itertools.combinations(s, i):
            subsets.append(subset)

    return subsets

s = {1,2,3}
result = find_subsets(s)
print(result)"
Transform the following algorithm description into a working python function.,"def sum_list(nums_list):
    total = 0
    for num in nums_list:
        total += num
    return total"
Create a web API with Python and Flask to give the current date and time.,"from flask import Flask
import datetime

app = Flask(__name__)

@app.route('/datetime')
def get_datetime():
    return datetime.datetime.now().strftime(""%Y-%m-%d %H:%M:%S"")

if __name__ == '__main__':
    app.run()"
Create code to multiply two matrices in Python.,"def matrixMultiplication(A, B):
	N = len(A)
	C = [[0 for x in range(N)] for y in range(N)]

	for i in range(N):
		for j in range(N):
			for k in range(N):
				C[i][j] += A[i][k] * B[k][j]

	return C

A = [[1,2],
     [3,4]]
B = [[4,3],
     [2,1]]

print(matrixMultiplication(A, B))

#output: [[8, 5], [20, 13]]"
Construct a function in Python to calculate the volume of a sphere.,"def sphere_volume(radius): 
    return (4/3) * 3.14 * (radius*radius*radius) 

# Program to test above function
radius = 3
volume = sphere_volume(radius)
print(""Volume of a sphere with radius %d = %.2f"" %(radius, volume))"
Create a python program to calculate the sum of two numbers and show the result in the console.,"# Calculate the sum of two numbers
num1 = 12
num2 = 7
sum = num1 + num2

# Print the result
print('The sum of two numbers is ', sum)"
Combine multiple lists using Python and preserve duplicates.,"combined_list = list1 + list2

# preserves duplicates
print(list(set(combined_list)))"
Create a Python script to calculate the total number of visitors on a Web page.,"visitors_per_day = [2000, 1500, 2500, 1800]
total_visitors = sum(visitors_per_day)

print(""Total number of visitors:"", total_visitors)"
Generate the syntax tree for a given Python expression.,"import ast

tree = ast.parse(expression)"
Create a recursive Python program to find the sum of all the odd numbers between a given number x and 0.,"def sum_odd_recurse(num):
    if num == 0:
        return 0
    elif num % 2 != 0:
        return num + sum_odd_recurse(num - 1)
    else:
        return sum_odd_recurse(num - 1)

# driver code
x = 4
print(sum_odd_recurse(x)) # Output: 9 (1+3+5)"
Suggest a completion for the following Python code that finds the median of a list of numbers.,"def median(nums):
    nums.sort()
    if len(nums) % 2 == 0:
        left = len(nums) // 2 - 1
        right = len(nums) // 2
        return (nums[left] + nums[right]) / 2
    else:
        middle = len(nums) // 2
        return nums[middle]"
Create a for loop in Python to reverse a given string.,"text = ""Text""
rev_text = """" 
  
for i in range(len(text) - 1, -1, -1): 
    rev_text = rev_text + text[i] 
  
print(rev_text)"
Create a Python program to count the occurrence of each character in a given string and return a dictionary object.,"def count_characters(string):
    chars = {}
    for char in string:
        if char in chars:
            chars[char] += 1
        else:
            chars[char] = 1
    return chars"
Create an algorithm in Python to rotate an array of numbers by k elements.,"def rotate_array(arr, k):
 n = len(arr)
 
 for i in range(k):
  temp = arr[n-1]
  for i in range(n-1,0,-1):
   arr[i] = arr[i-1]
  arr[0] = temp
  
 return arr
 
print(rotate_array([1,2,3,4,5],2)) # prints [4,5,1,2,3]"
Create a Python program which takes a series of integers as input and returns the largest.,"def get_max(ins):
    return max(ins)"
Design an algorithm in Python to replace an element in a given list of numbers at a given position with another number.,"def replace_elem(lst, val, pos):
    lst[pos] = val
    return lst

list = [1, 2, 3, 4, 5]
element = 8
position = 3

result = replace_elem(list, element, position)
print('After replacing element: ', result)"
Re-structure the following code so that it can be written using a for loop in Python.,"for i in range(1, 5):
    print(i)"
Design an algorithm in Python that finds all the elements of an array that sum to a given number.,"def findElements(arr, sum): 
    result = [] 
    for i in range(0,len(arr)-1): 
        for j in range(i + 1, len(arr)): 
            if arr[i] + arr[j] == sum: 
                result.append([arr[i], arr[j]]) 
    return result 

arr = [3, 5, 2, -4, 8, 11] 
sum = 7

print(findElements(arr, sum))"
Write a python function to check whether all the characters in a given string are unique.,"def unique_Characters(str):
    for i in range(len(str)):
        for j in range(i + 1,len(str)): 
            if (str[i] == str[j]):
                return False;
    return True;"
Create an array of length 5 in Python and print the contents.,"myArray = [1,2,3,4,5]
print(myArray)"
Write a Python function to insert a list of elements into a given list according to the given index.,"def insert_list(list, index, elements): 
    return (list[0:index] + elements + list[index:])"
Optimize the following Python code for faster runtime performance,"for i in range(5):
    print(""Hello"", end=""\n"")"
"Create a function in Python to normalize an array of integers to range [0,1].","def normalize(arr):
    minVal = min(arr)
    maxVal = max(arr)
    normalizedArr = [(x - minVal) / (maxVal - minVal) for x in arr]
    return normalizedArr

result = normalize([3, 4, 6, 8, 10])
print(result)  // [0.0, 0.2, 0.4, 0.6, 0.8]"
Can you develop a Python program to implement a stack data structure?,"class Stack:
    def __init__(self):
        self.items = []

    def isEmpty(self):
        return self.items == []

    def push(self, item):
        self.items.append(item)

    def pop(self):
        return self.items.pop()

    def peek(self):
        return self.items[len(self.items)-1]

    def size(self):
        return len(self.items)"
"Create a JSON object for an employee. The employee should have a unique ID, name, email address, date of birth, and list of skills.","{
  ""id"": 1,
  ""name"": ""John Smith"",
  ""email"": ""john@example.com"",
  ""dob"": ""1996-02-28"",
  ""skills"": [
    ""JavaScript"",
    ""HTML"",
    ""CSS"",
    ""Python""
  ]
}"
Construct a for loop in Python to print the characters in a string.,"for char in ""Hello World"":
    print(char)"
Create a for loop in Python to print out all numbers from 0 to 10 (inclusive).,"for i in range(11):
    print(i)"
"Consult the documentation and write python code to create a thread that prints ""Hello World"".","import threading
 
def print_message():
    print(""Hello World"")
 
# create thread object
thread_obj = threading.Thread(target=print_message)
 
# start thread
thread_obj.start()"
"Given a list of numbers, write a Python program to calculate the mean.","def calculate_mean(nums):
    return sum(nums) / len(nums)

nums = [5,2,10,3,7]
mean = calculate_mean(nums)
print(mean)  # Output: 5.6"
Optimize the given Python code so that it runs more efficiently.,"def calculateSum(a, b): 
    return int((b - a + 1) * (a + b) / 2)"
"Generate a Python function that takes a list as input, and returns the number of values in the list that are greater than the average of the values in the list.","def count_above_average(input_list): 
 average = sum(input_list)/len(input_list)
 count = 0
 for value in input_list: 
  if value > average:  
   count += 1
 return count"
Rewrite the following Python program using the try/except approach.,"try:
    c = a / b
except ZeroDivisionError:
   print(""Division by zero error!"")"
Rewrite a Python function given a few specific requirements.,"def is_prime(n):
 if n < 2:
 return False
 elif n == 2:
 return True
 elif n > 2 and n % 2 == 0:
 return False
 for i in range(3, int(n**0.5)+1, 2):
 if n % i == 0:
 return False
 return True"
Generate a Python program to print out square numbers up to 10.,"for i in range(1,11):
    print(i**2)"
Write a Python function that takes a list of words as input and capitalizes the first character of each element in the list.,"def capitalize(words):
  return [word.capitalize() for word in words]

input_words = [""apple"", ""banana"", ""strawberry""]
capitalized_words = capitalize(input_words)
print(capitalized_words)"
"Write a code for sorting the words within a sentence, alphabetically.","""""""
Write a code for sorting the words within a sentence, alphabetically.
""""""

def sort_words_alphabetically(sentence):
    words = sentence.split()
    words.sort()
    return ' '.join(words)

if __name__ == '__main__':
    sentence = 'Python is a great language'
    print(sort_words_alphabetically(sentence))"
Create a Python program that multiplies two input numbers and prints the result.,"def multiply(a, b):
    result = a * b
    print(result)

multiply(a, b)"
Create a Python program that uses the NumPy library to generate a series of random numbers.,"import numpy as np

# Generate random integers within a specified range
x = np.random.randint(0, 10, size=(3, 3))

# Generate random floats within a specified range
y = np.random.uniform(low=0.0, high=10.0, size=(3, 3))

# Generate random numbers with numpy
z = np.random.rand(3,3)

print('Random integers:', x, '\n') 
print('Random floats:', y, '\n') 
print('Random numbers:', z)"
Write a python program to calculate the absolute differences between corresponding elements of two arrays of the same size.,"def calc_diff(arr1, arr2):
    # Initialize difference array
    diff = []

    # Iterate through arrays
    for i in range(len(arr1)):
        # Calculate the difference between two elements
        diff.append(abs(arr1[i] - arr2[i]))
        
    return diff"
Write a function in Python to convert a given date in the format mm-dd-yyyy to the format dd-mm-yyyy.,"def convertDateFormat(inputDate):
    dateList = inputDate.split('-')
    newFormat = dateList[1] + ""-"" + dateList[0] + ""-"" + dateList[2]
    return newFormat"
"Create a Python program that receives a list of numbers, and generates two new lists: one containing the even elements from the original list, and one containing the odd elements.","def find_even_odd(nums):
  even_list = []
  odd_list = []
  for num in nums:
    if num % 2 == 0:
      even_list.append(num)
    else:
      odd_list.append(num)
  
  return even_list, odd_list
  
print(find_even_odd([1, 2, 3, 4, 5, 6]))"
Implement a Python program to find the length of a given string.,"def stringLength(string):
    return len(string)

result = stringLength(""Hello World"")
print(result)"
Write a function to extract all the adjacent coordinates of the given coordinate tuple.,"def adjac(ele, sub = []): 
  if not ele: 
     yield sub 
  else: 
     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) 
                for idx in adjac(ele[1:], sub + [j])] 
def get_coordinates(test_tup):
  res = list(adjac(test_tup))
  return (res) "
Write a Python function to find the sum of a series of numbers.,"def sumSeries(arr):
  total = 0
  for num in arr:
    total += num
  return total

result = sumSeries([1, 2, 3, 4, 5])
print(result)"
Rewrite the javascript code with python code.,"# This function prints the values 1 to 10
def print_numbers(): 
    for i in range(1,11): 
        print(""The number is "" + str(i)) 
          
print_numbers()"
Write a Python program that takes a word as input and prints out the word in pig latin.,"def pig_latin(word):
    if len(word) > 0 and word.isalpha():
        first_letter = word[0]
        pig_word = word[1:] + first_letter + ""ay""
    else:
        pig_word = ""Please enter a valid word!""
    return pig_word

result = pig_latin(""word"")
print(result)"
"Given an array of strings, you need to write a Python program to move the elements that contain a certain letter to the end of the array.","def move_letter(strings, letter):
 new_list = []
 for s in strings:
  if letter not in s:
   new_list.append(s)
  else:
   new_list.append(s)
 return new_list"
Design a class in Python to store the customer information.,"class Customer:
 def __init__(self, customer_id, customer_name, customer_address):
 self.customer_id= customer_id
 self.customer_name = customer_name
 self.customer_address = customer_address"
Optimize a Python program that processes a 2d array and stores the transpose output in a new array.,"def transpose(A):
 n = len(A)
 m = len(A[0])

 B = [[0 for x in range(n)] for x in range(m)]

 for i in range(n):
 for j in range(m):
 B[j][i] = A[i][j]

 return B"
Write a python function to count all the substrings starting and ending with same characters.,"def check_Equality(s): 
    return (ord(s[0]) == ord(s[len(s) - 1])); 
def count_Substring_With_Equal_Ends(s): 
    result = 0; 
    n = len(s); 
    for i in range(n): 
        for j in range(1,n-i+1):  
            if (check_Equality(s[i:i+j])): 
                result+=1; 
    return result; "
Write a python function to find sum of inverse of divisors.,"def Sum_of_Inverse_Divisors(N,Sum): 
    ans = float(Sum)*1.0 /float(N);  
    return round(ans,2); "
Write a Python program to generate a bar chart with labels using matplotlib from a given list of numbers.,"import matplotlib.pyplot as plt

list = [1, 2, 3, 4, 5]

plt.bar(range(len(list)), list)
plt.xlabel('Index')
plt.ylabel('Value')
plt.title('My Bar Chart')

plt.show()"
Write a Python program to take the input of two numbers and output the larger one.,"def max_num(a, b):
    if a > b:
        return a
    else:
        return b

a = int(input(""Enter a number: ""))
b = int(input(""Enter another number: ""))

print(max_num(a, b))"
Write a Python program to take a string as input and to create an object that contains all unique characters in the string as keys and the number of occurrences of the character as values.,"def char_freq(string):
 freq_dict = {}
 
 for char in string:
 if char in freq_dict:
 freq_dict[char] += 1
 else: 
 freq_dict[char] = 1
 
 return freq_dict"
Create a REST API endpoint in Python with a GET route to query a database. The route should accept a 'name' as a query parameter and return a list of results from the query.,"@app.route('/api/search', methods=['GET'])
def search():
name = request.args.get('name')
query = _db.execute(""SELECT * FROM users WHERE name=?"", [name]).fetchall()
return jsonify(query)"
Propose a series of Python commands for downloading the content of a web page.,"import requests

page_url = 'https://www.example.com'  
page = requests.get(page_url)

content = page.content"
Write a python function to find the first repeated character in a given string.,"def first_repeated_char(str1):
  for index,c in enumerate(str1):
    if str1[:index+1].count(c) > 1:
      return c 
  return ""None"""
Create a python program to print out the top 10 coins listed on CoinMarketCap.,"import requests

url = ""https://api.coinmarketcap.com/v2/ticker/""

response = requests.get(url)

data = response.json()

print(data['data'][0]['name'], data['data'][0]['quotes']['USD']['price'])
for i in range(1, 10):
    print(data['data'][i]['name'], data['data'][i]['quotes']['USD']['price'])"
Write a python program to print the elements in a list which are not repeated more than once.,"result = []
for ele in list:
    if list.count(ele) == 1:
        result.append(ele)
print(result) # Output: [1, 4]"
Write a Python script that finds the most common element of a given list.,"def find_most_frequent_element(list):
 count_map = {}
 max_element= list[0]
 max_count = 1
 for num in list:
  if num in count_map:
   count_map[num] += 1
  else:
   count_map[num] = 1
 for num in count_map:
  if count_map[num] > max_count:
   max_element = num
   max_count = count_map[num]
 return max_element"
"Create a class in Python that represents a Tree node with the following attributes - name, value, left, right.","class TreeNode:
    def __init__(self, name, value, left=None, right=None):
        self.name = name
        self.value = value
        self.left = left
        self.right = right"
Generate a Python program to calculate the square root of a given number using Newton’s Method.,"def square_root(x):
    guess = x/2
    while True:
        next_guess = 0.5 * (guess + (x/guess))
        if abs(guess - next_guess) < 0.0001:
            break
            guess = next_guess
    return guess

print(square_root(36)) # prints 6.0"
Develop a Python script to identify duplicate characters in a string.,"def find_duplicates(text):
  n = len(text)
  duplicates = []

  for i in range(n):
    for j in range(i+1, n):
      if text[i] == text[j]:
        duplicates.append(text[i])

  return duplicates"
Create a Python function to sum all the middle elements of a given list.,"def middle_sum(numbers):
    if len(numbers) == 0:
        return None
    
    if len(numbers) % 2 == 1:
        return numbers[len(numbers) // 2]
    else:
        return numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]"
Generate a Python code snippet to find the minimum value of a list of integers.,"def find_min(list):
    min_value = list[0]

    for value in list:
        if value < min_value:
            min_value = value

    return min_value"
Generate a Python program that searches a list of given integers for a given target value and returns its index if found.,"def search(list, target):
  for i in range(len(list)):
    if list[i] == target:
      return i
  return -1

list = [2, 3, 4, 5, 6]
target = 4

index = search(list, target)
if index == -1:
  print(""The target was not found."")
else:
  print(""The target was found at index %d."" % index)"
"Create a program in Python that takes a list of integers, and prints the sum of the even numbers and the sum of the odd numbers.","list=[2,4,5,7,1,3]

even_sum= 6
odd_sum= 15

def sum_even_odd(list):
    even_sum=0
    odd_sum=0
    
    for num in list:
        if num % 2 == 0:
            even_sum+=num
        else:
            odd_sum+=num 
    
    print(""even_sum="",even_sum)
    print(""odd_sum="",odd_sum)
    
sum_even_odd(list)"
Trace the recursive Fibonacci algorithm in Python and test its execution time for different values of n.,"import time 

def fib(n): 
 if n<0: 
  print(""Incorrect input"") 
 elif n==1: 
  return 0
 elif n==2: 
  return 1
 else: 
  return fib(n-1)+fib(n-2) 

start = time.time() 

num = 10 
print(fib(num))

print(""Time taken:"", time.time()-start)"
Create a Python 3 program that takes an integer input from the user and prints its cube.,"number = int(input(""Please enter a number: ""))
cube = number**3
print(""The cube of the number is: "" + str(cube))"
Develop an algorithm to check if a string S is a palindrome in Python.,"def is_palindrome(s):
    # Convert strings to lowercase
    s = s.lower()
 
    # Iterate through middle of string with indices 
    for i in range(len(s) // 2):
        if s[i] != s[len(s) - i - 1]:
            return False
    return True"
Generate a code snippet to reverse a string in Python.,"def reverse(s): 
	return s[::-1]"
Write a python function to set all odd bits of a given number.,"def odd_bit_set_number(n):
    count = 0;res = 0;temp = n
    while temp > 0:
        if count % 2 == 0:
            res |= (1 << count)
        count += 1
        temp >>= 1
    return (n | res)"
Can you write a python program to produce the intersection of two given lists?,"list1 = [2, 3, 4] 
list2 = [3, 5, 6, 4]

# create a set of elements in list1
s1 = set(list1)

# create a set of elements in list2
s2 = set(list2)

# find the intersection 
intersection = s1.intersection(s2)

# print the intersection 
print(intersection) 
# prints {3, 4}"
Create a Python program to convert a comma-separated string into a list.,"string = ""1,2,3,4,5""
list = string.split("","")
print(list)"
"Create a Python program which takes a list of words as input, and prints out the frequent words.","from collections import Counter

words = [""python"", ""is"", ""a"", ""programming"", ""language""]

word_count = Counter(words) 

for k,v in word_count.items(): 
    print(k,v) 

# To get the most frequent word 
most_freq_word = max(word_count, key=word_count.get) 

print(""Most frequent word is:"", most_freq_word)"
Optimize the following Python code to maximize performance.,"for row in records:
    for key, value in row.items():
        try:
            do_something(key, value)
        except Exception:
            pass"
"In Python, create a lambda function to input two numbers, and return their product.","product = lambda x, y : x * y"
Create a Python method to get the index of the largest element in an array.,"def find_largest_index(arr):
    largest = float('-inf')
    largest_index = 0
    for i in range(len(arr)):
        num = arr[i]
        if num > largest:
            largest = num
            largest_index = i
    return largest_index 

print(find_largest_index([1,2,3,4,5])) # 4"
Write a Python program to convert a given time in 12 hour format to 24 hour format.,"def convert_to_24(time):
    if time[-2:] == ""PM"" and time[:2] != ""12"":
        return str(int(time[:2])+12)+time[2:-2]
    elif time[-2:] == ""AM"" and time[:2] == ""12"":
        return ""00""+time[2:-2]
    else:
        return time[:-2]"
Create an algorithm in Python to sort an array of numbers.,"def sortArray(arr):
    for i in range(len(arr)):
        for j in range(i+1,len(arr)):
            if arr[i] > arr[j]:
                temp = arr[i]
                arr[i] = arr[j]
                arr[j] = temp
    return arr

arr = [9, 3, 5, 1, 6]
print(sortArray(arr))"
Translate this code from JavaScript to Python,"def hello_world():
    print(""Hello World!"")"
Edit the following Python program to count the occurrence of the word “apple” in a given sentence.,"sentence = ""I have an apple, and the apple is delicious.""

word = ""apple""

count = 0

for word in sentence.split():
    if(word == ""apple""):
        count = count + 1

print(""The no. of occurrences of the word 'apple' is:"", count)"
Generate a Python program to find all the common elements of two given lists.,"def find_common_elements(list1, list2):
 return list(set(list1).intersection(set(list2)))

result = find_common_elements([1, 2, 3], [3, 4, 5])
print(result)"
Generate a python program to help a user create a custom greframe to quickly generate a simple part-of-speech tagged dataset.,"import spacy

def generate_grammar_based_dataset(sentences):
    nlp = spacy.load('en_core_web_sm')
    dataset = []
    for sentence in sentences:
        doc = nlp(sentence)
        grammarTaggedSentence = [(token.text, token.pos_) for token in doc]
        dataset.append(grammarTaggedSentence)
    return dataset"
"Write a Python program that prints out the day number of the week (1-7) from the input date given in the format ""yyyy-mm-dd"".","#!/usr/bin/env python

import datetime

def get_day_of_week(date):
    day, month, year = [int(d) for d in date.split('-')]
    day_of_week = datetime.date(year, month, day).weekday()
    return day_of_week+1

print get_day_of_week(""2020-05-15"") # Outputs 6 (Friday)"
Implement a program in Python to separate odd and even numbers in separate arrays.,"def separate_odd_even(arr):
    odd = []
    even = []
    for num in arr:
        if num % 2 == 0:
            even.append(num)
        else:
            odd.append(num)
    return odd, even"
Write a Python program to display the first and last colors from the following list.,"# List of colors
colors = ['Red', 'Green', 'White', 'Black']

# First color
print(colors[0])

# Last color
print(colors[-1])"
"Write a function in Python that takes an input list, multiplies each item in the list by two, and returns the resulting list.","def double_list(lst):
    return [x * 2 for x in lst]"
Create a python script that prints out a list of names in alphabetical order.,"list_of_names= [""Asher"", ""Aster"", ""Athena"", ""Robert""]
list_of_names.sort()

print(list_of_names)"
What is the output of the following Python code?,0
Write a function to find the surface area of a cone.,"import math
def surfacearea_cone(r,h):
  l = math.sqrt(r * r + h * h)
  SA = math.pi * r * (r + l)
  return SA"
Construct a program in Python to prompt the user for their age and display the appropriate greeting.,"name = input(""What's your name: "")
age = int(input(""How old are you: ""))
 
if age < 18:
  print(""Hello, ""+ name + "", welcome to our website."")
elif age < 60:
  print(""Greetings, ""+ name + "", how can we help you today?"")
else:
  print(""Welcome, ""+ name + "", thanks for visiting us."")"
Author a Python program to check if a number is a palindrome.,"def isPalindrome(num):
  numStr = str(num)
  for i in range(0, len(numStr)//2):
    if numStr[i] != numStr[len(numStr)-i-1]:
      return False
  return True

print(isPalindrome(1991)) # Output: True"
Write a python function to count the number of squares in a rectangle.,"def count_Squares(m,n):
    if(n < m):
        temp = m
        m = n
        n = temp
    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))"
Write a function to convert the given string of integers into a tuple.,"def str_to_tuple(test_str):
  res = tuple(map(int, test_str.split(', ')))
  return (res) "
Construct a Python function to redesign a given list to meet a given sorting criteria.,"def sort_list(my_list):
    return sorted(my_list)"
Develop a Python program that takes a text string as input and displays only those words which contain the letter ‘a’.,"input_text = 'This is an example of a string to test.'

words = input_text.split()

for word in words:
  if 'a' in word:
    print(word)

# Output: 
an
example
a
string
test."
Construct a Python program to find all substrings of a given string,"def get_all_substrings(input_string): 
	length = len(input_string) 
	return [input_string[i:j+1] for i in range(length)  
							for j in range(i,length)] 

output = get_all_substrings('Python') 
print(output)"
Generate a Python Class which takes one input 'name' and has two methods 'showName' and 'hideName'.,"class Name:
    def __init__(self, name):
        self.name = name

    def showName(self):
        print(self.name)

    def hideName(self):
        self.name = '*****'
        print(self.name)"
Generate a code snippet that implements the linear search algorithm in Python,"def linear_search(array, element):
    for i in range(len(array)):
        if array[i] == element:
            return i
    return -1"
Write code to find the median of an array of integers using Python.,"def get_median(nums):
    nums.sort()
    if len(nums) % 2 == 0:
        return (nums[int(len(nums)/2)] + nums[int((len(nums)/2) - 1)] )/ 2
    else:
        return nums[int(len(nums) / 2)]

nums = [2, 4, 5, 7, 8, 9, 11]
median = get_median(nums)
print(""Median is: "",median)"
Write a python function to reverse the words in a given sentence.,"def reverseWords(sentence): 
    words = sentence.split(' ') 
    words = words[::-1] 
    return ' '.join(words) 
      
print(reverseWords(sentence))"
Write a Python function that returns the second-largest number from an input list of integers.,"def second_largest_num(numbers):
    largest_num = max(numbers)
    second_largest = 0
    for num in numbers:
        if (num > second_largest and num < largest_num):
            second_largest = num
    return second_largest

result = second_largest_num([2, 1, 4, 5])
print(result)"
Create a program in Python to evaluate a strinf expression and solve it.,"def solve_expression(exp):
 # Solve the expression
 return eval(exp)

exp = '4+2/3'
res = solve_expression(exp)
print(res) # Output: 4.666666666666667"
Create a class in Python that inherits properties from a parent class named 'Animal'.,"class Animal:
    def __init__(self, name):
        self.name = name

class Dog(Animal):
    def __init__(self, name, breed):
        super().__init__(name)
        self.breed = breed"
"Using a machine learning library of your choice, write a program in Python to detect the sentiment of a sentence.","import nltk
nltk.download('vader_lexicon')

from nltk.sentiment.vader import SentimentIntensityAnalyzer

sentences = [
 ""This is a great movie!"",
 ""This movie was terrible.""
]

analyzer = SentimentIntensityAnalyzer()

for sentence in sentences:
 scores = analyzer.polarity_scores(sentence)
 print(""{:-<40} {}"".format(sentence, str(scores)))"
Create a function in Python which takes a string and returns the reversed string,"def reverseString(string):
    reversedString = """"
    for i in range(len(string) - 1, -1, -1):
        reversedString += string[i]
    return reversedString"
Write a Python program that calculates the distance between two points on a two-dimensional plane.,"#include <iostream>
#include <math.h>

int main() 
{ 
    int x1 = 3; 
    int y1 = 4; 

    int x2 = -9; 
    int y2 = -2;

    float distance = sqrt(pow(x2 - x1, 2) + pow(y2 - y1, 2)); 

    std::cout << ""Distance between the two points is: "" << distance << std::endl; 

    return 0; 
}"
"Using Python, create a function to calculate the volume of a cube with the side length as a parameter.","def cube_volume(side):
    # calculate the volume of a cube
    return side**3

volume = cube_volume(5) # volume = 125
print(volume)"
Refactor the following Python code to make use of list comprehensions.,result = [x * y for x in range(10) for y in range(10)]
Create a for loop statement in Python to iterate over a list and print the each item in the list.,"for i in [1,2,3,4,5]:
    print(i)"
Create a Python function which takes an integer and returns True or False depending on whether it is a prime number or not respectively.,"def is_prime(n):
 if n <= 1:
 return False

 for i in range(2, n):

 if n % i == 0:
 return False

 return True"
Generate a 3x3 matrix with random integers in Python.,"import random
 
def generate_matrix(length):
    matrix = []
    for _ in range(length):
        row = []
        for _ in range(length):
            row.append(random.randint(0,100))
        matrix.append(row)
    return matrix
 
print(generate_matrix(3))"
"Make a class in Python for a car with these attributes: color, year, make, model.","class Car:
    def __init__(self, color, year, make, model):
        self.color = color
        self.year = year
        self.make = make
        self.model = model"
Develop a Python solution to identify parts of speech of a given sentence.,"import nltk

sentence = ""I like apples.""
words = nltk.word_tokenize(sentence)
tagged_words = nltk.pos_tag(words)

parts_of_speech = dict()
for word, tag in tagged_words:
  parts_of_speech[word] = tag

print(parts_of_speech)
# Output: {'I': 'PRP', 'like': 'VBP', 'apples': 'NNS'}"
"Write a Python program to optimize an equation of the form ax3 + bx2 + cx + d = 0, where a,b,c and d are given constants and x is a variable.","def optimize_equation(a, b, c, d):
    # calculate the discriminant
    discriminant = b**2 - 4*a*c
    x1 = (2*c)/(-b + (discriminant**0.5))
    x2 = (-b - (discriminant**0.5))/(2*a)
    
    # return the optimized values
    return (x1, x2)"
Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.,"def basesnum_coresspondingnum(bases_num,index):
  result = list(map(pow, bases_num, index))
  return result"
Write a Python program to analyze the given user input sentences regarding sentiment.,"def analyze_sentiment(sentence):
    sentiment = TextBlob(sentence)
    if sentiment.polarity > 0:
        print(""Sentence is Positive"")
    elif sentiment.polarity == 0:
        print(""Sentence is Neutral"")
    else:
        print(""Sentence is Negative"")

sentence = ""I am so excited to start this project""
analyze_sentiment(sentence)"
generate valid python statements to check if the string contains a particular character,"""""""
Check if a string contains 'a'
""""""

if 'a' in my_string:
    #string contains 'a'
else:
    #string does not contain 'a'"
"Rewrite the following function from Java to Python:

int findMax(int[] arr) { 
   int max = arr[0]; 
   for (int i = 0; i < arr.length; i ++) {
     if (arr[i] > max) {
        max = arr[i]; 
     }
   }
   return max;
}","def find_max(arr):
 max = arr[0]
 for i in range(len(arr)):
 if arr[i] > max:
 max = arr[i]
 return max"
"Create a function in Python that takes two lists of equal length, and returns the sum of the elements in the same index in each list.","def sum_elements_in_lists(list1, list2):
    if len(list1) != len(list2):
        return None
    
    result = []
    for i in range(len(list1)):
        result.append(list1[i] + list2[i])
    
    return result

result = sum_elements_in_lists([2, 3, 4], [2, 5, 6])
print(result)"
Can you develop a program using Python to check if number is prime?,"def is_prime(n):
    if (n <= 1): 
        return False
    elif (n <= 3): 
        return True
    elif (n % 2 == 0 or n % 3 == 0): 
        return False 

    i = 5
    while(i * i <= n): 
        if (n % i == 0 or n % (i + 2) == 0): 
            return False
        i = i + 6
  
    return True

print(is_prime(13))"
Write a Python function that takes an array of integers and finds the maximum difference between any two elements in the array,"def max_difference(arr):
  if len(arr) < 2:
    return 0
  curr_max = arr[1]-arr[0]
  min_elem = min(arr[0], arr[1])
  for i in range(2, len(arr)):
    curr_max = max(curr_max, arr[i] - min_elem)
    min_elem = min(min_elem, arr[i])
  return curr_max
  
print(max_difference([2, 3, 10, 6, 4, 8, 1]))"
Design a python program which takes a word string as an argument and returns the number of vowels in the string.,"def count_vowels(string):
    count = 0
    for ch in string:
        if ch in 'aeiouAEIOU':
            count += 1
    return count"
Write a Python script to extract all the values for a given key from a dictionary.,"def get_key_values(dictionary, key):
    return [value for key, value in dictionary.items() if key == key]"
"Create a function in Python that takes two arguments, x and y, and returns the sum of x and y.","def add(x, y):
    return x + y"
Create a python program which reads a string from the user and prints out its length.,"user_str = input(""Please enter a string: "")
print(""The length of the string is"", len(user_str))"
Write a short Python program to generate the Fibonacci sequence up to the given number n.,"def fibonacci(n): 
    a = 0
    b = 1
 
    if n < 0: 
        print(""Incorrect input"") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2,n): 
            c = a + b 
            a = b 
            b = c 
        return b 
  
if __name__ == '__main__':
    n = int(input('Enter a number: '))
    print(fibonacci(n))"
Design an algorithm in Python to Merge two lists.,"def merge(list1, list2):
 merged_list = []
 
 while list1 and list2:
  if list1[0] < list2[0]:
   merged_list.append(list1[0])
   list1.pop(0)
  else:
   merged_list.append(list2[0])
   list2.pop(0)

 merged_list += list1
 merged_list += list2
 return merged_list

list1 = [1, 3, 5]
list2 = [2, 4, 6]

merged_list = merge(list1, list2)

print(""Merged list:"") 
print(merged_list)"
Write a Python program that reads in a list of numbers and sorts them in the ascending order.,"def sort_list(lst):
    lst.sort()
    return lst

result = sort_list([2, 3, 4, 5, 1])
print(result)"
Rewrite the given Python script to remove all punctuation from a given string.,"def remove_punctuation(string): 
 new_string = """" 
 for char in string: 
 if char not in "",.?!;:"": 
 new_string += char 
 return new_string"
Write a function in Python that takes two integers as arguments and returns the number of common divisors between the two.,"def countCommonDivisors(a,b): 
   
    divisors = [] 
   
    for i in range(1, min(a,b)+1): 
        if (a % i == 0 and b % i == 0): 
            divisors.append(i) 
              
    return len(divisors) 

num1 = 350
num2 = 400

print (countCommonDivisors(num1, num2)) 
# Output: 5"
"Edit the given Python program so that it prints the current date, in the format YYYY-mm-dd.","from datetime import date

print(""Hello!"")

current_date = date.today().strftime(""%Y-%m-%d"")
print(""Today's date is"", current_date)"
Create a function in Python that takes a value and inserts it into an already sorted list.,"# Python 
def insertInSortedList(sorted_list, value):
    left = 0
    right = len(sorted_list) - 1

    while left <= right:
        mid = left + (right - left) // 2
        if value < sorted_list[mid]:
            right = mid - 1
        else:
            left = mid + 1

    sorted_list.insert(left, value)
    return sorted_list"
Write a python function to find the perimeter of a cylinder.,"def perimeter(diameter,height) : 
    return 2*(diameter+height)  "
Develop a program in Python to find the GCD of two numbers.,"def gcd(a, b): 
    if a == 0 : 
        return b  
  
    return gcd(b % a, a)  
  
# Driver program  
print(gcd(30,15))"
Create a Python program to filter a list of strings and return only the strings that contain a given substring.,"def filter_list(lst, sub):
 filtered = [s for s in lst if sub in s]
 return filtered

lst = [""cat"", ""dog"", ""elephant"", ""rabbit"", ""duck""]
sub = ""ra""

result = filter_list(lst, sub)
print(result)

# Output: ['rabbit']"
Rewrite this better Python program to calculate the square root of a given number.,"def square_root(number): 
    """""" 
    Calculate the square root of a number 
    """""" 
    root = number # Initial guess 
    for i in range(20): # Iterative approach to refine guess 
        root = (1/2) * (root + (number/root)) 
    return root"
Create a program in Python for performing a linear search on a given list.,"def linear_search(list, n): 
  
    for i in range(len(list)): 
  
        if list[i] == n: 
            return i 

list = [1, 2, 3, 4, 5, 6] 
n = 5

x = linear_search(list, n) 

if x == None: 
    print(""Element is not present in the list"") 
else: 
    print(""Element is present at index"", x)"
Create a random number generator in Python.,"import random

def random_num_generator():
    return random.randint(0, 9)

# Print a number
print(random_num_generator())"
Write a Python script to print the size and color of shoes in a list.,"def print_size_color(shoes):
    for size, color in shoes:
        print('size:', size, 'color:', color)

print_size_color(shoes)"
Write a python function that takes in two positive integer numbers and generate a random number between them.,"import random

def generate_random_number(min_range, max_range):
    return random.randint(min_range, max_range)

min_range = 3
max_range = 7
random_number = generate_random_number(min_range, max_range)
print(random_number)"
Create a program to print the multiplication table for a given number in Python.,"""""""
Create a program to print the multiplication table for a given number in Python
""""""

def multiplication_table(n):
    for i in range(1, 11):
        print(n, 'x', i, '=', n*i)

if __name__==""__main__"":
    multiplication_table(5)"
Write a Python program to retrieve the URLs of all links within a web page.,"import re 
import urllib.request 

#Enter the url to scrape
url = ""http://example.com/""

# Get the source code of the webpage
response = urllib.request.urlopen(url)
html = response.read()

# Extract all the links from the source code
links = re.findall('""((http|ftp)s?://.*?)""', str(html))

#Print the extracted links
for link in links:
 print(link[0])"
Develop a python program to convert a given temperature value from Fahrenheit to Celsius.,"def fahrenheit_to_celsius(temp):
    celsius = (temp - 32) * 5/9 
    return round(celsius, 2)"
Write a function to replace the last element of the list with another list.,"def replace_list(list1,list2):
 list1[-1:] = list2
 replace_list=list1
 return replace_list
"
Rewrite the following code to use list comprehension in Python.,big_list = [value for value in list if value % 2 == 0]
Write a function to sort counter by value.,"from collections import Counter
def sort_counter(dict1):
 x = Counter(dict1)
 sort_counter=x.most_common()
 return sort_counter"
Write a function in Python that constructs a URL based on user input. The function should take a string and an integer as arguments and should construct a URL with the string as the base followed by sequential numbers starting from the number provided in the integer argument.,"def construct_url(base, start_num):
 num = start_num
 while True:
 url = base + str(num)
 yield url
 num += 1"
Modify a given Python list by adding a certain value to each element.,"# Modifying the list by adding 'value' to each element
for i in range(len(list)):
    list[i] = list[i] + value

# Print the modified list
print(list)
# [11, 12, 13, 14, 15]"
Create a Python function to generate a histogram given a set of data.,"import matplotlib.pyplot as plt

def histogram (data): 
    plt.hist(data)
    plt.title(""Frequency Histogram"")
    plt.xlabel('Data')
    plt.ylabel('Frequency')
    plt.show()"
Write a Python function to sort this dictionary by its keys in descending order.,"def sort_dictionary_keys(d):
  return {k: d[k] for k in sorted(d, reverse=True)}"
Re-write the following code snippet in Python:,"nums = [1, 2, 3, 4, 5]
squared_nums = list(map(lambda num: num * num, nums))"
Write a python function to count occurences of a character in a repeated string.,"def count_Char(str,x): 
    count = 0
    for i in range(len(str)):  
        if (str[i] == x) : 
            count += 1
    n = 10
    repititions = n // len(str)  
    count = count * repititions  
    l = n % len(str)  
    for i in range(l): 
        if (str[i] == x):  
            count += 1
    return count  "
Create an object in Python that has two properties: name and year.,"class Person:
  def __init__(self, name, year):
    self.name = name
    self.year = year

person = Person(""Jane"", 1998)"
Write a Python script that takes a paragraph as input and prints the unique words in it.,"paragraph = ""This is a sample paragraph.""

# split the string into words
words = paragraph.split()

# sort the words alphabetically
words.sort()

# remove duplicates
unique_words = []
for word in words:
    if word not in unique_words:
        unique_words.append(word)

# print the unique words
print("", "".join(unique_words))"
Write a Python script to find the longest word in an array.,"def find_longest_word(arr):
 longest = ''
 for word in arr:
 if len(word) > len(longest):
 longest = word
 return longest

word = find_longest_word(arr_of_words)
print(word)  # Output: elephant"
Create a python program to convert a date from one format to another.,"import datetime

def convert_date_format(date_str, old_format, new_format): 
  dt_obj = datetime.datetime.strptime(date_str, old_format) 
  return dt_obj.strftime(new_format) 

print(convert_date_format(""May 14, 2020"", ""%b %d, %Y"", "" %d-%m-%Y""))"
Write a function in Python that merges two string and removes the duplicates.,"def merge_strings(string_1, string_2):
    s = set(string_1 + string_2)
    merged_string = ''.join(s)
    return merged_string

merged_string = merge_strings(string_1, string_2)
print(merged_string)

'''
Output:
onetwo
'''"
Write a python program to create a list containing the first 6 powers of 3.,"powers_list = [] 
for i in range(0,6): 
    powers_list.append(3**i) 
  
print(powers_list)"
"Given two lists A and B, write a python program to find the intersection of those two lists.","def intersection(A,B):
    result = [] 
    for element in A: 
        if element in B: 
            result.append(element)
    return result"
Generate a Python program that creates a list of five random integers between 1 and 100.,"import random

my_list = []
for i in range(5):
 my_list.append(random.randint(1,100))

print(my_list)"
Write a function to create a new tuple from the given string and list.,"def new_tuple(test_list, test_str):
  res = tuple(test_list + [test_str])
  return (res) "
Build a Python script to multiply two integer values.,"def multiply(a, b):
    return a * b

print(multiply(2, 3))"
Design a Flask application in Python to create an API endpoint for user registration.,"from flask import Flask, request

app = Flask(name)

@app.route('/users', methods=['POST'])
def create_user():
 data = request.json
 # Create the user
 # ...
 return {'status': 'user created'}

if name == 'main':
 app.run(debug=True)"
Write a Python program to split a list into two halves.,"def split_list(lst):
    half = len(lst) // 2
    return lst[:half], lst[half:]

left, right = split_list([14, 8, 3, 7, 5])
print (""Left list : "", left)
print (""Right list : "", right)"
"Generating natural language from a database in Python,","def generateNaturalLanguage(db): 
    sentence = ""The person is "" 
    sentence += db[""Name""] + "", "" 
    sentence += ""who is "" + str(db[""Age""]) + "" years old, "" 
    sentence += ""and works as a "" + db[""Occupation""] + "".""

    return sentence"
Generate a Python object literal from a dictionary.,"my_obj = {
    'a': 1,
    'b': 2,
    'c': 3
}"
Suggest a completion for the following method to reverse an array in python,"def reverse_array(arr):
    for i in range(len(arr)//2):
        arr[i], arr[len(arr)-i-1] = arr[len(arr)-i-1], arr[i]"
Optimize the following code using functional programming in Python.,"def add_odds(list):
  odd_list = filter(lambda num: num%2==1, list)
  return list(odd_list)"
Create a Python function that takes a list of strings and returns a dictionary with the strings as keys and their frequencies as values.,"def frequency(lst):
 result = {}
 for el in lst:
 if el in result:
 result[el] += 1
 else:
 result[el] = 1
 return result

print(frequency([""hello"", ""world"", ""hello"", ""goodbye"", ""world"", ""hello""]))
# Output: {'hello': 3, 'world': 2, 'goodbye': 1}"
Write a Python program to input three integers and determine their sum.,"def three_integers(x, y, z):
  return x + y + z

x = 5
y = 8
z = 10

print(three_integers(x, y, z))"
Write a python program to create a frequency table for the following list.,"from collections import Counter

data = [1, 8, 9, 11, 2, 10, 1, 5, 6, 8]
counter = Counter(data)

# print the frequency table
print('Frequency Table:')
for item in counter.most_common():
    print(item)"
Create a Python program to provide the sum of all numbers from 0 to N,"def sum_n(n):
    total = 0
    for i in range(n+1):
        total += i
    return total"
"Write a function in Python to generate an N by N matrix, filled with random integers between 0 and 9","import random

def generate_matrix(N):
    matrix = []
    for i in range(N):
        row = []
        for j in range(N):
            row.append(random.randint(0, 9))
        matrix.append(row)
    return matrix"
Compute the sum of list integers using Python.,"mylist = [3, 5, 7, 9]
total = 0

for item in mylist:
   total = total + item

print(""The sum of list items is:"", total)"
Improve the following Python code by making it faster and more efficient.,"def multiply(a, b):
    result = 0
    while a != 0:
        if a & 1:
            result += b
        a >>= 1
        b <<= 1
    return result"
Write a python program to generate a new list of numbers based on existing list which increase sequence by 5,"def generate_numbers(list):
    new_list = [] 
    for number in list:
        new_list.append(number + 5) 
    return new_list"
Develop a Python script to scrape all HTML elements from a given website.,"import requests
from bs4 import BeautifulSoup

# Request the HTML page
url = 'https://www.example.com/'
page = requests.get(url)

# Create the Beautiful Soup object
soup = BeautifulSoup(page.content, 'html.parser')

# Fetch all HTML elements
elements = soup.find_all()

# Output elements
for element in elements:
    print(element)"
Write a Python program to generate a password with a given length and characters.,"import random

def generate_password(length, characters):
    password = ''
    for i in range(length):
        password += random.choice(characters)
    return password

print(generate_password(10, 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'))"
"Compute the Fibonacci sequence in Python, storing each value in a list.","def fibonacci(num):
   fib_list = [0, 1]
   if num == 1:
      return fib_list[:1]
   elif num == 2:
      return fib_list
   else:
      for i in range(2, num):
         fib_list.append(fib_list[i-1] + fib_list[i-2])
      return fib_list
 
print(fibonacci(7))"
Create a Python function for computing the Fibonacci sequence up to the nth number.,"def fibonacci(n):
    a, b = 0, 1
    for _ in range(n):
        a, b = b, a + b
    return a

print(fibonacci(10)) # outputs 55"
Develop a Python program to print out the multiplication table of a given number.,"def print_multiplication_table(num):
    for i in range(1, 11):
        print(f""{num} x {i} = {num*i}"")"
Create a Python program to optimize the running time of a program using memoization.,"def memoize(f, k):
    memo = dict()
 
    def helper(x):
        if x not in memo:            
            memo[x] = f(x)
        return memo[x]
 
    return helper(k)"
Create a Python script that simulates an 8-sided dice roll.,"import random

def roll_dice():
    dice = random.randint(1, 8)
    return dice

dice = roll_dice()
print(f""You rolled a {dice}"")"
Construct a function in Python that sorts a list of tuples by the second element of the tuple in ascending order.,"def sort_tuples(tuples):
    return sorted(tuples, key=lambda x: x[1])

print(sort_tuples(tuples))
# Output:  [(6, 2), (7, 3), (1, 5), (5, 4), (2, 8)]"
"Given a string, write a python program to print the next largest palindrome.","def next_largest_palindrome(num):
    # convert string to a number
    num = int(num)
    # increment number by 1
    num += 1
    while not is_palindrome(str(num)):
        # increment number by 1
        num += 1

    return num

def is_palindrome(num):
    return num == num[::-1]

print(next_largest_palindrome(""1234""))

# Output: 1331"
"In Python, write a function to create a dictionary using the given two lists.","def create_dict(keys, values):
    return {key: val for key, val in zip(keys, values)}"
"Write a Python class to represent a Dog with the following attributes: breed, weight and age.","class Dog:
  # Initialize the attributes 
  def __init__(self, breed='', weight=0, age=0):
    self.breed = breed
    self.weight = weight
    self.age = age
    
  # Print the object values
  def __str__(self):
    return f""{self.breed}, {self.weight}, {self.age}""

# Creating a new object
my_dog = Dog(""Labrador"", 30, 5)
print(my_dog)"
Create a function in Python to calculate the distance between two points.,"import math

def distance_between_points(x1, y1, x2, y2):
    return math.sqrt((x2 - x1)**2 + (y2 - y1)**2)
    
# Call the function
distance = distance_between_points(2, 7, 4, 9)
print(""The distance between the two points is"", distance)"
Write an app in any language that takes two integers as input and returns the greatest common divisor of the two numbers.,"JavaScript:

function gcd(a, b) {
 if (b === 0) return a;
 return gcd(b, a % b);
}

console.log(gcd(24,18)) // 6

Python:

def gcd(a, b): 
 if(b == 0): 
 return a
 else: 
 return gcd(b, a%b) 

print(gcd(24,18)) # 6"
Write a Python script that receives a string from the command line and prints out the string in reverse order.,"import sys

input_string = sys.argv[1]
print(input_string[::-1])"
Write a method in Python to display the contents of a dictionary.,"def display_dict(dictionary):
    for key, value in dictionary.items():
        print(f'{key}: {value}')"
Generate an edit script for transforming an input text.,"#!/usr/bin/env python

text1 = ""He went to the store""
text2 = ""She visited the store""

edited_text = text1[:2] + text2[2:]

print edited_text"
Write a function in Python to search a string for a specific pattern.,"def search_for_pattern(s, pattern):
    if pattern in s:
        return True
    else:
        return False

result = search_for_pattern(""abcxyzabc"", ""abc"")
print(result)"
Implement a decision tree model in Python to classify given data.,"#importing necessary libraries
from sklearn import tree
import numpy as np

#data
X = np.array([[0, 1, 0, 1, 0], [1, 0, 1, 0, 1]])
y = np.array([0, 1])

#model
clf = tree.DecisionTreeClassifier()
clf = clf.fit(X, y)

#predicting
x_test = np.array([[1, 0, 0, 0, 1]])
prediction = clf.predict(x_test)

#result
print(prediction)"
Write a correct Python program to find the sum of all the digits of an integer.,"def sum_of_digits(n):
   """"""Find the sum of all the digits of an integer n""""""
   s = 0
   while n:
       s += n % 10
       n //= 10
   return s"
Create a Python function that checks if a given string consists of all unique characters.,"def isUnique(s):
    # Create a list that contains all characters
    chars = []
    # Iterate through the string
    for char in s:
        # Check if the character is already in the list
        if char in chars:
            return False
        # Add character to the list
        chars.append(char)
    # Return True when the loop is finished
    return True"
Generate a code to implement a linear search algorithm in python.,"def linear_search(list_of_items, item_to_search):
    for items in list_of_items: 
        if items == item_to_search: 
            return list_of_items.index(item_to_search) 
    return -1"
"Design a class in Python for storing information about books. The class should contain fields for the book title, author, and year of publication.","class Book:
  
 def __init__(self, title, author, year):
 self.title = title
 self.author = author
 self.year = year
 
 def __str__(self):
  return f""{self.title} by {self.author} ({self.year})"""
"Using Python, create a dictionary with the list of elements in ""a"" and as the value, the list of elements in ""b"".","dict_1 = {1: [5, 6, 7, 8], 2: [5, 6, 7, 8], 3: [5, 6, 7, 8], 4: [5, 6, 7, 8]}"
"Given the following data, adjust the Python code so that it outputs a JSON representation of the data.","import json

data = [
  {
    ""id"": 5,
    ""name"": ""John""
  },
  {
    ""id"": 7,
    ""name"": ""Jack""
  },
  {
    ""id"": 9,
    ""name"": ""James""
  }
]

data_json = json.dumps(data, indent=4)
print(data_json)"
Implement a bubble sort algorithm in Python to sort a list of numbers from lowest to highest.,"def bubble_sort(array):
    for i in range(len(array)):
        for j in range(i + 1, len(array)):
            if array[i] > array[j]:
                array[i], array[j] = array[j], array[i]
    return array

arr = [5, 3, 1, 4, 7]
sorted_arr = bubble_sort(arr)
print(sorted_arr)"
Write a code in Python to print the following string:,"print(""Welcome to the amazing world of programming!"")"
Generate a Python code snippet to make a copy of a given list.,list_b = list_a[:]
Create a Python script to resolve a given web address.,"import socket

def resolve_domain(domain):
    try:
        addr = socket.gethostbyname(domain) # Resolve the address by DNS
        return addr
    except socket.gaierror: # Raise when the domain name not found
        return None"
Create a Python class for representing a vector as a list of three numbers.,"class Vector3D:
  def __init__(self, x, y, z):
    self.x = x
    self.y = y
    self.z = z"
Create a Python program to print out the given string in all uppercase.,"string = ""This is a test string""

print(string.upper())"
Create a python program that computes the sum of all the prime numbers lower than a given number,"def sum_prime_numbers(n):
    if n <= 1:
        return 0
        
    prime_sum = 0
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            prime_sum += i
            
    return prime_sum"
Generate a program in Python to calculate the factorial of an integer.,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)"
Compose a program in Python to generate a list of prime numbers in the range of 2-50.,"def generate_prime_list(max_num):
    prime_list = []
    for number in range(2, max_num + 1):
        for divider in range(2, number):
            if number % divider == 0:
                break
        else:
            prime_list.append(number)
    return prime_list

prime_list = generate_prime_list(50)
print(prime_list)"
Write a python program to compute the edit distance between two strings.,"def edit_distance(str1, str2): 
	m=len(str1) 
	n=len(str2) 
	dp= [[0 for x in range(n+1)] for x in range(m+1)] 
	
	for i in range(m+1): 
		for j in range(n+1): 
			if i==0: 
				dp[i][j] = j
			elif j==0: 
				dp[i][j] = i
			elif str1[i-1]==str2[j-1]: 
				dp[i][j] = dp[i-1][j-1] 
			else: 
				dp[i][j] = 1 + min(dp[i][j-1], dp[i-1][j], dp[i-1][j-1]) 
	return dp[m][n]"
Write a function to find the item with maximum occurrences in a given list.,"def max_occurrences(list1):
    max_val = 0
    result = list1[0] 
    for i in list1:
        occu = list1.count(i)
        if occu > max_val:
            max_val = occu
            result = i 
    return result"
Edit this Python program to make the output more accurate,"def calculate_average(numbers):
    total = 0
    for n in numbers:
        total += n
    return float(total) / len(numbers) if len(numbers) > 0 else 0"
Construct a Python script to normalize a given vector.,"def normalize_vector(v):
  norm = 0
  for x in v:
    norm += x**2
  norm = norm**0.5
  for i in range(len(v)):
    v[i] = v[i] / norm
  return v

result = normalize_vector([2, 3, 4])
print(result) # [0.37139068, 0.55708601, 0.74278135]"
Write a python function to count the number of digits of a given number.,"def count_Digit(n):
    count = 0
    while n != 0:
        n //= 10
        count += 1
    return count"
Create a python program to print the total number of vowels in a given string,"def count_vowels(string):
    count = 0
    for character in string:
        if character in 'aeiouAEIOU':
            count += 1
    return count"
Generate an algorithm in Python to measure the time taken by a function to execute.,"import time

def measure_time(): 
    start_time = time.time() 
    # run your code 
    end_time = time.time() 
    time_taken = end_time - start_time
  
    return time_taken

time_taken = measure_time() 
print (""Time taken in seconds: "",time_taken)"
Write a Python function to find the sublist with the maximum sum in a given list.,"def max_sum_sublist(list_a):
 start = 0
 end = 0
 max_sum = 0
 
 current_sum = 0
 for i in range(len(list_a)):
  current_sum += list_a[i]
  if current_sum < 0:
   current_sum = 0
   start = i + 1
  if current_sum > max_sum:
   max_sum = current_sum
   end = i
 
 return list_a[start:end+1]
 
max_sum_sublist(list_a)"
Create a program in Python to calculate the factorial of any given non-negative number n.,"def factorial(n):
  factorial = 1
  while n > 0:
    factorial *= n
    n -= 1
  return factorial"
Create a program in Python that takes a given string and returns a dictionary whose keys are the words in the string and values are the number of occurances of each word.,"def word_count(string):
 count = {}
 string = string.split()

 for word in string:
 if word in count:
 count[word] += 1
 else:
 count[word] = 1

 return count

print(word_count(""Hello world, This is me""))"
Create a class in Python that has five methods:,"class MyClass:
    def __init__(self):
        pass

    def method1(self):
        pass

    def method2(self):
        pass

    def method3(self):
        pass

    def method4(self):
        pass

    def method5(self):
        pass"
Create a basic REST API endpoint with Python's Flask-Restful library that returns the sum of two numbers when the endpoint is visited.,"from flask import Flask
from flask_restful import Resource, Api

app = Flask(__name__)
api = Api(app)

class Sum(Resource):
 def get(self, a, b):
 return {'sum': a + b}

api.add_resource(Sum, '/sum/<int:a>/<int:b>')

if __name__ == '__main__':
 app.run()"
Create a for-loop in Python to print out all the characters in the string “Hello World!”,"myString = ""Hello World!""
for x in myString:
  print(x)"
Develop a Python script that automates a set of shell commands.,"import subprocess

# Define list of shell commands
commands = [
    ""./ls -l"",
    ""./cd project"",
    ""./mkdir test"",
    ""./ls -l""
]

# Execute each shell commands
for command in commands:
    subprocess.run(command, shell=True)"
Establish a Python program to replace all the words in a given sentence by the first letter of the respective words.,"def replace_with_first_letter(sentence):
    words = sentence.split()
    result = [word[0] for word in words]
    return ''.join(result)

print(replace_with_first_letter(""Hello World"")) # Output: HW"
Define a Python list containing the numbers from 0 to 10.,"numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
Generate a program to extract the substring from a given string,"def extract_substring(string, start, end):
    substr = string[start : end]
    return substr

string = 'Python is fun'
start = 7
end = 11

print(extract_substring(string, start, end))"
Create a class in Python to represent a Person.,"class Person:
    # constructor
    def __init__(self, name, age, gender):
        self.name = name
        self.age = age
        self.gender = gender

# creating a person
person1 = Person(""John Doe"", 35, ""Male"")

# printing the details
print(""Name:"", person1.name)
print(""Age:"", person1.age)
print(""Gender:"", person1.gender)"
Implement a Python function for finding the difference between two lists.,"def difference(list1, list2):
    difference_set = set(list1) - set(list2)
    return list(difference_set)

list1 = [1, 2, 3, 4]
list2 = [2, 3, 4, 5]

difference = difference(list1, list2)
print(difference)

# Output:
# [1]"
Implement a function in Python that takes a list of strings and returns a new list of strings containing all words that start with an uppercase letter.,"def upper_words(list):
    result = []
    for word in list:
        if word[0].isupper():
            result.append(word)
    return result"
"Edit the program in Python, so it prints out the sum of the list of numbers and the average","arr = [10, 15, 20, 25]

totalSum = 0
for x in arr:
    totalSum += x

print(""Sum of the list: ""+str(totalSum)) 
print(""Average of the list: ""+str(totalSum/len(arr)))

Output:
Sum of the list: 70
Average of the list: 17.5"
Write a Bash script to install the latest version of Python 3.,"# update package manager
sudo apt-get update

# install latest version of Python 3
sudo apt-get install python3

# check version of python installed
python3 --version"
Create a Python method that takes in an array of strings and returns a string that includes all the strings in the array combined into a single string.,"def combine_strings(strings): 
    return ' '.join(strings)"
Edit the following python code to prompt the user to enter the value of radius to calculate the area of a circle.,"# Calculate area of a circle

Pi = 3.14

# Get radius from user
radius = float(input(""Please enter the radius of the circle: ""))

# Calculate the circle area
area = Pi*radius**2

# Print the area
print(""The area of the circle is:"", area)"
Create a simple web server using Flask in Python.,"from flask import Flask 

app = Flask(__name__) 

@app.route('/') 
def hello(): 
  return 'Hello World!'

if __name__ == '__main__': 
    app.run()"
"Using the input provided, build a Python dictionary with the number as the key and its square as the value.",square_dict = {number:number**2 for number in numbers}
Generate a Python program that prompts the user to enter a three-digit integer.,"number = int(input(""Please enter a 3-digit integer: ""))"
Create a program in Python to check if a given list is a subsequence of another given list,"def is_subsequence(sub_list, main_list):
    i, j = 0, 0
    n1, n2 = len(sub_list), len(main_list)
    while i < n1 and j < n2:
        if sub_list[i] == main_list[j]:
            i += 1
        j += 1
    return i == n1"
Develop a python program to filter a provided array of strings and return only those strings that are longer than 3 characters.,"def filter_long_words(words):
 filtered_words = []
 
 for word in words:
  if len(word) > 3:
   filtered_words.append(word)
   
 return filtered_words
 
words = ['Cat', 'Dog', 'Bird', 'Fish', 'Turtle']
long_words = filter_long_words(words)
 
print(long_words) # Output: ['Bird', 'Fish', 'Turtle']"
Create a Python program to take two numbers as input and list their lowest common multiple?,"def LCM(x, y):
   if x > y:
       z = x
   else:
       z = y

   while(True):
       if((z % x == 0) and (z % y == 0)):
           lcm = z
           break
       z += 1

   return lcm

a = 15
b = 20
print(LCM(a, b))"
"Write a function to remove sublists from a given list of lists, which are outside a given range.","def remove_list_range(list1, leftrange, rigthrange):
   result = [i for i in list1 if (min(i)>=leftrange and max(i)<=rigthrange)]
   return result"
Create a program in Python to generate and print all possible permutations of a given set of characters.,"import itertools
 
def permutations(characters):
 permut = itertools.permutations(characters)

 for p in list(permut): 
 print("""".join(p))

# Usage
characters = ['A', 'B', 'C']
permutations(characters)

# Output
ABC
ACB
BAC
BCA
CAB
CBA"
Create a class in Python which calculates the area of a rectangle.,"class Rectangle: 
    # constructor 
    def __init__(self, length, width): 
        self.length = length 
        self.width = width 

    # member function 
    def calculate_area(self): 
        return self.length * self.width 

# creating an instance 
rect1 = Rectangle(5, 6) 

# call member function of the class 
print(""Area of rectangle is:"", rect1.calculate_area())"
Write an algorithm in Python that takes an array of integers as input and checks if it is a palindrome.,"def is_palindrome(arr):
    mid = len(arr) // 2 
    for i in range(mid):
        if arr[i] != arr[-i - 1]:
            return False
    return True

result = is_palindrome([1, 2, 3, 4, 3, 2, 1])
print(result) # True"
Create a program in Python that will find all the prime factors of a number,"def prime_factors(n):
    factors = []
    i = 2
    while n > 1:
        while n % i == 0:
            factors.append(i)
            n /= i
        i += 1
    return factors"
Write a Python function that joins two lists of different sizes in an alternating fashion.,"def joinLists(list1, list2):
 mergedList = []
 
 for i in range(max(len(list1), len(list2))):
  if i < len(list1):
   mergedList.append(list1[i])
  if i < len(list2):
   mergedList.append(list2[i])
 
 return mergedList"
Write a Python program to apply a function to all the elements of a given list and return the mapped list.,"def applyFunc(lst, func):
    mapped_list = []
    for el in lst:
        mapped_list.append(func(el))
    return mapped_list

def square(x):
    return x*x

lst = [1, 2, 3, 4, 5]

print(applyFunc(lst, square))"
Create a Python function that takes a string and outputs the count of the number of uppercase letters in the string.,"def countUppercase(myStr):
    uppercaseCount = 0
    for l in myStr:
        if l.isupper():
            uppercaseCount+=1
    return uppercaseCount

print(countUppercase('Hello World'))"
Create a class in Python to store and manage a customer's orders.,"class Order:
    def __init__(self):
        self.id = None
        self.items = []
        self.quantities = []
        self.total_amount = 0
    
    def add_item(self, item, quantity):
        self.items.append(item)
        self.quantities.append(quantity)
        self.total_amount += item.price * quantity 
    
    def get_total_amount(self):
        return self.total_amount"
Upload a python program on GitHub which will print the total number of vowels in a given string.,"import re

def count_vowels(string):
    vowels = re.findall(r'[aeiou]', string, re.I)
    return len(vowels)

if __name__ == '__main__':
    string = ""Hello World!""
    print(""Number of vowels in the given string:"", count_vowels(string))"
Reverse an input string using Python.,"def rev_string(s): 
   return s[::-1] 
  
s = ""Hello World!""
print(rev_string(s))"
Write a python function to check whether the given number can be represented as difference of two squares or not.,"def dif_Square(n): 
    if (n % 4 != 2): 
        return True
    return False"
Can you provide a Python script to print the largest and smallest number from a given list?,"def largest_smallest(arr):
    max_num = arr[0]
    min_num = arr[0]

    for i in arr:
        if i > max_num:
            max_num = i
        if i < min_num:
            min_num = i

    print(""The largest number is"", max_num, ""and the smallest number is"", min_num)"
Write a function to check the occurrences of records which occur similar times in the given tuples.,"from collections import Counter 
def check_occurences(test_list):
  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))
  return  (res) "
Find a way to swap two values without using a temporary variable in Python.,"a, b = b, a"
"Write a Python program to calculate the sum of two given integers, but only if both of them are even.","def sum_of_two_ints(a,b): 
    if (a % 2 == 0 and b % 2 == 0): 
        return a+b 
    else: 
        return ""Wrong input""

print(sum_of_two_ints(num1,num2))"
Create a Python program that uses the Coinmarketcap API to track the prices of top 10 cryptocurrencies over a period of time.,"import requests
import pandas as pd

url = 'https://api.coinmarketcap.com/v1/ticker/?limit=10'
data = requests.get(url).json()

df = pd.DataFrame(data)
# select required column
df = df[['name', 'price_usd']]

# print the dataframe
print(df)"
Write a script in python that can take a magnitude and corresponding angle (in degrees) and convert it to vectors in three-dimensional space.,"import math

def magnitude_to_vector(magnitude, angle):
    x = magnitude * math.cos(math.radians(angle))
    y = magnitude * math.sin(math.radians(angle))
    z = 0
    
    return (x, y, z)

result = magnitude_to_vector(5, 90)

print(f""The vector is {result}"")"
Write a Python program to display a calendar showing the current month.,"import calendar
from datetime import date

today = date.today()

cal = calendar.month(today.year, today.month)
print(cal)"
Create a python program that splits a sentence into individual words and prints out the words in reverse order.,"s = 'This is an example sentence'

words = s.split(' ')
words.reverse()

for word in words:
    print(word)"
"Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.","import re
def text_match(text):
  patterns = 'a.*?b$'
  if re.search(patterns,  text):
    return ('Found a match!')
  else:
    return ('Not matched!')"
Code a function in Python to find the Fibonacci number at a given index.,"def fibonacci_at_index(index): 
    if index < 0: 
        return -1
    if index == 0 or index == 1: 
        return index 
    return fibonacci_at_index(index - 1) + fibonacci_at_index(index - 2) 

print(fibonacci_at_index(index)) # 5"
"Use Python to optimize a function f(x, y) so that it attains its maximum for any given set of x and y.","from scipy.optimize import fmin

def f(x, y):
 return 3*x**2 + 2*x*y + 5*y**2

x, y = fmin(f, 0, 0)

print(f'The maximum of f(x,y) is {f(x, y)} at (x, y) = ({x:0.5f}, {y:0.5f})')"
Consider the following python code. Write a code to modify this such that it generates the output shown.,"def get_year_from_date(date):
    """"""
    This function takes a string date in the form of a yyyy-mm-dd and returns the year as an integer
    """"""
    year = date.split('-')[0]
    return int(year)"
Create a Python program that shuffles the elements of an array.,"import random

def shuffleArray(arr):
    n = len(arr)

    for i in range(n-1, 0, -1):
        j = random.randint(0, i)
        arr[i], arr[j] = arr[j], arr[i] 
    
    return arr

arr = [""A"", ""B"", ""C"", ""D""]
shuffleArray(arr)
print(arr)"
"Develop an algorithm in Python for given an array containing n distinct numbers taken from 0, 1, 2, …, n, find the one that is missing from the array.","def missingNumber(arr): 
    n = len(arr) 
    total = (n + 1)*(n + 2)/2
    sum_of_arr = sum(arr) 
    return total - sum_of_arr 

arr = [2, 3, 1, 5, 4]
missing = missingNumber(arr) 
print(missing)"
Design a Python method to find the largest number in an array of integers.,"def find_largest_number(nums):
    biggest = nums[0]
    for num in nums:
        if num > biggest:
            biggest = num
    return biggest

nums = [-10, 10, 1, -100]
print(find_largest_number(nums))"
Design a Python program which sorts a list of integers from lowest to highest.,"def sort_list(list):
     for i in range(0, len(list)): 
          for j in range(0, len(list) - 1 - i): 
               if list[j] > list[j + 1]: 
                    list[j], list[j + 1] = list[j + 1], list[j]
     return list

list = [5, 2, 4, 1, 3]

sorted_list = sort_list(list)

print(sorted_list)"
Write a Python program to split a string on the first occurrence of a given substring.,"string_list = string.split(substring,1)
print(string_list)"
Write a Python code to detect the Odd or Even numbers in a given list.,"for num in list: 
    if num % 2 == 0: 
        print(num, ""is an even number"") 
    else: 
        print(num, ""is an odd number"")"
Optimize the given code in Python to reduce its complexity,"my_list = [1, 2, 3, 4, 5]
total = sum(my_list)

print(""Sum of all elements in given list:"", total)"
Create a Python program to calculate the total price of 5 items where each item has a price of $10 and a tax rate of 5%.,"total_price = 0
price_of_item = 10
tax_rate = 0.05

for i in range(5):
 total_price += price_of_item

total_price = total_price + (total_price * tax_rate)

print(total_price)"
Can you write a python program to identify the last index of a given element in a list?,"# Define the list
list_ = [2, 5, 9, 2, 4]
  
# Find the last index of element 2
last_index = len(list_) - list_[::-1].index(2) - 1
  
# Print the result
print(last_index)"
Classify the variable x in Python given the following: x = 2 + 4.,x is an integer.
Construct a program in Python to filter a list of stocks by price,"stocks = [{‘ticker’:’AAPL’,‘price’: 233.5}, {‘ticker’:’MSFT’,‘price’: 115.8}, {‘ticker’:’GOOGL’, ‘price’: 1234.5}]
price_limit = 100

filtered_stocks = [stock for stock in stocks if stock[""price""] > price_limit]

print(filtered_stocks)"
Create and display a multiplication table of 7 using a Python program.,"#Create and display a multiplication table of 7
 
#print table header
print(' 7 x Table')
  
#print table column header
print('  7  |  14  |  21  |  28  |  35  |  42  |  49  |  56  |')
  
#print table row
for num in range(1,10):
    row_num = 7 * num
    print(f'{row_num:4}  |', end=' ')
    
print()"
Generate a Python program to classify a given feature set into two classes,"def classify(features, class_labels):
    decision_boundary = 5 
    predictions = []
    for feature in features:
        if feature[0] > decision_boundary:
            predictions.append(class_labels[0])
        else:
            predictions.append(class_labels[1])
    return predictions"
Generate Python code to perform an action based on a given condition.,"user_input = input(""Enter a number:"")
if user_input.isdigit():
   print(""You have entered an integer."")"
Write a function in Python to evaluate an algebraic expression,"def evaluate_expr(expr,x,y):
    x = float(x)
    y = float(y)

    def eval_expr(expr):
        return eval(expr)

    evaluation = eval_expr(expr.replace(""x"", str(x)).replace(""y"", str(y)))
    return evaluation
 
exp = ""((x+y)^2)*(x+1)""
x = 2
y = 3
print(evaluate_expr(exp,x,y))"
Develop an algorithm to sort a list of numbers from low to high inPython.,"def sort_numbers(nums):
    for i in range(len(nums)):
        for j in range(i+1, len(nums)):
            if nums[i] > nums[j]:
                temp = nums[j]
                nums[j] = nums[i]
                nums[i] = temp
    return nums

print(sort_numbers([5, 7, 1, 6, 10, 4, 2]))"
Edit the following Python function to return a sorted list of the words in the given string.,"def get_words(text):
    words = text.split()
    return sorted(words)"
Write a Python code snippet to count the number of occurrences of a given letter in a string.,"letter = 's'
string = ""Mississippi""
count = 0
for char in string:
   if char == letter:
       count += 1
print(count)"
Edit the Python code given to detect errors.,"def add(x, y):
    # assert y is not zero
    assert y != 0, "" y must not be zero!""
    z = x + y
    return z"
Optimize the following Python code to minimize memory consumption and maximize speed.,"def setup_list():
    my_list = [[0] * 10000 for _ in range(10000)]
    return my_list"
Understand the meaning of the given data and create a classification model in Python.,"# Import necessary library 
from sklearn import svm

# Create a feature and label array 
X = [[1], [2], [3], [4], [5]] 
Y = [1,2,1,2,1]

# Set up the svm model 
clf = svm.SVC(kernel='linear')

# Train the model 
clf.fit(X, Y)

# Test the model 
predictions = clf.predict([[3]])
print(predictions)"
Design an algorithm in Python to check if a number is divisible by three.,"def is_divisible_by_three(num):
  if num % 3 == 0:
    return True
  return False"
Create a class in Python that can calculate the total price of items.,"class TotalPriceCalculator():
    def __init__(self):
        self.total_price = 0
    
    def add_item(self,price):
        self.total_price+=price
    
    def get_total_price(self):
        return self.total_price"
Design a Python script that prints out all the even numbers in a given list of numbers.,"# given list of numbers
nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# empty list for even numbers
even_list = []

# iterate over the list
for num in nums:
    # check if number is even
    if num % 2 == 0:
        # append number to even list
        even_list.append(num)

# print even numbers
print(even_list)"
Develop a Python code that takes in an array of integers and outputs the array sorted in descending order.,"def sort_descending(arr):
    arr.sort(reverse=True)
    return arr

arr = [9, 2, 7, 1]
res = sort_descending(arr) 
print (str(res))"
Write a Python program to find the index of the first occurrence of the given element in the given list.,"def find_element(inputlist, element):
    for i, num in enumerate(inputlist):
        if element == num:
            return i"
"Generate a Python program to compute the sum of the numbers in an array, after mapping each element to its square.","def sum_of_squares(myList):
    result = 0
    for num in myList:
        result += num**2
    return result

total = sum_of_squares(myList)
print(""Sum of Squares:"", total)"
Convert the following SQL query into a python pandas dataframe.,"import pandas as pd

# read the books table
df = pd.read_sql(""SELECT * from books"", connection)

# filter for rows with matching author
df_filtered = df[df['author'].str.contains(""Rowling"")]

# print the results
print(df_filtered)"
Develop a Python program which will take a string and print out the total number of characters in it.,"def num_chars(string):
    char_count = 0
    for i in string:
        char_count += 1
    print(""The number of characters in the string is"", char_count)"
Write a python program that takes a list and return a new list with even numbers.,"def get_even_numbers(list):
    # Write a python program that takes a list and return a new list with only even numbers.
    return [x for x in list if x % 2 == 0]
  
if __name__ == '__main__':
    list = [2, 3, 5, 7, 9, 10]
    print(get_even_numbers(list))
    # Output: [2, 10]"
Generate a code to optimize the following program for better performance in Python.,"import random

random_list = [random.randint(0, 10) for _ in range(10)]
unique_list = list(set(random_list))"
Generate a Python function to generate a sequence of numbers based on a given interval.,"def generate_sequence(start, end):
    return list(range(start, end + 1))"
Generate a voltage signal with random noise using a Python script.,"import numpy as np 

freq = 250 
amplitude = 1 

t= np.linspace(0, 1, 1000) 
voltage_signal = np.sin(2*np.pi*freq*t) + np.random.normal(0, 0.1, 1000)"
Write a Python program to combine two nested dictionaries into one.,"combined_dict = {**dict1, **dict2}"
Construct a python program to separate even and odd numbers from an array.,"def separate_even_odd(arr):
    even = []
    odd = []
    for num in arr:
        if num % 2 == 0:
            even.append(num)
        else:
            odd.append(num)
    return even, odd
 
even, odd = separate_even_odd([1, 2, 3, 4, 5, 6])
print('Even numbers:', even)
print('Odd numbers:', odd)"
"Write a Python program to generate a list containing all the linear combinations of `x` and `y`, where `x` and `y` are given as input.","x = [1, 2, 3]
y = [4, 5, 6]

combinations = [[i, j] for i in x for j in y]
print(combinations)"
Construct a program in Python to search for a given number in an array.,"def search(array, x):
	for i in range(len(array)):
		if array[i] == x:
			return i
	return -1"
Generate a Python function to find all anagrams of a given string in a given list of strings.,"def find_anagrams(string, words):
 anagrams = []
 for word in words:
  if sorted(word) == sorted(string):
   anagrams.append(word)
 return anagrams"
Edit this python code to reverse the function’s argument order.,"def multiply(y, x):
  return x*y"
Implement a function in Python for finding the maximum element in an array.,"def find_max(list):
    max_element = list[0]
    for element in list:
        if element > max_element:
            max_element = element
    return max_element

max = find_max(list)
print(max)"
Write a function that generates a random password of 8 characters in Python.,"import random 
  
def generate_password(): 
    password = """"
    characters = ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&*()_+""
    for i in range(0,8):
        password += random.choice(characters)
    return password"
Create a python script for calculating the mode of a given sequence of numbers,"def calculate_mode(sequence):
 counts = {}
 for num in sequence:
 if num in counts:
 counts[num] += 1
 else:
 counts[num] = 1
 
 max_count = 0
 mode_num = 0
 for key, value in counts.items():
 if value > max_count:
 max_count = value
 mode_num = key
 
 return mode_num"
Generate a Python code to execute the following logic,"def add_string(string):
    result = 0
    for char in string:
        result += ord(char)
    return result"
Generate a function in Python which takes two parameters and determines the greatest common divisor between the two numbers.,"def find_gcd(a, b): 
    if a == 0: 
        return b 
    if b == 0: 
        return a 
    if a == b: 
        return a 
    if a > b: 
        return find_gcd(a-b, b) 
    return find_gcd(a, b-a)"
Write a Python program that creates a new database and a new table in it.,"import mysql.connector

# Create a database connection
connection = mysql.connector.connect(
  host=""localhost"",
  user=""root"",
  passwd=""""
)

# Create a new database
cursor = connection.cursor()
cursor.execute(""CREATE DATABASE mydatabase"")

# Create a new table in the database
cursor.execute(""USE mydatabase"")
cursor.execute(""CREATE TABLE mytable (id INT, name VARCHAR(255), age INT)"")"
Generate a Python program to calculate the Gross Domestic Product (GDP) of a country.,"def calculate_GDP(consumption, investment, government_spending, export, import_):
    gdp = consumption + investment + government_spending + (export - import_)
    return gdp

consumption = 100
investment = 50
government_spending = 25
export = 20
import_ = 10

print(f""The GDP of the country is {calculate_GDP(consumption, investment, government_spending, export, import_)}."")"
Create a Python script to sort the following list in ABC order,"list = [3, 6, 9, 1, 4, 8]

list.sort()

print(list)"
Write a Python program to compare two unordered lists to see if they are equal.,"def compare_lists(list1, list2):
    if len(list1) != len(list2):
        return False
    if sorted(list1) == sorted(list2):
        return True
    return False"
Write a function to count number of lists in a given list of lists and square the count.,"def count_list(input_list): 
    return (len(input_list))**2"
Edit the following Python code to calculate the sum of all the elements in a two-dimensional array.,"arr = [[1,2,3], [4,5,6], [7,8,9]]

sum = 0

for row in arr:
 for col in row:
  sum = sum + col

print(""Sum:"", sum)"
Create a Python program to calculate the sum of natural numbers below a certain number.,"def sumNaturalNumbers(n): 
  sum = 0
  for i in range(1, n+1): 
    sum+=i 
  return sum
    
print(sumNaturalNumbers(100))"
Edit the following Python code so that it prints the sum of the list elements.,"list = [10, 20, 30, 40]

sum = 0
for i in list:
 sum += i

print(""The sum is"", sum)"
Write a Python program to display the powers of 2 up to the given power.,"# This code will display the powers of 2 up to a given power

# Get the input
power = 8

# Calculate the powers of 2 
for i in range(power+1):
    print(2**i, end=' ')

# Print a newline
print("""")"
Provide a Python program to generate the number of days in a given year.,"def days_in_year(year): 
    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): 
        return 366 
    else: 
        return 365"
"Create a SQLite table in Python to store information about books in a library. The table should include fields for title, author, year of publication, and number of copies.","import sqlite3

# connect to the database
conn = sqlite3.connect('library.db')
c = conn.cursor()

#create table
c.execute(""CREATE TABLE books (title TEXT, author TEXT, year INT, copies INT)"")

# save the changes
conn.commit()

# close the database connection
conn.close()"
Write a Python program to create a new list that contains all the elements of the given list multiplied by each other.,"def multiply(nums):
    result = []
    for i in range(len(nums)):
        for j in range(i+1, len(nums)):
            result.append(nums[i] * nums[j]) 
    return result"
Write a python function to find the average of cubes of first n natural numbers.,"def find_Average_Of_Cube(n):  
    sum = 0
    for i in range(1, n + 1): 
        sum += i * i * i  
    return round(sum / n, 6) "
"Write a function in Python that will take a string as input, reverse the order of the words, and return the new string.","def reverseString(string):
  words = string.split(' ')
  reversedString = []
  for i in range(len(words)-1, -1, -1):
    reversedString.append(words[i])
  return ' '.join(reversedString)
  
print(reverseString(""Hello World"")) # Output: World Hello"
Write a python code to calculate the total cost of a grocery bill.,"def total_cost(items):
    total = 0
    for item, price in items:
        total += price
    return total

if __name__ == '__main__':
    output = total_cost([(""apple"", 2.50), (""banana"", 3.00), (""avocado"", 1.80)])
    print(output)"
Write a python program to print out the numbers from 1 to 10.,"for i in range(1, 11):
    print (i)"
Program a python method to add a given number to each element of a given list.,"def add_number(numbers, number):
 result = []
 for x in numbers:
 result.append(x + number)
 return result"
Create a Python program to generate random passwords of 8 alphanumeric characters.,"import string
import random

def generate_password():
    letters = string.ascii_letters + string.digits
    return ''.join(random.choice(letters) for i in range(8))"
Implement a recursive function in Python that takes a (string) as input and returns a reversed version of the input string.,"def rev_string(input_str):
    if len(input_str) == 0:
        return input_str
    else:
        return rev_string(input_str[1:]) + input_str[0]"
Write a Python program to find the number of occurrences of a given element in an array.,"def countOccurrences(list, element):
    count = 0
    for i in range(len(list)):
        if list[i] == element:
            count += 1
    return count

if __name__ == '__main__':
    list = [1, 2, 5, 4, 1, 5]
    element = 5
    print(countOccurrences(list, element))"
Use the following data and create a python program to find the minimum value in the list.,"# find the minimum value using the min function
min_value = min(nums)

# print the minimum value
print(""The minimum value is: "",min_value)"
Use Python to modify a JSON object for specific key-value pairs.,"# Modify a JSON object

import json

object = {'name': 'Tom', 'age': 25, 'occupation': 'Data Scientist', 'hobbies': ['Reading', 'Badminton']}

if 'occupation' in object:
    object['occupation'] = 'AI Engineer'

if 'hobbies' in object:
    object['hobbies'].append('Cycling')

print(json.dumps(object,indent=2))"
Create a Python program to sort a list of numbers from lowest to highest.,"def sort_list(nums):
    for i in range(len(nums)):
        min_index = i
        
        for j in range(i+1, len(nums)):
            if nums[min_index] > nums[j]:
                min_index = j
        
        nums[i], nums[min_index] = nums[min_index], nums[i]
        
    return nums
    
print(sort_list([3, 7, 2, 1, 19]))

# Output: [1, 2, 3, 7, 19]"
Create a Python function to delete the last character of a given string.,"def delete_last_char(string):
    """"""Delete the last character of a given string.

    Args:
        string (str): The string to remove the last character from. 

    Returns:
        str: The string with the last character removed.
    """"""
    return string[:-1]

if __name__ == '__main__':
    string = ""Hello World!""
    result = delete_last_char(string)
    print(result)"
Write a python program for binary search,"def binarySearch(arr, target):
    left = 0
    right = len(arr) - 1

    while left <= right:
        mid = (left + right) // 2

        if arr[mid] == target:
            return mid
        elif arr[mid] > target:
            right = mid - 1
        else:
            left = mid + 1
    return -1"
Generate a Python dictionary that stores objects with unique values.,"unique_dict = {
  'alec' : 'alec',
  'bob'  : 'bob',
  'sara' : 'sara',
  'john' : 'john',
  'elon' : 'elon'
}"
"Given a list of numbers, write a Python program to find the element in the list having the highest value.","def find_max(list):
    max_value = list[0]
    for num in list:
        if num > max_value:
            max_value = num
    return max_value"
Create a web application in Python with Flask that has a homepage and a page that displays the current time.,"from datetime import datetime

from flask import Flask

app = Flask(__name__)

@app.route('/')
def index():
 return 'Homepage'

@app.route('/time')
def time():
 time = datetime.now().strftime('%H:%M:%S')
 return f'The current time is {time}.'

if __name__ == '__main__':
 app.run()"
Create a Python code to display the multiplication table for a number between,"for i in range(1, 11):
    print(""4 x"", i, ""="", 4*i)"
Write a Python program that performs linear regression. The program should generate a prediction given an input and a list of parameters.,"import numpy as np
 
def predict(x, params):
 x = np.array(x)
 params = np.array(params)
 
 y = 0
 for i in range(params.shape[0]):
 y += params[i] * x ** i
 
 return y
 
x = 5
params = [0.5, 1.2, 3.1]
 
y = predict(x, params)
print(y) # Output: 35.4"
Filter a string in Python by removing all alphabets and keeping only the numbers.,"def filter_string(str):
    str = ''.join(x for x in str if x.isdigit())
    return str  

my_string = ""hey3this5is4my2string1""
print(filter_string(my_string))"
Write a Python script to download the source code of a website.,"import requests

# send the request 
response = requests.get(""http://example.com"")

# get the source code of the website
data = response.text 

# write the source code into a file
with open('example_source.txt', 'w') as file:
 file.write(data)"
Create a program in Python that takes an input string and removes all duplicate characters.,"def removeDuplicates(str): 
 s = """"
for i in range(len(str)): 
 if str[i] not in s: 
  s += str[i] 
 return s

str = ""abracadabra""
print(""The output string is:"", removeDuplicates(str))"
Compute the Fibonacci sequence of numbers up to 10 terms using a recursive function in Python.,Function in Python to compute the Fibonacci sequence of numbers up to 10 terms using a recursive method.
Create a Python script that takes two string variables as inputs and prints out the shorter of the two.,"if len(a) < len(b):
    print(a)
else:
    print(b)"
Create a function in Python that takes a two-dimensional array with n rows and m columns and returns the transposed array.,"def transpose(matrix):
    num_rows = len(matrix)
    num_cols = len(matrix[0])
    transposed = [ [0 for j in range(num_rows)] for i in range(num_cols) ]
    for i in range(num_rows):
        for j in range(num_cols):
            transposed[j][i] = matrix[i][j]
    return transposed"
"For an existing Python program, write a function to sort a given list of numbers in ascending order.","def sort_list(numbers): 
 numbers.sort()
 return numbers

print(sort_list([4, 3, 2, 5, 1]))"
Create a Python function to establish a connection to a SQL database.,"import mysql.connector

def establish_connection(hostname, user, password):
    db = mysql.connector.connect(
        host=hostname,
        user=user,
        passwd=password
    )

    return db"
"Generate a piece of code, using Python, which would generate a random password string that contains only lowercase, uppercase, numerical and special characters.","import string
import random

def generate_password():
    chars = string.ascii_uppercase + string.ascii_lowercase + string.digits + string.punctuation
    return ''.join(random.choice(chars) for _ in range(8))

print(generate_password())"
Generate an HTML page using web scraping.,"One approach to generating an HTML page using web scraping is to use the BeautifulSoup library. BeautifulSoup is a Python library that can be used to parse HTML documents. After parsing the document, the parsed elements can be extracted and a new HTML page can be generated. The new HTML page can contain the same elements as the original page, or the elements can be formatted to create a new page with a different format."
Create an algorithm in Python to search a given list for a specific value.,"def search(lst, target):
 for i in range(len(lst)):
  if lst[i] == target:
   return i
 return -1

search([1, 4, 6, 8, 10], 8)  # Output: 3"
Create a Python function that takes a string as an input and returns the substring between the first and the last character.,"def get_substring(string):
  return string[1:-1]"
Create a Python script that prints out the sum of the first n even numbers.,"def sumOfEvenNumbers(n):
    sum = 0
    for i in range(1, (n * 2) + 1):
        if i % 2 == 0:
           sum += i
    return sum

print(sumOfEvenNumbers(5))"
Create a Python function that takes an integer as an input and returns all positive integers less than the input number.,"def get_pos_int(num):
    pos_ints = []
    for i in range(num):
        if i > 0:
            pos_ints.append(i)
    return pos_ints

pos_ints = get_pos_int(10)
print(pos_ints)"
Write a Python code to count the number of matching elements between two lists,"def count_matches(list1, list2):
    count = 0
    for elem in list1:
        if elem in list2:
            count += 1 
    return count"
Optimize a Python function to get the smallest execution time possible.,"def func(a, b, c):
    return a*b + a*c + b*c    # Use an optimized expression for lowest execution time"
Write a function to find the nth jacobsthal-lucas number.,"def jacobsthal_lucas(n): 
	dp=[0] * (n + 1) 
	dp[0] = 2
	dp[1] = 1
	for i in range(2, n+1): 
		dp[i] = dp[i - 1] + 2 * dp[i - 2]; 
	return dp[n]"
Write a Python program that takes the following dictionary as an argument and returns the count of each item,"def item_counts(fruits):
    counts = {}
    for k, v in fruits.items():
        counts[k] = v
    return counts"
Create a class in Python that optimizes its fit by using the L1 regularization method.,"import numpy as np

class L1Model:
    def __init__(self):
        self.coef_ = None
        
    def fit(self, X, y):
        n, m = X.shape
        w = np.random.randn(m)
        lr = 10e-5
        for t in range(1000):
            p = np.dot(X, w)
            grad = 2 * np.dot(X.T, p - y) + lr * np.sign(w)
            w = w - lr * grad
        self.coef_ = w"
Create a python program to capitalize words in a string.,"def capitalize_words(string):
    words = string.split(' ')
    capitalized_words = [word.capitalize() for word in words]
    return ' '.join(capitalized_words)

print(capitalize_words('enter the dragon'))"
Generate a Python program that takes in a string and replaces all vowels with underscores.,"def replace_vowels(string): 
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    new_string = """"
    for letter in string:
        if letter.lower() in vowels:
            new_string += ""_""
        else:
            new_string += letter
    return new_string

result = replace_vowels(""Hello World"")
print(result)"
Create a list in Python containing odd integers from 1 to 30.,"odd_nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]"
Create a program in Python that prints out a list of all items located within a specified directory.,"import os

for item in os.listdir():
    print(item)"
Identify the most used programming language in the following data.,"most_used_language = ""Python"""
Program a python code to convert Celsius to Fahrenheit.,"def celsiusToFahrenheit(temp):
    return round((temp * 9/5) + 32, 2)"
Create a Python program to check if a triangle is valid or not with the given values for its three sides.,"def is_valid_triangle(a, b, c): 
  
    # triangle should have 3 sides 
    if a + b <= c or a + c <= b or b + c <= a: 
        return False
  
    # sum of any two side should always be greater than third side 
    if a + b > c and a + c > b and b + c > a: 
        return True
    return False

is_valid_triangle(2, 2, 3)"
Edit the following Python program to print out the key-value pair of a dictionary.,"d = {'Name': 'John', 'Age': 30, 'City': 'New York'}
 
for key, value in d.items():
    print(f'{key}: {value}')"
Write a python program to print the least common multiple of two integers,"def lcm(x, y):
  if x > y:
    greater = x
  else:
    greater = y
  while(True):
    if((greater % x == 0) and (greater % y == 0)):
      lcm = greater
      break
    greater += 1
  return lcm"
Write a Python program that can accept an arbitrary number of parameters and print them all out together.,"def print_params(*args):
 print(args)"
Find the maximum value from a given list of numbers in Python.,"def find_max(nums):
    max = nums[0]
    for num in nums[1:]:
        if num > max: 
            max = num
    return max

print(find_max([12, 34, 23, 45, 13, 65, 66]))"
Write a Python program to validate the given password according to the given criteria.,"def validate_password(password):
    if len(password) < 8:
        return False
    if not any(c.isupper() for c in password):
        return False
    if not any(c.isdigit() for c in password):
        return False
    return True"
Write a function to concatenate the given two tuples to a nested tuple.,"def concatenate_nested(test_tup1, test_tup2):
  res = test_tup1 + test_tup2
  return (res) "
Create a Python program to print a table of numbers (1-10) and their squares.,"# Print a table of numbers 1 to 10
for i in range(1, 11):
 print('{0:2d} {1:3d} {2:4d}'.format(i, i**2, i**3))

# Output:
 1   1    1
 2   4    8
 3   9   27
 4  16   64
 5  25  125
 6  36  216
 7  49  343
 8  64  512
 9  81  729
10 100 1000"
Write a python function to find the minimum difference between any two elements in a given array.,"def find_Min_Diff(arr,n): 
    arr = sorted(arr) 
    diff = 10**20 
    for i in range(n-1): 
        if arr[i+1] - arr[i] < diff: 
            diff = arr[i+1] - arr[i]  
    return diff "
Generate code in Python to remove a given element from a given list.,"list = [2, 3, 4, 5, 6]

list.remove(5)"
Edit the following line of code in Python to print out the result.,print(3 + (5 * 2))
Write a Python program to replace each character of a given string with the next letter in the alphabet.,"def replace_letter(string):
 result = ''
 for c in string:
 if c == 'z':
 result += 'a'
 else:
 result += chr(ord(c)+1)
 return result"
Can you create a Python program to sort the values in a dictionary by their keys?,"d = {'Shiva': 23, 'Rohan': 12, 'Amit': 79} 

sorted_dict = dict(sorted(d.items(), key = lambda x : x[0])) 

print(""Sorted Dictionary :"", sorted_dict)"
"Create a Python class called Employee that represents an employee in an organization. The Employee class should have instance attributes for the employee’s name, job title, and job number.","class Employee:
    def __init__(self, name, job_title, job_number):
        self.name = name
        self.job_title = job_title
        self.job_number = job_number"
Optimize a given Python program by remove any code that causes unnecessary performance reduction.,"cumulative_sum = 0
while i > 0:
    cumulative_sum += (i % 10) # add the last digit of the number to the cumulative sum
    i //= 10 # truncate the last digit of the number

# Output 
#cumulative_sum will hold the sum of all the digits in the number"
Develop an algorithm in Python for inserting an element into a given sorted array.,"def insertSort(sortedArray, x): 
    n = len(sortedArray) 
    sortedArray.append(x) 
    for i in range(n-1, -1, -1): 
        if sortedArray[i] > x: 
            sortedArray[i + 1] = sortedArray[i] 
            sortedArray[i] = x 
    return sortedArray

print(insertSort(sortedArray, x))"
Generate a Python program to print out all divisible numbers between 0 and a given number,"def print_divisible_numbers(n):
    for i in range(1, n + 1):
        if i % 3 == 0 or i % 5 == 0:
            print(i)"
Create a Python program that uses regular expression to find and extract certain information from a text.,"import re

text = ""The customer's address is 123 Main Street, Anytown, USA.""

address_pattern = re.compile(r'(\d+\s*(?:[A-Za-z]+\s*)+),\s*([A-Za-z\s]+),\s*([A-Z]{2})')

match = address_pattern.search(text)

if match:
 street = match[1]
 city = match[2]
 state = match[3]

print(f'{street}, {city}, {state}')"
"Write a function in Python that will take two inputs, an array of strings and a letter, and returns the number of elements in the array that contain the given letter.","def count_elements_with_letter(arr,letter):
   count = 0
   for a in arr:
      if letter in a:
         count += 1 
   
   return count 

count_elements_with_letter(['cat','dog','fish','apple'], 'a')
# output: 3"
"Create a web scraper in Python that scrapes the website ""example.com"" and prints out the content of all the h1 tags.","import requests
from bs4 import BeautifulSoup

response = requests.get('https://example.com/')
soup = BeautifulSoup(response.text, 'html.parser')

for h1 in soup.find_all('h1'):
 print(h1.text)"
Use Python to create an encryption program that swaps out one character with another character.,"def encrypt(message):
    chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    encrypted = ''

    for char in message:
        if char in chars:
            char_index = chars.find(char)
            new_char_index = (char_index + 13) % 26
            encrypted += chars[new_char_index]
        else:
            encrypted += char
    return encrypted

# test
print(encrypt('HELLO'))"
Write a Python algorithm to print out all prime numbers between 2 and a given number.,"def print_prime_numbers(n):
    primes = []
    for i in range(2, n + 1):
        prime = True
        for j in range(2, i):
            if i % j == 0:
                prime = False
                break
        if prime:
            primes.append(i)
    return primes

if __name__ == '__main__':
    result = print_prime_numbers(20)
    print(result)"
"Generate sample data for a web application using Python's faker library. The output should contain three columns of data: name, email, and age.","from faker import Faker

fake = Faker()
for _ in range(10):
 print(fake.name(), fake.email(), fake.random_int(min=18, max=60))"
Write a Python function for calculating factorials.,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)

number = 4
result = factorial(number)
print(result)"
Create a Python program that finds the prime factors of a given number.,"def prime_factors(n):
    factors = []
    divisor = 2 
    while n > 1:
        if n % divisor == 0:
            factors.append(divisor)
            n = n/divisor
        else:
            divisor += 1
    return factors"
Write a Python program to extract the first letter of each word in a sentence and print it as an acronym.,SIS
Write a method in Python to calculate the sum of two numbers without using any built-in functions.,"def sum_two_numbers(a, b):
    result = 0

    for i in range(b):
        result += a

    return result

a = 3
b = 5

print(sum_two_numbers(a, b))"
"Given a set of numbers, construct a Python program to calculate the sum of all prime numbers in the set.","def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True
 
def sum_primes(nums):
    prime_sum = 0
    for num in nums:
        if is_prime(num):
            prime_sum += num
    return prime_sum
 
nums = [2, 3, 9, 14]
 
result = sum_primes(nums)
print(result)"
Create a Python script to generate 10 random hexadecimal numbers.,"import random

def generate_hex_numbers(n): 
    hex_numbers = [format(random.randint(0, 16**8 - 1), 'x') for _ in range(n)] 
    return hex_numbers

print(generate_hex_numbers(10))"
Design a web application using python and Flask to save user data submitted via a form.,"from flask import Flask
from flask import render_template
from flask import request

@app.route('/')
def form():
    return render_template('form.html')

@app.route('/', methods=['POST']
def save_data():
   name = request.form['name']
   age = request.form['age']
   # Save user data to database 
   return render_template('success.html')"
Create a function in Python to compute the factorial of a number.,"def factorial(n):
    if n == 1:
        return 1
    else:
        return n * factorial(n-1)"
"Using Python, make a program which will generate a random password of a given length.","import string
import random

def get_password(length):
    alphabet = string.ascii_letters + string.digits
    password = ''.join(random.choice(alphabet) for i in range(length))
    print (password)

get_password(7)"
Consume a REST API and return the response in Python.,"import requests

#specify the base URL of the API
base_url = 'http://example.com/api/'
 
#make the request and receive the response
response = requests.get(base_url)
 
#parse the response JSON
data = response.json()"
Write a Python program to remove all elements of a given list except largest and smallest element.,"def get_min_max(numbers):
 max_num = max(numbers)
 min_num = min(numbers)
 new_list = []
 for i in numbers:
  if i == max_num or i == min_num:
   new_list.append(i)
 return new_list"
Generate a Python script using Scikit-Learn for performing k-means clustering on a given dataset.,"import numpy as np
from sklearn.cluster import KMeans

data = np.array([[x1, x2, x3]]) #replace x1, x2 and x3 with the features in the dataset

kmeans = KMeans(n_clusters=3).fit(data)
clusters = kmeans.predict(data)"
Translate the following SQL query into Python code.,"import pandas as pd

df = pd.read_sql_query(""SELECT Customer_Name, COUNT(Order_Id) AS Number_of_Orders FROM Orders GROUP BY Customer_Name"", con)
result = df.to_dict('records')"
Design a function in Python to convert a given temperature in Celsius to Fahrenheit.,"def celsius_to_fahrenheit(degrees_c):
    return (degrees_c * 9/5) + 32"
"Generate a Python program to calculate the amount of time the user has been working on a specific task, given the start time and the current time.","import datetime

def get_time_difference(start_time, current_time):
    start_time = datetime.datetime.strptime(start_time, ""%H:%M%p"")
    current_time = datetime.datetime.strptime(current_time, ""%H:%M%p"")
    return current_time - start_time"
Generate a random number between 0 and 1 in Python.,"import random

randomNumber = random.random()
print(randomNumber)"
Design a program in Python which can generate unique alphanumeric IDs.,"import string
import random

def generate_alphanumeric_id(stringLength=8):
 """"""Generate a random string of letters and digits """"""
 lettersAndDigits = string.ascii_letters + string.digits
 return ''.join(random.choice(lettersAndDigits) for i in range(stringLength))

print (""Random ID is: "", generate_alphanumeric_id() )"
Create a function to calculate the dot product of two vectors in Python.,"def dot_product(v1, v2):
    return sum(x1*x2 for x1, x2 in zip(v1, v2))"
Use a regular expression to find all emails in a given string in Python.,"import re 

pattern = ""[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+""

result = re.findall(pattern, myString)

print(result) # Output will be [""joe@example.com""]"
"Create a Python function which takes a list, and prints out the third item of the list.","def thirdElement(mylist):
    """""" Print out the third element of the list. """"""
    print(mylist[2])

thirdElement(mylist)"
"Create a Python script to generate a random password with a mix of alphabets, numbers and symbols at least 8 characters long.","import string
import random

def generate_password(length):
    password_characters = string.ascii_letters + string.digits + string.punctuation
    password = ''.join(random.choice(password_characters) for i in range(length))
    return password

password = generate_password(8)
print(password)"
Create a for loop in python to print all the items in the given list.,"for item in List:
    print(item)"
Construct a Python application to compare the values of two given dictionary.,"def compare_dicts(dict1, dict2):
    if len(dict1) != len(dict2):
        return False
    
    for key, value in dict1.items():
        if key not in dict2 or dict2[key] != value:
            return False
    
    return True"
How would you improve the following Python code to make it more efficient?,"def calculate_square(numbers):
    return [number * number for number in numbers]"
Complete this Python code to to generate a random password using a given length.,"import string
import random

def generate_password(length):
    password_characters = string.ascii_letters + string.digits + string.punctuation 
    password = ''.join(random.choice(password_characters) for i in range(length))
    return password

print(generate_password(length))"
Create a Python function that takes a string of text as the input and returns a dictionary containing count of each character in the text.,"def char_count(text):
  chars = {}
  for char in text:
    if char in chars:
      chars[char] += 1
    else:
      chars[char] = 1
  return chars"
Write two Python functions. The first function should take in a list of strings and return the most common string. The second function should take in a list of integers and return the most common integer.,"def most_common_string(word_list):
    return max(set(word_list), key=word_list.count)

def most_common_integer(int_list):
    return max(set(int_list), key=int_list.count)"
"Design a class in Python to store a student's name, age and subject of interest.","class Student:
    def __init__(self, name, age, subject):
        self.name = name
        self.age = age
        self.subject = subject"
Create a Python program that can generate a wide variety of random passwords.,"import random
import string

# password length
length = int(input(""Enter password length: ""))

# alphabets & numbers
alphaNum = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'

# generate password
password = """".join([random.choice(alphaNum) for _ in range(length)])

print(""Password: "", password)"
Create a Python program to generate an array of all possible unique combinations of 3 elements from a given array.,"def combinations(arr):
 sol = []
 
 for i in range(len(arr)):
 for j in range(len(arr)):
 for k in range(len(arr)):
 if i != j and j != k and k != i:
 sol.append([arr[i], arr[j], arr[k]])
 
 return sol

print(combinations([1, 2, 3, 4])) # Outputs [[1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4]]"
Create a Python script to calculate the average age of a list of people.,"total = 0
for person in people:
 total += person['age']

average = total / len(people)

print(f'Average age is {average}') // 24.4"
Write a Python script to calculate the perimeter of a triangle given 3 sides.,"def calculate_perimeter(side1, side2, side3):
 perimeter = side1 + side2 + side3
 return perimeter

side1 = 10
side2 = 12
side3 = 14

perimeter = calculate_perimeter(side1, side2, side3)
print(""The perimeter of the triangle is:"", perimeter) # Output: 36"
Create an algorithm using Python to detect plagiarism between two given text documents.,"def detect_plagiarism(text1, text2):
    # your code goes here
    
    return is_plagiarized"
Edit the given Python code to format the output as a table using tabulate.,"import tabulate

fruits = [""apple"", ""orange"", ""pineapple"", ""melon""] 
table = [(fruit,) for fruit in fruits] 
print(tabulate.tabulate(table, headers=[""Fruits""])) 
# Output: 
# Fruits
# apple
# orange
# pineapple
# melon"
Create a web crawler in Python to extract all the links from a given website.,"import urllib 
import re

#Extracting Links from a given website
def extract_links(url):
  website = urllib.urlopen(url)
  html = website.read()
  links = re.findall('""((http|ftp)s?://.*?)""', html)
 
  #Loop through links and print
  for link in links:
    print (link[0])

url = 'http://www.example.com/'
extract_links(url)"
Create a function that implements a linear search algorithm in Python.,"def linearSearch(arr, x): 
    for i in range(len(arr)): 
        if arr[i] == x: 
            return i 
    return -1"
Generate all possible permutations of a given string in Python.,"import itertools

def permutations(string): 
    return list(itertools.permutations(string))"
"Design a Python program that asks for a string, then creates a new string that is the reverse of the original, and then prints the new string.","value = input(""Please enter a string:"")
print(""The reversed value is:"", value[::-1])"
Create a Python function to calculate the Fibonacci sequence with a given number as the input.,"def fibonacci_sequence(num): 
 
    a = 0
    b = 1
 
    if num < 0: 
        print(""Incorrect input"") 
    elif num == 0: 
        return a 
    elif num == 1: 
        return b 
    else: 
        for i in range(2,num): 
            c = a + b 
            a = b 
            b = c 
        return b 
 
print(fibonacci_sequence(num))"
Write a Python script that takes two strings as input and prints the string which is obtained by combining the two strings in lexical order.,"def combine_strings(s1, s2):
 if s1 < s2:
 print(s1+s2)
 else:
 print(s2+s1)

combine_strings(""Hello"", ""World"")
# Output: HelloWorld"
"Create a Python class named Person with private variables for first name, last name, age, and gender. The class should also have a method called ""say_hello"" that prints the person's name.","class Person:
 def __init__(self, first_name, last_name, age, gender):
 self.__first_name = first_name
 self.__last_name = last_name
 self.__age = age
 self.__gender = gender

 def say_hello(self):
 print(""Hello, my name is %s %s."" % (self.__first_name, self.__last_name))"
Create a program in Python to delete all duplicates from a given list.,"def remove_duplicates(list):
    new_list = []
    for e in list:
        if e not in new_list:
            new_list.append(e)
    return new_list

list = [1, 2, 3, 1, 3, 4]
list = remove_duplicates(list)
print(list)"
Identify the language used to write the following program:,Python.
Optimize this given Python code using list comprehension.,"word_list = ['hello', 'world', 'good', 'morning']

word_list = [word.upper() for word in word_list]"
"Given a list of integers, write a Python program to find the largest and second largest numbers in the list.","def find_largest_and_second_largest(nums):
    max1 = float('-inf')
    max2 = float('-inf')
    for n in nums:
        if n > max1:
            max2 = max1
            max1 = n
        elif n > max2 and n != max1:
            max2 = n
    return max1, max2"
Write a function to find the first duplicate element in a given array of integers.,"def find_first_duplicate(nums):
    num_set = set()
    no_duplicate = -1

    for i in range(len(nums)):

        if nums[i] in num_set:
            return nums[i]
        else:
            num_set.add(nums[i])

    return no_duplicate"
"Using Python, construct an algorithm that creates a dictionary with the numbers 1-5 as keys and the square of each number as its value.","numbers_dictionary = {}
for i in range(1,6): 
 numbers_dictionary[i] = i*i

print(numbers_dictionary)"
Rewrite a Python code snippet to take advantage of vectorization.,"# Compute list of squared values using vectorization
my_list = [1,2,3,4,5]

out_list = [pow(element,2) for element in my_list]"
"What is the Python code to display the top five random numbers in the range [1, 15]","import random

for _ in range(5):
    print(random.randint(1, 15))"
Write a Python program that calculates the greatest common divisor of two numbers and displays the result.,"def gcd(a, b):
    if b == 0: 
        return a 
    return gcd(b, a % b) 
  
num1 = 10
num2 = 20

gcd_value = gcd(num1, num2)

print(f'The greatest common divisor of {num1} and {num2} is {gcd_value}')"
Write a Python function to compute the maximum product of two elements in an array.,"def max_product_of_two(arr):
    n = len(arr)
    if n == 0:
        return None

    max_val1 = arr[0]
    for i in range(1, n):
        if arr[i] > max_val1:
            max_val1 = arr[i]

    max_val2 = arr[0]
    for i in range(1, n):
        if arr[i] > max_val2 and arr[i] != max_val1:
            max_val2 = arr[i]

    return max_val1 * max_val2"
Create a model in Python using Linear Regression that can predict the housing prices given the living area and number of rooms.,"import numpy as np
from sklearn import linear_model

X = np.array([[2000, 3], [1600, 2.5], [2400, 3.5], [1400, 2], [3000, 4]])
y = np.array([75000, 43000, 59000, 32000, 85000])

model = linear_model.LinearRegression()
model.fit(X, y)

prediction = model.predict([[2200, 3]])"
Generate a Python program to append a given element to the end of the list.,"arr = [2, 3, 4] 
arr.append(6)
print(arr)"
Construct a Python code to combine the elements of two given list and return a sorted union list.,"def union_list(list1, list2): 
    list3 = list1 + list2 
    list3.sort() 
    return list3 
    
union_list(input_list_1, input_list_2)"
Write a function to check if the given array represents min heap or not.,"def check_min_heap(arr, i):
    if 2 * i + 2 > len(arr):
        return True
    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)
    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] 
                                      and check_min_heap(arr, 2 * i + 2))
    return left_child and right_child"
Design an algorithm in Python and write a function to reverse an array.,"def reverse_array(arr):
    start = 0
    end = len(arr) - 1
    while(start < end):
        arr[start], arr[end] = arr[end], arr[start]
        start += 1
        end -= 1
    return arr"
Design a Python algorithm for checking whether a given string contains only unique characters.,"def string_unique(string):
    if len(string) > 256:
        return False
    else:
        my_set = set()
        for character in string:
            if character in my_set:
                return False
            else:
                my_set.add(character)
    return True"
Create a script in Python that reads an integer from the user and counts from one to that number.,"user_num = int(input(""Enter an integer: ""))
for i in range(1, user_num+1):
 print(i)"
Use Python to create a list of numbers from 1 to 10 and print the list.,"my_list = list(range(1, 11))
print(my_list)"
Edit the following Python class such that it can accept a variable number of parameters.,"class Person:
    def __init__(self, *args):
        self.name = args[0]
        self.age = args[1]
        self.weight = args[2]"
Construct a Python program that takes a list of words and checks if the list is in alphabetical order.,"def check_if_list_is_in_alphabetical_order(words_list):
    for i in range(len(words_list)-1):
        if words_list[i] > words_list[i+1]:
            return False
    return True
 
words_list = ['cat', 'dog', 'hippo', 'horse']
result = check_if_list_is_in_alphabetical_order(words_list)
print (result)"
Debug the following Python program which raises a SyntaxError.,"def func(a, b): 
  c = a + b 
  return c 

a = 4 
b = 5 

res = func(a, b) 
print(res)"
Complete the Python program to automatically add 3 months to a date.,"import datetime
date_str = '2020-01-31'

def add_three_months(date_str):
    d = datetime.datetime.strptime(date_str, '%Y-%m-%d')
    d = d + datetime.timedelta(days=90)
    date_str = d.strftime('%Y-%m-%d')
    return date_str"
Write a Python program to generate a linked list of numbers from 0 to n.,"def generateLinkedList(n): 
	head = Node(0) 
	prev = head 
	for i in range(1, n + 1): 
		node = Node(i) 
		prev.next = node 
		prev = node 
	return head"
Create a Python program to parse and modify the following input string.,"input_string = ""ABC 123 XYZ 456""
output_string = """"

for char in input_string:
    if char.isalpha():
        output_string += char.lower()
    else:
        output_string += char

print(output_string)"
Write a Python class to represent a five sided polygon.,"class Polygon:
    def __init__(self, sides):
        self.sides = sides

    def calc_perimeter(self):
        return (self.sides * 5)

# create a Polygon instance
polygon = Polygon(5)

# calculate the perimeter
print(polygon.calc_perimeter())"
Write a machine learning algorithm in Python to find the nearest neighbors of a given point.,"from sklearn.neighbors import NearestNeighbors

def nearest_neighbors(point):
    neighbors = NearestNeighbors(n_neighbors=1).fit(point) 
    return neighbors.kneighbors([point], return_distance=False)[0]"
"Given a list of integers, write a Python program to detect whether or not the list contains an even number.","def check_even(numbers):
  for num in numbers:
    if num % 2 == 0:
      return True
  return False"
Develop a Python program to find out all the perfect numbers between 1 and n.,"def perfect_numbers(n):
    perfect_nums = []
    for num in range(1, n+1):
        sum = 0
        for i in range(1, num):
            if num % i == 0:
                sum += i
        if sum == num:
            perfect_nums.append(num)
    return perfect_nums

n = 30
print(perfect_numbers(n))"
Create a Python program to optimize a given function using the Nelder-Mead method.,"from scipy.optimize import minimize
def f(x):
    return x[0]**2 + 4*x[1]**2

res = minimize(f, [3, -2], method='nelder-mead')

print(res.x)"
Create a Python code to output the following text:,"print(""Hello, World!"")"
Create a Python program to parse a CSV string and print each row in a readable format.,"import csv 
  
csvString = ""John Doe, 22, ABC Street, 07777\nMary Smith, 26, XYZ Street, 02222""
  
# Convert CSV String to List
csvList = csvString.split('\n')
  
# Print each Row of CSV 
for row in csvList: 
    print(row)"
Write a function to find the last occurrence of a character in a string.,"def last_occurence_char(string,char):
 flag = -1
 for i in range(len(string)):
     if(string[i] == char):
         flag = i
 if(flag == -1):
    return None
 else:
    return flag + 1"
Write a function to check if one tuple is a subset of another tuple.,"def check_subset(test_tup1, test_tup2):
  res = set(test_tup2).issubset(test_tup1)
  return (res) "
Write a function in Python that takes a list of integers as an input and returns a new list with every even number doubled and every odd number quadrupled.,"def multiply_values(lst):
 return [x * 2 if x % 2 == 0 else x * 4 for x in lst]

# Example
lst = [2, 5, 6, 8]
print(multiply_values(lst))
# [4, 20, 12, 16]"
Create a program in Python which will print the names of the top 3 numbers in a given list.,"""""""
Print the names of the top 3 numbers in a given list 
""""""
 
my_list = [1, 43, 124, 87, 92]

# Sort the list
my_list.sort(reverse=True)

# Print the top 3 numbers
print(my_list[0], ""is the first biggest number"")
print(my_list[1], ""is the second biggest number"")
print(my_list[2], ""is the third biggest number"")"
Design a Python program for implementing a stack with the following methods.,"class Stack:
    def __init__(self):
        self.items = []

    def push(self, x): 
        self.items.append(x) 

    def pop(self): 
        if not self.is_empty():
            return self.items.pop()
        else:
            return None
        
    def is_empty(self): 
        return len(self.items) == 0"
"Create a Python program that takes an array of strings and returns an array of all strings that start with the letter ""A"".","def filter_array_elements(arr): 
    result = [] 
    for string in arr: 
        if string[0] == 'A': 
            result.append(string) 
    return result

output = filter_array_elements([""Apple"", ""Grape"", ""Banana"", ""Aeroplane""])
print(output)"
Can you provide a piece of code in Python to split a string on a certain delimiter?,"my_list = string.split("","")"
Build an algorithm in Python to concatenate two binary strings.,"def concatTwoBinStrings(str1, str2):
    str = """"
    for i in (str1 + str2):
        if i == '0':
            str += '0'
        else:
            str += '1'
    return str

str1 = ""10101""
str2 = ""101""

print(concatTwoBinStrings(str1, str2))"
Compose a python program that can search a text document for a given word.,"def search_for_word(text_file, query_word):
    words = []

    with open(text_file, ""r"") as file:
        for line in file:
            words.extend(line.split())

    if query_word in words:
        return True
    else:
        return False"
Generate a Python program to classify a given list of numbers using try and except block.,"def classify_numbers(list_of_numbers):
    for number in list_of_numbers:
        try:
            if number % 3 == 0:
                print('Number {} is divisible by 3'.format(number))
        except ZeroDivisionError:
            print('Number {} cannot be divided by 3: division by zero bug'.format(number))"
Create a WebSocket server in Python.,"import asyncio
import websockets

async def hello(websocket, path):
 greeting = await websocket.recv()
 print(f""< {greeting}"")

async def hello_server():
 server = await websockets.serve(hello, '127.0.0.1', 8765)
 await server.wait_closed()

asyncio.get_event_loop().run_until_complete(hello_server())
asyncio.get_event_loop().run_forever()"
Develop an algorithm in Python to find the number of words in a given text string.,"def get_word_count(text):
    words = text.split()
    return len(words)

word_count = get_word_count(""Hello world, this is a test."")
print(word_count)"
You need to create a function in Python to get the factorial of a number.,"def getFactorial(num):
    if num == 0:
        return 1
    else:
        return num * getFactorial(num - 1)"
Create a web service to fetch data from a database.,"A web service can be created using programming languages such as Python, JavaScript, etc. It will contain code to connect to the database, fetch the data, and return it in the appropriate format."
Construct a Python class for calculating the area and perimeter of a square.,"class Square:
 def __init__(self, side):
 self.side = side

 def calculate_area(self):
 return self.side * self.side

 def calculate_perimeter(self):
 return self.side * 4"
Generate a Python code to get the min and max elements of an array.,"def min_and_max(array):
    min_element = array[0]
    max_element = array[0]
    for element in array:
        if element < min_element:
            min_element = element
        elif element > max_element:
            max_element = element 
    return (min_element, max_element)"
Generate python code to implement a linear search algorithm to find a particular value in an array.,"def linear_search(array, value):
    length = len(array)
    
    for i in range(length):
        if array[i] == value:
            return i
            
    return -1

print(linear_search(array, 15))"
Create a Python program that checks if two numbers are equal or not.,"def is_equal(num1, num2):
 return num1 == num2"
Write a python program to sort a list of strings based on their lengths.,"list_of_strings = ['test', 'sample', 'hello', 'world']

list_of_strings.sort(key=len)

print(list_of_strings)"
"Create a Python program that computes the average of the numbers in the list [3, 5, 7, 9].","def get_average(numbers):
 sum = 0
 for num in numbers:
  sum = sum + num
 return sum / len(numbers)
 
numbers = [3, 5, 7, 9]
average = get_average(numbers)
print(average) # Outputs 6.5"
Compute the length of a string in Python,"str = ""Hello, World!""
length = len(str)
print('Length of string is:',length) # Length of string is: 13"
Write a Python program to create a bar chart from a given dataset.,"import matplotlib.pyplot as plt 

# Data to plot 
data = [5, 8, 10, 12, 3, 6] 

# Plot the data 
plt.bar(data, data) 

# Set labels 
plt.xlabel('Data') 
plt.ylabel('Values') 

# Title 
plt.title('Bar Chart of Data Set') 

# Show the plot 
plt.show()"
Write a python script which takes two numbers and returns the sum of the two numbers.,"def addNums(num1, num2):
  return num1+num2"
"Starting from given list of numbers, use Python to generate a new list of integers containing the square root of each number in original list.","import math 
def get_sqrt_list(lst): 
    sqrt_list = [] 
    for el in lst: 
        sqrt_list.append(math.sqrt(el)) 
    return sqrt_list 
print(get_sqrt_list([4, 9, 16, 25]))"
Create a function in Python that takes two parameters and prints out the larger of them.,"def printMax(parameter_1, parameter_2):
    if parameter_1 > parameter_2:
        print(parameter_1)
    else:
      print(parameter_2)"
Create a program in Python that takes two numbers as an input and returns the sum of the two numbers.,"def sum_nums(a, b):
    """"""Returns the sum of two numbers a and b.""""""
    return a + b"
Develop a Python code to encode text into base64.,"import base64

# Encode a text into base64
def encode_base64(text):
  # convert the text to bytes object
  text_bytes = text.encode('ascii')
  # encode it into base64
  base64_bytes = base64.b64encode(text_bytes)
  # convert it back to a string
  base64_encoded_text = base64_bytes.decode('ascii')

  return base64_encoded_text

print(encode_base64('This is a test'))"
Write a Python program that takes the two numbers and creates a generator expression to give you the sum of the numbers.,"sum = sum(x for x in range(5,11))
print(sum)"
Write a python function to check for odd parity of a given number.,"def check_Odd_Parity(x): 
    parity = 0
    while (x != 0): 
        x = x & (x - 1) 
        parity += 1
    if (parity % 2 == 1): 
        return True
    else: 
        return False"
Write a Python script to extract all the URLs from a given HTML page.,"import re
from bs4 import BeautifulSoup

def extract_urls(html):
  soup = BeautifulSoup(html, 'html.parser')
  urls = []
  for link in soup.find_all('a'):
    url = link.get('href')
    if url:
      urls.append(url)
  return urls"
"Create a Python program that takes a list of carbohydrates [glucose, fructose, galactose] and calculates the net energy charge.","net_energy_charge = 0

for carbohydrate in list_of_carbohydrates:
 if carbohydrate == 'glucose':
  net_energy_charge += -2.3
 elif carbohydrate == 'fructose':
  net_energy_charge += -2.5
 elif carbohydrate == 'galactose':
  net_energy_charge += -3

print(net_energy_charge)"
Construct a while loop in Python to print the first 10 numbers.,"num = 1
while num <= 10:
    print(num)
    num += 1"
Write a function that matches a string that has an a followed by zero or more b's by using regex.,"import re
def text_match(text):
        patterns = 'ab*?'
        if re.search(patterns,  text):
                return ('Found a match!')
        else:
                return ('Not matched!')"
Rewrite the following bash script using Python.,"name = input('Enter a name: ')
print(f'Hello {name}')"
Create a Python Program to implement the Monte Carlo method for calculating the value of pi.,"import random
 
def MonteCarlo(n):
    inside = 0
    for i in range(n):
        x = random.random()
        y = random.random()
        if x*x + y*y <= 1:
            inside += 1
 
    return 4*inside/n
 
if __name__ == '__main__':
    n = int(input(""Input the number of points: ""))
    print(""Pi is approximately {}!"".format(MonteCarlo(n)))"
Construct a code that identifies the sum of elements of an array in Python.,"def sum_elements(arr):
    summ = 0
    for i in arr: 
        summ += i
    return summ

summ = sum_elements([4, 6, 8, 2])
print(summ)"
Implement a program in Python to get the sum of all even numbers in a list of integers.,"def sum_of_even_numbers(lst): 
  sum = 0
  for i in lst: 
    if i%2 == 0: 
      sum = sum + i 
  return sum 
  
print(sum_of_even_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
Write a Python program to split a string into a list of substrings.,"words = str.split("" "")"
"Create a Python program to generate a random password of 8 characters including uppercase, lowercase, numeric digits, and special characters.","import random
import string

def generate_password():
 chars = string.ascii_uppercase + string.ascii_lowercase + string.digits + '$#@'
 random.shuffle(list(chars))
 return ''.join(random.sample(chars, 8))

print(generate_password()) #nH3@r4y6"
Write a Python function to split a given string in two parts which are separated by a space.,"def split_string(string):
  parts = string.split(' ')
  return parts[0], parts[1]"
Write a function to count the pairs of reverse strings in the given string list.,"def count_reverse_pairs(test_list):
  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( 
	test_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) 
  return str(res)"
Write an algorithm in Python that calculates the maximum subarray of a given array.,"def max_subarray(arr):
 max_so_far = arr[0] 
 max_ending_here = arr[0] 
   
 for i in range(1, len(arr)): 
  max_ending_here = max(arr[i], max_ending_here + arr[i]) 
  max_so_far = max(max_so_far, max_ending_here)  
   
 return max_so_far"
Create a python dictionary to store the following details,"person_details = {
    'Name': 'John',
    'Age': 27,
    'Gender': 'Male'
}"
Write a function to convert a list of multiple integers into a single integer.,"def multiple_to_single(L):
  x = int("""".join(map(str, L)))
  return x"
Develop a Python program that calculates the sum of positive integers up to and including a given number 'n'.,"def sum_of_first_n_numbers(n): 
	sum = 0
	
	# iterate over all numbers 
	# from 0 to n 
	for num in range(0, n+1): 
		sum += num 
	
	return sum

n = 10
print(sum_of_first_n_numbers(n)) 

# Output: 55"
Design an algorithm to find out the top 5 characters with the highest occurrence from a string in Python.,"from collections import Counter

def top_characters(string):
    counter = Counter(string).most_common(5)
    return counter
    
string = ""This is a test sentence to use for the example.""
print(top_characters(string))
# Output: [('e', 5), ('s', 4), ('t', 4), ('o', 3), ('i', 3)]"
Develop a Python program to compact a given list of integers by removing its duplicate elements.,"def compact_list(array):
    return list(set(array))"
Create a function in Python to create a dictionary with keys as numbers and each key corresponding to the natural number to its right.,"def create_dictionary(n):
  # Create an empty dictionary
  dictionary = {}
  
  # Loop through each number
  for i in range(1, n + 1):
    # For each number, add an entry to the dictionary
    dictionary[i] = i + 1
    
  # Return the dictionary
  return dictionary"
Generate a program to generate encryption keys from a string using Python.,"import hashlib

# define the input string
input_string = 'ExampleString'

# generate a key
key = hashlib.sha256(input_string.encode()).hexdigest()

# output the key
print('Encryption key:', key)"
"Write a Python program to build an SQL query that creates a table based on the following fields: name (string), age (integer), and weight (float).","sql_query = """"""
 CREATE TABLE Person (
 name VARCHAR(255),
 age INTEGER,
 weight FLOAT
 );
""""""

print(sql_query)"
Write a Python program to insert an item at a given position into a list,"def insert_item(lst, item, pos):
    lst.insert(pos, item)
    return lst

lst = [""Red"", ""Orange"", ""Yellow""]
item = ""Black""
pos = 2

print(insert_item(lst, item, pos))"
Use regex to match a valid email address in python,"import re

EMAIL_REGEX = re.compile(r""(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)"")

def is_email_valid(email):
  return EMAIL_REGEX.match(email) != None"
Write a Python program to read a given string and sort it alphabetically.,"def sort_alphabetically(input_string):
    chars = list(input_string)
    chars.sort()
    print("""".join(chars))

sort_alphabetically(""Hello, World!"")"
Write a python function to remove the characters which have odd index values of a given string.,"def odd_values_string(str):
  result = """" 
  for i in range(len(str)):
    if i % 2 == 0:
      result = result + str[i]
  return result"
Transform the JSON string below into a Python dictionary.,"import json
data = '{""name"": ""John"", ""age"": 30, ""city"": ""New York""}'
my_dict = json.loads(data)"
Rewrite the following python program using list comprehension,"list = ['apple', 'banana', 'cat', 'dog', 'elephant']
new_list = [x.upper() for x in list]"
Write a Python program that will determine the maximum number of unique paths a person can take from one point to another in a two-dimensional grid.,"def unique_paths(grid):
 rows = len(grid)
 cols = len(grid[0])
 
 dp = [[0 for i in range(cols)] for j in range(rows)]
 
 for i in range(rows):
 for j in range(cols):
 if i == 0 or j == 0:
 dp[i][j] = 1
 else:
 dp[i][j] = dp[i][j-1] + dp[i-1][j]
 
 return dp[-1][-1]
 
print(unique_paths(grid))
# Output: 2"
Write a script in Python to detect the sentiment of a given text.,"import textblob

def detect_sentiment(text):
    analysis = textblob.TextBlob(text)
    if analysis.sentiment.polarity > 0:
        return 'positive'
    elif analysis.sentiment.polarity == 0:
        return 'neutral'
    else:
        return 'negative'"
Modify the given Python code to improve its performance.,"def find_sum(n):
    # base case
    if n == 0:
        return 0
    # recursive case
    else:
        return n + find_sum(n-1)"
Optimize a given Python program to calculate the Fibonacci series.,"def Fibonacci(n):
 if n<0:
  print(""Incorrect input"")
 elif n==1:
  return 0
 elif n==2:
  return 1
 else:
  a = [0] * (n+1)
  a[0] = 0
  a[1] = 1
 
  for i in range(2, n+1):
   a[i] = a[i-1] + a[i-2]
  return a[n]"
Generate an optimized version of the following Python program.,"def calculate_sum(a,b):
    return (b*(b+1))//2 - ((a-1)*a)//2

sum = calculate_sum(1, 10)
print(sum)"
Make a function to print out all substrings of a given string in Python,"def print_substrings(str):
    for i in range(len(str)):
        for j in range(i+1, len(str)+1):
            print(str[i:j])

if __name__ == ""__main__"":
    str = ""coding""
    print_substrings(str)"
"Create a class in Python to represent a Person which contains attributes like name, age, height and address.","class Person:
    def __init__(self, name, age, height, address):
        self.name = name
        self.age = age
        self.height = height
        self.address = address
    
    def describe(self):
        print('Name:', self.name)
        print('Age:', self.age)
        print('Height:', self.height)
        print('Address:', self.address)"
Code an algorithm in Python to solve the following: Find the two largest numbers in a set of numbers.,"def findLargest(nums):
  largest1 = float('-inf')
  largest2 = float('-inf')
  
  for num in nums:
    if num > largest2:
      if num > largest1:
        largest2 = largest1
        largest1 = num
      else:
        largest2 = num
  
  return largest1, largest2

findLargest([1, 5, 2, 9, 6, 8]) // 9,8"
Refactor the following Python code to use list comprehension instead of for-loops.,"my_list = [1, 2, 3, 4, 5] 
new_list = [x**2 for x in my_list if x % 2 == 0]"
Code a python class that accepts a list of names as input and prints them on a separate line.,"class Person: 
  def __init__(self, names): 
    self.names = names
    
  def print_names(self): 
    for name in self.names: 
      print(name) 
      
person = Person([""John"", ""James"", ""Jenny"", ""Frank""])
person.print_names()"
Generate a program to recognize the sentence 'Good morning' in Python.,"import speech_recognition as sr

r = sr.Recognizer()

with sr.Microphone() as source:
    print(""Say something!"")
    audio = r.listen(source)

try:
    print(""You said: "" + r.recognize_google(audio))
    if r.recognize_google(audio) == 'Good morning':
        print('correct')
    else:
        print('incorrect')
except:
    pass"
Update the given Python code such that the output will be printed in ascending order.,"lst = [3, 1, 4, 5, 2]

for number in sorted(lst):
    print(number)"
Create an algorithm in Python to reverse an array in place.,"def reverse_in_place(arr): 
  
    # Initializing start and end 
    start = 0
    end = len(arr) - 1
  
    while start < end: 
        # swapping the elements 
        arr[start], arr[end] = arr[end], arr[start] 
        start += 1
        end -= 1
    return arr 
  
arr = [1, 2, 3, 4, 5, 6] 
print(reverse_in_place(arr))"
Generate a correct python algorithm to delete a given element from list.,"def delete_element(numbers, element):
 result = []
 for x in numbers:
 if x != element:
 result.append(x)
 return result"
Create a web scraper in Python to scrape product prices from a given URL.,"import requests
from bs4 import BeautifulSoup

# make the request
URL = ""https://example.com/product-list""
response = requests.get(URL)

# parse the HTML
soup = BeautifulSoup(response.content, 'html.parser')

# find all product prices on the page
prices = soup.find_all('span', class_=""price"")

# print out all the prices
for price in prices:
 print(price.text)"
"Create a basic Python script that generates a random password of 12 characters with at least 1 number, 1 special character, and 1 uppercase letter.","import random
import string

def generate_password():
 chars = string.ascii_letters + string.digits + string.punctuation
 password = ''.join(random.choice(chars) for i in range(12))
 return password

if name == 'main':
 password = generate_password()
 print(password)"
Develop a function in Python to concatenate two lists,"def concatenateLists(list1, list2): 
    list3 = list1 + list2 
    return list3"
Write a function to perfom the modulo of tuple elements in the given two tuples.,"def tuple_modulo(test_tup1, test_tup2):
  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) 
  return (res) "
Create a python program that creates a random password with 8 characters.,"import random
import string

def create_password():
    chars = string.ascii_letters + string.digits + string.punctuation
    password = ''.join(random.choice(chars) for _ in range(8))
    return password

print(create_password())"
Write Python code to find the sum of products of respective array elements,"def sum_product_array(arr1, arr2):
    total = 0
    for i in range(len(arr1)):
        total += arr1[i] * arr2[i]
    return total"
Write a Python program to generate multiplication tables from 1 to 10.,"for num in range(1,11):
 for i in range(1,11):
  print(num,""X"",i,""="",num*i)
  print("""")"
Write a Python program to generate a random matrix of size mXn where all numbers are greater than k.,"import numpy as np

def generate_matrix(m, n, k):
    matrix = np.random.randint(k + 1, high=9, size=(m, n))
    return matrix

m = 5
n = 5
k = 6
matrix = generate_matrix(m, n, k)
print(matrix)"
Write a python script that takes a list of strings as input and reverse the order of each sentence.,"sentences = [""Hello world!"", ""I am learning Python!"", ""How are you?""]

reversed_sentences = [sentence[::-1] for sentence in sentences]
 
print(reversed_sentences)
# Output: [""!dlrow olleH"", ""!nohtyP gninrael m'I"", ""?uoy era woH""]"
Create a program in Python that implements bubble sort.,"def bubble_sort(nums):
    for i in range(len(nums)-1):
        for j in range(len(nums)-i-1):
            if nums[j] > nums[j+1]:
                nums[j], nums[j+1] = nums[j+1], nums[j]
    return nums"
Generate a Python program to generate a random number within a given range.,"def random_num(start, end):
  return random.randint(start, end)"
Create a Python script that extracts a 3x3 submatrix from a 3x5 matrix.,"matrix = [[1, 2, 3, 4, 5],
         [6, 7, 8, 9, 0],
         [1, 2, 3, 4, 5]]

submatrix = [[matrix[0][0], matrix[0][1], matrix[0][2]],
             [matrix[1][0], matrix[1][1], matrix[1][2]],
             [matrix[2][0], matrix[2][1], matrix[2][2]]]

print(submatrix)"
Design a Python code solution to reverse a string with a given input.,"def reverse_string(string):
    return string[::-1]

string = ""Hello world!""
print(reverse_string(string))"
Design a Python program to print out the nth triangle number.,"def triangle_num(n):
    if n == 1:
        return 1
    else: 
        return n + triangle_num(n-1)"
Create a Python program to consume an API and print the data it receives.,"import requests

url = 'https://jsonplaceholder.typicode.com/posts'
response = requests.get(url)

if response.status_code == 200:
  posts = response.json()
  for post in posts:
    print(post['title'])"
Convert the following JSON string into a Python dictionary.,"import json

json_string = '{""a"":1, ""b"": ""Hello"", ""c"": {""d"": [34, 56]}}'
parsed_json = json.loads(json_string)

print(parsed_json)  # Output: {'a': 1, 'b': 'Hello', 'c': {'d': [34, 56]}}"
Create a Python class called 'Points' to store three dimensional points.,"class Points:
    def __init__(self, x, y, z):
        self.x = x
        self.y = y
        self.z = z
        
    def __str__(self):
        return ""x={}, y={}, z={}"".format(self.x, self.y, self.z)"
Generate a Python program to calculate the sum from 0 to 10.,"def calculate_sum(n):
 sum_total = 0
 for i in range(n+1):
  sum_total += i
 return sum_total

print(calculate_sum(10)) # Output: 55"
Write a function in Python that takes a list of numbers as input and returns the product of all the numbers.,"def product(lst):
    product = 1
    for num in lst:
        product *= num
    return product

print(product([1, 2, 3, 4]))"
Develop a program in Python that reverses a given string.,"def reverse_string(string):
    reversed_string = string[::-1] 
    return reversed_string

reversed_string = reverse_string(""Hello World!"")
print(reversed_string)"
"Define and create a class in Python to represent a student. The student should have properties for first name, last name, student ID and a GPA.","class Student:
  def __init__(self, first_name, last_name, student_id, gpa):
    self.first_name = first_name
    self.last_name = last_name
    self.student_id = student_id
    self.gpa = gpa

student = Student('John', 'Doe', '12345', 3.5)"
Design a Python function that takes a string and returns its length.,"def find_string_length(string): 
    length = 0
    for char in string: 
        length += 1
    return length

result = find_string_length('Hello World!')
print(result)"
Take the list of people below and create a Python dictionary with the names as keys and the ages as values.,"people_dict = {'John': 20, 'Jane': 40, 'Alex': 18, 'Peter': 45}"
Write a function in Python to check if two strings are anagrams of each other.,"def is_anagram(str1, str2): 
    # Create lists of characters in each string
    list1 = list(str1)
    list2 = list(str2)

    # Sort both lists
    list1.sort()
    list2.sort()
    
    # Compare the two lists 
    if list1 == list2:
        return True
    else:
        return False"
Write a Python function that finds the smallest number among three numbers,"def find_smallest(num1, num2, num3):
    return min(num1, num2, num3)

# Example
print(find_smallest(2, 5, 8))  # Prints 2"
Write a Python program to sort a dictionary by key,"def sort_dict_by_key(sample):
    # Create a sorted list of keys
    sorted_keys = sorted(sample.keys())
    # Iterate over the sorted sequence
    for key in sorted_keys:
        # Generate key-value pair
        print (key, sample[key])

sample = {'c':10, 'a':8, 'b':12, 'e':3, 'd':4}
sort_dict_by_key(sample)"
Design a program in Python to compute the Nth power of a given number.,"def pow(num, pow):
    result = 1
    for i in range(pow):
        result *= num
    return result"
Write a Python program to scrape the top 5 trending tweets from Twitter.,"import requests
from bs4 import BeautifulSoup

url = 'https://twitter.com/trends'
r = requests.get(url)

soup = BeautifulSoup(r.text, 'html.parser')
trending_tweets = soup.find_all('a', {'class': 'trend-details'})

for tweet in trending_tweets[:5]:
 print(tweet.text)"
Modify this python code to increase the speed of the program.,"def divide(a, b):
    return a // b

a = 5
b = 2
number = divide(a, b)
print(number)"
Modify the following Python program to explore and retrieve data from a dataset using Pandas.,"import pandas as pd

df = pd.read_csv('data.csv')

print(df.head())
print(df.info())
print(""Average age of passengers:"", df['Age'].mean())
print(""Number of female passengers:"", df[df['Sex'] == 'female'].shape[0])
print(""Oldest passenger:"", df.loc[df['Age'].idxmax()])"
Sort an array of strings in descending order according to their length.,"['programming', 'algorithm', 'python', 'coding']"
can you provide a python for loop that prints out the product of two lists?,"list1 = [1, 2, 3]
list2 = [4, 5, 6]

for i in range(len(list1)):
    product = list1[i] * list2[i]
    print(product)"
Create a Python 3 program to sort a list of numbers in ascending order.,"def sort_list(lst):
  lst.sort()
  return lst

lst = [5, 7 ,1 ,3, 4]
sorted_list = sort_list(lst)
print(sorted_list)"
Convert the given string from Upper Camel Case notation to lower snake case notation in Python.,"lower_snake_case = ''.join(w.lower() for w in UpperCamelCase.split()).replace('', '_')[1:]"
Construct a Python program that can extract the name of an author from a given book title.,"def extract_author(title):
    title_words = title.split()
    for word in title_words[::-1]:
        if word[0].isupper():
            return word

print(extract_author(title)) # Potter"
Create a simple Python program to calculate the sum of two numbers and print out the result.,"num1 = 3
num2 = 5

result = num1 + num2

print(f'The sum of {num1} and {num2} is {result}')"
Create a python function that accepts two lists as arguments and returns true if the first list is contained within the second,"def is_contained(list_a, list_b):
    for x in list_b: 
        if x not in list_a: 
            return False 
  
    return True"
"Make a program in Python that takes a list of integers as input and prints the average, maximum, and minimum.","def calculate_avg_max_min(list_of_int):
    avg = sum(list_of_int) / len(list_of_int)
    maximum = max(list_of_int)
    minimum = min(list_of_int)
    return avg, maximum, minimum

list_of_int = [1, 7, 4, 6]
avg, max_int, min_int = calculate_avg_max_min(list_of_int)
print(""Average ="", avg)
print(""Maximum ="", max_int)
print(""Minimum ="", min_int)"
Write a Python class that has a method that encrypts a given string using Caesar’s Cypher.,"class Encrypter:
    def ceaserCypherEncryptor(self, key, string):
        encStr = """"
        for ch in string:
            encStr += chr(ord(ch)+key)
        return encStr
        
e = Encrypter()
encStr = e.ceaserCypherEncryptor(3, ""Hello World"") 
print(encStr) 
# Output 
Khoor#Zruog"
Remove all the commented code from Python program.,"print(""Hello World!"")
i=i+1"
Create a Python function to calculate the area of a triangle given the lengths of its three sides.,"import math

def get_area(a, b, c):
    s = (a + b + c) / 2
    area = math.sqrt(s*(s-a)*(s-b)*(s-c))
    return area

input_data = 5, 6, 7
area = get_area(*input_data)
print(area)  # Output: 14.696938456699069"
Create a WebScraper in Python that extracts the titles and links from a given URL.,"from bs4 import BeautifulSoup
import requests

url = 'https://www.example.com'
r = requests.get(url)

soup = BeautifulSoup(r.content, 'html.parser')

# Extract titles and links
titles = []
links = []
for link in soup.find_all('a'):
 titles.append(link.get('title'))
 links.append(link.get('href'))

print(titles, links)"
"Generate a shell script that can start a web server. The script should take a single argument, the name of the directory where the web server should be started.","#!/bin/bash

if [ -z ""$1"" ]; then
 echo ""Usage: $0 [dir]""
 exit 1
fi

DIR=""""$1""""

if [ ! -d ""$DIR"" ]; then
 echo ""Error: Directory \""$DIR\"" does not exist""
 exit 1
fi

cd ""$DIR""
python -m SimpleHTTPServer 8080"
Construct a function to compute the area of a triangle in Python,"def area_of_triangle(base, height):
    """"""Compute the area of a triangle in Python
    
    Parameters
    --------------
    base: float
        The length of the triangle's base
    height: float
        The measure of the triangle's height

    Returns
    --------------
    float
        The area of the triangle
    """"""
    return 0.5 * base * height"
Write a function to calculate the nth pell number.,"def get_pell(n): 
	if (n <= 2): 
		return n 
	a = 1
	b = 2
	for i in range(3, n+1): 
		c = 2 * b + a 
		a = b 
		b = c 
	return b "
Create a command-line interface with Python that gets a user's name and prints out a welcome message.,"import sys

# Get user's name
name = input('What is your name? ')

# Print out a welcome message
print('Welcome', name, 'to the CLI')"
Create a Python script that outputs a random integer between 1 and 10.,"import random

random_int = random.randint(1, 10)
print(random_int)"
Create a python code to extract the first name from a given full name.,"def extractFirstName(full_name):
    first_name = full_name.split()[0]
    return first_name

# Input
full_name = 'John Smith'

# Output
result = extractFirstName(full_name)
print(result)"
"Create a class that inherits from the Python list object, and adds a new method called ""reverse_list"".","class ReverseList(list):
    def reverse_list(self):
    	return self[::-1]"
Suggest a Python program to create a list filled with random numbers,"import random

def create_random_number_list(length, lower_bound, upper_bound):
    output_list = []
    for i in range(length):
        output_list.append(random.randint(lower_bound, upper_bound))
    return output_list

length = 10
lower_bound = 0
upper_bound = 1000

result = create_random_number_list(length, lower_bound, upper_bound)
print(result)"
Generate a function in Python that takes an array of numbers and returns an array of the squares of the numbers.,"""""""
A function to return the squares of an array in Python 
""""""

def square_array(input_array): 
  squared_array = []
  for i in input_array: 
    squared_array.append(i*i)
  return squared_array"
Change the following Python code to work with python 3 and print output “My name is Mary”.,print('My name is Mary')
Generate Python code to print the first ‘n’ elements of the Fibonacci series.,"def print_fibonacci_series(n):
    a, b = 0, 1
    for i in range(n):
        print(a)
        a, b = b, a + b

print_fibonacci_series(7)"
Create a class in Python to store customer information.,"class Customer:
    def __init__(self, name, email, phone):
        self.name = name
        self.email = email
        self.phone = phone"
Define a Python function to calculate the factorial of an integer number.,"def factorial(n):
    if n == 0:
        return 1
    else: 
        return n * factorial(n-1)"
Write a function to perform chunking of tuples each of size n.,"def chunk_tuples(test_tup, N):
  res = [test_tup[i : i + N] for i in range(0, len(test_tup), N)]
  return (res) "
Edit a Python program to output the maximum value,"def find_max(lst):
    max = lst[0]
    for i in lst:
        if i > max:
            max = i
    return max"
Build a program in Python to find the factorial of a given number using recursion.,"def factorial(n): 
    if n == 0: 
        return 1
    else: 
        return n * factorial(n-1) 
  
# Driver Code 
num = 5
print(factorial(num))"
Edit the following Python Program to count the occurrences of a specific number.,"arr = [1, 2, 2, 3, 4]
num = 2

count = 0

for i in arr:
    if i == num:
        count += 1

print(count) #outputs 2"
Generate a Python script to print the Fibonacci sequence.,"def Fibonacci(n): 
    a = 0
    b = 1
    if n < 0: 
        print(""Incorrect input"") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2,n): 
            c = a + b 
            a = b 
            b = c 
        return b 
  
# Driver Program 
print(Fibonacci(9))"
Design a function in Python that reverses a string.,"def reverse_string(str): 
    return str[::-1]  
  
reverse = reverse_string(string) 
print(""The reversed string is : "",reverse)"
Write a function to get the frequency of the elements in a list.,"import collections
def freq_count(list1):
  freq_count= collections.Counter(list1)
  return freq_count"
Create a Python object-oriented program to model a 2D coordinate system.,"class CoordinateSystem:
  
    def __init__(self, x, y):
        self.x = x
        self.y = y
    
    def magnitude(self):
        # Returns the magnitude of the coordinate 
        return (self.x**2 + self.y**2)**(1/2)
    
    def add(self, other):
        # Returns the added coordinates
        x = self.x + other.x
        y = self.y + other.y
        return CoordinateSystem(x, y)"
Generate a Python program that calculates standard deviation of a set of numbers.,"def std_dev(data_set):
    mean = sum(data_set) / len(data_set)
    total_sum = 0
    for i in data_set:
        total_sum += (i - mean) ** 2
    variance = total_sum / len(data_set)
    std_dev = variance ** (1/2)
    return std_dev

data_set = [20, 25, 30, 35, 40]
print(""Standard Deviation: "" + str(std_dev(data_set)))"
Generate a function in Python that prints an argument specified by the user.,"def print_user_value(x):
    print(x)"
"Create a Python program which creates two thread, each printing the numbers 1 to 10 with a delay of 1 second.","import threading 
import time 
  
def printNumbers(): 
    for x in range(1, 11): 
        print(x) 
        time.sleep(1) 
  
t1 = threading.Thread(target=printNumbers) 
t2 = threading.Thread(target=printNumbers) 
  
t1.start() 
t2.start() 
  
t1.join() 
t2.join()"
"Write a function to extract specified number of elements from a given list, which follow each other continuously.","from itertools import groupby 
def extract_elements(numbers, n):
    result = [i for i, j in groupby(numbers) if len(list(j)) == n] 
    return result"
Create a Python program to implement the triangle numbers.,"def triangle_numbers(n):
    res = 0
    for i in range(n):
        res += i+1
    return res

result = triangle_numbers(n)
print(result) # output: 15"
How can a user enter 5 numbers in Python and save them in a list?,"# create an empty list
my_nums = []

# loop to enter and append numbers to the list
for i in range(5):
    num = int(input(f'Enter number {i+1}: '))
    my_nums.append(num)

# printing the list
print(my_nums)"
Write a Python program to generate a SQL query for selecting rows that contain a given value in a given column.,SELECT * FROM table_name WHERE age=25;
Construct a program to create a class in Python which will store the user data.,"class User:
    def __init__(self, name, age, email):
        self.name = name
        self.age = age
        self.email = email

    def display(self):
        print(f""""""
            Name: {self.name}
            Age: {self.age}
            Email: {self.email}
            """""")"
"Given a list of numbers, write a Python program to find the frequency of each number in the list.","from collections import Counter

def find_frequency(list): 
    return Counter(list) 

my_list = [1, 2, 3, 4, 1, 2, 3]
freq = find_frequency(my_list)
print(freq)"
Create a Python script to reverse a string using recursion.,"def reverse_string(s): 
  if len(s) == 0: 
    return s 
  else: 
    return reverse_string(s[1:]) + s[0] 

# Test
string = ""test string""
print(reverse_string(string)) # Output: ""gnirts tset"""
Create a program in Python to generate a random integer between 1 and 10.,"import random

def random_int():
    return random.randint(1, 10)"
Generate a Python function to multiply two given positive integers without using the * operator.,"def multiply(x, y):
    # Base case
    if y == 0:
        return 0
 
    # Recursive case
    else:
        return (x + multiply(x, y-1))"
Write a python function to find nth number in a sequence which is not a multiple of a given number.,"def count_no (A,N,L,R): 
    count = 0
    for i in range (L,R + 1): 
        if (i % A != 0): 
            count += 1
        if (count == N): 
            break
    return (i) "
Propose a solution to fetch an online catalog of products and display them in a tabular format using Python.,"import requests
import pandas as pd

# Set the request URL
url = ""http://example.com/products""

# Send the request and retrieve the data
data = requests.get(url).json()

# Convert the data into a pandas DataFrame
df = pd.DataFrame(data)

# Print the resulting table
print(df)"
Write a code in Python to find the area of a circle using its radius.,"import math

def circle_area(radius):
  """"""
  Returns the area of a circle based on its radius
  """"""
  return math.pi * (radius**2)

if __name__ == '__main__':
    print(circle_area(4))"
Write a Python program that calculates the nth Fibonacci number where n is a positive integer given by the user.,"# Fibonacci Sequence

def Fibonacci(n): 
    if n<0: 
        print(""Incorrect input"") 

    elif n==1: 
        return 0
    
    elif n==2: 
        return 1 
    else: 
        return Fibonacci(n-1)+Fibonacci(n-2) 

n = int(input(""Enter the value of n: ""))
print(Fibonacci(n))"
Generate a Python program that takes a numerical list and finds the index of the largest value.,"# list of numbers 
list = [3, 5, 9, 10] 

# maximum number 
MaxNum = max(list) 

# index of the maximum number 
index = list.index(MaxNum) 

print(""Maximum number is:"", MaxNum) 
print(""Index of maximum number is:"", index)"
Make a code in Python to find the mode of the given set of values.,"def find_mode(list):
  max_count = 0
  mode = list[0]
  count = {}
  for item in list:
    if (item in count):
      count[item] += 1
    else:
      count[item] = 1
    if (count[item] > max_count):
      max_count = count[item]
      mode = item
  return mode"
Create a Python function that takes in a list and prints a dictionary with the elements and the product of each element.,"def product_of_list(list):
    output = {}
    for element in list:
        output[element] = element * element
    return output

print(product_of_list([7, 8, 5]))"
Write a function to find the ration of negative numbers in an array of integers.,"from array import array
def negative_count(nums):
    n = len(nums)
    n1 = 0
    for x in nums:
        if x < 0:
            n1 += 1
        else:
          None
    return round(n1/n,2)"
Write a function to find the longest common subsequence for the given two sequences.,"def longest_common_subsequence(X, Y, m, n): 
    if m == 0 or n == 0: 
       return 0 
    elif X[m-1] == Y[n-1]: 
       return 1 + longest_common_subsequence(X, Y, m-1, n-1) 
    else: 
       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))"
"Create three classes 'ClassA', 'Cars', and 'Sports' in Python and define a method 'print_info' in each class.","class ClassA:
    def print_info(self):
        print(""This class is ClassA"")
        
class Cars:
    def print_info(self):
        print(""This class is for Cars"")
        
class Sports:
    def print_info(self):
        print(""This class is for Sports"")"
Optimize a Python program to reverse a string with a lower time complexity.,"def reverse_string(string): 
    return string[::-1] 
    
# Time Complexity: O(n)
# Space Complexity: O(1)"
Generate a Python program that searches for a given key in a dictionary.,"my_dict = {
 'name': 'John',
 'age': 26,
 'salary': 5000
}

find_key = 'name'

if find_key in my_dict:
 print(my_dict[find_key])"
Create a Python program to delete all characters at odd index in a given string.,"def deleteAtOddIndex(s):
    output = """"
    for i in range(len(s)):
        # delete the character at an odd index
        if i % 2 != 0:
            pass
        else:
            output += s[i]
    return output"
Compile a function to calculate the difference of two date objects in Python.,"import datetime

def date_diff(date1, date2):
    """"""Returns the difference between two date objects in days""""""
    diff_date = date2 - date1
    return diff_date.days"
Create a class in Python which calculates simple interest.,"class SimpleInterest:
 def __init__(self, principal, rate, time):
  self.principal = principal
  self.rate = rate
  self.time = time

 def calculate(self):
  return self.principal * (1 + self.rate * self.time)

si = SimpleInterest(20000, 0.10, 2)
print('Simple Interest =', si.calculate())"
Write a Python program to implement K-means clustering algorithm.,"from sklearn.cluster import KMeans

# create KMeans object
kmeans = KMeans(n_clusters=3)

# fit the data
kmeans.fit(data)

# predict the clusters
predicted_clusters = kmeans.predict(data)"
"Create a function in Python that takes a name and age and prints a greeting like ""Hi, my name is <name> and I'm <age> years old.""","def greeting(name, age):
    print(""Hi, my name is "", name, ""and I'm"", age, ""years old."")

greeting(""John"", 28)"
Write a code to display prime numbers between two given numbers using python.,"def displayPrime(start, end): 
    for i in range(start, end + 1): 
        if isPrime(i): 
            print(i)
          
def isPrime(n): 
    if n <= 1: 
        return False
    for i in range(2, n): 
        if n % i == 0: 
            return False  
    return True
    
if __name__ == '__main__': 
    start = 1
    end = 10
    displayPrime(start, end) # 2, 3, 5, 7"
Generate a Python program to filter a list of strings to only return words that have 7 or more characters.,"words = ['Apple', 'Banana', 'Cabbage', 'Cucumber']

def filter_list(words):
  filtered_list = []

  for word in words:
    if len(word) >= 7:
      filtered_list.append(word)

  return filtered_list"
Generate a Python program to find the number of words with distinct letters in a given string,"def count_distinct_letters(string):
   distinct_letters = set()
   for word in string.split(' '):
        distinct_letters.update(set(word))
   return len(distinct_letters)

# example
string = 'hello world'
print(count_distinct_letters(string)) # 6"
Create a Python program to reverse a given stack without recursion.,"def reverse_stack(stack):
    rev_stack = []

    while(stack):
        rev_stack.append(stack.pop())

    return rev_stack

# Usage
stack = [1, 2, 3]
print(reverse_stack(stack)) # => [3, 2, 1]"
Design a Python program to convert all the characters of a string to upper case.,"def to_upper(s):
    return s.upper()

result = to_upper(""This is a sample sentence."")
print(result)"
Create a Python class that will store a list of integers and calculate the sum of all the elements in the list.,"class CalcListSum:
  def __init__(self, numbers):
    self.numbers = numbers

  def get_sum(self):
    sum = 0
    for num in self.numbers:
      sum += num
    return sum 

nums = [2, 3, 5, 7]
calc_sum = CalcListSum(nums)
sum_of_nums = calc_sum.get_sum()
print(sum_of_nums)"
Write a Python program to extract the email address from a given string.,"import re

def extract_email(string):
    emails = re.findall(r""[\w\.-]+@[\w\.-]+"", string)
    return emails

string = ""My email is abc@gmail.com""
extract_email(string)  # ['abc@gmail.com']"
Write a function to find number of odd elements in the given list using lambda function.,"def count_odd(array_nums):
   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))
   return count_odd"
Generate a python script that plans a route from point A to point B.,"# import modules
import math

# function to calculate the distance
def route_distance(A, B):
    dX = B[0] - A[0]
    dY = B[1] - A[1]
    return math.sqrt(dX * dX + dY * dY)

# Driver code 
A = (1.2, -2.6) 
B = (7.9, 5.3)

dist = route_distance(A, B)

print(""Distance from A to B is:"", dist)"
Create an algorithm in Python toimplement quick sort.,"def quick_sort(arr):
    if len(arr) < 2:
        return arr
    else:
        pivot = arr[0]
        less_than_pivot = [i for i in arr[1:] if i <= pivot]
        greater_than_pivot = [i for i in arr[1:] if i > pivot]
 
        return quick_sort(less_than_pivot) + [pivot] + quick_sort(greater_than_pivot)"
Write a Python program to determine the maximum value in a dictionary.,"def get_max_value(dictionary):
    max_value = 0
    for k, v in dictionary.items():
        if v > max_value:
            max_value = v
    return max_value

print(get_max_value({
  ""Potato"": 1,
  ""Onion"": 3,
  ""Carrot"": 2
})) 
#prints 3"
Create a Python program to print all numbers which are divisible by 5 and 6 between 300 to 500.,"for i in range(300, 501):
    if i % 5 == 0 and i % 6 == 0:
        print(i)"
Create a Python program that converts a given Fahrenheit temperature into Celsius.,"def fahrenheit_to_celsius(f):
    celsius = (f - 32.0) * (5.0/9.0)
    return celsius

fahrenheit = 98.6
celsius = fahrenheit_to_celsius(fahrenheit)
print(""The temperature in celsius is: "", celsius)"
Create a socket client in Python that can connect to a local web server.,"import socket

# Create a socket object
s = socket.socket()

# Connect to local host
host = '127.0.0.1'
port = 8888
s.connect((host, port))

# Receive data from server
data = s.recv(1024)
print(data)

# Close the socket connection
s.close()"
Write a Python function that takes in a set of numbers and returns their median,"def median(nums):
    nums.sort()
    length = len(nums)
    is_even = length % 2 == 0
    if is_even:
        mid = length // 2
        return (nums[mid] + nums[mid-1]) / 2
    else:
        return nums[length//2]"
Write a function to count bidirectional tuple pairs.,"def count_bidirectional(test_list):
  res = 0
  for idx in range(0, len(test_list)):
    for iidx in range(idx + 1, len(test_list)):
      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:
        res += 1
  return (str(res)) "
Refactor the following code to be more pythonic,"def print_all(sequences):
    [print(sequence) for sequence in sequences]"
Generate a Python program which reads a string as input and removes all vowels present in the string and print out the revised string.,"def removeVowels(string): 
    vowels = ('a', 'e', 'i', 'o', 'u')  
    revised_string = """"
    for letter in string:
        if letter.lower() not in vowels:
            revised_string += letter 
    return revised_string
    
string = ""apple""
reviseString = removeVowels(string)
print(""Revised string ="", reviseString)"
Create a function in Python for finding the maximum of two numbers.,"def max_of_two_numbers(x, y):
    if x > y:
        larger_number = x
    else:
        larger_number = y

    return larger_number"
Write a Python class to represent a 2-Dimensional point.,"class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    
    def get_point(self):
        return (self.x, self.y)"
Create a Python program for visualizing a given dataset using matplotlib.,"import matplotlib.pyplot as plt 

x = [1, 2, 3, 4, 5] 
y = [1, 4, 9, 16, 25] 
  
# plotting the points  
plt.plot(x, y) 

# naming the x axis 
plt.xlabel('x - axis') 
# naming the y axis 
plt.ylabel('y - axis') 
  
# giving a title to my graph 
plt.title('My first graph!') 
  
# function to show the plot 
plt.show()"
Write a Python program to classify the given input according to different categories.,"category = ""medium""

def classify(salary):
 if salary <= 10000:
 return ""low""
 elif salary <=30000:
 return ""medium""
 else:
 return ""high""

result = classify(30000)
print(result)"
Write a code snippet in Python to create a Pandas Dataframe with three columns containing random numbers in the range 1-1000.,"import pandas as pd
import numpy as np

# Create a Dataframe with 3 Columns and 10 Rows
df = pd.DataFrame(np.random.randint(1,1000,size=(10, 3)),
 columns=['col1', 'col2','col3'])
 
print(df)"
Create a code generator that takes a Python program and reduces its memory footprint by using less memory to store data.,"num1 = 20
num2 = 50
result = num1 + num2
print(result)"
Create a basic Python program to classify a list of positive and negative integer numbers.,"positive_numbers = []
negative_numbers = []

for num in numbers:
 if num > 0:
  positive_numbers.append(num)
 else:
  negative_numbers.append(num)

print('Positive numbers:', positive_numbers)
print('Negative numbers:', negative_numbers)"
Develop a Python script to extract the specific keyword from the given URL.,"import re

url = ""https://www.test.com/where-is-the-key""
keyword = ""key""

match = re.search(f'{keyword}', url)
if match:
    print(f'{keyword} found at starting index: {match.start()}')
else:
    print(f'{keyword} not found')"
"Suggest a completion for the following python code, such that it prints all the elements of a list.","def print_list_elements(lst):
    for elem in lst:
        print(elem)"
Design a python program to return the n-th element of a given list.,"def get_nth_element(list_input, n):
    return list_input[n]

print(get_nth_element(list_input, n))"
Creat a Python program to find the sum of the digits of an arbitrary number.,"def sum_of_digits(num):
    total = 0
    while num > 0:
        total += num % 10
        num = num // 10
    return total

total = sum_of_digits(345)
print(f'Sum of the digits of the number is {total}')"
Create a Python program that can convert temperatures between celsius and fahrenheit.,"def celsius_to_fahrenheit(temp):
    fahrenheit = temp * 9/5 + 32
    return fahrenheit

def fahrenheit_to_celsius(temp):
    celsius = (temp - 32) * 5/9
    return celsius

print(""Fahrenheit to Celsius:"", fahrenheit_to_celsius(59))
print(""Celsius to Fahrenheit:"", celsius_to_fahrenheit(15))"
Develop a python program that targets a specific element in a dictionary.,"target_key = ""age""
my_dict = {
    ""name"": ""John Smith"",
    ""age"": 27,
    ""location"": ""New York""
    }

value = my_dict[target_key]
print(""The value of {} is {}."".format(target_key, value))"
Create a class in Python that has a single method which takes a string as an input and returns the reversed version of the string.,"class ReverseString:
 def __init__(self, string):
 self.string = string

 def reverse(self):
 return self.string[::-1]

string_object = ReverseString('hello')
reversed_string = string_object.reverse()

print(reversed_string) # olleh"
Write a Python script to find the longest word in a given text.,"def find_longest_word(text):
    words = text.split(' ')
    longest_word = ''
    for word in words:
        if len(word) > len(longest_word):
            longest_word = word
    return longest_word

longest_word = find_longest_word('The quick brown fox jumps over the lazy dog')
print(longest_word)"
Can you create a program in Python which reverses a number?,"# Using Python

def reverseNumber(number):
    reversed = 0
    while(number > 0):
        digit = number%10
        reversed = reversed*10 + digit
        number = number//10
    
    return reversed

number = 12345
reverse = reverseNumber(number)
print(reverse) 
# Output: 54321"
Create a Python script that takes a text and replaces all occurrences of a given word to its upper-case version.,"import re
 
text = ""The quick brown fox jumps over the lazy dog""
 
replaced = re.sub(r'quick', ""QUICK"", text) 
 
print(replaced) #prints ""The QUICK brown fox jumps over the lazy dog"""
Optimize the given Python code to improve the runtime.,"def sum_list(nums):
 return sum(nums)

nums = [1, 2, 3, 4, 5]"
Generate a program in Python that implements the bubble sort algorithm to sort an unsorted array of integers.,"def bubble_sort(nums):
 for i in range(len(nums)-1):
 for j in range(i+1, len(nums)):
 if nums[i] > nums[j]:
 nums[i], nums[j] = nums[j], nums[i]

nums = [5,3,2,4]
bubble_sort(nums)
print(nums)

# Output
[2,3,4,5]"
Develop a Python program to fetch the website users of an online store.,"import requests

url = 'https://www.example.com/users'
response = requests.get(url)
data = response.json()

for user in data:
    print(user['name'])"
Automatically refactor a subsection of Python code that uses two for-loops.,"for x, y in itertools.product(range(3), range(4)):
    print(x, ""-"", y)"
Write a python function to check whether a string has atleast one letter and one number.,"def check_String(str): 
    flag_l = False
    flag_n = False
    for i in str: 
        if i.isalpha(): 
            flag_l = True  
        if i.isdigit(): 
            flag_n = True
    return flag_l and flag_n "
Suggest a way to display a calendar for the current month in python.,"import calendar

date = calendar.month( 2020, 8 )
print(date)"
Write a python function to count equal element pairs from the given array.,"def count_Pairs(arr,n): 
    cnt = 0; 
    for i in range(n): 
        for j in range(i + 1,n): 
            if (arr[i] == arr[j]): 
                cnt += 1; 
    return cnt; "
"Given a list of strings, write a Python function to remove all the whitespaces from each string.","def remove_whitespace(word_list):
    return [word.strip() for word in word_list]

stripped_list = remove_whitespace(['Hello  World  ', 'Hi  there', 'Good  Morning'])
print(stripped_list)"
Write a python program to generate a dictionary object from a list containing key-value tuples.,my_dict = dict(my_list)
Create a python program that takes a sentence and returns a list of words in alphabetical order.,"sentence = ""The quick brown fox jumped over the lazy dog.""

# Split sentence into words
words = sentence.split()

# Sort list of words alphabetically
words.sort()

# Print sorted list of words
print(words)

# Output: ['brown', 'dog.', 'fox', 'The', 'jumped', 'lazy', 'over', 'quick', 'the']"
Rewrite a given Python program to be more efficient.,"my_list = [1,2,3,4,5,6]

# Use the sum() function to get the sum of a given list
count = sum(my_list)

print(count)"
Program a function in Python that will recognize if a given number is even.,"def is_even(num):
    if num % 2 == 0:
        return True
    else:
        return False"
Generate a valid Python program that finds all the prime numbers in a given range,"def find_primes(start, end):
    result = []
    for number in range(start, end + 1):
       if number > 1:
           for i in range(2, number):
               if (number % i) == 0:
                   break
           else:
               result.append(number)
    return result

result = find_primes(2, 20)
print(result)"
Write a Python program to sort a dictionary based on its values.,"my_dict = {'Apple':1, 'Strawberry':4, 'Banana':3, 'Grapes':2}

sorted_dict = {k: v for k, v in sorted(my_dict.items(), key=lambda item: item[1])}

print(sorted_dict)

# Output: {'Apple': 1, 'Grapes': 2, 'Banana': 3, 'Strawberry': 4}"
Write a function to check whether the given month number contains 28 days or not.,"def check_monthnum_number(monthnum1):
  if monthnum1 == 2:
    return True
  else:
    return False"
Design an algorithm in Python that accepts a list of integers as an input and returns true if the list contains duplicates.,"def is_duplicate(arr):
    return len(arr) != len(set(arr))

is_duplicate(arr) # returns True"
Write a Python Function to check if a given string contains all the letters of the alphabet,"def check_alphabet(string):
    alphabet = ""abcdefghijklmnopqrstuvwxyz"" 
    if set(string.lower()) >= set(alphabet): 
        return True 
    else: 
        return False"
"Using Python, create a function that calculates the factorial of any given number.","def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)"
Design a function in Python to calculate the average of given numbers.,"def calculate_average(numbers):
    total = 0
    for number in numbers:
        total = total + number
    return total / len(numbers)"
Build an algorithm in Python to identify if a given number is a perfect square.,"import math

def is_perfect_square(num):
    sqrt = int(math.sqrt(num))
    return sqrt * sqrt == num

result = is_perfect_square(25)
print(result)"
Design an object-oriented Python class to represent a vehicle.,"class Vehicle:
    def __init__(self, make, model, year):
        self.make = make
        self.model = model
        self.year = year
    
    def getMake(self):
        return self.make
    
    def getModel(self):
        return self.model
    
    def getYear(self):
        return self.year"
"Generate a Python function that, given two strings, will return the number of matches between the strings.","def string_matches(string1, string2): 
    matches = 0
    for i in range(len(string1)): 
        if string1[i] == string2[i]: 
            matches += 1
    return matches"
Generate a Python program to create a dictionary from two given lists.,"list1 = [""apple"", ""banana"", ""orange""]
list2 = [""fruit"", ""fruit"", ""fruit""] 

dictionary = dict(zip(list1, list2))

print(dictionary)"
Write a Python script that prints the numbers 1 to 10 and their squares.,"def print_squares():
    for i in range(1, 11):
        print(f'{i} : {i*i}')

print_squares()"
Write a Python program to separate a specified string into characters and numbers.,"def separate_charnum(str):
    chars = []
    nums = []
    for char in str:
        if char.isalpha():
            chars.append(char)
        else:
            nums.append(int(char))
    return chars, nums

str = ""ab12cd3""

chars, nums = separate_charnum(str)
print(chars)
print(nums)"
"In Python, create a loop that takes a user input and appends it to a list until the user types ""stop"".","my_list = []

while True:
    user_input = input('Type something: ')
    if user_input == 'stop':
        break
    my_list.append(user_input)

print(my_list)"
Construct a python program that analyzes the occurrence of different words in a text,"words = 'The quick brown fox jumps over the lazy dog'.split()
word_frequency = {}

for word in words:
    if word not in word_frequency:
        word_frequency[word] = 1
    else:
        word_frequency[word] += 1

print('Word Frequency:', word_frequency)"
Write a python function to find quotient of two numbers.,"def find(n,m):  
    q = n//m 
    return (q)"
Create a command-line program in Python which takes in three command-line arguments. The program should add the three arguments and print the result in the console.,"import sys

if __name__ == '__main__':
 args = sys.argv[1:]
 if len(args) != 3:
 print('Error: Not enough arguments provided')
 else:
 result = int(args[0]) + int(args[1]) + int(args[2])
 print('Result: ' + str(result))"
Write a function in Python to remove duplicate entries from a list.,"def removeDuplicates(input): 
    final_list = [] 
    for num in input: 
        if num not in final_list: 
            final_list.append(num) 
    return final_list 

lst = [1,2,2,3,3,4]
print(removeDuplicates(lst))"
Write a Python script to parse a JSON string and convert it into an array of strings.,"import json

def parse_json(json_string):
  json_data = json.loads(json_string)

  result = []
  for key, value in json_data.items():
    result.append(f'{key}: {value}')

  return result"
Write a Python script for scraping text from a webpage.,"import requests
from bs4 import BeautifulSoup

url = ""http://example.com""
page = requests.get(url)

soup = BeautifulSoup(page.content, 'html.parser')
text = soup.find_all(text=True)

for t in text:
	print(t)"
Create a vector in Python and insert 3 elements.,"vector = [] 
vector.append(1) 
vector.append(2) 
vector.append(3)"
Write a Python function that the user can call to pseudorandomly shuffle a given list,"import random 
def shuffle_list(lst):
    if len(lst) > 1:
        random.shuffle(lst)
    return lst"
Write Python code to implement a class like this.,"class Employee: 
    def __init__(self, name, age):
        self.name = name 
        self.age = age 
    
     def __str__(self): 
        return ""Employee({0}, {1})"".format(self.name,self.age) 
 
emp = Employee(""John"", 24) 
print(emp)"
Design an algorithm in Python for linear search on an array of integers.,"def linearSearch(arr, x): 
  
    for i in range(len(arr)): 
  
        if arr[i] == x: 
            return i 
  
    return -1"
Create a Python program that multiplies a list of numbers together,"def multiply_list(nums):
    product = 1
    for num in nums:
        product *= num
    return product

print(multiply_list([3, 6, 5, 4]))"
Create a Python program to print an encrypted message using a given cipher key.,"#Input
message = ""hellohello""
cipher_key = 3

#Solution
alphabet = ""abcdefghijklmnopqrstuvwxyz"";
cipher = alphabet[cipher_key:] + alphabet[:cipher_key]

encoded_message = """"
for char in message:
 encoded_message += cipher[alphabet.find(char)]

print(encoded_message) # khoorkhoor"
Implement a method in Python that takes two strings as input and returns true if one string is a rotation of the other.,"def isRotation(s1, s2): 
    if (len(s1) != len(s2)): 
        return False
  
    temp = s1 + s1 
    if (s2 in temp): 
        return True
    return False

result = isRotation('abc', 'cab')
print(result)"
Write a function in Python to get the intersection of two sorted lists.,"def intersection(list1, list2):
 result = []
 i = 0
 j = 0
 while i < len(list1) and j < len(list2):
 if list1[i] == list2[j]:
 result.append(list1[i])
 i += 1
 j += 1
 elif list1[i] < list2[j]:
 i += 1
 else:
 j += 1
 return result

print(intersection(list1, list2))
# Output: [7, 11]"
Edit the Python script to make sure the program will run correctly,"# This program prints out the numbers from 1 to 10
for x in range(10):
    print(x + 1)"
"Formulate a script in Python that takes as input an array of integers, and returns the highest number in the array.","def highest_number(arr):
    '''
    Function to get the highest number in an array of integers
    
    Parameters
    arr: list of integers
    
    Returns
    highest number in the array
    '''
    highest_num = arr[0]
    for num in arr:
        if num > highest_num:
            highest_num = num
    return highest_num"
Create a Python script that displays the current date and the upcoming weekend.,"from datetime import date
from datetime import timedelta
import datetime

today = datetime.date.today()
# Current date
print(""Today's date is:"", today)

# Coming weekend
weekend = today + timedelta(days=4-today.weekday())
# Weekend date
print(""The upcoming Weekend date is:"", weekend)"
Generate a correct python program to create a function to determine whether or not a given word is a palindrome.,"def is_palindrome(word):
    reversed_word = word[::-1]
    if word == reversed_word:
        return True
    else:
        return False"
Design a Python script to insert a given string at the beginning and end of a given array.,"def insertBeginningAndEnd(arr, str):
    result = []
    for element in arr:
        result.append(str + element + str)

    return result

result = insertBeginningAndEnd([""hello"", ""world""], ""***"")
print(result)"
Is it possible to write a function in Python to convert a given list of lists into a CMOV instruction?,"def listoflists_to_cmov(listoflists): 
    # Initialise CMOV array
    cmov = [0]*9
  
    # Fill CMOV array with given list of lists
    for i, list_ in enumerate(listoflists): 
        cmov[i*3:(i+1)*3] = list_

    # Return CMOV array 
    return cmov"
Generate a random four-digit number in Python.,"import random
rand_num = random.randint(1000, 9999)"
Write a Python program to take a list of words as input and print all of the words with at least 4 letters.,"words = ['apple', 'cat', 'elephant', 'banana', 'dog']

filtered_words = []

for word in words:
    if len(word) >= 4:
        filtered_words.append(word)

print(filtered_words)"
Can you write a Python program to extract the list of email addresses from a given webpage?,"import re
import requests

def extract_email_addresses(url):
    r = requests.get(url)
    emails = re.findall(r""[a-z0-9\.\-+_]+@[a-z0-9\.\-+_]+\.[a-z]+"", r.text)
    return emails

email_list = extract_email_addresses('https://example.org')

for email in email_list:
    print(email)"
Write a Python program to convert a given string to all uppercase.,"def to_uppercase(string):
    return string.upper()

print(to_uppercase(""hello World""))

# Outputs:
# HELLO WORLD"
Create a Python Program to perform a linear search on given data and print the index of the found element.,"def linear_search(data, target):
    for i in range(len(data)):
        if (data[i] == target):
            return i
    return -1

data = [7, 4, 3, 11, 9]
target = 11

index = linear_search(data, target)
if index != -1:
    print(""Element"", target, ""is present at index"", index)
else:
    print(""Element is not present in the given array"")"
"Using Python, implement a Pig Latin translator. The translator should accept a word as input and return its Pig Latin equivalent.","def pig_latin(word):
 vowels = ""aeiou""
 if word[0] in vowels: 
 return word + 'way'
 else:
 return word[1:] + word[0] + 'ay'

pig_latin_word = pig_latin(word)
print(pig_latin_word) # Output: ythonPay"
"Given a Python dictionary, write a function to invert the keys and values of the dictionary.","def invert_dict(dictionary):
    inverted_dict = {}
    for key, value in dictionary.items():
        inverted_dict[value] = key
    return inverted_dict

inverted_dict = invert_dict(my_dict)
print(inverted_dict)"
Build a Python program to find the maximum element in a list of numbers.,"def maxNum(numsList):
    maxNum = numsList[0]
    for num in numsList:
        if num > maxNum:
            maxNum = num
    return maxNum

numList = [4, 9, 10, 11, 12]
print(""The maximum number in the list is:"", maxNum(numList))"
Create a GUI application in Python that displays a greeting message when opened.,"import tkinter as tk
 
root = tk.Tk()

# Create greeting label
greeting = tk.Label(text='Hello World!')
greeting.pack()

tk.mainloop()"
"Create a function in Python that takes two parameters: a list and a number. The function should return the list sorted in ascending order, based on the result of each element in the list multiplied by the input number.","def sortList(arr, num): 
    arr.sort(key = lambda x: x*num) 
    return arr 
  
arr = [3, 1, 5, 4, 2] 
num = 5
print(sortList(arr, num))"
Write a python function to accept the strings which contains all vowels.,"def check(string): 
  if len(set(string).intersection(""AEIOUaeiou""))>=5: 
    return ('accepted') 
  else: 
    return (""not accepted"") "
Perform an optimization algorithm in Python to find the maximum value of a function given a set of initial conditions.,"from scipy.optimize import minimize

def f(x):
  return 3*x**2 + 2*x + 7

initial_conditions = [-3.2, -1.5, 2.4]

result = minimize(f, initial_conditions, method='nelder-mead')
max_val = result.fun"
Create a Python program to convert a binary string into its equivalent decimal value.,"def binary_to_decimal(binary_num):
    decimal_num = 0
    n = 0

    for i in range(len(binary_num)-1, -1, -1):
        if binary_num[i] == '1':
            decimal_num += 2**n
        
        n += 1
    
    return decimal_num"
Can you provide a Python code snippet to count the number of words in the given text?,"text = ""Today it is a beautiful day.""
words = text.split()
print(""Number of words in the given text:"", len(words))"
Design a data structure in Python to store integer values.,"class IntList:
    def __init__(self):
        self.values = []
   
    def add_value(self, value):
        self.values.append(value)
    
    def find_min(self):
        return min(self.values)"
Implement a search algorithm to quickly identify a specific character in a given string using Python.,"def search(s, ch):
    for i, c in enumerate(s):
        if c == ch:
            return i
    return -1

string = ""helloworld""
character = ""o""

index = search(string, character)
if index == -1:
    print(""Character not found"")
else:
    print(""Index of the character is"", index)"
Can you write a function in Python to find the maximum number from a given list?,"def find_max(lst):
  max_val = lst[0]
  for num in lst:
    if num > max_val:
      max_val = num
  return max_val

list_of_numbers = [9, 4, 2, 7, 5]
print(find_max(list_of_numbers))"
Construct a parser in Python to identify the parts of speech in a given sentence.,"import spacy

nlp = spacy.load('en_core_web_sm')

# Define the sentence to be parsed
sentence = 'This is a great day.'

# Create a Doc object
doc = nlp(sentence)

# Print the parts of speech
for token in doc:
    print(token.text, token.pos_)

# Output:
# This DET
# is VERB
# a DET
# great ADJ
# day NOUN
# . PUNCT"
Generate a Python script to assign grades to a set of test scores.,"def assignGrades(scores):
    grades = []
    for score in scores:
        if score >= 90:
            grades.append(""A"")
        elif score >= 80:
            grades.append(""B"")
        elif score >= 70:
            grades.append(""C"")
        elif score >= 65:
            grades.append(""D"")
        else:
            grades.append(""F"")
            
    return grades"
Write a function to find the list in a list of lists whose sum of elements is the highest.,"def max_sum_list(lists):
 return max(lists, key=sum)"
Create a Python program that prints the sum of all integers that are divisible by 3 and 5 from 0 to a given number.,"def sum_divisible_by_3_and_5(n):
 s = 0
 for i in range(n + 1):
 if i % 3 == 0 or i % 5 == 0:
 s += i
 return s

print(sum_divisible_by_3_and_5(10)) # 33"
"Design a Python class named ""Animal"" that has three instance variables: species, color and age.","class Animal:
    def __init__(self, species, color, age):
        self.species = species
        self.color = color
        self.age = age"
Modify the following Python funciton to return the second largest element in the list.,"def second_largest(x):
    x.sort()
    return x[-2]"
Design a Python program which takes two lists and returns their intersection.,"def intersection(list1, list2): 
    return list(set(list1) & set(list2)) 

# Output: [3, 6]"
Write a Python program to retrieve binary data from a given URL.,"import requests 
  
def getFileData(url):
  # Get binary data
  r = requests.get(url)
  return r.content

url = ""https://example.com/sample.txt""
data = getFileData(url)

print(data)"
Write a Python program to quickly search for a substring in a larger string.,"def search_substring(string, substring):
    index = string.find(substring)
    return index 

result = search_substring(""hello world"", ""or"")
print(result)"
Can you generate a greedy algorithm in Python for solving the coin change problem?,"def get_coins(coins, change):
	min_coins = change
	if change in coins:
		return [change]

	for i in [c for c in coins if c <= change]:
		num_coins = 1 + get_coins(coins, change-i)
		if len(num_coins) < min_coins:
			min_coins = num_coins
	return min_coins

# Test 
coins = [1, 6, 10]
change = 8
print(get_coins(coins, change)) # [1, 6, 1]"
Write a function to find the maximum of nth column from the given tuple list.,"def max_of_nth(test_list, N):
  res = max([sub[N] for sub in test_list])
  return (res) "
Implement a function in Python that generates a random password with a minimum length of 10 characters.,"import random
import string

def generate_random_password(n=10):
    chars = string.ascii_uppercase + string.ascii_lowercase + string.digits
    return ''.join(random.choice(chars) for _ in range(n))"
Create a Python Code Snippet to retrieve the last two elements from a list.,"lastTwoElements = [1, 2, 3, 4, 5][-2:]

print(lastTwoElements)
#Output: [4, 5]"
Write a function to find the perimeter of a rectangle.,"def rectangle_perimeter(l,b):
  perimeter=2*(l+b)
  return perimeter"
Create a Python function that reverses every other word in a given string.,"def reverseWords(sentence):
  words = sentence.split()
  reversed_sentence = []
  for i in range(len(words)):
    if (i % 2 == 0):
      reversed_sentence.append(words[i])
    else:
      reversed_sentence.append(words[i][::-1])
  return "" "".join(reversed_sentence)

print(reverseWords(""This is a test""))"
Write an object-oriented program in Python to create a calculator.,"class Calculator:
 def __init__(self):
 pass

 def add(self, num1, num2):
 return num1 + num2

def subtract(self, num1, num2):
 return num1 - num2 

def multiply(self, num1, num2):
 return num1 * num2

def divide(self, num1, num2):
 return num1 / num2"
Create a script in Python for classifying the sentiment of a text. The script should be able to handle input of various lengths and should return a sentiment score (on a scale from -1 to +1) for the text.,"import nltk

def sentiment_analysis(text):
 tokens = nltk.word_tokenize(text)
 score = 0
 for token in tokens:
 tag = nltk.pos_tag(token)[0]
 if tag[1] == 'positive':
 score += 1
 else:
 score -= 1
 return score / len(tokens)"
Create an array using Python containing the numbers 0 to 9.,"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
Write a script in Python to generate a histogram of a given data set.,"import matplotlib.pyplot as plt
plt.hist(data, 10)
plt.title(""Frequency Histogram"")
plt.xlabel(""Values"")
plt.ylabel(""Frequency"")
plt.show()"
Implement a sorting algorithm in Python.,"def bubbleSort(array):
    n = len(array)
    for i in range(n): 
        for j in range(0, n-i-1): 
            if array[j] > array[j+1] : 
                array[j], array[j+1] = array[j+1], array[j] 
    return array

print(bubbleSort(array))"
Generate a Python code snippet that prints out a list with the square of each number in the range from 1 to 10.,"for i in range(1,11):
    print(i**2)"
Create a function in Python that takes an array of strings and returns a new array of strings with all the vowels removed from each string.,"def remove_vowels(strings):
 vowels = ['a', 'e', 'i', 'o', 'u']
 result = []
 for string in strings:
 result.append(''.join(c for c in string if c not in vowels))
 return result"
"Create a Python program to store the strings ""Hello"" and ""World"" and print them in the same line.","string1 = ""Hello""
string2 = ""World""

print(string1 + "" "" + string2)"
Write a Python function to find the maximum and minimum number from a list of numbers.,"def find_max_min(list):
  max_number = max(list)
  min_number = min(list)
  return max_number, min_number

max_number, min_number = find_max_min(list)
print(""Max number: "", max_number)
print(""Min number: "", min_number)"
Omit any incomplete code from a given Python program by supplying correct expressions and indentation.,"if a < 20:
    b = c
    c = b"
Create a Python program to print out the largest palindrome number from a list of numbers.,"def is_palindrome(n):
 return str(n) == str(n)[::-1]

def largest_palindrome(nums):
 largest = 0
 for n in nums:
 if is_palindrome(n):
 largest = max(n, largest)
 return largest

nums = [4, 12, 25, 98, 9989]
largest = largest_palindrome(nums)
print(f'Largest palindrome from the list is {largest}')"
Create a program in Python that calculates the median of an array of integers without using the built-in function.,"def median(arr): 
 n = len(arr) 
 arr.sort() 

 # check for even case 
 if n % 2 == 0: 
 return (arr[int((n - 1)/2)] +
 arr[int(n/2)]) / 2

else: 
 return arr[int(n/2)] 

# test
arr = [1, 2, 3, 4, 5] 
print(""Median ="", median(arr)) 

# Output: Median = 3.0"
Generate a random list of numbers in Python of size n and output their sum.,"import random

n = 10
lst = [random.randrange(1, 101) for _ in range(n)]
sum_lst = sum(lst)

print(""Random list: "", lst)
print(""Sum of the list: "", sum_lst)"
Generate an algorithm in Python that calculates the sum of all even numbers between 1 and a given upper limit.,"def sum_of_even_numbers(n):
    sum = 0
    for i in range(2, n+1, 2):
        sum += i
 
    return sum"
Develop a function in Python that takes a string as input and finds a pattern in it and replaces it with a given set of characters.,"def replacePattern(string, pattern, replacement):
    return string.replace(pattern, replacement)

result = replacePattern(""abcabcabc"", ""abc"", ""xyz"")
print(result)"
Write a function to solve tiling problem.,"def get_noOfways(n):
    if (n == 0):
        return 0;
    if (n == 1):
        return 1; 
    return get_noOfways(n - 1) + get_noOfways(n - 2);"
Write a Python program that generates a multiplication table of a given size.,"def multiplication_table(n):
 for i in range(1, n+1):
   for j in range(1, n+1):
     print(str(i*j).rjust(4), end="" "")
   print()

multiplication_table(5)

# Output:
 1   2   3   4   5
 2   4   6   8  10
 3   6   9  12  15
 4   8  12  16  20
 5  10  15  20  25"
Write a Python function to find two numbers in an array with the largest sum.,"def max_sum(arr):
    max_val = float('-inf')
    for i in range(len(arr)):
        for j in range(i + 1, len(arr)):
            max_val = max(max_val, arr[i] + arr[j])
    return max_val

result = max_sum([3, 10, -3, -2, 5])
print(result)"
Generate a Python script that computes the area of an ellipse given its semi-major axis and semi-minor axis as inputs.,"import math

# Semi-Major Axis
a = 5

# Semi-Minor Axis
b = 3

# Calculate the area of an ellipse
area = math.pi * a * b

print(""The area of the ellipse is"", area)"
Construct a python dictionary from the following data.,"mydict = {
    'fruit': 'apple',
    'animal': 'cat',
    'city': 'London'
}"
Create a Python program which takes a list of numbers and adds them together.,"def sum_list(nums): 
	total = 0
	for num in nums: 
		total += num 
	return total 

nums = [1, 2, 3, 4, 5] 
print(sum_list(nums)) # 15"
Write a Python program to parse an XML document.,"""""""
Parse an XML document
""""""

import xml.etree.ElementTree as ET

# Parse the XML file
root = ET.parse('note.xml').getroot()

# Print out the XML elements
for item in root:
    print(f""{item.tag}: {item.text}"")"
Write a Python script to find the second largest number in a given list of numbers.,"def second_largest(arr):
  max_ = max(arr)
  new_arr = list(filter(lambda x: x != max_, arr))
  return max(new_arr)"
Generate a Python program to perform string matching.,"def string_match(str1, str2):
    if len(str1) > len(str2):
        longer, shorter = str1, str2
    else:
        longer, shorter = str2, str1

    # Check if strings are the same for all possible shifts
    for i in range(len(longer)-len(shorter)+1):
        if longer[i:len(shorter)+i] == shorter:
            return True

    return False"
"Given a list of strings, write a Python code snippet to print all strings that begin with a letter 'a'.","for item in [""apple"", ""banana"", ""orange"", ""avocado""]:
 if item.startswith('a'):
 print(item)

# Output:
apple
avocado"
Write a function to find the focus of a parabola.,"def parabola_focus(a, b, c): 
  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))
  return focus"
Develop a Python function that takes a list of strings and returns a new list with the strings sorted in alphabetical order.,"def sort_list(words):
    return sorted(words)

sorted_list = sort_list(['Elephant', 'Cat', 'Dog'])
print(sorted_list)"
Develop a function in Python that takes an individual name as an input and output its acronym.,"def make_acronym(name):
    acronym = """".join([word[0] for word in name.split()]).upper()
    return acronym

result = make_acronym(""Oscar Thomas"")
print(result)"
Write a Python program to convert a list into a tuple.,"list = [3, 4, 5, 6]
tuple = tuple(list)
print(""Tuple:"", tuple)"
Create a Python program to classify emails into two categories: spam and ham.,"import re

def is_spam(email):
    pattern = r'viagra|cialis|pharmacy'
    if re.search(pattern, email):
        return True
    else:
        return False"
Implement a Python program to encrypt a given message with a given key.,"def encrypt_message(message, key): 
    encrypted_message = """" 
      
    for i in range(len(message)): 
        x = (ord(message[i]) + 
             ord(key[i % len(key)])) % 26
        x += ord('A') 
        encrypted_message += chr(x) 
          
    return encrypted_message"
Create a program in Python that implements a sorting algorithm of your choice to sort a given array of integers in ascending order.,"def sort_array(A):
    if len(A) <= 1:
        return A

    pivot = A[0]
    left = [item for item in A if item < pivot]
    right = [item for item in A if item > pivot]

    return sort_array(left) + [pivot] + sort_array(right)"
Return a Python generator expression that prints all even numbers from 1 to 10 except 7.,"evens = (x for x in range(1, 11) if x % 2 == 0 and x != 7)
for x in evens:
    print(x)"
Write a Python program that takes two sets of strings and creates a list of strings that are present in both.,"def find_common(set_a, set_b):
  return [item for item in set_a if item in set_b]"
Write a Python program to construct a parser to detect an input has errors or not.,"def detect_errors(input_code):
 error_tokens = [""!"", ""@"", ""#"", ""$""]
 counter = 0
 for line in input_code.splitlines():
 tokens = line.strip().split()
 if any(x in tokens for x in error_tokens):
 counter += 1
 if counter > 0:
 return True
 else:
 return False"
Write a Python program which randomly selects 3 items from a list of 5 items and prints them to the console.,"import random

list = [""apple"", ""banana"", ""orange"", ""strawberry"", ""grape""]
random.shuffle(list)

for item in list[:3]:
 print(item)"
Generate a Python program to fetch data from a website.,"import requests

def main():
    url = 'https://www.example.com'
    
    r = requests.get(url)
    if r.status_code == 200:
        content = r.content
        print(content)
    else:
        print(""Failed to fetch data."")

if __name__ == ""__main__"":
    main()"
Write Python code to generate a random set of 10 IP addresses in the range of 192.168.1.0 to 192.168.1.255.,"import random

for i in range(10):
 ip_address = ""192.168.1."" + str(random.randrange(0, 255))
 print(ip_address)"
Create a web crawler in Python to extract text from web pages.,"import requests
from bs4 import BeautifulSoup

def web_crawler(url):
    response = requests.get(url)
    if response.status_code == 200:
        html = response.text
        soup = BeautifulSoup(html, ""lxml"")
        text = soup.findAll(text=True)
        return text"
Create a python script to generate the product of all elements in a sequence.,"def product_of_sequence(sequence):
    product = 1
    for num in sequence:
        product *= num
    return product

seq = [2,4,6]
print(product_of_sequence(seq))"
Create a Python program to decide whether a given string is a valid JSON or an invalid one.,"import json

def is_valid_json(string):
    try:
        json.loads(string)
        return True
    except:
        return False"
Write a Python program that finds the average of three numbers.,"def avg(a, b, c): 
  return (a + b + c)/3 
  
a = 21
b = 15
c = 10
  
average = avg(a, b, c) 
  
print(""Average of three numbers is:"", average)"
Develop a Python program to check if a given number is a power of two.,"def is_power_of_two(x):
  while x % 2 == 0 and x > 1:
    x = x / 2
  return x == 1

num = 16

print(is_power_of_two(num))"
Generate a Python code for replicating an output after switching the contents of two strings.,"str1, str2 = 'Hello', 'World'
str1, str2 = str2, str1

print(""After swapping: str1 ="", str1, ""and str2 ="", str2)"
Create a Python script to print all prime numbers between 1 to 1000.,"def print_prime_numbers():
    for num in range(2, 1001):

        for i in range(2, num):
            if (num % i) == 0:
                break
        else:
            print(num)
print_prime_numbers()"
Write a Python program to filter out the words containing in a list that are 6 characters long.,filtered_words = [ word for word in words if len(word) == 6 ]
Write a Python code snippet to display a formatted date and time.,"import datetime

dateandtime = datetime.datetime.now()
# print date and time string
print(dateandtime.strftime(""%d/%m/%Y %H:%M:%S""))"
"Create a python function that finds the median value of a list of integers, where the length of the list is greater than two.","def find_median(lst):
	lst.sort() 
	if len(lst) % 2 != 0: 
		return lst[len(lst)//2]
	return (lst[len(lst)//2] + lst[len(lst)//2 - 1]) / 2.0"
Generate Python code to generate a histogram from a given data set.,"import matplotlib.pyplot as plt 

def generate_histogram(data):
    plt.hist(data)
    plt.xlabel(""Data"")
    plt.ylabel(""Frequency"")
    plt.title(""Histogram of Data"")
    plt.show()
    
generate_histogram(data)"
Create a program in Python to implement linear search.,"def linear_search(data, target):
    for i in range(len(data)): 
        if data[i] == target: 
            return i
    return -1"
Create a Python code snippet to print the current time in the format `hh:mm:ss`.,"# Import datetime module
import datetime

# Get the current time
now = datetime.datetime.now()

# Print the current time in the format hh:mm:ss
print(now.strftime(""%H:%M:%S""))"
Write a function that matches a string that has an a followed by one or more b's.,"import re
def text_match_one(text):
        patterns = 'ab+?'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')
"
Develop a Python program to count the total characters from a given list of words.,"words = [""Apple"", ""Banana"", ""Orange""]
total_chars = 0

for word in words:
    total_chars += len(word)

print(total_chars) # Output: 15"
Create a Python script for a web-based chatbot which takes the user's name and responds with a greeting,"name = input(""What is your name? "")

# greeting the user
print(f""Hello {name}, nice to meet you!"")"
Edit the following python code to print all the elements of a list that are divisible by 7.,"my_list = [14, 35, 42, 49, 56, 63, 70]

for element in my_list:
 if element % 7 == 0:
 print(element) 
  
# Output:
14
 
42
 
49
 
56
 
63
 
70"
Create a Python script that reads two integers from the user and prints out their sum.,"# Taking two numbers from the user
num1 = int(input(""Enter first number: ""))
num2 = int(input(""Enter second number: ""))

# Calculating the sum of two numbers
sum = num1 + num2

# Printing out the sum
print(""The sum of the two numbers is:"", sum)"
Develop a Python program to find the sum of first n even numbers.,"def find_sum(n):
    sum = 0
    for i in range(1, n+1):
        if i % 2 == 0:
            sum += i
    return sum

n = 7
print(""The sum of first n even numbers is:"", find_sum(n))"
Create regular expression in Python to check for a valid hex color.,"import re

HEX_COLOR_REGEX = re.compile(r'^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$')"
Construct a while-loop in Python that prints all the even numbers between 0 and 20,"i = 0

while i <= 20:
    if i % 2 == 0:
        print(i)
    i += 1"
Create a python program to print the square root of an integer.,"def square_root(n):
    """"""This function takes an integer n and prints its square root.
    
    Args:
        n (int): The integer to calculate the square root of.
    
    Returns:
        None
    """"""
    import math
    print(math.sqrt(n))"
Create a Python program that sorts a list of tuples by the second item.,"def sort_by_second_item(list_of_tuples):
  return sorted(list_of_tuples, key=lambda item: item[1])

sorted_list = sort_by_second_item(list_of_tuples)
print(sorted_list)

# Output: [('Orange', 1), ('Apple', 2), ('Banana', 3), ('Grape', 4)]"
Write a Python program to search for an item in a list.,"def search_list(lst, elem):
  for i in range(len(lst)): 
    if lst[i] == elem: 
      return i 
  return -1"
Write a python function to find the position of the last removed element from the given array.,"import math as mt 
def get_Position(a,n,m): 
    for i in range(n): 
        a[i] = (a[i] // m + (a[i] % m != 0))  
    result,maxx = -1,-1
    for i in range(n - 1,-1,-1): 
        if (maxx < a[i]): 
            maxx = a[i] 
            result = i 
    return result + 1"
Create a class in Python for representing a Stack data structure. The class should support two methods: push and pop.,"class Stack:
 def __init__(self):
  self._items = []

 def push(self, item):
  self._items.append(item)

 def pop(self):
  return self._items.pop()"
Write a Python program to generate a HTML table with a list of employees.,"employee_list = [""John"", ""Kate"", ""Mark""]

html = ""<table>\n<tr>"";
for employee in employee_list:
  html += ""<td>""+employee+""</td>\n"";
html += ""</tr>\n</table>""

print(html)"
"Generate a class in Python that represents a data record. The class should have three fields: name (string), age (integer) and gender (string).","class DataRecord:
 def __init__(self, name, age, gender):
 self.name = name
 self.age = age
 self.gender = gender"
Create a Python program to compute the value of the Fibonacci number at a specified position,"def fibonacci(n):
    if n == 0 or n == 1:
        return n
    else:
        return fibonacci(n-1) + fibonacci(n-2)"
Write some python code that prints out the following information,"student_scores = [{'name': 'John', 'mark': 75}, {'name': 'Alex', 'mark': 92}, {'name': 'Tiffany', 'mark': 83}, {'name': 'Eddie', 'mark': 67}]

for student in student_scores:
    print(f'Name: {student[""name""]}, Mark: {student[""mark""]}')"
Write a Python program to detect and remove the duplicates in a list.,"def remove_duplicates(lst): 
    return list(dict.fromkeys(lst)) 
  
lst = [1, 20, 4, 6, 20, 4, 1, 6] 
print(remove_duplicates(lst))"
Write a function to zip two given lists of lists.,"def zip_list(list1,list2):  
 result = list(map(list.__add__, list1, list2)) 
 return result"
Provide a function in Python for squaring all elements of a given array.,"def square_elements(arr):
    return [num**2 for num in arr]"
Create a program in Python to calculate the Euclidean distance between two points.,"import math

x1 = 2
y1 = 3
x2 = 6
y2 = 8
distance = math.sqrt( (x2 - x1)**2 + (y2 - y1)**2 )

print(distance)"
Develop a Python program that accepts a list of numbers and prints the 2nd largest and the 3rd smallest elements from the list.,"def main():
 numbers = [3, 5, 2, 4, 9, 7]
 numbers.sort()
 
 print('The 2nd largest number is', numbers[-2])
 print('The 3rd smallest number is', numbers[2])
 
if __name__ == '__main__':
 main()"
Write a python program that displays all prime numbers up to 100,"# Print all prime numbers up to 100

for num in range(2,101):  
   if all(num%i!=0 for i in range(2,num)):
      print(num)"
Generate a for loop to iterate over a list of numbers and write the output using python.,"for num in [1, 2, 3, 4, 5]:
    print(num)"
Create an optimization problem in Python and finds the solution using a numerical solver.,"from scipy.optimize import minimize

def objFun(x):
  return (x[0] - 1)**2 + (x[1] - 4)**2

x0 = [0,0]

opt = minimize(objFun, x0)

print(opt)

# Output is a OptimizeResult object
# x: array([1., 4.])"
Implement Bubble Sort using Python.,"def bubble_sort(arr):
    for i in range(len(arr)):
		for j in range(len(arr)-1-i):
			if arr[j] > arr[j+1]:
				temp = arr[j]
				arr[j] = arr[j+1]
				arr[j+1] = temp
				
arr = [6, 2, 5, 1, 8]

bubble_sort(arr)

print(arr)"
"Change the following Pythoncode to display ""Hello, World!"" on the web page:","from flask import Flask
app = Flask(__name__)

@app.route(""/"")
def hello():
	return ""Hello, World!""

if __name__ == ""__main__"":
	app.run()"
Write a function to remove duplicates from a list of lists.,"import itertools
def remove_duplicate(list1):
 list.sort(list1)
 remove_duplicate = list(list1 for list1,_ in itertools.groupby(list1))
 return remove_duplicate"
Create a Python function to format a string with the proper case and punctuation,"def format_string(string):
    """"""Function to format a string with the proper case and punctuation""""""
    return string.lower().capitalize() + ""."""
Design a linear regression algorithm in Python,"def linear_regression(X,Y):
    n = len(X)
    sumx = sum([x**2 for x in X])
    sumy = sum([y**2 for y in Y])
    sumxy = sum([x*y for x,y in zip(X,Y)])
    # calculate slope 
    m = (n*sumxy - sum(X)*sum(Y))/(n*sumx - sum(X)**2) 
    # calculate intercept  
    c = sum(Y)/n - (m*sum(X))/n 
  
    return m, c"
Create a program in Python to sum the multiples of 3 or 5 between 1 and 1000,"total = 0

for i in range(1,1000):
    if i % 3 == 0 or i % 5 == 0:
        total += i

print(total)"
Write a Python function to find the difference between two given dates in days.,"from datetime import datetime

def find_difference_in_days(date1, date2):
    date1 = datetime.strptime(date1, '%Y-%m-%d')
    date2 = datetime.strptime(date2, '%Y-%m-%d')
    return abs((date2 - date1).days)"
"Create a function in Python to calculate the sum of squares for all numbers within a range given two integers, n and m.","def sum_of_squares(n, m):
    result = 0
    for i in range(n, m+1):
        result += i*i
    return result
  
print(sum_of_squares(n, m))"
Create a Python program to print a given string with each character's ASCII code.,"def print_ascii(text):
    '''This function will print a given string with each character's ASCII code.'''
    for ch in text:
        print(f'{ch} : {ord(ch)}')

print_ascii('Hello world!')

# Output:
# H : 72
# e : 101
# l : 108
# l : 108
# o : 111
#  : 32
# w : 119
# o : 111
# r : 114
# l : 108
# d : 100
# ! : 33"
Write a Python program that takes a list of strings as input and prints out all the strings in sorted order.,"def sort_list_of_strings(list_of_strings):
    list_of_strings.sort()
    for string in list_of_strings:
        print(string)"
Develop a python code to compute the sum of digits in an integer.,"def sum_digits(n):
    s = 0
    while (n > 0):
        s = s + n % 10
        n = n//10
    return s

n = 1234
print(sum_digits(n))"
Create a function in Python that takes in a list of integers and prints out the largest multiple of 3.,"def largestMultipleOf3(list): 
    list.sort() 
    running_sum = 0
    for i in range(len(list)): 
        running_sum += list[i] 

    if running_sum % 3 == 0:  
        return running_sum  

    return largestMultipleOf3(list[:-1]) 

list = [3, 15, 4, 6, 5] 
print(largestMultipleOf3(list)) // 15"
Write a function to check whether the given month number contains 30 days or not.,"def check_monthnumber_number(monthnum3):
  if(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):
    return True
  else:
    return False"
Create a table in python using a dictionary,"table = {
    ""Column1"": [1, 2, 3],
    ""Column2"": [""A"", ""B"", ""C""],
    ""Column3"": [True, False, False]
    }"
Suggest a completion for processing a web form using Python.,"import requests

# Get form's (POST) data
data = {
  ""name"": ""John Doe"",
  ""email"": ""john.doe@example.com"",
  ""message"": ""Hello""
}

# Send POST request
r = requests.post(""http://www.example.com/submit-form.php"", params=data)

# Get web form's response
print(r.text)"
Write a function to count the number of syllables in a word using regular expression in Python?,"import re

def count_syllables(word):
  pattern = r'[aeiouy]+'
  return len(re.findall(pattern, word))

print(count_syllables('syllable'))  # 3
print(count_syllables('balloons'))  # 2"
Generate a Python program to classify a given set of data,"def classify_rain(temp, humidity):
    if temp < 70 and humidity > 0.7:
        return 'raining'
    else:
        return 'not raining'"
Generate a random alphanumeric string in Python of length 10.,"import random 

alphanumeric_string = ''.join(random.choices(string.ascii_letters + string.digits, k=10))

print(alphanumeric_string)"
Design a program in Python that calculates the area of a triangle given the three side lengths.,"def area_triangle(a, b, c): 
    # calculate the semi-perimeter 
    s = (a + b + c)/2
  
    # calculate the area 
    Area = (s*(s-a)*(s-b)*(s-c)) ** 0.5
  
    return Area"
"Generate a Python class for an address book program. The class should contain methods for adding a new person's name, phone number and email, and editing an existing contact.","class AddressBook:
 def __init__(self):
 self.people = {}

 def add_person(self, name):
 self.people[name] = { 'phone': None, 'email': None }
 
 def edit_person(self, name, phone=None, email=None):
 person = self.people[name]
 if phone: 
 person['phone'] = phone
 if email:
 person['email'] = email"
"Develop a Python program to generate a Fibonacci series up to nth element, where n is an input.","def fibonacci(n): 
    a = 0
    b = 1
    if n < 0: 
        print(""Incorrect input"") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2,n): 
            c = a + b 
            a = b 
            b = c 
        return b 
  
# Driver Program 
  
print(fibonacci(10))"
Can you develop a Python class to calculate the cross entropy loss between two probability distributions?,"import numpy as np

class CrossEntropy:
    def __init__(self):
        pass
    
    def loss(self, p, q):
        return - np.sum(p * np.log(q))"
Write Python code to read input from the user and output a greeting in the form of 'Hello <Name>!',"name = input('What is your name? ')
print(f'Hello {name}!')"
Create a Python program to read a string and return the character with the highest frequency.,"import collections

str = ""Sample string""
count = collections.Counter(str)
highest_freq = 0
highest_freq_char = ''

for char, value in count.items():
    if value > highest_freq:
        highest_freq = value
        highest_freq_char = char

print(""The character {} has the highest frequency of {} in this string"".format(highest_freq_char, highest_freq))"
Write a Python program to reverse a string without using reversed() function.,"def reverse_string(input_string):
    # Initialize a new_string
    new_string = """"

    # Traverse in the string starting from the end
    for i in range(len(input_string)-1,-1,-1):
        # Append each character to the new_string
        new_string = new_string + input_string[i]

    # Return the reversed_string
    return new_string"
Write a function to convert the given decimal number to its binary equivalent.,"def decimal_to_binary(n): 
    return bin(n).replace(""0b"","""") "
Create a Python script to read data from a database.,"import psycopg2

connection = psycopg2.connect(database='dbname', user='user', password='password', host='localhost', port='5432')

cursor = connection.cursor()

cursor.execute('SELECT * FROM customers')

rows = cursor.fetchall()

for row in rows:
    print(row)
    
cursor.close()"
Write a function to get the sum of a non-negative integer.,"def sum_digits(n):
  if n == 0:
    return 0
  else:
    return n % 10 + sum_digits(int(n / 10))"
Develop a simple game loop in Python.,"while True:
    # Show game board
    print(""Welcome to your game!"")
	
    # Get user input
    user_action = input('What would you like to do? ')
	
    # Process user input
    if user_action == 'quit':
        break
		
    # Do something with user input
    elif user_action == 'play':
        print('Playing...')
    else:
        print('Invalid input.')"
Create a Python script to connect to a domain and fetch the contents of its homepage,"import requests

url = ""https://www.example.com/"" 
response = requests.get(url) 

if response.status_code == 200: 
    print(response.content) 
else:
    print(""Error fetching the page"")"
Write a function to perform index wise multiplication of tuple elements in the given two tuples.,"def index_multiplication(test_tup1, test_tup2):
  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) "
Enhance an existing python program to include a function,"def hello():
    print(""Hello world!"")

def goodbye():
    print(""Goodbye!"")

def greetings():
    hello()
    goodbye()

greetings()"
"Develop a Python program that prints ""Hello, World!"" whenever it is run.","#Python program to print ""Hello World!""

print(""Hello, World!"")"
"Rewrite the following code snippet from Python to JavaScript, taking into account any changes in syntax or function calls.

m = ""Hello, World!""
print(m)","let m = 'Hello, World!';
console.log(m);"
Write a Python program to generate an SQL query from a given set of parameters.,"def generate_sql_query(table_name, fields, filter_clause):
 query = ""SELECT ""
 for i in range(len(fields)-1):
 query += fields[i] + "", ""
 query += fields[-1]
 query += "" FROM "" + table_name + "" WHERE "" + filter_clause
 return query"
Implement a bubble sorting algorithm in Python.,"def bubbleSort(arr): 
    n = len(arr) 
  
    # Traverse through all array elements 
    for i in range(n): 
  
        # Last i elements are already in place 
        for j in range(0, n-i-1): 
  
            # traverse the array from 0 to n-i-1 
            # Swap if the element found is greater 
            # than the next element 
            if arr[j] > arr[j+1] : 
                arr[j], arr[j+1] = arr[j+1], arr[j]"
Write a Python program to generate a Pascal's triangle with a given number of rows.,"1 
1 1 
1 2 1 
1 3 3 1 
1 4 6 4 1 
1 5 10 10 5 1 
1 6 15 20 15 6 1 
1 7 21 35 35 21 7 1"
Create a python function that takes in two strings and output their combined length.,"def get_string_length(string_1, string_2):
    return len(string_1 + string_2)"
Write a python code to,"def mean(lst):
    total = 0
    for x in lst:
        total += x
    return total / len(lst)"
Write a python program to print out the sum of numbers up to an inputted number.,"def sum_up(n):
    sum = 0
    for i in range(n + 1):
        sum += i
    return sum

num = int(input(""Enter a number: ""))
print(""Sum of numbers up to"", num, ""is"", sum_up(num))"
"Create a function in Python to find all elements in a list that are negative, and print them.","def find_negatives(l):
  negative_numbers = []
  for num in l:
    if num < 0:
      negative_numbers.append(num)
  print(negative_numbers)

find_negatives(list) # prints [-3, -9]"
Write a Python program to sort a dictionary by its keys.,"def sort_dict_keys(d):
  sorted_keys = sorted(d.keys())
  sorted_dict = {key: d[key] for key in sorted_keys}
  return sorted_dict"
Write a Python program to search a given string for any repeated characters.,"def find_repeat_characters(string):
 repeat_characters = set()
 for char in string:
 if string.count(char) > 1 and char not in repeat_characters:
 repeat_characters.add(char)
 return repeat_characters

string = 'AAAAB'
print(find_repeat_characters(string)) # {'A'}"
Write a Python program that takes two numbers and prints their multiplication table.,"def multiplicationTable(a, b):
    for i in range(1, b+1):
        print(""{} x {} = {}"".format(a, i, a * i))


multiplicationTable(9, 10) #prints a multiplication table for 9 and 10"
Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.,"def maximum_product(nums):
    import heapq
    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)
    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])"
Write a Python program to reduce the given array into a single element.,"def reduce_arr(arr):
    result = 0
    for i in arr:
        result += i
    return result

reduce_arr(arr)"
Create a Python script to extract the title of a web page.,"import requests
from bs4 import BeautifulSoup

# Function to extract the title of a web page
def extract_title(url):
    response = requests.get(url)
    html = response.text

    soup = BeautifulSoup(html, 'html.parser')
    return soup.title.string

url = 'https://www.example.com'
title = extract_title(url)
print(title)  # Output 'Example Domain'"
Write a Python function that takes a list of strings and checks if all the strings have the same length.,"def check_strings_lengths(string_list):
    string_length = len(string_list[0])

    for string in string_list:
        if len(string) != string_length:
            return False

    return True"
Rewrite the given code in Python.,"sum = 0
for i in range(n):
    sum += i"
Create a function in Python that takes a list of strings as parameter and outputs a new list with each string sorted in alphabetical order,"def sort_list(a_list):
 '''
 Sort the given list of strings in alphabetical order

 Args:
 a_list (list): List of strings

 Returns:
 list: Returns the sorted list in alphabetical order
 '''

 return sorted(a_list)"
Construct a regex pattern in Python to detect URLs.,"import re

url_pattern = re.compile(
    r'^(?:http|ftp)s?://' # http:// or https://
    r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}\.?)|' #domain...
    r'localhost|' #localhost...
    r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})' # ...or ip
    r'(?::\d+)?' # optional port
    r'(?:/?|[/?]\S+)$', re.IGNORECASE)"
Create a function in Python that takes four parameters and returns the highest value.,"def get_highest(val1, val2, val3, val4):
 return max([val1, val2, val3, val4])"
Generate a list of unique strings with length of 8 bytes in Python.,"import random
import string

def generate_list_of_strings(length, count):
    result = []
    for _ in range(count):
        result.append(''.join(random.choice(string.ascii_letters + string.digits) for _ in range(length)))
    return result

if __name__ == '__main__':
    strings_list = generate_list_of_strings(8, 10)
    print(""Randomly generated strings:"")
    print(strings_list)"
"Create a Python class called Person that includes parameters for a person's name, age, gender, and nationality.","class Person:
 def __init__(self, name, age, gender, nationality):
   self.name = name 
   self.age = age
   self.gender = gender
   self.nationality = nationality

def get_name(self):
   return self.name

def get_age(self):
   return self.age

def get_gender(self):
   return self.gender

def get_nationality(self):
   return self.nationality"
"Using Python, generate a random 8 character alphanumeric string.","import random
import string

def generate_random_string():
    letters_and_digits = string.ascii_letters + string.digits
    return ''.join((random.choice(letters_and_digits) for i in range(8)))

random_string = generate_random_string()
print(random_string)"
Write a Python program to print the count of all even numbers in the given list.,"my_list = [1, 2, 3, 4, 5, 6, 7, 8]

count = 0
for i in my_list:
    if i % 2 == 0:
        count += 1

print(count)"
Write a Python function to compute the factorial of an integer.,"def factorial(n):
    if n < 0:
        print('Factorial does not exist for a negative number.')
    elif n == 0 or n == 1:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(4))"
Create a program to convert a text document to an HTML webpage using Python.,"from bs4 import BeautifulSoup

# Read and parse the document
with open('sample.txt', 'r') as file:
  content = file.read()

# Create the HTML
soup = BeautifulSoup(content, 'html.parser')
html_content = soup.prettify()

# Write to the file
with open('sample.html', 'w') as file:
  file.write(html_content)"
Write a python program to convert a string to the list of words.,"def string_to_list(string):
    return string.split()"
Create a List of all the alphabet letters in Python.,"alphabet = [""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"", ""i"", ""j"", ""k"", ""l"", ""m"", ""n"", ""o"", ""p"", ""q"", ""r"", ""s"", ""t"", ""u"", ""v"", ""w"", ""x"", ""y"", ""z""]"
Create a function in Python to print all numbers from N to 1 in reverse order.,"def reverse_print(n):
    for i in range(n, 0, -1):
        print(i)

n = 5
reverse_print(n)"
Implement a function in Python that takes a list of string and sorts them alphabetically.,"def sortStrings(wordsList):
    sorted_list = sorted(wordsList)
    return sorted_list
 
wordsList = [""apple"", ""banana"", ""mango"", ""pear""]
sorted_words = sortStrings(wordsList)
print(sorted_words)"
Create an algorithm in Python that computes the sum of an array,"def array_sum(arr):
    sum = 0
    for num in arr:
        sum += num
    return sum

print(array_sum([10, 20, 30, 40]))

# Output: 100"
Write a Python program to check if a number is a palindrome.,"def is_palindrome(num):
    temp = num
    rev = 0
    
    while (temp > 0):
        dig = temp % 10
        rev = rev * 10 + dig
        temp = temp // 10
    
    if (num == rev):
        return True
    else:
        return False"
Format the given string with line breaks and indentations to make it a valid Python code.,"for i in range(10):
  print(i)"
Write a Python program that will calculate the correlation between two different datasets.,"import numpy as np

data1 = [1,2,3,4,5]
data2 = [2,4,6,8,10]

correlation = np.corrcoef(data1, data2)[0][1]
print(correlation)

# Output
0.98198050606"
Create a Python script to generate the following pattern:,"for i in range(1,6):
    for j in range(1,i+1):
        print(""*"", end="" "")
    print()"
Analyze a Python program to check if any variable names are longer than 20 characters.,There is a variable (long_variable_name_is_not_good_practice) with a name that is longer than 20 characters.
Write a function to find the largest possible value of k such that k modulo x is y.,"import sys 
def find_max_val(n, x, y): 
	ans = -sys.maxsize 
	for k in range(n + 1): 
		if (k % x == y): 
			ans = max(ans, k) 
	return (ans if (ans >= 0 and
					ans <= n) else -1) "
Generate an optimized python program for splitting an array into two subarrays with equal sum.,"def split_array_sum(arr):
  sum_arr = sum(arr)
  half_sum = sum_arr // 2
  current_sum = 0
  left_index = 0
  
  for index, value in enumerate(arr):
    current_sum += value
    if current_sum >= half_sum:
        left_index = index
        break
  
  left_arr = arr[:left_index+1]
  right_arr = arr[left_index+1:]
  return left_arr, right_arr"
Create a Python function to calculate the sum of the list elements.,"def list_sum(list_in):
 return sum(list_in)

# or
def list_sum(list_in):
 total_sum = 0
 
 for num in list_in:
 total_sum += num
 
 return total_sum"
Create a core library in Python which can be used to create a web application.,"import flask

app = flask.Flask(__name__)

# Create routes and functions for the web application
@app.route('/')
def index():
    return 'This is the main page of the web application!'"
Generate a Python program to search for a substring within a string.,"def search_substring(text, substring):
    if substring in text:
        return True
    else:
        return False

result = search_substring(text, substring)
print(result)"
Edit the following Python program to make it run without any syntax errors.,"def sum(alist):
    total = 0
    for i in alist:
        total += i
    return total"
Create a Python program that can detect vowels in a given string.,"def detect_vowels(inp_str):
    vowels = set(['a', 'e', 'i', 'o', 'u'])
    return [char for char in inp_str if char.lower() in vowels]"
Automate the task of checking if an array of numbers is in sorted order using a Python program.,"def is_sorted(nums):
    for i, num in enumerate(nums[:-1]):
        if num > nums[i + 1]:
            return False
    return True"
"Create a Python dictionary that stores customer data. The keys should be customer ids (strings) and the values should be a tuple containing the customer's name, email, and city.","customer_data = {
 '001': ('John', 'john@example.com', 'London'),
 '002': ('Jane', 'jane@example.com', 'New York'),
 '003': ('Bob', 'bob@example.com', 'Los Angeles')
}"
Create a Python program that takes two numbers as input and prints out the greatest common divisor (GCD) of the two numbers.,"def gcd(num1, num2):
    if num2 == 0:
        return num1
    return gcd(num2, num1 % num2)

print(gcd(num1, num2))"
Write a Python program to calculate the mode of the given list of numbers.,"def find_mode(numbers):
    most_freq = 0
    mode = None

    counts = {}
    for num in numbers:
        if num in counts:
            counts[num] += 1
        else:
            counts[num] = 1
    
    for num in counts:
        if counts[num] > most_freq:
            most_freq = counts[num]
            mode = num
    
    return mode"
"In Python, how would you return the last N elements from a list?","def last_elements(lst, n):
    return lst[-n:]"
Write a Python program to generate a list of random numbers between 1 to 100.,"import random
 
def random_numbers(n):
   list_num = []
   for i in range(n):
       list_num.append(random.randint(1, 100))
   return list_num

list_num = random_numbers(10) 
print(list_num)"
Develop a Python function that takes two strings as input and returns the longer string.,"def longer_string(string1, string2):
    if len(string1) > len(string2):
        return string1
    else:
        return string2"
Edit the given Python code to print the multiplication table for given number.,"number = 5
for i in range(1, 11): 
    print(number, 'x', i, '=', number*i)"
Design a program in Python to find all words present in a string.,"def find_words(s):
    words = []
    word = []
    for char in s:
        if char.isalpha():
            word.append(char)
        else:
            if word:
                words.append("""".join(word))
            word = []
    if word:
        words.append("""".join(word))
    return words

if __name__ == '__main__':
    print(find_words(""This is a sample string""))"
Generate a valid python program to remove the duplicate elements from a given list.,"def remove_duplicates(input_list):
    result = []
    for ele in input_list:
        if ele not in result:
            result.append(ele)
    return result"
Build a Python class to identify if a provided number is prime or composite.,"class PrimeNumber:
    def __init__(self, num):
        self.num = num

    def is_prime(self):
        for i in range(2, self.num):
            if(self.num % i == 0):
                return False
        return True

num = 10
obj = PrimeNumber(num)

if obj.is_prime():
    print(""Number is Prime"")
else:
    print(""Number is Composite"")"
"Create a class called ""Person"" using Python, with attributes ""name"", ""age"" and ""country"".","class Person:
    def __init__(self, name, age, country):
        self.name = name
        self.age = age
        self.country = country
    def get_name(self):
        return self.name
    def get_age(self):
        return self.age
    def get_country(self):
        return self.country"
Write a Python function to calculate the sum of two numbers using recursion.,"def recursive_sum(x, y):
    if x == 0:
        return y 
    else: 
        return recursive_sum(x - 1, y + 1) 

print(recursive_sum(x, y)) # 12"
Optimize a program in Python for searching for a string in a list.,"def search(value, list):
    for i in range(len(list)):
        if list[i] == value:
            return i
    return -1

value= 'apple'
list = ['bannanas', 'oranges', 'apple']
print(search(value, list))"
Create a Python class that implements an iterator. The iterator should return the square of whole numbers starting at 0.,"class SqrIterator:
    def __init__(self):
        self.n = 0

    def __iter__(self):
        return self

    def __next__(self):
        result = self.n ** 2
        self.n += 1
        return result"
Create a custom sorting algorithm in Python that sorts a list of integers from highest to lowest.,"def custom_sort(int_list):
  for i in range(len(int_list)): 
    for j in range(i+1, len(int_list)): 
        if int_list[i] < int_list[j]: 
            int_list[i], int_list[j] = int_list[j], int_list[i] 
  return int_list

int_list = [8, 5, 9, 3, 4, 6]

sorted_list = custom_sort(int_list) 
print(""Sorted list: "", sorted_list)"
Generate a Python program that requests a movie title and prints the synopsis of the movie.,"import requests

# Get the movie title from user input
title = input(""Enter a movie title: "")

# Make a request to the OMDb API
url = ""http://www.omdbapi.com/?t="" + title + ""&plot=full&apikey=<YOUR_API_KEY>

response = requests.get(url)
data = response.json()

# Print the synopsis
print(""Synopsis: "" + data[""Plot""])"
Create a script in Python to find the square root of a number.,"import math
x = 81.0
# calculate the square root
print('The square root of %0.1f is %0.1f'%(x, math.sqrt(x)))"
"Suggest a data structure in Python to store the following information about a list of students: Name, Age, Grade.","students = [ 
  { 
    'name': 'John Doe', 
    'age': 18, 
    'grade': 'A'
  }, 
  { 
    'name': 'Jane Smith', 
    'age': 16, 
    'grade': 'B'
  } 
]"
Develop a lightweight AI model to classify and categorize text.,"A lightweight AI model can be developed using programming languages such as Python, JavaScript, etc. It will contain code to process text data, extract features, apply a suitable machine learning algorithm and train a model to classify and categorize text."
Create a Python dictionary from two given lists. The first list contains keys and the second list contains values.,"dict_from_lists = dict(zip(keys, values))"
Write a Python code to print the items in a dictionary in the order of their occurrence in the dictionary.,"for key, value in d.items():
    print(key, value)"
Write a Python program to format a specified string to limit the number of characters to 6.,"def limit_string(s):
    if len(s) >= 6:
        return s[:6]
    else:
        return s

result = limit_string(""Hello World"")
print(result)"
"Write a Python program that takes a list of strings as input, sorts it alphabetically, and output the sorted list.","def sort_alphabetically(input_list):
 results = sorted(input_list)
 
 return results
 
input_list = ['apple', 'pear', 'banana', 'grape']

print(sort_alphabetically(input_list))
# Output: ['apple', 'banana', 'grape', 'pear']"
"Create a Python program to find the total distance of a set of given (x,y) coordinates.","def totalDistance(coordinates):
    total = 0
    for i in range(len(coordinates) - 1):
        distance = ((coordinates[i+1][0] - coordinates[i][0])**2 + (coordinates[i+1][1] - coordinates[i][1])**2)**(1/2)
        total += distance
    return total

print(totalDistance(coordinates))"
Generate a Python script that will extract all URLs from the given text.,"import re

text = ""The websites I like to visit are https://www.google.com and https://www.facebook.com""

url_list = re.findall(r'(https?://\S+)', text)

print(url_list)"
Create a Python program to determine if a list is monotonically increasing.,"def check_monotonic(list):
 is_monotonic = True
 for i in range(len(list)-1):
  if(list[i] > list[i+1]):
   is_monotonic = False
 return is_monotonic

list = [1, 3, 4, 5, 9, 10]
print(check_monotonic(list)) # Output: True"
Write a Python program to find and print all numbers divisible by 5 between 0 and 15.,"def find_divisible_numbers(start, end):
 for i in range(start, end + 1):
  if i % 5 == 0:
   print(i)

find_divisible_numbers(0, 15)"
Create a program in Python that shuffles and prints an array of items.,"import random

items = ['a', 'b', 'c', 'd']
random.shuffle(items)

print(items)"
Generate a Python program which takes a string as input and prints all of its substrings in order from longest to shortest length.,"def substring_in_order(string): 
    result = [] 
    n = len(string) 
    for l in range(n, 0, -1): 
        for i in range(n-l + 1): 
            result.append(string[i:i+l]) 
    return result 

string = input(""Enter the string: "") 
print (""All substrings in order from longest to shortest:"") 
print (substring_in_order(string))"
Define a function to compute 3 raised to the power of 5 in Python.,"def power(x, y): 
    if (y == 0): 
        return 1
    elif (int(y % 2) == 0): 
        return (power(x, int(y / 2)) *
               power(x, int(y / 2))) 
    else: 
        return (x * power(x, int(y / 2)) *
               power(x, int(y / 2))) 


# Driver Code 
x = 3; y = 5
print(power(x, y))"
"Create a Python code to classify a given Iris flower as Iris setosa, Iris versicolor and Iris virginica.","def classify_iris(flower):
    if flower[0] < 5 and flower[2] < 4:
        return 'Iris setosa'
    elif flower[2] >= 4.9 and flower[3] <= 1.8:
        return 'Iris virginica'
    else:
        return 'Iris versicolor'"
Write a Python program to create a data visualization for a given dataset.,"import matplotlib.pyplot as plt

def create_visualizations(data):
 x = [x[0] for x in data]
 y = [x[1] for x in data]
 plt.plot(x, y, 'bo')
 plt.xlabel('Courses')
 plt.ylabel('Students')
 plt.title('Number of Students Enrolled in Courses')
 plt.show()"
Write a python function to reverse only the vowels of a given string.,"def reverse_vowels(str1):
	vowels = """"
	for char in str1:
		if char in ""aeiouAEIOU"":
			vowels += char
	result_string = """"
	for char in str1:
		if char in ""aeiouAEIOU"":
			result_string += vowels[-1]
			vowels = vowels[:-1]
		else:
			result_string += char
	return result_string"
Write a function to check whether an element exists within a tuple.,"def check_tuplex(tuplex,tuple1): 
  if tuple1 in tuplex:
    return True
  else:
     return False"
Compute with a Python program which elements of an array can be used as the divisor of other elements in the array.,"arr = [18, 30, 42, 45, 24]

for i in range(len(arr)):
    for j in range(i+1, len(arr)):
        if arr[i] != 0 and arr[j] % arr[i] == 0:
            print(str(arr[i]) + ' divides ' + str(arr[j]))"
Write Python code to implement the Quick Sort algorithm.,"def partition(arr,p,r):
    x = arr[r]
    i = p - 1
    for j in range(p, r):
        if arr[j] <= x:
            i = i + 1
            arr[i], arr[j] = arr[j], arr[i]
    arr[i + 1], arr[r] = arr[r], arr[i+1]
    return i + 1
 
def quick_sort(arr,p,r):
    if p < r:
        q = partition(arr,p,r)
        quick_sort(arr,p,q-1)
        quick_sort(arr,q+1,r)"
Create a function in Python to compute a given number of Fibonacci numbers.,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(n):
        a, b = b, a + b
    return a

num = fibonacci(10)
print(num)"
Write a Python program to check if a provided string is valid JSON.,"def is_valid_json(s):
    valid = True
    try:
        json.loads(s)
    except ValueError:
        valid = False
    return valid"
Write a function in Python to generate random numbers within a desired range.,"import random

# define a function to generate random numbers
def generate_random(start, end):
	return random.randint(start, end)

# generate a random number in the given range
start = 10
end = 15
print(generate_random(start, end))"
Create a Python script to filter out all numbers divisible by 3 in a list.,"# Initialize list
n = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]

# Function
def filter_divisible_by_3(n):
    return [num for num in n if num % 3 != 0]

# Output
print(filter_divisible_by_3(n))
# Output: [1, 2, 4, 5, 7, 8, 10, 11, 13]"
Write a Python program to filter out the duplicates in a list,"def remove_duplicates(list_a):
    result = []
    for a in list_a:
        if a not in result:
            result.append(a)
    return result"
Generate a python program to find the sum of series 1 +1/2 + 1/4 +….+ 1/n,"def series_sum(n):
    sum_series = 0
    for i in range(1, n + 1):
        sum_series += 1/i
    return sum_series"
"Create a Python class for a Car. This class should contain fields for the type, model, and number of seats, and methods for calculating the maximum speed and average fuel consumption.","class Car:
 def __init__(self, type, model, seats):
 self.type = type
 self.model = model
 self.seats = seats

 def calculate_max_speed(self):
 pass

 def calculate_avg_fuel(self):
 pass

# create a car
my_car = Car('sedan', 'Tesla Model 3', 5)"
"Given a string, write a Python program to remove all punctuation from the string.","import string

def remove_punctuation(text):
    return text.translate(str.maketrans('', '', string.punctuation))

print(remove_punctuation(""The quick brown fox jumps over the lazy dog.""))
# output: The quick brown fox jumps over the lazy dog"
Write a Python script that takes as input two strings and returns a boolean indicating if the two strings are equal when accounting for case sensitivity.,"def case_insensitive_compare(str1, str2):
 return str1.lower() == str2.lower()

string1 = ""Hello""
string2 = ""hello""

print(case_insensitive_compare(string1, string2))

# Output
True"
Write a python program to create a histogram of the given list elements,"def create_histogram(list):
    hist = dict()
    
    for i in list:
        if i not in hist:
            hist[i] = 1
        else:
            hist[i] += 1
    
    return hist"
Write a Python program to print a Welcome message for the user.,"print(""Welcome John!"")"
Develop a python function to get the last element from a given list,"def get_last_element(list):
     return list[-1]"
Design a function in Python that takes in two numbers and outputs their sum.,"def sumTwo(a, b):
  return a + b

print(sumTwo(2, 3))"
Generate a program in Python to print the union of two given sets.,"def union_sets(set1, set2):
    return list(set(set1) | set(set2))

set1 = [1, 2, 3]
set2 = [2, 3, 4, 5]

print(union_sets(set1, set2)"
Write a Python program to find the shortest path between two points,"# Initialize the two points
A = (1,2) 
B = (5,6)

# Create a function
def short_path(p1, p2):
    # Compute the x-distance
    x_dist = abs(p2[0] - p1[0])
    # Compute the y-distance
    y_dist = abs(p2[1] - p1[1])
    # Compute the manhattan distance
    manh_dist = x_dist + y_dist
    return manh_dist

# Test the function
print(short_path(A, B))

# Output
6"
Create a Python script that generates a random password.,"import random
import string

def generate_password():
  characters = string.ascii_letters + string.digits + string.punctuation
  password = ''.join(random.choice(characters) for _ in range(15))
  return password

print(generate_password())"
Generate a Python program that reads in a list of words and sorts them alphabetically.,"words = ['apple', 'banana', 'cat', 'zebra']
words.sort()

for word in words:
 print(word)"
"Write a Python program to calculate the maximum, minimum and mean number of elements in a given string.","def get_stats_for_string(string):
    num_elements = len(string)
    max_element = max(string)
    min_element = min(string)
    mean_element = sum(string) / num_elements
    return (max_element, min_element, mean_element)

string = ""abcdef""
stats_for_string = get_stats_for_string(string)
print(""Max: {0}, Min: {1}, Mean: {2}"".format(*stats_for_string))"
Create a script in Python that checks that a given URL is active and responding.,"import requests

url = ""http://www.example.com""

try:
 request = requests.get(url)
 if request.status_code == 200:
 print(""URL is active and responding"")
except Exception as e:
 print(f""Error: {e}"")"
Create a Python program that takes a string as input and returns its top 3 most frequent characters,"def most_frequent_chars(s):
    d = {}
    for i in s:
        if i not in d:
            d[i] = 0
        d[i]+=1
    d = sorted(d.items(),key = lambda x:x[1], reverse=True)
    return [k  for k ,v in d[:3]]"
"Given a list of integers, write a Python program to find the list's maximum value.","def find_max(nums):
    max_value = nums[0] 
    for i in nums:
        if i > max_value:
            max_value = i
    return max_value

nums = [1, 8, 2, 4, 10]
print(find_max(nums))"
Convert the given JSON data into python dictionary.,"import json 

json_data = '{""key"": ""value""}'

pydict = json.loads(json_data) 
print (""Python dictionary:"", pydict)"
Generate a Python program that displays all prime numbers between two numbers.,"def display_prime_numbers(min, max):
    for n in range(min, max):
        if is_prime(n):
            print(n)

def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

display_prime_numbers(50, 75)"
Construct a Python program to perform principal component analysis,"from sklearn.decomposition import PCA

def pca_transformation(X):
    pca = PCA()
    X_pca = pca.fit_transform(X)
    return X_pca"
Generate a program to calculate Fibonacci numbers recursively in Python.,"def fibonacci(n):
 if n == 0:
  return 0
 elif n == 1:
  return 1
 else:
  return fibonacci(n-1) + fibonacci(n-2)"
"Create a python program to accept two inputs from the user, a number and a string, and print the string the given number of times.","num = int(input(""Enter a number: ""))
string = input(""Enter a string: "")

for i in range(num):
 print(string)"
Develop an optimized Python Code to remove consecutive duplicate characters from a String,"def rm_duplicates(inp): 
    result = []
    prev = '' 
    for char in inp:
        if char != prev:
            result.append(char)
            prev = char
    return ''.join(result) 

print(rm_duplicates('aabccdaacbg'))"
"Write Python code to print the ""Hello World!"" string.","print(""Hello World!"")"
Generate a correct Python program to filter out elements of a list using lambda,"list = [1,2,3,4,5]

result = list(filter(lambda x : x % 2 == 0 , list))
print(result)"
Optimize an existing Python script to run as efficiently as possible.,"def spam(divideBy):
    try:
        return 42 / divideBy
    except ZeroDivisionError:
        print('Error: Invalid argument.')

print(spam(2))
print(spam(12))
print(spam(0))"
Write a Python program to optimize an array of numbers so that the sum of elements is maximum and all the elements are greater than 0.,"import numpy as np

# Get the input array
arr = [1,-2,3,4,-5]

# Optimize the array so that the sum of elements is maximized
# and all the elements are greater than 0
new_arr = np.max(arr,0)

# Print the optimized array
print(""Optimized Array : "",*new_arr)"
Generate Python code to compute the sum of items in a list.,"sum = 0
for value in [2, 17, 3, 8]:
 sum += value
print(sum)"
Write a python program to parse an XML document,"import xml.etree.ElementTree as ET

def parse_xml(xml_file):
    root = ET.parse(xml_file).getroot()
    for child in root:
        print(child.tag, child.attrib)"
Create a Python function that takes in a string and a list of words and returns true if the string contains all the words in the list.,"def contains_words(input_string, words):
 for word in words:
 if word not in input_string:
 return False
 return True

print(contains_words('This is a test', ['test', 'this', 'is'])) # True"
Create a function in Python that sorts the elements of a given list.,"def sort_list(numbers):
    numbers.sort()
    return numbers

result = sort_list([5, 7, 2, 3, 4, 1])
print(result)"
Write a Python program to convert a dataframe into a tabular format.,"import pandas as pd

def dataframe_to_table(df):
  tabular_df = df.pivot_table(index=df.index, columns=df.columns, values=df.values)
  return tabular_df"
Create a Python program to optimize a given function for a given interval.,"import scipy.optimize

# Execute optimization
mini = scipy.optimize.minimize_scalar(func = func, 
                bounds = interval)
                 
# Print optimal value x_opt
print('{0:5.5f}'.format(mini.x))"
Write a function to find the occurrence and position of the substrings within a string.,"import re
def occurance_substring(text,pattern):
 for match in re.finditer(pattern, text):
    s = match.start()
    e = match.end()
    return (text[s:e], s, e)"
Generate a python program to generate a random password,"import string
import random

def generate_password(length):
    password = []
    chars = string.ascii_uppercase + string.ascii_lowercase + string.digits + '@#$%&*'
    for i in range(length):
        password.append(random.choice(chars))
    return ''.join(password)

if __name__ == '__main__':
    length = int(input('Enter password length: '))
    print(generate_password(length))"
Create a python program to remove the python comments from a text,"import re

def remove_comments(text):
    regex = r""(\"".*?\""|\'.*?\')|(/\*.*?\*/|\#[^\r\n]*$)""
    clean_text = re.sub(regex, """", text, 0, re.MULTILINE).strip()
    return clean_text

remove_comments(""# This is a python comment\nprint(\""Hello world\"") # This is another comment"")
#output:
print(""Hello world"")"
"Optimize the following Python code so that it runs faster, given that x is an array of integers.

sum = 0
for i in range(len(x)):
 sum += x[i]","# Optimized Python code
sum = 0
for num in x:
 sum += num
 
# Using built-in sum function
sum = sum(x)"
Create a Python program to check if two lists have overlapping elements,"def has_overlapping(arr1, arr2):
    for element in arr1:
        if element in arr2:
            return True
    return False

A = [1,3,5,7]
B = [2,4,5,7]

result = has_overlapping(A, B)
print(result)"
Write a function in Python that takes two lists as arguments and return all their common elements.,"def common_elements(list1, list2):
    common = []
    for num in list1:
        if num in list2:
            common.append(num)
    return common

print(common_elements([1, 3, 5, 7], [3, 4, 5, 8]))"
Write a function to check whether the given key is present in the dictionary or not.,"def is_key_present(d,x):
  if x in d:
    return True
  else:
     return False"
"Given input and output examples, create a classification model in Python that can predict the output for a given input.","def pred_model(inputs): 
  outputs=[]
  for i in inputs:
    outputs.append(i*2)
  return outputs
 
inputs = [1,2,3] 
outputs = pred_model(inputs) 
print(""Outputs:"", outputs)"
Write Python code to implement the Bubble Sort algorithm for sorting a list of numbers.,"def bubble_sort(lst):
    n = len(lst)
    for i in range(n): 
        for j in range(0, n-i-1): 
            if lst[j] > lst[j+1] : 
                lst[j], lst[j+1] = lst[j+1], lst[j]
    return lst"
Create a python class,"class MyClass:
    def __init__(self):
        pass"
Can you design a Python class to represent a human being?,"class Human:
    def __init__(self, age, name):
        self.age = age
        self.name = name

    def greet(self):
        print(""Hi, my name is "" + self.name + "" and I'm "" + str(self.age) + "" years old."")

john = Human(25, ""John"")
john.greet()"
Create a for loop in Python to calculate the total sum of all elements in the given list.,"total = 0
for element in data:
    total = total + element
print(total)"
Generate a random number between a specified range using Python.,"import random 
def random_num(start, end): 
    num = random.randint(start, end) 
    return num"
Write a Python function to check if a number between 0 and 1000 is prime or not.,"def is_prime(num):
    #Make sure the number is greater than or equal to 2 
    if num < 2:
        return False 
    # Check whether the number is divisible by any other number 
    for i in range(2, num):
        if num % i == 0:
            return False
    # If it is not divisible by any number, it is a prime number
    return True"
Create a Python script to format the following string with proper new lines and indentation.,"formatted = '{\n  ""name"":""John"",\n  ""age"":30,\n  ""city"":""New York""\n}'"
"In python, write a function that takes in two numbers and returns the sum of their digits.","def sum_digits(a,b):
    #convert each number to string
    a = str(a)
    b = str(b)
    #initialize sum
    sum = 0
    for i in range(len(a)): 
        sum += int(a[i]) 
    for i in range(len(b)): 
        sum += int(b[i]) 
    #return sum
    return sum"
Create a Python code snippet to store the login credentials in a dictionary.,"creds = {
 ""username"": ""testuser"",
 ""password"": ""test123""
}"
Create a program in Python that takes an array and finds the minimum value stored in it.,"arr = [34, 48, 19, 61, 3] 
  
# Finds the minimum element 
print (""The minimum element is "" + str(min(arr)))"
Convert the given code from JS to Python.,"def add(a, b):
    return a + b"
Write a python function to count the number of equal numbers from three given integers.,"def test_three_equal(x,y,z):
  result= set([x,y,z])
  if len(result)==3:
    return 0
  else:
    return (4-len(result))"
Generate a new Python List containing all of the even numbers from a given list.,"my_list = [2, 3, 4, 5, 6, 7, 8, 9]

even_list = [x for x in my_list if x % 2 == 0]
print(even_list)"
Convert this function from Python 2 to Python 3.,"def fib(n):
    """"""Print a Fibonacci series up to n""""""
    result = []
    a = 0
    b = 1
    while b < n:
        result.append(b)
        tmp_a = a
        a = b
        b = tmp_a + b
    return result"
Write a Python script to sort a given list in ascending order.,"def sort_ascending(list):
    return sorted(list)"
Generate a program that translates a program written in one language to another language,"def doubleValue(num):
 return num * 2
 
# Javascript to Python 

def doubleValue(num): 
 return num * 2"
Generate a Python program to convert a string to its lowercase version.,"def str_to_lower(string):
    new_string = """"

    for char in string:
        new_string += char.lower()

    return new_string"
Create a Python program to convert a given list of strings to float values,"def convertStringToFloat(str_list):
    floats = []
    for s in str_list:
        floats.append(float(s))
    return floats

convertStringToFloat(str_list) // Returns [45.0, 87.5, 90.9, 24.0]"
Transform the given language rich code into a python program,"def get_average(arr): 
    sum = 0
    
    for i in range(len(arr)): 
        sum += arr[i] 
        
    return sum/len(arr)"
Write a python program to check if a given number is prime or not.,"def is_prime(num):
    for i in range(2, num):
        if (num % i) == 0:
            return False
    return True

number = 27

if is_prime(number):
    print(str(number) + ' is a prime number.')
else:
    print(str(number) + ' is not a prime number.')"
Write a Python program to format a specified string to limit the number of characters to 6.,"new_str = ""Python"".ljust(6, ""..."")

print(new_str)  #Python..."
Generate a random number between 0 and 9 using Python.,"import random
random.randint(0, 9)"
Create a random forest model in Python from the given data set.,"from sklearn.ensemble import RandomForestClassifier

features = ['Gender', 'Income']
X = df[features]
y = df['Label']

clf = RandomForestClassifier(n_estimators=100, max_depth=2, random_state=0)
clf.fit(X, y)"
Create a REST API using Python Flask that returns a JSON list of numbers from 1 to 10 when a get request is made to the endpoint /list.,"from flask import Flask, jsonify

app = Flask(__name__)

@app.route(""/list"", methods=[""GET""])
def get_list():
 numbers = list(range(1, 11))
 return jsonify(numbers)

app.run()"
Design a Python program to find the first prime number greater than a user-specified number.,"def find_prime_number(n):
    number = n + 1
    while True:
        counter = 0
        for i in range(2, number):
          if number % i == 0:
            counter = 1
        if counter == 0:
            break
        number += 1
    return number

num = int(input(""Enter a number:""))
prime = find_prime_number(num)

print(prime)"
Create a Python generator that returns numbers from a given list.,"def list_generator(input_list):
    for item in input_list:
        yield item

gen = list_generator([1,3,5,7,9])
for item in gen:
    print(item)"
Generate a correct Python program to compute the reverse of the given string,"def reverse_string(string):
    output = """"
    for i in range(len(string)):
        output += string[len(string)-1-i]
    return output"
Write a Python function that takes a list of numbers and returns the sum of all odd numbers in the list.,"def sum_odd_numbers(nums):
    result = 0
    for num in nums:
        # check for odd number
        if num % 2 != 0:
            result += num
    return result

result = sum_odd_numbers([1, 2, 3, 4, 5])
print(result)"
"Using some common sorting algorithms, create a Python program to sort the given array of numbers","def insertion_sort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        while j >= 0 and key < arr[j]:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key
    return arr

insertion_sort(arr)"
Read a given list of strings and create a new list of all strings that are longer than 5 characters long.,"def filter_long_strings(string_list):
 long_strings = []
 for string in string_list:
 if len(string) > 5:
 long_strings.append(string)
 return long_strings

string_list = ['Python', 'is', 'Fun']

long_strings = filter_long_strings(string_list)
print(long_strings)"
Generate a Python program to print out all possible permutation of a given list of elements.,"def permutations(input_list):
    if len(input_list) == 1:
        return input_list
    output_list = []
    for value in input_list:
        temp_list = input_list[:]
        temp_list.remove(value)
        permutations_list = permutations(temp_list)
        for sub_list in permutations_list:
            output_list.append([value] + sub_list)
    return output_list"
Write a function to find the ascii value of total characters in a string.,"def ascii_value_string(str1):
  for i in range(len(str1)):
   return ord(str1[i])"
"Create a Python program that implements a search algorithm (e.g. binary search, linear search).","def linear_search(arr, target):
 for i in range(len(arr)):
 if arr[i] == target:
 return i

 return -1

arr = [1, 3, 4, 6, 8, 9, 11, 12, 14]
target = 11

result = linear_search(arr, target)
if result == -1:
 print('Element not found')
else:
 print(f'Element found at index {result}')

Output:
Element found at index 6"
"Generate a valid code in Python that takes two numbers as input from user, and checks if one is divisible by another","num1 = int(input(""Enter first number: ""))
num2 = int(input(""Enter second number: ""))

if (num1 % num2 == 0):
    print(""The number %s is divisible by %s."" % (num1, num2))
else:
    print(""The number %s is not divisible by %s."" % (num1, num2))"
Write a function to find the n'th lucas number.,"def find_lucas(n): 
	if (n == 0): 
		return 2
	if (n == 1): 
		return 1
	return find_lucas(n - 1) + find_lucas(n - 2) "
Create a Python function to encrypt a string using the substitution method.,"def encrypt_substitution(s):
    result = ''
    for c in s:
        result += chr(ord(c) + 3)
    return result"
Write a Python script to find the common elements in two given lists.,"def findCommonElements(listA, listB):
 commonElements = []

 for elementA in listA:
 for elementB in listB:
 if elementA == elementB:
 commonElements.append(elementA)

 return commonElements

listA = [1, 3, 5, 7, 9]
listB = [2, 3, 4, 5, 8]
commonElements = findCommonElements(listA, listB) 

print(commonElements)  # Output: [3, 5]"
Create a Python program that takes two lists of integers and prints the common elements between the two lists.,"list1 = [2, 4, 6, 8]
list2 = [4, 8, 10]

common_elements = list(set(list1).intersection(list2))

print(common_elements)
# Output: [4, 8]"
Create a query in Python to retrieve all records from the 'Users' table where 'active' is true.,"# Assuming you have a variable named 'conn' pointing to the database connection 

result = conn.execute(
    ""SELECT * FROM Users WHERE active = true""
)
for row in result:
    # Do something with the retrieved record
    # ..."
Create a basic web server in Python that serves static pages from a given directory.,"import http.server
import socketserver

PORT = 8080

Handler = http.server.SimpleHTTPRequestHandler

with socketserver.TCPServer(("""", PORT), Handler) as httpd:
 print(""Serving at port"", PORT)
 httpd.serve_forever()"
Found and fix any bugs with the following python code.,"def sum_list(list):
    sum_list = 0
    for num in list:
        sum_list += num
    return sum_list"
Implement a Python script to split a string into a list of words.,"def split_string(string): 
 return string.split() 

print(split_string(""Hello, World!"")) # [""Hello,"", ""World!""]"
Modify the provided Python program to print out the numbers from 1 to 10,"for i in range(1, 11):
    print(i)"
Generate a list of prime numbers from 1 to 1000 using a Python program,"def getPrimeList(n): 
    primeList = []
    for num in range (2,n + 1):
        prime = True
        for index in range(2, num):
            if num % index == 0:
                prime = False
        if prime:
            primeList.append(num)
    return primeList

print(getPrimeList(1000))"
Code a generalized function in Python that takes a string as input and returns the first non-repeating character.,"def first_non_repeating_char(string): 
    for c in string: 
        if string.count(c) == 1: 
            return c 
      
    return -1"
Create a Python program that takes in a string and returns a string with the characters in reversed order.,"def reverse(str):
    return str[::-1]"
Generate a correct python program to format a given string s so that the output pattern is as follows,"def format_string(s):
    string_arr = s.split(""--"")
    return ' '.join(string_arr)"
Create a machine learning model in Python to predict the stock prices of a company given the stock prices for the be past 10 days.,"import numpy as np
import pandas as pd
from sklearn.linear_model import LinearRegression

df = pd.read_csv(""stock_data.csv"")
X = df[['Day1', 'Day2', 'Day3', 'Day4', 'Day5', 'Day6', 'Day7', 'Day8', 'Day9', 'Day10']]
y = df['Day11']

model = LinearRegression()
model.fit(X, y)"
Optimize the following function by rewriting it in Python,"def double(number: int) -> int:
    return number << 1"
Design and write a Python program to calculate the sum of the first n natural numbers.,"def sum_naturals(n):
    total = 0
    for num in range(n + 1):
        total += num
    return total"
"Create a function in Python which takes a list of strings as input, and prints the longest palindrome contained in the list.","def longest_palindrome(str_list):
  longest_palindrome = """"
  for s in str_list:
    if s == s[::-1] and len(s) > len(longest_palindrome):
      longest_palindrome = s
  print(longest_palindrome)
  
longest_palindrome([""racecar"", ""python"", ""mom"", ""abba""])"
Compute a matrix multiplication of two given matrices A and B in Python.,"import numpy as np 

A = np.array([[1,2,3], [4,5,6]])
B = np.array([[1,2], [3,4], [5,6]])

C = np.matmul(A, B)

print(C)
# Output 
# [[22 28], 
#  [49 64]]"
Write a Python program to slice a list and store the first two elements in separate variables.,"list = [2, 4, 6, 8, 10] 
first, second = list[0], list[1]  
print(first) 
print(second)"
Create a Python program that extracts the nth element from a nested array.,"def extract_nth_element(arr, n):
 nth_element = arr[n // len(arr[0])][n % len(arr[0])]
 return nth_element

arr = [[1,2,3], [4,5,6], [7,8,9]]
n = 5
print(extract_nth_element(arr, n))
# Output: 6"
Make a visual representation of the following data-set in Python using Matplotlib.,"import matplotlib.pyplot as plt

X = [2,4,6,8,10]
Y = [5,10,15,20,25]

plt.plot(X,Y)
plt.xlabel('X')
plt.ylabel('Y')
plt.title('Visual Representation')
plt.grid()
plt.show()"
Create a module in Python for validating a phone number.,"import re

phone_number = ""+1-800-867-5309""

phone_pattern = re.compile(r'^\+[1-9]\d{1,2}\-\d{3}\-\d{3}\-\d{4}$')

def validate_phone_number(phone_number):
    return phone_pattern.search(phone_number)

valid = validate_phone_number(phone_number)
if valid:
    print(""Valid Phone number"")
else:
    print(""Invalid Phone number"")"
Generate a Python program that takes a list of strings as input and prints the strings in alphabetical order.,"strings = ['cat', 'dog', 'apple', 'banana']

strings.sort()

for string in strings:
    print(string)"
Write a python code to perform the task of bubble sorting in a list.,"def bubble_sort(arr): 
    n = len(arr) 
    for i in range(n): 
        for j in range(0, n-i-1): 
            if arr[j] > arr[j+1] : 
                arr[j], arr[j+1] = arr[j+1], arr[j]
                
bubble_sort(arr)"
Write a python script that extracts data from a JSON object and stores it in a new array.,"data = [{
    ""name"": ""John Doe"",
    ""age"": 30,
    ""occupation"": ""programmer""
}]

arr = []

for item in data:
    arr.append(item)
    
print(arr)"
Generate a Python function to print a pattern of stars,"def starPattern(n):
    # outer loop to handle number of rows
    for i in range(0, n):
        # inner loop to handle number of columns
        for j in range(0, i + 1):
            # printing stars
            print(""* "", end="""")
        # ending line after each row
        print(""\r"")

# Driver code
n = 5
starPattern(n)"
Build a function in Python to output a list of the first n Fibonacci numbers.,"def Fibonacci(n): 
  
    # Taking 1st two Fibonacci numbers as 0 and 1 
    FibArray = [0, 1] 
      
    for i in range(2, n): 
        FibArray.append(FibArray[i-2] + FibArray[i-1]) 
       
    return FibArray[:n] 

print(Fibonacci(7)) # [0, 1, 1, 2, 3, 5, 8]"
Write a python function to count numbers whose oth and nth bits are set.,"def count_Num(n): 
    if (n == 1): 
        return 1
    count = pow(2,n - 2) 
    return count "
Develop a Python module to generate random numbers.,"import random

def generate_random_numbers(length, min_value, max_value):
    return [random.uniform(min_value, max_value) for _ in range(length)]"
Create a function for converting a string to an integer in Python.,"def string_to_int(s):
 return int(s)"
Edit the following Python program such that it prints out the multiplication table for the given number n.,"n = 5

# printing the multiplication table
for i in range(1, 11): 
    print(n, 'x', i, '=', n * i)"
Can you generate a Python program for computing the median of three numbers?,"def median(a, b, c):
    if (a <= b <= c) or (c <= b <= a):
        return b
    elif (b <= a <= c) or (c <= a <= b):
        return a
    else:
        return c

median_value = median(6, 8, 7)
print(median_value)"
Write a python program to generate the first n prime numbers.,"def generate_prime_numbers(n):
  prime_numbers = []
  count = 0
  num = 2
  while count < n:
    is_prime = True
    for i in range(2, num):
      if num % i == 0:
        is_prime = False
        break
    if is_prime:
      prime_numbers.append(num)
      count += 1
    num += 1
  return prime_numbers

primes = generate_prime_numbers(n)
print(primes)  # Outputs [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]"
Write a Python program for generating random strings of a given length from a given character set.,"import random
 
def random_string(length, char_set):
 result = """"
 for _ in range(length):
  result += random.choice(char_set)
 return result
 
print(random_string(6, 'abcdefghijklmnopqrstuvwxyz'))

# Output: acehkl"
Can you suggest a pure python alternative to declaring a Float32 array with numbers from 0 to 10?,"myArray = [float(i) for i in range(0,11)]"
Create a program in Python for finding the maximum in a list of numbers.,"def find_max(lst): 
 
    # Initialize maximum element 
    max = lst[0] 
   
    # Traverse list element 
    # from second and compare 
    # every element with current max  
    for i in range(1, len(lst)): 
        if lst[i] > max: 
            max = lst[i] 
   
    return max

max_num = find_max([2, 3, 4, 9, 5])
print(""The maximum number in the list is:"",max_num)"
Generate a Python function to convert radar data in polar coordinates into Cartesian coordinates.,"def polar_to_cartesian(r, theta):
    x = r * np.cos(theta)
    y = r * np.sin(theta)
    return x, y"
Write a Python program to calculate the harmonic mean of three numbers.,"def harmonic_mean(x, y, z):
 return 3/((1/x + 1/y + 1/z))"
Describe a method to find the greatest common divisor (GCD) of two numbers in Python.,"def gcd(a, b): 
    if a == 0 : 
        return b  
    if b == 0 : 
        return a  
  
    if a == b: 
        return a 
  
    if a > b: 
        return gcd(a-b, b) 
    return gcd(a, b-a) 
  
# Driver program to test above function 
a = 36 
b = 30
  
if(gcd(a, b)): 
    print('GCD of', a, 'and', b, 'is', gcd(a, b))"
Create a program in Python to add two numbers using functions.,"def add(num1, num2):
    return num1 + num2

result = add(5, 7)
print(result)"
Create a Python program to remove duplicates from an unsorted array.,"original_list = [1, 1, 2, 2, 3, 4, 5, 5, 6]

def remove_duplicates(lst):
    new_list = []
    for item in lst:
        if item not in new_list:
            new_list.append(item)
    return new_list

print(remove_duplicates(original_list))"
"Sort a list of numbers [5, 2, 8, 1] in Python.","list = [5, 2, 8, 1]
list.sort() 
print(list)"
Write a script in Python to sort the given list of numbers in non-decreasing order,"def sortNumbers(nums): 
    for i in range(len(nums)-1): 
        minPos = i 
        for j in range(i+1,len(nums)): 
            if nums[minPos] > nums[j]: 
                minPos = j 
        nums[i],nums[minPos] = nums[minPos],nums[i] 

nums = [3, 2, 7, 1, 9, 5]
sortNumbers(nums) 
print(nums)"
Write a Python function to perform a linear search in a given array.,"def linear_search(arr, target):  
    for i in range(len(arr)): 
        if arr[i] == target: 
            return i 
    return -1"
Write a code to send an email using Python and SMTP.,"import smtplib 

# Creates SMTP session 
server = smtplib.SMTP('smtp.gmail.com', 587)

# Start TLS for security 
server.starttls() 

# Authentication 
server.login('your_email_address', 'password') 

# Message to be sent
message = 'This is a test email'

# sending the mail 
server.sendmail('sender_email_address', 'receiver_email_address', message) 

# terminating the session 
server.quit()"
Classify the following Python code snippet according to the function it implements.,The code implements a function for summing the squares of a list of numbers.
Generate a python function that checks if the number is a valid decimal or not.,"def is_valid_decimal(n):
    try:
        float(n)
        return True
    except ValueError:
        return False"
"Create an Optimizer function in Python to optimize a given function f(x) for x in [-4, 4].","import numpy as np
from scipy.optimize import minimize

# Function to optimize
def f(x):
 return x**2 - 3*x + 2

# Optimize
optimized = minimize(f, [-4, 4], method=""L-BFGS-B"")

# Print result
print(""Optimized value of the function: "", optimized.fun)  # prints -3.999999999999997
print(""Optimized value of x: "", optimized.x) # prints [-4.]"
"Create a Python class that represents a person and contains attributes such as name, age, and occupation.","class Person:
    def __init__(self, name, age, occupation):
        self.name = name
        self.age = age
        self.occupation = occupation
  
    def get_info(self):
        print(""Name: ""+self.name)
        print(""Age: ""+str(self.age))
        print(""Occupation: ""+self.occupation)"
Create a script in Python that prints the first 10 Fibonacci numbers.,"def Fibonacci(n): 
    if n<0: 
        print(""Incorrect input"") 
    elif n==1: 
        return 0
    elif n==2: 
        return 1
    else: 
        x = 0
        y = 1
        for i in range(2, n): 
            z = x+y 
            x = y 
            y = z 
        return z 
  
for i in range(1, 11): 
    print(Fibonacci(i))"
"Solve mathematical expression "" cos(x) + sin(x) = 0 "" using Python.","import numpy as np

x = np.arange(-2*np.pi, 2*np.pi, 0.5)

y = np.cos(x) + np.sin(x)

solution = x[np.where(y == 0)]
print(solution)"
Generate a valid Python script to replace every element in a list by a specified integer,"def replace_list_items(list_X,value):
    new_list=[]
    for element in list_X:
        new_list.append(value)
    return new_list"
Write a Python function that takes a dictionary as input and returns a list of values sorted in ascending order.,"def sort_dict_values(d):
    # create a list of values from the dictionary
    values = list(d.values())
    # sort the list 
    values.sort()
    return values

result = sort_dict_values(mydict)
print(result)"
Construct a function in Python to calculate the factorial of any number.,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)
 
print(factorial(5))"
Write a Python program to create a random password of length 10.,"import string 
import random

def generate_password(length): 
    password = """" 
    for i in range(length): 
        character = random.choice(
            string.ascii_letters + 
            string.digits + 
            string.punctuation)
        password += character
    return password

password = generate_password(10) 
print(password)"
Design an API in Python to identify whether a given number is prime or not.,"def is_prime(n):
    """"""
    This function takes a positive integer as an argument and returns a boolean
    value determining if the number is a prime number or not.
    """"""
    
    if n <= 1:
        return False

    for i in range(2, int(n**0.5) + 1):  # Use square root optimization
        if n % i == 0:
            return False

    return True"
Write a function to generate a set of random numbers in Python.,"import random

def generate_randoms(n):
  # generate a set of n random numbers
  rands = []
  for _ in range(n):
    rands.append(random.randint(1,100))
  return rands

generate_randoms(10)"
Write a function in Python to swap two variables.,"def swap(a, b):
    # Store a in temp
    temp = a

    # Copy b to a
    a = b

    # Copy temp to b
    b = temp"
Edit the given Python program to optimize its code for better performance,"#Function to calculate the sum of the natural numbers 
def sumOfNaturals(n): 
  
    #using Gauss formula
    if n % 2 == 0: 
        sum = (n//2)*(n+1) 
    else: 
        sum = (n//2)*(n+1) + (n+1)//2
  
    return sum"
Write python code to detect a palindrome,"def is_palindrome(word):
    # reverse the string 
    rev = word[::-1]  
  
    # check if the string is equal to its reverse    
    if word == rev: 
        return True
    return False

is_palindrome(""noon"") # returns True"
Create a Lambda function in Python to process an integer array and return the square of the even numbers in the array.,"def lambda_handler(event, context):
    numbers = event['numbers']
    result = [num ** 2 for num in numbers if num % 2 == 0]
    return {'result': result}"
Design a function in Python that takes a positive integer and finds its prime factors.,"def prime_factors(num):
  factors = []
  n = 2
  while n * n <= num:
    if num % n == 0:
      factors.append(n)
      num //= n
    else:
      n += 1
  if num > 1:
    factors.append(num)

  return factors"
Identify the programming languages used for writing a Python program that scrapes a website for email addresses.,"The languages used for writing a Python program to scrape a website for email addresses would be Python and HTML. Python is used for writing the web scraper and HTML is used to define the structure and content of the website, which the scraper accesses in order to scrape the email addresses."
Design a program in Python for computing the average height of a group of people.,"def average_height(lst):
    total = 0
    for height in lst:
        total += height
    
    return total / len(lst)

result = average_height([1.78, 1.90, 1.75, 1.82])
print(result)"
Create a Python program to print out the nth row of Pascal's Triangle,"def nth_row_pascal(n):
    row = [1]
    for k in range(max(n,0)):
        row.append(row[k] * (n-k) // (k+1))
    return row"
Create a Python script to calculate the sum of two integers.,"num1 = 10
num2 = 20

sum = num1 + num2

print(""The sum of {0} and {1} is {2}"".format(num1, num2, sum))"
Write a function to find n’th smart number.,"MAX = 3000 
def smartNumber(n): 
	primes = [0] * MAX 
	result = [] 
	for i in range(2, MAX): 
		if (primes[i] == 0): 
			primes[i] = 1 
			j = i * 2 
			while (j < MAX): 
				primes[j] -= 1 
				if ( (primes[j] + 3) == 0): 
					result.append(j) 
				j = j + i 
	result.sort() 
	return result[n - 1] "
Create a Python program to calculate the average number of items in a list. The list should be taken as input from the user.,"list_elements = input('List elements: ').split()

sum = 0
for num in list_elements:
 sum += int(num)

average = sum / len(list_elements)

print(f'The average number of items in the list is {average}.')"
Convert the following Python code to Java:,"int a = 10;
int b = 20; 
int c = a + b;"
Write a python function to count inversions in an array.,"def get_Inv_Count(arr,n): 
    inv_count = 0
    for i in range(n): 
        for j in range(i + 1,n): 
            if (arr[i] > arr[j]): 
                inv_count += 1
    return inv_count "
"Rewrite the following Python class as an JavaScript class with equivalent functions:

class Person:
    def __init__(self, name):
        self.name = name

    def greet(self):
        print(f""Hello, my name is {self.name}"")","class Person {
 constructor(name) {
  this.name = name;
 }

 greet() {
  console.log(`Hello, my name is ${this.name}`);
 }
}"
Write a Python program to generate a random color in RGB format.,"import random 
def random_rgb():
    r = random.randint(0,255)
    g = random.randint(0,255)
    b = random.randint(0,255)
    return (r, g, b)"
Write a Python script to sort a given list in descending order.,"def sort_desc(lst): 
    return sorted(lst, reverse=True)"
Create a basic Python script that converts all strings in a given dictionary to uppercase.,"d = {""name"": ""John"", ""age"": 45, ""location"": ""San Francisco""}
for key in d:
 d[key] = str(d[key]).upper()

print(d)
# Output: {""name"": ""JOHN"", ""age"": 45, ""location"": ""SAN FRANCISCO""}"
Convert the given array to an array of dictionaries in Python.,"[{'a': 1}, {'b': 2}, {'c': 3}]"
Create a Python function to remove the items in a list that appear multiple times.,"def remove_extras(lst):
    # Create a new list with unique items
    unique_items = []
    for item in lst:
        if item not in unique_items:
            unique_items.append(item)

    # Return the list with unique items
    return unique_items

test = [""Apple"", ""Banana"", ""Orange"", ""Apple"", ""Banana""]
print(remove_extras(test))"
Create a Python program to calculate the sum of the n-th row of Pascal's Triangle.,"def pascal_triangle(n):
 rows = []
for i in range(1, n + 1):
 row = [1]
 for j in range(1, i):
  row.append(rows[i-2][j-1] + rows[i-2][j])
 row.append(1)
 rows.append(row)
 
return rows
 
n = 8
result = pascal_triangle(n)
sum_of_row = sum(result[n-1])
 
print(f""The sum of the {n}th row of Pascal's Triangle is {sum_of_row}."")"
"Create a class in Python that has three methods: add, subtract and multiply.","class Calc:
    def add(self, x, y):
        return  x + y 

    def subtract(self, x, y): 
        return  x - y

    def multiply(self, x, y):
        return x * y

calc = Calc()
print(calc.add(2, 3)) 
print(calc.subtract(2, 3)) 
print(calc.multiply(2, 3))"
Compose a regular expression in Python to find words beginning with a certain letter.,"import re

pattern = r""\b[aA]\w+""

# call the function
print(re.findall(pattern))"
Write a Python program to check if an array has more than three duplicate elements.,"def check_duplicate_in_array(arr):
    result = False
    for i in range(len(arr) - 2):
        if arr[i] == arr[i + 1] == arr[i + 2]:
            result = True
            break
    return result

arr = [4, 2, 8, 2, 1, 4, 19, 4]
print(check_duplicate_in_array(arr)) # Output: True"
Write a function in Python that takes a list of numbers and returns the sum of the list items that are greater than the given value.,"def findSum(nums, value):
 total = 0
 
 for num in nums:
 if num > value:
 total += num
 
 return total
 
nums = [1, 4, 5, 10, 12]
value = 6

res = findSum(nums, value)

print(res)"
Create a Python function to remove a given item from a list.,"def removeItem(lst, item):
    if item in lst:
        lst.remove(item)
    return lst

print(removeItem([2, 3, 4], 4))"
Develop a python program to find the maximum sum of non-consecutive elements of a given integer list.,"def find_max_non_consecutive_sum(arr):
    incl = 0
    excl = 0
     
    for i in arr:
        new_excl = max(incl, excl)   
        incl = excl + i 
        excl = new_excl 
       
    return max(incl, excl)"
"Generate a Python script that finds the total surface area of a cuboid, given its three dimensions.","def find_total_surfacearea(length, breadth, height):
   return (2*(length*breadth + breadth*height + height*length))

print(find_total_surfacearea(2, 3, 4))

Output: 52"
Create a Python program for finding the maximum and minimum numbers in an array of numbers.,"def find_min_max(numbers):
 
 min_num = float('inf')
 max_num = float('-inf')
 
 for num in numbers:
  if num < min_num:
   min_num = num
  if num > max_num:
   max_num = num
 
 return [min_num, max_num]

numbers = [1, 10, 3, 8, 6]
print(find_min_max(numbers))

# Output: [1, 10]"
Implement a python script to generate a random string of length 10 containing only alphabets.,"import string
import random

# generate a random string of length 10
def generateRandomString(length):
  letters = string.ascii_letters
  return ''.join(random.choice(letters) for i in range(length))

rand_string = generateRandomString(10)
print(rand_string)"
Develop a Python program to extract the last 3 elements of a given list and append them to the beginning of the list.,"def move_last_3(list):
  last3 = list[-3:]
  del list[-3:]
  list = last3 + list
  return list"
Optimize a given Python script that reverse a string.,"def reverse_string(string):
    return string[::-1]"
Write an algorithm in Python to calendarify the dates in the following array,"def calendarify(dates):
    calendar = []
    for date in dates:
        day = date % 100
        month = date // 100
        calendar.append((day, month))
    return calendar
  
calendarify(dates)"
"Using Python, design an algorithm that takes a string as an input and reverses it.","def reverseString(str): 
  s = """" 
  for i in str: 
    s = i + s
  return s 

print(reverseString('Hello World!'))	# Output: !dlroW olleH"
Write a Python function to convert a list of integers into a comma separated string.,"def list_to_string(int_list):
    string = """"

    for i in int_list:
        string += str(i) + "",""

    # Remove trailing comma
    string = string[:-1]

    return string

int_list = [1, 4, 5, 6, 7] 
print(list_to_string(int_list)) // ""1,4,5,6,7"""
"Using Python, create a program to print the following pattern.","for i in range(7):
    print(""*"" * i)
for i in reversed(range(7)):
    print(""*"" * i)"
Write a function to remove all characters except letters and numbers using regex,"import re 
def remove_char(S):
  result = re.sub('[\W_]+', '', S) 
  return result"
Edit the following Python code to ensure the program runs successfully,"list = [1, 5, 6, 8]
for i in list:
    print(i)"
Generate a Python program to optimize an array of numbers,"def optimize_array(A):
    A.sort()
    return A

print(optimize_array([5, 4, 8, 9, 6, 1, -4, 7]))"
Create a Python program that displays the elements of an array in reverse order.,"def reverse_array(arr):
    """"""Prints the elements of an array in reverse order""""""
    length = len(arr)
    for i in reversed(range(length)):
        print(arr[i], end="" "")"
Create a Python program to check if a given string has duplicates characters.,"def hasDuplicates(s):
    set = set()
    for ch in s:
        if ch in set:
            return True
        set.add(ch)
    return False"
Can you create a data type in Python to represent a student record?,"class Student:
    def __init__(self, name, age, address, number):
        self.name = name
        self.age = age
        self.address = address
        self.number = number

# Usage
student = Student(""John Smith"", 20, ""123 Main St"", 123456789)"
Implement a function in Python that takes a string as input and returns a deep copy of the string with its letters reversed.,"def reverse_string(string):
 # Create empty string to store reversed characters
 reversed_string = """"

 # Loop through string to get individual characters 
 for char in string:
 reversed_string = char + reversed_string

 # Return reversed string
 return reversed_string

print(reverse_string(""Hello World!""))  # Output -> ""!dlroW olleH"""
"Generate
a python program that calculates the total cost of all items in a given list","def total_cost(items):
    total_cost = 0
    for item in items:
        quantity = item[1]
        unit_price = item[2]
        total_cost += quantity * unit_price
    return total_cost"
Convert a given JSON data into a Python dictionary object.,"import json

data = {
 ""name"": ""John"",
 ""age"": 32,
 ""address"": ""123 Main Street""
}

py_dict = json.loads(data)"
Generate a Python function that takes a string and returns the longest substring without repeating characters.,"def longestSubstringWithoutRepeatingCharacters(string):
    longest = """"
    current = """"
    for c in string:
        if c not in current:
            current += c
        else:
            if len(current) > len(longest):
                longest = current
            current = c
    if len(current) > len(longest):
        longest = current
    return longest"
Optimize an existing Python function to reverse a string. This function should take a string as input and return the reversed string.,"def reverse_string(input):
    return input[::-1]"
Generate a random string in Python of 32 characters using a range of alphanumeric characters.,"import random
import string

def random_string(stringLength=32):
 lettersAndDigits = string.ascii_letters + string.digits
 return ''.join(random.choice(lettersAndDigits) for i in range(stringLength))

print(random_string()) 
# Output: 'K1JyLQQjq5GKFVAvVx7Cv1ocTc62NHAK'"
Write a Python program to append two lists,"list1 = [1, 2, 3]
list2 = [4, 5, 6]
appended_list = list1 + list2
print(appended_list) # [1, 2, 3, 4, 5, 6]"
Create a visualization using the Python library matplotlib that compares the sales of two products.,"import matplotlib.pyplot as plt

product1 = [10, 15, 12, 18, 20]
product2 = [5, 8, 9, 10, 15]

plt.plot(product1, marker='o', label='Product 1')
plt.plot(product2, marker='o', label='Product 2')

plt.title('Comparing sales of two products')
plt.xlabel('Products')
plt.ylabel('Sales')
plt.legend()
plt.show()"
Create a Python code for reversing a given string.,"def reverse_string(str):
    rev_str = """"
    for ch in str: 
        rev_str = ch + rev_str 
    return rev_str
  
string = ""Hello World""
print(reverse_string(string))"
Create a Python script that pulls data from an API and stores it in a database.,"import requests
import json
import sqlite3

# Make a GET request to the API
response = requests.get(url)
data = response.json()

# Save the data to a database
conn = sqlite3.connect('data.db')
c = conn.cursor()
for item in data:
    c.execute(""INSERT INTO items VALUES (?, ?)"", (item['id'], item['name']))
conn.commit()
conn.close()"
Design an algorithm in Python that can print all the prime numbers from 1 to a given number.,"def print_prime_numbers(num):
    for n in range(2, num+1):
        if n == 2 or n ==3 :
            print(n, end="""")
            continue
        for i in range(2, n):
            if n % i == 0:
                break
        else:
            print(n, end="""")"
Write a python function to find the nth digit in the proper fraction of two given numbers.,"def find_Nth_Digit(p,q,N) :  
    while (N > 0) : 
        N -= 1;  
        p *= 10;  
        res = p // q;  
        p %= q;  
    return res;  "
Write a function to normalize a vector of values in Python.,"def normalize_vector(values):
    length = 0
    for v in values:
        length += (v ** 2)
    length = pow(length, 0.5)
    if length == 0:
        return [0 for v in values]
    return [v / length for v in values]"
Create a simple python script to parse a given JSON string and print all the keys and their corresponding values.,"import json

json_str = '{""name"": ""John"", ""age"": 30, ""city"": ""New York""}'
json_data = json.loads(json_str)

for key, value in json_data.items():
    print('{}: {}'.format(key, value))"
Develop a program in Python to detect the outliers of a given dataset.,"import numpy as np 

# Load dataset 
data = np.genfromtxt(""data.csv"", delimiter="","") 

# Calculate interquartile range 
Q1 = np.percentile(data, 25) 
Q3 = np.percentile(data, 75) 

# Interquartile range 
IQR = Q3 - Q1 

# Remove outliers 
outliers = (data < (Q1 - 1.5 * IQR)) | (data > (Q3 + 1.5 * IQR))

# Print outliers 
print(data[outliers])"
Create a basic Python script to open a spreadsheet and read a particular column of data.,"import pandas as pd

file_name = 'filename.xlsx'
column_name = 'column_name'

# Open the file
df = pd.read_excel(file_name)

# Read the column
data = df[column_name]

# Iterate the rows
for i, row in data.iterrows():
    # Do something with each row of data"
Create a function in Python that takes two parameters: string and character. It should return the number of occurrences of the given character in the given string.,"def count_char(string, character):
 count = 0
 for c in string:
 if c == character:
 count += 1
 return count

print(count_char('This is a sample string.', 's'))  # 3"
Write a Python code snippet that produces the following output:,"for i in range(7):
    for j in range(7):
        if (i + j) % 2 == 0:
            print('#', end='')
        else:
            print(' ', end='')
    print()"
Identify which of the following two Python codes is more memory efficient.,Code B is more memory efficient than Code A since it uses list comprehension instead of appending items to a list.
Write a function in Python that converts a given date-time string into a specified timestamp format.,"import datetime
def convert_datetime_to_timestamp(date_time, timestamp_format):
    return datetime.strptime(date_time, ""%Y-%m-%d %H:%M:%S"").strftime(timestamp_format)"
"Write a Python program to print out the current date and time in the form ""Friday, July 24th, 2020, at 4:00pm"".","from datetime import datetime

now = datetime.now()

print(""Today's date is"", now.strftime(""%A, %B %dth, %Y, at %I:%M%p""))"
Generate a Python program to calculate the mean of four numbers.,"def mean(nums):
    total = 0
    for num in nums:
        total += num
    return total/len(nums)

nums = [4, 6, 8, 10]
result = mean(nums)

print(""The mean of"", nums, ""is"", result)"
Rewrite the code snippet with updated syntax for Python 3.,"print(""Hello World!"")"
"Write a Python code to create an object to store the details of a student such as name, age, and grade.","class Student:
    def __init__(self, name, age, grade):
        self.name = name
        self.age = age
        self.grade = grade

    def get_name(self):
        return self.name

    def get_age(self):
        return self.age
 
    def get_grade(self):
        return self.grade"
"Create a function in Python that given a string, calculates the number of vowels in it.","def count_vowels(s):
  vowels = 'aeiou'
  count = 0
  for c in s.lower():
    if c in vowels:
      count += 1
  return count

s = 'Hello World!'
print(count_vowels(s)) # Output 3"
Develop a Python program to output the most common elements in a given collection,"from collections import Counter 

def most_common (collection): 
	data = Counter(collection) 
	return data.most_common(1)[0] 

collection = [1, 4, 5, 3, 4, 6, 5, 3, 4]
assert most_common(collection) == (4, 3) 
print (""Most Common element is: "",most_common(collection))"
Create a Python program to edit a string and remove the vowels from it.,"def remove_vowels(string):
    vowels = ""aeiouAEIOU""
    result = """"
    for character in string: 
        if character not in vowels: 
            result += character
    return result
  
print (remove_vowels(""Hello world""))"
Generate a Python program to search for a given word in a text string.,"def searchWord(text, word):
  return word in text

text = ""the quick brown fox jumps over the lazy dog""
word = ""fox""

if searchWord(text, word):
  print(""The word is found in the text string."")
else:
  print(""The word is not found in the text string."")"
Split the Python code below into simpler functions.,"# Function to add two numbers
def add_two_numbers(a, b):
  return a + b

# Function to multiply two numbers
def multiply_two_numbers(a, b):
  return a * b

# Function to return the sum and product of two numbers
def sum_and_product(a, b):
  c = add_two_numbers(a, b)
  d = multiply_two_numbers(a, b)
  return c, d"
"Analyze the input provided and generate a function in Python that returns ""Invalid input"" if the input is not a valid integer number, or returns the number of digits in the input number otherwise.","def count_digits(inp):
    if not isinstance(inp, int):
        return ""Invalid input""
    else:
        return len(str(inp))"
Write a Python program to calculate the number of days between two dates.,"def days_between_dates(date1, date2):
    """"""
    Calculate the number of days between two dates
    date1: date object
    date2: date object
    """"""
    time_diff = date2 - date1
    return time_diff.days

days_between_dates(date(2020,1,2), date(2020,2,19))"
Create a program to concatenate two strings in Python.,"string1 = ""Hello""
string2 = ""World""

concatenatedString = string1 + string2

print(concatenatedString) # ""HelloWorld"""
"Write a function that matches a word containing 'z', not at the start or end of the word.","import re
def text_match_wordz_middle(text):
        patterns = '\Bz\B'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')"
Write a python program to generate the binary representation of a base-10 number,"def decimal_to_binary(num): 
    if num > 1:
        decimal_to_binary(num//2) 
    print(num % 2,end = '')"
Create a python script that sorts a list of tuples based on the second element.,"sortedTuples = sorted(tuples, key = lambda x: x[1])"
Generate a class in Python using the parameters provided in the following Input section.,"class Person:
    def __init__(self, Name, Age, Gender):
        self.Name = Name
        self.Age = Age
        self.Gender = Gender"
Write a Python program to identify the number of times a given number appears in a list.,"counter = 0
for num in list:
    if num == number:
        counter += 1
print(""The given number appears"", counter, ""times in the list."")"
Create a TextBlob classifier in Python which takes in a string and outputs whether the sentiment of the string is positive or negative.,"from textblob import TextBlob

class SentimentClassifier:

 def classify(self, text):
  # Create TextBlob object
  analysis = TextBlob(text)
  # Set sentiment 
  if analysis.sentiment[0]>0: 
   return 'positive'
  elif analysis.sentiment[0]<0: 
   return 'negative'
  else: 
   return 'neutral'"
Create a function in python to calculate the square root,"def sqrt(x): 
    if x == 0 or x == 1: 
        return x 
      
    i = 1 
    res = 1 
    while res <= x: 
        i += 1 
        res = i * i 
      
    return i-1"
Write a Python program to count the number of occurrences of each word in a sentence.,"sentence = 'The quick brown fox jumps over the lazy dog'
words = sentence.split(' ')

word_count = {} 
for word in words:
    if word in word_count:
        word_count[word] += 1
    else:
        word_count[word] = 1
 
for k,v in word_count.items():
    print(k , ':' , v)"
Generate a function to write the Fibonacci series in Python,"def fibonacci(n): 
    a = 0
    b = 1
    if n < 0: 
        print(""Incorrect input"")
    elif n == 0: 
        return a # when n is 0
    elif n == 1: 
        return b # when n is 1 
    else: 
        for i in range(2,n): 
            c = a + b 
            a = b 
            b = c 
        return b"
Create a python function to extract the largest DNA sequence from a list of sequences.,"def longest_sequence(sequences):
 longest_sequence = sequences[0]

 for sequence in sequences:
 if len(sequence) > len(longest_sequence):
 longest_sequence = sequence

 return longest_sequence

print(longest_sequence(sequences))  # ATGATATCATCGATTGTA"
Construct a Python program that converts minutes into years and days.,"def minutesToYears(minutes):
    years = int(minutes / 525600)
    days = int((minutes % 525600) / 1440)

    return years, days

minutes = 4000000
print(""{} minutes is equivalent to {} years and {} days.""
    .format(minutes, *minutesToYears(minutes)))"
Create a Python script to return a list of the top five longest words in a given string.,"def get_longest_words(sentence): 
    words = sentence.split() 
   
    words.sort(key = lambda s: len(s)) 
  
    longest_words = words[-5:] 
    longest_words.reverse() 
  
    return longest_words 

sentence = ""I am a coding enthusiast""
print(get_longest_words(sentence))"
Generate a lambda expression in Python that takes a list of numbers and returns the maximum value.,max_value = lambda num_list: max(num_list)
Modify the following python code to include a trycatch block.,"def add_number(a, b):
    try:
        return a + b 
    except TypeError:
        print(""Please enter numeric values"")"
Write a Python program that can generate all permutations of a given list.,"def generate_permutations(list_a):
  import itertools 
  return list(itertools.permutations(list_a))
  
generate_permutations(list_a)"
Design a solution using python to find the sum of all even numbers between x and y,"def even_sum(x, y): 
    
    result=0 
    for i in range(x,y+1): 
        if i%2 == 0: 
            result += i
            
    return result 
  
x=2
y=8
sum = even_sum(x,y) 
print(sum)"
Write a Python program to calculate the area of a regular hexagon,"import math

def calculateArea(side): 
    area = (3 * math.sqrt(3) * (side * side)) / 2
    return area"
Design a code in Python to count the number of unique elements in a list.,"def count_unique_elements(numbers_list): 
    seen = set() 
    count = 0 
    for number in numbers_list: 
        if number not in seen: 
            seen.add(number) 
            count+=1 
    return count"
Create a class in Python that represents a 3D Cube and initializes all side lengths to 10.,"class Cube:
    def __init__(self):
        self.sideLengthA = 10
        self.sideLengthB = 10
        self.sideLengthC = 10"
Create a function in Python that determines if a given number is an Armstrong number or not.,"def isArmstrongNumber(number):
  num_str = str(number)
  result = 0
  power = len(num_str)

  for c in num_str:
    result += int(c) ** power

  if result == number:
    return True
  else:
    return False

if isArmstrongNumber(371):
  print('It is an Armstrong number.')
else:
  print('It is not an Armstrong number.')"
Create a kernelized SVM classifier in Python for a multiclass classification problem.,"# import necessary libraries
from sklearn import svm

# define the model
model = svm.SVC(kernel='rbf', gamma=1.0, C=1.0)

# fit the model
model.fit(X, y)

# make predictions
y_pred = model.predict(X)"
Write a Python program to convert a given string to an encrypted version of the string.,"import hashlib

def encrypt_string(text):
    result = hashlib.sha256(text.encode()).hexdigest()
    return result

encrypted_string = encrypt_string(""Hello, World!"")
print(encrypted_string)"
Generate a python program to remove vowels from a string of words.,"def remove_vowels(word_string):
    vowels = ('a', 'e', 'i', 'o', 'u') 
    word_string = word_string.lower()
    for x in word_string:
        if x in vowels: 
            word_string = word_string.replace(x,"""")
             
    print(word_string)"
Write a Python program to edit an existing array without creating a new array.,"def edit_array(arr):
    for i in range(len(arr)):
        arr[i] += 10
    return arr

if __name__ == '__main__':
    arr = [1,2,3,4,5]
    print(""Edited array:"", edit_array(arr))"
"Given a list of dictionaries, write a python program to find the item with the highest value for the key 'price'.","maxVal = 0
maxItem = {}
for item in items:
 if item['price'] > maxVal:
 maxVal = item['price']
 maxItem = item

print(""The item with the highest price is: "", maxItem)"
Generate an algorithm using Python for computing the sum of all numbers up to a given number.,"def sum_up_to_number(number):
   sum_number = 0
   for num in range(1,number+1):
      sum_number += num
   return sum_number"
Create a Python class for a shopping cart that allows customers to add and remove items.,"class ShoppingCart:
 def __init__(self):
 self.items = {}

 def add_item(self, item, quantity):
 if item in self.items:
 self.items[item] += quantity
 else:
 self.items[item] = quantity

 def remove_item(self, item, quantity):
 if item not in self.items:
 return
 if self.items[item] > quantity:
 self.items[item] -= quantity
 else:
 del self.items[item]"
Create an AWS Lambda function in Python to make an HTTP request using the requests library.,"import json
import requests

# Handler function
def handler(event, context):
 # Make request
 response = requests.get('https://api.example.com/data')
 
 # Parse response
 data = response.json()
 
 return {
 'statusCode': 200,
 'body': json.dumps(data)
 }"
Design a logistic regression model in Python to predict the class of a given point.,"from sklearn.linear_model import LogisticRegression

model = LogisticRegression()

model.fit(X, y)

def predict_class(X):
 pred = model.predict([X])
 return pred"
Generate a Python program to generate a list of all prime numbers between 1 and 100.,"prime_numbers = []
for num in range(2, 101):
  isPrime = True
  for i in range(2, num//2 + 1):
    if (num % i == 0):
      isPrime = False
      break  
  if isPrime:
    prime_numbers.append(num)

print(prime_numbers)"
Write a Python function to check if an element exists in a list.,"def check_list(list_, element): 
    return element in list_"
Transform the code snippet into a Python class.,"class Calculator:
    def __init__(self):
        pass

    def multiply(self, x, y):
        return x * y"
"Given a list of integers, write a Python program to find the two numbers whose sum is closest to zero.","def find_sum_close_to_zero(arr):
    min_sum = float('inf')
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if abs(arr[i] + arr[j]) < abs(min_sum):
                min_sum = arr[i] + arr[j]
    return min_sum

print(find_sum_close_to_zero(arr)) # -7"
Create a Python script to extract the temperature from a JSON object.,"import json

json_string = '''
{
  ""location"": ""Berlin"",
  ""weather"": {
    ""temperature"": 17.6
  }
}
'''

data = json.loads(json_string)

temperature = data[""weather""][""temperature""]
print(temperature) => 17.6"
Construct a for loop in Python to calculate the sum of the first 10 even numbers.,"total = 0
for x in range(2, 21, 2):
    total += x
    
print(total)"
"Create a regular expression in Python to match the following words: ""apple"", ""banana"", ""strawberry"", ""orange"".","import re

words_regex = re.compile(r""apple|banana|strawberry|orange"")"
Create an algorithm in Python to find the sum of the first n prime numbers,"def sum_of_primes(n):
    if n < 2: 
        return 0
    primes = [2]
    num = 3
    while len(primes) < n:
        is_prime = True
        for p in primes:
            if num % p == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(num)
        num += 2
    return sum(primes)

print(sum_of_primes(10))"
Write a Python code fragment to optimize the given function.,"def search(data, x):
    if x in data:
        return True
    return False"
Create a Python Class to check if a given string is a palindrome.,"class Palindrome:
    def __init__(self, string):
        self.string = string  
  
    def checkPalindrome(self):
        if(self.string == self.string[::-1]): 
            return True
        else:
             return False

string = 'radar'
obj = Palindrome(string)
if(obj.checkPalindrome()): 
    print(""String is a Palindrome!"")
else:
    print(""String is not a Palindrome!"")"
Write a Python function that takes a list and returns the number of elements that are divisible by 3.,"def number_divisible_by_3(list):
    count = 0
    for item in list:
        if item % 3 == 0:
            count += 1
    return count

result = number_divisible_by_3(list)
print(result)"
Create a Python program to sort a list of numbers from lowest to highest.,"def sort_list(numbers): 
    numbers.sort() 
    return numbers 
  
# Driver code 
numbers = [5, 2, 3, 7, 4]
print(sort_list(numbers))"
Create a function in Python to count the occurrence of each word in a sentence.,"def word_count(sentence):
    words = sentence.split() 
    word_freq = {}
    for word in words:
        if word in word_freq:
            word_freq[word] += 1
        else:
            word_freq[word] = 1
    return word_freq

word_counts = word_count(sentence)
print(word_counts)"
Create a linear regression model in Python using scikit-learn.,"import numpy as np
from sklearn import linear_model

# Initialize the features and target
X = np.array([[1.1, 1.5], [1.3, 1.9], [1.5, 2.3], [1.7, 2.7], [1.9, 3.1]])
y = np.array([2.5, 3.2, 4.0, 4.7, 5.4])

# Create the model
model = linear_model.LinearRegression()

# Fit the model
model.fit(X, y)

# Check the model
print(model.intercept_)
print(model.coef_)"
Write a Python program to parse a web page and extract text from its HTML tags.,"from bs4 import BeautifulSoup
def parse_web_html(html):
 soup = BeautifulSoup(html, 'html.parser')
 text = soup.get_text()
 return text"
Design a program in Python which prints the Fibonacci sequence up to the given number n.,"def print_fibonacci_seq(n):
    a, b = 0, 1
    while a < n:
        print(a, end=' ')
        a, b = b, a + b

if __name__ == '__main__':
    n = 100
    print_fibonacci_seq(n)"
Create a program in Python to remove all elements of a given list with a value of 0.,"def remove_zeroes(nums):
  return [x for x in nums if x != 0]
  
print(remove_zeroes([0, 1, 0, 3, 5, 0, 4]))"
Construct a Python dictionary to store information about a user.,"user_info = {
    'name': 'John Smith',
    'age': 32,
    'location': 'USA'
}"
Construct a code to find the sum of a series of numbers entered by the user using Python.,"total = 0
count = 0

while True:
    user_input = int(input(""Enter an integer (enter 0 to stop): ""))
    if user_input == 0:
        break
    
    else:
        total += user_input
        count += 1

print(""The sum of"", count, ""numbers is"", total)"
Develop a Python program that prints a random string every time it is run.,"import random

def gen_random_str():
 # generate a random string
 random_str = ''.join([random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789') for i in range(10)])
 
 # print the string
 print(random_str)

if __name__ == '__main__':
 gen_random_str()"
Develop an algorithm in Python that reverses a given string.,"def reverseString(s): 
    return s[::-1] 
  
string = ""hello world""

print(""Original String:"", string) 
print(""Reversed String:"", reverseString(string))"
Create a multi-dimensional array containing 3 rows and 3 columns in python,"arr = [[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]]"
Write a function to substract the contents of one tuple with corresponding index of other tuple.,"def substract_elements(test_tup1, test_tup2):
  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))
  return (res) "
"Generate a Python program that takes a date as input and returns the day of the week as a string (i.e. Sunday, Monday, etc.).","import datetime

def get_weekday(date_string):
    date = datetime.datetime.strptime(date_string, '%m/%d/%Y')
    return date.strftime('%A')

weekday = get_weekday('3/22/2021')
print(weekday)"
"Make a program in Python to print a staircase of height 'n', where n is an integer.","def staircase(n): 
    for i in range(0, n): 
        for j in range(0, n - i - 1): 
            print(end="" "") 
        for j in range(0, i + 1): 
            print(""#"", end="""") 
        print(""\r"") 
  
# Driver code 
n = 5
staircase(n)"
"Rewrite the following python program using a functional programming approach. The code should take a list of integers as input, filter out the odd numbers, square each even number, and return the sum of all the numbers.","def fx(nums): 
 return sum(map(lambda x : x*x if x % 2==0 else 0, nums)) 

print(fx([3, 4, 5, 6, 7, 8, 9, 10]))  # Output: 240"
"Given a list of integers, write a Python program to count the number of 0s in the list.","def count_zeros(list):
    count = 0
    for num in list:
        if num == 0:
            count += 1
    return count"
You need to optimize a given Python system so it can run faster on a target machine.,"def optimize_system(system):
    # Analyze system to evaluate current performance
    analyze_system(system)
    
    # Research for faster replacement alternatives
    replacements = research_replacements(system)
    
    # Implement the replacements
    implement_replacements(system, replacements)
    
    # Evaluate the optimized system
    analyze_system(system)"
Create Python code to generate the first 10 prime numbers.,"def generate_prime_numbers(n):
    nums = []
    for x in range(2, n + 1):
        for y in range(2, int(x ** 0.5) + 1):
            if x % y == 0:
                break
        else:
            nums.append(x)
    return nums

print(generate_prime_numbers(10))"
Create a recursive function with python as the language to find the sum of all elements in a list.,"def sumOfList(list):
   if len(list) == 1:
       return list[0]
   else:
       return list[0] + sumOfList(list[1:])"
Design a program in Python to display the time in a digital format.,"from time import strftime

def digital_clock():
    current_time = strftime(""%H:%M:%S"")
    print(current_time)

digital_clock()"
Write a quicksort algorithm in Python.,"def quick_sort(arr):
    if len(arr) < 2:
        return arr
    else:
        pivot = arr[0]
        less = [i for i in arr[1:] if i <= pivot]
        greater = [i for i in arr[1:] if i > pivot]

        return quick_sort(less) + [pivot] + quick_sort(greater)"
Construct a Python function to find the largest and smallest number in a list.,"def find_min_max(nums):
    max_num, min_num = nums[0], nums[0]
    for num in nums:
        if num > max_num:
            max_num = num
        if num < min_num:
            min_num = num
    return min_num, max_num

nums = [5, 2, 7, 9]
min_num, max_num = find_min_max(nums)
print(""Max num:"",max_num)
print(""Min num:"",min_num)"
"Given the following data points, generate a polynomial equation using Python.","import numpy as np

x = np.array([-2, 0, 2])
y = np.array([1, 4, 9])

z = np.polyfit(x, y, 2)
equation = np.poly1d(z)

print(equation)

# Output: 
#       2
# -6.66 x + 5.0 x + 1.0"
Create a Python program to round up a float to the nearest integer.,"def round_up(f):
    if f - int(f) >= 0.5:
        return int(f) + 1
    return int(f)

round_val = round_up(3.14)
print(round_val)"
Write a Python program to extract the n-th element from the given list of lists.,"def get_nth_element(list_of_lists, n):
    return [item[n] for item in list_of_lists]"
Generate a python program that tests a user's input for a palindrome.,"def is_palindrome(inp):
    rev_inp = inp[::-1]
    if inp == rev_inp:
        return True
    else:
        return False"
Write a function to caluclate perimeter of a parallelogram.,"def parallelogram_perimeter(b,h):
  perimeter=2*(b*h)
  return perimeter"
Generate a Python script to calculate the sum of elements in the following input array.,"def SumArray(arr):
  result = 0
  for num in arr: 
    result += num
  return result 
 
print(SumArray([1, 4, 8, 10, 12]))
    # Outputs: 35"
"Create a Python script that takes the list [1, 2, 3, 4, 5] and returns the sum.","def sum_list(lst):
  total = 0
  for num in lst:
    total += num
  return total

sum_list([1,2,3,4,5])"
Generate a script in Python that can parse a given web page and extract its content.,"import requests
from bs4 import BeautifulSoup

def parse_web_page(url):
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')
    body_text = soup.findAll('p') 
    data = []
    for item in body_text:
        text = item.text
        data.append(text)
    return data"
Write a Python program to join all elements in a list into a string separated by a given separator.,"def join_list_with_separator(list, separator):
    joined_string = separator.join(list)
    return joined_string"
Write a Python program for creating a histogram from a given dataset.,"import matplotlib.pyplot as plt

data = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
frequency = [10, 8, 12, 6, 15, 7, 5, 2, 6, 9, 3]

plt.hist(data, weights=frequency)
plt.title(""Histogram"")
plt.xlabel(""Values"")
plt.ylabel(""Frequency"")

plt.show()"
Optimize the following Python program to find the maximum number in a list.,"def max_num(list):
  max_num = list[0]

  for num in list:
    if num > max_num:
      max_num = num
  
  return max_num"
Create a function in Python to raise a number to a given power.,"def power(num, exponent):
    result = 1
    for _ in range(exponent):
        result *= num
    return result

print(power(5, 2)) # Output: 25"
Design a Python program to generate a frequency distribution report given a list of input words.,"from collections import Counter

def print_frequency_report(words):
    word_frequencies = Counter(words)
    print('Word\tFrequency')
    print('==============')
    for word, frequency in word_frequencies.items():
        print('{}\t{}'.format(word, frequency))"
Generate a Python program that removes all occurrences of an element from a list,"def remove_element(arr, x):
  new_arr = [i for i in arr if i != x] 
  return new_arr 
  
arr = [1, 2, 2, 3, 2, 4] 
x = 2

new_arr = remove_element(arr, x) 
print(new_arr)"
Create a Python script to identify the frequency of words in a sentence.,"from collections import Counter

sentence = ""This is a test sentence""

#split the sentence into words
words = sentence.split()

#count the frequency of each word
word_frequency = Counter(words)

#print the results
print(word_frequency)"
Write an expression in python to check if a given number is prime,"def is_prime(number):
    if number>1:
        for i in range(2,number):
            if number%i==0:
                return False
    else:
        return False
    return True
print(is_prime(number))"
Create a Python program to sort the elements of a list in descending order (largest value first).,"numbers = [1, 7, 25, 8, 14]

# Sort the list in descending order
numbers.sort(reverse=True)

# Print the sorted list
print(numbers)

# Output
[25, 14, 8, 7, 1]"
Create a python program to convert temperatures from Farenheit to Celsius.,"def Farenheit_to_Celsius(temperature):
  celsius = (temperature - 32) * 5/9
  return celsius

temp_F = 94
temp_C = Farenheit_to_Celsius(temp_F)

print('{}°F is equal to {}°C'.format(temp_F, temp_C))"
Write a Python program to display a histogram of the frequencies of words in a given sentence.,"import matplotlib.pyplot as plt 
  
# Data to plot 
labels = 'My', 'name', 'is', 'John'
sizes = [1, 1, 1, 1]

# Plot
plt.pie(sizes, labels=labels, 
        autopct='%1.1f%%', shadow=True, startangle=90) 

plt.axis('equal') 

plt.show()"
Create a Python program to find the sum of all elements in the following two-dimensional list.,"def sum_list(list_two_dim): 
    sum = 0
    for row in list_two_dim: 
        sum += sum(row) 
    return sum"
"Using a library such as Numpy, write a Python program to generate a random matrix with 500 rows and 10 columns.","import numpy as np

# Generate random matrix with 500 rows and 10 columns
matrix = np.random.rand(500,10)

# Print the matrix
print(matrix)"
Develop a Python code to convert the given binary string to its corresponding integer value.,"def binary_to_int(binary):
    result = 0
    for i in range(len(binary)): 
        digit = binary[i] 
        if digit == '1':
            result = result + pow(2, len(binary)-i-1)  
    return result

binary_to_int('100100') # returns 36"
"Given a list of integers, write a Python program to find the index of the largest number.","nums = [5, 10, 20, 6, 8]
max_num = max(nums)
max_index = nums.index(max_num)

print(max_index)"
Create a python program to check the length of a given string,"def check_length(string):
    return len(string)"
Generate a list of 50 random numbers between 1 and 100 in Python.,"import random
random_number_list = random.sample(range(1, 100), 50)
print(random_number_list)"
Create a loop in Python that prints a random number between 0 and 9.,"import random
for i in range(10):
    print(random.randint(0, 9))"
Write a code to convert a JSON object to an array of dictionaries in Python.,"#Function to convert a JSON object to an array of dictionaries in Python
import json

def json_to_array(data):
    my_dict = json.loads(data)
    return [{k: v} for k, v in my_dict.items()]

# Driver code
data = '{ ""Fruit"": ""Apple"", ""Shape"": ""Round"", ""Color"": ""Red"" }'
dict_array = json_to_array(data)
print(dict_array)"
Create a python program to group similar items together in a list.,"def group_similar_items(list): 
    grouped_items = {} 

    for item in list: 
        if item in grouped_items: 
            grouped_items[item] += 1
        else: 
            grouped_items[item] = 1

    print(grouped_items)

group_similar_items([""dog"", ""cat"", ""cat"", ""fox"", ""dog"", ""elephant""]) 
# Output: {'dog': 2, 'cat': 2, 'fox': 1, 'elephant': 1}"
Automate the following UNIX command using  python.,"import os

password = 'password'
os.system('echo ' + password + ' | sudo -S apt-get install vim')"
Create a class in Python which takes a name and assigns it to the user_name property.,"class User:
    def __init__(self, name):
        self.user_name = name;"
Create a for-loop in Python to iterate over a list and print each element.,"words = [""these"", ""are"", ""some"", ""words""]
for word in words:
  print(word)"
"Create a Python class called ""Person"" with attributes ""name"" and ""age"".","class Person:
  def __init__(self, name, age):
    self.name = name
    self.age = age"
Find the highest number in a list of numbers in Python.,"max_number = max([7, 4, 5, 100, 2])
print(max_number)"
Optimize a Python program to calculate the volume of a cube.,"def volume_of_cube(edge_length):
    return edge_length ** 3
    
print(volume_of_cube(3))"
Optimize a Python code snippet which prints out the even numbers up to a given number.,"def printEvenNumbers(num):
 for n in range(2, num+1):
 if n%2 == 0:
 print(n)

printEvenNumbers(50)"
Design a function in Python that takes a list of integers and returns the difference between the maximum and the minimum values.,"def getDifference(data):
 min_value = min(data)
 max_value = max(data)
 return max_value - min_value

difference = getDifference(data)
print(difference) # 8"
Write a Python program to access the data from a web API and sort it in descending order.,"import requests
import json
import operator

url = 'http://example.url/data.json'
response = requests.get(url)
data = json.loads(response.text)
sorted_data = sorted(data.items(), key=operator.itemgetter(1), reverse=True)
print(sorted_data)"
Write a Python program to create a Fibonacci sequence of n-length.,"def fibonacci(n):
  if n == 0:
    return 0
  elif n == 1:
    return 1
  else:
    return fibonacci(n-1) + fibonacci(n-2)

for i in range(10):
  print(fibonacci(i))"
Create a Python program that takes a list as argument and returns it in reverse order.,"def reverse_list(lst): 
    return lst[::-1] 
  
lst = [1, 3, 5, 6, 10] 
print(reverse_list(lst))"
Design an API in Python that can generate a random password with no less than 8 characters.,"import string
import random

def generate_password():
 chars = string.ascii_letters + string.digits + string.punctuation
 length = 8
 return ''.join(random.choices(chars, k=length))

# Generate password
password = generate_password()
print(password)"
Write a function in Python to extract domain name from given URLs.,"import re
def extract_domain_name(url):
    regex = r""://([^/]+)/?""
    match = re.search(regex, url)
 
    if match:
        return match.group(1)

url = ""http://www.google.com""
domain_name = extract_domain_name(url)
print(domain_name)
 
# Output: 
# google.com"
Utilize the Python in-built module to print the calendar for the given month.,"# import the module
import calendar

# print the calendar 
print(calendar.month(2021, 5))"
Create a Python script to fetch news articles from a news API.,"import requests

url = 'http://newsapi.org/v2/top-headlines?country=us&apiKey=YOUR_API_KEY'
response = requests.get(url)
data = response.json()

for article in data['articles']:
 print(article['title'])
// Output: Headline 1, Headline 2, Headline 3, etc."
Write a Python program to sort a list according to a given order of letters.,"def sort_by_order(l, order):
	return sorted(l, key = lambda x : order.index(x))"
Suggest a method for encrypting a message in Python using cryptography.,"from cryptography.fernet import Fernet

# Generate a new fernet key
key = Fernet.generate_key()
f = Fernet(key)

# Encrypt the message
encrypted_message = f.encrypt(b""This is a secret message"")

# Decrypt the encrypted message
decrypted_message = f.decrypt(encrypted_message)

print(encrypted_message)
print(decrypted_message)"
Write a Python function to sort an array of numbers in descending order,"def sortDescending(arr):
    arr.sort(reverse=True)
    return arr

array = [3, 7, 1, 5]
sortedArray = sortDescending(array)"
Write a single-line Python code to delete a key-value pair from a dictionary.,my_dictionary.pop('city')
Write a Python function to generate a random string of length n.,"import string
import random

def generate_random_string(length):
    random_str = ''.join(random.choices(string.ascii_uppercase + string.digits, k=length)) 
    return random_str"
Write a python function to find the minimum number of squares whose sum is equal to a given number.,"def get_Min_Squares(n):
    if n <= 3:
        return n;
    res = n 
    for x in range(1,n + 1):
        temp = x * x;
        if temp > n:
            break
        else:
            res = min(res,1 + get_Min_Squares(n  - temp)) 
    return res;"
Identify the output of the following Python expression:,100
Generate an algorithm to count substrings in Python.,"def count_substr(str, substr):
    count = 0
    start = 0
    while (str.find(substr, start) != -1):
        count += 1
        start = str.find(substr, start) + 1
    return count

string = ""abcdabcd""
substring = ""cd""
result = count_substr(string, substring)
print(result)"
Write a Python program that prompts the user for three numbers and prints the mean of those numbers.,"def get_mean(a, b, c):
    return (a + b + c)/3

a = float(input('Enter a number: '))
b = float(input('Enter a number: '))
c = float(input('Enter a number: '))

mean = get_mean(a, b, c)
print('Mean:', mean)"
Fix the bug in the following Python program.,"def calculateArea(width, height):
 return width * height

length = 8
breadth = 10
area = calculateArea(length, breadth)
print(""Area of the rectangle:"", area)"
Create a Python script to check if an array contains contiguous numbers.,"def is_contiguous(arr):
    if (len(arr) == 0):
        return True
    arr.sort()
    for i in range(len(arr) - 1):
        if (arr[i] + 1 != arr[i+1]):
            return False
    return True"
Write a Python function to concatenate two lists.,"def concat_lists(list1, list2):
    return [x for t in zip(list1, list2) for x in t]

list1 = [1, 2, 3]
list2 = [4, 5, 6]

print(concat_lists(list1, list2)) # [1, 4, 2, 5, 3, 6]"
"Given two number arrays A and B, write a Python function to check if each element in A also exists in B","def check_equality(arr1, arr2):
    for num in arr1:
        if num not in arr2:
            return False
    return True

A = [1, 2, 3]
B = [2, 3, 4]

result = check_equality(A, B)
print(result)"
Create a Python program to encrypt a message with an XOR encryption algorithm.,"def xor_encrypt(message, key):
 encrypted = """"
 for i in range(len(message)):
  encrypted += chr(ord(message[i]) ^ ord(key[i % len(key)]))
 return encrypted

message = 'secretmessage'
key = 'iwonttellyou'
encrypted = xor_encrypt(message, key)
print(encrypted) # U5m3pD1DQyN1UB1WAo9VA=="
Design a Palindrome detection algorithm in Python.,"def is_palindrome(input_str):
  len_input = len(input_str)

  for i in range(len_input // 2):
    if input_str[i] != input_str[len_input - i - 1]:
      return False
  
  return True"
Write a function to convert the given binary number to its decimal equivalent.,"def binary_to_decimal(binary): 
    binary1 = binary 
    decimal, i, n = 0, 0, 0
    while(binary != 0): 
        dec = binary % 10
        decimal = decimal + dec * pow(2, i) 
        binary = binary//10
        i += 1
    return (decimal)"
Develop an algorithm in Python to check if an array contains a given number.,"def checkNumber(array, number):
    for i in array:
        if i == number:
            return True
    return False

checkNumber([2, 4, 6, 8], 8)"
"Write a Python program to generate a random password. The program should generate a string of 8 characters (numbers, letters and special characters)","import random
import string

def generate_password():
 password_characters = string.ascii_letters + string.digits + string.punctuation
 password = ''.join(random.choice(password_characters) for i in range(8))
 print(password)

generate_password()"
Develop a Python function to fetch data from a web service.,"import requests

def fetch_data_from_web_service(url):
    response = requests.get(url)
    return response.json()"
Write a Python program to replace a given string with another string.,"sentence = ""I love walking on the beach""
old_word = ""walking""
new_word = ""swimming""

new_sentence = sentence.replace(old_word, new_word)

print(""The new sentence is: '{}'"".format(new_sentence))"
Endeavour to create a python function that takes an array of numbers and returns the highest number in the array.,"def find_largest_number(nums):
    highest_num = nums[0]
    for i in nums:
        if i>highest_num:
            highest_num = i
    return highest_num"
Create a function in Python that input two strings and outputs the longer string.,"def get_longer_string(str1, str2):
 if len(str1) > len(str2):
 return str1
 else:
 return str2"
Generate Python code to sort a sequence of numbers,"def sort_sequence(lst):
    for i in range(len(lst)-1,0,-1):
        for j in range(i):
            if lst[j]>lst[j+1]:
                temp = lst[j]
                lst[j] = lst[j+1]
                lst[j+1] = temp
    return lst

sort_sequence([5,1,9,2,6,3])"
Modify the following Python code to reverse the order of the elements in an array,arr = arr[::-1]  # Reverses the order of elements in the array.
Create a Python program that finds all combinations of two given numbers that sum up to a given goal.,"def combination sums(nums, target):
  result = []
  for i in range(len(nums)):
    x = nums[i]
    for j in range(i + 1, len(nums)):
      if (x + nums[j]) == target: 
        result.append([x,nums[j]]) 
  
  return result"
Invent a python data structure to store information about friends.,"class Friend:
    def __init__(self, name, age, address):
        self.name = name
        self.age = age
        self.address = address

friends_list = []"
Transform the following shell script into a python program.,"import sys
import os

for filename in os.listdir('.'):
    if filename.endswith('.txt'):
        print('Processing ' + filename + ' file...')
        with open(filename, 'r') as f:
            print(f.read())"
Implement quicksort in Python.,"def quicksort(arr):
     if len(arr) < 2:
         return arr

     pivot = arr[0]

     less_than_pivot = [x for x in arr[1:] if x <= pivot]
     greater_than_pivot = [x for x in arr[1:] if x > pivot]

     return quicksort(less_than_pivot) + [pivot] + quicksort(greater_than_pivot)"
"Create a python program to calculate the value of 'x' in the equation ""y = 4x + 7"".","y = 17
x = (y - 7) / 4
print(""x ="", x)"
"Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.","def assign_elements(test_list):
  res = dict()
  for key, val in test_list:
    res.setdefault(val, [])
    res.setdefault(key, []).append(val)
  return (res) "
Create a Python function to split a sentence into words.,"def split_into_words(sentence):
    """"""This function splits a sentence into words.""""""
    # Split the sentence into words
    words = sentence.split(' ')
    # Return the list of words
    return words"
Use Python to calculate and print the sum of values in an array.,"arr = [1,2,3,4,5] 
sum = 0
for i in arr: 
    sum+=i 
    print(sum)

# Output 
# 15"
Create a Python script to calculate the sum of all elements in a matrix.,"def sum_of_elements_matrix(matrix):
    # Initialize result 
    result = 0
    # Iterate through the matrix
    for row in matrix:
        for col in row: 
            result += col 
    # Return the result
    return result"
Generate a secure random 24-byte string in Python.,"import secrets

# Generate the random string
random_string = secrets.token_hex(24)

print(random_string)"
Can you provide a machine learning algorithm in Python that performs sentiment analysis on a given text?,"from nltk.sentiment.vader import SentimentIntensityAnalyzer

sentences = [""This product is simply incredible!""]

analyzer = SentimentIntensityAnalyzer()

for sentence in sentences:
    scores = analyzer.polarity_scores(sentence)
    print(""{:-<40} {}"".format(sentence, str(scores)))"
Generate Python code to detect whether a given sentence is a palindrome,"def is_palindrome(text):
    text = text.lower()
    text = text.replace("" "","""")
    reversed_text = text[::-1]
    if text == reversed_text:
        return True
    return False

print(is_palindrome(""Level"")) # True"
Generate a matrix of random numbers using Python.,matrix = [[random.random() for j in range(30)] for i in range(20)]
Build a text generator in Python that can generate poem based on a given input.,"def generate_poem(input): 
  poem = []
  for i in range(len(input)):
      line = ''
      for j in range(i):
          line += input[j] + ' '
      poem.append(line)
  return poem"
Convert the following for loop into a recursive function in Python.,"def printRange(start, end):
    if start == end:
        return
    print(start)
    printRange(start+1, end)

printRange(0, 5)"
Design an algorithm in Python to identify all the prime numbers in a given range.,"def find_primes_in_range(start_num, end_num):
    primes = []
    for num in range(start_num, end_num + 1):
        is_prime = True
        for divisor in range(2, num):
            if (num % divisor == 0):
                is_prime = False
                break
        if is_prime:
            primes.append(num)
    return primes"
Develop a test suite in Python to test a class or function.,"import unittest 

class TestMyClassOrFunction(unittest.TestCase):

    def test_something(self):
        # Setup 
        # Code to set up a value to test 
        
        # Exercise 
        # Code for the function to test 
        result = function_to_test(*args) 
        
        # Verify
        self.assertEqual(result, expected_result) 

if __name__ == ""__main__"":
    unittest.main()"
Write a function to multiply all the numbers in a list and divide with the length of the list.,"def multiply_num(numbers):  
    total = 1
    for x in numbers:
        total *= x  
    return total/len(numbers) "
Generate a Python function to calculate the area of a triangle given the three sides.,"def triangle_area(side1, side2, side3):
    s = (side1 + side2 + side3) / 2
    area = (s * (s - side1) * (s - side2) * (s - side3)) ** 0.5
    return area"
Construct a Python code to find the maximum in a given list.,"def find_max(list): 
    max = list[0] 
    for i in list: 
        if i > max: 
            max = i 
    return max 
  
list = [10, 3, 16, 17, 8]
print(""Maximum number in the list:"", find_max(list))"
"Write a Python program to generate a password of length 10 from lowercase alphabets, uppercase alphabets, digits and special characters.","import random
import string

length = 10

def generatePassword(length):
    chars = string.ascii_lowercase + string.ascii_uppercase + string.digits + ""!@#$%^&*""
    return ''.join([random.choice(chars) for _ in range(length)])

password = generatePassword(length)
print(password)"
"Generate a new Python class which extends some existing class, but with a modified constructor.","class B(A):
    def __init__(self, param1, param2, param3):
        super().__init__(param1, param2)
        self.param3 = param3"
"Generate a Python code snippet for initializing a 3D numpy array of size (4,3,2).","import numpy as np

# initialize 3D array
arr = np.zeros((4,3,2))"
Create a Python NLTK program to tokenize a given English text.,"import nltk

# Input text
text = ""This is a sample sentence for tokenizing.""

# Tokenize sentences
tokens = nltk.word_tokenize(text)

# Print tokens
print(tokens)

# Output
['This', 'is', 'a', 'sample', 'sentence', 'for', 'tokenizing', '.']"
Generate a python script to calculate the median of a given data set.,"def median(data):
    n = len(data)
    if n % 2 == 0:
        return (data[n//2] + data[(n//2)-1])/2
    else:
        return data[n//2]

data = [5, 6, 7, 8, 9]
median = median(data)
print('Median:', median)"
Generate a Python program to implement a recursive search and replace on strings.,"def replace(s, old, new):
 if s == '':
 return s
else:
 if s[0] == old:
 return new + replace(s[1:], old, new)
 else:
 return s[0] + replace(s[1:], old, new)
 
string = ""Hello World""
print(replace(string, ""World"", ""John""))"
Optimize a function for generating a random string in Python. The function should generate a string with 7 characters that include both numbers and letters,"import random

def random_string(): 
    string = ''.join(random.sample(
        'abcdefghijklmnopqrstuvwxyz' 
        + '0123456789', 7)) 
    return string"
Create a Python function named 'get_date' that returns the current date and time upon invocation.,"def get_date():
	from datetime import datetime
	return datetime.now()"
Write a function in Python that counts the number of words in the given string.,"def word_count(str):
 words = str.split()
 return len(words)

print(word_count(""This is a sample string with some words""))"
Complete the Python code to generate a list of the odd numbers in the range 1 to 25.,"odd_nums_list = []

for number in range(1, 26):
    if number % 2 != 0:
        odd_nums_list.append(number)

print(odd_nums_list) # [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]"
Create a Python function for converting a Celsius temperature to Fahrenheit scale.,"def celsius_to_fahrenheit(celsius):
    return (celsius * (9/5)) + 32"
Generate a random list of numbers between 1 and 10 of a given length in Python.,"import random

def generateRandomList(length):
    random_list = []
    for _ in range(length):
        random_list.append(random.randint(1, 10))
    return random_list

if __name__ == '__main__':
    print(generateRandomList(5))"
Can you write a Python program to print out the elements in a given list with their frequency?,"my_list = [1, 2, 3, 2, 4, 1, 1]

frequency_dict = {}

for num in my_list:
    if num in frequency_dict:
        frequency_dict[num] = frequency_dict[num] + 1
    else:
        frequency_dict[num] = 1

for num, freq in frequency_dict.items():
    print(""{} : {}"".format(num, freq))"
Write a python function to check whether the given list contains consecutive numbers or not.,"def check_Consecutive(l): 
    return sorted(l) == list(range(min(l),max(l)+1)) "
Design a class to represent a complex number in Python.,"class ComplexNumber:
    def __init__(self, real, imag):
        self.real = real
        self.imag = imag

    def __add__(self, other):
        real = self.real + other.real
        imag = self.imag + other.imag
        return ComplexNumber(real, imag)

    def __str__(self):
        return '{} + {}i'.format(self.real, self.imag)"
Develop a program to implement a linear search in Python.,"def linear_search(arr, target):
    for i in range(len(arr)):
        if arr[i] == target:
            return i
    return -1

arr = [7, -3, 10, 13, -6]
target = -3
print(""Index of"", target, "" is "", linear_search(arr, target)) # 1"
Modify the following Python program to print the sum of all its elements.,"# Given a list

list = [1, 2, 3, 4, 5]
 
# Calculate sum
sum_val = 0
for num in list:
 sum_val += num
 
# Print the result
print(sum_val) # returns 15"
Create an AI-friendly program in Python to remove duplicates from a list of numbers.,"def remove_duplicates(list1): 
    new_list = [] 
    for num in list1: 
        if num not in new_list: 
            new_list.append(num) 
    return new_list 

remove_duplicates(list1)"
Generate a python code to calculate the median of an unsorted list of numbers.,"def median(lst):
    lst = sorted(lst)
    if len(lst) % 2 == 0:
        mid = int(len(lst) / 2)
        return (lst[mid] + lst[mid-1]) / 2
    else:
        mid = int(len(lst) / 2)
        return lst[mid]

median([3, 4, 1, 2, 5])"
Generate a Python class for a Person that has methods and attributes to work with names and ages.,"class Person:
 def __init__(self, name, age):
   self.name = name
   self.age = age

 def get_name(self):
   return self.name

 def get_age(self):
   return self.age

 def set_name(self, name):
   self.name = name

 def set_age(self, age):
   self.age = age"
"Design a class in Python for storing employee information. The employee information should include name, age, salary and department.","class Employee:
 def __init__(self, name, age, salary, department):
 self.name = name
 self.age = age
 self.salary = salary
 self.department = department

 def get_name(self):
 return self.name

 def get_age(self):
 return self.age

 def get_salary(self):
 return self.salary

 def get_department(self):
 return self.department"
Create a Python script that takes in strings representing temperatures in celsius and returns the corresponding temperatures in fahrenheit.,"def c_to_f(celsius):
    return (celsius * 9.0/5) + 32"
Write a python function to count the occurrence of a given character in a string.,"def count(s,c) : 
    res = 0 
    for i in range(len(s)) : 
        if (s[i] == c): 
            res = res + 1
    return res "
Write a Python program to encode an integer into a base 62 string.,"import string 

def encode_base_62(n): 
    base62 = string.digits + string.ascii_uppercase + string.ascii_lowercase
    output = """" 
    while n > 0:
        output = base62[n%62] + output
        n //= 62
    return output"
Generate code to prompt user input using Python.,"name = input('What is your name? ')
print('Hello', name, '!')"
Develop a program to remove all the comments from a Python code.,"import sys

def main():
    print(""Hello World!"")"
Compose a Python method to print the flat list from a given 2D list.,"def flat_list(lst): 
  flat_lst = [] 
  for sublist in lst: 
    if type(sublist) == int: 
      flat_lst.append(sublist) 
    else: 
      for ele in sublist: 
        flat_lst.append(ele) 
  return flat_lst 

result = flat_list(test_list) 
  
print(""The flattened list is:"", result)"
Develop a python code to evaluate the sum of all the even numbers in a given sequence.,"def sum_even_numbers(sequence):
    result = 0
    for num in sequence:
        if num % 2 == 0:
            result += num
    
    return result"
Generate a Python program to scrape the content of an HTTPS website and output the result.,"import requests
from bs4 import BeautifulSoup 

# make a get request to fetch the contents of the page
r = requests.get('https://example.com')

# parse the html content
soup = BeautifulSoup(r.content, 'html.parser')

# print out the result
print(soup.prettify())"
Write a Python program that takes an input list of integers and finds out the sum of all the odd elements in the list.,"def sum_odd_elements(int_list):
    '''This function takes a list of integers and returns the sum of all the odd elements.'''
    total = 0
    for num in int_list:
        if num % 2 != 0:
            total += num
    return total

int_list = [2, 3, 4, 5, 6]
sum = sum_odd_elements(int_list)

print(sum) # 8"
Edit a Python program to create a dictionary where the key is a string and the values is a list of strings.,"my_dict = dict()

# ... existing program here

# Create a dictionary of strings
my_dict['item1'] = ['one','two','three']
my_dict['item2'] = ['four','five','six']"
Create a program in python that can predict the Bitcoin price next week,"import pandas as pd
from sklearn.linear_model import LinearRegression

# Read the data
data = pd.read_csv(""bitcoin.csv"")

# Separate features and labels
X = data.loc[:, data.columns != 'Close']
y = data['Close']

# Train the linear regression model
model = LinearRegression().fit(X, y)

# Predict the bitcoin price next week
prediction = model.predict(X)"
Create a function in Python which takes a list of integers as input and returns a sorted list.,"def sort_list(list):
    list.sort()
    return list
    
sorted_list = sort_list([3, 2, 5, 1, 4])
print(sorted_list) # output: [1, 2, 3, 4, 5]"
Generate a Python program to find the mode of the given list.,"from collections import Counter

def mode(list):
    c = Counter(list)
    freq = c.most_common()
    if freq[0][1] == freq[1][1]:
        return ""No single mode found"" 
    else:
        return freq[0][0]

list = [6, 2, 8, 9, 3, 2, 10]
print(""Mode:"", mode(list))"
Write a Python program to traverse a binary search tree in preorder traversal.,"def preorder_traversal(root):
    if root is None: 
        return
    
    print (root.data, end = ' ')
    
    preorder_traversal(root.left) 
    preorder_traversal(root.right)"
"Write a Python program to find the maximum element in the given array [1, 10, 50, 3, 8].","array = [1, 10, 50, 3, 8]

# Get the maximum element
max_element = max(array)

print(max_element) # Output: 50"
Write a Python function to remove the nth occurrence of a given substring from the given string.,"def remove_nth_occurrence(string, substring, n):
 count = 0
 for i, ch in enumerate(string):
  if string[i:i+len(substring)] == substring:
   count += 1
   if count == n:
    string = string[:i] + string[i+len(substring):]
 return string"
Write a Python program to calculate the number of even and odd numbers from a series of numbers.,"series = [1, 4, 5, 7]

# count even and odd numbers
even_count = 0
odd_count = 0

for num in series:
    if num % 2 == 0:
        even_count += 1
    else:
        odd_count += 1

# Print the total number of even and odd numbers
print('Number of even numbers: {}'.format(even_count))
print('Number of odd numbers: {}'.format(odd_count))"
Write a function to multiply two lists using map and lambda function.,"def mul_list(nums1,nums2):
  result = map(lambda x, y: x * y, nums1, nums2)
  return list(result)"
Write a python program to convert a given hexadecimal to binary.,"def hex_to_binary(h): 
    return bin(int(h, 16)) 
  
print(hex_to_binary('0x56'))"
Sort a given list using bubble sort in Python.,"def bubble_sort(list):
    for i in range(len(list)):
        for j in range(len(list)-1):
            if list[j]>list[j+1]:
                list[j],list[j+1] = list[j+1],list[j]
    return list

if __name__ == '__main__':
    list = [3,5,2,4,7,5]
    print(bubble_sort(list))"
Design a positive feedback loop for the following python program.,"for i in range(10):
    print(""hello"")
    i += 1
    if i == 10:
        print(""You've got it!"")"
Design a function in Python for computing the area of a triangle.,"def area_triangle(base, height):
    return (base * height) / 2"
"Create a hashmap (a key-value pair data structure) in Python that stores two values, ""name"" and ""age"".","dict = {
    'name': 'John',
    'age': 30
}"
Write a Python program that sorts a given array of numbers in ascending order.,"def sort_ascending(arr):
    for x in range(len(arr)-1):
        for y in range(x+1, len(arr)):
            if arr[x] > arr[y]:
                arr[x], arr[y] = arr[y], arr[x]
    return arr

arr = [1, 3, 5, 2, 6]
print(sort_ascending(arr)) # Output: [1, 2, 3, 5, 6]"
Generate a Python code to find the power of a number.,"# Calculate power of a number 
def power(base, exponent):
    # Initialize result
    result = 1
    # Multiply result with base
    # until exponent becomes 0
    while exponent != 0:
        result *= base
        exponent -= 1
 
    # Return result
    return result

# Print the power
print(power(base, exponent))"
Write a Python script to combine two dictionaries into one.,"def merge_dicts(dict1, dict2):
    merged_dict = {**dict1, **dict2}
    return merged_dict"
Generate a Python program to calculate the total price of a grocery list given a list of items and their prices.,"items = [
    ['apple', 2.00], 
    ['banana', 4.00], 
    ['bread', 3.50], 
    ['orange', 1.50]
]

total = 0

for item in items:
    total += item[1]

print(""The total price of the grocery list is:"", total)"
Construct a Python program to take a list of numbers as input and print out the largest number in the list.,"def largestNumber(list):
  max = list[0]
  for num in list:
    if num > max:
      max = num
  return max

list = [5, 10, 2, 9, 6]
print(largestNumber(list)) # Output: 10"
Write a Python program to load the COVID-19 data from Github repository.,"import requests
import csv
import os

# Get the latest COVID-19 data from Github repository
url = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/04-01-20"
Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.,"def re_arrange_array(arr, n):
  j=0
  for i in range(0, n):
    if (arr[i] < 0):
      temp = arr[i]
      arr[i] = arr[j]
      arr[j] = temp
      j = j + 1
  return arr"
Create a python program to calculate the factorial of the given argument.,"def factorial(x):
    if x == 0 or x == 1:
        return 1
    else:
        return x * factorial(x-1)"
"Using the provided pseudocode, write a program in Python that checks if a given number is a prime number.","def is_prime(num):
    if num <= 1:
        return False

    for i in range(2, num):
        if num % i == 0:
            return False

    return True

num = 7
result = is_prime(num)
print(result)"
Create a class in Python and define a method that multiplies two numbers.,"class Multiplier:
 def multiply(self, num1, num2):
  return num1 * num2

m = Multiplier()
print(m.multiply(2, 3))"
Can you write a Python program that takes a list of strings as an argument and returns the list with all elements sorted by their length?,"def sort_by_length(strings):
    return sorted(strings, key=len)"
Create a Python program to scrape a search engine for the top 10 results on a given query.,"import requests
from bs4 import BeautifulSoup

url = 'https://www.google.com/search?q=best+movies+of+2019&num=10'

response = requests.get(url)
soup = BeautifulSoup(response.text, 'html.parser')

results = soup.find_all('div', class_='rc')

for result in results:
 title = result.find('h3').text
 print(title)"
Develop a Python function that takes two arrays of equal size as input and returns the sum of the two arrays.,"def sum_arrays(arr1, arr2):
    result = []
    for i in range(len(arr1)):
        result.append(arr1[i] + arr2[i])
    return result

summed = sum_arrays([1,2,3], [4,5,6])
print(summed)"
Design a program in Python that counts the number of words in a paragraph and returns the count.,"def count_paragraph_words(par):
    par = par.split()
    return len(par)"
"Using a dictionary, write a Python statement to remove all duplicate keys in a given dictionary","# use set to remove duplicate keys
my_dict = dict(set(my_dict.items()))"
"Edit the following Python code to give the output as [400, 125, 10,1].","val = [1, 10, 125, 400]
res = []

for v in reversed(val):
    res.append(v)
    
print(res) # Output: [400, 125, 10,1]"
Write a Python program to calculate the sum of the digits of a given number.,"def sum_of_digits(n): 
  
   sum = 0
  
   # Separate the digits of the number  
   while n > 0: 
      digit = n % 10
      sum += digit
      n //= 10
  
   return sum"
Generate a code snippet in Python to print numbers from 0 to 100,"for i in range(101):
 print(i)"
Load a dataset of credit card transactions in a Python program.,"import pandas as pd 

df = pd.read_csv(""credit_card_transactions.csv"")"
Use OOP design principles to create a Python class for a house.,"class House(object):
    def __init__(self, num_rooms, square_feet, num_floors):
        self.num_rooms = num_rooms
        self.square_feet = square_feet
        self.num_floors = num_floors

    def get_info(self):
        # return house info
        return ""This house has {} rooms, is {} square feet, and has {} floors."".format(self.num_rooms, self.square_feet, self.num_floors)"
Implement a function in Python that takes a number N and returns the sum of all the positive numbers up to N (inclusive).,"""""""
Implement a function in Python that takes a number N and returns the sum of all the positive numbers up to N (inclusive). 
""""""

def sum_numbers(n):
    total = 0
    for num in range(n+1):
        if num > 0:
            total += num
    return total

if __name__ == '__main__':
    n = 10
    print(sum_numbers(n)) # 55"
Write a python function to check whether the triangle is valid or not if 3 points are given.,"def check_Triangle(x1,y1,x2,y2,x3,y3): 
    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   
    if a == 0: 
        return ('No') 
    else: 
        return ('Yes') "
Create a simple game using Python,"import random

tries = 0
goal = random.randint(1,100)

while True:
    guess = int(input('Enter a number: '))
    tries += 1

    if guess == goal:
        print('You win! You guessed the number in {} tries.'.format(tries))
        break
    elif guess < goal:
        print('Too low!')
    else:
        print('Too high!')"
Create a Python program to convert a given string to an integer by removing all non-numeric characters.,"def remove_non_numeric(str):
 res = """"
 for c in str:
 if c.isnumeric():
 res += c
 return int(res)

s = ""29A3B8746""
integer = remove_non_numeric(s)
print(integer) // 2938746"
Build a Python program that includes a function to add two given numbers.,"""""""
Build a Python program that includes a function to add two given numbers.
""""""

def add(a, b):
    return a + b

if __name__ == '__main__':
    result = add(2, 3)
    print(f'The sum of 2 and 3 is {result}')"
Create a Python function to clean and normalize text strings.,"import re

def clean_text(text):
 # Lowercase text
 text = text.lower()
 
 # Remove special characters
 text = re.sub(r'[^\w\s]','', text)
 
 # Remove extra whitespaces
 text = re.sub(r'\s+',' ', text)
 
 return text
 
# Sample Usage
text = 'Thi$$$s i$ a te$Xt!!!!!'
clean_text(text)
# Output: 'this is a text '"
Please produce a python program that can shuffle the elements of a given array.,"import random

def shuffle_array(array):
    for i in range(len(array)):
        random_idx = random.randint(i, len(array) - 1)
        array[i], array[random_idx] = array[random_idx], array[i]
    return array

print(shuffle_array([1,2,3,4,5]))"
Create a Python script to find the sum of all the even numbers in a list of integers.,"def find_sum(lst):
 
sum = 0
 
for num in lst:
 if num % 2 == 0:
  sum += num
 
return sum

lst = [1,2,3,4,5,6,7,8,9]
print(find_sum(lst))
 
# Output: 20"
Create a Python program to implement linear search to find a specified item in an array.,"def linear_search(arr, x): 
    for i in range(len(arr)): 
        if arr[i] == x: 
            return i 
    return -1

arr = [1, 2, 3, 4, 5]
search_number = 4
result = linear_search(arr, search_number)
if result == -1:
    print(""Number not found in the array"")
else:
    print(""Number found at index:"", result)"
Write a Python program to format a specified string to limit the number of characters to 6.,"def limit_chars(s):
    return s[:6]"
Create a function in Python for converting a list of strings to a dictionary.,"def stringsToDict(strings):
    return {string:0 for string in strings}

strings = [""John"", ""Jake"", ""Adam""]
dict = stringsToDict(strings)
print(dict) # Output: {'John': 0, 'Jake': 0, 'Adam': 0}"
Generate a python program that calculates the area of a triangle given the coordinates of its vertices.,"def triangle_area(A, B, C): 
    return abs((A[0]*(B[1] - C[1]) + B[0]*(C[1] - A[1]) + C[0]*(A[1] - B[1]))/2.0) 
  
# Driver Code 
A = (2, 0) 
B = (-2, 0) 
C = (0, 4) 
  
print(""Area of Triangle is"", triangle_area(A, B, C))"
Write a function in Python to generate a random letter from the English alphabet.,"import random 

def generate_random_letter(): 
    letters = 'abcdefghijklmnopqrstuvwxyz'
    letter = random.choice(letters)
    return letter"
Develop a Python program to create an autocomplete system that predicts words based on the input text.,"def autocomplete(input_text):
    # Generate the word candidates
    word_candidates = generate_candidates(input_text)
    # Filter the word candidates 
    filtered_words = filter_candidates(word_candidates)
    # Rank the words and return the top 5 
    sorted_words = rank_words(filtered_words)
    return sorted_words[:5]"
Come up with a python program that takes a string and return a reversed version of the string.,"def reverse_string(string):
    return string[::-1]"
Develop a Python function to find the average of a list of positive numbers in the given range.,"def find_average(nums):
  sum = 0
  count = 0
  for num in nums:
    if num > 0:
      sum += num
      count += 1
  return sum/count

print (find_average([1, 2, 3, 4]))"
Create a command line Python script to generate random numbers within a given range.,"import random

min_num = 10
max_num = 25
 
# Generate a random number
rand_num = random.randint(min_num, max_num)
 
# Print the random number
print(rand_num)"
Create a function in Python to print all the prime numbers in an array.,"def print_primes(arr):
    for i in arr:
        if i > 1:
            for j in range(2,i):
                if (i % j) == 0:
                    break
            else:
                print(i)

print_primes(array)"
Generate a program in Python to classify 3-dimensional data points according to their classes,"def classify_points(points):
    classes = []
    for point in points:
        if point[0] < 0 and point[1] < 0 and point[2] < 0:
            classes.append(1)
        elif point[0] > 0 and point[1] > 0 and point[2] > 0:
            classes.append(2)
        else:
            classes.append(3)
    return classes"
Write a Python program to search for a given element in multiple lists,"def search_elem(my_list1, my_list2, elem):
    for list in [my_list1, my_list2]:
        found = False
        for val in list:
            if val == elem:
                found = True
                break
        if found:
            return True
    return False

found = search_elem(my_list1, my_list2, elem)
print(found)"
Create a script in Python for finding the maximum and minimum value of an array.,"def max_min(arr):
  max = arr[0]
  min = arr[0]
  
  for i in range(1, len(arr)):
    if arr[i] > max:
      max = arr[i]
    if arr[i] < min:
      min = arr[i]
  
  return max, min

max, min = max_min(arr)"
Using Python create a web scraper to retrieve the text in a specific HTML element.,"import requests
from bs4 import BeautifulSoup

response = requests.get('http://example.com/')
html = response.content
soup = BeautifulSoup(html, 'html.parser')

text_in_element = soup.find('div', {'class': 'my-class'}).get_text()
print(text_in_element)"
Design a Python program to determine if one string is a substring of another.,"def isSubstring(str1, str2):
    if len(str1) > len(str2):
        return False

    for i in range(len(str2)):
        if (str2[i: i+len(str1)] == str1):
            return True

    return False

str1 = ""Hello""
str2 = ""Hello World""

print(isSubstring(str1, str2))"
Create a sorting algorithm that sorts a list of strings alphabetically in Python.,"def sortAlphabetically(stringList):
  sortedList = sorted(stringList)
  return sortedList

unsortedList = [""list"", ""of"", ""unsorted"", ""strings""]
sortedList = sortAlphabetically(unsortedList)

print(sortedList)"
Build a Python program that will receive a list of integers as an input and output the lowest common multiple (LCM) of these numbers.,"# Function to calculate LCM 
def lcm(l):
    ans = l[0]
    for i in l[1:]:
          ans = (ans*i)//gcd(ans, i)
    return ans;
  
# Driver program to test above function 
array = [2,4,6] 
print(""The LCM of"", array,""is"", lcm(array))"
Write a class to represent a hotel in Python.,"class Hotel:

    def __init__(self, name, stars, rooms):
        self.name = name
        self.stars = stars
        self.rooms = rooms

    def num_rooms(self):
        return self.rooms

    def rating(self):
        return self.stars"
Develop a python program to quantify the number of appearances of each character in a given string.,"def char_count(str1):
    dict = {} 
    for n in str1: 
        keys = dict.keys() 
        if n in keys: 
            dict[n] += 1
        else: 
            dict[n] = 1 
    return dict"
Create a Python program for encrypting a given string using the XOR technique.,"def xor_crypt_string(data, key='my_secret_key'):
    l = len(key)
    return bytearray((
        (data[i] ^ ord(key[i % l])) for i in range(0,len(data))
    ))

encrypted_data = xor_crypt_string(bytearray('Hello world!', 'utf-8'))

print(encrypted_data)"
Develop a web crawler in Python that is able to scrape through different webpages.,"from bs4 import BeautifulSoup 
import requests

def crawler(url): 
    source_code = requests.get(url).text 
    soup = BeautifulSoup(source_code, 'html.parser') 
    for link in soup.find_all('a'): 
        href = link.get('href') 
        print(href)
        crawler(href)"
Write a function to check if all the elements in tuple have same data type or not.,"def check_type(test_tuple):
  res = True
  for ele in test_tuple:
    if not isinstance(ele, type(test_tuple[0])):
      res = False
      break
  return (res) "
Write a Python program for checking if a number is within a given range.,"def is_in_range(n, lower, upper):
    return True if lower <= n & n <= upper else False

is_in_range(3, 1, 10)
# Output: True"
Develop a python program that applies the following operation to a given list,"def enumerate_list(lst):
    output = []
    for i in range(len(lst)):
        output.append((i, lst[i]))
    return output"
Write a Python program to sort a list of strings by the length of each string.,"def sort_by_length(strings):
  return sorted(strings, key=len)"
Create a Python program to find and remove the longest string from a given list of strings.,"def remove_longest_string(list_strings):
    longest_string = """"
    for string in list_strings:
        if len(string) > len(longest_string):
            longest_string = string
    list_strings.remove(longest_string)
    return list_strings

print(remove_longest_string(list_strings))"
Create a python program for identifying if a given number is prime or not.,"def is_prime(num): 
    if num < 2: 
        return False
  
    for i in range(2, num): 
        if num % i == 0: 
            return False
  
    return True
  
# Example 
number = 10
  
if is_prime(number): 
    print(number, ""is a prime number"") 
else: 
    print(number, ""is not a prime number"")"
Design an algorithm in Python that takes two integers as an input and returns the maximum of the two.,"def max_of_two(x, y): 
    if x > y: 
        return x 
    else: 
        return y 
  
print(max_of_two(3,6))"
Design a Python program that generates a 10 x 10 multiplication table.,"for i in range(1, 11):
  for j in range(1, 11):
    print(f""{i} x {j} = {i * j}"")
  print()"
Write a command-line program in Python to accept user input and display the sum of all numbers entered.,"import sys 

total = 0
for num in sys.argv[1:]:
 total += int(num)

print('The sum of all numbers entered is:', total)"
Generate a python program to sort a collection of data given in the form of a 2-dimensional array.,"def sortArray(arr): 
  arr.sort(key = lambda x: x[1]) 
  return arr 
  
# Driver Code 
arr = [[1, 2],[2, 6], [3, 4], [4, 5]] 

print (sortArray(arr))"
"In Python, create a method to generate a random string.","import random
import string

def generateRandomString(length):
    chars = string.ascii_letters + string.digits
    randStr = """".join(random.choice(chars) for i in range(length))
    return randStr

print(generateRandomString(8))"
Write a Python program that stores the months of the year in a dictionary.,"months_dict = {
    'January': 1,
    'February': 2,
    'March': 3,
    'April': 4,
    'May': 5,
    'June': 6,
    'July': 7,
    'August': 8,
    'September': 9,
    'October': 10,
    'November': 11,
    'December': 12
}"
Generate a python statement to print a descriptive message about a given string.,"print(f""Given string is {string}, and its length is {len(string)}"")"
Build a python program to randomly generate an even integer between 0 and 10,"import random

def generateEven():
    even_int = random.randint(0,10)
    if(even_int % 2 == 0):
        return even_int
    else:
        return generateEven()

print(generateEven())"
Write a Python program to print the number of permutations of length n where each element can take a value between 0 and (n-1).,"def countPermutations(n):
 # if n is 0 or 1, return 1 as there is 1 permutation
 if n <= 1:
 return 1
 
 # recursive calculation
 result = n * countPermutations(n - 1)
 
 return result

countPermutations(4) # returns 24"
Generate a python function to count the number of unique elements in a list,"def uniqueCount(mylist): 
    unique = []
    for x in mylist: 
        if x not in unique: 
            unique.append(x)
    return len(unique)
  
mylist = [10, 12, 10, 4, 10, 6, 4]
print(uniqueCount(mylist))"
Construct a for loop in Python to iterate over a list and print out each item in the list.,"for element in myList: 
 print(element)"
Generate a Python program that multiplies two matrices,"def multiply_matrix(A, B):
    n = len(A)
    C = [[0] * n for _ in range(n)]
 
    for i in range(n):
        for j in range(n):
            for k in range(n):
                C[i][j] += A[i][k] * B[k][j]
    return C
 
A = [[1, 2],
     [3, 4]]
B = [[1, 2],
     [2, 3]]
 
print(multiply_matrix(A,B))"
Write a Python program to find the maximum sum of a contiguous subarray in a given array of integers.,"def max_sum_contiguous_subarray(arr):
    max_sum = 0
    curr_sum = 0
 
    for i in range(len(arr)):
        curr_sum = max(curr_sum + arr[i], arr[i])
        max_sum = max(max_sum, curr_sum)
 
    return max_sum"
Generate a python function,"def gcd(a, b): 
    if a == 0 : 
        return b 
    return gcd(b % a, a)"
Suggest an improvement for the following python code for finding the sum of elements of a list,"def sum_elements(arr):
    return sum(arr) # return sum of elements of arr with one line of code."
Write a code to generate a random string of length 5 using Python.,"import random

def generate_rand_string(num_chars):
    """"""Generates a random string of a given length using ASCII characters""""""
    char_list = []
    for i in range(num_chars):
        char_list.append(chr(random.randrange(32,127)))
    return """".join(char_list)

if __name__ == ""__main__"":
    rand_str = generate_rand_string(5)
    print(rand_str)"
Generate a Python program that prints out the highest prime factor for each integer between 1 and 10.,"def prime_factor(n):
 i = 2
 while i * i <= n:
 if n % i:
 i += 1
 else:
 n //= i
 return n

for num in range(1, 11):
 factor = prime_factor(num)
 print(f""The highest prime factor of {num} is {factor}"")"
Write a Python program to search a given string for the first occurrence of a given substring.,"string = ""The quick brown fox""
substring = ""fox""

def find_substring(string, substring):
    index = string.find(substring)
    if index == -1:
        print(""Substring not found!"")
    else:
        print(""Substring found at index:"", index)

find_substring(string, substring)"
"Write Python code to implement this logic: if the number is even, then double the value; otherwise, subtract 1 from the value.","def modify_number(number):
   if number % 2 == 0:
       return number * 2
   else:
       return number - 1"
Create an HTTP server in Python that responds to `GET` requests with a ‘Hello World’ message.,"from http.server import HTTPServer, BaseHTTPRequestHandler

class HelloWorldHandler(BaseHTTPRequestHandler):
 def do_GET(self):
 self.send_response(200)
 self.end_headers()
 self.wfile.write(b'Hello World!')

server = HTTPServer(('', 8080), HelloWorldHandler)
server.serve_forever()"
Write a Python script to scrape website text content,"import requests
from bs4 import BeautifulSoup

url = ""example.com""

response = requests.get(url)
html_response = response.content

soup = BeautifulSoup(html_response, ""html.parser"")
text_content = soup.find_all(""p"")

for text in text_content:
    print(text.text)"
"Create a Python function that takes two lists, compare them, and return True if both lists are identical and False if they differ.","def compare_lists(list1, list2):
    if len(list1) != len(list2):
        return False

    for i in range(len(list1)):
        if list1[i] != list2[i]:
            return False

    return True"
Write a Python function to find the maximum and minimum numbers from a given list.,"def minMax(numbers):
    max_num = numbers[0]
    min_num = numbers[0]
   
    for num in numbers:
        if num > max_num: 
            max_num = num
        elif num < min_num:
            min_num = num
   
    return (min_num, max_num)"
"Create a Python program to generate a random password of 8 characters. The output should include random lowercase letters, uppercase letters, and numbers.","import random

def generate_password():
    password_length = 8
    chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
    password = ''.join(random.choice(chars) for i in range(password_length))
 
    return password

password = generate_password()
print(password)"
Create a Python program to calculate the total price of a purchase including sales tax.,"# Defining Variables
tax_rate = 0.08
quantity = 2
price = 10

# Calculating the Total Price
total_price = (price * quantity) + (tax_rate * price * quantity)

# Printing Out the Result
print(""Total Price:"", total_price)"
Create a Python program to find the area of a triangle given 3 sides,"def findArea(a,b,c):
    #calculate the semiperimeter 
    s = (a + b + c) / 2.0
    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5
    return area"
"Design a class in Python that contains the following functions: set_name, set_age, get_name and get_age.","class Person():
    def __init__(self):
        self.name = None
        self.age = None
    
    def set_name(self, name):
        self.name = name
    
    def set_age(self, age):
        self.age = age
    
    def get_name(self):
        return self.name
    
    def get_age(self):
        return self.age"
Create a Python script for fetching Hacker News articles and printing the title of each article.,"import requests
import json

response = requests.get('https://hacker-news.firebaseio.com/v0/topstories.json')
top_stories = json.loads(response.content)

for story_id in top_stories:
 response = requests.get(f'https://hacker-news.firebaseio.com/v0/item/{story_id}.json')
 story_info = json.loads(response.content)
 print(story_info['title'])"
Edit the following code in Python and make it shorter.,"def add(x, y):
    return x + y

sum = add(10, 20)
print(sum)"
Create a class in Python that simulates a student's grades in a course.,"class Student:
    def __init__(self, course_name, grades):
        self.course_name = course_name
        self.grades = grades
        
    def get_grade(self):
        return sum(self.grades) / len(self.grades)"
Create a Python script to count the frequencies of each letter in a given string.,"def count_letter_frequency(text): 
    frequency = {} 
    for letter in text: 
        if letter in frequency: 
            frequency[letter] += 1
        else: 
            frequency[letter] = 1
    return frequency 
  
text = ""Hello, World!""
print(count_letter_frequency(text))"
Make a Python program generating numbers,"def generate_numbers():
    numbers = []
    for i in range(10):
        numbers.append(random.randint(0,10))
    return numbers"
"Try to come up with a classifier, in Python, that differentiates between questions and statements.","import string

def is_question(text):
    if text.endswith(""?""):
        return True
    elif text.startswith(tuple(string.punctuation)):
        return False
    else:
        words = text.strip().split()
        if any(word.endswith(""?"") for word in words):
            return True
        return False"
Write a Python script to generate 10 random numbers between 1 and 15.,"import random

for i in range(10):
  print(random.randint(1, 15))"
Write a Python script to flatten a nested dictionary.,"def flatten_dictionary(d):
 result = {}
 
 def traverse(k, v):
  if isinstance(v, dict):
   for k1, v1 in v.items():
    traverse(k+"".""+k1, v1)
  else:
   result[k] = v
 
 traverse("""", d)
 
 return result"
Create a function using Python that parses a given string and returns a dictionary containing each word in the string as key and its frequency as value.,"def parseString(string):
    freqDict = dict()
    stringWords = string.split("" "") 
    for word in stringWords:
        if word in freqDict:
            freqDict[word] += 1
        else:
            freqDict[word] = 1
    return freqDict"
Create a class in Python to simplify working with temperatures in different units.,"class Temperature:
    def __init__(self, value, unit):
        self.value = value
        self.unit = unit


    def convert_to_celsius(self):
        if self.unit == 'C':
            return self.value
        elif self.unit == 'F':
            return (self.value - 32) * 5/9
        elif self.unit == 'K':
            return self.value - 273.15
        else:
            return None"
Generate a program in Python that takes a given list as input and reverses it,"def reverse_list(my_list):
    rev_list = []
    for val in reversed(my_list):
        rev_list.append(val)
    return rev_list

reversed_list = reverse_list(my_list)
print(reversed_list)"
Write a subroutine to find the length of a string in Python.,"def find_string_length(string):
    length = 0
    for c in string:
        length += 1
    return length

# example
str = ""Hello world!""
print(find_string_length(str))"
Translate a given python program into a mips assembly instruction.,"#Load x into register 1
	li $t0, 0
	#Load y into register 2
	li $t1, 0
	#Add x and y, store result in register 3
	add $t2, $t0, $t1
	#Store the result in z
	sw $t2, z($0)"
Write a Python program to check whether a number is in a given range,"def is_in_range(n, lower, upper):
    return lower <= n <= upper"
"Construct a Python program to convert a list of strings to a single string, and separate the string elements with a ',' character.","def list_to_string(list): 
    return "","".join(list) 
  
list = [""test"",""string""]
print(list_to_string(list))"
Edit this python code to remove all even numbers from a given list.,"""""""
Edit this python code to remove all even numbers from a given list.
""""""

my_list = [1,2,3,4,5,6,7,8,9,10]

# Use a list comprehension to remove even numbers
my_list = [i for i in my_list if i % 2 != 0]
 
print(my_list) # [1, 3, 5, 7, 9]"
Write a Python program to generate a list that contains the first 10 fibonacci numbers.,"# Initialize a list
fibonacci_numbers = [1, 1]

# Generate the first 10 fibonacci numbers
for i in range(2, 10):
    fibonacci_numbers.append(fibonacci_numbers[i - 1] + fibonacci_numbers[i - 2])

print(fibonacci_numbers)"
Suggest a solution in Python to convert a sentence into a list of individual words.,"def sentence_to_words(sentence):
    words = sentence.split()
    return words 

result = sentence_to_words(""This is a test sentence."")
print(result)"
Create a program in Python that uses a for loop to output the division of two numbers.,"for i in range(2):
    print(5/3)"
Write a Python script to determine whether a given number is even or odd without using modulo operator.,"def isOdd(number): 
  
    if number % 2 == 0: 
        return False
    else: 
        return True"
Write a function in Python that takes an integer as an argument and returns the first 5 numbers in the Fibonacci sequence starting from the given integer.,"def fibonacci(n):
  a = 0
  b = 1

  fib = [a]

  for i in range(1, n):
    c = a + b
    a = b
    b = c
    fib.append(a)

  return fib[:5]  # Return the first 5 numbers in the sequence

print(fibonacci(15)) # [0,1,1,2,3]"
Implement a basic algorithm in Python for encrypting a string.,"def encrypt(message): 
 encrypted_message = """" 
 for character in message: 
 # increment the character number to get its encrypted form 
 encrypted_message += chr(ord(character) + 2) 
 return encrypted_message 
 
if __name__ == ""__main__"": 
 message = ""Hello World"" 
 encrypted_message = encrypt(message) 
 print(encrypted_message) 
 
 output:
 Jgnnq Yqtnf"
Generate a Python class to efficiently store two variables in one object.,"class TwoVariables:
 def __init__(self, a, b):
 self.a = a
 self.b = b
 
 def get_values(self):
 return (self.a, self.b)"
Generate a Python function to determine whether a given string is a palindrome.,"def is_palindrome(string): 
    left, right = 0, len(string) - 1
 
    while right >= left: 
        if not string[left] == string[right]: 
            return False
        left += 1
        right -= 1
    return True"
Write a Python program that checks for a palindrome.,"def is_palindrome(s):
    s = s.lower().replace("" "", """")
    l = len(s)
    for i in range(l // 2):
        if s[i] != s[l-1-i]:
            return False
    return True"
Write a Python function to generate a matrix filled with random numbers.,"def random_matrix(m, n):
    mat = [[random.randint(0, 100) for j in range(n)] for i in range(m)]
    return mat"
Design an efficient algorithm in Python for sorting a list of numbers.,"def quicksort(arr):
    if len(arr) <= 1:
        return arr
 
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quicksort(left) + middle + quicksort(right)"
Generate an html page which will accept the user input and send it to a python script.,"<!DOCTYPE html>
<html>
<head>
    <title>Input Page</title>
</head>
<body>
    <h1>Input Page</h1>
    <form action=""script.py"" method=""POST"">
      <label>Enter your input: <input type=""text"" name=""user_input"" size=""50""></label>
      <input type=""submit"" text=""Submit"">
    </form>
</body>
</html>"
Write a python program to classify the given input into two categories,"def classify(input):
    if input == ""apple"":
        label = ""fruit""
    else:
        label = ""not fruit""
    return label"
Write a python program to retrieve the larger element between two numbers,"def max(num1, num2):
    if num1 > num2:
        return num1
    else:
        return num2"
Generate a Python program that takes a numeric input and reverses it.,"def reverse_number(num):
    rev = 0
    while num > 0:
        r = num % 10
        rev = (rev * 10) + r
        num = num // 10
    return rev

input_num = 42
res = reverse_number(input_num)
print(res)"
Code a function in Python to find the maximum value in a dictionary.,"def max_in_dictionary(dic):
    max_value = float('-inf')
    for key,value in dic.items():
        if value > max_value:
            max_value = value
    return max_value"
"Suppose you have to make an API call to a server to fetch information, write a short Python program to do it.","import requests

url = ""http://example.com/api/fetch""

response = requests.get(url)
data = response.json()

#Process data"
Can you design an algorithm in Python that takes a string and returns all its possible permutations?,"def permutations(string):
  # base case
  if len(string) <= 1:
    return set([string])

  # recursive case
  else:
    perms = permutations(string[1:])
    char = string[0]
    result = set()
    for perm in perms:
      for i in range(len(perm)+1):
        result.add(perm[:i] + char + perm[i:])
    return result

print(permutations(""ABC""))"
Create a python program that evaluates whether a given expression is valid or not.,"def evaluate_expression(expression):
    """"""
    Evaluates whether a given expression is valid or not.
    :param expression: The expression to evaluate
    :type expression: str
    :return: True if expression is valid, False otherwise
    :rtype: bool
    """"""
    try:
        eval(expression)
        return True
    except:
        return False"
"Define a python class to represent an employee with the following attributes: name, age and salary.","class Employee:
    def __init__(self, name, age, salary):
        self.name = name
        self.age = age
        self.salary = salary"
Write a python program to calculate the median of four numbers,"def calculate_median(nums):
    nums.sort()
    if len(nums) % 2 == 0:
        mid1 = len(nums) // 2
        mid2 = mid1 - 1
        return (nums[mid1] + nums[mid2]) / 2
    else:
        return nums[len(nums) // 2]

nums = [3, 5, 10, 2]
print(calculate_median(nums))"
Write a Python program to find the string which is most frequent among the given list of strings.,"def most_frequent(my_list):
    max_count = 0
    frequent_string = """"

    for i in my_list:
        if my_list.count(i) > max_count:
            max_count = my_list.count(i)
            frequent_string = i

    return frequent_string"
modify the following Python program such that it returns an error if the input is an empty string.,"def print_string(text):
    if len(text) > 0:
        print(text)
    else:
        raise Exception('The input string is empty')"
Write a Python program to extract the Last Name from a given full name.,"last_name = full_name.split()[1]
print(last_name)"
Write a Python program to reverse a list without using any built-in function.,"def reverseList(l):
  revList = []
  for i in range(len(l)-1,-1,-1):
    revList.append(l[i])
  return revList

lst = [1, 2, 3, 4, 5]
print(reverseList(lst))"
Create a web service in Python that can generate random numbers.,"from flask import Flask
import random

# Create a Flask object
app = Flask(__name__)

@app.route(""/random/<int:min>/<int:max>"")
def generate_random_number(min, max):
    # Generate a random number between min and max
    random_number = random.randint(min, max)
    return str(random_number)

if __name__ == ""__main__"":
    app.run()"
Write a function in Python to generate an email address with a given name and domain.,"def generate_email(name, domain):
    '''Generates an email address using the given name and domain.'''
    name_parts = name.lower().split(' ')
    email_name = '.'.join(name_parts)
    return email_name + '@' + domain"
"Create a python class called ""Laptop"" that initializes with a brand and a model.","class Laptop:
    def __init__(self, brand, model):
        self.brand = brand
        self.model = model"
"Write a Python function to calculate the compound interest given the principal amount, rate, and number of years.","def compound_interest(principal, rate, time):
    return principal * (1 + rate)**time

result = compound_interest(1000, 0.03, 5)
print(result)"
Create a python program to find all n digit prime numbers.,"def get_n_digit_prime_numbers(n):
    prime_numbers = []
    for number in range(10**(n-1), 10**n):
        is_prime = True
        for divisor in range(2, number):
            if number % divisor == 0:
                is_prime = False
                break
        if is_prime:
            prime_numbers.append(number)
    return prime_numbers"
"Create a class in python that stores the details of a person such as name, age, and address.","class Person:
    def __init__(self, name, age, address):
        self.name = name
        self.age = age
        self.address = address"
Implement a Python program to check if a number is divisible by another number.,"def is_divisible(n, m):
    if (n % m == 0):
        return True
    else:
        return False
    
print(is_divisible(7, 2))  # Outputs False"
"Given a list of colors [""red"", ""green"", ""blue""], create a Python program to find the longest color name.","def longest_color_name(colors): 
 longest_name = 0 
 longest_color = None
 for color in colors: 
  if len(color) > longest_name: 
   longest_name = len(color) 
   longest_color = color
 return longest_color"
Write a Python program to replace all the occurences of a substring in a string with a new substring.,"new_string = string.replace('is', 'was')"
Write a python function to count the total set bits from 1 to n.,"def count_Set_Bits(n) :  
    n += 1; 
    powerOf2 = 2;   
    cnt = n // 2;  
    while (powerOf2 <= n) : 
        totalPairs = n // powerOf2;  
        cnt += (totalPairs // 2) * powerOf2;  
        if (totalPairs & 1) : 
            cnt += (n % powerOf2) 
        else : 
            cnt += 0
        powerOf2 <<= 1;    
    return cnt;  "
Design a class in Python that calculates the area of a square.,"class Square:
    def __init__(self, length):
        self.length = length

    def find_area(self):
        return self.length**2

sqr = Square(4)
print(sqr.find_area())"
Write a Python program to convert a string in camel case format to snake case format,my_name_is_ryan
Create a function in Python to remove the given element from any list if it is present.,"def remove_item(lst, item):
    try:
        lst.remove(item)
        return lst

    except ValueError:
        return lst"
Write a Python program to create a list of all the even numbers between two given numbers.,"def even_number_list(a, b):
    return list(i for i in range(a, b+1) if i%2 == 0)"
Create a Python program that accepts two numbers as an input and prints out the ratio of the two numbers.,"def calculateRatio(number1, number2):
    return number1/number2
    
number1 = 13
number2 = 24
ratioOfNumbers = calculateRatio(number1, number2)

print(""The ratio of the two numbers is: "" + str(ratioOfNumbers))"
Create a Python class to represent a student's name and GPA.,"class Student:
    def __init__(self, name, gpa):
        self.name = name
        self.gpa = gpa

    def get_name(self):
        return self.name

    def get_gpa(self):
        return self.gpa"
Write a script in Python for shuffling elements in an array.,"import random

def shuffle(arr):
    random.shuffle(arr)
    return arr"
"Create a Python class that implements a basic calculator with the operations (+, -, *, /).","class Calculator:
    def __init__(self):
        pass

    def add(self, number1, number2):
        return number1 + number2

    def subtract(self, number1, number2):
        return number1 - number2

    def multiply(self, number1, number2):
        return number1 * number2

    def divide(self, number1, number2):
        return number1 / number2"
Generate a program in Python to extract all numbers from a given string,"import re

def extract_numbers(string): 
    numbers = re.findall('\d+', string)
    return numbers

string = ""The 3 monkeys had 2 apples""
print(extract_numbers(string))"
Develop an algorithm using Python to calculate the Euclidean distance between 2 points.,"def euclidean_distance(point1, point2): 
    sum_squared_distance = 0

    for i in range(len(point1)): 
        sum_squared_distance += (point1[i] - point2[i])**2 
    return sum_squared_distance**0.5"
"Write a Python program that takes a sequence of strings, sorts them alphabetically, and prints them to the console.","sequence = [""Hello"", ""world"", ""Welcome"", ""to"", ""the"", ""Coding"", ""Revolution""]

sorted_sequence = sorted(sequence)

for word in sorted_sequence:
    print(word)"
Write a python function to find the maximum occurring character in a given string.,"def get_max_occuring_char(str1):
  ASCII_SIZE = 256
  ctr = [0] * ASCII_SIZE
  max = -1
  ch = ''
  for i in str1:
    ctr[ord(i)]+=1;
  for i in str1:
    if max < ctr[ord(i)]:
      max = ctr[ord(i)]
      ch = i
  return ch"
Build a decision tree in Python to identify potential customers.,"import pandas as pd
from sklearn.tree import DecisionTreeClassifier

# Read in data
data = pd.read_csv('customer_data.csv')

# Create features and target
X = data.drop('is_potential_customer', axis=1)
y = data['is_potential_customer']

# Create the decision tree
model = DecisionTreeClassifier()
model.fit(X, y)"
Develop a Python program for generating a random number between given limits.,"import random

def random_number(start, end):
  return random.randint(start, end)"
Write a class in Python to represent a rectangle as an object.,"class Rectangle:
    def __init__(self, width, height):
        self.width = width
        self.height = height

    def get_area(self):
        return self.width * self.height

    def get_perimeter(self):
        return 2 * (self.width + self.height)"
Write a Python program to compare two lists and print out the one that is greater in length.,"def compare_list_length(list1, list2):
    if len(list1) > len(list2):
        return list1
    else:
        return list2

list1 = [1, 2, 3, 4]
list2 = [3, 4]
longer_list = compare_list_length(list1, list2)
print(longer_list) # Output: [1, 2, 3, 4]"
"Create a Python script to generate a random password of length 8 with combination of characters, numbers and symbols.","import random
import string

# Generate a random string of 8 characters
characters = string.ascii_letters + string.digits + string.punctuation
random_str = ''.join(random.choice(characters) for i in range(8))

# Print the generated random string
print(""Generated random string password is:"", random_str)"
Create a class in Python to represent a rectangle with length and width as instance variables.,"class Rectangle:
   def __init__(self, length, width):
      self.length = length
      self.width  = width"
Create a basic web scraper written in Python using the requests and BeautifulSoup libraries. This scraper should be able to retrieve all of the links on a given web page.,"import requests
from bs4 import BeautifulSoup

url = 'https://www.example.com'
response = requests.get(url)
soup = BeautifulSoup(response.text, 'html.parser')

links = []
for link in soup.find_all('a'):
 links.append(link.get('href'))

print(links)"
Update the python program by including a function that finds the shortest word in a list.,"def find_shortest(input_list):
    shortest = input_list[0]
    for word in input_list:
        if len(word) < len(shortest):
            shortest = word
    return shortest

shortest_word = find_shortest(my_list)
print(shortest_word)"
Design an algorithm in Python that takes a string as input and returns a compressed version of the string.,"def stringCompress(s):
    result = """"
    counter = 1
    for i in range(len(s)-1):
        if s[i] == s[i+1]:
            counter+=1
        else:
            result += s[i] + str(counter)
            counter = 1
        
    result += s[i] + str(counter)
    return result

print(stringCompress('aaabbccccca'))"
Create a Python program to generate a series of random numbers based on a user input.,"import random

def generate_random_series(num):
    """"""Generates and returns a list of random numbers based on a user input.""""""
    # Create an empty list and append to it each time you generate a random number
    random_series = []
    for _ in range(num):
        random_number = random.randint(0, 1000)
        random_series.append(random_number)
        
    return random_series"
"Create a DataFrame in Python Pandas using given dates, numbers, and strings.","import pandas as pd

# Create the dataframe
df = pd.DataFrame({'date': dates, 'number': numbers, 'string': strings})

df
   date  number string
0  2013-01-01       1      a
1  2013-01-02       2      b
2  2013-01-03       3      c"
Develop a function in Python which takes two inputs and returns the greatest common divisor of those two numbers.,"def greatest_common_divisor(a, b):
    if a < b:
        a, b = b, a

    while b > 0:
        a, b = b, a % b

    return a

result = greatest_common_divisor(12, 24)
print(result)"
Construct a Python program to search all numbers divisible by 5 and 7 between a given range,"def find_divisble_numbers(start, end):
    divisible_numbers = []
    for i in range(start, end + 1):
        if i % 5 == 0 and i % 7 == 0:
            divisible_numbers.append(i)
    return divisible_numbers

divisible_numbers = find_divisble_numbers(1000, 2000)
print(divisible_numbers)"
Write a python program to filter a list of strings and return only those which contain the given substring.,"def filter_strings(lst, substring):
    filtered_lst = []
    for string in lst:
        if substring in string:
            filtered_lst.append(string)
    return filtered_lst

print(filter_strings([""Hello"", ""World"", ""Hey""], ""or""))"
Create a Python class with properties 'name' and 'age' which takes a parameter 'name' and sets it to the name property.,"class Person:
  def __init__(self, name):
    self.name = name
    self.age = None"
Write a function in Python to compute the accuracy of a classification by comparing the true labels and the predicted labels.,"def compute_accuracy(true, pred):
    correct = 0
    total = len(true)
    for i in range(total):
        if true[i] == pred[i]:
            correct += 1
    return correct/total"
Optimize a Python program using multiprocessing.,"from multiprocessing import Pool
import math

def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True

def find_prime_numbers(n):
    primes = []
    with Pool(processes=4) as pool:
        primes = list(pool.map(is_prime, range(2, n)))
    return primes"
Write a python function to parse a url and extract its params into a dictionary.,"def parse_url(url): 
    res = dict()
    elems = url.split(""?"")[1].split(""&"")
    for elem in elems: 
        k, v = elem.split(""="")
        res[k] = v
    return res"
Write a Python program to calculate the total cost of buying n items.,"def calculate_total_cost(item_prices, num_items):
    total_cost = 0
    for i in range(num_items):
        total_cost += item_prices[i]
    return total_cost

if __name__ == '__main__':
    total = calculate_total_cost([10, 15, 20, 25], 4)
    print(""Total cost of buying 4 items:"", total)"
Create a Python program which takes a list of numbers and a number k and returns whether any two numbers from the list add up to k.,"def twoNumberSum(list, k):
  seen = set()
  for num in list:
    if k-num in seen:
      return [num, k-num]
    else:
      seen.add(num)
  return []"
Generate a python script to filter the words in a given list of strings.,"def word_filter(words, filter_list):
    filtered_words = []
    for word in words:
        if word not in filter_list:
            filtered_words.append(word)
    return filtered_words"
Change the code provided in the input so that it is compatible with Python version 3.,"print(""Hello World"")"
Write a Python program to find all the unique numbers in a list.,"def unique_numbers(number_list):
    unique_numbers = []
    for number in number_list:
        if number not in unique_numbers:
            unique_numbers.append(number)
    return unique_numbers

print(unique_numbers([1, 2, 1, 3, 4, 5, 5, 1]))"
Write a function in Python which will accept two arguments and return the larger of the two.,"def bigger_number(num1, num2):
  if num1 > num2:
    return num1
  else:
    return num2"
Design an algorithm in Python that can read a list and return the most frequent item.,"def most_frequent(list):
    return max(list, key=list.count)

list = [1,2,3,4,4,4,5,5]
print(most_frequent(list))"
Write a Python program to find the closest number to zero from an array.,"def closest_number(arr):
    min_diff = abs(arr[0])
    for num in arr: 
        if abs(num) < min_diff: 
            min_diff = abs(num) 
  
    return min_diff
  
# Driver Code
arr = [8, 5, -2, 10]
print(closest_number(arr)) # -2"
Write a python class that implements a linked list data structure.,"class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None
    
    def insert(self, data):
        node = Node(data)
        if not self.head:
            self.head = node
        else:
            tmp = self.head
            while tmp.next:
                tmp = tmp.next
            tmp.next = node"
"Extend the python code below to print ""hello world"" 5 times.","for i in range(5):
    print(""hello world"")"
Write a Python program to delete all occurrences of a given number from a list,"def remove_all(num, lst):
    result = []
    for i in range(len(lst)):
        if lst[i] != num:
            result.append(lst[i])
    return result"
Optimize a Python program for speed. The program should calculate the sum of a list of numbers and return the result.,"def sum_of_numbers(list_of_numbers):
# initialize the result to 0
 result = 0
 
# Iterate over the list of numbers
 for num in list_of_numbers:
 result += num
 
# return the result
 return result
 
# testing the function
list_of_numbers = [2, 4, 6, 8, 10]
print(sum_of_numbers(list_of_numbers))"
Generate Python code to find numbers that are multiples of both 3 and 5 between 0 and 100.,"# List of numbers which are multiples of both 3 and 5 between 0 and 100
multiples_3_5 = [] 

# Iterate over all numbers between 0 and 100 
for num in range(101): 
 
    # Check for multiples of both 3 and 5 
    if num % 3 == 0 and num % 5 == 0: 
        multiples_3_5.append(num) 
      
print(multiples_3_5)"
Construct a code snippet in Python to eliminate all the negative numbers in a given list.,"list = [-3, -2, 0, 4, 5]

list = [x for x in list if x >= 0] 

print(list)"
Write a function in Python to print every other element in a list.,"def print_every_other(lst):
 for i in range(0, len(lst), 2):
 print(lst[i])"
Create a Python function that takes a 2D array as an input and returns the sum of all the elements in the array.,"def array_sum(arr):
    sum = 0
    for i in range(len(arr)):
        for j in range(len(arr[i])):
            sum += arr[i][j]
    return sum

array_sum([[1,2,3],[4,5,6]])"
Create a Python program to parse a domain name and extract important information.,"import tldextract

def parse_domain_name(name):
    """"""Parses a domain name and extracts information such as the subdomain and the root domain.""""""
    extract = tldextract.extract(name)
    subdomain = extract.subdomain
    root_domain = extract.domain + '.' + extract.suffix
 
    return subdomain, root_domain"
Design a Python class that stores employee profile and salary information.,"class Employee:
  def __init__(self, name, id, salary, profile):
    self.name = name
    self.id = id
    self.salary = salary
    self.profile = profile"
Create a Python code to decode an URL.,"import urllib.parse

def decode_url(url):
 parsed_url = urllib.parse.urlparse(url)
 return urllib.parse.parse_qs(parsed_url.query)

decode_url(""http://www.example.com/?param1=hello&param2=world"")"
"Create a hash table in Python to store the values (1, 2, 3, 4).","hash_table = {1: 1, 2: 2, 3: 3, 4: 4}"
Write a Python function to count the number of occurances of a given letter in a given string.,"def count_letter(s, letter): 
    count = 0
    for char in s:
        if char == letter:
            count += 1
    return count

s = ""Hello World""
letter = ""l""
print(count_letter(s, letter))"
"Using Python, write a program to merge the elements of two arrays into one.","merged_arr = arr1 + arr2 
print ( merged_arr ) # [1, 2, 6, 9, 11, 2, 3, 4, 7, 8]"
Generate a subroutine in Python to convert a string date of the format DD/MM/YYYY to the Unix timestamp type.,"import datetime

def convert_to_unix_time_stamp(date):
    date_object = datetime.datetime.strptime(date, ""%d/%m/%Y"")
    
    return date_object.timestamp()"
Refactor and improve the efficiency of the following Python code.,"def get_intersection(list_1, list_2):
    return [elem for elem in list_1 if elem in list_2]"
Create a program in Python which takes a given string and removes all the vowels from it.,"def removeVowels(string):
    vowels = ['a', 'e', 'i', 'o', 'u']
    new_string = ''.join([x for x in string if x.lower() not in vowels])
    return new_string

print(removeVowels(string))"
Construct a python visualization to display a bar chart of the results of some data.,"import matplotlib.pyplot as plt

words = [""word1"", ""word2"", ""word3"", ""word4""]
frequencies = [5, 8, 3, 2]

plt.bar(words, frequencies)
plt.title(""Word Frequency Chart"")
plt.xlabel(""Words"")
plt.ylabel(""Frequency"")
plt.show()"
Generate a Python program which will filter all prime numbers from a list of integers.,"def filter_prime_numbers(l):
    result = []
    for num in l:
        if is_prime(num):
            result.append(num)
    return result

def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True"
Write a python program to determine if the given list has duplicates.,"def isDuplicates(list):
    duplicate_items = set()
    for item in list:
        if item in duplicate_items:
            return True
        duplicate_items.add(item)
    return False

my_list = [1, 2, 4, 6, 2, 5]
result = isDuplicates(my_list)
print(result) # prints True"
Formulate a Python function to count the occurrences of a character in a given string.,"def count_characters(string, character):
    count = 0
    for char in string:
        if char == character:
            count += 1
    return count"
Create a Python program to group a list of numbers into evens and odds.,"def even_odd_grouping(nums):
    evens = []
    odds = []
    for num in nums:
        if num % 2 == 0:
            evens.append(num)
        else:
            odds.append(num)
    return (evens, odds)

nums = [1, 2, 3, 4, 5, 6]
evens, odds = even_odd_grouping(nums)
print(""Evens: "", evens) 
print(""Odds: "", odds)"
Write a Python function to find all prime numbers between a given lower and upper bound.,"def prime_numbers(lower_bound, upper_bound):
    primes = []
    for num in range(lower_bound, upper_bound + 1):
        if all(num % i != 0 for i in range(2, num)):
            primes.append(num)
 
    return primes
 
prime_numbers(20, 50) # returns [23, 29, 31, 37, 41, 43, 47]"
Create a Python algorithm to return all possible combinations of a given list.,"def subset(s): 
    if len(s) == 0: 
        return [[]] 
    else: 
        pre_list = subset(s[1:]) 
        post_list = [] 
        for i in pre_list: 
            post_list.append(i+[s[0]]) 
  
        return pre_list + post_list 

result = subset([1, 2, 3]) 
print(result)"
Create a program in Python to sort a given array in ascending order using bubble sort.,"def bubble_sort(arr): 
    n = len(arr) 
    for i in range(n-1):
        for j in range(0, n-i-1): 
            if arr[j] > arr[j+1] : 
                arr[j], arr[j+1] = arr[j+1], arr[j] 

arr = [3,7,4,1]
bubble_sort(arr) 
print (""Sorted array :"") 
for i in range(len(arr)): 
    print (""%d"" %arr[i]),"
Create a program to check if a given array has at least two elements in Python.,"def has_two_elements(arr):
    return len(arr) >= 2"
"Given two lists x and y, write a python program to return a list that contains the elements which are common to both lists.","def common_elements(x, y):
    common = []
    for i in x:
        if i in y:
            common.append(i)
    return common"
Generate a Python code snippet to find the longest word in a given sentence.,"def longestWord(sentence):
    words = sentence.split("" "")
    max_length = 0
    longest_word = """"
    for word in words:
        if len(word) > max_length:
            max_length = len(word)
            longest_word = word
    return longest_word

print(longestWord(""This is the longest sentence.""))"
Write a Python program to transform an input array of length 5 into a matrix of 3x3.,"def transform_to_matrix(lst):
    matrix = [[lst[0], lst[1], lst[2]],
              [lst[3], lst[4], 0],
              [0, 0, 0]]
    return matrix"
Build a web scraping function in Python Scrapy that retrieves data from a given web page.,"import scrapy

class DataSpider(scrapy.Spider):
 name = 'DataSpider'
 start_urls = [url]

def parse(self, response):
 data = response.css('body').getall()
 yield { 'data': data }"
Write a Python program that computes the mean and standard deviation of a dataset.,"mean = 5.42
sd = 2.48

def compute_stats(Data):
    # calculuate mean
    mean = sum(Data) / len(Data)
    # calculate standard deviation
    variance = 0.0
    for i in Data:
        variance += (i - mean)**2
    sd = variance ** 0.5
    # return mean and sd
    return mean, sd"
Write a Python program to classify a given sentence based on its sentiment.,"from textblob import TextBlob

input_sentence = ""I hate Mondays""
sentiment = TextBlob(input_sentence).sentiment.polarity

if sentiment > 0:
    print(""The sentiment is 'positive'"")
elif sentiment == 0:
    print(""The sentiment is 'neutral'"")
else:
    print(""The sentiment is 'negative'"")"
"Create a Python class for a stack and its basic functions such as push, pop and peek.","class Stack:
  
    # empty list to store stack elements
    def __init__(self):
        self.stack = []
  
    # push element to the stack
    def push(self, data):
        self.stack.append(data)
  
    # pop element from the stack
    def pop(self):
        self.stack.pop() 
  
    # peek element from the stack
    def peek(self):
        return self.stack[-1]"
"Generate Python code for a linear regression model. The model should take two numerical inputs, x and y, and be able to predict the numerical output that best fits the given data.","import numpy as np

x = np.array([1, 2, 3])
y = np.array([3, 6, 9])

# Create the design matrix
X = np.vstack([np.ones(len(x)), x]).T

# Calculate the weights
w = np.linalg.inv(X.T.dot(X)).dot(X.T).dot(y)

# Predicted output
y_pred = X.dot(w)"
Edit the code below to print the output using the Python format() method.,"number1 = 2
number2 = 3

print('The sum of the numbers is {}'.format(number1 + number2))"
Develop a python script to retrieve data from a MySQL database,"import mysql.connector

conn = mysql.connector.connect(host=""localhost"", port=""3306"", database=""myDB"", user=""root"", password=""mypassword"")

cursor = conn.cursor()

cursor.execute(""SELECT * from myTable"")
data = cursor.fetchall()

conn.close()"
Write an optimized Python program to generate the Fibonacci sequence up to n.,"def fibonacci(n):
 a, b = 0, 1
 fibonacci_list = [a]
 
 for _ in range(n):
 a, b = b, a + b
 fibonacci_list.append(b)
 
 return fibonacci_list

print(fibonacci(n)) # Prints [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]"
"Write a function in Python that takes a 2D array and a target value as input, and determines if the array contains the target value.","def targetInArray(arr,target):
    for i in range(len(arr)):
        for j in range(len(arr[i])):
            if target == arr[i][j]:
                return True
    return False"
Use an if-else statement in Python to print a message depending on the value of a given integer.,"if (x > 10) {
    print('The number is greater than 10')
} else {
    print('The number is less or equal than 10')
}"
Create a function in Python that returns the surface area of a sphere when given the sphere’s radius as input.,"import math

def sphere_surface_area(radius):
 surface_area = 4 * math.pi * radius * radius
 return surface_area 

# Test
radius = 6
print(sphere_surface_area(radius)) # 452.38934211"
Write a function to find the element count that occurs before the record in the given tuple.,"def count_first_elements(test_tup):
  for count, ele in enumerate(test_tup):
    if isinstance(ele, tuple):
      break
  return (count) "
Create a program in Python that shuffles an array of numbers.,"import random

# Create an array
arr = [1, 5, 8, 11, 3]

# Function to shuffle an array
def shuffle_array(arr):
    random.shuffle(arr)
    return arr

# Shuffle the array and print the result
print(shuffle_array(arr))"
Write a Python program to implement a decision tree using a given dataset.,"import numpy as np
from sklearn import tree

# Load the data
X = np.loadtxt('data.txt', delimiter=',')

# Create a decision tree model
clf = tree.DecisionTreeClassifier()
clf.fit(X, y)

# print the model tree 
tree.export_graphviz(clf, out_file=""model.dot"")"
"Build a type checking function to determine what kind of data is being processed, given a generic string in Python.","def check_type(str):
    try:
        int(str)
        return 'Integer'
    except ValueError:
        pass
   
    try:
        float(str)
        return 'Float'
    except ValueError:
        pass
   
    return 'String'

print(check_type('123')) # prints 'Integer'"
Design an algorithm to compute the GCD of 2 numbers in Python.,"def gcd(a, b): 
    if a == 0: 
        return b 
    return gcd(b % a, a) 

if __name__ == '__main__':
    a = 4
    b = 12
    result = gcd(a, b) 
    print (""GCD of 4 and 12 is "" + str(result))"
Create a list in Python that contains all integers between 0 and 100 that are multiples of 3.,"multiples_of_3 = [num for num in range(0, 101) if num % 3 == 0]"
Implement webscraping with Python to extract content from a given website.,"import requests
from bs4 import BeautifulSoup

# Fetch the website content
link = ""https://example.com""
data = requests.get(link)

# Parse the HTML content
soup = BeautifulSoup(data.text, 'html.parser')

# Extract all the <p> tags
content = soup.find_all('p')

# Print the content
for item in content:
    print(item.text)"
Is it possible to create a HTML page that displays a table of contents from the data stored in a database?,"Yes, it is possible to create a HTML page that displays a table of contents from the data stored in a database. You can use HTML, CSS, and JavaScript to create the table and a server-side language such as PHP or Python to query the database and retrieve the relevant data. Once you have the data, you can use JavaScript to render the table within the HTML page."
Generate a Python program that takes in two lists and returns the intersection of the two.,"def get_intersection(list1, list2):
    intersection = []
    for element in list1:
        if element in list2:
            intersection.append(element)
    return intersection"
Construct a python program to flatten a nested list recursively.,"# Defining a function to flatten a nested list
def flatten(list):
    flatlist = []
    for item in list:
        if isinstance(item, list):
            flatlist.extend(flatten(item))
        else:
            flatlist.append(item)
    return flatlist

# Testing the flatten function
list = [[1,2,3], [4,5], [6]]
print(flatten(list)) # [1, 2, 3, 4, 5, 6]"
Generate the python code that check if the given element is in a list.,"def check_list(list, element):
    if element in list:
        print(element, ""is in the list"")
    else:
        print(element, ""is not in the list"")"
Design a function in Python for merging two dictionaries.,"def merge_dicts(dict1, dict2):
    dict3 = {**dict1, **dict2} 
    return dict3"
Create a Python program that takes a message as input and encrypts it using the Caesar cipher.,"def caesar_encrypt(plain_text, shift):
    encrypted_text = """"
    
    for c in plain_text:
        c_ascii = ord(c)+shift 
        encrypted_text += chr(c_ascii)
        
    return encrypted_text

plain_text = ""Hello World!""
shift = 5
encrypted_text = caesar_encrypt(plain_text, shift)
print(""encrypted_text ="", encrypted_text)"
Complete the Python class below so that it can calculate the sum of two integers.,"class Sum:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        
    def add(self):
        return self.x + self.y"
Suggest a function to remove elements of an array that are greater than a given limit,"# Python program to remove elements of an array that are greater than a given limit

def remove_above_limit(arr, limit):
    new_arr = [x for x in arr if x <= limit]
    return new_arr"
Write a Python code that replaces every occurrence of an alphabet in a sentence with the next alphabet in the alphabetical order.,"def alphabet_order(sentence):
    output = """"
    for character in sentence:
        if character.isalpha():
            ascii_value = ord(character)
            ascii_value += 1
            output += chr(ascii_value)
        else:
            output += character
    return output

#Main
print(alphabet_order(""Hello, World!""))"
Construct a Python program to print all the numbers between 0 and a given number n that are divisible by 3.,"def print_divisible_by_three(n):
  for num in range(n+1):
    if num % 3 == 0:
      print(num, end="" "")

print_divisible_by_three(10)"
"Using Python, create a program to filter out all non-prime numbers from a list.","def filterPrimes(myList):
    result = []
    for i in myList:
        is_prime = True
        for j in range(2,i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            result.append(i)
    return result

print(filterPrimes(myList)) #[2, 5]"
Write a Python function to generate a substitution cipher of a given string,"def substitution_cipher(string):
    cipher = """"
    for i in string:
        cipher += chr(ord('a') + (ord(i) - ord('a') + 13) % 26) 
    return cipher"
Create a Python program that sends a request to a website and displays the response.,"import requests

def send_request(url):
    response = requests.get(url)
    
    if response.status_code == 200:
        print(""Success! The website responded with: "")
        print(response.text)
    else:
        print(""Error! The website responded with: "")
        print(""Status code: "", response.status_code)"
Generate a Python function that takes an array of numbers and returns the sum of all the odd numbers in the array.,"def findOddSums(arr):
    sum = 0
    for num in arr:
        if num % 2 != 0:
            sum += num
    return sum

odd_sums = findOddSums([2, 4, 5, 6])
print(odd_sums)"
Write a Python program to filter out the numbers from a list that are divisible by a given number.,"numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
divisible_by = 3
result = [num for num in numbers if num % divisible_by != 0]

print(result) # [1, 2, 4, 5, 7, 8, 10]"
Generate a Python program to iterate over a list of numbers and print out only the even numbers.,"for num in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]:
 if num % 2 == 0:
 print(num)"
Create a simple Python script to query and fetch data from an SQL database.,"import sqlite3

def query_database(database_name, query):
 conn = sqlite3.connect(database_name)
 c = conn.cursor()
 results = c.execute(query).fetchall()
 conn.close()
 return results

# Example query to get all rows in the table
query_database('mydatabase.db', 'SELECT * FROM mytable')"
Craft a Python script to reverse a string,"def reverse_string(s):
    result = """"
    for i in range(len(s)-1, -1, -1):
        result += s[i]
    return result"
Design a Regex pattern in Python to validate a phone number format.,"import re

phonePattern = re.compile(r'^(\+\d{1,2}\s)?\(?\d{3}\)?[\s.-]?\d{3}[\s.-]?\d{4}$') 

def validate_phone(phone_number): 
    if phone_pattern.search(phone_number): 
        return true
    else: 
        return false"
Generate a Python program to print the characters at even positions in a given string.,"def even_positions(string):
    result = """"
    for i in range(0, len(string), 2):
        result += string[i]
    return result

print(even_positions(""Hello World!""))"
Write a function to split a string at lowercase letters.,"import re
def split_lowerstring(text):
 return (re.findall('[a-z][^a-z]*', text))"
Create a program in Python that takes a list of numbers and sorts them in descending order.,"def sortListInDescendingOrder(list):
    return sorted(list, reverse=True)

list1 = [30, 10, 40, 20]
sortedList = sortListInDescendingOrder(list1)
print(sortedList)"
Develop a virtual assistant command in Python to generate a random number between two user-supplied numbers.,"import random

min_num = int(input(""Enter minimum number: ""))
max_num = int(input(""Enter maximum number: ""))

print(random.randint(min_num, max_num)) # random number between 10 and 20"
Create a Python script that splits a given string into equal parts,"def split_str(str, n):
    return [str[i:i+n] for i in range(0, len(str), n)]"
Create a function in Python to identify consecutive numbers in a given list.,"def consecutive_numbers(lst):
  count = 0
  for i in range(len(lst)-1):
    if lst[i+1] - lst[i] == 1:
      count += 1
    else:
      count = 0
  return count

# Test Code
lst = [1, 4, 6, 5, 2, 7, 9]
result = consecutive_numbers(lst)
print(result)

# Output --> 2"
"Write a Python script to sort the following numbers in ascending order [125, 33, 52,45, 24].","# function to sort the array
def sort_nums(arr):
  # Use Selection Sort Algorithm
  for i in range(len(arr)):
    min_index = i
    for j in range(i+1, len(arr)):
      if arr[min_index] > arr[j]:
        min_index = j
    arr[i], arr[min_index] = arr[min_index], arr[i]
  
  return arr

# driver code
arr = [125, 33, 52, 45, 24]
result = sort_nums(arr)
print(result)"
Create a program to remove all the duplicate elements from the given array in Python.,"def remove_duplicates(arr):
    result = []
    seen = set()

    for item in arr:
        if item not in seen:
            seen.add(item)
            result.append(item)

    return result

print(remove_duplicates([3, 5, 7, 9, 3, 5, 7]))"
Write a Python script to generate a random unique 8 character ID.,"import string
import random

def generate_unique_id(length):
    random_id = ''.join([random.choice(string.ascii_letters + string.digits) for n in range(length)])
    return random_id
    
print(generate_unique_id(8)) 
# Output: AB2dCKsm"
Suggest how to make the following Python loop execute faster.,"def find_list_difference(list1, list2):
    diff = []
    list2_set = set(list2)
    for item in list1:
        if item not in list2_set:
            diff.append(item)
    return diff"
"Write a Python program to generate random passwords of length 8 using alphabet, numbers, and symbols.","import string
import random

def generate_password():
 chars = string.ascii_letters + string.digits + string.punctuation
 password = ''.join(random.choice(chars) for _ in range(8))
 return password

print(generate_password())"
Create a program that will generate random sequence of words.,"import random

def generate_random_words(n):
    words = [""hello"", ""world"", ""foobar"", ""python"", ""code""]
    output = """"

    for _ in range(n):
        output += random.choice(words)
        output += "" ""

    return output[:-1]"
Generate a python function to convert a student's grade from a 0 to 100 scale to the corresponding letter grade according to the following grade scale.,"def grade_converter(score):
    if score >= 90:
        return 'A'
    elif score >= 80:
        return 'B'
    elif score >= 70:
        return 'C'
    elif score >= 60:
        return 'D'
    else:
        return 'F'"
Craft a Python program to extract characters from the odd positions of a given string.,"def extract_odd_pos(string):
    odd_position = """"
    for i in range(len(string)):
        if i%2 == 0:
            odd_position += string[i]
    return odd_position"
How could you remove duplicates from a list in Python?,"""""""
Remove duplicates from a list in Python
""""""

# Input list 
lst = [1, 1, 2, 3, 3, 4, 5, 5]

# Create a new list by converting the existing list to set 
new_lst = list(set(lst))

# Print the new list 
print(new_lst)  # Output: [1, 2, 3, 4, 5]"
Create an algorithm in Python that reads an array of integers and returns the maximum element.,"def findMaxElement(arr):
  max_element = 0
  for element in arr:
    if element > max_element:
      max_element = element
  
  return max_element

arr = [1, 5, -3, 10]
max_element = findMaxElement(arr)
print(max_element)"
Generate a machine learning model in Python to classify emails into spam and non-spam.,"from sklearn.naive_bayes import MultinomialNB 

# Initializing the model
model = MultinomialNB()

# Training the model
model.fit(X_train,y_train)

# Testing the model
y_pred = model.predict(X_test)

# Evaluating the model
accuracy = model.score(X_test,y_test)"
Create a Python program that takes a positive integer as input and returns the Fibonacci sequence up to the given number.,"def fibonacci(n):
  fib = [0, 1]
  for i in range(2,n):
    fib.append(fib[i-2] + fib[i-1])
  return fib[:n]

fibonacciSequence = fibonacci(10)
print(fibonacciSequence)"
Develop a Python function to calculate the mean of a list of numbers.,"def mean(lst):
    total = 0
    for n in lst:
        total += n
    return total / len(lst)

result = mean([1, 5, 8, 9])
print(result)"
Write a python program that prints out the number of times each letter appears in a given string.,"string = ""Hello, World!""
for char in string:
 count = string.count(char)
 print(char + "" appears "" + str(count) + "" times"")

# Output
H appears 1 times
e appears 1 times
l appears 3 times
o appears 2 times
, appears 1 times
  appears 1 times
W appears 1 times
r appears 1 times
d appears 1 times
! appears 1 times"
Develop a program to sort an list of strings by their length using Python.,"def sort_by_length(strings): 
    return sorted(strings, key=len) 
  
# Test 
strings = ['dog', 'cat', 'mouse', 'elephant'] 
  
print(sort_by_length(strings))"
Generate a Python function that takes an matrix as input and raises each element of it to the power of 3.,"def power_of_3(matrix):
    for i in range(len(matrix)):
       for j in range(len(matrix[0])): 
            matrix[i][j] = matrix[i][j] ** 3
    return matrix"
write a python code to filter 'mylist' and remove odd numbers,mylist = [x for x in mylist if x % 2 == 0]
Write a Python code to sort a list of words alphabetically.,"word_list.sort()
print(word_list)"
Create a function in Python that will convert a string to all uppercase letters.,"def uppercase_string(input_string):
    return input_string.upper()"
Develop a Python program to sort a 3D array according to the second axis in ascending order.,"def sort_array(arr):
    arr.sort(key=lambda x: x[1])
    return arr

data = [[[1,6,4], [4,3,2], [2,3,6]], [[3,3,3], [2,2,2], [1,1,1]]]

print(sort_array(data))"
Generate a python program to iterate through a given list and find the minimum value.,"def find_min(arr):
    min_val = arr[0]
    for i in arr:
        if i < min_val:
            min_val = i
    return min_val

arr = [5, 7, -1, 4]
min_val = find_min(arr)
print(min_val)"
Write a python program that sorts a list of numbers in descending order.,"list_numbers = [8, 4, 6, 10, 3]

list_numbers.sort(reverse=True)

print(list_numbers) # Output: [10, 8, 6, 4, 3]"
Write a Python code to serialize a nested dictionary.,"import json

def serialize_dict(input_dict):
    return json.dumps(input_dict)"
"Create a Python function that takes a string argument, removes all the special characters and returns the modified string.","def remove_special_characters(s):
    new_s = s.replace('#', '').replace('$', '').replace('^', '').replace('%', '').replace('*', '').replace('_', '') 
    return new_s

remove_special_characters(""This# 1$ i^s an% e*xa_mple -str_ing"")"
Write a function to calculate distance between two points using latitude and longitude.,"from math import radians, sin, cos, acos
def distance_lat_long(slat,slon,elat,elon):
 dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))
 return dist"
Develop a class in Python to represent a 2D vector.,"class Vector2D:
  def __init__(self, x, y):
    self.x = x
    self.y = y
  
  def __add__(self, other):
    return Vector2D(self.x + other.x, self.y + other.y)
  
  def __sub__(self, other):
    return Vector2D(self.x - other.x, self.y - other.y)
  
  def __mul__(self, scalar):
    return Vector2D(self.x * scalar, self.y * scalar)"
"In Python, create an algorithm to find the k most frequent strings in a given list.","from collections import Counter

list = [""Cat"", ""Dog"", ""Bird"", ""Bird"", ""Bird"", ""Fish""]

count = Counter(list)
k = 3

mostFrequent = count.most_common(k)

print(mostFrequent)  # Output: [('Bird', 3), ('Cat', 1), ('Dog', 1)]"
Write a Python program to evaluate a given string and return a Boolean value.,"def evaluate_string(string):
 if string == 'The sky is blue':
  return True
 else:
  return False"
Create a program in Python that takes in a text document and counts the number of times a specific word is used in it.,"text = ""This is a test sentence. This sentence is used for testing.""
word = ""test""

def count_words(text, word):
    words = text.split()
    count = 0
    for w in words:
        if w == word:
            count += 1
    return count

print(count_words(text, word)) #2"
Create a python script to automatically generate new pseudorandom passwords.,"import string
import random
 
def generate_password(length):
    password_chars = string.ascii_letters + string.digits + string.punctuation
    return ''.join(random.choice(password_chars) for i in range(length))
 
print(generate_password(20))"
In Python create a function that takes a list of numbers and returns the sum of the even numbers in the list.,"def even_sum(numbers): 
    even_sum = 0
    for num in numbers:
        if (num % 2 == 0):
            even_sum += num
    return even_sum"
Create a Python program which takes a dictionary as input and prints out a formatted string.,"d = {'Name': 'John', 'Age': 20, 'Location': 'New York'}

def print_dict(d):
    formatted_str = ''
    for key, value in d.items():
        if formatted_str != '':
            formatted_str += ', '
        formatted_str += '{}={}'.format(key, value)
    print(formatted_str)

print_dict(d) # Output: Name=John, Age=20, Location=New York"
Develop an algorithm in Python for predicting the motion of a particle.,"import numpy as np

def predict_motion(pos, vel, acc, dt):
  # predict position
  pos_pred = pos + vel * dt + 0.5 * acc * dt ** 2 
  
  #predict velocity
  vel_pred = vel + acc * dt
  
  return pos_pred, vel_pred

# test code
pos = np.array([0.0, 0.0])
vel = np.array([1.0, 1.0])
acc = np.array([1.0, 0.0])
dt = 0.1
pos_pred, vel_pred = predict_motion(pos, vel, acc, dt)
print(pos_pred, vel_pred)"
"In Python, create a function to return the minimum of two numbers.","def min_value(a, b):
    if a < b:
        return a
    else:
        return b"
Convert the following program from Java to Python.,"def sum_of_two_numbers(a, b): 
    c = a + b
    print(""sum is "" + str(c))

if __name__ == ""__main__"": 
    sum_of_two_numbers(10, 20)"
Develop a Python script to extract the first sentence of each paragraph in a given text.,"text = ""The quick brown fox jumps over the lazy dog. The race across the wood was won by the swift horse.""

words = text.split(""."")
first_sentences = []
for sentence in words:
    first_sentences.append(sentence.split("" "")[0])

print(first_sentences)"
Create a function in Python that returns the sequential median value from an array of integers.,"def find_median(arr):
    n = len(arr) 
    arr.sort() 
  
    if n % 2 != 0: 
        return arr[n//2] 
  
    return (arr[(n-1)//2] + arr[n//2]) / 2.0"
Design an algorithm in Python to find the second smallest number in an array.,"def second_smallest_num(arr):
    min1 = min(arr)
    arr.remove(min1)
    min2 = min(arr)
    return min2


arr = [45, 25, 12, 34, 36]
res = second_smallest_num(arr)
print(res)"
Generate code to serialize a Python data dictionary into a JSON object,"import json

data_json = json.dumps(data)

# Output:
{""name"":""John Doe"",""age"":18,""hobbies"":[""reading"",""swimming"",""gaming""],""contact"":{""email"":""johndoe@example.com"",""mobile"":""+1900000000""}}"
"Create a Python class named User, which should contain three attributes username, password and email.","class User:
    def __init__(self, username, password, email):
        self.username = username
        self.password = password
        self.email = email"
Generate a Python function to print all the even numbers from 0 to a given number.,"def print_even_numbers(n):
    for i in range(0, n+1):
        if i % 2 == 0:
            print(i)

print_even_numbers(10)"
"Rewrite the following piece of code in Python, that calculates the sum of two variables.","x = 2
y = 4

sum = x + y
print(sum) # 6"
Create a python object abstract class that implements the following methods:,"class ObjectAbstract:
    def __init__(self):
        self.data = None

    def get_data(self):
        return self.data

    def set_data(self, data):
        self.data = data

    def print_data(self):
        print(self.data)"
Convert the given JSON data into Python dictionary.,"import json

data = '{""name"": ""John"", ""age"": 30, ""hobby"": ""running""}'
dict_data = json.loads(data)

print(dict_data)"
Design a Python script to print out a list of unique numbers from 0 to N.,"numbers = [i for i in range(0, N+1)]
unique_numbers = list(set(numbers))

print(unique_numbers)"
Write a function to find the vertex of a parabola.,"def parabola_vertex(a, b, c): 
  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))
  return vertex"
Create a Python program to compute the sum of all elements in a given array.,"def compute_sum(array):
    sum = 0
    for element in array:
        sum += element
    return sum
    
if __name__ == '__main__':
    array = [1, 2, 3, 4, 5]
    print(compute_sum(array))"
Construct a python program for linear search for a given element in an array.,"def linearSearch(array, element): 
    for i in range(len(array)): 
        if array[i]==element: 
            return i
    return -1

linearSearch([1, 2, 3, 4, 5], 4) # returns 3"
Rewrite the following list comprehension in a more pythonic way.,"values = list(map(lambda x: x*2, range(10)))"
Make Python program to filter out all even numbers from a given list,"def filter_even(arr):
    result = []
    for i in arr:
        if i % 2 != 0:
            result.append(i)
    return result"
Write a function to find the nth octagonal number.,"def is_octagonal(n): 
	return 3 * n * n - 2 * n "
Write a python program to calculate the total of the following list of numbers,"def calculate_total(lst):
    total = 0
    for item in lst:
        total += item
    return total

lst = [2, 4, 5, 6, 8]
total = calculate_total(lst)
print(total)"
Write a Bash script to check if a specific program is installed on the current system.,"#!/usr/bin/env bash

if type -p python &> /dev/null; then
  echo 'Python is installed!'
else 
  echo 'Python is not installed!'
fi"
Generate a function in Python that adds two input numbers.,"def add(x, y):
    return x + y"
Edit the following code snippet to calculate average in Python.,"def calculate_avg(values):
  total = 0
  count = len(values)
 
  for value in values:
    total += value
 
  return total/count"
Design a stack class in Python with methods to push and pop data.,"class Stack:
    def __init__(self):
        self.items = []

    def push(self, item):
        self.items.append(item)

    def pop(self):
        return self.items.pop()

    def isEmpty(self):
        return self.items == []"
Write a function to find common first element in given list of tuple.,"def group_tuples(Input): 
	out = {} 
	for elem in Input: 
		try: 
			out[elem[0]].extend(elem[1:]) 
		except KeyError: 
			out[elem[0]] = list(elem) 
	return [tuple(values) for values in out.values()] "
Create a Python program that finds the longest word in a sentence.,"def find_longest_word(sentence):
    # Split sentence into a list of words
    words = sentence.split()
    # Track the longest word
    longest_word = ''
    # Iterate over the list of words
    for word in words:
        if len(word) > len(longest_word):
            longest_word = word
    # Return the longest word
    return longest_word

print(find_longest_word(""My name is John""))"
Generate a Python program to randomly fill the elements of an NxN matrix with a number 1,"from random import randint
 
def fill_matrix(n):
    matrix = [[0 for y in range(n)] for x in range(n)]
    for i in range(n):
        for j in range(n):
            matrix[i][j] = randint(1,9)
    return matrix"
Write a python code to calculate the sum of numbers in a list except for the last element.,"def sum_except_last(arr):
    total = 0
    for i in range(len(arr) - 1):
        total += arr[i]
    return total

if __name__ == '__main__':
    output = sum_except_last([1,2,3,4,5])
    print(output)"
Generate the Python code for a pipelie of KMeans and GaussianMixture clustering models.,"from sklearn.cluster import KMeans, GaussianMixture
cluster = KMeans(n_clusters=n_clusters).fit(X)
pipeline = GaussianMixture(n_components=2).fit(cluster.cluster_centers_)"
Create a Python function that sorts the numbers in a given list in ascending order.,"def sort_list(list):
    list.sort()
    return list

if __name__ == ""__main__"":
    l = [8,3,5,2,9,7]
    print(sort_list(l))"
Create a for-loop in Python that prints the numbers from 0 to 10.,"for i in range(11):
    print(i)"
Write a python program to print the items in the following dictionary,"for key,val in dictionary.items():
    print(f""{key}: {val}"")"
Reverse the elements of a given array in Python.,"def reverse_array(arr):
    n = len(arr) 

for i in range(n // 2): 
	arr[i], arr[n - i - 1] = arr[n - i - 1], arr[i] 

return arr"
What is the code for using the Python Requests module to post data to the server?,"import requests
 
url = ""http://example.com/data""
data = {""name"":""John Doe"",""age"":30}
 
response = requests.post(url, data = data)"
Create a Python program to calculate the total cost of an order based on item cost and quantity.,"def calculate_cost(item_cost, quantity):
 return item_cost * quantity

cost = calculate_cost(10, 5)
print('The total cost of your order is:', cost)  # The total cost of your order is: 50"
Write a function to find the third angle of a triangle using two angles.,"def find_angle(a,b):
 c = 180 - (a + b)
 return c
"
Find the maximum number in the following list using a Python program.,"def find_max(my_list):
    max_num = my_list[0]
    for num in my_list:
        if num > max_num:
            max_num = num
    return max_num

my_list = [8, 5, -1, 7, 2]

print(find_max(my_list))"
Write a Python code snippet to generate a pseudo-random number between 0 and 1.,"import random

random_number = random.random()
print(random_number)"
Write a python function to find the sum of even numbers at even positions.,"def sum_even_and_even_index(arr,n):  
    i = 0
    sum = 0
    for i in range(0,n,2): 
        if (arr[i] % 2 == 0) : 
            sum += arr[i]  
    return sum"
Produce a Python program that outputs the factorials of the first 10 positive integers.,"def factorial(n):
    result = 1
    for x in range(2, n + 1):
        result = result * x
    return result

for n in range(1, 11):
    print(n, ""! ="", factorial(n))"
Create a lambda expression in Python to return the largest number from a list of numbers.,largestNum = lambda a: max(a)
Write a Python program to calculate the distance between two points,"def calculate_distance(x1, y1, x2, y2):
    return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5"
Edit the following Python code to return the same output with fewer code lines.,"def my_func(list):
 return any(i % 2 == 0 for i in list)"
Design a class in Python to store value pairs.,"class ValuePair():
    def __init__(self, key, value):
        self.key = key
        self.value = value
    
    def get_key(self):
        return self.key
    
    def get_value(self):
        return self.value"
Optimize the given code in Python.,"def fibonacci(num):
 a, b = 0, 1
 for _ in range(num):
  a, b = b, a + b
 return a"
Create a function in Python that takes two strings as inputs and prints out the longer of the two strings.,"def longestString(str1, str2):
  if len(str1) > len(str2):
    return str1
  else:
    return str2

print(longestString(""Hello"", ""World""))"
Construct a class in Python to represent an employee.,"class Employee:
    def __init__(self, first_name, last_name, salary):
        self.first_name = first_name
        self.last_name = last_name
        self.salary = salary
 
    def get_full_name(self):
        return self.first_name + "" "" + self.last_name
 
    def get_annual_salary(self):
        return self.salary * 12"
"Create a Python function that takes a string and a pattern, and returns the number of times the pattern appears in the string.","def countSubstring(string, sub_string):
  count = 0 
  for i in range(0, len(string)-len(sub_string)+1):
    if (string[i:i+len(sub_string)] == sub_string):
      count+=1
  return count
  
print(countSubstring(string, pattern))"
Write a Python function to convert a given number into its corresponding Roman numeral.,"def convert_to_roman(num):
    int_nums = [1000, 500, 100, 50, 10, 5, 1]
    roman_nums = ['M', 'D', 'C', 'L', 'X', 'V', 'I']
    roman_value = ''

    i = 0
    while num > 0:
        for _ in range(num // int_nums[i]):
             roman_value += roman_nums[i]
             num -= int_nums[i]
        i += 1

    return roman_value

print(convert_to_roman(99))
# Output: 'XCIX'"
Edit the following Python code to make the program run without any errors.,"s = input(""Please enter a string: "")
print(""The reverse of the string is: "" + s[::-1])"
Create a python script that takes 2 arguments - an array and an integer - and prints the sum of the array multiplied by the integer.,"def sum_arr(arr, num):
    total = 0
    for i in arr:
        total += i
    total *= num
    return total

# Output 
95"
Write a Python program that optimizes an array to find the smallest and largest numbers in the array.,"def optimize(arr):
    min = arr[0] 
    max = arr[0] 
    for i in range(1, len(arr)): 
        if arr[i] < min: 
            min = arr[i] 
  
        if arr[i] > max: 
            max = arr[i] 
  
    print(""Minimum element is:"", min) 
    print(""Maximum element is:"", max)

# Main   
arr = [45, 2, 84, 33, 8, 1, 2]
optimize(arr)"
Rearrange the words in the following sentence to create a meaningful sentence.,Write a program in Python.
"Using the provided data, create a Python program that can categorize a book as fiction or non-fiction.","import json

data = '{""title"": ""The Catcher in the Rye"", ""author"": ""JD Salinger"", ""genre"": ""Novel""}'
book_data = json.loads(data)

if book_data[""genre""] == ""Novel"":
 print(""Book is fiction"")
else:
 print(""Book is not fiction"")"
"Create a Python program to check if a given number is in a given linear list or not, and return the position if found.","def is_in_linear_list(lst, num):
    for i, val in enumerate(lst):
        if val == num:
            return ""Found at {0} position"".format(i)

    return False

lst = [2, 3, 5, 6, 8, 9]
num = 5
result = is_in_linear_list(lst, num)
print(result)"
Implement a function in Python to print all the uppercase letters from a given string.,"def print_uppercase(s):
    for c in s:
        if c.isupper():
            print(c)

print_uppercase(""Hello World"")
# Output:
# H
# W"
Create a function in Python that takes an array of integers and prints out the largest and smallest numbers.,"def print_min_max(arr):
    min_val = min(arr)
    max_val = max(arr)
    print('Smallest number: ', min_val)
    print('Largest number: ', max_val)"
Create a function in Python which takes two arguments – an array of integers and an integer x – and returns a list of all pairs in the array with a sum equal to x.,"def equalSums(array, x): 
    result = [] 

    for i in range(0, len(array)-1): 
        for j in range(i + 1, len(array)): 
            if array[i] + array[j] == x: 
                result.append([array[i], array[j]]) 
  
    return result 
  
print(equalSums(array, x))"
Create a sentiment analysis system in Python using NLTK to provide a score of how positive or negative a review is.,"import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer

# Create a SentimentIntensityAnalzyer
analyzer = SentimentIntensityAnalyzer()
 
# Calculate scores
scores = analyzer.polarity_scores(text)

# Print scores
print(scores)"
"Write a single line of code to display the current date and time in the format ""Month day year, Hour:Minute” using the Python module datetime.","print(datetime.datetime.now().strftime('%b %d %Y, %H:%M'))"
Can you create a web scraper in Python to extract the titles of articles from a newspaper website?,"import requests
from bs4 import BeautifulSoup

url = ""http://example.com/newspaper""

# fetch data from the given URL
r = requests.get(url)

# create a BeautifulSoup object
soup = BeautifulSoup(r.content, ""lxml"")

# extract the title of all articles
for article_title in soup.find_all('h3', class_='title'):
    print(article_title.text)"
Build a Python program that takes in two lists as an input and returns a third list with the common elements across the two inputs.,"def common_elements(list1, list2):
    common_elements = []

    for element in list1: 
        if element in list2:
            common_elements.append(element)
    return common_elements

list1 = [2, 3, 4, 5, 6]
list2 = [3, 5, 7, 8, 9]

print(common_elements(list1, list2))"
Write a Python function which extracts zip codes from a provided string.,"import re

def extract_zip_codes(string):
    zip_codes = re.findall(""(?<=ZIP )\d+"", string)
    return zip_codes

print(extract_zip_codes(""My address is 123 Main St, ZIP 12345""))"
Write a Python program to find the prime numbers from a list given by the user.,"def isPrime(num):
    for i in range (2, num): 
        if num % i == 0: 
            return False
    return True  
  
# Driver Code 
mylist = [3,4,7,11,13,18]
  
for num in mylist: 
    # if condition is true, print the number 
    if isPrime(num): 
        print(num, end ="" "")"
Write a script in Python to delete a given element from an array.,"def delete_element(arr, element):
    if element in arr:
        arr.remove(element)
    return arr"
Create an object in Python that stores a string of text.,"my_string = ""This is a string of text""

my_object = {
    ""string"": my_string
}"
Construct a code snippet for Python to check whether a number is even or odd.,"def is_even(n):
    if n % 2 == 0:
        print(""Even"")
    else:
        print(""Odd"")

is_even(4)"
Create a program to solve linear equations in Python.,"import numpy as np 
 
def solve_linear_eqns(coefficients, constants): 
    # the matrix of coefficients 
    matrix = np.array(coefficients) 
    # the vector of constants 
    vector = np.array(constants)  
    # solve the system of linear equations 
    solution = np.linalg.solve(matrix, vector) 
    return solution"
Design a Python class to accommodate a stack of characters.,"class Stack():
    def __init__(self):
        self.items = []

    def push(self, item):
        self.items.append(item)

    def pop(self):
        return self.items.pop()

    def isEmpty(self):
        return self.items == []

    def peek(self):
        if not self.isEmpty():
            return self.items[-1]"
Generate an array with all the prime numbers from 1 to 500 using python.,"def generate_primes(n):
  prime_list = []
  for n in range(1, n + 1):
    for i in range(2,n):
      if n % i == 0:
        break
    else:
      prime_list.append(n)
  return prime_list

prime_list = generate_primes(500)"
Create a Python function to combine two strings.,"def combine(str1, str2):
  return str1 + str2"
Write a Python program to compare two strings and print the number of times the second string appears in the first string.,"def count_word_occurrence(str1, str2):
    count = 0
    for word in str1.split():
        if word == str2:
            count += 1

    return count

occurrence = count_word_occurrence(""The quick brown fox jumps over the lazy dog"", ""fox"")
print(occurrence)"
Convert the following Python code to JavaScript.,"let x = 3;
if(x >= 3){
    console.log('x is greater than or equal to 3');
}"
Create a program in Python which takes a string and finds the number of each English vowels.,"def count_vowels(sentence):
    vowels = {'a': 0, 'e': 0, 'i': 0, 'o': 0, 'u': 0}
    for char in sentence.lower():
        if char in vowels:
            vowels[char] += 1
    return vowels

sentence = 'Hello World'  
print(count_vowels(sentence)) # Output = {'a': 0, 'e': 1, 'i': 0, 'o': 2, 'u': 0}"
Write a Python program to find the list of words that are longer than n from a given list of words.,"def get_long_words(word_list, n):
  return [w for w in word_list if len(w) > n]

long_words = get_long_words(word_list, n)
print(long_words)"
"Given a string, write a python program to count the number of words in the string.","def count_words(string):
    words = string.split("" "")
    num_words = len(words)
    return num_words

result = count_words(""This is a test string"")
print(""Number of words:"", result)"
Specify a Python function that takes a ``URL`` address and returns the exact content found at that link.,"def getUrlContent(url):
    response = requests.get(url)
    return response.content.decode('utf-8')"
"Create a Python module that takes a list of numbers, calculates the mean, and returns it.","def calculate_mean(numbers):
    total_sum = 0
    for num in numbers:
        total_sum += num
    mean = total_sum / len(numbers)
    return mean

list_of_numbers = [1, 7, 11, 13]
mean = calculate_mean(list_of_numbers)
print(mean) # 7.5"
Create a Python program to determine whether a given number is prime or not.,"def is_prime(num):
    if num > 1:
        for i in range(2,int(num**0.5)+1):
            if (num % i) == 0:
                return False
    else:
        return False
    return True

num = 47
if (is_prime(num)):
    print(num,""is a prime number"")
else:
    print(num,""is not a prime number"")"
"Write a Python script to process the string ""This is a sample string"". The script should remove all the duplicate consecutive words, without changing the order of words.","new_string = []
prev_word = ''
for word in ""This is a sample string"".split():
    if word != prev_word:
        new_string.append(word)
    prev_word = word
print(' '.join(new_string))"
Translate the following into Python: Create a loop that prints out the following pattern: 1 3 5 7 9 11,"for num in range(1, 12, 2):
    print(num, end="" "")"
Write a python function to find the maximum occuring divisor in an interval.,"def find_Divisor(x,y):  
    if (x==y): 
        return y 
    return 2"
Produce a python script to calculate the root mean square error (RMSE) of two given datasets.,"import numpy as np

def RMSE(predictions, targets):
    """"""
    Calculate the root mean square error of two given datasets.
    """"""
    mse = np.mean((predictions - targets)**2)
    return np.sqrt(mse)

#Input data
y_true = [1,2,3]
y_pred = [2,2,2]

rmse = RMSE(y_pred,y_true)

print(""The RMSE is: "", rmse)"
Create a Python script to implement a linear search for a given list of numbers.,"def linear_search(numbers_list, number):
    """"""Implements a linear search for a given list of numbers and returns the index of the number if exists""""""
    
    for index, element in enumerate(numbers_list):
        if element == number:
            return index
    return -1"
Create a Python program to track and record the frequency of each word from a given list of words.,"words = ['Good', 'Outlook', 'Good', 'Luck', 'Bad', 'Outlook', 'Good']
 
freq = {}
 
for word in words:
 if word in freq:
 freq[word] += 1
 else:
 freq[word] = 1
 
print(freq)"
Create a Python program to calculate day of the week for a given date.,"import datetime

day, month, year = (2020, 05, 22)

weekdays = [""Monday"", ""Tuesday"", ""Wednesday"", ""Thursday"", ""Friday"", ""Saturday"", ""Sunday""]

inpDate = datetime.date(year, month, day)
dayOfWeek = inpDate.weekday()
print(weekdays[dayOfWeek])"
Design a function to calculate the volume of a cube in Python.,"def cube_volume(side_length):
  volume = side_length ** 3
  return volume"
Can you generate a Python program that takes a string as input and returns a dictionary with the count of each letter in the string?,"def letter_count(s):
    count = {}
    for c in s:
        if c not in count:
            count[c] = 1
        else:
            count[c] += 1
    return count

s = ""hello world""
count = letter_count(s)
print(count) # {'h': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'w': 1, 'r': 1, 'd': 1}"
Develop a Python class that reads and stores a list of integers.,"class ListOfInts:
    def __init__(self, numbers):
        self.numbers = numbers
    
    def get_list(self):
        return self.numbers"
Create a python program that can generate random passwords of at least 6 characters long that contain letters and numbers.,"import string
import random

def random_password():
    letters = string.ascii_letters
    numbers = string.digits
    password_characters = letters + numbers
    password = ''.join(random.choice(password_characters) for i in range(6))
    return password

print(random_password())"
Create a Python function to remove all duplicate elements in a given list.,"def removeDuplicates(lst):
 return list(set(lst))

list = [1, 2, 3, 4, 4, 4, 5, 5]
print(removeDuplicates(list))"
Write a python function to check if a given number is a perfect number or not (a perfect number is a number that is equal to the sum of its divisors except itself).,"def is_perfect_number(num):
    divs = []
    for i in range(1,num):
        if num % i == 0:
            divs.append(i)
    if num == sum(divs):
        return True
    else:
        return False"
Write a python function to find the sum of squares of first n odd natural numbers.,"def square_Sum(n):  
    return int(n*(4*n*n-1)/3) "
Create a web scraper with Python that collects all the titles of posts from a website.,"import requests
from bs4 import BeautifulSoup

url = 'https://example.com'
response = requests.get(url)
soup = BeautifulSoup(response.text, 'html.parser')

post_titles = [title.text for title in soup.find_all('h2', class_='post-title')]

for post_title in post_titles:
 print(post_title)"
"Create a Python class for a Stack data structure. This class should include methods for pushing, popping, and peeking elements from the stack.","class Stack:
 def __init__(self):
  self.items = []
 
 def push(self, item):
  self.items.append(item)
 
 def pop(self):
  return self.items.pop()
 
 def peek(self):
  return self.items[len(self.items)-1]
 
 def size(self):
  return len(self.items)
 
 def isEmpty(self):
  return self.items == []"
Write a Python class to represent a polynomial of degree n.,"class Polynomial:
    def __init__(self, coeff):
        self.coeff = coeff

    def __call__(self, x):
        result = 0
        for idx, c in enumerate(self.coeff):
            result += c * x ** idx
        return result"
Develop a python program to convert pounds to kilograms.,"weight_pounds = 1
weight_kilograms = weight_pounds/2.2
print(""Weight in kilograms is:"", weight_kilograms)"
"Write a Python program to generate a dictionary which contains (i, i*i) such that i is an int between 1 and N.","""""""
A Python program to generate a dictionary which contains (i, i*i) such that i is an int between 1 and N
""""""

N = 10
my_dict = {}

# Generate the dictionary
for i in range(1, N+1):
    my_dict[i] = i * i

# Print the dictionary
print(my_dict)"
"Produce a single Python statement that multiplies the values of the variables x, y, and z, and stores the result in the variable result.",result = x * y * z
Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.,"def max_len_sub( arr, n): 
	mls=[] 
	max = 0
	for i in range(n): 
		mls.append(1) 
	for i in range(n): 
		for j in range(i): 
			if (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): 
				mls[i] = mls[j] + 1
	for i in range(n): 
		if (max < mls[i]): 
			max = mls[i] 
	return max"
Write a Python program to optimize a set of points in a 3-dimensional plane.,"import scipy.optimize as opt

def objective(x):
 return sum([x[i]**2 for i in range(len(x))])

def constraint1(x):
 return 16 - x[0]**2 - x[1]**2 - x[2]**2

cons = [{'type': 'ineq','fun': constraint1}]

x = [0, 0, 0]

solution = opt.minimize(objective, x, constraints=cons)

print(solution)"
Generate a Python program that creates a word cloud from a given text.,"import matplotlib.pyplot as plt
from wordcloud import WordCloud
 
# Read the whole text.
text = 'The quick brown fox jumps over the lazy dog.'
 
# Generate a word cloud image
wordcloud = WordCloud().generate(text)
 
# Display the generated image:
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis(""off"")
plt.show()"
"Write a function to find entringer number e(n, k).","def zigzag(n, k): 
	if (n == 0 and k == 0): 
		return 1
	if (k == 0): 
		return 0
	return zigzag(n, k - 1) + zigzag(n - 1, n - k)"
Create a function in Python to generate an alphabetically sorted list of unique words from a given string.,"def sort_words(str):
 words = str.split(' ')
 words = set(words)
 words = list(words)
 words.sort()
 return words"
"Given a JSON object, write a python program to print the square of every value, only if the value is even.","import json

data = {
 ""a"": 1,
 ""b"": 2,
 ""c"": 3,
 ""d"": 4
}

for key, value in data.items():
 if value % 2 == 0:
 print(value**2)"
Design a class in Python for hashing passwords.,"import hashlib
 
class PasswordHasher:
 
    def __init__(self, algorithm='sha256'):
        self.algorithm = algorithm
 
    def generate_hash(self, password):
        """"""
        Generates a hash string using the given algorithm.
        """"""
        hash_value = hashlib.new(self.algorithm)
        hash_value.update(password.encode('utf-8'))
        return hash_value.hexdigest()"
Write a Python program to create a join of two given strings being separated by a given separator.,"a = ""Apples""
b = ""Oranges""

#joining the strings, using the separator
joinedString = a +"" ""+ ""and"" +"" ""+ b

# print the joined string
print(joinedString)"
Compose a python program to classify each items in our list.,"def classify(items):
    categories = ['shirts', 'pants', 'dresses', 'coats']
    results = {}
    for item in items:
        for category in categories:
            if item == category:
                results[item] = category
    return results"
Generate a python program to remove duplicate values in a given list.,"def remove_duplicates(myList):
    unique_list = []
    for item in myList:
        if item not in unique_list:
            unique_list.append(item)
    return unique_list

result = remove_duplicates(myList)
print(result)"
"Create a string formatting function in Python that takes a first name, last name, and age as parameters.","def format_name(firstName, lastName, age):
 return f'{lastName}, {firstName} is {age} years old.'

# Usage example
print(format_name('John', 'Doe', 35)) # Output: Doe, John is 35 years old."
Generate a python program to print odd numbers in a given range.,"def print_odd_numbers(start, end):
    for i in range(start, end+1):
        if i % 2 != 0:
            print(i)"
Write a Python program that finds the smallest number in a given array with an algorithm that has an optimal time complexity.,"def find_smallest_number(array):
    smallest = array[0]
    for element in array:
        if element < smallest:
            smallest = element
    return smallest"
Generate a python program to create a Pandas DataFrame using the following input data.,"import pandas as pd

# Create the data frame
data_frame = pd.DataFrame(data)
  
# Print the data frame
print(data_frame)"
Develop a function in Python to take as input two array of integers and swap their elements.,"def swap(arr1, arr2):
    assert len(arr1) == len(arr2)
    for i in range(len(arr1)):
        temp = arr1[i]
        arr1[i] = arr2[i]
        arr2[i] = temp"
Construct a nested loop in Python to print out the following elements in a new line.,"for x in [1,2,3]:
  for y in [4,5,6]:
      for z in [7,8,9]:
          print(x,y,z)"
Write a Python code to get the intersection of two given arrays.,"def intersection_arr(arr1, arr2):
    # create an empty list for storing the elements
    result = []
    
    for element in arr1:
        if element in arr2: 
            result.append(element)
    
    return result

a = [1, 2, 3, 4, 5]
b = [3, 4, 5, 6, 7]

intersect = intersection_arr(a, b)
print(intersect)"
Write a Python code that prints out the prime numbers from 1 to 100,"print(""The prime numbers from 1 to 100 are:"")

for number in range(1, 101):
    if number > 1: 
        for i in range(2, number): 
            if (number % i) == 0: 
                break
        else: 
            print(number)"
Write a Python program to store and display information about a restaurant.,"class Restaurant:
   def __init__(self, name, cuisine):
        self.name = name
        self.cuisine = cuisine

restaurant = Restaurant('The Olive', 'Chinese and Thai')

print('Name of the restaurant: ', restaurant.name)
print('Cuisine served in the restaurant: ', restaurant.cuisine)"
Generate a program in Python to implement quick sort on an array of integers.,"def quicksort(arr):
    if len(arr) <= 1:
        return arr
    else:
        pivot = arr[0]
        less_than_pivot = [x for x in arr[1:] if x <= pivot]
        greater_than_pivot = [x for x in arr[1:] if x > pivot]

        return quicksort(less_than_pivot) + [pivot] + quicksort(greater_than_pivot)
 
arr = [6, 9, 20, 1, 11, 46]
print (""Quick Sort: "" + str(quicksort(arr)))"
Reformat a collection of list into a dictionary in Python.,"data = [['a', 1], ['b', 2], ['c', 3], ['d', 4]]

my_dict = dict(data)
print(my_dict) # {'a': 1, 'b': 2, 'c': 3, 'd': 4}"
Generate Python code for making a GraphQL API query.,"import requests

url = 'http://localhost:4000'

query = """"""
query {
 user(id: 2) {
  name
  age
  address {
   street
   city
  }
 }
}
""""""

response = requests.post(url, json={'query': query})
data = response.json()

print(data)"
Optimize the following Python code for counting the number of words in an input string.,"# Count number of words in a string

def count_words(s):
    # remove unnecessary characters
    s = s.replace(',', '').replace('.', '')
    # split string into list of words
    words = s.split(' ')
    # return the length of the list (number of words)
    return len(words)

s = ""This is a sample string""
words_count = count_words(s)
print(words_count)"
Give a Python function that shuffles the elements of a given list.,"import random

def shuffle(list):
    random.shuffle(list)
    return list

list = [1, 2, 3, 4, 5]
shuffledList = shuffle(list)

print(shuffledList)"
Create a REST API in Python to retrieve a list of users from a database.,"import flask
from flask_restful import Resource, Api

app = flask.Flask(__name__)
api = Api(app)

class Users(Resource):
    def get(self):
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM users ORDER BY id ASC')
        users = cursor.fetchall()
        conn.close()
        return users

api.add_resource(Users, '/users')"
Write a Python code snippet to print out the first ten entries in a given dictionnary.,"for key, value in dict.items():
    if key < 'k':
        print(key, value)"
Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item,"def count_occurance(s):
  count=0
  for i in range(len(s)):
    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):
      count = count + 1
  return count"
Create a method in Python that returns the result for the factorial of a given number.,"def factorial(n): 
    if n == 0:
        return 1
    else:
        return n*factorial(n-1) 

x = 5
result = factorial(x) 
print(result) 

# Output: 
120"
Generate Python code to tokenize the given text.,"import re

def tokenize_text(text):
    #Split the string into words on whitespace
    words = re.split(r'\s', text)
    #Punctuation patterns
    punctuation = re.compile(r'[.,!?;:]')
    #Create tokens
    tokens = [word.strip(punctuation.pattern) for word in words]
    #Return the list of tokens
    return tokens"
Create a Python program to normalize a list of numbers so that the sum of the numbers add up to 1.,"import numpy as np

def normalize_list(lst):
    lst = np.array(lst)
    normalized = lst / lst.sum()
    return normalized

lst = [2, 5, 8, 9, 12, 25]
normalized_list = normalize_list(lst)
print(normalized_list)"
Write a function to find frequency count of list of lists.,"def frequency_lists(list1):
    list1 = [item for sublist in list1 for item in sublist]
    dic_data = {}
    for num in list1:
        if num in dic_data.keys():
            dic_data[num] += 1
        else:
            key = num
            value = 1
            dic_data[key] = value
    return dic_data
"
Write an algorithm in Python to find the missing number in a given sequence of numbers,"def findMissingNumber(input):
 
    n = len(input) + 1  # calculate the total numbers
    total = (n * (n+1)) / 2  # calculate the sum of numbers 
    missing_num = total - sum(input)    
    return missing_num
 
# Driver code
input = [1, 2, 4, 5, 6, 7, 8]
missing_num = findMissingNumber(input)
print(""The missing number is:"", missing_num)"
Create a Python program to generate a sentence from a given set of words.,"def generateSentence(words):
  sentence = ''
  for word in words:
    sentence += word + ' '
  sentence += '.'
  return sentence

sentence = generateSentence([""The"",""quick"",""brown"",""fox"",""jumped"",""over"",""the"",""lazy"",""dog""])
print(sentence)"
"Write a Python function to classify data points as low, medium and high according to the given threshold values.","def classify(value, threshold):
    if value < threshold[0]:
        return 'low'
    elif threshold[0] <= value < threshold[1]:
        return 'medium'
    else:
        return 'high'"
Create a Python program to sort a given array in increasing and decreasing order.,"def sort_array(arr): 
	asc_arr = arr.copy() 
	asc_arr.sort() 

	dsc_arr = arr.copy()
	dsc_arr.sort(reverse=True)
 
	return asc_arr, dsc_arr

asc_arr, dsc_arr = sort_array([3, 5, 8, 9, 0, 4, 1])
print(""Sorted in ascending order:"", asc_arr)
print(""Sorted in descending order:"", dsc_arr)"
Create a class for a Word Counter in Python. The class should take a string of text as an argument and have a method to count the total number of words.,"class WordCounter:
 def __init__(self, text):
 self.text = text
 
 def count_words(self):
 return len(self.text.split())

text = 'This is some sample text.'
wc = WordCounter(text)
num_words = wc.count_words()
print(num_words) # Output: 4"
"Create a basic web-scraper using Python and Scrapy. The scraper should be able to parse the HTML, extract and store titles from a news website.","import scrapy

class NewsSpider(scrapy.Spider):
 name = 'news'
 start_urls = [
 'http://www.example.com/news/',
 ]

def parse(self, response):
 for article in response.css('article'):
 yield {
 'title': article.css('h2::text').get(),
 }"
Create a Python script to generate all the combinations of a given list of integers.,"def generate_combinations(input_list):
    import itertools
    comb_list = []
    # Get all possible combinations of the list
    for subset in itertools.combinations(input_list,
                                       len(input_list)):
        comb_list.append(subset)
    return comb_list"
Write a Python program to edit an array of strings to filter out all the strings that do not contain the given substring.,"# Filtering out the strings that don't contain the substring
filtered_array = [s for s in array if substring in s]

print(filtered_array)"
Write a Python program to generate and print a random list of size n.,"import random

def generate_random_list(n):
    random_list = []
    for i in range(n):
        random_list.append(random.randint(0, 100))
    return random_list

n = 8
random_list = generate_random_list(n)
print(random_list)"
How can we create a function to check if a given string is a palindrome in Python?,"def is_palindrome(s): 
    s = s.lower() 
    return s == s[::-1]"
"From a Python data type, generate a json string.","import json

json_str = json.dumps(person)"
Automate a business process by creating a program to generate the output based on specified inputs.,"def automate_business_process(inputs):
 # Use a programming language such as Python to parse the inputs
 # ...

# Use algorithms to generate the output
 def generate_output(inputs):
 ..."
Write a python program to take user input and perform sum operation.,"num1=int(input(""Enter a number:""))
num2=int(input(""Enter another number:""))
 
#sum 
sum = num1 + num2
 
#print the result
print('Sum of {0} and {1} is {2}'.format(num1, num2, sum))"
Can you write a Python script that prints out the number of 'a's found in a text string?,"text = ""abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc""

count = 0 
for char in text:
    if char == 'a':
        count += 1

print(count)"
Design an algorithm in Python to find a missing number from a given range of numbers.,"def find_missing_num(arr):
    n = len(arr)
    sum_of_num = (n + 1)*(arr[0] + arr[n-1])/2
    sum_of_arr = sum(arr)
    return sum_of_num - sum_of_arr"
Create a program in Python to calculate the length of a given string without using the len() method.,"def length(string):
    count = 0
    for char in string:
        count += 1
    return count

string=""Python""

print(length(string))"
"Create a program in Python that prints the Fibonacci Series up to N terms, where N is a user-input number.","def fibonacci_series(N):
    a = 0
    b = 1
 
    if N < 0:
        print(""Incorrect input"")
    elif N == 0:
        print(""Series up to 0 terms: "")
    else:
        print(""Series up to"", N,""terms:"")
    
    for i in range(0, N):
        print(a, end="" "")
        c = a + b
        a = b
        b = c

N = int(input(""Enter a number: ""))
fibonacci_series(N)"
Optimize a given code in Python to run faster.,"def factorial(n):
    fact = 1
    while n > 1:
        fact *= n
        n -= 1
    return fact

# Eliminated unnecessary check for n > 0, as n will always be greater than 0 before the loop begins. This makes the function run faster."
Create a Python script to scrape the HTML of a given web page and extract all of its headings and paragraphs.,"import requests
from bs4 import BeautifulSoup


url = 'url'
page = requests.get(url)
soup = BeautifulSoup(page.text, 'html.parser')

headings = soup.find_all(['h1', 'h2', 'h3', 'h4', 'h5', 'h6'])
for heading in headings:
 print(heading.text)

paragraphs = soup.find_all('p')
for paragraph in paragraphs:
 print(paragraph.text)"
Generate Python code to generate a list which contains squares of all the numbers from 1 to 10,"squares = []
for i in range(1, 11):
 squares.append(i*i)
print(squares)"
Create a deep learning model in python to classify inputs into 3 categories.,"import tensorflow as tf

model = tf.keras.Sequential([
 tf.keras.layers.Input(shape= (128,)),
 tf.keras.layers.Dense(64, activation='relu'),
 tf.keras.layers.Dense(64, activation='relu'),
 tf.keras.layers.Dense(3, activation='softmax')
])

model.compile(optimizer='Adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])"
Identify a code segment's language from a given snippet.,Python
Create a function in Python that takes in a string and returns true if all characters in the string are unique and false if there is at least one repeated character.,"def check_unique(s):
    seen=set()
    for c in s:
        if c in seen:
            return False
        else:
            seen.add(c)
    return True"
Convert a Python dictionary to a JavaScript object.,"const pythonDictionary = {
    'key1': 'value1',
    'key2': 'value2'
};
const jsObject = Object.fromEntries(
    Object.entries(pythonDictionary)
);
console.log(jsObject); // {key1: 'value1', key2: 'value2'}"
Create a function in Python to give the multiple of 6 of any given number.,"def multiple_of_6(number):
    return number * 6"
Create a Python program to extract the top 10 words from a text.,"import re
from collections import Counter

def get_top_words(txt):
    words = re.findall(r'\w+', txt.lower())
    return Counter(words).most_common(10)

print(get_top_words('My name is John and I work as a software engineer.'))
# Output: [('i', 2), ('a', 1), ('as', 1), ('engineer', 1), ('john', 1), ('name', 1), ('software', 1), ('work', 1)]"
"Create a Python lambda expression that takes one argument, word, and converts all uppercase letters in the given word to lowercase.","change = lambda word: word.lower()

print(change(""CHANGE""))"
Compose a Python program that takes in a list of strings and returns a list with duplicate strings removed.,"def remove_duplicates(strs):
    new_strs = [] 
    for i in strs: 
        if i not in new_strs: 
            new_strs.append(i) 
    return new_strs
    
# Driver Code
strs = [""Hello"", ""World"", ""Hello"", ""Goodbye"", ""Goodbye"", ""Welcome""]
print(remove_duplicates(strs))"
Outpus the number of unique elements in a Python list.,"unique_elements = set(list)
print(""Number of unique elements:"", len(unique_elements))"
Create a Python program to generate the nth number in the Fibonacci series.,"def nth_fibonacci(n):
 if n == 0:
  return 0
 elif n == 1:
  return 1
 else:
  return nth_fibonacci(n-1) + nth_fibonacci(n-2)"
"Given a number of queues, each containing numbers, write python code to find and print out the numbers at the front of each queue.","def print_front_elements_from_queues(queue_list):
    for queue in queue_list:
        print(queue[0])

queue_list = [queue1, queue2]

print_front_elements_from_queues(queue_list) # This should print 5 and 7"
Create a Python program to generate a list with unique elements from a given list.,"def unique_list(lst):
    unique = []
    for item in lst:
        if item not in unique:
            unique.append(item)
    return unique"
"Create a Python class named 'Circle' that include two methods, init() and area().","class Circle:
    def __init__(self, radius):
        self.radius = radius

    def area(self):
        return 3.14 * (self.radius**2)"
Design a Python program to calculate the GCD (Greatest Common Divisor) of two numbers.,"def gcd(a, b):
    if a == 0:
        return b
    return gcd(b % a, a)

a = 15
b = 20

print(""GCD of"", a, ""and"", b, ""is"", gcd(a, b))"
Write a Python function to convert a given floating point number to binary.,"def decimal_to_binary(f_num):
  b_str = """"
  int_num = int(f_num)
  f_num = f_num - int_num

  while int_num > 0:
    b_str = str(int_num % 2) + b_str
    int_num //= 2

  b_str = ""1."" + b_str

  while f_num > 0: 
    f_num *= 2
    int_num = int(f_num)
    if int_num == 1:
      b_str += ""1""
    else:
      b_str += ""0""
    f_num = f_num - int_num

  return b_str"
Design a Python program to detect if a given number is in the Fibonacci Sequence or not,"def is_fib(num):
  if num == 0 or num == 1:
    return True
  first = 0
  second = 1
  while(num >= second):
    if second == num:
      return True
    third = first + second
    first = second
    second = third
  return False"
Design a Python script to generate a report containing summaries of the data in a table.,"import pandas as pd 

# Load data from the orders table 
orders = pd.read_csv('orders.csv')

# Generate summary statistics for the orders table 
summary_stats = orders.describe()

# Generate a report containing summary statistics 
report = open('report.html', 'w') 
report.write(summary_stats.to_html()) 
report.close()"
Generate random passwords using Python.,"import string 
import random 
  
def generate_pass(size = 8, chars=string.ascii_letters + string.digits + string.punctuation): 
  ''' 
  Generates a random password with given size and given 
  characters 
  '''
  return ''.join(random.choice(chars) for _ in range(size)) 

# Driver code 
print(generate_pass())"
Create a Python program to filter out all negative numbers from a list.,"def filter_negative(data):
    """"""Filters out all negative numbers from a list""""""
    return [x for x in data if x >= 0]"
Create a function to generate a random string of fixed length using Python.,"import random
import string

def generate_random_string(length):
    letters = string.ascii_lowercase
    result_str = ''.join(random.choice(letters) for i in range(length))
     
    return result_str

random_string = generate_random_string(8)
print(random_string) # Outputs 'yezrtsyz'"
Generate a Python code to take user input and store it in a list.,"user_input = []

while True:
 user_in = input(""Please enter your input: "")
 user_input.append(user_in)
 
 print(user_input)"
Create a class in Python for representing a vehicle.,"class Vehicle:
    def __init__(self, type, make, model, number_of_wheels):
        self.type = type
        self.make = make
        self.model = model
        self.number_of_wheels = number_of_wheels
        
    def description(self):
        return f""This is a {self.type} - {self.make} {self.model} with {self.number_of_wheels} wheels."""
Create an efficient algorithm in Python to convert a list of integers into a single integer representing the sum of the list elements.,"def list_sum(nums): 
 total = 0
 
 for num in nums:
   total += num
 
 return total

list_sum([1, 3, 5, 8]) # output: 17"
Develop a Python program to reverse an integer.,"def reverse_int(num): 
    rev = 0
    while num > 0: 
        rev = (rev*10) + (num%10)
        num = num//10
    return rev 

#test
print(reverse_int(12345))"
Develop a python program for,"def filter_vowel_strings(string_list):
    vowels = ('a', 'e', 'i', 'o', 'u')
    filtered_list = []
    for string in string_list:
        if string.startswith(vowels):
            filtered_list.append(string)
    return filtered_list"
Create a vector addition program in Python.,"def vector_add(a, b):
    c = []
    for i in range(len(a)):
        c.append(a[i] + b[i])

    return c"
Generate a class in Python that has getters and setters for some public variable.,"class SampleClass:
    def __init__(self):
        self.public_variable = None

    def get_public_variable(self):
        return self.public_variable

    def set_public_variable(self, value):
        self.public_variable = value"
Create a function to calculate the Fibonacci sequence in Python,"def Fibonacci(n): 
    if n<0: 
        print(""Incorrect input"") 
    # First Fibonacci number is 0 
    elif n==1: 
        return 0
    # Second Fibonacci number is 1 
    elif n==2: 
        return 1
    else: 
        return Fibonacci(n-1)+Fibonacci(n-2) 
  
# Driver Program 
print(Fibonacci(n))"
Write a python function to find minimum adjacent swaps required to sort binary array.,"def find_Min_Swaps(arr,n) : 
    noOfZeroes = [0] * n 
    count = 0 
    noOfZeroes[n - 1] = 1 - arr[n - 1] 
    for i in range(n-2,-1,-1) : 
        noOfZeroes[i] = noOfZeroes[i + 1] 
        if (arr[i] == 0) : 
            noOfZeroes[i] = noOfZeroes[i] + 1
    for i in range(0,n) : 
        if (arr[i] == 1) : 
            count = count + noOfZeroes[i] 
    return count "
Create a Python program to check if a given list is sorted in ascending order.,"def is_sorted_ascending(numbers):
 for i in range(len(numbers) - 1):
 if numbers[i] > numbers[i+1]:
 return False
 return True"
Write Python code to retrieve a specific element from a 2D array.,"my_2d_array = [[1,2,3],[4,5,6],[7,8,9]]
row_to_retrieve = 2
column_to_retrieve = 0

retrieved_element = my_2d_array[row_to_retrieve][column_to_retrieve]"
Create a Python program to calculate the factorial of an integer.,"def factorial(num):
    if num == 0:
        return 1
    else:
        return num * factorial(num-1)

num = int(input(""Enter an integer: ""))
print(""Factorial of "", num, ""is: "", factorial(num))"
Write a Python program to take a list of integers and sort them in ascending order using insertion sort.,"def insertion_sort(arr):
 for index in range(1,len(arr)):
 key = arr[index]
 j = index-1
 while j >=0 and key < arr[j]:
 arr[j+1] = arr[j]
 j -= 1
 arr[j+1] = key

arr = [4, 3, 7, 2, 1]
insertion_sort(arr)
print(arr)

# Output: [1, 2, 3, 4, 7]"
Write a python script to get the filename from the given path,"import os

def get_filename_from_path(path):
    return os.path.basename(path)

filename = get_filename_from_path('/Users/john/Documents/Github/myproject/myfile.py')
print(filename)"
Design a program in Python that prints the even numbers from 0 to 100.,"for i in range(0, 101): 
    if (i % 2 == 0): 
        print(i)"
Create an algorithm in Python that finds all subsets of a given set.,"def subsets(S):
	""Return all subsets of set S.""
	if len(S) == 0:
		return [[]]  # list of the empty set
	T = subsets(S[1:])  # recur on S[1:]
	return T + [s + [S[0]] for s in T]  # add S[0] to front of each set in T

# Sample use
S = ['a', 'b', 'c', 'd']
print(subsets(S))"
Update the following Python program to validate a phone number.,"import re

phone = ""404-999-9999""

pattern = r""^[0-9]{3}-[0-9]{3}-[0-9]{4}$""

result = re.match(pattern, phone)

if result and len(phone) == 12:
 print(""Valid phone number"")
else:
 print(""Invalid phone number"")"
Use Object-Oriented Programming (OOP) in Python to create a class for a bookstore object.,"class Bookstore():
    
    def __init__(self, name, books):
        self.name = name
        self.books = books

    def add_book(self, book):
        self.books.append(book)

    def get_book_by_title(self, title):
        for book in self.books:
            if book.title == title:
                return book
        return None"
Create a python script that takes an array of integers and returns an array of their squares.,"def find_squares(arr):
    squares = []
    
    for num in arr:
        squares.append(num ** 2)
        
    return squares

find_squares([1, 2, 3, 4, 5])"
Create a Python function that takes in an array of numbers and returns the maximum value in the array.,"def max_value(arr):
    return max(arr)"
Design a function in a Python program to calculate the area of a circle with a given radius.,"def get_circle_area(radius):
    """"""Calculate and return the area of a circle with a given radius.
 
    Args:
        radius (float): The radius of the circle
 
    Returns:
        float: The area of the circle
    """"""
    return 3.14 * (radius * radius)"
Design a program that takes a complicated function and simplifies it in Python.,"def simplified_func (x):
    return 3*x**2 + 5*x - 4"
Write a Python program to generate the Fibonacci sequence for n numbers.,"def generateFibonacci(n): 
    # Taking 1st two fibonacci nubers as 0 and 1 
    FibArray = [0, 1] 
   
    while len(FibArray) < n: 
        next_fib_num = FibArray[-1] + FibArray[-2] 
        FibArray.append(next_fib_num) 
      
    return FibArray 
  
# Driver Code 
result = generateFibonacci(10) 
print(result)"
Create a program in Python which will take in a sentence and print out each word in reverse.,"string = 'This sentence will be reversed'

words = string.split()

for word in words:
	print(word[::-1], end="" "")

# Output: sihT ecnetnes lliw eb desrever"
Write a python program to implement the linear search algorithm,"def linear_search(arr, key):
    for i in range(len(arr)):
        if arr[i] == key: 
            return i 
  
    return -1"
Write a function to extract values between quotation marks of the given string by using regex.,"import re
def extract_quotation(text1):
  return (re.findall(r'""(.*?)""', text1))"
Optimize an existing Python script by improving its runtime performance.,"import time 

start = time.time()

def foo(): 
 for i in range(1000): 
  print('Hello World', i)

foo()

end = time.time()

print('Time Taken:', end - start)"
Write a commmand-line script that sums all numbers from 0 to N where N is provided as input.,"# python code
import sys

input_val = int(sys.argv[1])
sum = 0

for i in range(input_val + 1):
    sum += i
    
print(""Sum from 0 to {} is = {}"".format(input_val, sum))"
Generate a Python program that adds all numbers from 1 to a given number n.,"def sum_numbers(n):
    total = 0
    for i in range(1, n+1):
        total += i
    return total"
Create a new method in Python that prints all the numbers from 1 to 5.,"def print_numbers():
 for i in range(1, 6):
  print(i)"
Design a method in Python to test whether or not a number is a palindrome.,"def is_palindrome(n):
    n_str = str(n)
    return n_str == n_str[::-1]"
Create a code solution to generate histograms in Python.,"import matplotlib.pyplot as plt

# Use randomly generated data
data = np.random.normal(size=1000)

# Generate histogram
plt.hist(data, bins=30, edgecolor='k', alpha=0.7)
plt.xlabel(""Value"")
plt.ylabel(""Frequency"")

# Show histogram
plt.show()"
Write a python program to create a connection to a given database.,"import pymysql

# Create connection to database
conn = pymysql.connect(host=""localhost"",
                       user=""admin"",
                       passwd=""admin123"",
                       db=""test"")

# Create a cursor and execute a query
cur = conn.cursor()"
Create a Python program to ask a user for the number of students in the class and generate an array of empty strings of that length.,"students = [""""] * 10"
Write a function in Python that creates a list of all the letter combinations of a given string.,"def letterCombinations(string):
 letters = [] 
 for i in range(len(string)): 
 for j in range(i+1, len(string)+1): 
 letters.append(string[i:j]) 
 return letters"
Write a function in Python that takes an unordered list of integers as a parameter and will return a sorted list.,"def sortList(list):
 sorted_list = sorted(list)
 return sorted_list"
Create an endpoint in Python for handling an API request for getting data from a database.,"from flask import Flask, request
import sqlite3

app = Flask(__name__)

@app.route('/api/getData', methods=['POST'])
def get_data():
 data = request.get_json()
 con = sqlite3.connect('database.db')
 cur = con.cursor()
 query = 'SELECT * FROM myTable WHERE id=?'
 result = cur.execute(query, (data['id'],)).fetchall()
 return result

if __name__ == '__main__':
 app.run(debug=True)"
Create a function to parse JSON input in Python.,"import json

def parse_json(input_string):
    data = json.loads(input_string)
    return data"
Write an algorithm in Python to calculate the nth prime number.,"def nth_prime(n):
 primes = [2]

num = 3
while len(primes) < n:
 isPrime = True
 for prime in primes:
 if num % prime == 0:
 isPrime = False
 break
 if isPrime:
 primes.append(num)
 num += 2

return primes[n-1]

#Example
print(nth_prime(100))"
Develop a Python program to grade a student's performance on a multiple choice test.,"def grade_test(scores):
    total = 0
    for score in scores:
        total += score

    if total >= 40:
        return ""Pass""
    else:
        return ""Fail""

scores = [5, 10, 15]
grade = grade_test(scores)
print(""Grade: "" + grade)"
"Write a Python program to generate a list comprising 5 random integers between 1 to 30, with no duplicates.","import random

def generate_random_list():
    random_list = []
    while len(random_list) < 5:
        new_number = random.randint(1, 30)
        if new_number not in random_list:
            random_list.append(new_number)
    return random_list"
Rewrite the following Java Program using Python.,"print(""Hello World!"")"
Code a program in Python to convert a text into its corresponding binary representation.,"def bin_from_text(text):
    bin_text = """"
    for char in text:
        bin_text += bin(ord(char)).lstrip(""0b"") + "" ""
    return bin_text"
Write a function to put spaces between words starting with capital letters in a given string by using regex.,"import re
def capital_words_spaces(str1):
  return re.sub(r""(\w)([A-Z])"", r""\1 \2"", str1)"
Generate a Python program to remove all occurrences of the character 'x' from a list,"def remove_x(lst):
    """"""
    Function to remove all occurrences of a character 'x' from a list.

    Args:
        lst (list): The list to process.

    Returns:
        A list with all occurrences of the character 'x' removed.
    """"""
    
    return [item for item in lst if item != 'x']"
Write a function in Python to count how many words are in the given string.,"def count_words(string):
    words = string.split(' ')
    return len(words)

sentence = ""Do not stand at my grave and weep""
count = count_words(sentence)
print(""The given string has {} words."".format(count))"
Write code to generate a set of random numbers between 0 and 10 in Python.,"import random

values = random.sample(range(11), 5)
print(values) // [5, 9, 3, 4, 1]"
Identify and fix the bug in the following Python code.,"def remove_duplicates(ls):
    result = []
    for e in ls:
        if e not in result:
            result.append(e)
    return list(set(result))"
Write a function to extract the even elements in the nested mixed tuple.,"def even_ele(test_tuple, even_fnc): 
	res = tuple() 
	for ele in test_tuple: 
		if isinstance(ele, tuple): 
			res += (even_ele(ele, even_fnc), ) 
		elif even_fnc(ele): 
			res += (ele, ) 
	return res 
def extract_even(test_tuple):
  res = even_ele(test_tuple, lambda x: x % 2 == 0)
  return (res) "
Write a python function to find smallest number in a list.,"def smallest_num(xs):
  return min(xs)
"
Generate a Python program to reverse the digits of a given number.,"def reverse_number(num):
    rev = 0
    while num > 0:
        reminder = num%10
        rev = (rev*10)+reminder
        num = num//10
    return rev"
Write a function to compute binomial probability for the given number.,"def nCr(n, r): 
	if (r > n / 2): 
		r = n - r 
	answer = 1 
	for i in range(1, r + 1): 
		answer *= (n - r + i) 
		answer /= i 
	return answer 
def binomial_probability(n, k, p): 
	return (nCr(n, k) * pow(p, k) *	pow(1 - p, n - k)) "
Create a Python function to calculate the standard deviation of a set of numbers.,"def calculate_std(numbers):
  mean = sum(numbers)/len(numbers)
  squared_differences = [(num-mean)**2 for num in numbers]
  variance = sum(squared_differences) / len(numbers)
  return variance**0.5

result = calculate_std([1, 2, 3, 4, 5])
print(result)"
"Create a program in Python that prints ""Greetings"" for any name that is passed as an argument.","import sys

name = sys.argv[1]

print(""Greetings, ""+name+""!"")"
Create a Python script to remove redundant characters in a given string.,"def remove_redundant(text):
    """"""Remove redundant characters from a given string""""""
    result = """"

    # Iterate over the string
    for c in text:
        # Add the character to the result if it is not already present
        if c not in result:
            result+=c

    return result

# Output
print(remove_redundant(text))"
Can you make a Python program to print out the Fibonacci sequence up to the nth element of the sequence?,"def Fibonacci(n):
  a = 0
  b = 1
  if n < 0:
    print(""Incorrect input"")
  elif n == 0:
    return 0
  elif n == 1:
    return 1
  else:
    for i in range(2,n):
      c = a + b
      a = b
      b = c
    return b

print(Fibonacci(8)) # Output: 13"
"Generate a Python function that takes a string as input and returns True if the string contains a capital letter, otherwise False.","def has_capital_letter(input_string):
    for character in input_string:
        if character.isupper():
            return True
    return False"
Suggest a completion for the following python code to get the maximum unique elements in an array.,"def maximum_unique_elements(arr):
    curr_max = 0
    seen = set()
    for num in arr:
        if num not in seen:
            curr_max += 1
            seen.add(num)

    return curr_max"
Write a Python program to implement Quick Sort algorithm,"def quick_sort(arr): 
  if len(arr) <= 1:
  return arr
  
  pivot = arr[len(arr) // 2]
  lesser_arr, equal_arr, greater_arr = [], [], []
  for num in arr:
  if num < pivot:
  lesser_arr.append(num)
  elif num == pivot:
  equal_arr.append(num)
  else:
  greater_arr.append(num)
    
  return quick_sort(lesser_arr) + equal_arr + quick_sort(greater_arr)"
Write a Python program to calculate the total sum of a given list of numbers,"""""""
Calculate the total sum of a given list of numbers using Python
""""""

# Function to calculate the total sum of a given list of numbers
def get_total_sum(num_list):
    total = 0
    
    for num in num_list:
        total += num

    return total

if __name__ == '__main__':
    num_list = [1,2,3,4,5]
    total_sum = get_total_sum(num_list)
    print(total_sum)"
Write a Python program to check if the given matris is a symmetric matrix.,"def is_symmetric(a):
    n = len(a)
    for i in range(n):
        for j in range(n):
            if a[i][j] != a[j][i]:
                return False
    return True

A = [[1,2,3],
    [-2,0,4],
    [3,-4,5]]
print(is_symmetric(A))"
Write a Python program to generate a multiplication table for numbers from 2 to 5 using a for loop.,"for i in range(2, 6): 
 for j in range(1, 11): 
  print('{} x {} = {}'.format(i, j, i * j)) 
 print("" "")"
Develop a function in Python to sort a given array of strings.,"def sort_strings(strings):
  return sorted(strings)"
Write a python program to convert a given string in valid json format,"import json

def str_to_json(json_string):
    # convert the string to dictionary
    json_dict = json.loads(json_string) 
    # convert the dictionary to json
    json_data = json.dumps(json_dict) 
    # return json
    return json_data"
Develop an algorithm in Python for finding the maximum index of an array's sub-array.,"def findMaxIndex(arr):
    """"""This function finds the maximum index of an array's sub-array.""""""
    maxIndex = 0
    currentMax = 0
    for i in range(1, len(arr)):
        if arr[i] > arr[currentMax]:
            maxIndex = i
            currentMax = i
    return maxIndex

arr = [2, 3, 4, 5, 7, 9, 11]
maxIndex = findMaxIndex(arr)
print(maxIndex) # Output: 5"
Develop a python program to convert the given text into a list,"text = ""Apples, oranges, and bananas""

list_from_text = text.split("", "")

print(""List:"", list_from_text)"
What is the purpose of the method in line 4 of the code?,"The purpose of the method in line 4 is to generate a random number within the given range of min and max. It uses the Python's random.range() method which returns a random integer from the range of min to max, inclusive."
Generate a program in Python to evaluate an expression tree.,"def eval(node):
    if node.isLeaf():
        return node.value
 
    left = eval(node.left)
    right = eval(node.right)
 
    if node.op == '+':
        return left + right
    if node.op == '-':
        return left - right
    if node.op == '*':
        return left * right
    if node.op == '/':
        return left / right"
Write a Python program to efficiently delete all items from a set that are in another set.,"A = {1, 2, 3, 4, 5}
B = {2, 4}

A -= B"
Implement an algorithm in Python to reverse a given string.,"def reverse_string(string): 
    return string[::-1]"
Develop a Python code to give an alert message of the total cost of an item after adding tax.,"tax_rate = 0.2
cost = 5

total_cost = cost + (cost * tax_rate)

print(""The total cost of the item after adding tax is $"" + str(total_cost))

alert(""The total cost of the item after adding tax is $"" + str(total_cost))"
Write a Python script to download the html content of a given webpage,"import requests

url = 'https://www.example.com/'
resp = requests.get(url)
html = resp.content"
Create a Python function that takes in an array of integers and returns the maximum value.,"def max_value(int_arr):
    max_val = int_arr[0]
    for i in int_arr:
        if i > max_val:
            max_val = i
    return max_val"
Create a basic Python application to return the similarity between two strings using fuzzywuzzy.,"# Import the necessary modules
import fuzzywuzzy 
from fuzzywuzzy import process

# The two strings to compare 
str1 = 'Apple'
str2 = 'Apples'

# Compare the two strings
score = fuzzywuzzy.fuzz.ratio(str1, str2)

# Print the similarity score
print(score)

# Output 
100"
Generate a function in Python that takes a number as input and prints its corresponding binary representation.,"def binary_representation(num):
    binary_representation = bin(num)[2:] 
    print(""Binary representation of "" + str(num) + "" is: "" + binary_representation)

# Driver code
binary_representation(5) # Binary representation of 5 is: 101"
"using the following Json as an example, write a Python program that reads this Json into an object.","import json

# example data
data = '{""id"":1,""name"":""Testing"",""description"":""This is a test""}'

# parse data into a Python object
obj = json.loads(data)

print(obj)"
Write a function in Python that prints all the prime numbers between two given numbers inclusive.,"def printPrimeNumbers(start, end):
 for num in range(start, end+1):
 # base case
 if num > 1: 
 for i in range(2, num): 
 if (num % i) == 0: 
 break
 else: 
 print(num) 

# Driver Code 
start = 15
end = 25

printPrimeNumbers(start, end) 

# Output:
# 17 
# 19 
# 23 
# 25"
Create a Python program to remove all duplicate elements from a list and preserving the original order.,"# Program to remove duplicate elements

def remove_duplicates(nums):
 new_list = []
 for num in nums:
 if num not in new_list:
 new_list.append(num)
 
return new_list

# Main program
nums = [1, 3, 3, 5, 5, 7]
dedup_nums = remove_duplicates(nums)
print(dedup_nums) # [1, 3, 5, 7]"
"Given three numbers, write a Python program that prints the largest among them.","def max_of_three(x, y, z):
    max_num = x
    if y > max_num:
        max_num = y
    if z > max_num:
        max_num = z
    return max_num"
Develop a function in python to delete all the vowels in a string.,"def remove_vowels(string):
    vowels = 'aeiou'
    new_string = ''

    for c in string:
        if c.lower() not in vowels:
            new_string += c
    
    return new_string

if __name__ == '__main__':
    string = ""Beau tiful""
    print(remove_vowels(string))"
Construct a program to filter out empty strings from a given list.,"def remove_empty_strings(lst):
    filtered_list = []
    for item in lst:
        if item != """":
            filtered_list.append(item)
    return filtered_list

filtered_list = remove_empty_strings([""Hello"", """", ""Python"", ""World"", """"])
print(filtered_list)"
Create a python program to check the following string for palindrome,"def check_palindrome(string):
  rev_str = string[::-1]
  if rev_str == string:
    return ""The string is a palindrome""
  return ""The string is not a palindrome""

print(check_palindrome(""madam""))"
Write a code snippet in Python which takes an array and returns the list of its square root values.,"[math.sqrt(x) for x in [2, 4, 9]]"
Write a function to convert the given tuple to a floating-point number.,"def tuple_to_float(test_tup):
  res = float('.'.join(str(ele) for ele in test_tup))
  return (res) "
Modify the following Python program to calculate the factorial of a given number.,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)

num = 5
print(f""The factorial of {num} is {factorial(num)}"")"
Use a GPT model to generate a Python function for calculating the area of a triangle.,"def area_of_triangle(base, height):
 return 0.5 * base * height

# Calculate the area of triangle
a = area_of_triangle(5, 4)
print('The area of the triangle is: ', a)"
Create a Python script to randomly generate a character from a given list of characters.,"import random

char_list = ['A', 'B', 'C', 'D']
random_char = random.choice(char_list)
print(random_char)"
"Using any programming language of your choice, write a calculator program that takes in two integers and returns the result of the addition operation.","// Java
public int Add(int a, int b) {
  return a + b;
}

// Python
def add(a, b):
  return a + b"
Generate a Python function to classify the given list of numbers into two subgroups (positives and negatives).,"def classify_numbers(list):
    '''This function will classify the list of numbers into positives and negatives'''

    positives = []
    negatives = []

    for n in list:
        if n >= 0:
            positives.append(n)
        else:
            negatives.append(n)

    return positives, negatives"
Create a Python script to calculate the Fibonacci numbers up to a given number.,"def Fibonacci(n): 
	if n==0: 
		return 0
	if n==1: 
		return 1
	else: 
		return Fibonacci(n-1)+Fibonacci(n-2)"
"Write an Python script to extract the year, month and day from a given date in the format ""dd/mm/yyyy"".","import datetime

date_string = ""27/09/2017""

date_object = datetime.datetime.strptime(date_string, ""%d/%m/%Y"")

print(""Year:"", date_object.year)
print(""Month:"", date_object.month)
print(""Day:"", date_object.day)"
Generate a Python script to sort a 2D array of integers by the second column.,"def sort_2d_arr(arr):
    arr.sort(key = lambda x : x[1])
    return arr

print(sort_2d_arr([[1, 10], [5, 5], [4, 8]]))

# Output
[[5, 5], [4, 8], [1, 10]]"
Design a Python program to generate a multiplication table for the numbers from 1 to 10.,"def multiplicationTable(n): 
    for i in range(1, 11): 
        print(n, 'x', i, '=', n*i) 
       
# Driver Code 
n = 9
multiplicationTable(n)"
Create a function in Python that takes a list of strings and checks if any of the strings are palindromes.,"def check_palindrome(string_list):
    for string in string_list:
        if string == string[::-1]:
            return True
    return False

result = check_palindrome([""civic"", ""apple"", ""racecar""])
print(result)"
Concatenate two strings using Python,"string1 + string2

result = string1 + string2
print(result)"
Write a Python program to remove unnecessary punctuation marks from a string.,"#Function to remove all punctuations from a string
def remove_punctuations(text): 
    for punctuation in '!""#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~':
        text = text.replace(punctuation, '')
    return text
 
#input string
str = ""It's a pleasure to meet you!!!""
 
#calling the function
result = remove_punctuations(str)
 
#printing the result
print(result)"
Write a function to find the surface area of a cube.,"def surfacearea_cube(l):
  surfacearea= 6*l*l
  return surfacearea"
Write a function to calculate the height of the given binary tree.,"class Node: 
	def __init__(self, data): 
		self.data = data 
		self.left = None
		self.right = None
def max_height(node): 
	if node is None: 
		return 0 ; 
	else : 
		left_height = max_height(node.left) 
		right_height = max_height(node.right) 
		if (left_height > right_height): 
			return left_height+1
		else: 
			return right_height+1"
Rewrite the following code snippet to use the generator in Python.,"def squares_up_to_n(n):
  for i in range(n):
    yield i**2"
Develop a Python program to search an element in a list using linear search.,"def linear_search(list, element):
    for i in range(len(list)):
        if list[i] == element:
            return i
    return -1

index = linear_search([25, 10, 5, 2, 50], 50)
if index < 0:
    print(f""{element} not found in the list"")
else:
    print(f""{element} found at index {index}"")"
Generate a random upper-case letter using Python.,"import random

def get_random_uppercase_letter():
    return chr(random.randint(65,90))

if __name__ == '__main__':
    print(get_random_uppercase_letter())"
Create a function in Python to generate a random username using a list of provided names.,"import random

def generate_username(names):
    username = random.choice(names)
    username += str(random.randint(0, 100))
    return username

# Generate a random username
username = generate_username(names)
print(username)

# Output
Alice54"
Create a simple Python class that captures the number of clicks a user makes on a given button.,"class ClickCounter:
    def __init__(self):
        self.click_count = 0

    def record_click(self):
        self.click_count += 1

    def get_click_count(self):
        return self.click_count"
Create a Python dictionary that stores the number of occurrences of each character in a string.,"def countCharacters(s):
  # Create empty dictionary 
  chars_dict = {}
  
  # Iterate over each character in the string
  for char in s:
    # If the character is not in the dictionary, set the value to 1
    if char not in chars_dict:
      chars_dict[char] = 1
    # Otherwise, increment the value
    else:
      chars_dict[char] += 1
  
  return chars_dict"
"Create a Python program to calculate the total cost of an item given its price, number of pieces, and tax rate.","def calc_cost(price, pieces, tax_rate):
    cost = price * pieces
    cost += cost * tax_rate
    return cost

price = 10
pieces = 4
tax_rate = 0.1

total_cost = calc_cost(price, pieces, tax_rate)
print('Total cost:', total_cost)"
Create a Python program to remove all characters from a given string except for letters and whitespaces,"def remove_non_letter_characters(s): 
    return """".join(e for e in s if e.isalpha() or e == "" "") 
      
s = 'Hello $% World'
print(remove_non_letter_characters(s))"
Write a command line script to calculate the total number of people who attended a concert.,"#!/usr/bin/env python

import csv

total_attendees = 0
with open('attendance.csv', 'r') as csv_file:
    csv_reader = csv.reader(csv_file)
    for row in csv_reader:
        total_attendees += 1

print(f'Total Attendees: {total_attendees}')"
Build a basic web server using Python.,"import http.server
import socketserver

PORT = 8080

Handler = http.server.SimpleHTTPRequestHandler

with socketserver.TCPServer(("""", PORT), Handler) as httpd:
    print(""serving at port"", PORT)
    httpd.serve_forever()"
Create a class for a student in Python,"class Student:
    def __init__(self, name, age, course):
        self.name = name
        self.age = age
        self.course = course
    
    def getCourse(self):
        return self.course"
"Create a program in Python that takes two parameters, a string and an integer, and returns the string repeated that many times.","def repeat_string(string, n):
    repeated_string = string * n
    return repeated_string

print(repeat_string(""Hello"", 4))"
Write a Python program to ask the user for an input and then calculate the factorial of that number.,"num = int(input('Enter an integer: '))
factorial = 1

if num < 0:
   print(""Sorry, factorial does not exist for negative numbers"")
elif num == 0:
   print(""The factorial of 0 is 1"")
else:
   for i in range(1,num + 1):
       factorial = factorial*i
   print(""The factorial of"",num,""is"",factorial)"
Create an API in Python for predicting the sentiment of a given text.,"import requests

def predict_sentiment(text):
    data = {'query': text}
    _URL = ""http://localhost:5000/sentiment-prediction""
    response = requests.post(url = _URL, data = data)
    return response.json()
    
sentiment = predict_sentiment(""This is an example sentence"")
print(sentiment)"
Create a program in Python that has a list of 5 different computer languages and prints out each one in a separate line.,"languages = [""Python"", ""C++"", ""Java"", ""Javascript"", ""Ruby""]

for language in languages:
    print(language)"
Create a Python program that can encrypt a string using the RSA asymmetric algorithm.,"# Imports
from Crypto.PublicKey import RSA

# Generate an RSA key pair
key = RSA.generate(2048)

# Retrieve the public key
public_key = key.publickey()

# Encrypt the message using the public key
def encrypt_message(message):
	encrypted_message = public_key.encrypt(message, 32)
	return encrypted_message"
Edit this code snippet in Python to remove any errors and improve readability.,"def remove_arr(arr):
    result = []
    for a in arr:
        if a != 'b':
            result.append(a)
    return result"
Can you make the following string lowercase using Python?,"""""""
Make the given string lowercase using Python
""""""

test_string = ""This is a TEST string!""

lowercase_string = test_string.lower()

print(lowercase_string) # prints ""this is a test string!"""
Create a loop in Python to print out all the odd numbers from 1 to 10.,"for i in range(1, 11):
    if i % 2 != 0:
        print(i)"
Write a Python program to display all prime numbers less than a specified number.,"def is_prime(n):
 if n <= 1:
 return False
 for i in range(2, int(n**0.5) + 1):
 if n % i == 0:
 return False
 return True

def find_prime_numbers(n):
 primes = []
 for i in range(2, n + 1):
 if is_prime(i):
 primes.append(i)
 return primes"
"Write a function in Python that takes two parameters, an integer and a list of strings, and returns a modified list of strings.","def modified_list(num, lst):
    modified_list = []
    for item in lst:
        modified_list.append(str(num) + item)
    return modified_list
    
print(modified_list(2, [""Hello"", ""World""]))
# Output: [""2Hello"", ""2World""]"
Construct a for loop in Python to print all even numbers from 3 to 10.,"for i in range(3, 11):
    if(i % 2 == 0):
        print(i)"
"Rewrite the following Python code snippet to use list comprehension:

items = []
for item in range(10):
 items.append(item)",items = [item for item in range(10)]
Write a Python program to generate all subsets of a given set.,"def generate_subset(input_set):
    subsets = [[]]
 
    for elem in input_set:
        n = len(subsets)
        for i in range(n):
            current_subset = subsets[i]
            subsets.append(current_subset + [elem])
 
    return subsets"
Write a Python program to generate a dataframe from a given JSON response.,"import pandas as pd

json_data = {""name"": ""John"", ""age"": 30, ""job"": ""Engineer"", ""salary"": 5000}

# Convert the data into a dataframe
df = pd.DataFrame(json_data, index=[0])

print(df)"
Generate a python program that takes a list of names and prints the longest name.,"def get_longest_name(names):
    longest_name = """"
    max_length = 0

    for name in names:
        if len(name) > max_length:
            longest_name = name
            max_length = len(name)

    return longest_name

longest_name = get_longest_name([""John"", ""Mark"", ""Kelly"", ""Cindy"", ""Dylan""]) 
print(longest_name)"
Write a python function to toggle all odd bits of a given number.,"def even_bit_toggle_number(n) : 
    res = 0; count = 0; temp = n    
    while(temp > 0 ) : 
        if (count % 2 == 0) : 
            res = res | (1 << count)      
        count = count + 1
        temp >>= 1 
    return n ^ res "
Write a Python code to create a dictionary which contains a data structrue in the form of [x:x^2] where x is the key and x^2 is the value.,"numbers = [1, 2, 3, 4, 5] 

dict_numbers = {num: num**2 for num in numbers}
print(dict_numbers)"
Create a script to join two given strings if they have compatible characters.,joined_string = 'Programmingpython'
Utilize a for loop in Python to print all numbers from 0 to 9,"for i in range(10):
  print(i)"
"In Python, write a function that takes a string as input and reverses it.","def reverseString(text):
    return text[::-1]
 
result = reverseString(""Hello World!"")
print(result)"
Generate a correct python program to identify a particular character in a string.,"def char_in_string(char, string):
    for c in string:
        if c == char:
            return True
    return False"
Generate a Python function to find the RMS (root mean square) of a list of numbers.,"def rms(lst):
 sum_sq = 0
 for n in lst:
  sum_sq += n*n
 return (sum_sq/len(lst))**0.5"
Write a Python program that inputs two numbers and prints out their GCD (greatest common divisor).,"a = 90
b = 28

while(b > 0):
  temp = b 
  b = a % b
  a = temp 

print (""The GCD is"",a)"
Write a Python program to print the number of prime numbers that exist within a given range.,"def primeCounet(start, end):
    count = 0
    for num in range(start, end + 1): 
        if num > 1: 
            for i in range(2, num): 
                if (num % i) == 0: 
                    break 
            else: 
                count = count + 1
    return count

if __name__ == ""__main__"":
    start = 10
    end = 30
    print(primeCounet(start, end))"
Write a Python program to search for a given string in a list of strings and return the index of the first occurrence of that string.,"def search_string(lst, s):
 for i, item in enumerate(lst):
 if item == s:
 return i
 return -1"
Write a function in Python that takes in a string and then reverses each word in the string.,"def reverse_words(s):
  words = s.split()
  reversed_words = [word[::-1] for word in words]
  return ' '.join(reversed_words)

string = ""This is a string""
print(reverse_words(string))
// Output: sihT si a gnirts"
Write a loop to multiply all the numbers from 1 to 5 in Python.,"multiply = 1
for x in range(1,6):
 multiply = multiply * x

print(multiply)"
Write a python function to check whether the count of inversion of two types are same or not.,"import sys 
def solve(a,n):   
    mx = -sys.maxsize - 1
    for j in range(1,n):  
        if (mx > a[j]):  
            return False  
        mx = max(mx,a[j - 1])    
    return True"
Create a function in Python to determine whether a given string contains any whitespace character.,"def hasWhitespace(string):
 for c in string:
  if c.isspace():
   return True
 return False

print(hasWhitespace(""Hello World""))"
Write a Python function that computes the average of a given array of numbers.,"def find_average(numbers):
 return sum(numbers) / len(numbers)"
Generate a function in Python that finds the max element in a given list.,"def maxElement(arr):
    return max(arr)

array = [2, 78, 34, 55]

print(maxElement(array)) # 78"
Write a Python program to add two numbers given in string format.,"def addStringNumbers(num1,num2): 
    return int(num1) + int(num2)"
Create an optimizer tool in Python to find the maximum of a given set of inputs.,"def max_optimizer(input_list):
    maximum = max(input_list)
    return maximum"
Write a function to concatenate each element of tuple by the delimiter.,"def concatenate_tuple(test_tup):
    delim = ""-""
    res = ''.join([str(ele) + delim for ele in test_tup])
    res = res[ : len(res) - len(delim)]
    return (str(res)) "
Write a Python function to convert all strings in a list to lower case.,"def to_lower(arr): 
    return [item.lower() for item in arr] 

result = to_lower(list) 
print(result) 

# output 
['hello', 'friends', 'world']"
Generate a python code to print a triangle of stars with a given number of rows.,"def print_triangle(rows):
    """"""
    This function prints a triangle of stars with a given number of rows.
    
    Parameters:
    rows (int): The number of rows
    
    Returns:
    None
    """"""
    
    for i in range(rows):  
        for j in range(i+1): 
            print(""* "", end="""")
        print('\r')"
Create a function in Python for recursively flattening a nested list,"def flatten(lst):
 flat_list = []
 for x in lst:
 if type(x) == list:
 flat_list.extend(flatten(x))
 else:
 flat_list.append(x)
 return flat_list

sample_list = [[1, 2], [3, [4, 5]]]
print(flatten(sample_list))

# Output: [1, 2, 3, 4, 5]"
Create a Python program to compare two strings and return the percentage of characters that match.,"def compare_strings( string1, string2 ):
    s1, s2 = set(string1), set(string2)
    intersection = s1.intersection(s2)

    return (len(intersection) * 100) / len(s1)"
Write a basic web scraper in Python using the BeautifulSoup library. The scraper should take as input a URL and output the text on the page.,"import requests
from bs4 import BeautifulSoup

url = ""https://en.wikipedia.org/wiki/Web_scraping"" 
response = requests.get(url)
soup = BeautifulSoup(response.text, 'html.parser')

text = soup.find_all('p')
for t in text:
    print(t.text)"
Develop a function in Python to generate a random list of numbers with no duplicates.,"import random

def random_list(size):
    output = []
    while len(output) < size:
        n = random.randint(1,100)
        if n not in output:
            output.append(n)
    return output

print(random_list(10))"
Write a Python program to Create a class called Vector with two methods to add and subtract vectors.,"class Vector:
 def __init__(self, x, y):
  self.x = x
  self.y = y

 def __add__(self, other):
  return Vector(self.x + other.x, self.y + other.y)

 def __sub__(self, other):
  return Vector(self.x - other.x, self.y - other.y)

v1 = Vector(2, 4)
v2 = Vector(4, 6)
v3 = v1 + v2
print(v3.x, v3.y) # 6, 10
v4 = v1 - v2
print(v4.x, v4.y) # -2, -2"
How do you find the length of a string in Python?,"We can use the built-in len() function to find the length of a string in Python. The len() function takes the string as an argument and returns the length of the string, i.e. the number of characters in the string.

Example:

string = ""Hello""
string_length = len(string)

print(string_length) #Output: 5"
"Given a list, convert it to a dictionary using Python.","list_1_dict =dict() 
for i in range(len(list_1)): 
    list_1_dict[i] = list_1[i] 
print(list_1_dict)"
Generate a Python program to calculate the maximum possible sum of a sub-array in an array of integers.,"def max_subarray_sum(arr):
    current_sum = 0
    max_sum = 0

    for x in arr:
        current_sum += x
        if current_sum < 0:
            current_sum = 0
        if current_sum > max_sum:
            max_sum = current_sum
    return max_sum

result = max_subarray_sum([-2, 4, -1, 5, 6])
print(result)"
Add a function to a python program that returns the maximum value in a list of integers.,"def max_val(arr):
    max_val = 0
    for num in arr:
        if num > max_val:
            max_val = num
    return max_val"
Create code in Python to check the right-hand side of a list and remove any elements which are divisible by 3.,"arr = [12, 15, 8, 10]
arr[:] = [x for x in arr if x % 3 != 0]"
Develop an algorithm in Python to find the middle element of a given linked list.,"# Function to get the middle of the linked list 
def getmiddle(head): 
    if(head == None): 
        return head 
  
    slow_ptr = head 
    fast_ptr = head 
  
    while(fast_ptr != None and fast_ptr.next != None): 
        slow_ptr = slow_ptr.next
        fast_ptr = fast_ptr.next.next
  
    return slow_ptr"
Write a Python program to print all the divisors of a give number n.,"def divisors(n):
    for i in range(1,n+1):
        if n % i == 0:
            print(i)

n = 15
divisors(15)
# Output: 1 3 5 15"
Create a Python program to take an array of integers and calculate the sum of squares of all numbers provided in the array.,"def sum_squares(arr):
    total = 0
    for num in arr:
        total += num ** 2
    return total

arr = [2, 3, 4]

total = sum_squares(arr)
print(total) # 29"
Create a function to remove duplicates from an array with Python.,"def remove_duplicates(arr): 
    result = [] 
    seen = set() 
   
    for item in arr: 
        if item not in seen: 
            seen.add(item) 
            result.append(item) 
    return result"
Implement a function in Python that takes a list of integers and a number and returns a list of numbers that have the given number as their sum.,"def find_combos(lst, num):
 result = []
 for i in range(len(lst)):
 for j in range(i+1, len(lst)):
 if lst[i] + lst[j] == num:
 result.append([lst[i], lst[j]])
 return result

print(find_combos([1, 2, 3, 4], 4))

# Output: [[1, 3], [2, 2], [3, 1]]"
Generate a Python script to detect if a linked list contains a loop,"def contains_loop(head):
    slow_pointer = head
    fast_pointer = head

    while slow_pointer and fast_pointer and fast_pointer.next:
        slow_pointer = slow_pointer.next
        fast_pointer = fast_pointer.next.next
        if slow_pointer == fast_pointer:
            return True

    return False"
Generate a Python program to solve cube root of the input number.,"def cube_root(x):
    res = 0
    while (res*res*res < abs(x)):
        res += 1
  
    if (res*res*res != abs(x)):
        print(""Not a perfect cube"")
    else:
        if (x < 0):
            res = -res
        print(""Cube root of "" + str(x) + "" is "" + str(res))

cube_root(25)"
Generate a function in Python to populate a dictionary data-structure with a list of numerical values.,"def populateDict(lst):
    my_dict = {}
    for i in lst:
        my_dict[i] = i
    return my_dict

my_numbers = [1, 2, 3, 4, 5]
my_dict = populateDict(my_numbers)
print(my_dict)"
Create a class in python that has three attributes and two methods,"class MyClass:
    def __init__(self, a, b, c):
        self.a = a
        self.b = b
        self.c = c
    
    def add(self):
        return self.a + self.b + self.c
    
    def multiply(self):
        return self.a * self.b * self.c"
Create a program in Python that takes in a list of strings and returns the longest common substring between all the strings.,"def longest_common_substring(strs):
 substr = strs[0]
 for s in strs[1:]:
 i = 0
 while i < min(len(substr), len(s)) and substr[i] == s[i]:
 i += 1
 substr = substr[:i]
 
 return substr

print(longest_common_substring([""hello"", ""hi"", ""hell""])) # Prints ""hell"""
Create an algorithm to convert temperatures from Celsius to Fahrenheit in Python.,"def celcius_to_fahrenheit(temp):
    return ((temp*9/5) + 32)

print(celcius_to_fahrenheit(20))"
Create a Python program to generate a random username. The username should consist of two random words joined with an underscore.,"import random

words = ['cat', 'dog', 'mouse', 'elephant', 'tiger', 'lion',
 'giraffe', 'hippo', 'monkey', 'zebra']

username = random.choice(words) + '_' + random.choice(words)

print('Username: ' + username)"
Create a loop using Python that prints the numbers from 0 to 10 and stops if the number is 8.,"for i in range(11):
    if i == 8:
        break 
    else:
        print(i)"
Create a program to calculate the Fibonacci number for a given number using Python.,"def Fibonacci(n): 
    if n<0: 
        print(""Incorrect input"") 
    # First Fibonacci number is 0 
    elif n==1: 
        return 0
    # Second Fibonacci number is 1 
    elif n==2: 
        return 1
    else: 
        return Fibonacci(n-1)+Fibonacci(n-2) 
  
# Driver Program 
print(Fibonacci(9))"
Debug a Python function that swaps the values of two variables.,"def swap(x, y):
 temp = x
 x = y
 y = temp

a = 10
b = 20

swap(a, b)

#Verify the result
if a == 20 and b == 10:
 print(""Swap successful"")
else:
 print(""Swap unsuccessful"") # Output: Swap successful"
Write a Python program to remove all whitespace from a string.,"text_without_whitespace = """".join(text.split())"
Write a function in Python that takes in two strings of the same length and returns the number of different characters in the two strings.,"def diff_char(str1, str2):
 count = 0
 for i in range(len(str1)):
 if str1[i] != str2[i]:
 count += 1
 return count"
Design a Python algorithm to sort the elements of a given array by insertion sorting.,"def insertionSort(array):
    """"""Algorithm to sort an array using insertion sort.""""""
    for j in range(1,len(array)):
        key = array[j]
        i = j-1
        while i >= 0 and array[i]> key:
            array[i+1] = array[i]
            i-=1
        array[i+1] = key"
Write a Python program to create a list of odd numbers between x and y.,"# Generate a list of odd numbers between x and y
def odd_numbers(x, y):
  # Initialize an empty list 
  odd_list = [] 
  
  # Loop through the range
  for i in range(x, y): 
    # If the number is odd
    if (i % 2 != 0): 
      odd_list.append(i)
  
  return odd_list 
  
x = 3
y = 10

# Get the list of odd numbers
odd_list = odd_numbers(x, y)

# Print the list
print(odd_list)"
Write a Python script to find out the sum of all the divisors of a given number.,"def divisor_sum(n):
    sum = 0
    for i in range(1, n+1):
        if n % i == 0:
            sum += i
    return sum

n = 16
result = divisor_sum(n)
print(result)"
Generate a Python program to search for a particular string in a given dictionary?,"def search_string(dict, keyword):
    # iterate through the dictionary
    for key, value in dict.items():
        # check if the keyword is present in the value of the dictionary
        if keyword in value:
            return key
    # if keyword not found in dictionary
    return ""Not found"""
Create a Python program to calculate the sum of all digits of a number,"def sum_digits(number):
    total = 0
    while number > 0:
        total += number % 10
        number //= 10
    return total

print(""Sum of digits:"",sum_digits(2345))"
Write a python program which will show the number of even numbers in a list.,"def count_even_numbers(list):
    count = 0
    for num in list:
        if num % 2 == 0:
            count += 1
    return count"
Suggest a way to make this Python function more efficient:,"def divide(nums):
    return [num for num in nums if num % 2 == 0]"
Create a function in Python which takes in two strings and concatenates them into one.,"def concat_string(str1, str2):
    return str1 + str2"
Write a Python function that takes a string as an argument and returns a string with all characters sorted in alphabetical order.,"def sort_string(string):
 sorted_string = sorted(string)
 return ''.join(sorted_string)"
Generate a python program to calculate the number of elements in a set.,"# calculate the number of elements in a set

my_set = {1, 2, 3, 4, 5}
num_elements = len(my_set)

print(""Number of elements in the set:"", num_elements)"
Write a Python code for sorting a list of integers in ascending order.,"list=[5,2,7,3,1]
list.sort()
print(list)"
Develop a function in Python to print the first 10 Fibonacci numbers.,"def printFibo(n): 
    a = 0
    b = 1
    
    if n < 0: 
        print(""Incorrect input"") 
    elif n == 0: 
        print(a) 
    elif n == 1: 
        print(b) 
    else: 
        print(a)
        print(b)
        for i in range(2,n): 
            c = a + b 
            a = b 
            b = c 
            print(b)
        
printFibo(10)"
"Create a Python function to classify a given string as a Positive, Negative, or Neutral sentiment.","def classify_sentiment(string):
 if 'positive' in string:
  return 'Positive' 
 elif 'negative' in string:
  return 'Negative' 
 elif 'neutral' in string:
  return 'Neutral'
 else:
  return 'Unknown'

sentiment = classify_sentiment(""This is an amazing service."")
print(sentiment) # Positive"
"Develop a Python program that takes an array of strings, and returns an object that contains the frequency of each string in the array.","def count_frequency(arr):
    freq_dict = {}
    for ele in arr: 
        if ele in freq_dict: 
            freq_dict[ele] += 1
        else: 
            freq_dict[ele] = 1
    return freq_dict

arr = ['a', 'a', 'b', 'a', 'c', 'a']
result = count_frequency(arr)

print(result) # Output: {'a': 4, 'b': 1, 'c': 1}"
Generate an array with 20 random unique numbers from 1 to 100 in Python.,"import random

random_numbers = []

while len(random_numbers) < 20:
    n = random.randint(1, 100)
    if n not in random_numbers:
        random_numbers.append(n)

print(random_numbers)"
Construct a program in Python to find all the possible substrings of a given string.,"def find_substrings(string): 
  
    # Create an empty list to store all the possible substrings
    substrings = [] 
  
    # Iterate through each character of the string
    for i in range(len(string)): 
        for j in range(i, len(string)): 
            substrings.append(string[i: j + 1]) 
  
    return substrings"
"Create a Python script to normalize numerical data. The script should take a list of numbers as an input, and returns a normalized list of numbers.","import numpy as np

def normalize(data):
 return np.divide(data, np.linalg.norm(data))

data = [1, -2, 7, 5, 2]
print(normalize(data))

# Output
[ 0.1245256  -0.2490512  0.8736233  0.6207616  0.2490512]"
Design a Python program to detect loops in a linked list.,"def detectLoop(head): 
        slow_p = head 
        fast_p = head
          
        while(slow_p and fast_p and fast_p.next): 
            slow_p = slow_p.next
            fast_p = fast_p.next.next
            if slow_p == fast_p: 
                return True
              
        return False"
Create a program in Python to multiply all numbers in a list by a given number and return the result as a new list.,"def multiplyListByNumber(list, number):
  return [element*number for element in list]"
Design a program using the Python language to calculate the average cost of a given list of items.,"def calculate_average(items):
 sum = 0
 for item in items:
  sum += item
 
 return sum / len(items)

items = [2.15, 3.35, 6.25, 8.25]

average = calculate_average(items)

print(""Average cost: $"" + str(round(average, 2)))"
Write a Python program to print out the Fibonacci series up to n numbers where n is a user input.,"# Python Program to print the Fibonacci series up to n numbers

n = int(input(""Enter the value of 'n': ""))

# first two numbers
a = 0
b = 1

print(""Fibonacci Series:"") 
print(a, b, end="" "") 
  
for i in range(2,n):
               
    c = a + b
    a = b
    b = c
    print(c, end = "" "")
    
print()"
Write a python program to parse a JSON array of objects.,"import json
arr = json.loads('[{""name"":""Bob"",""age"":30,""city"":""New York""}, {""name"":""Alice"",""age"":27,""city"":""San Francisco""}]')
for obj in arr:
    print(""Name:"", obj[""name""])
    print(""Age:"", obj[""age""])
    print(""City:"", obj[""city""])
    print()"
Create a python program to generate a random number from 0 to 100.,"import random

random_num = random.randint(0,100)
print(random_num)"
Generate a Python code to print all the permutations of an array.,"def permutation(arr):
    if not arr:
        return []
    elif len(arr) == 1:
        return [arr]
    else:
        l = []
        for i in range(len(arr)):
            data = arr[i]
            remainders = arr[:i] + arr[i+1:]
            for p in permutation(remainders):
                l.append([data] + p)
        return l"
Generate a random number between 0 and 5 using the Python Random module.,"import random

num = random.randint(0, 5)
print(num)"
Create a RESTful API using Python and Flask.,"from flask import Flask, jsonify, request
from flask_restplus import Api, Resource, fields

# Create and configure the Flask app
app = Flask(__name__)
api = Api(app)

# Define the endpoints
@api.route('/employees', methods=['GET'])
def get_employees():
    # Return a list of all employees
    ...

# Run the Flask app
app.run(host='localhost', port=5000)"
Write a Python program to convert a given integer to binary representation.,"def int_to_bin(int_num):
 bin_str = bin(int_num)
 return bin_str[2:]

int_num = 30
bin_num = int_to_bin(int_num)
print(bin_num) # 11110"
Create an algorithm in Python that takes a list of strings and returns a list of strings with the duplicates removed.,"def remove_duplicates(list_of_strings):
  unique_strings = set(list_of_strings)
  return list(unique_strings)"
What is the smallest possible code in Python to read the value of an item in a given dictionary?,"dictionary = {""key"": ""value""}
value = dictionary[""key""]"
Can you create a Python program to find prime numbers within a given range?,"def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, n):
        if n % i == 0:
            return False
    return True


def find_prime_numbers(a, b):
    result = []
    for num in range(a, b + 1):
        if is_prime(num):
            result.append(num)
    return result


start = 2
end = 20
print(find_prime_numbers(start, end))"
Create a Python program to sort a dictionary in order of the values.,"# using lambda function to sort the dictionary  
sorted_by_value = sorted(dictionary.items(), key = lambda kv: kv[1]) 
  
# printing the dictionary sorted by value 
print(sorted_by_value)"
Develop a Python program to calculate the sum of two integers provided as command line arguments.,"import sys

# Get the command line arguments
a = int(sys.argv[1])
b = int(sys.argv[2])

# Calculate the sum
sum = a + b

# Print the result
print(sum)"
Create a class in Python that takes two arguments a 'name' and 'age' and returns a greeting.,"class Greeting:
    def __init__(self, name, age):
        self.name = name
        self.age = age
    
    def get_greeting(self):
        return f""Hello, my name is {self.name} and I am {self.age} years old."""
Design a Python program that takes two integers as input and finds the greatest common divisor of them.,"def find_gcd(a, b):
    if a == 0:
        return b
    if b == 0:
        return a

    if a > b:
        a, b = b, a
    
    while a != 0:
        b, a = a, b%a
        
    return b

print(find_gcd(12, 18))"
Generate code in Python to traverse a tree in pre-order.,"def preOrder(tree):
    # Root
    print(tree.data)
  
    # Left
    if tree.left is not None:
        preOrder(tree.left)
  
    # Right
    if tree.right is not None:
        preOrder(tree.right)"
Write a Python program to edit the given JSON string using the given selection criteria.,"import json

json_str = '{ ""name"": ""Alice"", ""role"": ""programmer"", ""department"": ""engineering"" }'

data = json.loads(json_str)

data[""department""] = ""marketing""

json_str = json.dumps(data)

print(json_str)"
"Generate a list of the binomial coefficients for a given value of ""n"" using a Python function.","def binomial_coefficient(n):
  coefficient = []
  for k in range(n+1):
    coefficient.append(int(math.factorial(n) / 
                        (math.factorial(k) * math.factorial(n - k))))
  return coefficient"
Design a python program to replace every occurrence of a word in a string with another word.,"def replace_word(string, word, replacement_word):
    return string.replace(word, replacement_word)

print(replace_word(""Hello hello world!"", ""hello"", ""welcome""))"
"Write a Python program to create a new string from a given string, where the first and last chars have been exchanged.","def exchange_first_last(str1):
  str2 = """" 
  str2 = str1[-1] + str1[1:-1] + str1[0]
  return str2

print(exchange_first_last('Hello'))"
Generate a code to generate the Fibonacci sequence until the nth number using the Python programming language,"def fibonacci(n):
  if n < 0: 
    raise ValueError(""Invalid input"")
  elif n == 0:
    return 0 
  elif n == 1: 
    return 1
  else: 
    return fibonacci(n-1) + fibonacci(n-2)
  
fibonacci_sequence = [fibonacci(i) for i in range(5)]
print(fibonacci_sequence)"
Write a function to find t-nth term of arithemetic progression.,"def tn_ap(a,n,d):
  tn = a + (n - 1) * d
  return tn"
Evaluate the following expression using Python 3: (2*3 - 6) / (4 + 8).,"result = (2*3 - 6) / (4 + 8)
print(result)
# - 0.25"
Write a Python code that gives the output of all possible combinations of given elements.,"from itertools import combinations

input_list = [1, 2, 3]
result = list(combinations(input_list, 3))

for combination in result:
    print(combination)"
Write a Python script to implement a linear search algorithm.,"def linear_search(data, key):
    for i in range(len(data)):
        if data[i] == key:
            return i
    return -1

data = [5, 4, 2, 8, 7]
key = 7

result = linear_search(data, key)

if result != -1:
    print(""Element found at "" + str(result))
else:
    print(""Element not found"")"
Create an optimization problem in Python to optimize the function.,"import numpy as np
from scipy.optimize import minimize
def f(x):
    x, y = x
    return x + y**2

x0 = np.array([0,0])
res = minimize(f, x0, method='nelder-mead')
print(res.x)"
Edit this Python function to return the result with two decimal points.,"def area_of_circle(radius):
    return round(3.14 * radius * radius, 2)"
Design a loop in a Python program to print the Fibonacci series up to the nth term.,"def fibonacci(n): 
    a = 0
    b = 1
    if n < 0: 
        print(""Incorrect input"") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2,n): 
            c = a + b 
            a = b 
            b = c 
        return b 
print(fibonacci(n))"
Design a Python program to find the number of valid parentheses combinations.,"def find_valid_parens_combinations(n):
   if n == 0:
      return 0

   if n == 1:
      return 1

   combinations = 0
   for i in range(1, n, 2):
      left  = i
      right = n - i

      combinations += find_valid_parens_combinations(left) * find_valid_parens_combinations(right)

   return combinations"
"Write a PostgreSQL query that returns the title and author of all blog posts with the keyword ""Python"".","SELECT title, author
FROM BlogPost
WHERE content LIKE '%Python%';"
"Write a python program to generate random passwords. The passwords should include letters, numbers, and symbols.","import random
import string

def generate_password():
 char_list = list(string.ascii_letters + string.digits + string.punctuation)
 random.shuffle(char_list)
 return ''.join(char_list[:20])

print(generate_password())"
Create a Python package that contains a collection of functions for finding the average value of an array.,"def average(array):
 '''
 Finds the average of all numbers in an array

 Args:
 array (list): List of numbers

 Returns:
 float: The average of all values in the array
 '''

 total = 0
 for value in array:
 total += value

 return total / len(array)"
Write a Python program to replace all the vowels in the given string with '_'.,"def replace_vowels(string):
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    res = []
    for letter in string.lower():
        if letter in vowels:
            res.append('_')
        else:
            res.append(letter)
    return ''.join(res)"
Design a function in Python to find the most repeated character in a string.,"def most_repeated_character(my_string):
    counts = Counter(my_string)
    max_char = max(counts, key=counts.get)
    return max_char

print(""Most repeated character:"", most_repeated_character(my_string))"
"Given a list of strings, write a Python program to sort the strings according to the length of each string.","def sort_strings_by_length(strings):
  return sorted(strings, key=len)"
Optimize the following Python code to remove unnecessary operations or code.,"def count(list_data):
    return sum(list_data)"
Create a Python script that takes an array with n elements and shuffles it.,"import random

def shuffle(lst):
    random.shuffle(lst)
    return lst

arr = [i for i in range(10)]
print(shuffle(arr))"
Develop a function in Python to generate a random number between 1 and 10.,"import random
  
# Function to generate a random number between 1 and 10
def random_num(): 
    number = random.randint(1, 10) 
    return number 
  
# Driver code 
num = random_num() 
print(""Random number between 1 and 10 is: "", num)"
Write a function to find the largest integers from a given list of numbers using heap queue algorithm.,"import heapq as hq
def heap_queue_largest(nums,n):
  largest_nums = hq.nlargest(n, nums)
  return largest_nums"
Create a class in Python that simulates a timer object.,"class Timer:
  def __init__(self):
    self.start_time = 0
    self.end_time = 0
    
  def start(self):
    self.start_time = time.time()
    
  def end(self):
    self.end_time = time.time()

  def elapsed(self):
    return self.end_time - self.start_time"
Create a python function to find out if an item exists in a given list.,"def is_item_in_list(item, my_list):
    '''This function checks if an item exists in a given list and returns a boolean value.
    Parameters
    ----------
    item: The item to be checked.
    my_list: The list in which the item is to be checked. 
    
    Returns
    --------
    boolean: True if the item is present in the list, and False if it is not.
    '''

    return item in my_list"
Write a python function to find minimum possible value for the given periodic function.,"def floor_Min(A,B,N):
    x = max(B - 1,N)
    return (A*x) // B"
Generate a piece of Python code to print the reversed version of a list.,"print(list(reversed([1, 2, 3])))"
Design a data structure in Python to store information about students.,"class Student:
  def __init__(self, name, age, gender, college):
    self.name = name
    self.age = age
    self.gender = gender
    self.college = college"
Sort a dictionary by values in Python.,"dictionary = {'key1':1, 'key2': 3, 'key3': 2}
sorted_dict = {key: value for key, value in sorted(dictionary.items(), key=lambda item: item[1])}"
Write a Python program to return a list that contains all the elements of a given list except the given element x.,"def removeElement(list, x):
    new_list = []
    for item in list:
        if item != x:
            new_list.append(item)
    return new_list"
Write a Python function to sort a list of dictionaries according to a certain key.,"def sort_dict_list(dict_list, sort_key):
  return sorted(dict_list, key=lambda k: k[sort_key])"
Create a Python program to remove all occurrences of the given element in a given array.,"def remove_element(arr, element):
    arr = [x for x in arr if x != element]
    return arr"
Generate a python function to convert an array to a dictionary,"def array_to_dict(lst):
    output = {}
    for i in range(0, len(lst), 2):
        output[lst[i]] = lst[i+1]
 
    return output

# main program
my_list = ['a', 1, 'b', 2, 'c', 3]
result = array_to_dict(my_list)
print(result)"
Write a function to find the combinations of sums with tuples in the given tuple list.,"from itertools import combinations 
def find_combinations(test_list):
  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]
  return (res) "
Create a naive Bayes classifier model in Python.,"from sklearn.naive_bayes import GaussianNB

# Create Gaussian Naive Bayes classifier with built-in datasets
gnb = GaussianNB()
# Train the model using the training sets
gnb.fit(X_train, y_train)
# Predict the output using the test set
y_pred = gnb.predict(X_test)"
Suggest a way to sort a list of integers in python in ascending order.,"sorted_list = [9, 1, 8, 0, 2].sort()
print(sorted_list)"
Design a Python script for querying and visualizing geospatial data.,"The script should accept a search query as an input and query a geospatial database. The output should be a visual representation of the data, such as a map, heatmap or chart."
Create a Python program for performing a linear search on a given array of values.,"def linear_search(arr, x): 
    for i in range (0, len(arr)): 
        if arr[i] == x: 
            return i  
    return -1
  
# Test array 
arr = [ 2, 3, 4, 10, 40 ] 
x = 10
  
# Function call 
result = linear_search(arr, x) 
  
if(result == -1): 
    print(""Element is not present in array"") 
else: 
    print(""Element is present at index"", result)"
Suggest a completion for the following Python code snippet that implements a linear search on an array.,"def linear_search(arr, target):
    for i in range(len(arr)):
        if (arr[i] == target):
            return i
    return -1"
Develop an algorithm in Python to find the minimum number of coins needed to make change for a given amount,"def minCoinChange(n):
    coins = [1, 2, 5]
    mins = [0]+ [float('inf')]*n
    for c in coins:
        for i in range(c, n+1):
            mins[i] = min(mins[i], mins[i-c]+1)
    return mins[n]
    
print(minCoinChange(n))"
Create a machine learning algorithm in Python to classify a given dataset.,"from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.20)

from sklearn.ensemble import RandomForestClassifier
clf = RandomForestClassifier(n_estimators=100)
clf.fit(x_train, y_train)
predictions = clf.predict(x_test)"
Generate code for rounding a given number to the nearest integer in Python.,"def round_nearest_int(num):
    return round(num)

result = round_nearest_int(2.6)
print(result)"
Write a function to find the nth decagonal number.,"def is_num_decagonal(n): 
	return 4 * n * n - 3 * n "
"Given an array of numbers, write a program to remove the duplicates from the array.","def remove_duplicates(arr):
    return list(set(arr)) # using built-in python set()"
Generate a Python program that computes the Euclidean distance between two points in a two-dimensional space.,"import math

# Define the two points
pointA = (3, 5) 
pointB = (7, 6)

# Calculate the Euclidean distance
distance = math.sqrt( (pointB[0] - pointA[0])**2 + (pointB[1] - pointA[1])**2 )

print(""The Euclidean distance between the two points is:"", distance)"
Create a Python script to detect if a certain item is in a given list of items. The script should work for any type of item.,"def detect_item(items, item):
  if item in items:
    return True
  else:
    return False"
Write a Python code snippet to print the unique elements of a given list.,"def print_unique(my_list):
    seen = set()
    for x in my_list:
        if x not in seen:
            print(x)
            seen.add(x)"
"Write a Python program to create a set from a given list and calculate its intersection, union and difference with another set.","# create set from list
set1 = set(list1)
set2 = set(list2)

# calculate set intersection
intersection = set1.intersection(set2)

# calculate set union
union = set1.union(set2)

# calculate set difference
difference = set1.difference(set2)"
Write a Python program to print the first 20 prime numbers.,"n = 20
primes = []
for num in range(2, n+1):
    is_prime = True
    for div in range(2, num):
        if (num % div == 0):
            is_prime = False
            break
    if is_prime:
        primes.append(num)
print(primes)"
Write a python function to check if a given number is one less than twice its reverse.,"def rev(num):    
    rev_num = 0
    while (num > 0):  
        rev_num = (rev_num * 10 + num % 10) 
        num = num // 10  
    return rev_num  
def check(n):    
    return (2 * rev(n) == n + 1)  "
Create a regular expression pattern to match key-value pairs like python:Python,"pattern = re.compile(r""^(\w+):(\w+)$"")"
Design a Python program that can be used to retrieve data from a database.,"import sqlite3

db = sqlite3.connect('database.db')
cursor = db.cursor()

sql = 'SELECT * FROM table'

cursor.execute(sql)
result = cursor.fetchall()

for row in result:
    print(row)

db.close()"
Create a python script to concatenate two lists.,"def concat_lists(list_1, list_2):
    return list_1 + list_2

list_1 = [1, 2, 3]
list_2 = [4, 5, 6]

concatenated_list = concat_lists(list_1, list_2)
print(concatenated_list) # [1, 2, 3, 4, 5, 6]"
Generate a Python script to calculate the sum of the following equation: 8x^2 + 5y^2 + 6x - 4y.,"def calculate_sum(x, y):
    '''This function calculates the sum of the following equation: 8x^2 + 5y^2 + 6x - 4y.'''
    return 8*x**2 + 5*y**2 + 6*x - 4*y

# Call the function
result = calculate_sum(2, 3)

# Print the result
print(""The sum is"", result)"
Create a generator function in Python to yield the numbers in a given range.,"def num_range_generator(start, end):
    for num in range(start, end+1):
        yield num"
Construct a function in Python that takes a list of strings and returns the original list with each string replaced by its reverse.,"def reverse_list(lst):
    return [s[::-1] for s in lst]

print(reverse_list(list))
# Output: ['olleh', 'dlrow', 'elpmaxe']"
Develop a Python function to calculate the mean of an array of numbers.,"# Python Function to calculate mean 
def calculateMean(data): 
    sum = 0
    # calculating sum 
    for e in data: 
        sum += e
  
    # calculating mean 
    mean = sum / len(data) 
    return mean
  
# Driver code 
data = [1, 4, 6]
mean = calculateMean(data)
print(""Mean of given data is:"", mean)"
Write a python program to print the name and age of all customers in a list.,"for customer in customers:
  print(f""Name: {customer['name']}, Age: {customer['age']}"")"
Write a command line utility in Python to spin up a web server.,"import http.server
import socketserver

PORT = 8000

Handler = http.server.SimpleHTTPRequestHandler

httpd = socketserver.TCPServer(("""", PORT), Handler)

print(""Serving at port"", PORT)
httpd.serve_forever()"
Write a Python function to parse an HTML response from a website.,"import requests
from bs4 import BeautifulSoup

def parse_html(url):
  # Send a get request
  response = requests.get(url)
  
  # Create a BeautifulSoup object
  soup = BeautifulSoup(response.text, 'lxml')

  # Find the required data
  data = soup.find_all('div', class_='content')

  # Return the data
  return data"
Refactor a given code snippet into a Python Lambda function.,"some_method = lambda x, y: x + y"
Write a function in Python to classify a given number into even or odd.,"def classify_num(num):
    if (num % 2 == 0):
        return ""Even""
    else:
        return ""Odd"""
Create a program in Python that computes the area of a circle using Radius.,"def get_area(radius): 
    return math.pi*(radius**2)"
Write a Python function to calculate the Hamming distance between two strings of same length.,"def hamming_distance(s1, s2):
    distance = 0

    for char1, char2 in zip(s1, s2):
        if char1 != char2:
            distance += 1
    
    return distance

result = hamming_distance(""abc"", ""acd"")
print(result)"
Generate a random string of characters in Python with a length between 8 and 16 characters.,"import string
import random

def generate_random_string(length):
    random_string = ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(length))
    return random_string

length = random.randrange(8,16)
random_string = generate_random_string(length)
print(random_string)"
Develop a function in Python that sorts a dictionary by value in descending order.,"def sort_dict_by_value(dict): 
    sorted_dict = dict(sorted(dict.items(), key = lambda kv: kv[1], reverse = True)) 
    return sorted_dict

sorted_dict = sort_dict_by_value(dictionary)
print(sorted_dict)"
Write a python function to find the minimun number of subsets with distinct elements.,"def subset(ar, n): 
    res = 0
    ar.sort() 
    for i in range(0, n) : 
        count = 1
        for i in range(n - 1): 
            if ar[i] == ar[i + 1]: 
                count+=1
            else: 
                break 
        res = max(res, count)  
    return res "
Translate the following code written in Python to Java.,"public class XPlusY { 
    
    // add two numbers  
 static int add(int x, int y) 
    { 
        return x + y; 
    } 
  
    // Driver method  
    public static void main(String[] args) 
    { 
        int x = 3; 
        int y = 5; 
        System.out.println(""Sum of the two numbers is "" + add(x, y)); 
    } 
}"
Write a core Python script that prints the following output.,"for i in range(1,11):
    for j in range(1, 11):
        print(f'{i} * {j} = {i*j}')
    print()"
Design a class in Python that finds the highest number in a given array of integers.,"class HighestNumberFinder:
    def __init__(self, array):
        self.array = array
    
    def find_highest_number(self):
        highest_number = self.array[0]
        for number in self.array:
            if (number > highest_number):
                highest_number = number
        return highest_number"
Create a Python program that takes a number as an input and computes the factorial of that number.,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)
    
num = 7
result = factorial(num)
print(result)"
Write a Python program to get the sum of all odd numbers between 0 and 30.,"# Variable to store the sum
sum = 0

# Iterate over all odd numbers in the range
for i in range(1, 30, 2):
    sum += i
    
# Print the result
print(""The sum of all odd numbers between 0 and 30: "", sum)"
Write a function to count the number of elements in a list which are within a specific range.,"def count_range_in_list(li, min, max):
	ctr = 0
	for x in li:
		if min <= x <= max:
			ctr += 1
	return ctr"
Write Python script to replace all occurrences of a given letter in a string with another.,"""""""Write Python script to replace all occurrences of a given letter in a string with another.""""""

# Take a string as an input
string = ""fortnite""

# Replace the target letter with the replacement letter
new_string = string.replace(""t"", ""l"")

# Print the new string
print(new_string)"
Design an algorithm in Python to find all the ways a point on the plane can be reached from the origin.,"def find_all_ways(x, y):
    if x == 0 and y == 0:
        return [[(0, 0)]]

    paths = []
    if x > 0:
        paths += find_all_ways(x-1, y)
    if y > 0:
        paths += find_all_ways(x, y-1)

    for path in paths:
        path.append((x, y))
    return paths"
Create a function in Python for calculating Factorial of a number (n!).,"def factorial(n): 
  if n == 0:
    return 1
  else:
    return n * factorial(n-1)"
Generate code in Python to sum all the values of a dictionary.,"def sum_dict(dict):
    sum = 0
    for key in dict:
        sum += dict[key]
    return sum

dictionary = { 'a': 1, 'b': 2, 'c': 3 }
print(sum_dict(dictionary)) # 6"
Create an algorithm in Python to generate random strings of a given length.,"import random

def generate_random_string(length):
  # Generate a random string of given length
  letters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
  return ''.join(random.choice(letters) for i in range(length))"
Write a Python script to delete all duplicate characters in a given string,"def deleteDuplicates(string): 
    result = """"
    for i in string: 
        if i not in result: 
            result = result + i
    return result

print(""The output string is: "", deleteDuplicates(string))"
Write a Python script to detect if two strings contain the same characters. Output should be true or false.,"def is_permutation(s1, s2):
    s1_list = list(s1)
    s2_list = list(s2)
    s1_list.sort()
    s2_list.sort()
    if s1_list == s2_list:
        return True
    else:
        return False

print(is_permutation(""abc"", ""bca"")) # True"
Can you create an algorithm in Python for reversing an integer?,"def reverseInteger(x): 
     
    reversed = 0
    while(x > 0): 
        reminder = x % 10
        reversed = (reversed * 10) + reminder 
        x = x // 10
    return reversed 

x = 2435
res = reverseInteger(x) 
print(res)"
Create a function in Python that takes an array and returns the element at the middle index.,"def returnMiddle(arr):
    if len(arr) % 2 == 0:
        return (arr[int(len(arr) / 2) - 1] + arr[int(len(arr) / 2)])/2
    else:
        return arr[int(len(arr) / 2)]
 print(returnMiddle([1, 2, 3, 4, 5]))"
Write a python function to find the sum of absolute differences in all pairs of the given array.,"def sum_Pairs(arr,n): 
    sum = 0
    for i in range(n - 1,-1,-1): 
        sum += i*arr[i] - (n-1-i) * arr[i] 
    return sum"
Create a prediction model in Python that predicts the stock price of Apple.,"import numpy as np
from sklearn.linear_model import LinearRegression

# Load the data
data = np.genfromtxt('apple_stock.csv', delimiter=',')
X = data[:, :-1] # features 
y = data[:, -1] # target

# Create the regression model 
model = LinearRegression()
model.fit(X, y)

# Make predictions 
predictions = model.predict(X)"
Generate a Python algorithm to check if a given word is a palindrome.,"def isPalindrome(word): 
    left, right = 0, len(word) - 1
    while right >= left: 
        if not word[left] == word[right]: 
            return False
        left += 1
        right -= 1
    return True"
Optimize the following Python code to run faster by using appropriate data structures.,"def find_subarrays(arr):
     subarrays = []
     for i in range(len(arr)):
         subarrays.append(arr[i:])
         for j in range(i+1, len(arr)):
             subarrays.append(arr[i:j+1])
     return subarrays"
Generate a Python function that takes in a list of words and returns the length of the longest word.,"def longest_word_length(words):
   length = 0
   for word in words:
       if len(word) > length:
           length = len(word)
           
   return length"
Create a simple algorithm in Python to find the mode of a given array of numbers.,"def mode(arr):
  dict = {}
  for item in arr:
    if item in dict:
      dict[item] += 1
    else:
      dict[item] = 1
  
  max_val = 0
  max_key = 0
  for key, value in dict.items():
    if value > max_val:
      max_val = value
      max_key = key
  
  return max_key

arr = [1, 2, 2, 3, 5, 6, 7]
print(mode(arr))"
Develop a web resource monitor in Python that records the amount of data transferred from a given web resource.,"import requests

def monitor_web_resource(url):
    response = requests.get(url)

    total_data = 0

    while response.status_code == 200:
        total_data += len(response.content)
        response = requests.get(url)

    return total_data

total_data = monitor_web_resource(""http://example.com"")"
Write a Python script to fetch the sale price of a product from an online store.,"import requests
url = f'https://www.productstore.com/ProductID={ProductID}&format=json'

resp = requests.get(url)
data = resp.json()
sales_price = data['salesPrice']
print('The sale price of the product is {}'.format(sales_price))"
Create a Python program to generate a Fibonacci number sequence.,"def generate_Fibonacci_sequence(length):
    # Initialize the sequence
    fib_sequence = [0, 1]

    # Generate the sequence
    for i in range(2, length):
        fib_sequence.append(fib_sequence[i - 1] + fib_sequence[i - 2])

    # Return the sequence
    return fib_sequence

print(generate_Fibonacci_sequence(10))"
Design a Python program to print out all possible permutations of a 3 character string.,"def permutation(str):
    if len(str) == 0:
        return []
    if len(str) == 1:
        return [str]
    l = [] 
    for i in range(len(str)):
       m = str[i] 
       remLst = permutation(str[:i] + str[i+1:])
       for p in remLst:
           l.append(m + p)
    return l

string = 'ABC'
l = permutation(string)
for s in l:
    print(s)"
Create a data structure to store and print all the codes for the top 10 programming languages.,"codes = {
    'C': 'c',
    'C++': 'cpp',
    'Python': 'py',
    'Java': 'java',
    'C#': 'cs',
    'JavaScript': 'js',
    'PHP': 'php',
    'Rust': 'rs',
    'Swift': 'swift',
    'Go': 'go'
}

for key, value in codes.items():
    print('{}: {}'.format(key, value))"
Build a Python script to terminate all running processes.,"import psutil

# terminate all running processes
for proc in psutil.process_iter():
    proc.terminate()"
Create a function using Python to reverse the order of the characters in each word of a given string,"def reverse_words(string): 
  splitted_words = string.split("" "") 

  reversed_words = [word[::-1] for word in splitted_words] 

  reversed_string = "" "".join(reversed_words) 
 
  return reversed_string 

reverse_words(string)"
"Create a Python class representing a grocery item with the following attributes: name, price, quantity.","class GroceryItem:
    def __init__(self, name, price, quantity):
        self.name = name
        self.price = price
        self.quantity = quantity"
Find the number 10 in a string using a Python regular expression.,"re.search(""10"", ""This string contains the number 10 in it"")"
Write a Python script to generate a text report of the results of a survey of 10 people.,"num_yes = 4
num_no = 6

total_responses = num_yes + num_no

print('Survey Results')
print('Number of people who said yes: {}'.format(num_yes))
print('Number of people who said no: {}'.format(num_no))
print('Total number of responses: {}'.format(total_responses))"
Design a polynomial class in Python that stores the coefficients of an n-th degree polynomial function.,"class Polynomial: 
    def __init__(self, coefficients): 
        self.coefficients = coefficients

    def __call__(self, x):
        result = 0
        for i, c in enumerate(self.coefficients):
            result += c * x**i
        return result"
Write a Python program to delete the third element of a list.,"def delete_third_element(list): 
    """"""Function to delete the third element of a list"""""" 
    del list[2] 
    return list

#Example:
print(delete_third_element(list))"
"Write a Python function to display the current time, formatted such that it will read ""It is currently 11:15am"".","import time

def display_time():
    time_string = time.strftime('%I:%M%p', time.localtime())
    return f'It is currently {time_string}'"
Create a Python program which will sort the given array of numbers,"def sortArray(arr): 
    arr.sort() 
    return arr 
  
# Driver code 
arr = [9, 5, 1, 10] 
print(sortArray(arr)) 
# Output: [1, 5, 9, 10]"
Create a histogram of the following data using Python.,"import matplotlib.pyplot as plt

data = [2, 3, 4, 6, 7, 8, 9, 10]

plt.hist(data)
plt.title('Histogram of Wind Direction')
plt.xlabel('Direction (degrees)')
plt.ylabel('Frequency')
plt.show()"
Generate a Python program to return the index of the last occurrence of an item in a given list,"def last_occurrence(arr, item):
    for i in range(len(arr)-1,-1,-1):
        if arr[i] == item:
            return i
    return -1"
Write a function in Python to print the Fibonacci sequence up to the nth term.,"def fibonacci(n): 
    a = 0
    b = 1
    if n < 0: 
        print(""Incorrect input"") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2,n): 
            c = a + b 
            a = b 
            b = c 
        return b 
    
print(""Fibonacci sequence:"")
for i in range(n):
    print(fibonacci(i))"
Create two functions in Python to capitalize and uncapitalize each character of a string.,"def capitalize_each_character(string):
  result = ''
  for char in string:
    result += char.capitalize()
  return result

def uncapitalize_each_character(string):
  result = ''
  for char in string:
    result += char.lower()
  return result"
Create a Python program which computes the factorial of a given integer number.,"def factorial(num): 
    if num == 0: 
        return 1
    else: 
        return num * factorial(num-1) 

x = 5
print(factorial(x)) 
# 120"
"Define a Python class for a car with three attributes: name, color, and doors","class Car:
    def __init__(self, name, color, doors):
        self.name = name
        self.color = color
        self.doors = doors"
Write a function to convert camel case string to snake case string by using regex.,"import re
def camel_to_snake(text):
  str1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', text)
  return re.sub('([a-z0-9])([A-Z])', r'\1_\2', str1).lower()"
Sum the integers in a Python list.,"def sumList(list): 
    sum = 0
    for ele in list:
        sum += ele     
    return sum
  
list = [1, 2, 3, 4, 5] 
print(""Sum of the elements in given list is :"", sumList(list))"
Create a Python script to return the average of the given list of numbers.,"def average(numbers):
 total = 0
 for num in numbers:
 total += num
 return total / len(numbers)

average([10, 15, 20, 25])"
Develop a Python program to generate a random integer from a given range,"import random

def random_int(low, high):
 return random.randint(low, high)"
Optimize the following Python code by replacing redundant computations.,"def complex_computation(x):
    return x * (2 + x)"
Create a Python script to reverse a given string.,"def reverse_string(string):
    return string[::-1]

result = reverse_string('Hello World')
print(result)"
Write a loop in Python to print out all the prime numbers up to a given number.,"def print_prime_numbers(num):
    for i in range(2, num+1):
        for j in range(2, i):
            if (i % j) == 0:
                break
        else:
            print(i)"
"Create a Python program to randomly generate a list of strings of 5, 10 or 15 characters long.","import string
import random

def generate_list(length):
 chars = string.ascii_letters + string.digits
 result = [''.join(random.choice(chars) for i in range(length)) for x in range(10)]
 return result

lengths = [5, 10, 15]
results = [generate_list(length) for length in lengths]

print(results)"
Write a Python program to convert a list of numbers into a string.,"def list_to_str(lst):
    result = "","".join(map(str, lst))
    return result

result = list_to_str([2, 3, 10])
print(result)"
Make a Python program that reads a 3x3 matrix and prints the sum of all elements.,"matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

total = 0

for i in range(len(matrix)):
    for j in range(len(matrix[i])):
        total += matrix[i][j]

print(total)"
"Create a Python lambda expression that takes two parameters, a and b, and returns the average of them.","avg = lambda a,b : (a + b)/2"
Design a Python program that takes an array of integers and returns the first element that is divisible by 7.,"def findFirstDivisibleBy7(arr):
    for i in range(0, len(arr)):
        if arr[i] % 7 == 0:
            return arr[i]
    return -1

arr = [41, 42, 43, 44, 45]
result = findFirstDivisibleBy7(arr)
print(result) # 42"
Write a function to reverse the elements of a given array in Python.,"def reverse_array(arr):
    """"""This function reverses the elements of a given array of numbers
    
    Parameters: 
        arr (list): The list of numbers to reverse.
	
    Returns: The reversed array
    """"""
    return arr[::-1]"
Write a Python program to generate a 3x3 grid of random numbers.,"import random

def generate_grid():
    # create an empty 3x3 grid
    grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]

    # generate 9 random numbers between 1 and 10
    for i in range(3):
        for j in range(3):
            grid[i][j] = random.randint(1, 10)

    return grid

result = generate_grid()
print(result)"
Design an algorithm in Python to find the smallest number in a given list.,"def smallestNumber(nums):
    smallest = nums[0]
    for i in range(1, len(nums)):
        if nums[i] < smallest:
            smallest = nums[i]
    return smallest

nums = [4, 5, 6, 7, 8]
smallestNum = smallestNumber(nums)
print('The smallest number is', smallestNum)"
Rewrite and optimize the following provided code using modern Python library functions.,"count = 0
for word in words:
    if word == 'the':
        count += 1"
Translate a Java loop into a while loop in Python.,"i = 1
while i <= 10:
    print(""Hello World"")
    i += 1"
Write a Python program to classify a dataset with 6 classes.,"import pandas as pd

# Load the dataset 
df = pd.read_csv('dataset.csv')

# Split the dataset into features and labels
X = df.drop('label', axis=1).values
y = df['label'].values

# Train the model
from sklearn.ensemble import RandomForestClassifier
model = RandomForestClassifier()
model.fit(X, y)

# Make predictions on the dataset
predictions = model.predict(X)"
Write a Python program to create a dictionary containing the given list of numbers and their squares as values.,"my_list = [1,2,3,4,5]

squares_dictionary = {}

for x in my_list:
  squares_dictionary[x] = x**2

print(squares_dictionary)"
Write a function to find the square root of a perfect number.,"import math
def sqrt_root(num):
 sqrt_root = math.pow(num, 0.5)
 return sqrt_root "
Create a Python script for formatting a sentence.,"def format_sentence(sentence):
    sentence = sentence.split()
    sentence = [word.capitalize() for word in sentence]
    return ' '.join(sentence)

print(format_sentence(""He went to the store""))"
Suggest a python code to get the common elements of a list of lists.,"def get_common_elements(list_of_lists): 
    commons = []
    for i in range(len(list_of_lists)): 
        commons = list(set(commons).intersection(list_of_lists[i]))
    return commons"
Generate a python statements to insert an item at a specific index in a list.,"list.insert(index, item)"
"Implement a Python function called “check_prime” which takes an integer as an argument and returns True if the number is prime, and False otherwise.","def check_prime(n):
 if n == 1:
 return False

 for i in range(2, int(n ** 0.5) + 1):
 if n % i == 0:
 return False

 return True"
Develop a Python program to remove a specific character from a given string.,"def remove_char(string, char):
  return string.replace(char, '')"
Write a python program that generates a random password with a length of 16 containing only letters and numbers.,"import string
import random

def generate_password():
    password_length = 16
    chars = string.ascii_letters + string.digits
    password = ''.join(random.choice(chars) for _ in range(password_length))
    return password

print(generate_password())"
"Given a JSON object containing a list of key/value pairs, write a Python function to sort the list by value.","def sort_by_value(data):
 sorted_list = sorted(data.items(), key=lambda kv: kv[1])
 return sorted_list
 
print(sort_by_value({""a"": 23, ""b"": 42, ""c"": 16}))
# Output -> [('c', 16), ('a', 23), ('b', 42)]  # sorted by value"
Write a function to find the kth element in the given array.,"def kth_element(arr, n, k):
  for i in range(n):
    for j in range(0, n-i-1):
      if arr[j] > arr[j+1]:
        arr[j], arr[j+1] == arr[j+1], arr[j]
  return arr[k-1]"
Write a python function to find the missing number in a sorted array.,"def find_missing(ar,N): 
    l = 0
    r = N - 1
    while (l <= r):  
        mid = (l + r) / 2
        mid= int (mid) 
        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): 
            return (mid + 1)  
        elif (ar[mid] != mid + 1): 
            r = mid - 1 
        else: 
            l = mid + 1
    return (-1) "
Write a Python program to generate a unique set of random numbers from an existing list of numbers.,"import random

numbers = [1, 2, 3, 4, 5, 6, 7] 
random_numbers = set()

while len(random_numbers) < 4:
    random_numbers.add(random.choice(numbers))

print(random_numbers)"
Design an algorithm in Python that sorts an unordered list of three numbers in increasing order.,"def sort_list(input_list):
    output_list = []
    while input_list:
        smallest = input_list[0]
        for i in input_list:
            if i < smallest:
                smallest = i
        output_list.append(smallest)
        input_list.remove(smallest)
    return output_list"
Write a script in Python to return the cryptographic hash of a string.,"import hashlib

def get_hash(string):
    sha1 = hashlib.sha1()
    sha1.update(string.encode('utf-8'))
    return sha1.hexdigest()

print(get_hash(string))"
Design a Python class to store information about student records.,"class StudentRecord:
    def __init__(self, name, age, gender, gpa):
        self.name = name
        self.age = age
        self.gender = gender
        self.gpa = gpa
    def get_name(self):
        return self.name
    def get_age(self):
        return self.age
    def get_gender(self):
        return self.gender
    def get_gpa(self):
        return self.gpa"
Generate a Python script that can detect whether a given string is a palindrome or not.,"def is_palindrome(s):
        rev = ''.join(reversed(s)) 
        if (s == rev): 
            return True
        return False

# driver code
s = ""level""
ans = is_palindrome(s) 

if ans == 1: 
    print(""Yes"") 
else: 
    print(""No"")"
Generate a Python function that sorts a list of numbers using the bubble sort algorithm,"def bubbleSort(list): 
	n = len(list) 
	for i in range(n): 
		for j in range(0, n-i-1): 
			if list[j] > list[j+1] : 
				list[j], list[j+1] = list[j+1], list[j] 
	return list

print(bubbleSort([8,2,11,9,20,7]))"
Create a Python program to detect palindrome words.,"def is_palindrome(word):
    reversed_word = word[::-1]
    if reversed_word == word:
        return True
    else:
        return False

result = is_palindrome(""noon"")
print(result)"
Create a for loop in Python that prints the numbers 1 to 10.,"for i in range(1, 11):
    print(i)"
"Given a list of tuples, write a Python program to calculate the Euclidean distance between two items in the list.","def euclidean_distance(lst):
    distance = 0
    for i in range(len(lst[0])):
        distance += (lst[0][i]-lst[1][i])**2
    return (distance**0.5)"
Create a python function to calculate the probability of a given event.,"def calculate_probability(event):
    num_outcomes = 6
    num_favorable = 1
    
    probability = num_favorable/num_outcomes
    
    return probability
    
# calculate probability of rolling a 6
probability = calculate_probability(""rolling a 6"")
print(probability)"
"Write a Python program to generate a password of length 10 containing lowercase letters, uppercase letters, and numbers.","import string
import random

def generate_password():
    letters = string.ascii_letters + string.digits
    password = ''.join(random.choice(letters) for i in range(10))
    return password

print(generate_password())"
Generate code to calculate the distance between two points in an array in Python.,"from math import sqrt

def calcDistance(p1, p2):
    return sqrt( (p2[0] - p1[0])**2 + (p2[1] - p1[1])**2 )

point1 = [2, 4]
point2 = [10, 6]

distance = calcDistance(point1, point2)
print(""Distance between the two points is"", distance)"
Develop a biopython program which counts the number of occurrences of a given DNA sequence.,"from Bio.Seq import Seq
from Bio import SeqIO

seq = Seq(""ATGGGCTAG"")

# Count the occurrence of the DNA sequence
count = seq.count_overlap(seq)

print(count)"
"Write a Python program that takes a string and counts the number of occurrences of each letter, and then prints the results.","str = ""Hello World!""
chars = list(str)

# initialize counts as empty dictionary
char_counts = {}

for char in chars:
    if char in char_counts:
        char_counts[char] += 1
    else:
        char_counts[char] = 1

# printing result
for char, count in char_counts.items():
    print(""{} : {}"".format(char, count))"
Generate a Python program to group a list of integers into even and odd numbers.,"def group_integers(lst):
 evens = []
 odds = []
 for num in lst:
 if (num % 2 == 0):
 evens.append(num)
 else:
 odds.append(num)
 
 return (evens, odds)
 
 lst = [1, 2, 3, 4, 5, 6]
 result = group_integers(lst)
 
 print(""Even numbers:"", result[0])
 print(""Odd numbers:"", result[1])"
Write a Python program to simulate rolling two dice and determine the odd/even result.,"import random

def roll_dice():
    roll1 = random.randint(1, 6)
    roll2 = random.randint(1, 6)
    roll_sum = roll1 + roll2
    print(f""You rolled {roll1} and {roll2}. The total is {roll_sum}, which is {'even' if roll_sum % 2 == 0 else 'odd'}."")
    
roll_dice()"
Create a program to implement a selection sort in Python.,"def selection_sort(arr):
    n = len(arr)
    for i in range(n-1):
        min_index = i
        for j in range(i+1, n):
            if arr[min_index] > arr[j]:
                min_index = j
        arr[i], arr[min_index] = arr[min_index], arr[i]
    return arr"
Create a program in Python that takes a word as an argument and print it in reverse.,"def reverse(word):
    return word[::-1]

print(reverse('Hello World'))"
Design a python program to extract URLs from a website.,"from bs4 import BeautifulSoup
import requests

page = requests.get(url)
soup = BeautifulSoup(page.content, 'html.parser')
links = soup.select('a[href]')
for link in links:
    print(link['href'])"
Modify a Python program to generate output in JSON format.,"import json

dictionary = {
   ""name"": ""John"",
   ""age"": 30,
   ""car"": [""Ford"", ""BMW"", ""Fiat""]
}

json_data = json.dumps(dictionary)
print(json_data) // Output: {""name"": ""John"", ""age"": 30, ""car"": [""Ford"", ""BMW"", ""Fiat""]}"
Write a Python program to iterate through a given list of integers and output the maximum value.,"max_value = 0

for value in [1,5,2,3,8,9]:
    if value > max_value:
    max_value = value

print(max_value) # Output: 9"
"Create a Python program to generate a random string composed of 8 special characters (e.g., @#$%).","import random

def generate_random_string():
   # Inputs: None
   # Output: Random special character string
   special_chars = [x for x in '@#$%^&*']
   random_string = """"
   for _ in range(8):
       random_string += random.choice(special_chars)
   return random_string

print(generate_random_string())"
Write a Python program to generate a random number between the given input numbers.,"import random

def random_num(start, stop):
    return random.randint(start, stop)


# Example
num = random_num(0, 10)
print(num)"
"Construct a python program that takes an array of integers as an argument, and returns the second largest number.","def second_largest(arr):
  max_first = max(arr[0], arr[1])
  max_second = min(arr[0], arr[1])
  for i in range(2, len(arr)):
    if arr[i] > max_first:
      max_second = max_first
      max_first = arr[i]
    else: 
      if arr[i] > max_second:
        max_second = arr[i]
  return max_second

print(second_largest(arr))"
Generate a list in Python that contains all the words from a source string that start with a certain letter.,"def generate_list(source_string, letter):
  words = source_string.split()
  result = []
  for word in words:
    if word[0].lower() == letter:
      result.append(word)
  return result

print(generate_list(source_string, letter))"
Write a Python program to do a brute force search for a pair of elements which sum to a given target value.,"# brute force search algorithm
def brute_force_search(arr, target):
	for i in range(len(arr)):
		for j in range(len(arr)):
			if arr[i] + arr[j] == target:
				return arr[i], arr[j]
	return None

# test the algorithm
target = 8
lst = [1, 3, 4, 5, 6, 7]
print(brute_force_search(lst, target))

Output:
pair = (3, 5)"
Create a REST API endpoint in Python that fetches data from a database and returns it as JSON.,"@app.route('/users', methods=['GET'])
def get_users():
 users = User.query.all()
 return jsonify([{'Id': user.id, 'Name': user.name, 'Email': user.email, 'Gender': user.gender} for user in users])"
Generate a function in Python that takes two parameters and returns their product.,"def multiply(a, b):
    """"""Computes the product of two numbers.""""""
    return a * b"
Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.,"import re
def search_literal(pattern,text):
 match = re.search(pattern, text)
 s = match.start()
 e = match.end()
 return (s, e)"
"Given a list of integers, write a Python program to find the maximum value in the array and display its index.","mylist = [3, 2, 5, 8, 6]

# initialize maximum value and index
maxval = 0
maxindex = 0

# iterate through list
for i, val in enumerate(mylist):
 # check if the current value is greater than the maximum value
 if val > maxval:
  maxval = val
  maxindex = i

# print the result
print('Maximum value:', maxval)
print('Index of maximum value:', maxindex)"
Write a python function to check if roots of a quadratic equation are reciprocal of each other or not.,"def Check_Solution(a,b,c): 
    if (a == c): 
        return (""Yes""); 
    else: 
        return (""No""); "
"Given the following Python function, use optimization techniques to reduce the running time of the function.","def functionA_opt(n):
 s = 0
 s = n*(n+1)*(n+2) // 6
 return s"
Implement a bubble sort in Python.,"def bubble_sort(lst):
    for i in range(len(lst)-1,0,-1):
        for j in range(i):
            if lst[j] > lst[j+1]:
                lst[j], lst[j+1] = lst[j+1], lst[j]
    return lst"
Add Python logging capabilities to a given Flask application.,"import logging
import sys
from flask import Flask

app = Flask(name)

# Set up logging
app.logger.addHandler(logging.StreamHandler(sys.stdout))
app.logger.setLevel(logging.DEBUG)

@app.route('/')
def index():
 app.logger.info('Processing request to index')
 return 'Hello World!'"
"Create a function in Python to count the number of each letter in the sentence ""Hello world, this is GPT!""","def countLetters(sentence): 
    counts = dict() 
    for c in sentence: 
        if c in counts: 
            counts[c] += 1
        else: 
            counts[c] = 1
  
    return counts"
Write a function in Python that computes the median of a given array of numbers.,"def median(arr):
 arr.sort() 
 n = len(arr) 
 if n % 2 != 0: 
 return arr[n//2] 
 else: 
 return (arr[(n-1)//2] + arr[n//2]) / 2

# driver code 
arr = [2,3,4,5,6,7,8] 
print(median(arr))"
Write a Python program to generate a table of all possible combinations for a given set of symbols.,"def print_combinations(symbols):
    for idx in range(1 << len(symbols)):
        combination = [symbol for symbol, flag in zip(symbols, bin(idx)[2:]) if flag == ""1""]
        print(combination)

symbols = ['A', 'B', 'C']
print_combinations(symbols)"
Create a Python code to check if a single integer is a prime number,"def is_prime(number):
    if number <= 1:
        return False

    for i in range(2, number):
        if number % i == 0:
            return False
    return True"
Create a program in Python to check for palindrome numbers.,"def palindrome(num):
    num = str(num)
    if num == num[::-1]:
        print(num + "" is a palindrome number"")
    else: 
        print(num + "" is not a palindrome number"")

palindrome(121)
// Output: 121 is a palindrome number"
Create a background job in Python to run every 5 minutes.,"# Importing the necessary module
import schedule

# Defining the job
def job():
    print(""Job executed!"")

# Scheduling the job to run every 5 minutes
schedule.every(5).minutes.do(job)

# Running the job
while True:
    schedule.run_pending()"
Write a Python program to collect data from an API and store the data in a SQL database.,"import sqlite3
import requests

# Connect to the database
db = sqlite3.connect('api_data.db')

# Create the statement
stmt = 'INSERT INTO api_data (data) VALUES (?)'

# Collect and save the data
data = requests.get(url).json()
db.execute(stmt, (data,))
db.commit()
db.close()"
Write a python program that takes a list of numbers and prints out only the even numbers,"for num in [2, 4, 7, 14, 21]: 
    if num % 2 == 0: 
        print(num, end = "" "")"
Create an alternate version of a given program that produces the same output.,"import math
myString = ""Python Rocks!""
numRounds = math.floor(len(myString) / 2)
for i in reversed(range(1, numRounds+1)):
    print(myString[i-1::-1] + myString[i::])"
Write a python function to count the total unset bits from 1 to n.,"def count_Unset_Bits(n) :  
    cnt = 0;  
    for i in range(1,n + 1) : 
        temp = i;  
        while (temp) :  
            if (temp % 2 == 0) : 
                cnt += 1;  
            temp = temp // 2;  
    return cnt;  "
Convert a given code snippet from Swift to Python.,"username = ""John""
score = 123"
Find the maximum value of a 10 element array in Python.,"# Max value in array

def max_val(array):
    max_val = array[0]
    for num in array[1:]:
        if num > max_val:
            max_val = num
    return max_val"
Write a Python program to sort a list of tuples by the second element in the tuple.,"def sort_tuples_by_second_element(tuples):
  return sorted(tuples, key=lambda tup: tup[1])"
Identify and correct code issues in the following snippet of Python code.,"def foo(x):
    if x > 0:
        return x
    else:
        return 0"
Generate Python code to calculate the Mean Squared Error (MSE) between a given set of predicted values and actual values.,"def calculate_mse(y_true, y_pred):
    mse = 0
    for i in range(len(y_true)):
        mse += (y_true[i] - y_pred[i])**2
    mse = mse / len(y_true)
    return mse

mse=calculate_mse(y_true, y_pred)
print(mse)
# Output: 0.44000000000000006"
Update the given Python program to shuffle an array of numbers.,"import random

def shuffleArray(arr):
    random.shuffle(arr)
    return arr

array = [1, 2, 3, 4, 5, 6]
shuffledArray = shuffleArray(array)
print(shuffledArray)"
Create a function in Python to delete all elements from a list which are divisible by 5.,"def delete_divisible_by_5(my_list):
  new_list = []
  for i in my_list:
    if i % 5 != 0:
      new_list.append(i)
  return new_list

# Test
my_list = [1, 10, 15, 20, 25]

new_list = delete_divisible_by_5(my_list)

print(""List after deletion: "" + str(new_list))"
Create a Python class to implement a multiplication table,"class MultiplicationTable:
    def __init__(self, limit):
        self.limit = limit

    def create_table(self):
        for i in range(1, self.limit+1):
            for j in range(1, self.limit+1):
                print(i*j, sep= '\t', end='')
            print()"
Generate random integers within a given range in Python.,"import random
def generate_random_integers(start, end):
    return random.randint(start, end)

generate_random_integers(1, 10); //Output: 8"
"Write a python program to convert a time string ""hh:mm:ss"" into total number of seconds",time_in_secs = 8 * 3600 + 11 * 60 + 15
Can you develop a program in Python that prints out the number of words and characters in a given string?,"def word_and_character_count(string):
    num_words = len(string.split())
    num_characters = len(string)
    print(""Number of words:"", num_words)
    print(""Number of characters:"", num_characters)"
Create a Python program that takes a list of numbers as an input from the user and prints out the number that appears the most in the list.,"list_of_numbers = [int(x) for x in input(""Please enter a list of numbers: "").split(',')]

c = collections.Counter(list_of_numbers)

most_common_num = c.most_common(1)[0][0]

print(""The most common number in the list is "" + str(most_common_num))"
Write a Python script that counts the characters of a given string.,"string = 'Hello world'

count = len(string)

print(""Length of the string is"", count)"
Implement a function that prints out the numbers from 1 to 50 in python,"def print_numbers():
    for i in range(1, 51):
        print(i)

print_numbers()"
Design a data structure in Python to store information about a customer.,"class Customer:
    def __init__(self, name, phone, email, address):
        self.name = name
        self.phone = phone
        self.email = email
        self.address = address

customer = Customer(""John"", ""+123456789"", ""john@example.com"", ""456 Main Street"")"
Write a function to remove all tuples with all none values in the given tuple list.,"def remove_tuple(test_list):
  res = [sub for sub in test_list if not all(ele == None for ele in sub)]
  return (str(res)) "
Create a min-heap data structure in python.,"import heapq

class MinHeap:
    def __init__(self):
        self.heap_array = []

    def insert(self, value):
        heapq.heappush(self.heap_array, value)

    def pop(self):
        return heapq.heappop(self.heap_array)"
Write a function to extract the nth element from a given list of tuples.,"def extract_nth_element(list1, n):
    result = [x[n] for x in list1]
    return result"
Generate a program to merge two sorted linked lists in Python.,"def merge(list1, list2):  
    if list1 is None:  
        return list2  
    if list2 is None:  
        return list1  
    if list1.data < list2.data:  
        list1.next = merge(list1.next, list2)  
        return list1  
    else:  
        list2.next = merge(list1, list2.next)  
        return list2"
Write a function to find the circumference of a circle.,"def circle_circumference(r):
  perimeter=2*3.1415*r
  return perimeter"
Create a Python program to check if a string ends with a given substring.,"def endswith(s, substring): 
    return s.endswith(substring) 


s = 'Hello World'
substring = 'ld'
print(endswith(s, substring)) # prints True"
Generate a random list of numbers ranging from 1 to 10 without duplicates in Python.,"import random

# Generate a list of numbers ranging from 1 to 10 without duplicates
numbers = list(range(1,11))
random.shuffle(numbers)

# Print shuffled numbers
print(numbers)"
Create a program in Python which takes a string and an integer as input and prints the string the given number of times.,"string = ""Hello""
num = 3

for i in range(num):
    print(string)"
Write a python function to check whether a sequence of numbers has a decreasing trend or not.,"def decreasing_trend(nums):
    if (sorted(nums)== nums):
        return True
    else:
        return False"
"Given a list of dictionarys, create a python command to add ""hello"" in front of every value in the list.","[{'string' : 'hello world'}, {'number' : 'hello 5'}]"
Write a script in python that outputs all even numbers between 0 and 10.,"for number in range(0,11):
  if (number % 2 == 0):
    print(number)"
Generate a Python program to calculate the total cost including taxes of an item purchased based on the given inputs.,"price = 22
tax_percentage = 5

total_cost = price * (1 + tax_percentage/100)
print('The total cost is: ', total_cost)"
Generate a Random Forest classifier in python,"from sklearn.ensemble import RandomForestClassifier

clf = RandomForestClassifier(n_estimators = 100, criterion = ""entropy"", random_state = 0)"
Generate a Python program which use to generate an array of length N with random numbers based on the given seed.,"import random

def generate_array_with_random_numbers(n, seed):
 random.seed(seed)
 return [random.randint(0, 100) for _ in range(n)]

n = 10
seed = 42
array = generate_array_with_random_numbers(n, seed)

print(array)
# [19, 25, 44, 36, 33, 20, 72, 15, 85, 37]"
Create a function in Python to calculate the total of all the characters in a given input string.,"def char_total(string):
total = 0

for char in string:
 total += ord(char)

return total

print(char_total('Hello World!')) 
# Output: 1116"
Write a Python program for sentiment analysis.,"import nltk
import numpy as np
from nltk.sentiment.vader import SentimentIntensityAnalyzer

def sentiment_analyzer(text):
 sid = SentimentIntensityAnalyzer()
 score = sid.polarity_scores(text)
 return score

# Example test
sentiment_analyzer('This is a good day!')
# {'neg': 0.0, 'neu': 0.508, 'pos': 0.492, 'compound': 0.4404}"
Generate a program in Python which creates an ordered dictionary from a given list of tuples.,"def create_ordered_dict(list_tuple):
    ordered_dict = OrderedDict()
    for key, value in list_tuple:
        ordered_dict[key] = value
    return ordered_dict"
Write a function in Python to print the reverse of a string.,"def print_reverse(s):
  print(s[::-1])"
"Using Python, create a function that takes two numbers as input, and generates a random number between them.","def random_number_generator(min, max):
    return random.randint(min, max)"
Sort a list in Python using the Quick Sort algorithm,"def quicksort (array) :
    if len(array) <= 1 :
        return array
    else:
        pivot = array[len(array) // 2]
        left = [x for x in array if x < pivot]
        middle = [x for x in array if x == pivot]
        right = [x for x in array if x > pivot]
        return quicksort(left) + middle + quicksort(right)

array = [5, 2, 9, 1, 4, 12]
result = quicksort(array)
print(result)"
Create a program in Python to generate a random 2D matrix of size NxN containing integers between 1 and 10.,"import random

n = 10

matrix = [[random.randint(1, 10) for _ in range(n)] for _ in range(n)]

print(matrix)"
Build a regular expression in Python to validate a UK postcode.,"import re

pattern = r'[A-Z]{1,2}[0-9R][0-9A-Z]? [0-9][ABD-HJLNP-UW-Z]{2}'

def validate_postcode(postcode):
  return re.match(pattern, postcode) != None"
Generate a function in Python to calculate the value of an employee’s paycheck given the hours worked and the hourly rate.,"def calc_paycheck(hours_worked, hourly_rate):
 return hours_worked * hourly_rate"
Generate a random number in the range 0 to 1000 using the Python random library.,"import random 
random_number = random.randint(0,1000)"
Design an algorithm in Python that prints out the squares of each number between 1 and n.,"def printSquares(n):
 for num in range(1,n+1):
 sqr = num * num
 print(sqr)

n = 8
printSquares(n)"
Design a function in Python to convert the temperature from Celsius to Fahrenheit.,"def celsiusToFahrenheit(celsius):
  fahrenheit = celsius * 9/5 + 32
  return fahrenheit"
How can you use Python to calculate the mean value of a given list,"def mean_value(numbers):
    sum = 0
    for n in numbers:
        sum += n
    return sum / len(numbers)"
Write a function to convert tuple to a string.,"def tup_string(tup1):
  str =  ''.join(tup1)
  return str"
Design a program in Python to find the roots of a quadratic equation.,"import math

def find_roots(a, b, c): 
    # calculate the discriminant
    d = (b**2) - (4*a*c)

    # calculate the two solutions to the equation
    sol1 = (-b-math.sqrt(d))/(2*a)
    sol2 = (-b+math.sqrt(d))/(2*a)

    # return the two solutions
    return sol1, sol2"
Write a Python program to classify a given animal according to its features,"def classify_animal(features):
    if ""four legs"" in features and ""curved tail"" in features:
        if ""feathers"" in features:
            return ""bird""
        else:
            return ""mammal""
    else:
        return ""unknown""

features = ""An animal with four legs, a curved tail and feathers""
print(classify_animal(features)) # bird"
Create a Python program that takes a list of integers and returns true if the list contains two distinct numbers whose product is even.,"def has_even_product(numbers):
 for i in range(len(numbers)):
 for j in range(i+1, len(numbers)):
 if numbers[i] * numbers[j] % 2 == 0:
 return True
 return False"
Design an algorithm in Python to find the minimum of three values.,"def find_min(a, b, c): 
    min_val = a 
    if b < min_val: 
        min_val = b 
    if c < min_val: 
        min_val = c 
    return min_val 

print(find_min(3, 2, 1)) # Output: 1"
Write a Python code snippet to sort lists of integers in descending order.,"lst = [4, 6, 1, 3, 8]
lst.sort(reverse=True)
print(lst)  # [8, 6, 4, 3, 1]"
"Write a Python program to print out the count of vowels, consonants and digits in an input string.","Vowels: 10
Consonants: 12
Digits: 3"
Create a feature extraction function in Python to extract data from a json string.,"def feature_extraction(input_str):
    import json
    data = json.loads(input_str)

    features = {
        ""id"": data[""id""],
        ""title"": data[""title""],
        ""body_len"": len(data[""body""])
    }

    return features"
Debug the following Python code and make it functional (read the instructions for the code).,"def factorial(n):
 if n == 0:
    return 1
 else:
 return n * factorial(n - 1)

# call the method
print(factorial(5))"
Generate a Python class for a two-dimensional point that represents a position on a Cartesian plane.,"class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        
    # method to get x-position
    def get_x(self):
        return self.x
    
    # method to get y-position
    def get_y(self):
        return self.y
            
    # method to move point
    def move_point(self, dx, dy):
        self.x += dx
        self.y += dy"
Write a python function to find the maximum sum of elements of list in a list of lists.,"def maximum_Sum(list1): 
    maxi = -100000
    for x in list1: 
        sum = 0 
        for y in x: 
            sum+= y      
        maxi = max(sum,maxi)     
    return maxi "
Write a function to find all the values in a list that are greater than a specified number.,"def greater_specificnum(list,num):
 greater_specificnum=all(x >= num for x in list)
 return greater_specificnum"
Generate a program in Python that takes two strings and returns a list containing the combined string.,"def combine_strings(str1, str2):
 return [str1 + str2]

combined_string = combine_strings(""Hello "", ""World!"")
print(combined_string) # [""Hello World!""]"
Create an algorithm in Python to search for a value in a linked list.,"def search(head, key): 
    current = head 
    while current is not None: 
        if current.data == key: 
            return current 
        current = current.next
    return None"
Write a function in Python to display all the words beginning with a given alphabet in a given string.,"def all_words_beginning_with(str, alphabet):
  words = str.split()
  result = []
  for word in words:
    if word[0].upper() == alphabet.upper():
      result.append(word)
  
  return result"
Optimize a given piece of Python code so that it runs faster without compromising on the integrity of the output.,"def get_elements(numbers_list):
 result = []
 for x in range(0, len(numbers_list), 2):
 result.append(numbers_list[x])
 return result"
Write a Python function to calculate the sum of the digits in a given string of numbers and letters.,"def sum_string(s):
    sum = 0
    for ch in s:
        if ch.isdigit():
            sum += int(ch)
    return sum"
Update the below Python code to run in multiprocess mode.,"import multiprocessing
import time

def add(a, b):
 return a + b

if __name__ == '__main__':
 pool = multiprocessing.Pool()
 start = time.time()
 result = pool.apply_async(add, (2, 3))
 pool.close()
 pool.join()
 end = time.time()
 print(result.get())
 print(end-start)"
Please rank the following libraries according to their relevance for our program in Python.,NumPy > SciPy > Pandas
Create a Python program to search for an item in a list and return its index.,"def linear_search(list, target):
  for index, item in enumerate(list):
    if target == item:
      return index
    return -1

result = linear_search([2, 3, 5, 7, 11], 5)
print(result)"
Automate the process of pulling data from a website using Python.,"import requests
from bs4 import BeautifulSoup

url = 'http://www.example.com'

# Use requests to get website HTML
resp = requests.get(url)

# Parse the HTML using BeautifulSoup
soup = BeautifulSoup(resp.text, 'lxml')

# Extract data from HTML
data = []
for item in soup.find_all('div'):
 data.append(item.text)

# Print the data
for d in data:
 print(d)"
Create a method to verify if the following number is prime in Python:,"def is_prime(n):
    if (n <= 1):
        return False
    for i in range(2, n):
        if (n % i == 0):
            return False
    return True

n = 7

if is_prime(n):
    print(""The number {} is prime."".format(n))
else:
    print(""The number {} is not prime."".format(n))"
Write a function to find all adverbs and their positions in a given sentence by using regex.,"import re
def find_adverbs(text):
  for m in re.finditer(r""\w+ly"", text):
    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))"
Create a module for generating random strings in Python.,"import random
import string

def generate_random_string(length):
    letters = string.ascii_letters
    return ''.join(random.choice(letters) for i in range(length))"
Create a Python script to print the absolute difference between two given numbers.,"def absolute_difference(A, B): 
    return abs(A - B) 
  
# Driver Code 
A = 9
B = 5
print(absolute_difference(A, B))"
Create a function in Python to check if a number is prime.,"def check_prime(n):
    if n < 2:
        return False
    else:
        for i in range(2, int(n ** 0.5) + 1):
            if n % i == 0:
                return False
        return True"
Create a python code to generate a dictionary of char counts for a given string.,"def char_count_dict(input_string):
    char_dict = {}

    for char in input_string:
        if char in char_dict:
            char_dict[char] += 1
        else:
            char_dict[char] = 1
    
    return char_dict

print(char_count_dict(input_string))"
"Using the provided inputs, write a python code that calculates the sum of all the elements in the list.","def calculate_sum(my_list):
    """""" Calculate the sum of all the elements in the list. """"""
    sum = 0
    for elem in my_list:
        sum += elem
    return sum

my_list = [1,2,3,4,5,6]
total_sum = calculate_sum(my_list)
print(""The sum of all elements in the list is: %d"" %total_sum)"
Write a python program to convert a list of words into a string delimited by a space separator.,"words = [""Hello"", ""World"", ""!""]
print(' '.join(words))"
Generate an efficient Python program to reverse a string.,"def reverseString(inputString): 
    reversedString = """" 
    for i in inputString: 
        reversedString = i + reversedString 
    return reversedString 
  
print(reverseString(""Hello""))"
Write a Python script to identify the words that contain more than one vowel in a given sentence.,"import re

sentence = ""The quick brown fox jumped over the lazy dog.""
pattern = r""\b(\w*[aeiou]\w*){2,}\b""

match = re.findall(pattern, sentence)
print(match)

# Output: ['quick', 'brown', 'jumped', 'over', 'lazy']"
Compute the area of a triangle given its three points in Python.,"def triangle_area(Point1, Point2, Point3):
    #Calculate the area of the triangle
    x1, y1 = Point1
    x2, y2 = Point2
    x3, y3 = Point3
    area = abs((x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2)

    return area

Point1 = (1, 4)
Point2 = (5, 4)
Point3 = (3, 2)

area = triangle_area(Point1, Point2, Point3)
print(f""Area of the triangle: {area}units"")"
Create a class Cell in Python using object-oriented programming.,"class Cell:
    def __init__(self, row, col):
        self.row = row
        self.col = col 

    def move_left(self):
        self.col -= 1

    def move_right(self):
        self.col += 1

    def move_up(self):
        self.row -= 1

    def move_down(self):
        self.row += 1"
Write a Python program to calculate the amount of time for an action to be completed given a set of parameters.,"def calculate_time(speed, distance):
 time = distance / speed 
 return time 

print(calculate_time(100, 1000)) 
# Output: 10.0"
Write a Python program that automates the process of password validation.,"def password_validation(password):
  if(len(password) < 8):
    return False
  elif not any(char.isdigit() for char in password):
    return False
  elif not any(char.isupper() for char in password):
    return False
  elif not any(char.islower() for char in password):
    return False
  else:
    return True"
Write a Python code to display the area and volume of a cube with a given edge length.,"def cube_info(edge_length):
    area = 6 * edge_length**2
    volume = edge_length**3
    return area,volume

edge_length = 3
area, volume = cube_info(edge_length)
print(""Area of the Cube:"", area)
print(""Volume of the Cube:"", volume)"
Create a Python function to return all valid permutation of a given string,"def find_permutations(s): 
	res = [] 
	find_permutations_recur(s, """", res) 
	return res 

def find_permutations_recur(str, prefix, res): 
	n = len(str)
	if n == 0:
		res.append(prefix) 
		return

	for i in range(n):
		remaining = str[0:i] + str[i+1:] 
		find_permutations_recur(remaining, prefix + str[i], res)"
Create a Python program to add multiple items to a key-value list,"def add_multiple_items(data, key, items):
  data[key] = items
  
  return data"
Construct a function in Python to add two numbers passed as arguments.,"def addNumbers(a, b):
    return a + b

x = 3
y = 7
result = addNumbers(x, y)
print(result)"
Create a function to implement linear search in Python.,"def linear_search(list, item):
    # Traverse through all elements in the list
    for i in range(len(list)):
        if list[i] == item:
            return i  # Return the index of the element
    return -1 # Return -1 if the item is not found"
"Using Python, create a program that classifies users into three groups based on their age.","group_list = [""young"", ""middle-aged"", ""elderly""]

for age in age_list:
    if age < 30:
        print(""This user is "" + group_list[0] + ""."")
    elif age > 30 and age < 50:
        print(""This user is "" + group_list[1] + ""."")
    else:
        print(""This user is "" + group_list[2] + ""."")"
Optimize the following Python code for best runtime.,"def is_prime(n):
    if n == 1:
        return False
    if n in (2, 3):
        return True
    if not (n & 1) and n > 2:
        return False
    for i in range(3, int(n**0.5)+1, 2):
        if n % i == 0:
            return False
    return True"
Generate an HTML page with an ordered list which displays the top 5 programming languages in descending order.,"<html>
<head>
    <title>Top 5 Programming Languages</title>
</head>
<body>
    <ul>
        <li>Python</li>
        <li>Java</li>
        <li>JavaScript</li>
        <li>C#</li>
        <li>C++</li>
    </ul>
</body>
</html>"
Write a Python program to create 8 random numbers between 1 and 100.,"import random 

# Create 8 random numbers 
rand_nums = [random.randint(1, 100) for _ in range(8)]
print(rand_nums)"
Optimize the following Python function to calculate the largest prime factor of a given number.,"def largest_prime_factor(n):
    largest_factor = 1
    i = 2
    while i <= n / i:
        if n % i == 0:
            largest_factor = i
            n /= i
        else:
            i+=1
    if n > largest_factor:
        largest_factor = n
    return int(largest_factor)

print(largest_prime_factor(24)) # Output: 3"
Edit a given Python program to improve its readability by following a PEP 8 style guide.,"def divide(a, b):
    """"""Divide two integers and returns the quotient and remainder.

    Args:
        a (int): The dividend.
        b (int): The divisor.

    Returns:
        int: The quotient and remainder.
    """"""
    q = a // b
    r = a - q * b
    return q, r"
Create a program in Python to print all numbers that are divisible by 4 but not by 4.,"for i in range(1, 101):
  if (i % 4 == 0) and (i % 2 != 0):
    print(i)"
Develop a Python program to standardize a given dataset using the z-score normalization technique.,"def standardize(data):
    mean = data.mean()
    std = data.std()
    z_score = (data - mean) / std
    return z_score"
Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.,"def count_ways(n): 
	A = [0] * (n + 1) 
	B = [0] * (n + 1) 
	A[0] = 1
	A[1] = 0
	B[0] = 0
	B[1] = 1
	for i in range(2, n+1): 
		A[i] = A[i - 2] + 2 * B[i - 1] 
		B[i] = A[i - 1] + B[i - 2] 
	return A[n] "
Write a python program that calculates the average age of a group of people.,"def calculate_average_age(names, ages):
    result = 0
    for i in range(len(names)):
        result += ages[i]
    return round(result / len(names), 2)

names = ['Bob', 'Jack', 'John', 'David']
ages = [12, 27, 45, 16]

print(calculate_average_age(names, ages))"
Create a Python program to generate random strings using a given character set.,"import random

def generate_random_string(length, char_set):
    random_string = ''
    
    for _ in range(length):
        random_string += random.choice(char_set)
    
    return random_string

char_set = 'abc'
length = 5

print(generate_random_string(length, char_set))"
Create a function in Python to perform a linear search on a list of numbers.,"def linear_search(numbers, x):
    """"""This function will perform a linear search on a list of numbers and return the index of the number if it is present in the list.""""""
    for i in range(len(numbers)):
        if numbers[i] == x:
            return i 
    # if the number is not found
    return -1"
Write a Python program which takes the length and width of a rectangle as input and returns its perimeter.,"def get_perimeter(length, width):
    return 2 * (length + width)

perimeter = get_perimeter(10, 5)
print(perimeter)"
"Generate a Django project named ""myproject"" with the following structure:","django-admin startproject myproject
cd myproject
python manage.py startapp main"
Create a Python function that takes an integer n and returns an array of n random numbers between 0 and 9.,"def random_array(n):
    import random
    arr = []
    for _ in range(n):
        arr.append(random.randint(0,9))
    return arr
    
arr = random_array(10)
print(arr)"
Write a function to find the cumulative sum of all the values that are present in the given tuple list.,"def cummulative_sum(test_list):
  res = sum(map(sum, test_list))
  return (res)"
Convert the following Python code to the equivalent R code.,"for(i in 0:5) {
  print(i)
}"
Finish coding a reusable Python function that takes in a list and an argument.,"def modify_list(list, argument):
    if argument == ""multiply"":
        for i in range(len(list)):
            list[i] = list[i]*list[i]
    elif argument == ""add"":
        for i in range(len(list)):
            list[i] = list[i] + list[i]
    return list"
Write a function to generate a prime number sequence using Python.,"def generate_prime_numbers(n): 
        primes = [True for i in range(n+ 1)] 
        p = 2
        while (p * p <= n): 
            if (primes[p] == True): 
                for i in range(p * p, n + 1, p): 
                    primes[i] = False
            p += 1
        primes[0] = False
        primes[1] = False
        for p in range(n + 1): 
            if primes[p]: 
                print(p)"
Generate a Python program to output the maximum element in a given array.,"def findMax(arr):
    max_number = arr[0]
    for i in range(1, len(arr)):
        if arr[i] > max_number:
            max_number = arr[i]
    return max_number

arr = [1, 4, 9, 3, 6, 5]
max_number = findMax(arr)
print(""The maximum element in the array is:"", max_number)"
Write a function to check whether the given string is starting with a vowel or not using regex.,"import re 
regex = '^[aeiouAEIOU][A-Za-z0-9_]*'
def check_str(string): 
	if(re.search(regex, string)): 
		return (""Valid"") 
	else: 
		return (""Invalid"") "
Write a Python code to generate a random number between 10 and 50.,"import random 
  
random_number = random.randint(10, 50) 
  
print(""Random number between 10 and 50 is"", random_number)"
Construct a Python class that takes a given number and calculates the sum of the digits.,"class SumOfDigits:
    
    def __init__(self, num):
        self.num = num
    
    def calculate_sum_of_digits(self):
        total = 0
        for ch in str(self.num):
            total += int(ch)
        return total

digit_sum = SumOfDigits(6342)
result = digit_sum.calculate_sum_of_digits()
print(result)"
Debug the Python code.,"def gen_all_triplets(n):
    triplets = []
    for i in range(1, n):
        for j in range(i+1, n):
            for k in range(j+1, n):
                triplets.append([i, j, k])
    return triplets"
Write a Python program that takes a list and prints out the items after sorting them in descending order.,"fruit = ['apple', 'banana', 'cherry'] 
fruit.sort(reverse=True)
print(fruit) # ['cherry', 'banana', 'apple']"
"Given a list of elements, write a program to shuffle the elements in Python.","import random 

def shuffle_list(myList): 
  shuffledList = random.sample(myList, len(myList)) 
  return shuffledList

shuffledList = shuffle_list(myList) 

print(""Shuffled List :"", shuffledList) 

# Output: Shuffled List : [2, 6, 4, 5, 3, 1]"
Generate a for loop in Python to iterate over a range of numbers from 0 to 10.,"for i in range(0,11):
    print(i)"
"You need to optimise a given Python code, which takes a  3x3 matrix as input and outputs the inverse.","import numpy as np

def inverse_matrix(matrix):
    det = np.linalg.det(matrix)
    if det == 0:
        return None 
    return np.dot(np.linalg.inv(matrix), 1/det)"
"Generate a function in Python that prints out a given string five times - i.e. the function has one parameter, the string to be printed out.","def print_five_times(input_string):
    for _ in range(5):
        print(input_string)

print_five_times(""Hello World!"")"
Write a code in Python for computing the maximum difference between any two elements in an array.,"def max_difference(arr): 
  
    max_diff = 0
    for i in range(0, len(arr)): 
        for j in range(i+1, len(arr)): 
            diff = arr[j]-arr[i] 
            if(diff > max_diff): 
                max_diff = diff 
  
    return max_diff 
  
array = [2, 9, 4, 1, 5]
  
print(""Maximum difference ="", max_difference(array))"
Create a Python function to classify whether a given sentence is spam or not.,"def is_spam(sentence):
  spam_words = [""free"", ""gift"", ""click"", ""link""]
  words = sentence.split(' ')
  
  for word in words:
    word = word.lower()
    if word in spam_words:
      return True

  return False"
Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.,"def max_sum_pair_diff_lessthan_K(arr, N, K): 
	arr.sort() 
	dp = [0] * N 
	dp[0] = 0
	for i in range(1, N): 
		dp[i] = dp[i-1] 
		if (arr[i] - arr[i-1] < K): 
			if (i >= 2): 
				dp[i] = max(dp[i], dp[i-2] + arr[i] + arr[i-1]); 
			else: 
				dp[i] = max(dp[i], arr[i] + arr[i-1]); 
	return dp[N - 1]"
Write a function to compute the sum of two numbers in Python,"def compute_sum(a, b): 
    return a + b"
Create a web server in Python to handle HTTP requests.,"import http.server

# Create the server object and set the port
server = http.server.HTTPServer(('localhost', 8080), http.server.BaseHTTPRequestHandler)

# Start listening for requests
server.serve_forever()"
Generate an algorithm in Python to check if a given number of years is a leap year.,"def is_leap_year(year):
    if year % 400 == 0:
        return True
    if year % 100 == 0:
        return False
    if year % 4 == 0:
        return True
    return False

year = 1999
if is_leap_year(year):
    print(""This is a leap year."")
else:
    print(""This is not a leap year."")"
Write a script in Python for converting binary to decimal.,"input_binary = ""1010""
decimal = int(input_binary, 2)
print(decimal)"
Write a Python function that takes a string as input and returns a boolean value that is True if the input is a palindrome and False if not.,"def isPalindrome (string): 
    left_pos = 0
    right_pos = len(string) - 1
  
    while right_pos >= left_pos: 
        if not string[left_pos] == string[right_pos]: 
            return False
        left_pos += 1
        right_pos -= 1
    return True"
Create a Python code snippet to check if a given number is a prime number.,"def is_prime(num):
    if num > 1:
        for i in range(2, num):
            if (num % i) == 0:
                return False
        else:
            return True
    else:
        return False"
Generate a random list of numbers between 0 and 10 with a length of 25 using Python.,"import random

# Generate a random list of numbers
nums = []
for _ in range(25):
   nums.append(random.randint(0, 10))

print(nums)"
Build a web scraping script using Python to retrieve data from a webpage.,"import requests 
from bs4 import BeautifulSoup

url = ""http://example.com""

response = requests.get(url)
soup = BeautifulSoup(response.text, ""html.parser"")

# scrape data from website"
Construct a code to eliminate all negative numbers from a list using Python.,"def remove_negatives(nums):
    new_list = [num for num in nums if num > 0]
    return new_list

my_list = [-1, 9, -3, 4, -8]
filtered_list = remove_negatives(my_list)
print(filtered_list) #[9, 4]"
"Given two strings, write a Python program to check if they are anagrams.","def is_anagram(str1, str2): 
    n1 = len(str1) 
    n2 = len(str2) 
  
    if n1 != n2: 
        return 0
  
    str1 = sorted(str1) 
    str2 = sorted(str2) 
  
    for i in range(0, n1): 
        if str1[i] != str2[i]:
            return 0
  
    return 1"
"Modify the following line of code in Python to generate a list of odd numbers in the range [1,n].","[i for i in range (1, 10) if i % 2 != 0]"
Create a code to classify 10 different types of fruits in Python.,"fruits_dict = {
    'apple':'fruit', 
    'orange':'fruit', 
    'mango':'fruit', 
    'banana':'fruit', 
    'pineapple':'fruit', 
    'pear':'fruit', 
    'strawberry':'fruit', 
    'blueberry':'fruit', 
    'plum':'fruit', 
    'peach':'fruit'
}"
Write a Python program to print the day of week for a specific date.,"import datetime

date_str = ""21 October 2020""
date = datetime.datetime.strptime(date_str, ""%d %B %Y"")
print(date.strftime(""%A""))"
"Write a Python program to find all the words in a string, that begin with a vowel.","vowels = ['a', 'e', 'i', 'o', 'u']
words = ""This is a sample string"".split()

for word in words:
 if word[0].lower() in vowels:
 print(word)"
"Create a machine learning model in Python to predict the airline’s ticket prices, given some input values.","def build_model(input_values):
    # Build the model code
    return model"
Construct a python program to print out the number of distinct elements in a string.,"def count_unique(s):
    seen = set()
    count = 0
    
    for character in s:
        if character not in seen:
            seen.add(character)
            count += 1
            
    return count

print(count_unique(""hello world!""))"
"Create a Python program to validate a username with the following criteria: the username must contain at least 8 characters, must start with a letter, and can contain digits and underscores.","import re

def is_valid_username(username):
 regex = r""^[a-zA-Z][a-zA-Z0-9_]{7,}$""
 return re.match(regex, username)

print(is_valid_username(""abcdefgh""))  # Output: True
print(is_valid_username(""1abcdefgh"")) # Output: False"
Write a function to insert an element before each element of a list.,"def insert_element(list,element):
 list = [v for elt in list for v in (element, elt)]
 return list"
Create a program to provide all possible combinations of two numbers with the given digits.,"# Python
digits = ""12""

for i in range(len(digits)):
 for j in range(len(digits)):
 if i != j:
 print(digits[i] + digits[j])

# 10, 11, 12, 21, 22"
Write a Python program that takes a list of numbers and checks if a given number is present in the list.,"list = [12, 45, 37, 13, 4]
x = 4

if x in list:
 print(""Given number is present in the list"") 
else: 
 print(""Given number is not present in the list"")"
Implement a function in Python to round a number up to 0 decimal places.,"def roundUp(x):
    return int(round(x))

print(roundUp(19.876))"
Write a Python program to loop through a list and print each element of the list.,"for x in [1, 2, 3, 4]:
    print(x)"
Design a program in Python that uses a loop to iterate through the items in a list.,"def loop_through_list(items):
    """"""Iterates through a list of items and prints each one""""""
    for item in items:
        print(item)"
"Create a Python program to calculate the sum of two numbers, given their positions in a given list.","def sum_positions(numbers, pos1, pos2):
 sum = numbers[pos1] + numbers[pos2]
 return sum

numbers = [1, 4, 5, 8, 9]
positions = (3, 5)
print(sum_positions(numbers, positions[0], positions[1]))"
Design a class in Python to store and manage employee records.,"class Employee:
    def __init__(self, name, age, salary, designation):
        self.name = name
        self.age = age
        self.salary = salary
        self.designation = designation
        
    # other methods
    
    def update_salary(self, salary):
        self.salary = salary"
Develop a Python program to display the Fibonacci sequence up to n-th term.,"def fibonacci(n): 
    a = 0
    b = 1
    if n < 0: 
        print(""Incorrect input"") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2,n): 
            c = a + b 
            a = b 
            b = c 
        return b 
  
# Driver Program 
print(fibonacci(10))"
Create a data structure in Python to store and retrieve the first 10 prime numbers.,"primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]

# Create a dictionary where the prime numbers is the key
prime_dict = {prime:True for prime in primes}

# Retrieving the prime numbers
def get_prime_numbers():
    return [prime for prime in prime_dict.keys()]

# Storing the prime numbers
def set_prime_numbers(primes):
    prime_dict = {prime:True for prime in primes}"
Create an algorithm in python that calculates the sum of squares of all the numbers from 1 to N.,"def sum_of_squares(n):
    result = 0
    for i in range(n+1):
        result += i**2
    return result"
Create a program in Python to reverse a string using a recursive algorithm.,"def reverse_string_recursive(string: str) -> str: 
  if len(string) == 0:
    return string 
  else: 
    return reverse_string_recursive(string[1:]) + string[0]

print(reverse_string_recursive(string)) 
# Output: ""!dlrow olleH"""
Write a Python code snippet to print the current date and time.,"import datetime

now = datetime.datetime.now()
print(now)"
Develop a script in Python to find all numbers in a given string.,"import re

s = ""This sentence has two numbers: 35 and 347.""
numlist = []
for item in re.findall('\d+', s):
    numlist.append(int(item))
    
print(numlist) # prints [35, 347]"
Generate a python program to substitute $username with an input's username.,"def substitute_username(input):
    output = input.replace(""$username"", input.username)
    return output"
Create a visualisation for the following dataset in Python using Matplotlib.,"import matplotlib.pyplot as plt

movie_name = ['Jareth and Sarah', 'Garreth and Martha', 'Pam and Joe']
distance = [77.4, 4.3, 22.6]

plt.bar(movie_name, distance)
plt.xlabel('Movie Name')
plt.ylabel('Distance (miles)')
plt.title('Movie Name vs Distance')
plt.show()"
Create a code to identify the highest common factor of two given numbers in Python,"""""""
Create a code to identify the highest common factor of two given numbers in Python

""""""

def gcd(a, b): 
    # base case 
    if (a == 0):
        return b 
      
    return gcd(b%a, a) 


a = 90
b = 99

# print the result
print(gcd(a, b))"
Generate a Python program that prints out the multiplication table of 9.,"for i in range(1,11):
    print(9, ""x"", i, ""="", 9*i)"
Generate a valid python program to convert a given string to its title case.,"def to_title_case(string):
    words = string.split()

    result = []
    for word in words:
        result.append(word.title())

    return ' '.join(result)

title = to_title_case(""hello world"")
print(title)"
Write a function to return the first n prime numbers in Python.,"def firstPrimeNumbers(number): 
    primeNumbers = [] 
  
    for num in range(1, number + 1): 
 
        if (num > 1): 
            for i in range(2, num): 
                if (num % i == 0): 
                    break
            else: 
                primeNumbers.append(num)
    return primeNumbers
  
# Test code 
prime = firstPrimeNumbers(5) 
print(prime)"
Create a Python program to find the smallest positive number that is divisible by all of the numbers from 1 to 10.,"def smallest_multiple(n):
  lcm = 1
  for i in range(1, n + 1):
      lcm = lcm * i // gcd(lcm, i)
  return lcm

def gcd(x, y):
    while(y):
        x, y = y, x % y
    return x

def main():
  print(smallest_multiple(10))
  
if __name__ == ""__main__"":
  main()"
Create an algorithm in Python to find the square root of a positive number??,"def calculate_square_root(num): 
   # Taking a square root of number 
   return num ** 0.5
  
# Driver Code 
num = 16
print(calculate_square_root(num)) 

# Output 
4.0"
Identify the issue with the following Python code snippet.,"The issue with the code snippet is that the two lists are not being concatenated, but instead being added together, resulting in a list containing the sums of the corresponding elements in the two lists. The correct code snippet should be as following:

list1 = [1, 2, 3]
list2 = [4, 5, 6]
list3 = list1 + list2"
Write a Python code to replace all the occurrences of a specific word in a given text.,"text = text.replace(word, replacement)
print(text)
# Output: The quick brown cat jumps over the lazy dog"
Write a Python script to calculate the average age of a group of people.,"people = [
    {'name': 'John', 'age': 25}, 
    {'name': 'Mia', 'age': 28}, 
    {'name': 'Jack', 'age': 33}
]

total_age = 0

for person in people:
    total_age += person['age']

average_age = total_age / len(people)

print(""Average age: {}"".format(average_age))"
Create a Google Cloud Function in Python to parse an incoming JSON object and extract its values,"import json

def parse_json_object(request):
 # Parse the incoming JSON object
 data = json.loads(request.data)
 
 # Extract the values
 param1 = data['param1']
 param2 = data['param2']
 
 return 'Parameters extracted: param1={}, param2={}'.format(param1,param2)"
Write a python script to calculate the standard deviation of a given list of numbers,"import numpy as np

def calculate_standard_deviation(arr):
    return np.std(arr)

print(calculate_standard_deviation(numbers)) # Prints 1.4142135623730951"
Generate and return a list of the first 10 prime numbers in Python.,"def get_first_prime_numbers(n):
 prime_numbers = []
 for num in range(2, n+1):
 for i in range(2, num):
 if (num % i) == 0:
 break
 else:
 prime_numbers.append(num)
 return prime_numbers

print(get_first_prime_numbers(10)) # [2, 3, 5, 7, 11,13,17,19,23,29]"
Create a dictionary in Python to store information about the different elements in the Periodic Table.,"elements_dict = {}

elements_dict[""Hydrogen""] = {
    ""symbol"": ""H"", 
    ""atomic_number"": 1, 
    ""atomic_mass"": 1.008, 
    ""group"": 1, 
    ""period"": 1
    }

elements_dict[""Helium""] = {
    ""symbol"": ""He"", 
    ""atomic_number"": 2, 
    ""atomic_mass"": 4.003, 
    ""group"": 18, 
    ""period"": 1
    }

#Repeat for other elements."
Generate a code in Python to classify the gender of a given name.,"def classify_gender(name):
 genders = {
 'male': ['john', 'peter', 'mark'],
 'female': ['alice', 'anna', 'jane']
 }
 for key, names in genders.items():
 if name in names:
 return key
 return 'unknown'"
Write a code to perform a connected components analysis in Python,"import networkx as nx

def connected_components(graph):
    subgraphs = nx.connected_components(graph)
    components = [graph.subgraph(c).copy() for c in subgraphs]
    return components"
Create a for loop in Python to iterate through a given list of numbers and find the sum.,"nums = [11, 12, 15, 20, 56]

total = 0
for num in nums:
    total += num
 
print(total) # 110"
Write a Python code to find the RMSE (root mean squared error) of two given lists.,"import math 

def rmse(list1, list2): 
    mean_square = 0
    for i in range(len(list1)):
        mean_square += math.pow((list1[i] - list2[i]), 2)
    return math.sqrt(mean_square/len(list1))

rmse_value = rmse(list1, list2)
print(""Root Mean Square Error is:"", rmse_value)"
Sort an array in ascending order using Python.,"def myFunc(arr): 
    arr.sort()
    return arr
  
arr = [8, 16, 7, 15, 1]
x = myFunc(arr)
print(x)"
Design a function in Python that takes a list and removes the duplicates from it.,"def remove_duplicates(my_list):
  my_list = list(dict.fromkeys(my_list))
  return my_list
  
list = [1, 2, 3, 4, 3, 2]

unique_list = remove_duplicates(list)

print(unique_list) # [1, 2, 3, 4]"
Develop a function to generate a random string using Python.,"import random 
import string

def random_string(string_length):
    letters = string.ascii_lowercase
    return ''.join(random.choice(letters) for i in range(string_length))

string_length = 10
print(""Random String of length"", string_length, ""is:"", random_string(string_length))"
Write a function in Python that sorts a given list of strings in alphabetical order case insensitive.,"def sort_strings_case_insensitive(input_list):
  return sorted([string.strip().lower() for string in input_list])"
Write a Python function to sort the following list of numbers with bubble sort algorithm.,"def bubble_sort(list): 
    n = len(list)  
    for i in range(n-1): 
        for j in range(0, n-i-1): 
            if list[j] > list[j+1] : 
                list[j], list[j+1] = list[j+1], list[j]
    return list
  
# Sample list 
list = [5, 4, 3, 2, 1]
  
# Function Call 
bubble_sort(list)"
Create a python program that counts the words in a list of sentences.,"def count_words(sentences):
    count = 0
    for sentence in sentences:
        words = sentence.split()
        count += len(words)
    return count"
Implement a web scraping script in Python to extract information from webpages.,"import requests
from bs4 import BeautifulSoup
 
url = 'http://example.com'
page = requests.get(url)
soup = BeautifulSoup(page.text, 'html.parser')
 
# Extract the data from the html
data = soup.find_all('div')
 
# Do something with the extracted data
for d in data:
  print(d)"
Create a web scraper using Python to extract the titles and dates of blog posts on a particular website.,"import requests
from bs4 import BeautifulSoup

# Make the request
r = requests.get('http://example.com/blog')

# Parse the HTML
soup = BeautifulSoup(r.text, 'html.parser')

# Extract the page titles and dates
titles = []
dates = []
for tag in soup.find_all('h2'):
    titles.append(tag.text)
for tag in soup.find_all('time'):
    dates.append(tag.text)"
Write a function in Python which takes an array of strings and returns a new array containing only the strings with length greater than 3.,"def filter_by_length(strings):
    return [s for s in strings if len(s) > 3]"
Can you write a code snippet in Python that replaces all occurrences of a specific character in a string?,"def replace_all_occurrences(string, character): 
  return string.replace(character, """")"
Create a Python program for sorting a list of numbers in increasing order.,"def sort_list(list):
 for _ in range(len(list)):
 for j in range(len(list)-1):
 if list[j] > list[j+1]:
 list[j], list[j+1] = list[j+1], list[j]
 return list

# Testing the function
example_list = [3, 1, 8, 5, 7]
sorted_list = sort_list(example_list)

print(sorted_list)
# Output: [1, 3, 5, 7, 8]"
Develop a Python program to convert a list into a dictionary.,"colors = [""red"", ""green"", ""blue""]

color_dictionary = {i : colors[i] for i in range(len(colors))} 

print(color_dictionary)"
Generate a Python program to delete the element at a given index from the given array.,"def delete_element_at_index(arr, index):
    if index >= len(arr):
        raise Exception('index out of range')
    
    # Delete the element at the index
    del arr[index]

# Example array and index
my_arr = [1,2,3,4,5];
index = 3;

# Call the function
delete_element_at_index(my_arr, index)

# Print the array
print(my_arr)"
Generate an algorithm in Python to rotate an array of size 'n' by 'd' elements.,"def rotate(arr, d):
    for _ in range(d):
        temp = arr[0]
        for i in range(len(arr)-1):
            arr[i] = arr[i+1]
        arr[len(arr)-1] = temp

    return arr

arr = [1, 2, 3, 4, 5]
d = 2

rotated_arr = rotate(arr, d)
print(rotated_arr) # [3, 4, 5, 1, 2]"
Create a Python script to loop over a list of numbers and print out each value if it is greater than five.,"def loop_list(list):
    for i in list:
        if i > 5:
            print(i)"
"Edit the following code snippet in Python to make it more efficient.

i = 1
while i <= 10:
    print(i)
    i += 1","for i in range(1, 11):
    print(i)"
Write a Python statement that Finds the maximum value among the given numbers.,"max_num = max([10, 5, 15, 35, 20])
print(max_num)"
Write a function in Python to calculate the sum of the digits in a given number.,"def sum_digits(num):
    total = 0
    while num > 0:
        digit = num % 10
        total += digit
        num = num // 10
    return total"
Construct a For-Loop in Python to generate a list of numbers from 0 to 10 (inclusive).,"list = []
for i in range(11):
    list.append(i)"
Create a function in Python that takes three numbers and returns the maximum value.,"def max_value(num1, num2, num3):
    max_val = num1
    if num2 > max_val:
        max_val = num2
    if num3 > max_val:
        max_val = num3
    return max_val"
Write a Python function to calculate the factorial of a number (a non-negative integer).,"def factorial(n):
    if n == 0: 
        return 1 
    return n * factorial(n-1) 

num = 9
factorial_num = factorial(num)
print(factorial_num)"
Make a prediction model in Python and classify a given set of data into two different categories,"def predict_model(arr):
    labels = []
    for num in arr:
        if num % 2 == 0:
            labels.append('Even')
        else:
            labels.append('Odd')
    return labels

result = predict_model([1, 2, 3, 4, 5])
print(result)"
Create a Python function that takes a string and returns the longest prefix that is a palindrome.,"def longest_prefix_palindrome(s):
  if len(s) <= 1: 
    return s
  
  max_length = 0
  for i in range(1,len(s)): 
    if s[:i] == s[i-1::-1]:
       max_length = i 
  
  return s[:max_length] 

print(longest_prefix_palindrome(""abca""))"
"Given an array of numbers, create an algorithm in Python to find the maximum sum of any subarray.","def max_subarray_sum(arr):
  max_sum = 0
  for i in range(len(arr)):
    for j in range(i, len(arr)):
      current_sum = 0
      for k in range(i, j+1):
        current_sum += arr[k]
      max_sum = max(max_sum, current_sum)
  return max_sum

arr = [1, 8, -1, 3, 4, -2]
result = max_subarray_sum(arr)
print(result) # 17"
Write a python function to find the last digit in factorial of a given number.,"def last_Digit_Factorial(n): 
    if (n == 0): return 1
    elif (n <= 2): return n  
    elif (n == 3): return 6
    elif (n == 4): return 4 
    else: 
      return 0"
Generate a Python program to print the numbers from 1 to 10 using a for loop.,"for num in range(1, 11):
    print(num)"
Edit the following Python code to sort a list of numbers in reversed order.,numbers.sort(reverse=True)
Create a Python program to find the square root of the sum of two numbers without using the sqrt() function.,"# Python program
import math 

def square_root(a, b): 
    return math.sqrt(a*a + b*b)
  
Num1 = 4
Num2 = 9

print(""Square root of the sum of two numbers:"", square_root(Num1, Num2))"
Design a Python program to record data from a given list of dictionaries.,"data = [
    {'name': 'John', 'age': 25, 'team': 'A'}, 
    {'name': 'Mark', 'age': 30, 'team': 'B'}
]

records = []
for item in data:
    record = {}
    for key, value in item.items():
        record[key] = value
    records.append(record)

print(records)"
Design a Python program that analyses the sentiment of a given text.,"import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer

text = ""I love programming""

sid = SentimentIntensityAnalyzer()
scores = sid.polarity_scores(text)

if scores['compound'] > 0.0:
 print(""Positive sentiment"")
elif scores['compound'] == 0.0:
 print(""Neutral sentiment"")
else:
 print(""Negative sentiment"")

# Output: Positive sentiment"
Create a program in Python to delete all the elements from the list which have a value greater than a given number.,"def removeGreaterNum(list, num): 
  
    return [x for x in list if x < num] 
      
list = [1, 5, 6, 8, 9, 10] 
num = 7
print(removeGreaterNum(list, num))"
Write a code to create a web server using Flask framework in Python.,"from flask import Flask 

app = Flask(__name__) 
  
@app.route('/') 
def home(): 
    return 'Welcome!'
  
if __name__ == '__main__': 
    app.run()"
Develop a python program which can generate a random array of integers,"import random

def get_random_array(max_size):
    arr = []

    for _ in range(random.randint(0, max_size)):
        arr.append(random.randint(0, max_size))
    
    return arr"
Produce a Python program to compute the Fibonacci number for a given integer.,"def getFibonacci(n): 
    if n<0: 
        print(""Incorrect input"") 
    elif n==1: 
        return 0
    elif n==2: 
        return 1
    else: 
        return getFibonacci(n-1)+getFibonacci(n-2) 

number = 8
fibonacci_number = getFibonacci(number)
print(fibonacci_number)"
Create a Python script to output the maximum number from a set of user-inputted numbers.,"def find_max_number(numbers):
    maximum = numbers[0]
    for i in numbers:
        if i > maximum:
            maximum = i
    return maximum"
Design a program in Python to delete all the odd numbers from an array.,"def delete_odd_numbers(arr):
  new_arr = []
  for i in arr:
    if i % 2 != 0:
      continue
    else:
      new_arr.append(i)
  return new_arr

arr = [1, 2, 3, 4, 5, 6]
print(delete_odd_numbers(arr))"
"Create a python program to calculate the average of the three numbers 55, 48 and 65","def calculate_average(a, b, c):
    """"""
    Calculate the average of the three numbers
    """"""
    return (a + b + c)/3

if __name__ == '__main__':
    result = calculate_average(55, 48, 65)
    print('Average of 55, 48 and 65 is', result)"
Create an API in Python for generating a random password.,"import random
import string

def generate_random_password():
  # Choose a length for the password
  length = 8
  
  # Create the password
  password = ''.join(random.choice(string.ascii_letters + string.digits) for i in range(length))
  
  print(""Generated Password:"", password)
  
  return password

generate_random_password()"
Optimize a Python program to check for prime numbers,"def isPrime(n):
 if n <= 1:
 return False
 for i in range(2, int(n ** 0.5) + 1):
 if n % i == 0:
 return False
 return True

num = 23
if isPrime(num):
 print(""Number is prime"")
else:
 print(""Number is not prime"")"
Write a python function to find the first repeated character in a given string.,"def first_Repeated_Char(str): 
    h = {}
    for ch in str:
        if ch in h: 
            return ch;
        else: 
            h[ch] = 0
    return '\0'"
"Design a Python program to solve the following problem: Given two strings of equal length, print the number of differences.","def diff_characters(str1, str2):
 diff_count = 0

 for i in range(len(str1)):
     if str1[i] != str2[i]:
         diff_count += 1

 return diff_count

str1 = ""abcd""
str2 = ""abcx""

print(diff_characters(str1, str2))

# Output: 1"
Write a Python script to generate all the possible words for a given set of characters.,"import itertools

characters = 'abc'
words = [''.join(word) for word in itertools.product(characters, repeat=3)]

print (words)

# output: ['aaa', 'aab', 'aac', 'aba', 'abb', 'abc', 'aca', 'acb', 'acc', 'baa', 'bab', 'bac', 'bba', 'bbb', 'bbc', 'bca', 'bcb', 'bcc', 'caa', 'cab', 'cac', 'cba', 'cbb', 'cbc', 'cca', 'ccb', 'ccc']"
Write a python function to find the volume of a triangular prism.,"def find_Volume(l,b,h) : 
    return ((l * b * h) / 2) "
Write a function to locate the right insertion point for a specified value in sorted order.,"import bisect
def right_insertion(a, x):
    i = bisect.bisect_right(a, x)
    return i"
"Create a Python application that receives user input, manipulates the data, and generates output.","user_input = input(""What is your name and age: "")
name, age = user_input.split()
print(f""Hi {name}, you are {int(age)+1} years old"")
# Output: Hi John, you are 11 years old"
Write Python code to generate a list of prime numbers between 2 and 1000.,"def generate_prime_numbers(lower, upper):
  prime_numbers = []
  for num in range(lower, upper + 1):
    if num > 1:
      for i in range(2, num):
        if (num % i) == 0:
          break
      else:
        prime_numbers.append(num)
  return prime_numbers"
Write python code to return the maximum number in a list.,"def find_max(nums):
    '''Returns the maximum number in the list.'''
    max_val = nums[0]
    for num in nums:
        if num > max_val:
            max_val = num
    
    return max_val"
"Create a Python class to implement a queue with methods push() to insert an element, pop() to remove an element, and peek() to return the top element of the queue.","class Queue:
 def __init__(self):
 self.queue = []

 def push(self, item):
 self.queue.append(item)

 def pop(self):
 return self.queue.pop(0)

 def peek(self):
 return self.queue[0]

# Usage example
q = Queue()
q.push(1)
q.push(2)
q.push(3)

print(q.pop()) # 1 
print(q.peek()) # 2"
Write a Python program to find the top 3 highest scores in a given tennis game.,"# find the top 3 highest scores
game_scores = [20, 24, 27, 30, 18, 28, 15, 25, 30, 22, 28]

top_scores = sorted(game_scores, reverse=True)[:3]

print(""The top 3 highest scores are:"", top_scores)"
Generate a list of the first 10 Fibonacci numbers in Python.,"n=10
result=[]

# first two numbers
result.append(0)
result.append(1)

# iteration for generating Fibonacci numbers
for i in range(2, n):
    result.append(result[i-2] + result[i-1])

# print the result
print(result)"
Create a python class that simulates an invoice with information about the item and the cost.,"class Invoice:
    def __init__(self, item, price):
        self.item = item
        self.price = price
    
    def get_item(self):
        return self.item
    
    def get_price(self):
        return self.price

invoice = Invoice(""Pen"", 3)"
Generate a Python program that takes a string and capitalizes the first character of each word.,"def capitalize_string(str):
    words = str.split(' ')
    capitalized_words = [word.capitalize() for word in words]
    return "" "".join(capitalized_words)

capitalized_string = capitalize_string(""this is an example"")
print(capitalized_string)"
Create a Python program for implementing a linear search algorithm.,"def linearSearch(arr, key): 
 for idx, num in enumerate(arr):
 if num == key:
 return idx
 
 return -1"
Create a Python program to check if the given number is divisible by 3 or not.,"def is_divisible_by_3(n):
  return (n % 3 == 0)

n = 12
if is_divisible_by_3(n):
  print(str(n) + ' is divisible by 3.')
else:
  print(str(n) + ' is not divisible by 3.')"
Generate a script that prints the first 10 numbers in the Fibonacci sequence in Python.,"a, b = 0, 1
for _ in range(10):
 print(a, end=' ')
 a, b = b, a + b
# 0 1 1 2 3 5 8 13 21 34"
Develop a Python program that plays all the notes of a particular key (say F Sharp Major),"def play_f_sharp_major():
    key_notes = ['F#', 'G#', 'A', 'A#', 'B', 'C#', 'D#']

    for note in key_notes:
        play_note(note)"
"In a Python class, create a method to compute the average of n numbers without using the average function.","class AverageCalculator:
    def average(self, nums):
        sum = 0
        for i in range(len(nums)):
            sum += nums[i]

        return sum / len(nums)"
Construct a Python program to capture the mouse position.,"import pyautogui

def get_mouse_pos():
    x, y = pyautogui.position()
    return (x, y)"
Construct a function in Python to check if the provided year is a leap year.,"def is_leap_year(year):
    if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):
        return True
    else:
        return False"
"Create an SHA-2 encryption algorithm in Python using a provided string ""abc"".","import hashlib

s = 'abc'.encode(""utf-8"")

hash_object = hashlib.sha256(s)
hex_dig = hash_object.hexdigest()
print(hex_dig)"
"Given the following input JSON data, write a Python program to print out all the elements that have an even length.","import json

data = '{""apple"":[""red"",""green""],""pear"":[""green""],""grapes"":[""green"",""red""],""banana"":[""yellow""]}'

json_data = json.loads(data)

for item in json_data.items():
    if len(item[1]) % 2 == 0:
        print(item[0])"
Create a Python function to input a string and then return the number of vowels found in the string.,"def count_vowels(string):
 vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
 count = 0
 for letter in string.lower():
 if letter in vowels:
  count += 1
 return count

output = count_vowels(""Hello"")
print(output)  # output = 2"
Write a code in Python to print the following pattern:,"for i in range(5):
    for j in range(i+1):
        print(""*"", end="""")
    print("""")

for i in range(5, 0, -1):
    for j in range(i):
        print(""*"", end="""")
    print("""")"
Write a Python program to ask the user for two numbers and output their sum.,"num1 = float(input(""Please enter the first number: ""))
num2 = float(input(""Please enter the second number: ""))

print(""The sum of the two numbers is: "" + str(num1 + num2))"
Design a web scraper using Python to scrape data from a given ecommerce website.,"import requests
from bs4 import BeautifulSoup

# Scrape webpage with requests
website_url = <url of the webpage>
r = requests.get(website_url)

# Parse webpage using BeautifulSoup
soup = BeautifulSoup(r.content, 'html.parser')

# Find specific elements with tags, ids, classes etc
data = soup.find_all(<element tag/id/class>)

# Store scraped data
<store data in a list/dictionary>"
What Python statement should be used to make a copy of a list x?,y = x.copy()
Design a program in Python that takes two integers as inputs and outputs the greatest common divisor of the two integers.,"def gcd(a,b): 
  
    # base case  
    if (a == 0): 
        return b 
              
    if (b == 0): 
        return a 
  
    if (a == b): 
        return a 
  
    if (a > b): 
        return gcd(a-b, b) 
                  
    return gcd(a, b-a)"
Create an algorithm in Python to sort an array using selection sort.,"def selection_sort(arr):
    for i in range(len(arr)):
        min_index = i
        
        for j in range(i + 1, len(arr)):
            if arr[min_index] > arr[j]:
                min_index = j
                
        arr[i], arr[min_index] = arr[min_index], arr[i]
        
    return arr

arr = [4, 1, 6, 5, 7, 2, 0]
print(selection_sort(arr))"
Come up with a Python object-oriented program to represent a circle.,"class Circle:
    def __init__(self, radius):
        self.radius = radius
    
    def get_area(self):
        return 3.14 * self.radius * self.radius"
Write a python function to remove duplicates from an array.,"""""""
Remove duplicates from an array
""""""

def remove_duplicates(arr):
    # Create a set 
    seen = set()
    
    # Traverse the array
    for i in range(len(arr)):
        if arr[i] not in seen:
            seen.add(arr[i])
            
    return seen

if __name__ == '__main__':
    arr = [1, 2, 3, 3, 3, 4, 5, 6]
    print(remove_duplicates(arr))"
Write a Python program to sort a list of tuples using a given key.,"def sort_list(lst, key): 
    return sorted(lst, key = lambda x: x[key]) 

# Driver code 
lst = [(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)] 
key = 1
print(sort_list(lst, key))"
How would you modify a program to generate random numbers without replication in Python?,"import random

def generate_random_numbers(length):
    numbers = []
    while len(numbers) < length:
        num = random.randint(0, length)
        if num not in numbers:
            numbers.append(num)
    return numbers

random_numbers = generate_random_numbers(10)"
Create a function in Python to calculate the area of a triangle given its base and height.,"def triangle_area(base, height):
  return (base * height) / 2"
Create a Python script that processes a sentence and classifies it as positive or negative.,"import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer

sentence = ""The food was really bad.""

sentiment_analyzer = SentimentIntensityAnalyzer()
score = sentiment_analyzer.polarity_scores(sentence)

if score['compound'] > 0:
 sentiment = 'positive'
elif score['compound'] < 0:
 sentiment = 'negative'

print(f'The sentence is {sentiment}.')"
"Design a Python program for comparing two strings and printing ""Equal"" if the strings are equal, or ""Not Equal"" if the strings are not equal.","if string1 == string2:
    print(""Equal"")
else:
    print(""Not Equal"")"
Optimize a given Python code segment to run it faster.,"a = 10
b = 0
while a > 0:
 b += a
 a //= 2"
Write a function using Python to scramble a word.,"import random

def scramble_word(word):
    # Convert the word to a list
    word_list = list(word)
    #Scramble the Letters
    random.shuffle(word_list)
    #Convert back to a string
    scrambled_word = ''.join(word_list)
    return scrambled_word

if __name__ == '__main__':
    print(scramble_word('hello'))"
Write a function in Python that takes two integer numbers and returns the maximum of the two.,"def maximum_of_two(a,b):
    if a > b:
        return a
    else:
        return b"
Design a Python program that finds maximum sum of an array,"def max_sum(arr): 
    n = len(arr) 
    max_sum_so_far = 0
  
    for i in range(n): 
        max_ending_here = 0
          
        for j in range(i, n): 
            max_ending_here += arr[j] 
            if (max_sum_so_far < max_ending_here): 
                max_sum_so_far = max_ending_here 
  
    return max_sum_so_far

result = max_sum([1,-3,7,12,-4,8])
print(result)"
Can you convert this Python code to Ruby?,"def my_func(a, b)
  a + b
end"
Create a web API in Python Flask that returns the factorial of the provided number.,"from flask import Flask, request

app = Flask(__name__)

@app.route('/factorial', methods=['POST'])
def factorial():
 num = request.json['num']
 result = 1
 for i in range(2, num + 1):
  result *= i
 return { 'factorial': result }

if __name__ == '__main__':
 app.run(debug=True)"
Design a Python program to accept two numbers from the user and swap them using a variable.,"num1 = int(input(""Enter the first number: ""))
num2 = int(input(""Enter the second number: ""))

temp = num1
num1 = num2
num2 = temp

print(""After swapping:"")
print(""First number:"", num1)
print(""Second number:"", num2)"
Generate a program in Python that returns a list of all prime numbers between two given numbers.,"def primes(start, end):
    prime_list = []
    for i in range(start, end + 1):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            prime_list.append(i)
    return prime_list

prime_numbers = primes(start, end)
print(prime_numbers)"
Create a Python function that takes an integer argument and prints the prime factors of that number.,"def find_prime_factors(num): 
    factors = []
    
    i = 2
    while i * i <= num: 
        if num % i: 
            i += 1
        else:
            num //= i
            factors.append(i)

    if num > 1:
        factors.append(num)

    print(factors)

find_prime_factors(num)"
Write a Python function to rotate a list by n items to the left.,"def rotate(list, n): 
    return list[n:] + list[:n]"
Create a HTML page which displays your favorite programming language.,"<!DOCTYPE html>
<html>
    <head>
        <title>My Favorite Programming Language</title>
    </head>
    <body>
        <h1>My favorite programming language is Python!</h1>
    </body>
</html>"
Write a Python program to return the first prime number greater than 5.,"def prime_number(num):
    while True:
        is_prime = True
        for i in range(2,num):
            if (num % i == 0):
                is_prime = False
        if is_prime:
            return num
        num += 1

x = prime_number(5)
print(x)"
Design a data structure in Python that can store employee information.,"class Employee:
  """"""This class stores the information of an employee""""""

  def __init__(self, name, id, salary, department):
    self.name = name
    self.id = id
    self.salary = salary
    self.department = department"
"Optimize the following Python code to reduce running time.

def add_arrays(arr1, arr2):
  result = []
  for i in range(len(arr1)):
    result.append(arr1[i] + arr2[i])
  return result","def add_arrays(arr1, arr2):
  return [x + y for x, y in zip(arr1, arr2)]"
Write a Python program that creates a dictionary of emails and passwords based on the given input.,"def create_email_password_dict(data):
 email_password_dict = {}
 for name, password in data:
 email_password_dict[name.lower() + '@example.com'] = password
 return email_password_dict

email_password_dict = create_email_password_dict(information)"
Correct the errors and run this Python code.,"print(""Hello World"")"
Create a python program that outputs a sentence when given an input of two words.,"words = [""red"", ""apple""]

sentence = words[0] + "" "" + words[1]
print(sentence)"
Create a Python program to search for a given query from a given array of strings using regular expressions.,"import re

query = 'ab+c'
string_array = ['abc', 'def', 'ghi', 'abcd', 'abcde']

for string in string_array:
    if re.search(query, string):
        print(string)

# Output:
# abc
# abcd
# abcde"
Create a Python list containing numbers 8 to 100 in increments of 8.,"my_list = [8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 100]"
Write a function to sort a list of lists by a given index of the inner list.,"from operator import itemgetter
def index_on_inner_list(list_data, index_no):
    result = sorted(list_data, key=itemgetter(index_no))
    return result"
Edit a Python program to calculate the product of two numbers.,"def product(num1, num2):
 return num1 * num2"
Implement a function in Python to generate sequence of numbers based on a given start and end value.,"def sequence_generator(start, end):
    return list(range(start, end + 1))"
"In Python, explain when to use ""try"", ""except"" and ""finally"".","The ""try"" block is used to test a piece of code to see if any errors occur while executing that code. If an error occurs, the code in the ""except"" block will be executed. The ""finally"" block is used to execute code regardless of whether an error occurs or not. The ""finally"" block should be used for cleanup tasks, such as releasing resources or closing files."
Develop a function in Python to remove all the whitespaces from a given string.,"def remove_whitespace(s):
    return s.replace("" "", """")"
"Design a Python program to find the difference between two provided times. The two times should be provided as strings in the format ""[HH:mm:ss]"".","from datetime import datetime

def time_diff(time1, time2):
 t1 = datetime.strptime(time1, ""%H:%M:%S"")
 t2 = datetime.strptime(time2, ""%H:%M:%S"")
 return (t2 - t1).total_seconds()

print(time_diff('08:30:15', '10:20:20')) // 7200.0"
You are required to write a Python program to optimize an equation.,"def optimize_equation(equation):
    variables = []
    for term in equation.split('+'):
        var, count = term.strip().split(' ')
        variables.append((var, int(count)))

    new_equation = """"
    for var, count in variables:
        new_equation += (var + '^' + str(count)) + ' + '
    return new_equation[:-3]

equation = 'x + x + y + y + y'

print(optimize_equation(equation))"
"Create a Python program to remove all the elements in a given array, which are divisible by a certain number.","# Enter the Array
arr = [23, 45, 12, 35, 29] 
 
# Enter the Number
num = 3
 
# Print the New Array
new_arr = [x for x in arr if x % num != 0] 
 
# Print the Result
print(new_arr)"
Create a Python script that takes a number and a power as parameters and calculates the result.,"def power(number, power):
 return number**power

print(power(2, 3)) # Output: 8"
Write a Python program to get all the information associated with an IPv4 address.,"import socket
ip =  ""8.8.8.8""
address_info = socket.getaddrinfo(ip, None)

for info in address_info:
    print(""IP version :"", info[0])
    print(""IP address as string:"", info[4][0])
    print(""IP address as tuple:"", info[4])
    print(""IP protocol:"", info[6])"
Write a python function to find two distinct numbers such that their lcm lies within the given range.,"def answer(L,R): 
    if (2 * L <= R): 
        return (L ,2*L)
    else: 
        return (-1) "
Write a Python program to analyze the sentiment of a text document using Natural Language Processing.,"import nltk
from textblob import TextBlob

def analyze_sentiment(text):
    sentiment = TextBlob(text).sentiment
    if sentiment.polarity > 0:
        print('Positive sentiment')
    elif sentiment.polarity < 0:
        print('Negative sentiment')
    else:
        print('Neutral sentiment')"
Write a Python program to Reverse the word sequence of a given sentence,"def reverse_sentence(sent):
    words = sent.split("" "")
    reversed_words = words[::-1]
    result = "" "".join(reversed_words)
    return result

sentence = ""This is a test""
print(reverse_sentence(sentence))

# Output
test a is This"
Write an algorithm in Python to determine the largest number in an array.,"def find_max(arr): 
    max_val = arr[0] 
  
    for i in range(1, len(arr)): 
        if arr[i] > max_val: 
            max_val = arr[i] 
  
    return max_val 
  
# Driver code 
arr = [10, 8, 12, 4, 6]
result = find_max(arr) 
print(result) 

# Output: 12"
Write a function to move all the numbers in it to the given string.,"def move_num(test_str):
  res = ''
  dig = ''
  for ele in test_str:
    if ele.isdigit():
      dig += ele
    else:
      res += ele
  res += dig
  return (res) "
Write an algorithm in Python to sort an array of numbers in descending order.,"def descendingSort(arr): 
    arr.sort(reverse=True) 
    return arr
  
arr = [13, 11, 7, 4, 2]
result = descendingSort(arr) 
  
print (result)"
Create a Python script for web scraping data from a website using the BeautifulSoup library.,"import requests
from bs4 import BeautifulSoup
url = ""<website url>""

# Make request to website
r = requests.get(url)

# Get the HTML of the page
html = r.text

# Parse HTML using BeautifulSoup
soup = BeautifulSoup(html, 'html.parser')

# Extract desired info from the page
data = soup.find_all('div', {'class': 'content'})

# Print the data
print(data)"
Create a Python program that creates a new list containing only even numbers from a given list.,"# create a list
original_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]

# create a new list with only even numbers 
even_list = [num for num in original_list if num % 2 == 0] 
  
# display the even list 
print(even_list)"
Create a Python script to remove all empty elements from a list.,"list = [""a"", """", ""b"", """", ""c"", """"] 

result = [element for element in list if len(element) > 0] 

print(result)"
Generate python code to rotate an array to the left.,"def rotate_left(arr):
    first_element = arr[0]
    for i in range(len(arr) - 1):
        arr[i] = arr[i + 1]
    arr[len(arr) - 1] = first_element

rotate_left(arr)"
Write a Python script that takes in the arguments x and y and prints the result of p + q.,"def calculate_sum(x, y):
    """"""
    Takes in the arguments x and y and prints the result of p + q.
    Args:
        x: first argument.
        y: second argument.
    Returns:
        result: the sum of the two arguments.
    """"""
    result = x + y
    return result

p = 5
q = 7
result = calculate_sum(p, q)
print(result)"
"Create a new Python class named ""Student"" with name and age as attributes.","class Student:
    def __init__(self, name, age):
        self.name = name
        self.age = age"
Develop a Python function to print out a Pascals triangle using n number of rows.,"def pascals_triangle(n):
 result = []
 for row_num in range(n):
 row = [1]
 for j in range(1, row_num):
 prev_row = result[row_num-1]
 row.append(prev_row[j-1] + prev_row[j])
 row.append(1)
 result.append(row)
 return result

num_rows = 6
print(pascals_triangle(num_rows))"
Write a Python function that takes an array of numbers and returns an array with the greatest and smallest values.,"def min_max(arr):
  min_val = min(arr)
  max_val = max(arr)
  return [min_val, max_val]

result = min_max([3, 4, 2, 8, 15, 6])
print(result)"
Produce a Python program to print odd numbers from 1 to 10.,"for num in range(1, 11): 
    if num % 2 != 0: 
        print(num)"
Create a Python program that prints out the Fibonacci sequence up to the nth number given as input.,"def fibonacci(n):
    fib_list = [0 , 1]

    for i in range(2 , n):
        fib_list.append(fib_list[i - 2] + fib_list[i - 1])

    return fib_list[:n]

print(fibonacci(n))"
Generate a Python code to take in a list and split it into two halves.,"def split_list(list):
    size = len(list)
    split_index = size//2 # Floor value
    return list[:split_index], list[split_index:]

list = [1,2,3,4,5,6,7] 
first_half, second_half = split_list(list)
print(first_half)
print(second_half)"
"Create a python function to check if a given string contains a specific substring. The function should loop through the string and find the substring, and return a boolean value indicating if the substring was found or not.","def checkIfStringContainsSubstring(myString, substring):
  for i in range(len(myString) - len(substring) + 1):
    if myString[i:i+len(substring)] == substring:
      return True
  return False"
"Create a Python class to store employee information such as name, ID, and salary.","class Employee:
    def __init__(self, name, id, salary):
        self.name = name
        self.id = id
        self.salary = salary

    def get_name(self):
        return self.name

    def get_id(self):
        return self.id

    def get_salary(self):
        return self.salary"
Create a class in Python that calculates the total and average of 3 numbers.,"class Calculator:
    def __init__(self, num1, num2, num3):
        self.num1 = num1
        self.num2 = num2
        self.num3 = num3

    def total(self):
        return self.num1 + self.num2 + self.num3

    def average(self):
        return self.total() / 3"
Write a function in Python to remove all occurrences of a specific character from a string.,"def remove_char_from_string(string, remove_char):
    new_string = """"
    for char in string:
        if char != remove_char:
            new_string += char
    return new_string

if __name__ == '__main__':
     string = ""computer science""
     remove_char = ""c""
     print(remove_char_from_string(string, remove_char))"
"Construct a Python program that creates the following string: ""999,888,777,666,555"".","# This program creates the string ""999,888,777,666,555"".

# create a list of numbers
list = [999, 888, 777, 666, 555]

# join the values in the list
output = "","".join([str(item) for item in list])

# print the output 
print(output) # Outputs: 999,888,777,666,555"
Write a function to find the second smallest number in a list.,"def second_smallest(numbers):
  if (len(numbers)<2):
    return
  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):
    return
  dup_items = set()
  uniq_items = []
  for x in numbers:
    if x not in dup_items:
      uniq_items.append(x)
      dup_items.add(x)
  uniq_items.sort()    
  return  uniq_items[1] "
Rewrite the following CoffeeScript program in Python code.,"def coffeeConvert(x):
 return x * 60"
Generate a python program that create a pandas dataframe from a dictionary column.,"import pandas as pd

df = pd.DataFrame(data_dict)"
Write an algorithm in Python to find the maximum and minimum elements in a given array of integers.,"def findMinMax(arr):
    min = arr[0]
    max = arr[0]
    for i in range(1, len(arr)):
        if arr[i] < min:
            min = arr[i]
        elif arr[i] > max:
            max = arr[i]
    return min, max

arr = [3, 5, 8, 1, 10]

min_val, max_val = findMinMax(arr)
print(min_val, max_val)"
Write a Python script that randomly shuffles a list of strings.,"import random

list = [""Apple"", ""Orange"", ""Banana"", ""Strawberry""]
random.shuffle(list)

for item in list:
    print(item)"
Create a Python class to represent a family tree.,"class FamilyTree:
    def __init__(self):
        self.nodes = []

    def add_node(self, node):
        self.nodes.append(node)

    def get_all_descendants(self, node):
        descendants = []
        for n in self.nodes:
            if n.parent == node:
                descendants.append(n)
                descendants.extend(self.get_all_descendants(n))
        return descendants"
Create a Python program to extract data from webpages using the BeautifulSoup library.,"from bs4 import BeautifulSoup
import requests

# Get the page
url = 'http://example.com'
page = requests.get(url)

# Use BeautifulSoup for parsing
soup = BeautifulSoup(page.content, 'html.parser')

# Get the data
data = soup.find_all('div', class_='datacontainer')

# Print the data
for item in data:
 print(item.text)"
Create a class in Python that takes a list of numbers as input and returns the product of all the numbers.,"class ProductCalculator:
    def __init__(self, num_list):
        self.num_list = num_list
    
    def find_product(self):
        product = 1
        for num in self.num_list:
            product *= num
        return product

# example usage
num_list = [5, 4, 9, 10]
calc = ProductCalculator(num_list)
product = calc.find_product()
print(product)"
Classify a set of programming language names into high-level languages and low-level languages.,"High Level Languages: 
1. JavaScript 
2. Python

Low Level Languages: 
1. C 
2. Assembly"
Can you convert a given HTML page into PDF using Python?,"from xhtml2pdf import pisa
 
# open the page
with open('input.html', 'r') as f:
    html = f.read()
 
# convert to PDF
pdf = pisa.CreatePDF(html, open('output.pdf', 'wb'))
 
# print the result
if not pdf.err:
    print('PDF created successfully')
else:
    print('Error creating PDF')"
Write a python loop to print all the numbers from 1 to 10.,"for i in range(1,11):
    print(i)"
You need to generate a function in Python that takes a word and prints out the number of vowels in that word.,"def count_vowels(word):
    vowels = 'aeiou'
    count = 0
    for char in word:
        if char in vowels:
            count += 1
    return count"
Design a Python class to represent a Tic-Tac-Toe game board.,"class TicTacToe:
    def __init__(self):
        self.board = [['-' for x in range (3)] for y in range(3)]

    def print_board(self):
        for row in range(3):
            print(' | '.join(self.board[row]))

    def make_move(self, x,y, mark):
        self.board[x][y] = mark"
Write a Python program to detect cycles in a type of linked list.,"def detect_cycles(head): 
    slow_p = head 
    fast_p = head 

    while slow_p and fast_p and fast_p.next: 
        slow_p = slow_p.next
        fast_p = fast_p.next.next

        if slow_p == fast_p: 
            return True 

    return False"
"Create a script in Python which receives a list of numbers, and prints the sorted list in ascending order.","list_of_numbers = [7, 3, 4, 2]

# sort the list
list_of_numbers.sort()

# print the sorted list
print(list_of_numbers)"
Develop a Python program to find and print the first non-repeating character from a given string.,"def non_repeating_character(string):
    for c in string:
        if string.count(c) == 1:
            return c
    return 'No result'

print(non_repeating_character('Hello, world!'))"
Transform the following Python code to achieve the same result with better performance,"def classify_number_bigger_5(number):
    return [1 if n > 5 else 0 for n in number]"
"Given a list of numbers, create a program to find the maximum number using Python.","def find_max(numbers):
    maximum = numbers[0]
    for num in numbers:
        if num > maximum:
            maximum = num
    return maximum

if __name__ == ""__main__"":
    numbers = [1,2,3,4,5,6]
    print(find_max(numbers))"
Generate a Python program to insert an element into a given sorted array.,"def insert(arr, x):
    i = len(arr)-1
    while (i >= 0 and x < arr[i]):
        arr[i+1] = arr[i]
        i = i-1
    arr[i+1] = x
    return arr
  
# Input array and element 
arr = [1, 2, 3, 5] 
x = 4
  
# Calling Insert Function 
arr = insert(arr, x) 
  
# Print the modified array 
print(arr)"
Generate a Python function that takes two integer arguments and returns the greatest of them.,"def greatest_of_two_integers(x, y):
    if x > y:
        return x
    elif y > x:
        return y
    else:
        return x"
"Write a Python program to print out the Fibonacci sequence, up to the 100th number in the sequence.","def fibonacci(n):
 a, b = 0, 1
 while a < n:
 print(a, end=' ')
 a, b = b, a + b
 print()

fibonacci(100)"
Write a Python program to compare two lists of numbers and return any combination of numbers that occur in both lists.,"combinedList = [] 

for num1 in list1:
 for num2 in list2:
 if num1 == num2:
 combinedList.append(num1)

print(combinedList) # [3,4,5]"
Generate a program in python that converts a given sequence of strings into a list,"def convert_str_list(x):
    return x.split()

print(convert_str_list(""This is a test""))"
Create a Python synthetic dataset including 1000 samples and 10 continuous attributes.,"import numpy as np

# set seed for generating random numbers
np.random.seed(101)

# number of samples and attributes
n_samples = 1000
n_attributes = 10

# generate random samples
data = np.random.rand(n_samples, n_attributes)"
Generate a code in Python to print the length of the given string.,"string = 'Hello world'

# print the length of string
print(len(string))"
"Design a Python class for a 'Movie' object that contains a movie title, release year, and rating.","class Movie:
    def __init__(self, title, year, rating):
        self.title = title
        self.year = year
        self.rating = rating"
Suggest a Python code to identify the median element of a given list,"def find_median(example_list):
    example_list.sort()
    if len(example_list) % 2 == 0:
        median = (example_list[int(len(example_list)/2)-1] + example_list[int(len(example_list)/2)])/2
    else:
        median = example_list[int((len(example_list)-1)/2)]
    return median"
Implement an algorithm in Python to sort a list of integers.,"def sort(arr):
 for i in range(len(arr)):
 min_idx = i
 for j in range(i+1, len(arr)):
 if arr[min_idx] > arr[j]:
 min_idx = j
 arr[i], arr[min_idx] = arr[min_idx], arr[i]

list = [3, 9, 8, 5, 6, 4, 2, 1, 10, 7]
sort(list)
print(list) # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
Design a class in Python to store details of a person,"class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

person = Person('John', 34)"
Create a python program that takes a string and prints the reverse of it.,"""""""
Create a python program that takes a string and prints the reverse of it
""""""

# Get the input string 
my_string = input('Enter a string: ') 

# Reverse the string 
rev_string = my_string[::-1] 

# Print the reversed string
print(rev_string)"
Generate a function in Python to return the highest value in a dictionary for the given key.,"def highestValue(dictionary, key): 
    highest = 0 
    for key,value in dictionary.items(): 
        if value > highest: 
            highest = value 
    return highest 

highestValue(dictionary, key)"
Design a Python program to reverse the words in a sentence.,"def reverse_words(sentence):
    words = sentence.split("" "")
    reversed_words = reversed(words)
    reversed_sentence = "" "".join(reversed_words)
    return reversed_sentence

result = reverse_words(""The quick brown fox"")
print(result)"
"Using regular expression, construct a pattern in Python to identify strings of the form ""word1word2word3word4word5"".","import re
pattern = r""\b(\w+)\b(\w+)\b(\w+)\b(\w+)\b(\w+)\b"""
Develop a Python program to count the frequency of each word in a given string.,"def countFreq(str): 
      
    # break the string into words  
    str = str.split("" "")  
      
    # Count each word using Dictionary  
    freq = {} 
    for word in str: 
        if word in freq: 
            freq[word] += 1
        else: 
            freq[word] = 1
    return freq"
Implement a program in Python to generate a multiplication table for the given integer.,"def multiplication_table(n): 
  
    for i in range(1, 11): 
        print(""{0:>2} X {1:2} = {2:2}"".format(n, i, n*i)) 
  
multiplication_table(6)"
Write a Python program to find the maximum possible sum of a sequence of consecutive numbers in a given array of integers.,"def max_sum_sequence(arr):
    curr_max = 0
    max_so_far = 0
  
    for i in range(0, len(arr)):
        curr_max = max(arr[i], curr_max + arr[i])
        max_so_far = max(max_so_far, curr_max)
      
    return max_so_far

arr = [2, 6, -2, -3, 8, 4]
max_sum = max_sum_sequence(arr)
print(max_sum)"
Generate an optimized python program to calculate the sum of all digits in a given positive integer number.,"input_number = 123456 

def find_sum_of_digits(number): 
    n = number 
    sum = 0
    while n > 0:
        sum += n % 10
        n //= 10
    return sum 

sum_of_digits = find_sum_of_digits(input_number) 
print(""Sum of all digits in {} is {}."" .format(input_number,sum_of_digits))"
Create a code snippet in Python that calculates the sum of the digits of a number.,"def sum_of_digits(number):
  sum_digits = 0
  while number > 0:
    sum_digits += (number % 10)
    number //= 10
  return sum_digits
  
print(sum_of_digits(123))"
Create a function in Python to return the media according to the following criteria:,"def get_median(num_list):
    sorted_list = sorted(num_list)
    length = len(sorted_list)
    if (length % 2 == 0):
        median = (sorted_list[length//2] + sorted_list[length//2 -1])/2.0
    else:
        median = sorted_list[length//2]
    return median"
Create a Python program to sort a given list according to the second element,"def sortList(list):
    list.sort(key=lambda x: x[1]) 
    return list

list = [[2,4], [3,2], [4,1], [1,3]]
sorted_list = sortList(list)

print(sorted_list)

# output
[[4, 1], [3, 2], [1, 3], [2, 4]]"
Write a function in Python to sort the data in lexicographical order.,"def sortLexicographical(data):
    return sorted(data, key=lambda x:x[0])

sorted_data = sortLexicographical([""red"", ""blue"", ""green"", ""purple"", ""pink"", ""black"", ""white""])
print(sorted_data)"
"Write a function in Python to generate a list of integers from 0 to 10,000, inclusive.","def generate_list():  
  my_list = []
  for i in range(0, 10001):
    my_list.append(i)

  return my_list"
Construct a Python program that prints out all the numbers from 1 to a given number n.,"def print_numbers(n):
 for num in range(1, n+1):
 print(num)"
Craft a Python function to convert a given string to an integer,"def string_to_int(string):
    result = 0
    for char in string:
        result = result*10 + (ord(char) - ord('0')) 
    return result"
Write a function to find the list of lists with minimum length.,"def min_length(list1):
   min_length = min(len(x) for x in  list1 )  
   min_list = min((x) for x in   list1)
   return(min_length, min_list)     "
Design a recursive Python function that prints the Fibonacci series from 0 to n.,"def fibonacci(n):
  if n == 0:
    return 0
  elif n == 1:
    return 1
  else:
    return fibonacci(n - 1) + fibonacci(n - 2)
    
for i in range(0, n + 1):
    print(fibonacci(i))"
Construct a for-loop in Python to repeat a code snipet 10 times.,"for i in range(10):
    print(""This code is being repeated 10 times"")"
Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.,"import heapq
def cheap_items(items,n):
  cheap_items = heapq.nsmallest(n, items, key=lambda s: s['price'])
  return cheap_items"
Create a basic web scraper in Python to parse HTML.,"#import library
import bs4

#store HTML data
html_data = '<p>This is some text</p><a href='www.example.com/'>Click Here</a>'

#parse HTML data
soup = bs4.BeautifulSoup(html_data, 'html.parser')

#get all tags
all_tags = soup.find_all()

#print result
for tag in all_tags:
 print(tag)"
"Given a list of [x,y] coordinates, write a Python program to check whether the two points are on a straight line or not.","def line_checker(points):
    is_straight = True
    ref_x, ref_y = points[0]
    for i in range(1, len(points)):
        x, y = points[i]
        if (ref_y - y) * (ref_x - x) != 0:
            is_straight = False
            break
    return is_straight

points = [[3,3], [2,2], [1,1]]

print(line_checker(points))"
Create a basic Python application that prints out the prime numbers between 0 and 1000.,"primes = []

for num in range(2, 1001):  
  
 for i in range(2, num):
  if (num % i) == 0:
   break
 else:
  primes.append(num)

print(primes)"
Edit the given python program to display the sum of all even numbers in the given list.,"list = [1, 2, 3, 4, 5]

total = 0
for num in list:
  if (num % 2 == 0):
    total += num
print (total)"
"Write a loop in Python to print the words ""hello world"" 3 times.","for i in range(3):
    print(""Hello World"")"
Convert the following Python function to C++,"int sum_list(vector<int>& numbers) {
  int result = 0;
  for (auto& n : numbers) {
    result += n;
  }
  return result;
}"
Create a function for adding two numbers in Python.,"def add(num1, num2):
    return num1 + num2

print(add(1, 2))"
Assign a constant to the value of Pi in a Python program.,PI = 3.141592653589793
Create a python function to calculate the factorial of a integer input.,"def factorial(n):
    """"""Calculate the factorial of an integer.""""""
    if n <= 1:
        return 1
    return n*factorial(n-1)"
Generate a Python function that takes as input a UTF-8 encoded string and returns a string where the characters in odd positions of the original string are repeated.,"def repeat_char(s):
    result = ''
    for i,c in enumerate(s):
        if i % 2 == 0:
            result += c
        else:
            result += c*2
    return result

print(repeat_char('HelloWorld'))
# Output: HeellooWorrlld"
Design a function in Python to sort a list of numbers in increasing order using a recursive insertion sort algorithm.,"def recursiveInsertionSort(arr):
    for i in range(1, len(arr)):
        currElem = arr[i]
        j = i - 1
        while j >= 0 and arr[j] > currElem:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = currElem
    return arr"
Generate a program in Python for sorting the elements of an array in descending order.,"def sort_descending(arr):
    # Sort array from largest to smallest
    arr.sort(reverse=True)

    # Print result
    print(arr)

# Test
arr = [2, 4, 1, 6, 5]
sort_descending(arr)
# Output: [6, 5, 4, 2, 1]"
Create a Python program to check if a given sentence is a pangram or not. A pangram is a sentence that contains all the letters of the alphabet at least once.,"import string

def is_pangram(sentence):
    sentence = sentence.lower()
    alphabet = string.ascii_lowercase
    for letter in alphabet:
        if letter not in sentence:
            return False
    return True"
Develop a Python function that removes duplicate elements from a given list and returns a list with unique elements.,"def remove_duplicates(my_list):
 new_list = []

 for item in my_list:
 if item not in new_list:
 new_list.append(item)

 return new_list

my_list = [1,2,3,3,4,5,5,5,6,7,7]
my_list = remove_duplicates(my_list)
print(my_list)
# [1, 2, 3, 4, 5, 6, 7]"
Create a list of even numbers from 0 to 30 in one line of Python.,"even_numbers = [num for num in range(0, 31) if num % 2 == 0]"
Generate a random number in Python between 2 inclusive numbers.,"import random

num = random.randint(min, max)
print(num)"
Port a Java code snippet to Python 3.,"def foo(a, b):
 return a + b"
Write a Python program to generate a bar chart visualizing a dataset.,"import matplotlib.pyplot as plt

#create data
data = [3, 5, 2, 8, 9, 10]

#set plot size
plt.figure(figsize=(5, 2))

#generate the bar chart
plt.bar([str(i) for i in range(1, len(data)+1)], data)
plt.show()"
Suggest a completion for the following Python code so that it prints all the numbers between 0 and 10 (inclusive).,"for num in range(11):
    print(num)"
Create a Python function to calculate the volume of a cube by taking its side length as input.,"def cube_volume(side_length):
    return side_length ** 3

volume = cube_volume(side_length)
print(f""Volume of cube is {volume}"")"
Create a hierarchical clustering algorithm in Python to group data points into clusters.,"import numpy as np
from scipy.cluster.hierarchy import dendrogram, linkage

# define the data points
data_points = np.array([1,2,3,4,5])

# create the linkage matrix
linkage_matrix = linkage(data_points, 'ward')

# generate the dendrogram
dendrogram(linkage_matrix)"
Create a Python script to split a string into an array of substrings based on a given delimiter.,"def split(text, delimiter):
  substring = []
  temp = """"
   
  for i in text:
    if i != delimiter:
      temp += i
    else:
      substring.append(temp)
      temp = """"
  substring.append(temp)
  
  return substring
    
text = ""one-two-three-four""
print(""Original String: ""+text)

print(""Split String:"",split(text,'-'))"
Write a python program that generates a random IP address.,"import random

def generate_random_IP():
    ip = """"
    for i in range(4):
        ip += str(random.randint(0, 255))
        if i != 3:
            ip += "".""
    return ip"
Write a function to find whether an array is subset of another array.,"def is_subset(arr1, m, arr2, n): 
	hashset = set() 
	for i in range(0, m): 
		hashset.add(arr1[i]) 
	for i in range(0, n): 
		if arr2[i] in hashset: 
			continue
		else: 
			return False
	return True		"
Optimize the following Python code by replacing the two for loops with one.,"list1 = [1,2,3]
list2 = [4,5,6]
 
for i,j in zip(list1, list2):
    print(i * j)"
Write a method in Python to check whether two strings are an anagram of each other.,"def isAnagram(string1, string2):
 s1 = sorted(string1)
 s2 = sorted(string2)
 
 return s1 == s2"
Create an algorithm in Python to calculate the sum of all numbers between two given numbers.,"def sumInRange(lower_limit, upper_limit): 
    
    # initialize sum variable 
    sum = 0; 
  
    # calculate sum of all numbers between 
    # lower_limit & upper_limit 
    for i in range(lower_limit, upper_limit + 1): 
        sum += i 
    
    # return the output 
    return sum;"
Create an optimized Python program to print all prime numbers in a given range.,"def is_prime(n):
    if n <= 1:
        return False
  
    for i in range(2, n):
        if n % i == 0:
            return False
  
    return True
 
start = 4
end = 15
 
for num in range(start, end+1):
   if is_prime(num):
       print(num)"
"Create a Python program to generate random passwords that contains numbers, alphabets (upper and lower) and special characters","import random
 
# define string of all characters
string = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+~<>?'
 
# specify length of random password
length = 8
 
# generate random password
random_password = """"
for i in range(length):
    random_password = random_password + random.choice(string)

print(random_password)"
Edit the following Python program to remove the redundant lines.,"def foo(list):        
    list.append(1)         
    list.append(2)
    list.append(3)
    return list

list = [1, 2, 3]"
Write a Python program to combine two lists by alternating elements,"def combine_list(list1, list2):
  combined_list = []
  for i in range(max(len(list1), len(list2))):
    if i < len(list1):
      combined_list.append(list1[i])
    if i < len(list2):
      combined_list.append(list2[i])
  return combined_list"
Create a Python function that prints the next prime number after a given number.,"def is_prime(n):
 
 if n <= 1:
 return False
 
 for i in range(2, int(n**0.5)+1):
 if n % i == 0:
 return False
 
 return True
 
 
def next_prime(num):
 
 if is_prime(num):
 num += 1
 
 while (True):
 if is_prime(num):
 return num
 
 num += 1
 
 
num = 19
print(next_prime(num))
# Output: 23"
Create a list in Python that stores the names of 10 different fruits.,"fruits = ['apple', 'banana', 'grape', 'pineapple', 'strawberry', 'orange', 'mango', 'pear', 'peach', 'kiwi']"
Create a Python program to read a web page and print all of the links and their text,"import re
from urllib.request import urlopen

html = urlopen(""http://www.example.com/"").read().decode('utf-8')
links = re.findall(""<a href=(.*?)>(.*?)</a>"", html) 
 
for link in links:
    print(""Link: "", link[0])
    print(""Text: "", link[1])"
Write a Python program to find the area of a triangle given its lengths of sides.,"def triangle_area(a, b, c): 
	s = (a + b + c) / 2
	return (s*(s-a)*(s-b)*(s-c)) ** 0.5

result = triangle_area(7, 6, 8)
print(result)"
"Write a script in Python to generate random strings containing uppercase, lowercase, and numeric characters up to a length of 8.","import random
import string

def random_string(stringLength=8):
    letters_and_numbers = string.ascii_uppercase + string.ascii_lowercase + string.digits
    return ''.join(random.choice(letters_and_numbers) for i in range(stringLength))"
Write a for loop to iterate over the given list in Python.,"for x in list:
    print(x)"
Create a Python program to determine if a given character is an uppercase or lowercase alpha character.,"def check_alpha_case(char):
    """"""
    Determine if a given character is an uppercase or lowercase alpha character.
    char: the character to be checked
    """"""
    if char.isalpha() and char.isupper():
        return ""uppercase""
    elif char.isalpha() and char.islower():
        return ""lowercase""
    else:
        return False"
Write a python program to shuffle a given list in random order.,"import random

def shuffle_list(lst):
    random.shuffle(lst)
    return lst

print(shuffle_list([3, 8, 2, 5, 4])) # prints [2, 3, 5, 4, 8] or any other combination"
Write a Python function to check if a given list of numbers is sorted in ascending order or not.,"def is_sorted_asc(list_numbers):
 for i in range(len(list_numbers) - 1):
 if list_numbers[i] > list_numbers[i + 1]:
 return False
 return True
 
result = is_sorted_asc(list_numbers)
print(result) # False"
Write a function to extract the frequency of unique tuples in the given list order irrespective.,"def extract_freq(test_list):
  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))
  return (res)"
Transform the following code from JavaScript to Python.,"if cur_price > max_price:
  max_price = cur_price"
Write a function to find the union of elements of the given tuples.,"def union_elements(test_tup1, test_tup2):
  res = tuple(set(test_tup1 + test_tup2))
  return (res) "
Write a function in Python that returns an object of the following time and date: Sunday March 7 5:30 PM.,"from datetime import datetime

def get_date_time():
    dt = datetime(year=2021, month=3, day=7, hour=17, minute=30)
    return dt

date_time = get_date_time()
print(date_time) # will output 2021-03-07 17:30:00"
Generate Python code to print the following output.,"for i in range(1, 6):
  for j in range(i):
    print(""*"", end="""")
  print()"
Update a given MongoDB document using Python.,"import pymongo

# Open connection
client = pymongo.MongoClient(""mongodb://localhost:27017/"")
db = client[""mydatabase""]

# Update document
db.collection.update_one(
    {""name"": ""John Doe""},
    {""$set"": {""age"": 28}}
)

# Close connection
client.close()"
Write a Python code snippet to remove the last element from a list.,"def remove_last_element(lst):
    last_index = len(lst) - 1
    del lst[last_index]

example_list = [3, 1, 5, 7, 4, 8, 2]
remove_last_element(example_list)
print(example_list) 
# Output: [3, 1, 5, 7, 4, 8]"
Generate a python code to find the sum of the n terms of a series given the first term and the common ratio,"def find_sum_series(a, r, n):
    sum = 0
    for i in range(1, n + 1):
        sum = sum + a*(r**(i - 1))
    return sum"
Construct a function in Python that takes a list of integers and a number and returns the number of occurrences of the number in the list.,"def count_occurrences(lst, num):
    count = 0
    for item in lst:
        if item == num:
            count += 1
    return count"
Write a Python program to get the sum of a given array of numbers.,"def get_sum(nums):
    sum = 0
    for num in nums:
        sum += num
    return sum

result = get_sum([1, 2, 3])
print(result)
# Output: 6"
Create an algorithm in Python to print the binary representation of a given number.,"def binary_rep(num):
    binary_string = """"
    while num>0:
        remainder = num%2
        binary_string = str(remainder) + binary_string
        num = num//2

    print(binary_string)

binary_rep(23) # prints 10111"
Write a Python program to take a string as input and return a new string with all vowels removed.,"def remove_vowels(string):
    # compile regex
    regex = re.compile('[aeiou]', re.IGNORECASE)
    # replace matching characters with an empty string
    return regex.sub('', string)"
Create a Python script to calculate the circumference of a circle given its radius.,"def calc_circumference(radius):
  circumference = 2 * 3.14 * radius
  return circumference
  
circumference = calc_circumference(radius)
print(circumference)"
"Edit the following Python code to print ""Hello World"" in a loop 10 times.","for i in range(10):
    print(""Hello World"")"
Implement a function in Python that prints the average of the two numbers passed as arguments.,"def compute_average(x, y):
	return (x + y) / 2

print(compute_average(x,y))"
Generate a list of the top 10 common words in a given list of words.,"from collections import Counter

words = ['Python', 'programming', 'language', 'is', 'powerful', 'and', 'versatile']

word_counts = Counter(words)
top_10 = word_counts.most_common(10)
print (top_10)"
Write a python program to filter a list of numbers and remove those that are divisible by 3.,"def filter_list(nums):
    return [num for num in nums if num % 3 != 0]

print(filter_list(nums)) # Output: [12, 14, 20, 21]"
Design a solution in Python that creates a deep copy of an array of numbers.,"original_list = [1,2,3,4,5]

# Create a copy of the original list
copied_list = original_list[:]

# Modify the copied list so we can verify that it is a deep copy
copied_list[0] = 10

# Print both lists - the original list should be unchanged
print(""Original list:"", original_list)
print(""Copied list:"", copied_list)"
Write a Python program that takes in a list of strings and prints out the string with the most characters,"longest_str = """"
for string in list_of_strings:
    if len(string) > len(longest_str):
        longest_str = string

print(longest_str)"
Create a basic script in Python that can automatically sort a list of items by price.,"items.sort(key=lambda x: x['price'])

print(items)
# Output:
[{'name': 'Sprite', 'price': 1.99},
{'name': 'Pepsi', 'price': 2.99},
{'name': 'Coca Cola', 'price': 3.99}]"
Design a Python algorithm to merge two sorted lists.,"def merge_two_lists(list1, list2):
    merged_list = []
        
    while list1 and list2:
        if list1[0] < list2[0]:
            merged_list.append(list1.pop(0))
        else:
            merged_list.append(list2.pop(0))
    merged_list.extend(list1 or list2)
    return merged_list"
"Given a list of integers, write a Python function to find the largest consecutive sum of elements in the list.","def largest_consecutive_sum(nums):
    max_sum = 0
    total_sum = 0
    for num in nums:
        total_sum += num
        if total_sum > max_sum:
            max_sum = total_sum
    return max_sum"
Create a search algorithm in Python that takes two inputs 'word' and 'text' and returns true if the word is present in the text.,"def search(word, text):
    words = text.split()
    for w in words:
        if w == word:
            return True
    return False"
Write a Python program to generate a random color palette of five colors.,"import random

# List of ten random colors
colors = [""#000000"", ""#FFFFFF"", ""#A52A2A"", ""#008080"", ""#DAA520"", ""#008000"", ""#FF00FF"", ""#808080"", ""#800000"", ""#808000"", ""#FFC0CB""]

# Function that randomly selects five colors from the list
def generate_colors():
 random.shuffle(colors)
 palette = colors[:5]
 return palette

# Generates and prints random color palette
print (generate_colors())"
Create a function in Python that takes two strings as parameters and returns the string that has the longest length.,"def longest_string(string1, string2):
    if len(string1) > len(string2):
        return string1
    else:
        return string2

string1=""Python""
string2=""Programming""

print(longest_string(string1, string2))"
Create a web scraper using Python that collects data from the given URL - http://example.com/,"import requests
from lxml import html

# Get the response
resp = requests.get('http://example.com/')

# Parse the response
doc = html.fromstring(resp.text)

# Extract the data
data = doc.xpath('//div/span/text()')

# Print out the data
print(data)"
Create a Python program to compute the greatest common divisor (GCD) for two given numbers.,"def gcd(x, y):
 
    # Using Euclidean algorithm 
    while(y): 
        x, y = y, x % y 
  
    return x 
  
# Driver Code 
a = 24
b = 32
  
gcd = gcd(a, b) 
print(""GCD of"", a, ""and"", b, ""is:"", gcd)"
Compose a program in Python to convert every word of a given string to uppercase letters.,"def to_uppercase(sentence):
    words = sentence.split(' ')
    new_sentence = []
    for word in words:
        new_sentence.append(word.upper())
    return ' '.join(new_sentence)

if __name__ == '__main__':
    print(to_uppercase(sentence))"
Write a function to find the surface area of a cylinder.,"def surfacearea_cylinder(r,h):
  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))
  return surfacearea"
Generate python code to encode a given string in base64.,"def base64_encode(string):
    encoded_string = base64.b64encode(string.encode('utf-8')) 
    return encoded_string.decode('utf-8')"
Maxminizing a Black-Box function (Python),"import scipy.optimize

# define the black box function
def black_box(x):
    return x ** 2 + 40

# set the initial parameters 
start = (0, 0)

# minimize the black box function
res = scipy.optimize.minimize(black_box, start, method=""L-BFGS-B"")

# print the result
print(res.x) # prints [0.]"
Write a Python class for Polygon which has the ability to compute the perimeter of a polygon.,"class Polygon:
    def __init__(self, num_of_sides):
        self.number_of_sides = num_of_sides
        self.sides = [0 for i in range(num_of_sides)]

    def input_sides(self, sides):
        self.sides = sides

    def perimeter(self):
        peri = 0
        for side in self.sides:
            peri += side
        return peri"
Write a Python code to handle this data loading task.,"import pandas as pd

def load_data(csv_file):
    '''This function will load the CSV file and store the data in a DataFrame'''
    
    data = pd.read_csv(csv_file, sep=',', encoding='utf-8')
    return pd.DataFrame(data)"
Edit this Python function such that it takes an optional parameter x.,"def add_two_numbers(a, b, x=0):
    return a + b + x"
Edit the following Python code to make it run without any errors,"def find_sum(x):
    sum = 0
    for i in x:
        sum += i
    return sum"
Write a function to insert a given string at the beginning of all items in a list.,"def add_string(list,string):
 add_string=[string.format(i) for i in  list]
 return add_string"
Write a python function to convert a given string list to a tuple.,"def string_list_to_tuple(str1):
    result = tuple(x for x in str1 if not x.isspace()) 
    return result"
Calculate the square root of 68 using Python.,"import math

# Calculate the square root of 68
sqrt_num = math.sqrt(68)

# Print the result
print(""The square root of 68 is:"", sqrt_num)"
"Create a program in Python to convert a given number of days to years, months and days.","def convert_to_ymd(days):
  years = days // 365
  months = (days % 365) // 30
  days = (days % 365) % 30
  return years, months, days"
Generate a Python code to compute the area of a triangle given its three sides.,"def calculate_area(s1, s2, s3):
    # calculate the semi-perimeter
    s = (s1 + s2 + s3) / 2
    # calculate area using Heron's formula
    area = (s*(s-s1)*(s-s2)*(s-s3)) ** 0.5
    return area

if __name__==""__main__"":
    s1 = 3
    s2 = 4
    s3 = 5
    area = calculate_area(s1, s2, s3)
    print(""Area of triangle is: {:.2f}"".format(area))"
Design a Random Forest classifier for commercial lending in Python.,"from sklearn.ensemble import RandomForestClassifier

# Create a random forest classifier
clf = RandomForestClassifier(max_depth=5, random_state=0, n_estimators=100)

# Train the classifier
clf.fit(X_train, y_train)

# Predict new values
y_pred = clf.predict(X_test)"
Create a python program to generate the 1st 10 Fibonacci numbers.,"def generate_fibonacci():
    """"""This program generates the 1st 10 Fibonacci numbers.""""""
    a, b = 0, 1
    result = []
    for i in range(1, 11):
        a, b = b, a + b
        result.append(a)
    return result"
Write a Python script to rewrite the four-digit year of birth in the YYYY-MM-DD format.,"def formatYear (birthYear):
 return str(birthYear)+""-01-01"""
Create a feature in Python to extract the category information from a given URL.,"def extract_category_from_url(url):
    # Extract the hostname from the URL
    hostname = urlparse(url).hostname
    # Split the hostname on '/'
    categories = hostname.split('/')
    return categories"
Write a python function to find minimum sum of factors of a given number.,"def find_Min_Sum(num): 
    sum = 0
    i = 2
    while(i * i <= num): 
        while(num % i == 0): 
            sum += i 
            num /= i 
        i += 1
    sum += num 
    return sum"
Generate a python program to find the year of the oldest movie,"def oldest_movie(movies):
    oldest_year = movies[0][""releaseYear""]
    for movie in movies: 
        if movie[""releaseYear""] < oldest_year:
            oldest_year = movie[""releaseYear""]
    return oldest_year"
Write a function to get a lucid number smaller than or equal to n.,"def get_ludic(n):
	ludics = []
	for i in range(1, n + 1):
		ludics.append(i)
	index = 1
	while(index != len(ludics)):
		first_ludic = ludics[index]
		remove_index = index + first_ludic
		while(remove_index < len(ludics)):
			ludics.remove(ludics[remove_index])
			remove_index = remove_index + first_ludic - 1
		index += 1
	return ludics"
Write a blank Python program to convert celsius to fahrenheit.,"def celsius_to_fahrenheit(celsius):
    """"""
    This function converts the given celsius value to its corresponding fahrenheit value
    """"""
    fahrenheit = (celsius * (9/5)) + 32
    return fahrenheit"
Write a recursive Python function to calculate a factorial of positive integer,"def factorial(n): 
    if n == 0: 
        return 1
    else: 
        return n * factorial(n-1)"
Write a Python program to make a web crawler that fetches all the links on a webpage.,"import requests
from bs4 import BeautifulSoup 

def get_all_links(url):
  # make a GET request to fetch the raw HTML content
  html_content = requests.get(url).text
  
  # parse the html content
  soup = BeautifulSoup(html_content, ""lxml"")
  
  # fetch all anchors
  links = soup.find_all(""a"")

  for link in links:
    print(link.get(""href""))

get_all_links(""https://www.example.com"")"
Explain the concept of lists and dictionaries in Python.,Lists in Python are sequences of different data types that are ordered and mutable. They allow us to store multiple items in a single variable. Dictionaries are unordered sets of key-value pairs that are used for storing data. Keys must be unique and of immutable data type whereas values may not be. Dictionaries are used for mapping purposes and can be used for more powerful data access.
Create a Completion function in Python that takes a string and returns a list of strings that match the input string.,"def completion(string):
  results = []
  words = [""the"", ""that"", ""this"", ""those"", ""thing"", ""think"", ""thought""]
  for word in words:
    if len(word) > 2 and word.startswith(string):
      results.append(word)
  return results
  
print(completion(""th"")) # Output: [""those"", ""think"", ""thought""]"
Create a python script that extracts the first ten words from a given text.,"import re

text = ""The quick brown fox jumps over the lazy dog""

# Extract words using a regular expression
words_list = re.findall(r""[\w']+"", text)

# Print the first ten words
print(words_list[:10])"
Implement a decision tree model in Python for classifying a dataset.,"import numpy as np
from sklearn import tree

# Load the data
data = np.genfromtxt(""data.csv"", delimiter="","")
X = data[:,:-1]
y = data[:,-1]

# Create and train the decision tree model
clf = tree.DecisionTreeClassifier()
clf = clf.fit(X, y)

# Use the model to predict values
predictions = clf.predict(X)"
Can you design a function in Python for reversing a list?,"def reverse_list(list): 
    return list[::-1]"
"Create a Python function, that when called with a string argument, will return all of the possible substrings of that string.","def all_substrings(string):
  sub_strings = []
  for i in range(len(string)):
    for j in range(i+1, len(string)+1):
      sub_strings.append(string[i:j])
  return sub_strings"
Write a socket program in Python to send and receive data.,"import socket

HOST = '127.0.0.1'  # The server's hostname or IP address
PORT = 65432        # The port used by the server

with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
    s.connect((HOST, PORT))
    s.sendall(b'Hello, world')
    data = s.recv(1024)

print('Received', repr(data))"
Write a python function to find the first digit in factorial of a given number.,"import math 
def first_Digit(n) : 
    fact = 1
    for i in range(2,n + 1) : 
        fact = fact * i 
        while (fact % 10 == 0) :  
            fact = int(fact / 10) 
    while (fact >= 10) : 
        fact = int(fact / 10) 
    return math.floor(fact) "
Write a “while” loop to display all even numbers up to the nth term in Python.,"num = 1
while num <= n:
    if num % 2 == 0:
        print(num)
    num += 1"
Write a function to add two lists using map and lambda function.,"def add_list(nums1,nums2):
  result = map(lambda x, y: x + y, nums1, nums2)
  return list(result)"
Create a Python program to search through a list of names and print out any names that contain the letter 'a'.,"names = [""John"", ""Paul"", ""George"", ""Ringo"", ""Adam"", ""Peter"", ""Alice"", ""Karen"", ""Jerry""]

for name in names:
 if 'a' in name:
 print(name)

# Output
Adam
Alice
Karen"
Generate a Python script that outputs the first ten perfect squares from 1 to 100.,"for i in range(1, 11):
    print(str(i**2))"
Write a Python program to find the sum of all integers in a given list that are multiples of 8.,"# Initializing list 
l = [4, 8, 12, 17, 30] 

# Function to calculate sum 
def sum_multiples(l): 
	sum = 0
	
	# iterating over list 
	for num in l: 
		
		# checking for multiples of 8 
		if num % 8 == 0: 
			sum += num 
			
	return sum

# Driver code 
print(sum_multiples(l)) 
# Output: 20"
Create a function to convert a string to a list using Python.,"def string_to_list(text):
    lst = text.split()
    return lst

text = ""This is a sentence.""
print(string_to_list(text))"
Write a Python program to create a list of powers of x for any given x.,"def power_list(x):
    return [x**i for i in range(16)]"
Generate a code to merge two python dictionaries and update the values.,"def merge_dicts(dict_1, dict_2):
    # copy both dictionaries
    merged_dict = dict_1.copy()  
    merged_dict.update(dict_2)  
    return merged_dict

print(merge_dicts(dict_1, dict_2))"
Can you generate a Python loop to print out each item in a given list?,"myList = [""item1"", ""item2"", ""item3""]

for item in myList:
    print(item)"
Rewrite the code in Python to improve its readability.,"import math

def calculate_area(radius):
    return math.pi * (radius ** 2)"
Identify (classify) the programming language used in the following code snippet.,Python
Build a sorting algorithm in Python that sorts an array of integers.,"def sort_arr(arr):
    for i in range(len(arr)): 
        min_idx = i 
        for j in range(i+1, len(arr)): 
            if arr[min_idx] > arr[j]: 
                min_idx = j

        arr[i], arr[min_idx] = arr[min_idx], arr[i]
    return arr

result = sort_arr([5, 3, 1, 4, 2])
print(result)"
Write a function to find frequency of the elements in a given list of lists using collections module.,"from collections import Counter
from itertools import chain
def freq_element(nums):
  result = Counter(chain.from_iterable(nums))
  return result"
Create a Python program that takes a given list and returns a new list without any duplicates.,"def remove_duplicates(lst):
    new_list = []
    for i in lst:
        if i not in new_list:
            new_list.append(i)
    
    return new_list"
Write a Python program to generate all possible permutations of a given set of elements.,"def permutations(elements):
    if len(elements) <=1:
        yield elements
    else:
        for perm in permutations(elements[1:]):
            for i in range(len(elements)):
                yield perm[:i] + elements[0:1] + perm[i:]

result = list(permutations([1, 2, 3]))
print(result)"
Can you implement a function in Python that takes a list of two numbers as input and returns the sum of the two numbers?,"def add(nums):
    return nums[0] + nums[1]

print(add([5, 10]))  #Prints 15"
Build an API endpoint in Python with Flask to return the current date and time.,"from flask import Flask
import datetime

app = Flask(__name__)

@app.route('/date_time')
def get_date_time():
   return datetime.datetime.now()

if __name__ == '__main__':
    app.run()"
Create a Python program that takes an expression as input and evaluates it.,"def calculate(expr):
    return eval(expr)

result = calculate(""4 + 7"")
print(result)"
"Using Python, detect if the given string is a palindrome or not.","def isPalindrome(s): 
    s = s.lower()
    return s == s[::-1]

string_input = ""madam""
palindrome_status = isPalindrome(string_input)

if palindrome_status:
    print(""The given string is a Palindrome"")
else:
    print(""The given string is not a Palindrome"")"
Write a function to re-arrange the given tuples based on the given ordered list.,"def re_arrange_tuples(test_list, ord_list):
  temp = dict(test_list)
  res = [(key, temp[key]) for key in ord_list]
  return (res) "
Compose a line of Python code to insert an element into a given list.,"list1 = [1, 3, 7, 8]
element = 5

list1.insert(2, element)
print(""New list:"", list1)"
Classify the following Python code as a function or a class.,Class
Convert the following Regular Expression matching code to a Regular Expression replacement code in Python.,"import re

re_match = ""\w+@\w+\.\w+""
re_replace = ""<valid email>""

print(re.sub(re_match, re_replace, ""my_email@example.com""))"
Create an algorithm in Python to search for a given item in a dictionary.,"def search(dict, item): 
    for key, value in dict.items(): 
        if item == value: 
            return True 
    return False

dict = {'name': 'john', 'age': 22, 'city': 'New York'}
item = 'John'
print(search(dict, item))"
Design an algorithm in Python for finding out the factorial of a given number.,"def factorial(n):
 fact = 1
 for i in range(2,n+1):
  fact = fact * i
 return fact"
Find the smallest element in a 2D array using Python.,"def find_smallest_element_2D(arr):
    smallest = float('inf')
    for row in arr:
        smallest = min(smallest, min(row))
    return smallest"
"Create a class in Python that describes a student. This class should have public attributes for their name, age, grade level and major.","class Student:
 def __init__(self, name, age, grade, major):
  self.name = name
  self.age = age
  self.grade = grade
  self.major = major"
Suggest a Python program that prints out the unique strings in a list of strings.,"list_of_strings = ['hello', 'world', 'hello', 'moon', 'sun']
unique_strings = set(list_of_strings)

for string in unique_strings:
    print(string)"
Compose a function to find the maximum value in an array in Python.,"def find_max_value(arr):
    max_value = arr[0]
    for i in range(1, len(arr)):
        if arr[i] > max_value:
            max_value = arr[i]
    return max_value

array = [1,4,2]
res = find_max_value(array)
print (res)"
"Write a python program to evaluate the expressions of the form ""x op y"" (op is any of the +,-,*,/,%)","def evaluate_expr(expr): 
    op, x, y = expr.split() 
    if op == '+' : 
        return float(x) + float(y) 
    if op == '-' : 
        return float(x) - float(y) 
    if op == '*' :
        return float(x) * float(y) 
    if op == '/' :
        return float(x) / float(y) 
    if op == '%':
        return float(x) % float(y)"
Create a Python function to calculate the magnitude of a 2D vector.,"def calc_magnitude(v1):
 return math.sqrt(v1[0]**2 + v1[1]**2)"
code a recursive function in Python that accepts a list of integers and prints the sum of all even numbers.,"def print_even_sum(L): 
    if len(L) == 0: 
        return 0
  
    if L[0] % 2 == 0: 
        return L[0] + print_even_sum(L[1:]) 
    else: 
        return print_even_sum(L[1:]) 
  
L = [1, 2, 3, 4, 5, 6, 7, 8] 
print(""Sum of even numbers in the list:"", print_even_sum(L))"
Create a program in Python that prints out the first 10 prime numbers.,"import math

def is_prime(n):
    if n == 1:
        return False
    
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True

prime_nums = []

for i in range(2, 1000):  
    if is_prime(i):
        prime_nums.append(i)
        if len(prime_nums) == 10:
            break

for item in prime_nums:
    print(item)"
"Write a python program to generate random passwords of 8 characters, containing uppercase and lowercase alphabets and numbers.","import string
import random

def generate_password():
    characters = string.ascii_letters + string.digits
    return ''.join(random.choice(characters) for i in range (8)) 

print(generate_password())"
Write a Python program to convert miles to kilometers,"miles = 10
kilometers = miles * 1.60934
print(f""{miles} miles is equal to {kilometers} kilometers"")"
Generate an efficient implementation of quicksort in Python.,"def quicksort(arr):
    if len(arr) <= 1:
        return arr
        
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quicksort(left) + middle + quicksort(right)

result = quicksort([3,6,8,10,1,2,1])
print(result)"
Create an algorithm to automate sorting of a list of integers in descending order in Python.,"def bubbleSort(list): 
    for num in range(len(list)-1,0,-1): 
        for i in range(num): 
            if list[i] < list[i+1]: 
                temp = list[i] 
                list[i] = list[i+1] 
                list[i+1] = temp 
  
list = [54,26,93,17,77,31,44,55,20] 
bubbleSort(list) 
print(""Sorted list:"")
for i in range(len(list)): 
    print(list[i],end="" "")"
Generate a Python class to define a complex number and an operator overloading function to add two complex numbers.,"class ComplexNumber:
    def __init__(self, real, imaginary):
        self.real = real
        self.imaginary = imaginary
    
    def __add__(self, other):
        return ComplexNumber(self.real + other.real, 
                    self.imaginary + other.imaginary)"
Write a function to remove a given item from a python list.,"def remove_item(lst, item):
    while item in lst:
        lst.remove(item)
    return lst

print(remove_item([1, 4, 8, 2], 8)) # prints [1, 4, 2]"
Write a python script that displays the greatest common divisor (GCD) of two positive integers?,"def gcd(a, b): 
    if a == 0 : 
        return b 
      
    return gcd(b % a, a) 
      
a = 12
b = 24
gcd = gcd(a, b) 
print(gcd)"
Design an algorithm in Python that calculates the sum of all numbers in an array.,"def sum_array(arr): 
 
    total = 0
    for item in arr: 
        total += item 
 
    return total
 
print(sum_array([2, 4, 6, 8])) 
# Output: 20"
Write a Python program to sort a list of tuples by increasing order of the second item of each tuple.,"def sort_list(list_of_tuples): 
    list_of_tuples.sort(key = lambda x: x[1]) 
    return list_of_tuples"
Generate code to sort a list of dictionaries based on the value of a given key in Python.,"def sort_dicts_by_key(data, key):
    return sorted(data, key=lambda k: k[key])"
Create a class in Python containing an add_student() method.,"class StudentList:
    def __init__(self):
        self.students = []

    def add_student(self, student):
        self.students.append(student)"
Create a Python script for downloading a web page's HTML content.,"import requests
 
url = 'http://example.com'
 
r = requests.get(url)
html = r.text
 
with open('page.html', 'w') as f:
 f.write(html)"
"Create an optimization function to maximize a given function over a range of values in Python. The range should be given by [-5, 5], and the function is sin(x)","import numpy as np
from scipy import optimize

def optimization_function(x):
 return np.sin(x)

res = optimize.minimize_scalar(optimization_function, bounds=[-5, 5])

print(res.x)
# Result: -0.90898"
Write a Python program to parse a JSON data and print the values.,"""""""
Write a Python program to parse a JSON data and print the values
""""""

import json

# Load the input data as a json string
data = '{""name"": ""John"", ""age"": 30, ""city"": ""New York""}'

# Parse the json string into a dictionary
parsed_data = json.loads(data)

# Print out the values
for key, value in parsed_data.items():
    print(f'{key}: {value}')"
Write a python function to count numeric values in a given string.,"def number_ctr(str):
      number_ctr= 0
      for i in range(len(str)):
          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     
      return  number_ctr"
Write a script in python to crawl a web page,"import requests
url = 'http://www.example.com'
response = requests.get(url)
if response.status_code == 200:
    html_contents = response.content
    # Parse the html_contents and store the data"
Write a function to find numbers divisible by m and n from a list of numbers using lambda function.,"def div_of_nums(nums,m,n):
 result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums)) 
 return result"
Create a Python program to generate all combinations of 3 elements from an array.,"def comb3(arr):
    result = []
    for i in range(len(arr)):
       for j in range(i+1, len(arr)):
           for k in range(j+1, len(arr)):
               t = [arr[i],arr[j],arr[k]]
               result.append(t)
    return result"
Write a Python program to convert a given date in the format mm/dd/yyyy to its equivalent day of the week.,"import datetime
date_string = input(""Enter date in mm/dd/yyyy format:"")
date = datetime.datetime.strptime(date_string, ""%m/%d/%Y"")
weekday = date.strftime(""%A"")
print(""The day for the date"",date_string,""is"",weekday)"
Write a Python function to recognize a date (in “DD/MM/YYYY” format) in a string,"def recognize_date(s):
    '''This function recognizes a date (in DD/MM/YYYY format) in a string.'''
    # Regex for DD/MM/YYYY format
    format_regex = re.compile(r'\d{2}/\d{2}/\d{4}') 
    match = format_regex.search(s)
    if match:
        date = match.group()
        return date
    else:
        return None"
Convert a given sentence to uppercase using Python.,"sentence = ""This is a sample sentence.""
output = sentence.upper()
print(output)"
Develop a Python script to generate a set of random numbers within a given range.,"import random

start = int(input(""Enter start range: ""))
end = int(input(""Enter end range: ""))
numbers = int(input(""Enter the amount of numbers: ""))

result = random.sample(range(start, end), numbers)

print(""Randomly generated numbers:"", result)"
Create a Python statement that prints a list of numbers 0 to n (inclusive).,"for i in range(n+1):
    print(i)"
"Write a function in Python that takes two parameters, a positive integer n and a list of numbers, and returns the sum of the first n elements of the list.","def func(n, nums):
  res = 0
  for i in range(n):
    res += nums[i]
  return res"
Create a function to calculate the sum of two values in Python.,"def add_two_numbers(x, y):
    sum = x + y
    return sum"
Write a function to check if the common elements between two given lists are in the same order or not.,"def same_order(l1, l2):
    common_elements = set(l1) & set(l2)
    l1 = [e for e in l1 if e in common_elements]
    l2 = [e for e in l2 if e in common_elements]
    return l1 == l2"
Write a Python program to create a 1D array of random numbers from 1 to 100.,"import random

# Create a 1-dimensional array of size 5
array = [0] * 5

# Fill the array with random numbers
for i in range(len(array)):
 array[i] = random.randint(1,100)

print(array)

# Output:
# [83, 5, 46, 69, 89]"
Create a module in Python to scrape the web for a particular website.,"import requests
from bs4 import BeautifulSoup

def scrape_website(url):
    response = requests.get(url)
    html = response.text
 
    soup = BeautifulSoup(html, 'html.parser')
    return soup

if __name__ == '__main__':
    url = 'https://www.example.com/'
    soup = scrape_website(url)
    print(soup)"
Generate a Python program which creates an acronym for a given sentence.,"def create_acronym(sentence):
    acronym = ''
    words = sentence.split(' ')
    for word in words:
        acronym += word[0].upper()
    return acronym"
Create a Python script that will take an array of numbers and generate the maximum possible combination using those numbers.,"def generatemaxcombo(arr):
    max_combo = []
    value = 1
    for x in arr:
        value = value * x
        max_combo.append(value)
    return max_combo

arr = [4, 2, 8, 12]
max_combo = generatemaxcombo(arr)

print(""The maximum combination of {} is: {}"".format(arr, max_combo))"
Implement a Python parser to print return a list of words from a given string.,"def parse_words(string):
    words = []

    for word in string.split("" ""):
        words.append(word.strip(""!,.? \n\t\r\""\'-""))
    return words

result = parse_words(""Hello, World!"")
print(result)
##
Output: ['Hello', 'World']"
"Create a Python class named ""Dog"" that will keep track of a breed, a name, age and person information.","class Dog:
def __init__(self, breed, name, age, person):
 self.breed = breed
 self.name = name
 self.age = age
 self.person = person

def get_breed(self):
 return self.breed

def get_name(self):
 return self.name

def get_age(self):
 return self.age

def get_person(self):
 return self.person"
"Using Python, create a function that takes as input a list of numbers and returns the median of the list.","def median(nums):
    sorted_nums = sorted(nums)
    length = len(nums)
    if length % 2 == 0:
        return (sorted_nums[length//2] + sorted_nums[length//2 - 1]) / 2
    else:
        return sorted_nums[length//2]"
Create a Python program to find all the solutions to a given equation.,"import cmath

a = int(input(""Enter a: ""))
b = int(input(""Enter b: ""))
c = int(input(""Enter c: ""))

#calculate the discriminant
d = (b**2) - (4*a*c)

# find two solutions
sol1 = (-b-cmath.sqrt(d))/(2*a)
sol2 = (-b+cmath.sqrt(d))/(2*a)

print('The solutions are {0} and {1}'.format(sol1,sol2))"
Write a Python script to check if the given string is a palindrome.,"def is_palindrome(string_to_test):
    reverse = reversed(string_to_test)
    if list(string_to_test) == list(reverse):
        return True
    return False"
Generate a random 6-digit number using Python,"import random

def generate_random_number(): 
    random_number = random.randint(100000, 999999) 
    return random_number

generatedNumber = generate_random_number() 
print(generatedNumber)"
Develop a Python program to generate a set of random numbers from 1 to 100 with no duplicates.,"import random

def generate_random_numbers():
    random_numbers = set()
    while len(random_numbers) < 100: 
        random_numbers.add(random.randint(1, 100)) 

    return random_numbers"
Can you create a Python script to extract email addresses from a raw text?,"import re

text = ""John Doe john@example.com, Jane Doe jane@example.com, Kevin Smith kevin@example.com""

emails = re.findall(r""[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+"",
                    text)

print(emails) # ['john@example.com', 'jane@example.com', 'kevin@example.com']"
"Create an algorithm in Python to print the numbers from 1 to n in increasing order, except for any numbers which are divisible by 3 should be printed as ""Fizz"".","def fizz(n):
    for i in range(1, n+1):
        if i % 3 == 0:
            print(""Fizz"")
        else:
            print(i)

#example
fizz(20) # prints 1, 2, Fizz, 4, 5, Fizz, 7, 8, Fizz, 10, 11, Fizz, 13, 14, Fizz, 16, 17, Fizz, 19, 20"
Write a function to divide two lists using map and lambda function.,"def div_list(nums1,nums2):
  result = map(lambda x, y: x / y, nums1, nums2)
  return list(result)"
Write a function in Python to compute the sum of all elements in a given 2-dimensional array.,"def arraySum(arr): 
  sum = 0
  for sublist in arr: 
    for item in sublist: 
      sum = sum + item 
  return sum 

print(arraySum([[2, 3], [2, 5], [5, 6], [4, 5]])) 

# Output: 29"
Write a Python program to check if a given string is a rotation of another given string.,"def is_rotation(str1, str2):
 if len(str1) != len(str2):
  return False
 
 concat_str2 = str2 * 2
 
 return str1 in concat_str2
 
is_rotation(str1, str2)"
Create a sigmoid function in Python.,"def sigmoid(x): 
    return 1 / (1 + math.exp(-x))"
Write a python function to find maximum possible value for the given periodic function.,"def floor_Max(A,B,N):
    x = min(B - 1,N)
    return (A*x) // B"
Develop an algorithm to print all permutations of a given string in Python.,"def permute(s):
    if len(s) == 1:
        return [s]
    permutations = []
    for i, a in enumerate(s):
        others = s[:i] + s[i+1:]
        for p in permute(others):
            permutations.append(a + p)
    return permutations"
"Create a Python program to create a list of unique emails from a given list of emails, by removing any duplicates.","def remove_duplicates(myList):
    unique_list = []
    for item in myList:
        if item not in unique_list:
            unique_list.append(item)
    return unique_list

result = remove_duplicates(myList)
print(result)"
Design a Python program to read in a list of integers and remove any duplicates from the list.,"def remove_duplicates(lst):
  unique_list = []
  for item in lst:
    if item not in unique_list:
      unique_list.append(item)
  return unique_list

lst = [1, 2, 3, 4, 5, 1, 2, 3]
unique_list = remove_duplicates(lst)
print(unique_list)

# Output
[1, 2, 3, 4, 5]"
Review this code and make any necessary changes in Python to make it more efficient.,"def add_items(items): 
    return sum(items)"
Create a function in Python that takes two parameters 'a' and 'b' and returns the remainder when 'a' is divided by 'b'.,"def get_remainder(a, b):
    return a % b"
Write a function in Python that takes a string as input and returns a count of the number of vowels found in the string.,"def count_vowels(string):
    vowels = 0
    for i in string:
        if(i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u'):
            vowels = vowels + 1
    return vowels"
Create a Python function to compute the nth Fibonacci number of a provided number n.,"def fibonacci(n): 
	if n<0: 
		print(""Incorrect input"") 
		
	# First Fibonacci number is 0 
	elif n==1: 
		return 0
	# Second Fibonacci number is 1 
	elif n==2: 
		return 1
	else: 
		return fibonacci(n-1)+fibonacci(n-2) 

print(fibonacci(5)) # Outputs 3"
Create a loop in Python that sums to a given number.,"target_sum = 10

current_sum = 0
i = 0

while current_sum < target_sum:
  current_sum = current_sum + i
  i = i + 1

print(i - 1)"
Create a Python function that checks if a given number is a multiple of 6.,"def is_multiple_of_six(num):
    if num % 6 == 0:
        return True
    else:
        return False"
Write a Python program to solve linear equations of two variables.,"def solve_linear_equations(a,b,c,d,e,f):
    x = (e*d - b*f) / (a*d - b*c)
    y = (a*f - e*c) / (a*d - b*c)
    return (x,y)

a,b,c,d,e,f = 1,2,3,4,5,6
solution = solve_linear_equations(a,b,c,d,e,f)
print(solution)"
Create a Python script to capture a range of numbers (as multiples of 100).,"# Python code to capture a range of numbers 
# Multiples of 100 

start = 20
end = 400
  
# printing multiples of 100 in the given range 
for num in range(start, end + 1): 
      
    # checking if the current number is multiple of 100 
    if num % 100 == 0: 
        print(num, end="" "")"
Write a function to find the demlo number for the given number.,"def find_demlo(s): 
	l = len(s) 
	res = """" 
	for i in range(1,l+1): 
		res = res + str(i) 
	for i in range(l-1,0,-1): 
		res = res + str(i) 
	return res 	"
Design a Python program to generate a random password containing both lowercase and uppercase characters.,"import random
import string

def generate_random_password():
  charset = string.ascii_letters + string.digits
  return ''.join(random.sample(charset, 8))

print(generate_random_password())"
Write a Python program to compare two given dictionaries and find common elements.,"def compare_dictionaries(dict1, dict2):
    common_elements = []
    for key1 in dict1:
        if key1 in dict2:
            common_elements.append(key1)
    return common_elements"
Create a function in Python that will take a sentence as an argument and return a boolean depending on whether or not it is a palindrome.,"def is_palindrome(sentence): 
    rev=(sentence.lower()).replace("" "","""")
    return rev == rev[::-1]"
Create a Python program to calculate the average of a given list of integers while ignoring any values greater than 10.,"def average_ignoring_ten(numbers):
    total = 0
    number_of_numbers = 0
    
    for number in numbers:
        if number <= 10:
            total += number
            number_of_numbers += 1
    
    return total / number_of_numbers"
Write a function to calculate the number of digits and letters in a string.,"def dig_let(s):
 d=l=0
 for c in s:
    if c.isdigit():
        d=d+1
    elif c.isalpha():
        l=l+1
    else:
        pass
 return (l,d)"
Write a function to find a pair with the highest product from a given array of integers.,"def max_product(arr): 
    arr_len = len(arr) 
    if (arr_len < 2): 
        return None     
    x = arr[0]; y = arr[1]    
    for i in range(0, arr_len): 
        for j in range(i + 1, arr_len): 
            if (arr[i] * arr[j] > x * y): 
                x = arr[i]; y = arr[j] 
    return x,y   "
"Build a basic calculator in Python to support addition, subtraction, multiplication, and division.","def calculator(operation, num1, num2): 
    if operation == 'add': 
        return num1+num2 
    elif operation == 'subtract': 
        return num1-num2 
    elif operation == 'multiply': 
        return num1*num2 
    elif operation == 'divide': 
        return num1//num2 
    else: 
        print(""Invalid operation"")
        return"
Create a Python class for a rectangle with properties for the length and width and methods for finding the area and perimeter.,"class Rectangle:
    def __init__(self, length, width):
        self.length = length
        self.width = width
    def area(self):
        return self.length * self.width
    def perimeter(self):
        return (2 * self.length) + (2 * self.width)"
Create a class in Python that represents a rectangle shape.,"class Rectangle:
    # Initialize object
    def __init__(self, width, height):
        self.width = width
        self.height = height
    
    # Return area
    def get_area(self):
        return self.width * self.height
    
    # Return perimeter
    def get_perimeter(self):
        return 2 * (self.width + self.height)"
Generate a Python program that takes in two dates and prints the gap between them in number of days.,"from datetime import datetime

def days_gap(date1, date2):
    d1 = datetime.strptime(date1,""%m/%d/%Y"")
    d2 = datetime.strptime(date2,""%m/%d/%Y"")
    day_gap = abs((d2 - d1).days)
    return day_gap"
Create a Python program that takes an email message as input and prints the sender's email address.,"import re

email_message = """""" 
From: ""John Doe"" <john.doe@example.com>
To: ""Jane Doe"" <jane.doe@example.com>
Subject: Example Email
""""""

sender_email = re.findall(r'From: .+?<(.+?)>', email_message)

print('Sender\'s email address:', sender_email[0])"
Generate a random 6-digits number in Python.,"import random

number = random.randint(100000, 999999)
print(number)"
Write a python function to find odd numbers from a mixed list.,"def Split(list): 
    od_li = [] 
    for i in list: 
        if (i % 2 != 0): 
            od_li.append(i)  
    return od_li"
Optimize the following Python code for efficiency.,"def search(list, query): 
    return query in list"
Generate Python classes from the given JSON.,"class Employee:
    def __init__(self, emp_id, name, department, salary):
        self.emp_id = emp_id
        self.name = name
        self.department = department
        self.salary = salary"
Create a function in Python to sort this list of high-scores in descending order.,"def sortScores(scores):
    return sorted(scores, reverse=True)"
Create a function in Python that takes a list of strings and returns only the strings with length of 5.,"def five_length_strings(arr):
    return [string for string in arr if len(string) == 5]

output = five_length_strings([""Hello"", ""Hi"", ""Hola"", ""Bye"", ""Goodbye""])

print(output) # Output: ['Hello', 'Hola', 'Bye']"
Write a Python function to calculate the total cost of a shopping cart given a list of items. The items list should contain the item name and price.,"def calculateTotalCost(items):
 total_cost = 0
 for item in items:
  total_cost += item[1]
 return total_cost

# Usage
total_cost = calculateTotalCost(items)
print(total_cost)"
Create a program that takes a numerical array and returns a reversed array in Python.,"def reverse_array(array):
    reversed_array = array[::-1]
    return reversed_array

reversed_array = reverse_array([1,2,3,4,5])
print(reversed_array)"
"Given an array of integers and a target number, write a Python function to return the two numbers from the array that add up to the target number.","def two_sum(arr, target): 
    for i in range(0, len(arr)-1): 
        for j in range(i + 1, len(arr)): 
            if arr[i] + arr[j] == target: 
                return [arr[i], arr[j]]"
Create a Python program to generate a random number between 1 to 100.,"import random

number = random.randint(1, 100)
print(number)"
Generate a Python program that implements linear search,"def linear_search(mylist, x):
    for i in range(len(mylist)):
        if mylist[i] == x:
            return i

    return -1"
Create a program in Python that converts a given number into its corresponding binary representation in 8 bits.,"def int_to_bin(n):
 bin_num = bin(n)
 bin_num = bin_num[2:].zfill(8)
 return bin_num

print(int_to_bin(10)) # Output: 00001010"
Generate a Python program to evaluate a mathematical expression?,"def evaluate(expression):
    return eval(expression)

print(evaluate(expression))

# Output
16"
"Construct a Python class to represent a Country that contains its name, population, and area.","class Country:
    def __init__(self, name, population, area):
        self.name = name
        self.population = population
        self. area = area"
Write a Python function to edit the given input string such that all consecutive duplicate characters in the string are removed.,"def remove_duplicates(inputstring):
    result = """"
    for i in range(len(inputstring)):
        if i == 0 or inputstring[i] != inputstring[i-1]:
            result += inputstring[i]
    return result"
Define a class method in Python to initialize an object's fields.,"class SomeClass:

    def __init__(self, field1, field2):
        self.field1 = field1
        self.field2 = field2"
Create a web scraper using Python's BeautifulSoup library to extract news articles from a website.,"import requests
from bs4 import BeautifulSoup

url = '<URL to scrape>'
page = requests.get(url)
soup = BeautifulSoup(page.text, 'html.parser')

# Find all the articles
articles = soup.find_all('article')

# Loop through the articles and print their titles
for article in articles:
 print(article.h2.text)"
Write a python for loop to iterate over a list of numbers and compute the sum of all numbers greater than 0,"sum = 18

# using a for-loop
sum = 0
for num in [-1, 5, -7, 10, -2]:
  if num > 0:
    sum += num

print(sum)

Output: 18"
Develop a machine learning model in Python to predict housing prices in a given city.,"from sklearn.linear_model import LinearRegression

X_train, y_train, X_test, y_test = load_data(city)

model = LinearRegression()
model.fit(X_train, y_train)
predictions = model.predict(X_test)"
Generate a Python 2D list containing a 10x10 checkerboard pattern,"board = [[0]*10 for _ in range(10)]
for i in range(10):
 for j in range(10):
  if i%2 == j%2:
   board[i][j] = 1
print board"
Create a Python function to compute the root mean square (RMS) of an array of values.,"import math

def computeRMS(values):
    # calculate the mean
    mean = sum(values)/len(values)
    # calculate the sum of the squares
    squares_sum = sum([val**2 for val in values])
    # calculate the RMS
    rms = math.sqrt(squares_sum/len(values))
    
    return rms
    
values = [3,4,5,6,7]
rms = computeRMS(values)
print(""Root mean square is: "", rms)"
Produce a Python script that counts the number of words in a sentence,"sentence = ""The quick brown fox jumps over the lazy dog""

words = sentence.split()
print(""The sentence has"", len(words), ""words."")"
"Create a Python class called ""Person"" with fields for ""name"" and ""age"". The class should also include an initialization function and a method to say hello.","class Person:
 def __init__(self, name, age):
 self.name = name
 self.age = age

 def say_hello(self):
 print('Hello, my name is {} and I am {} years old'.format(self.name, self.age))"
Write a python code to calculate the square of any given number.,"""""""
Calculate the square of a given number
""""""

def square_num(num):
    return num * num

if __name__==""__main__"":
    num = 5
    square = square_num(num)
    print(""Square of ""+str(num)+"" is ""+str(square))"
Write a python script to format a list of numbers into a tabular form.,"def format_list(list_in):
   list_out = []

   for n in list_in:
      list_out.append('|'+str(n).ljust(2)+'|')
   
   header = '--|--+'
   header_line = '--|'+'--'*len(list_out)+'|'
   
   list_out = [header] + list_out + [header_line]
   
   return '\n'.join(list_out)

print(format_list([2, 3, 4, 5, 6]))

# Output:
--|--+
|2 |
|3 |
|4 |
|5 |
|6 |
--|---|"
Create a Python script to scrape a website and extract the main content of any webpage.,"import requests
from bs4 import BeautifulSoup

url = ""https://www.example.com""
html = requests.get(url).content
soup = BeautifulSoup(html, 'html.parser')

content = soup.find(""div"", {""class"": ""main-content""}).text

print(content)"
Develop a function to generate all combinations of a given list in Python.,"def all_combinations(list_of_numbers): 
    if len(list_of_numbers) == 0: 
        return [] 
  
    if len(list_of_numbers) == 1: 
        return [list_of_numbers] 
  
    combinations = [] 
    for combination in all_combinations(list_of_numbers[1:]): 
        combinations.append(combination) 
        combinations.append([list_of_numbers[0]] + combination) 
  
    return combinations"
Write a matrix multiplication algorithm in Python using two-dimensional lists.,"def matrix_mul(A,B):
 if len(A[0]) != len(B):
   raise ValueError('The column of matrix A must be equal to the row of matrix B')
 
 # Create the result matrix C
 C = [[sum(A[i][k] * B[k][j] for k in range(len(B))) for j in range(len(B[0]))] for i in range(len(A))]
 
 return C
 
 A = [[1,2], [3,4]]
 B = [[5,6], [7,8]]
 
 product = matrix_mul(A,B)
 
 print(product)"
Write a Python function that takes two strings of equal length and returns the number of characters that are different between them.,"def diff_characters(firstString, secondString):
 if len(firstString) != len(secondString):
 return -1

 diff_characters = 0
 for i in range(len(firstString)):
 if firstString[i] != secondString[i]:
 diff_characters +=1
 
 return diff_characters"
Create a Python function to delete all data stored in a Python dictionary,"def clear_dictionary(d): 
    keys = list(d.keys()) 
    for key in keys: 
        del d[key]"
"Classify the following statement as a valid Python statement, an invalid Python statement or a comment.",Valid Python statement.
Create a function in Python to get the largest element in a given list.,"def get_largest_element(nums):
    largest = nums[0]
    for i in range(1, len(nums)):
        if nums[i] > largest:
            largest = nums[i]
    return largest

# Test the function
numbers = [4,8,2,9,10]
print(get_largest_element(numbers)) # Output: 10"
Write a function in Python that prints the multiplication table of a given number.,"def print_multiplication_table(number): 
    for i in range(1, 11): 
        print(number,""X"",i,""="",number*i)"
"In Python, create a list comprehension to extract the elements which are even in the given list.",even_list = [x for x in list if x%2 == 0]
Write a function to remove every other element in a Python list in place.,"def remove_other_list_elements_inplace(list_elements):
    list_elements[:] = [element for index, element in enumerate(list_elements) if (index + 1) % 2 == 1]
    return list_elements 

sample_list = [1,2,3,4,5,6]
print(""Original List:"", sample_list) 

remove_other_list_elements_inplace(sample_list)
print(""Modified List:"", sample_list)"
Create a Python program to find the two smallest integers in an array and print the output.,"def findSmallestInteger(arr):
    smallest = float('inf')
    second_smallest = float('inf')
    for num in arr:
        if num < smallest:
            second_smallest = smallest 
            smallest = num
        if num < second_smallest and num > smallest:
            second_smallest = num
    return (smallest, second_smallest)"
Create a function in Python that takes a list of integers as input and returns a list of the sorted integers.,"def sort_list_of_integers(lst):
    lst.sort()
    return lst

print(sort_list_of_integers([5, 7, 3, 2, 9])) # Output: [2, 3, 5, 7, 9]"
Develop a simple Python program to read a text document and output the number of words in it.,"# Read file
with open('text_document.txt', 'r') as file:
    data = file.read()

# Calculate number of words   
word_count = len(data.split())

# Output
print(f""Number of words: {word_count}"")"
Generate a 10 digit random phone number using Python.,"import random

def get_random_phone_number():
    """"""Generates a 10 digit random phone number""""""
    phone_number = ''
    for i in range(10):
        phone_number += str(random.randint(0, 9))
    return phone_number

print(get_random_phone_number())"
Write a Python code to convert a given list of strings to all lowercase.,"def to_lowercase(strings):
    return [string.lower() for string in strings]
    
result = to_lowercase(['CoDE', 'OF', 'LinK'])
print(result)"
"Create a Python program to sort a list of numbers by their absolute value (e.g. sort [2,-5, -1, 3] in ascending order).","def abs_sort(arr):
    return sorted(arr, key=abs)

abs_sort([2,-5, -1, 3])"
Create a function in Python to split a list into sublists of given length x.,"def split_list(list, x):
    return [list[i * x:(i + 1) * x] for i in range((len(list) + x - 1) // x )]"
Code a Python program to concatenate two lists.,"list1 = [1, 2, 3] 
list2 = [4, 5, 6] 
  
# using + 
list3 = list1 + list2 
  
# printing list3 
print(list3) 

# using extend() 
list1.extend(list2) 
  
# printing list1 
print(list1)"
Write a Python program to optimize a list of numbers so that every follower is greater than its predecessor.,"def optimized_list(arr):
n = len(arr)
for i in range(n):
 j = i+1
 while(j < n):
  if arr[i] > arr[j]:
   temp = arr[i]
   arr[i] = arr[j]
   arr[j] = temp
  j+=1
 
return arr
 
arr = [3, 8, 2, 6, 10]
result = optimized_list(arr)
print(result) #[2, 3, 6, 8, 10]"
Create an optimization function in Python that takes in a list of integers and finds the smallest number that is greater than all of the other numbers in the list.,"def optimize(arr):
    smallest = None
    
    for num in arr:
        if (smallest is None) or (num > smallest):
            smallest = num
    
    return smallest + 1

x = [1, 2, 3, 4]
result = optimize(x)

print(result) # 5"
Write a Python program to determine the maximum of two numbers.,"def get_max(a, b):
    if a > b:
        return a
    else:
        return b

a = 15
b = 20

max_value = get_max(a, b)
print(""The maximum value is:"", max_value)"
Write a Python snippet that prints all the stdout of a given command.,"import subprocess

command = 'ls'
process = subprocess.run([command], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, universal_newlines=True)

for line in process.stdout.splitlines():
    print( line )"
Create a neural network class in Python that computes the derivative of a given function.,"class NNClass:
    def __init__(self):
        pass
   
    def forward(self, x):
        self.x = x
 
    def backward(self, dy):
        dFdx = dy * (1/self.x)
        return dFdx"
Write a Python script to print the frequency of occurrence of characters in a given string.,"def char_frequency(text):
    chars = {}
    for c in text:
        if c not in chars:
            chars[c] = 0
        chars[c] += 1
    return chars
    
print(char_frequency(text))"
Write a Python program to check whether a given number is an Armstrong number. Armstrong numbers are the numbers that are equal to the sum of the cubes of their individual digits.,"def is_armstrong_number(n):
 s = 0
 for digit in str(n):
 s += int(digit)**3
 return s == n"
Write a Python program to convert a unix timestamp to UTC time.,"import time

timestamp = 1594842400
utc_time = time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(timestamp))

print(utc_time) # Output: 2020-07-17 02:00:00"
Edit a Python program given to produce a new program with different outputs according to the given criteria.,"def double(value): 
    return value * 2

def triple(value): 
    return value * 3

def quad(value):
    return value * 4

def calculate_value(n): 
    if n > 10: 
        return double(n) 
    elif n > 5: 
        return triple(n) 
    else: 
        return quad(n) 
    
print(calculate_value(-2))
print(calculate_value(8)) 
print(calculate_value(13))"
"Write a Python program to build a simple calculator. The calculator should be able to take two inputs and add, subtract, multiply, or divide them.","def calculate(x,y,op):
 if op == ""+"":
  return x+y
 elif op == ""-"":
  return x-y
 elif op == ""*"":
  return x*y
 elif op == ""/"":
  return x/y
 else:
  return ""Invalid operator""

# Function call
print(calculate(4,8,""*""))
# Output: 32"
Create a Python script to automatically fill out a web form with a given set of data.,"import requests

url = 'https://www.example.com/form-url'

name = 'John Doe'
email = 'john.doe@example.com'

data = {
 'name' : name,
 'email' : email
}

response = requests.post(url, data)"
"Create a Python program which prints ""Hello, World!""","print(""Hello, World!"")"
Create an algorithm to reverse a given string without using the built-in python reverse function,"""""""
Reverse a given string without using the built-in python reverse function.
""""""

def reverse_string(in_str):
    rev_str = ''
    for i in range(len(in_str) - 1, -1, -1):
        rev_str += in_str[i]
    return rev_str

if __name__ == '__main__':
    in_str = 'reverse me'
    rev_str = reverse_string(in_str)
    print(rev_str)"
Convert the following Python function into C++,"#include <iostream>

int test_func(int A, int B)
{
 return A + B;
}

int main()
{
 int A = 10;
 int B = 20;
 
 std::cout << ""The value of A + B = "" << test_func(A, B) << std::endl;
 
 return 0;
}"
Write a Python program to convert a given list of strings into a dictionary where each string is a key and its index in the list is its corresponding value.,"def list_to_dict(lst):
 return {x:i for i,x in enumerate(lst)}"
Generate a single line of code to add a new item to an existing list in Python.,existing_list.append(new_item)
Create a program to parse a JSON object into a Python dictionary.,"import json

def parse_json(json_obj):
    json_dict = json.loads(json_obj)
    return json_dict"
Use a Python program to print out the first five odd numbers.,"for num in range(1,11):
    if num % 2 != 0:
        print(num)"
Generate a Python program to print all possible permutations of a given string.,"from itertools import permutations 
  
# Get all permutations of length 2 
# and length 2 
perm = permutations(""ABC"", 2) 
  
# Print the obtained permutations 
for i in list(perm): 
    print(i) 

# Get all permutations of length 3 
# and length 3 
perm = permutations(""ABC"") 
  
# Print the obtained permutations 
for i in list(perm): 
    print(i)"
Write a Python program to calculate the total amount of taxes to be paid by a customer for an online purchase. The input should include the cost of the item and the tax rate.,"def calculate_total_tax(cost, rate):
 """"""Calculate the total amount of taxes to be paid""""""
 tax = cost * rate/100
 total = cost + tax

 return total

total_amount = calculate_total_tax(700, 10)
print(f""The total amount, including taxes, is {total_amount}"") # 770"
Can you program a web scraper in Python to extract specific data from a website?,"import requests
from bs4 import BeautifulSoup

url = ""example.com""
response = requests.get(url)
html = response.text

soup = BeautifulSoup(html, ""html.parser"")
data = soup.find_all(class_=""data-class"")

for item in data:
    # Extract the data you need here
    # ..."
Optimize the provided Python code to run in linear time.,"def function(arr):
    for i in range(len(arr)):
        min_idx = i
        for j in range(i+1, len(arr)):
            if arr[min_idx] > arr[j]:
                min_idx = j
        arr[i], arr[min_idx] = arr[min_idx], arr[i]"
Create a Python program to calculate factorials recursively.,"def factorial(n):
  # Base Case
  if n == 0:
    return 1
  # Recursive Case
  else:
    return n * factorial(n-1)

#Testing
num = int(input(""Enter a number to calculate it's factorial: ""))

print(f""The factorial of {num} is { factorial(num)})"
"Given the following array of numbers, write a Python code snippet to sort it in descending order.","numbers = [9, 2, 4, 7, 6]
numbers.sort(reverse=True)
print(numbers)"
Convert this pseudocode into a working Python program.,"list = [3, 5, 9, 15, 22]
for item in list:
    if item < 10:
        print(""less than 10"")
    else:
        print(""greater than 10"")"
Modify a Python program to accept a string argument and evaluate the length of it,"import sys

def len_string(str):
    len_str = 0
    for char in str:
        len_str += 1
    return len_str

if __name__ == ""__main__"":
    if len(sys.argv) == 2:
        string = sys.argv[1]
        print(""Length of the string is"", len_string(string))
    else:
        print(""Please provide a string argument."")"
Count the number of unique items in a list using dictionaries in Python.,"def count_unique(list):
    unique = {}
    for item in list:
        if item not in unique:
            unique[item] = 1
        else:
            unique[item] += 1
    return len(unique)"
Create a Python class that holds a list of student objects,"class StudentList:
    def __init__(self):
        self.students = []

    def add_student(self, student):
        self.students.append(student)

    def remove_student(self, student):
        self.students.remove(student)"
Design a program to filter out strings in a list that have length 3.,"def filter_by_length(list):
    """"""
    Filters out strings in the given list that have length 3.
    """"""
    filtered_list = [word for word in list if len(word) == 3]
    return filtered_list

if __name__ == '__main__':
    list = ['ada', 'python', 'ruby', 'egg', 'coffee']
    print(filter_by_length(list))"
Create a Python dictionary to store the number of occurrences of each character of the given string.,str_dict = {i:list(str).count(i) for i in set(str)}
Create a function in Python that takes a number N and returns the sum of the first N odd numbers.,"def sum_of_odds(N):
    return sum([i for i in range(1, 2*N + 1, 2)])

N = 5
print(sum_of_odds(N))"
Create a function in Python to calculate the difference between two dates.,"from datetime import date

def diff_dates(date1, date2): 
    return abs(date2 - date1).days 

date1 = date(2020, 4, 1) 
date2 = date(2021, 4, 16) 
difference = diff_dates(date1, date2) 

print(difference, ""days"")"
Generate a Python program to print the Fibonacci series up to n-th term.,"def Fibonacci(n): 
    a = 0
    b = 1
    if n < 0: 
        print(""Incorrect input"") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2,n): 
            c = a + b 
            a = b 
            b = c 
        return b 
  
print(Fibonacci(6))"
Write a python program to calculate maximum revenue.,"def max_revenue(prices):
    diff = [prices[i + 1] - prices[i] for i in range(len(prices) - 1)] 
    max_diff = 0
    for i in range(len(diff)): 
        for j in range(i + 1, len(diff) + 1): 
            current_diff = sum(diff[i:j]) 
            if current_diff > max_diff: 
                max_diff = current_diff 
 
    return max_diff"
"Develop an algorithm in Python for reversing words in a string, making sure to avoid memory errors.","def reverse_words(s):
  # Split the string into an array
  words = s.split()
  # Reverse words array
  words.reverse()
  # Join the reversed words array to 
  # create the reversed string
  return "" "".join(words)"
Write a python function to interchange the first and last elements in a list.,"def swap_List(newList): 
    size = len(newList) 
    temp = newList[0] 
    newList[0] = newList[size - 1] 
    newList[size - 1] = temp  
    return newList "
Design a Python script to return the output of a description tag given an HTML page.,"from bs4 import BeautifulSoup
def get_description(html_str):
  soup = BeautifulSoup(html_str, ""lxml"")
  description = soup.find(""description"")
  return description.get_text()"
Create a Python class to represent a college student and its attributes.,"class CollegeStudent:
    def __init__(self, name, age, major):
        self.name = name
        self.age = age
        self.major = major
    
    def get_name(self):
        return self.name
    
    def get_age(self):
        return self.age
    
    def get_major(self):
        return self.major"
"Generate a Python function that reverses a given string, and test the function with an input of ""Hello"".","def reverse(string):
    return string[::-1]

print(reverse('Hello')) #prints ""olleH"""
Given two strings S and T. Generate a Python program to count the number of distinct substrings of T in S.,"def count_substring(S, T):
  count = 0
  for i in range(len(S)):
    for j in range(len(T)):
      if(S[i:i+j+1] == T):
        count += 1
  return count"
Create a Python program that takes two strings as input and outputs a single concatenated string.,"def concat_strings(a, b):
    return a + b

result = concat_strings(""Hello "", ""world!"")
print(result)"
Generate a Python script to sort the given list of words.,"# function to sort the given list of words
def sort_words(words):
    # sort the list of words in alphabetical order
    words.sort()

    # print the sorted list of words
    print(words)

# driver code
words = ['bubble', 'selection', 'quicksort', 'insertion']
sort_words(words)

# output
['bubble', 'insertion', 'quicksort', 'selection']"
Create a Python program to sum the elements of two lists.,"def sum_list(list1, list2):
    result = []
 
    for i in range(len(list1)):
        result.append(list1[i] + list2[i])
 
    return result
 
list1 = [1,2,3,4]
list2 = [5,6,7,8]
 
print(sum_list(list1, list2))"
Write a Python program to remove duplicate characters from a given string.,"string = ""Hello World !""

result = """" 
for char in string:
    if char not in result: 
        result += char

print(""String after removing duplicate characters:"", result)"
Design an algorithm in Python to generate all permutations of a given list.,"def permute(nums):
  res = [] 
  backtrack(nums, res, [])
  return res

def backtrack(nums, res, temp):
  if(len(temp) == len(nums)):
    res.append(temp[:])
  else:
    for num in nums:
      if num not in temp:
        temp.append(num)
        backtrack(nums, res, temp)
        temp.pop()

#print the result 
nums = [1, 2, 3]
perms = permute(nums)
print(perms)"
Write a Python function to filter out strings that contain numbers.,"def filter_numbers(strings): 
    return [s for s in strings if not any(c.isdigit() for c in s)]

if __name__ == '__main__':
    strings = [""apple"",""hello123"",""hi12345"", ""good15""]
    print (filter_numbers(strings))"
Write a Python code snippet to filter out elements from a given list lst where the element is not greater than 5.,filtered_lst = [x for x in lst if x <= 5]
Design a class in Python to store customer information.,"class Customer:
    def __init__(self, name, address, contact_number):
        self.name = name
        self.address = address
        self.contact_number = contact_number"
Generate a Python program to find the maximum value in a list of numbers.,"def find_max(list_of_numbers):
    max_val = max(list_of_numbers)
    return max_val

list_nums = [23, 12, 48, 61]
max_val = find_max(list_nums)
print(max_val)"
Create a Python program that prints the following numbers in a comma seperated list.,"print("", "".join([str(x) for x in [1, 8, 10, 15, 12]]))"
Create a class structure to represent a student in Python.,"class Student:
    def __init__(self, name, age):
        self.name = name
        self.age = age
    
    def getName(self):
        return self.name
    
    def setName(self, name):
        self.name = name
    
    def getAge(self):
        return self.age
    
    def setAge(self, age):
        self.age = age"
Write a code in Python to optimize this objective function.,"import scipy.optimize

def objective(variables):
    x,y,z = variables
    return x + y*y + z*z*z

x0 = [0,0,0] # Initial guess of variables

# Perform the optimization
res = scipy.optimize.minimize(
    objective, 
    x0,
    method='nelder-mead',
    options={'xtol': 1e-8, 'disp': True}
)

# Print resultant variables
print(res.x)

# Print minimal value
print(res.fun)"
"You need to read code and detect the language it is written in (for example, Python, JavaScript, etc).",Python
Develop a Python script that determines the average age of people in a given list.,"def find_average_age(people_list):
    ages_sum = 0
    for person in people_list:
        ages_sum += person['age']
    return ages_sum / len(people_list)

people_list = [{""name"":""john"",""age"":20},{""name"":""jack"",""age"":25},{""name"":""jason"",""age"":30}] 
average_age = find_average_age(people_list)
print(average_age)"
Write a Python program to calculate the standard deviation of a given list of numbers.,"def calculate_sd(lst):
    avg = sum(lst) / len(lst)
    return (sum([(x - avg)**2 for x in lst]) / len(lst)) ** 0.5"
Generate a data structure in python to represent a Queue.,"class Queue(): 
  
    def __init__(self): 
        self.items = [] 
  
    def isEmpty(self): 
        return self.items == []  
  
    def enqueue(self, item): 
        self.items.insert(0, item)
        
    def dequeue(self):
        return self.items.pop() 
  
    def size(self): 
        return len(self.items)"
Write a Python program to detect the largest word in a sentence. The program should take a string as input and return the largest word found in it.,"def find_largest_word(sentence):
 splits = sentence.split(' ')
 largest_word = """"
 for word in splits:
 if len(word) > len(largest_word):
 largest_word = word
 return largest_word

print(find_largest_word(""This sentence has seven words.""))
# Output: ""sentence"""
Develop a function in Python that takes a list of numbers as an argument and returns the difference between the maximum and minimum value.,"def maxMinDifference(arr):
    return max(arr)-min(arr)

result = maxMinDifference([3, 4, 7, 8, 12])
print(result)"
Create a Python script to create a data visualisation of the data provided.,"import matplotlib.pyplot as plt 
data = [5, 10, 15, 20, 25, 30, 35, 40, 45]
plt.plot(data) 

# formatting the text
plt.title('Data Visualisation') 
plt.xlabel('Data Points') 
plt.ylabel('Value') 

# function to show the plot 
plt.show()"
Write a Python program to sort a given list of strings based on their length.,"def sort_str_by_length(list1):
 return sorted(list1, key=len)"
What is the output of this Python code?,4
Devise a Python program to create a list of five random integer numbers between -100 to 100.,"import random

# Function to get five random numbers 
def getRandomNumbers(lower, upper):
    numbers = []
    # Generate 5 numbers
    for _ in range(5):
        numbers.append(random.randint(lower, upper))
    return numbers

# Generate five random numbers between -100 to 100
randomNumbers = getRandomNumbers(-100, 100)
print('Random Numbers = ', randomNumbers)"
Create a design pattern to make a python program more efficient.,"The Factory Pattern is a design pattern that can be used to create an efficient Python program. This pattern is used when a program needs to create an object based on a specific type of input. For example, if an application needs to create objects for different types of data, it can use the Factory Pattern to create these objects in a more efficient manner."
Write a Python script to extract the text of all comments from a given HTML page.,"from bs4 import BeautifulSoup 

# Get the page contents 
with open('example.html', 'r') as html_file:
	soup = BeautifulSoup(html_file, 'lxml')

# Extract the comments 
comments = soup.find_all(""div"", class_=""comment"")

# Print the extracted comments
for comment in comments:
	print(comment.text)"
What Python code can you write that takes two strings and returns whether they are anagrams?,"def is_anagram(str1, str2):
    if len(str1) != len(str2):
        return False

    str1_counts = collections.Counter(str1)
    str2_counts = collections.Counter(str2)
    
    for char in str1_counts:
        if str1_counts[char] != str2_counts[char]:
            return False
    return True"
Build a basic text-based game in Python that prompts the user to enter a number between 0 and 10.,"import random

def game():
 num = random.randint(0, 10)
 num_guesses = 0

 while True:
 guesses = int(input('Guess a number between 0 and 10: '))
 num_guesses += 1

 if guesses == num:
 print(f'You guessed correctly in {num_guesses} guesses! The number was {num}')
 break
 else:
 print('Wrong guess. Try again.')
 
game()"
Generate a code snippet to insert a key-value pair into a given dictionary.,dict['Python'] = 10
Write a function in Python that accepts a list of numbers and returns the  highest and lowest values in the list.,"def max_min(numbers):
  '''returns a tuple containing highest and lowest values in a given list'''
  return (max(numbers), min(numbers))"
Identify which of the following are palindromes in Python.,"palindromes = []

for word in words:
    if word == word[::-1]:
        palindromes.append(word)

print(palindromes) # prints ['radar', 'mom', 'dad', 'civic']"
Write a function to sum elements in two lists.,"def sum_list(lst1,lst2):
  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] 
  return res_list"
Construct a Python program to get the first 100 prime numbers,"def get_prime_numbers(n):
    prime_numbers = []
    for num in range(2, n+1): 
        for i in range(2, num): 
            if num % i == 0:
                break
        else:
            prime_numbers.append(num) 
    return prime_numbers

print(get_prime_numbers(100))"
"Create a program in Python which takes an input string, and sorts it alphabetically","def sort_string(string): 
    return ''.join(sorted(string)) 
  
string = ""Fortnite""
print(sort_string(string))"
"Create a command-line chatbot in Python that can respond to simple questions like ""What is your name?""","import cmd

class Bot(cmd.Cmd):
 prompt = 'Bot> '
 
 def do_greet(self, args):
 print('Hello! My name is Bot.')

def do_name(self, args):
 print('My name is Bot.')

if __name__ == '__main__':
 Bot().cmdloop()"
Create a Python class called Rectangle to represent a two-dimensional rectangle with a length and width.,"class Rectangle:
    def __init__(self, length, width):
        self.length = length
        self.width = width

    def area(self):
        return self.length * self.width"
Create a program in Python to generate a list of prime numbers up to N,"def prime_list(N):
    isPrime = [True for i in range(N + 1)]
    p = 2
    while p * p <= N:
        if isPrime[p]:
            for i in range(p * p, N + 1, p):
                isPrime[i] = False
        p += 1
    prime_nums = []
    for p in range(2, N):
        if isPrime[p]:
            prime_nums.append(p)
    return prime_nums"
Write a Python script to print out all prime numbers in a given list.,"import math

def is_prime(n):
    for i in range(2, int(math.sqrt(n))+1):
        if n % i == 0: 
            return False
    return True

input_list = [4, 15, 22, 50, 119]

for num in input_list:
    if is_prime(num):
        print(num)

# Output: 
# 4
# 15
# 50
# 119"
"Create a Python object that contains two attributes, ""Name"" and ""Age"".","class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

person = Person(""John"", 25)"
Create a program in Python to add the elements of two given lists.,"list1 = [1, 2, 3]
list2 = [4, 5, 6]

def addLists(list1, list2):
    result = [] 
    for i in range(0, len(list1)):
        result.append(list1[i] + list2[i])
    return result

print(addLists(list1, list2))"
Write a Python program to generate a random permutation of a given sequence.,"from random import shuffle

sequence = [1, 2, 3]
shuffle(sequence)
print(sequence)"
Write Python code to generate a random string of length 8,"import string
import random

def generate_random_string():
    """"""
    Generate a random string of 8 characters
    """"""
    
    # Character sets
    chars = string.ascii_lowercase + string.ascii_uppercase + string.digits
    # Length of random string
    length = 8
    
    # Generate random string
    random_string = ''.join(random.sample(chars, length))

    return random_string

print(generate_random_string())"
"Create a Python code snippet to print ""Hello World!"" 10 times in the console.","for i in range(10):
 print(""Hello World!"")"
Write a Python program to find the maximum and minimum value of a given array.,"def min_max(data):
    min_val = min(data)
    max_val = max(data)
    return min_val, max_val
 
min_val, max_val = min_max([-2, 15, 4, 8, 11])
 
print('Minimum Value: ', min_val)
print('Maximum Value: ', max_val)"
Build a list comprehension in Python to print numbers divisible by 3 and not divisible by 7 in the range of 30 to 50,"divisible_by_3_or_7 = [n for n in range(30,51) if n % 3 == 0 and n % 7 != 0]
print(divisible_by_3_or_7) # output: [30, 33, 36, 39, 42, 45, 48]"
Construct an algorithm in Golang to capitalize all the letters in a given string,"package main

import (
	""strings""
)

func capitalize(string string) string {
	return strings.ToUpper(string)
}

func main() {
	string := ""python""
	fmt.Println(capitalize(string))
}"
Design a class in Python to represent a circle.,"class Circle:
    """"""Class to represent a circle.""""""
    def __init__(self, radius):
        """"""Initialize the circle.""""""
        self.radius = radius

    def get_area(self):
        """"""Calculate and return the area of the circle.""""""
        return 3.14 * self.radius * self.radius"
Implement a basic spell checker in Python that takes as input a given text and finds all the misspelled words.,"from spellchecker import SpellChecker

spell = SpellChecker() 

# Find all the possible words that are misspelled
misspelled = spell.unknown(text.split())

# Print out each misspelled word and its correction
for word in misspelled:
    print(f'Incorrect word: {word}\tCorrection: {spell.correction(word)}')"
Create a Python code to check if two DNA sequences are equal.,"def equal(dna1, dna2):
    if (dna1 ==dna2):
        return True
    else:
        return False
dna1 = 'ATTCTCA'
dna2 = 'ATTCCTA'

print(equal(dna1,dna2))"
How would you optimize the following Python code?,"def factorial(n):
    if n == 0:
        return 1
    else:
        # Use dynamic programming
        # to store the intermediate results
        memory = {}
        if n in memory:
            return memory[n]
        else:
            memory[n] = n * factorial(n - 1)
            return memory[n]"
Write a python function to find the average of odd numbers till a given odd number.,"def average_Odd(n) : 
    if (n%2==0) : 
        return (""Invalid Input"") 
        return -1 
    sm =0
    count =0
    while (n>=1) : 
        count=count+1
        sm = sm + n 
        n = n-2
    return sm//count "
Write a function to calculate the maximum aggregate from the list of tuples.,"from collections import defaultdict
def max_aggregate(stdata):
    temp = defaultdict(int)
    for name, marks in stdata:
        temp[name] += marks
    return max(temp.items(), key=lambda x: x[1])"
Create a Python program to calculate the factorial of an integer,"def factorial(n): 
    if n == 0 or n == 1: 
        return 1
    else: 
       return n * factorial(n - 1)

result = factorial(7)
print(result)"
Write a Python code snippet to calculate the sum of the first 100 prime numbers.,"def is_prime(num):
    for i in range(2, num):
        if num % i == 0:
            return False
    return True

prime_sum = 0 
count = 0
num = 2

while count < 100:
    if is_prime(num):
        prime_sum += num
        count += 1
    num += 1

print(prime_sum)"
Create a Python script to sort a list of tuples by the second element in the tuple in ascending order.,"def sortList(myList): 
 # sort list by second element  
 myList.sort(key = lambda x: x[1]) 
  
 # printing the sorted list  
 print (""The sorted list in ascending order is : "") 
 for i in range(len(myList)): 
  print(myList[i]), 

myList = [('Tom',7),('Harry',5),('Bob',8)]
sortList(myList)"
Generate a python program for validating a phone number.,"def valid_phone_number(phone):
    phone = str(phone)
    return len(phone) == 10 and phone.isdigit()"
Edit this Python code to be more efficient.,"def find_min(items):
    min = float('inf')
    for item in items:
        if item < min:
            min = item
    return min"
Create a Python program that takes a sentence as input and returns a dictionary of the words and their frequencies,"def word_frequency(sentence):
    words = sentence.split()
    freq = {word: words.count(word) for word in words}
    return freq

sentence = 'This is a sample sentence.'
result = word_frequency(sentence)
print(result)"
Compute the frequency of the words in a sentence using Python.,"def compute_word_frequency(sentence):
    words = sentence.split()
    frequency = {}

    for word in words:
        if word in frequency:
            frequency[word] += 1
        else:
            frequency[word] = 1
    return frequency"
Write a Python program to find all prime numbers less than a given number.,"def find_primes(n): 
    primes = []
    for i in range(2, n+1):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    
    return primes

print(find_primes(10)) # prints [2, 3, 5, 7]"
Write a function to check if the two given strings are permutations of each other.,"def check_permutation(str1, str2):
  n1=len(str1)
  n2=len(str2)
  if(n1!=n2):
    return False
  a=sorted(str1)
  str1="" "".join(a)
  b=sorted(str2)
  str2="" "".join(b)
  for i in range(0, n1, 1):
    if(str1[i] != str2[i]):
      return False
  return True"
Create a Python program that takes a string as input and prints all permutations of it in lexicographical order.,"def permutations(string):
 if len(string) == 0:
 return

 else:
 first_char = string[0]
 remainder = string[1:]
 permutations(remainder)
 for perm in permutations(remainder):
 for i in range(len(perm)+1):
 result = perm[:i] + first_char + perm[i:]
 print(result)

permutations(""ABC"") #run the code

# Output
ABC
ACB
BAC
BCA
CBA
CAB"
Create a Python function to identify the number of even numbers present in a given list of numbers.,"def countEvenNum(list):
    return len([x for x in list if x % 2 == 0])

list = [1, 2, 3, 4, 5]
print(countEvenNum(list))"
Create a Python program to log the current time (in the given timezone) every 20 minutes.,"import time
import datetime
from pytz import timezone

def logtime(tz):
 while True:
 currtime = datetime.datetime.now(tz)
 print(""The current time is"", currtime.strftime(""%H:%M:%S""))
 time.sleep(60 * 20)

logtime(timezone('America/Los_Angeles'))"
Write a Python function to check if a string contains only numbers.,"def checkNum(s): 
    flag = True
    for i in s: 
        if i.isdigit() == False: 
            flag = False
            break
  
    return flag"
"Write a Python program to print the numbers from 1 to 10 in ascending order, separated by a space.","for i in range(1, 11):
    print(i, end = ' ')"
Develop a Python program to remove duplicate characters in a given string.,"def remove_duplicate(my_string):
    char_seen = []
    for character in my_string:
        if character not in char_seen:
            char_seen.append(character)
    return ''.join(char_seen)

print(remove_duplicate(""Hello World"")) #Helo Wrld"
"Generate a program in Python to take in two strings as input, and output a list of all thewords in both strings.","def string_to_list(s1, s2):
    s1_list = s1.split()
    s2_list = s2.split()
    output_list = s1_list + s2_list
    return output_list

words = string_to_list(""I want to make a difference"", ""The journey to success is long"")
print(words)"
Create a function in Python that checks if a given number is a prime.,"def isPrime(n):
    if n < 2:
        return False
    for i in range(2, int(sqrt(n))+1):
        if n % i == 0:
            return False
    return True"
Write a Python program to filter a list of numbers so only even numbers are kept.,"new_list = [x for x in input_list if x % 2 == 0]
print(new_list) # Output: [2, 6, 10]"
Write a Python script to implement an iterator that iterates over a given array.,"def iterator(array):
  index = 0
  while (index < len(array)):
    yield array[index]
    index += 1

given_array = [2, 5, 6, 8, 9]
iterating = iterator(given_array)

for value in iterating:
  print(value)"
Perform sentiment analysis on a given text using Python.,"from textblob import TextBlob

text = ""This movie was an amazing experience!""
blob = TextBlob(text)
print(""Sentiment score: "", blob.sentiment.polarity)"
Write a Python program to find the most common letter in the given string.,"str = ""hello world""

from collections import Counter

def most_common_letter(str):
    letters_count = Counter(str).most_common()
    return letters_count[0][0]

print(most_common_letter(str))"
Write a function to find the top or bottom surface area of a cylinder.,"def topbottom_surfacearea(r):
  toporbottomarea=3.1415*r*r
  return toporbottomarea"
"Write a Python function that creates a JSON response with fields for score and data. The data field should contain a message that varies depending on the score value. If the score is 0, the message should state ""Try again"". If the score is 1, the message should state ""Well done"".","def create_response(score):
 if score == 0:
  message = ""Try again""  
 elif score == 1:
  message = ""Well done""
 else:
  message = """"
 
 return {""score"": score, ""message"": message}"
Write a Python program to scrape the text from a web page and remove all the html tags.,"import re

text = ""<p>This is a sample web page.<br>This text has <b>some</b> <i>html</i> tags.</p>""

cleaned_text = re.sub(r'<.*?>', '', text)

print(cleaned_text)
# Output: This is a sample web page.This text has some html tags."
Build a Python script for replacing punctuation with spaces.,"def remove_punctuation(s):
    punctuation = """"""!""#$%&'()*+, -./:;<=>?@[\]^_`{|}~""""""
    s_no_punct = """"
    for ch in s:
        if ch not in punctuation:
            s_no_punct += ch
        else:
            s_no_punct += "" ""
    return s_no_punct

s = ""Hello, world!""
s_no_punct = remove_punctuation(s)
print(s_no_punct) # Output: ""Hello  world """
Generate a Python program to generate a random permutation of the integers in a given list,"from random import shuffle 

def random_permutation(lst): 
    shuffle(lst) 
    return lst"
Create a Python program to compare two list and return a new combined list,"def combine_list(list_a, list_b):
    combined_list = []
    for a in list_a:
        combined_list.append(a)
    for b in list_b:
        combined_list.append(b)
    return combined_list"
You are given a list containing integers. Generate a Python program to find the median of that list.,"def find_median(list): 
    list = sorted(list) 
    mid = len(list) // 2 
    if len(list) % 2 == 0: 
        return (list[mid] + list[mid - 1]) / 2 
    else: 
        return list[mid] 

find_median(list)"
Compile a given python code that uses a specific library or package into an executable.,"import py_compile
py_compile.compile(""<python_code_file>"", cfile=""<executable_name>"", doraise=True)"
Create a function in Python to initialize an array with two parameters.,"def initialize_array(rows, cols): 
    array = [[0 for i in range(cols)] for j in range(rows)]
    return array"
Write a Python program to solve the Tower of Hanoi problem.,"def towers_of_hanoi(n, from_rod, aux_rod, to_rod): 
    if n == 1: 
        print(""Move disk 1 from rod"",from_rod,""to rod"",to_rod)
        return
    towers_of_hanoi(n-1, from_rod, to_rod, aux_rod) 
    print(""Move disk"",n,""from rod"",from_rod,""to rod"",to_rod) 
    towers_of_hanoi(n-1, aux_rod, from_rod, to_rod) 
          
# Driver code  
n = 4
towers_of_hanoi(n, 'A', 'B', 'C')"
Construct a Python program that finds the maximum number in a given sequence of integers.,"sequence = [7, 3, 12, 9, 4]
maxnum = 0

for num in sequence:
 if num > maxnum:
  maxnum = num

print(maxnum) # Output: 12"
Create an array in Python that contains the numbers 1-10 in ascending order.,"my_array = [1,2,3,4,5,6,7,8,9,10]"
"Edit the following Python program to return true if the following string contains the word ""Hello"".","def check_hello(s):
    return 'Hello' in s"
Create a vectorized implementation in Python to solve the given problem.,"import numpy as np
def add_vector(a, b):
    return np.add(a,b)"
Write a function in Python which will take an array of numbers and return the numbers in descending order.,"def sortDescending(arr):
    return sorted(arr, reverse=True)

print(sortDescending([1, 12, 3, 8]))"
Create a Python code snippet to calculate the average of the following array.,"def get_average(array):
    array_length = len(array)
    total_sum = 0
    for i in array:
        total_sum += i
    average = total_sum / array_length
    return average

print(get_average(items))"
Debug the following python code snippet so that it returns a list of even numbers from the given list of numbers.,"ls = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
result = []

for num in ls:
 if num % 2 == 0:
 result.append(num)
 
print(result) # prints [2, 4, 6, 8, 10]"
Create a Spark program in Python that generates a new dataframe from an existing dataframe by removing duplicates,"from pyspark.sql import functions as F

def removeDuplicates(df):
 df = df.dropDuplicates()
 df = df.orderBy(F.desc(""date""))
 return df"
Generate a list comprehension of python that adds two to each element of a given list.,"list = [x+2 for x in [1, 2, 3, 4]]"
Write a Python program to split a given list into two lists based on a given condition.,"list = [1, 2, 3, 4, 5, 6, 7, 8]

#Split the list into two lists based on a given condition
list_a = [x for x in list if x % 2 == 0]
list_b = [x for x in list if x % 2 != 0]

print(list_a) #[2, 4, 6, 8]
print(list_b) #[1, 3, 5, 7]"
Build a Hash Table in Python to store key-value pairs.,"class HashTable:
    def __init__(self):
        self.table = {}
    
    def put(self, key, value):
        self.table[key] = value
    
    def get(self, key):
        return self.table.get(key)"
Construct a Python program that shuffles a deck of cards.,"import random

# A standard deck of cards with 52 cards
deck = [2, 3, 4, 5, 6, 7, 8, 9, 10, 
        'J', 'Q', 'K', 'A', 
        2, 3, 4, 5, 6, 7, 8, 9, 10, 
        'J', 'Q', 'K', 'A',
        2, 3, 4, 5, 6, 7, 8, 9, 10, 
        'J', 'Q', 'K', 'A',
        2, 3, 4, 5, 6, 7, 8, 9, 10, 
        'J', 'Q', 'K', 'A']

# Shuffle the deck
random.shuffle(deck)
print(deck)"
Create a Python function to remove duplicate elements from a given array.,"def remove_duplicates(array): 
    result = set() 
    for element in array: 
        result.add(element) 
  
    return list(result) 
  
result = remove_duplicates(array) 
print(result)"
"Using Python, generate a program for solving linear equations.","def solution(coefficients):
	# get the coefficients of the equations
	a = coefficients[0][0] 
	b = coefficients[0][1] 
	c = coefficients[0][2] 
	d = coefficients[1][0] 
	e = coefficients[1][1] 
	f = coefficients[1][2] 

	# solve for x and y
	y = (a*f - c*d)/(a*e - b*d) 
	x = (c*e - b*f)/(a*e - b*d) 

	# return the solutions
	return x, y


# example
solution([[1, 2, 8], [3, -4, -2]])"
Create a Python program to analyze the sentiment of a given sentence.,"from textblob import TextBlob

sentence = 'I am very happy to be here'
sentiment = TextBlob(sentence).polarity

if sentiment > 0:
    print(""Sentiment: Positive"")
elif sentiment == 0:
    print(""Sentiment: Neutral"")
else:
    print(""Sentiment: Negative"")"
Write a python script to extract the text from a HTML page and count the number of words.,"from bs4 import BeautifulSoup
import re

html_doc = <input>
soup = BeautifulSoup(html_doc, 'html.parser')
text = soup.get_text()
words = re.findall(r'\w+', text)
print (len(words))"
Write a method in Python to print each element in a given dictionary.,"def printDict(dictionary): 
    for key in dictionary: 
        print(""{}: {}"".format(key, dictionary[key])) 

dict = {
    ""Alice"": 23,
    ""Bob"": 30,
    ""John"": 27
}
printDict(dict)"
Write a function to solve the fibonacci sequence using recursion.,"def fibonacci(n):
  if n == 1 or n == 2:
    return 1
  else:
    return (fibonacci(n - 1) + (fibonacci(n - 2)))"
Create a Python program to classify the digits in a dataset,"import numpy as np 
from sklearn.svm import SVC 

features = np.array([[0.25, 0.33, 0.46, 0.83, 0.14]]) 
labels = np.array([0, 0, 1, 1, 0]) 
clf = SVC() 
clf.fit(features, labels) 

# predicting the class of the following data 
test_data = np.array([[0.36, 0.22, 0.91, 0.81, 0.12]]) 
result = clf.predict(test_data) 
print(result)"
Generate and return a 4-dimensional array containing random numbers from 0 to 1 in Python.,"import numpy as np

def random_array():
 return np.random.random((4, 4, 4, 4))"
Create a function in Python to sort a list of dictionaries by a particular key.,"def sort_list(lst, key):
    # Sorts a list of dictionaries
    return sorted(lst, key=lambda k: k[key])"
Write a Python script to print the armstrong numbers between 0 and 1000.,"for num in range (0, 1000):
    order = len(str(num))
    s = 0
    x = num
    while x > 0:
        d = x % 10
        x = x // 10
        s += d ** order
    if num == s:
        print(num)"
"Create a python program which takes a sentance as the input, split it into words, and prints all the words on a new line.","sentence = ""This is a sentence""
words = sentence.split()
 
for word in words:
    print(word)"
Write a Python program to check if a given number is a prime number or not.,"def is_prime(num):
  if num <= 1:
    return False
  
  for i in range(2, num):
    if num % i == 0:
      return False
  
  return True"
"Using an AI library in Python (e.g. Scikit-learn), implement a neural network for a classification problem.","import numpy as np
from sklearn.neural_network import MLPClassifier

X = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
y = np.array([0, 1, 1, 0])

clf = MLPClassifier(solver='lbfgs', alpha=1e-5, hidden_layer_sizes=(5, 2), random_state=1)
clf.fit(X, y)

predictions = clf.predict(X)"
"Write a Python function to generate a random number between 1 and 5, given two numbers X and Y.","import random

def generate_random_number(x, y):
    start = min(x, y)
    end = max(x, y)
    return random.randint(start, end)

result = generate_random_number(4, 8)
print(result)"
Generate a Python function that returns the maximum of two given numbers.,"def maxOfTwo Numbers(num1, num2):
	if num1 > num2:
		return num1
	else:
		return num2

print(maxOfTwoNumbers(4, 6))"
Generate a Python program to split a given string into uppercase and lowercase letters.,"def case_split(string):
    string_list =list(string)
    upper_list = []
    lower_list = []
    
    for i in string_list:
        if i.isupper():
            upper_list.append(i)
        else:
            lower_list.append(i)
    return ''.join(upper_list), ''.join(lower_list)"
Create a Python program to classify a given set of data using a k-nearest neighbors algorithm.,"import numpy as np
from sklearn.neighbors import KNeighborsClassifier

data = np.array([[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]])

# Create the model
model = KNeighborsClassifier()

# Train the model
model.fit(data[:, 0].reshape(-1, 1), data[:, 1].reshape(-1, 1))

# Output the result
print(model.predict([[2]])) # [[3]]"
Develop a function in Python to calculate the circumference of a circle.,"def calculate_circumference(radius):
    circumference = 2 * 3.14 * radius
    return circumference

if __name__ == '__main__':
    radius = 10
    circumference = calculate_circumference(radius)
    print(circumference)"
Determine the maximum of two values in Python without using the max function.,"# Determine the maximum of two values in Python
# without using the max function

x = 7
y = 3

# if x is greater than y, 
# then x is the max
if x > y:
    max_value = x
# if y is greater than x, 
# then y is the max
else:
    max_value = y

print(max_value)"
"Given an URL as a string, write a program in Python to find the domain name.","def get_domain_name(url): 
    return url.split(""/"")[2]

print(get_domain_name(""https://www.google.com""))  # prints www.google.com"
Optimize a Python script's performance by refactoring the code to use multiprocessing.,"from multiprocessing import Pool

def process_data(record):
 # Process the data

def process_list_data(data):
 with Pool() as p:
 p.map(process_data, data)

list_data = [1,2,3,4,5]

process_list_data(list_data)"
Sort the list in the following python code using the bubble sort algorithm.,"def bubble_sort(arr): 
    n = len(arr) 
    for i in range(n): 
        for j in range(0, n-i-1): 
            if arr[j] > arr[j+1] : 
                arr[j], arr[j+1] = arr[j+1], arr[j]

bubble_sort(arr)"
Write a Python program to convert a binary number to decimal.,"def bin_to_dec(binary):
    decimal, i, n = 0, 0, 0
    while(binary != 0): 
        dec = binary % 10
        decimal = decimal + dec * pow(2, i) 
        binary = binary//10
        i += 1
    return decimal"
Construct a method in Python that reverses a given string,"def reverse(s):
    if len(s) == 0: 
        return s 
    else: 
        return reverse(s[1:]) + s[0]"
Create a function in Python for evaluating a given expression.,"def eval_expr(expr):
    return eval(expr)

print(eval_expr(""2 * (3 + 4)""))
# 14"
Create a Python script that takes a given text string and outputs the number of words in the string.,"def wordCount(text):
    words = text.split(' ')

    return len(words)

print(wordCount(""I love programming""))  # 3"
Write a Python program to join two given lists.,"def join_lists(list1, list2):
    return list1 + list2

list1 = [1, 2, 3] 
list2 = [4, 5, 6]

joined_list = join_lists(list1, list2)
print(joined_list)"
Build a Python program to sort values,"def sort_ascending(arr):
    # Bubble sort
    for i in range(len(arr) - 1):
        for j in range(len(arr) - 1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
    
    return arr"
Create a K-Means Clustering algorithm in Python.,"# Import KMeans
from sklearn.cluster import KMeans

# Create KMeans object
kmeans = KMeans(n_clusters=3, random_state=0)

# Train the model
kmeans.fit(X)

# Get the labels
labels = kmeans.labels_

# Get the cluster centroids
centroids = kmeans.cluster_centers_"
Optimize a Python program to print all odd numbers between 0 and 50,"# Using for loop 
for num in range(0, 51): 
 if num % 2 != 0: 
 print(num, end = "" "") 

# Output: 1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49"
Write a function to count all the distinct pairs having a difference of k in any array.,"def count_pairs(arr, n, k):
  count=0;
  for i in range(0,n):
    for j in range(i+1, n):
      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:
        count += 1
  return count"
Generate a Python program to calculate the area of a rectangle given two parameters representing the length and the width.,"def area_rectangle(length, width):
 return length * width

print(area_rectangle(2, 3)) # Output: 6"
Suggest a method to improve the efficiency of the following Python program.,"s = 'abcdefghijklmnopqrstuvwxyz'

def func(s):
    s_list = set()
    for c in s:
        s_list.add(c)
    
    return list(s_list)"
Create a class in Python that defines an item in an inventory system.,"class Item:
    def __init__(self, name, description, price):
        self.name = name
        self.description = description
        self.price = price

    def print_info(self):
        print(""Name:"", self.name)
        print(""Description:"", self.description)
        print(""Price:"", self.price)"
"Using the given functions, write a Python program that takes an n-dimensional vector vector as an argument and returns its norm.","def vector_norm(vector):
    return vector_length(vector)

vector = [1, 2, 3]
norm = vector_norm(vector)
print(norm)"
Write a Python function to filter strings using a filter function as a parameter.,"def filter_strings(strings, filter_function):
    filtered = []
    for string in strings:
        if filter_function(string):
            filtered.append(string)
    return filtered"
"Generate a function in Python to print ""Hello World!"" every second.","import time

def printHelloWorld():
  while True:
    print(""Hello World!"")
    time.sleep(1) 

printHelloWorld()"
Design a class representing a car using Python.,"class Car():

    def __init__(self, model, make, color, engine_power, num_wheels):
        self.model = model
        self.make = make
        self.color = color
        self.engine_power = engine_power
        self.num_wheels = num_wheels

    def start_engine(self):
        print(""Engine started."")

    def stop_engine(self):
        print(""Engine stopped."")"
Construct an HTTP request in Python which requests a resource from a given URL.,"import requests 

response = requests.get('<url>')"
Create a Python program that prints a Fibonacci sequence.,"def fibonacci(length):
  fibonacci_list = [1, 1]
  while len(fibonacci_list) < length:
    last_item = fibonacci_list[-1]
    second_last_item = fibonacci_list[-2]
    next_item = last_item + second_last_item
    fibonacci_list.append(next_item)
  return fibonacci_list

length = 10
print(fibonacci(length))"
Construct a program in Python that determines the largest prime factor of a number.,"def find_largest_prime_factor(number):
  i = 2
  while i < number // 2:
    if number % i == 0:
      number = number // i
      i = 2
    else:
      i += 1
  return number

print(find_largest_prime_factor(300))"
Devise an algorithm in Python to determine if a given number is even or odd.,"def is_even(num):
    if num % 2 == 0:
        return True
    else:
        return False"
Write a Python code that takes a given list of numbers and returns the mode of that list.,"def find_mode(List): 
    max_count = 0
    modes = [] 
    for num in List: 
        current_count = List.count(num) 
        if current_count > max_count: 
            max_count = current_count 
            modes = [num] 
        elif current_count == max_count: 
            modes.append(num) 
    return modes"
Generate a python program to calculate the square root of a number,"def sqrt_calc(num):
    return num**0.5"
Write a python program to extract text data from a PDF document.,"import PyPDF2

# Load file
file= open(your_pdf_filename, 'rb')
reader= PyPDF2.PdfFileReader(file)

# Read text
text = ''
for page in reader.pages:
 text += page.extractText()

# Close file
file.close()

# Print result
print(text)"
Write a function in python which creates a list containing the squares of all numbers between 1 and 100,"def create_squares_list():
    squares_list = []
    for i in range(1, 101):
        squares_list.append(i**2)
    return squares_list"
Find the maximum of three numbers using a Python program.,"def findMaxNum(a, b, c):
    maxNum = a
    if b > maxNum:
        maxNum = b
    if c > maxNum:
        maxNum = c
    return maxNum

maxNum = findMaxNum(5, 11, 6)
print(maxNum)"
Create a Python function to print out all the prime numbers between two integers.,"def print_primes(start, end):
 for n in range(start, end + 1):
 if is_prime(n):
 print(n)
 
def is_prime(n):
 if n <= 1:
 return False
 elif n <= 3:
 return True
 elif (n % 2 == 0) or (n % 3 == 0):
 return False
 
 i = 5
 while i ** 2 <= n:
 if (n % i == 0) or (n % (i + 2) == 0):
 return False
 i += 6
 
 return True

print_primes(10, 25)"
"Update the given python object with field name ""address"", value as ""London""","{'name': 'John', 'age': 25, 'address': 'London'}"
Generate a Python program to apply custom formatting for the following output.,"def create_html_table(slist):
    table_html = ""<table>""
    for str in slist:
        table_html += ""<tr>""
        table_html += ""<td>"" + str + ""</td>"" 
        table_html += ""</tr>""

    table_html += ""</table>""
    return table_html"
Design a program in Python which generates a random mathematical equation with two numbers.,"import random

def generateRandomEquation():
    num1 = random.randint(0,9)
    num2 = random.randint(0,9)
    op = random.choice(['+','-','*','/'])
    equation = str(num1) + op + str(num2)
    return equation

print(generateRandomEquation())"
Create a post request in Python using the requests library to roll a die on a website.,"import requests

url = 'http://roll-dice-game.com/roll'

payload = {
 'number-of-dice': 1
}

r = requests.post(url, data=payload)

print(r.text)

# Output: The dice rolled a 3!"
Write a code to sort a list of strings according to their lengths,"def sortByLength(strings):
    """"""Sort a list of strings according to their lengths""""""
    # Sort the list using a key function
    return sorted(strings, key=len)

if __name__ == '__main__':
    strings = [""Python"", ""is"", ""a"", ""programming"", ""language""]
    print(sortByLength(strings))"
Write a codesnippet in Python to generate 5 random integers between 1 and 10.,"import random

rand_nums = [random.randint(1,10) for x in range(5)]
print(rand_nums)"
Design a program that takes a date as input and calculates the day of the week that date falls on.,"#!/usr/bin/env python3

import datetime

def dayOfWeek(date):
   year,month,day = map(int,date.split('/'))
   dayNumber = datetime.date(year, month, day).weekday()
 
   return [""Monday"", ""Tuesday"", ""Wednesday"", ""Thursday"", ""Friday"", ""Saturday"", ""Sunday""][dayNumber]"
Create a Python script which takes two numbers as arguments and returns the maximum of the two numbers.,"def maxNumber(num1, num2):
 if num1 > num2:
   return num1
 else:
   return num2

if __name__ == '__main__':
 num1 = 8
 num2 = 4
 print(maxNumber(num1, num2))"
Write a python script that prints the 20th Fibonacci number.,"def fibonacci(n): 
    a = 0
    b = 1
    if n < 0: 
        print(""Incorrect input"") 
    
    elif n == 0: 
        return a 
    
    elif n == 1: 
        return b 
    else: 
        for i in range(2,n): 
            c = a + b 
            a = b 
            b = c 
        return b 

print(fibonacci(20))"
Write a function to check whether the given month number contains 31 days or not.,"def check_monthnumb_number(monthnum2):
  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):
    return True
  else:
    return False"
Write a Python program to retrieve the latest top 50 news headlines from The Guardian.,"import requests
import bs4

# Retrieve the latest top 50 news headlines from The Guardian
url = 'https://www.theguardian.com/'
resp = requests.get(url)
soup = bs4.BeautifulSoup(resp.text, features=""html.parser"")
headlines = soup.find_all('h3')
top_50_headlines = [h3.text for h3 in headlines[:50]]
print(top_50_headlines)"
Write a Python program to calculate the total cost of a shopping cart containing multiple items. The program should take a list of items and their prices as input and output the total cost.,"totalCost = 0
for item, price in items.items():
totalCost += price

print(f'Total cost of the cart is {totalCost}')"
Generate a Python program to construct a hash table that stores strings as keys and integers as values.,"def create_hash_table():
    hash_table = dict(zip(list_of_strings, list_of_integers))
    return hash_table"
Design a Python program to randomize a list of given integers using an optimized Fisher-Yates algorithm.,"def randomized_list(num_list):
    for i in range(len(num_list)-1,0,-1):
        j = random.randint(0,i)
        num_list[i],num_list[j] = num_list[j],num_list[i]
    return num_list"
Create a python program which will take user name as input and print the same,"name = input(""Enter your name: "")
print(""Hello "" + name + ""!"")"
Create a class in Python that represents a student with two instance variables and a constructor to assign values to those variables.,"class Student: 
    def  __init__(self, name, grade): 
        self.name = name
        self.grade = grade 
  
    def getGrade(self): 
        return self.grade"
Modify a given Python code to make it run faster.,"# original code 
def find_sum(numbers):
  total = 0
  for number in numbers:
    total += number
  return total 

# modified code 
def find_sum(numbers):
  return sum(numbers)"
Optimize performance of an existing code snippet by making use of Python's list comprehensions.,"numbers = [1, 2, 3, 4, 5]
squares = [n*n for n in numbers]"
Generate a Python program to round a floating point number to a certain number of decimal places.,"def round_float(num, decimal_ places):
    '''
    Function to round a floating point number to a certain number of decimal places
    '''
    return round(num, decimal_places)

result = round_float(2.71828, 3)
print(result)"
Generate code to construct a decision tree in Python.,"from sklearn.tree import DecisionTreeClassifier

#Initialize the model
model = DecisionTreeClassifier(random_state=1)

# fit the model
model.fit(X, y)

# predict the target for test set
model.predict(X_test)"
Implement a Python function to check if all n numbers in an array are equal.,"def checkEqual(arr):
    if len(arr) == 0:
        return False
    return all(arr[0] == x for x in arr)"
Generate a Python program that determines whether a given array is a palindrome or not.,"def is_palindrome(arr):
    if arr == arr[::-1]:
        return True
    return False

result = is_palindrome([3, 2, 1, 1, 2, 3])
print(result) # Output: True"
Write an algorithm in Python that finds the maximum of three numbers.,"def find_max(a, b, c):
    if a > b and a > c:
        max_num = a
    elif b > a and b > c:
        max_num = b
    else:
        max_num = c
 
    return max_num
 
 max_number = find_max(7, 5, 9)
 
 print(""The maximum of three numbers is:"", max_number)"
Write a Python program to find the sum of the given series 1 + 1/2 + 1/3 +...... + 1/100.,"sum = 0
for i in range(1,101):
    sum += 1/i

print(sum)"
Create a neural network in Python for a binary classification problem with two classes.,"import keras
from keras.models import Sequential
from keras.layers import Dense, Activation, Dropout

# Create the model
model = Sequential()
model.add(Dense(32, input_shape=(2,)))
model.add(Activation('relu'))
model.add(Dense(2))
model.add(Activation('softmax'))

# Compile the model
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])"
Generate a program in Python to output the top 3 numbers from an array of integers,"def top_three(numbers):
    sorted_numbers = sorted(numbers, reverse=True)
    return sorted_numbers[:3]

print(top_three([7, 13, 5, 8, 50, 11, 64, 48]))"
Write a Python program that can detect the language of a given piece of text.,"import detect_language

text = ""Bonjour tout le monde""
language = detect_language.detect(text)
print(language) # fr"
Generate a python script to return the longest word in a given sentence.,"def longestWord(sentence):
    words = sentence.split(' ')
    longest = ''
    for word in words:
        if len(word) > len(longest):
            longest = word
    return longest"
Create a python function which takes a list as an argument and returns the largest number in the list.,"def largest_number(numbers):
    largest = numbers[0]
    for num in numbers:
        if num > largest:
            largest = num
    return largest

largest = largest_number(numbers)
print('The largest number in the list is: ', largest)"
"Create a function in Python to optimize the following function with respect to its two variables x, and y.","import numpy as np 
import scipy.optimize as opt 

def func(x): 
	return 2*np.power(x[0], 3) + 3*np.power(x[1],2) + x[1] + 5

opt.minimize(func, ([0, 0]), method='nelder-mead', 
options={'xtol': 1e-8, 'disp': True})"
Create a function in Python that takes a list of numbers andarranges them in ascending order.,"def sort_ascending(nums):
    sorted_list = sorted(nums) 
  
    return sorted_list

print(sort_ascending(nums)) # [1, 2, 4, 5, 5, 6]"
"Write a Python program that performs sentiment analysis on a given sentence and labels it as ""positive"", ""negative"" or ""neutral"".","def sentiment_analysis(sentence):
  # Use sentiment analyzer API here   
  sentiment = sentiment_analyzer.polarity_scores(sentence)
  if sentiment['compound'] > 0:
    return 'positive'
  elif sentiment['compound'] < 0:
    return 'negative'
  else:
    return 'neutral'"
Generate a Python class that stores the details of customer orders.,"class Order:
 def __init__(self, customer_name, customer_address, order_items):
 self.customer_name = customer_name 
 self.customer_address = customer_address
 self.order_items = order_items
 
 def get_order_details(self):
 return f""Customer name: {self.customer_name}, Address: {self.customer_address}, Order items: {self.order_items}"""
Write a regular expression in Python to match a pattern of email addresses.,"import re

pattern = r'^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$'"
Generate a python program to parse a string and extract the number of vowels.,"def count_vowels(s):
    vowels = [""a"", ""e"", ""i"" , ""o"", ""u""]
    count = 0 
    for character in s.lower():
        if character in vowels:
            count += 1
    print(""Number of vowels :"", count)"
"Convert the string ""Hello World"" to lowercase using Python.","""hello world"".lower()"
Write a python function to check whether a given sequence is linear or not.,"def Seq_Linear(seq_nums):
  seq_nums = [seq_nums[x] - seq_nums[x-1] for x in range(1, len(seq_nums))]
  if len(set(seq_nums)) == 1: 
    return ""Linear Sequence""
  else:
    return ""Non Linear Sequence"""
Design a Python program to remove all the elements from a list that are not a prime number.,"def remove_non_primes(my_list):
    result = []
    for num in my_list:
        prime = True
        for i in range(2, num):
            if num % i == 0:
                prime = False
                break
        if prime:
            result.append(num)
    return result

result = remove_non_primes([1, 2, 3, 4, 5, 6, 7, 8])
print(result)"
Write a python function that accepts a number n as input and outputs its nth prime number.,"def nth_prime(n):
  
 num_primes = 0
 curr_num = 2
 
 while num_primes < n:
   is_prime = True
   for i in range(2, curr_num):
       if curr_num % i == 0:
           is_prime = False
           break
   if is_prime:
       num_primes += 1
   curr_num += 1

return curr_num - 1"
Generate a correct python statement to add two given numbers.,sum = num1 + num2
Write a function to swap two numbers.,"def swap_numbers(a,b):
 temp = a
 a = b
 b = temp
 return (a,b)"
Optimize a given Python script by running in parallel.,"import concurrent.futures

def thread_function(script):
  // Code to run the given script in parallel

with concurrent.futures.ThreadPoolExecutor() as executor:
  executor.map(thread_function, scripts)"
"Design a class in Python with instance attributes for name, height, and age of a person.","class Person:
 def __init__(self, name, height, age):
 self.name = name
 self.height = height
 self.age = age"
Create a Python program that takes a sentence as an input and outputs all the words with their part of speech.,"import nltk

sentence = 'This is a sentence.'
words = nltk.word_tokenize(sentence)

for word in words:
 print(f'{word}: {nltk.pos_tag([word])[0][1]}')"
Create a python program to filter out all the even numbers from a given list.,"def filter_even_numbers(numbers):
    even_numbers = []
    for i in numbers:
        if i % 2 == 0:
            even_numbers.append(i)
    return even_numbers
    
    
filtered = filter_even_numbers([3, 4, 5, 6, 7])
print(filtered)"
Write a Python program to find all the roots of a given quadratic equation.,"def quadratic_roots(a, b, c):
    # Calculate the discriminant 
    discriminant = (b**2) - (4*a*c)

    # Compute the root
    root1 = (-b + discriminant**0.5)/(2*a) 
    root2 = (-b - discriminant**0.5)/(2*a)

    # Print the roots
    print(""The roots are {0} and {1}"".format(root1, root2))

quadratic_roots(2, 5, -3)"
Write a Python script to get the sum of two numbers and check the correctness of the result.,"# Get the numbers
two_numbers = [4, 7]

# Compute the sum
result = two_numbers[0] + two_numbers[1]

# Check the correctness of the result
if result != 11:
    print(""The result is wrong!"")
else:
    print(""The result is correct!"")"
Develop a python code that prints the longest word in a list.,"def longest_word(word_list): 
    maxLen = len(max(word_list, key = len)) 
    return [x for x in word_list if len(x) == maxLen] 
  
list = [""Hello"", ""World"", ""Welcome"", ""To"", ""the"", ""universe""]
  
print(longest_word(list)) # Output: [""Welcome"", ""universe""]"
"Write a function in Python to validate a given email address given strings of type ""email@example.com"".","import re

def validate_email(email):
 regex = '^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$'
 if(re.search(regex,email)): 
  return True
 else:  
  return False"
Write a python program to generate a random letter of the alphabet.,"import random 
  
# create a list of all the letters in the alphabet
alphabet = [""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"", 
             ""i"", ""j"", ""k"", ""l"", ""m"", ""n"", ""o"", ""p"", 
             ""q"", ""r"", ""s"", ""t"", ""u"", ""v"", ""w"", ""x"", 
             ""y"", ""z""] 
  
# generate a random letter
random_letter = random.choice(alphabet)
print(random_letter)"
Write a Python script to parse a given string and construct a dictionary from its content.,"def parse_string(s):
    info = s.split("", "")

    result = {}
    for item in info:
        k, v = item.split("": "")
        result[k] = v

    return result

result = parse_string(""bio: John Smith, age: 32"")
print(result)"
Modify the given Python program to optimize the memory allocation and improve the execution time of the program,"import pandas as pd

# Load the dataset with memory optimization
data = pd.read_csv('dataset.csv', low_memory=True)

# Optimize the data to reduce the size 
data = data.drop_duplicates(keep=False)

# Optimize the data to increase the performance 
data = data.apply(pd.to_numeric, errors='coerce')"
"Write a Python script to find all the divisible numbers in a given range (1 to n), where n is a positive integer provided by the user.","def find_divisible_numbers(n):
  divisibles = []
  for i in range(1, n+1):
    if i % 3 == 0:
      divisibles.append(i)
  return divisibles

find_divisible_numbers(20)"
Rewrite the following function in Python to use recursion instead of a loop,"def factorial_recursive(n):
    # Base case: 
    # n is 1, return 1
    if n == 1:
        return 1
    # Recursive case: 
    # return n * (n-1)
    return n * factorial_recursive(n - 1)

# Test
print(factorial_recursive(5))"
"Write a Python program to convert a given number of days into years, months and days.","def convert_days_wm(Days):
    y = Days//365
    m = (Days%365)//30
    d = (Days%365)%30
    return y, m, d"
Create a Python script that orders a list of strings alphabetically from a to z.,"def sort_list(list):
    list.sort()
    return list

sorted_list = sort_list([""Banana"", ""Apple"", ""Orange"", ""Pear""])
print(sorted_list)"
Write a script in Python to generate a dictionary of words from a given string.,"def words_dict(string):
    """"""This function returns a dictionary with words as keys and their count as values.""""""
    words = string.split()
    word_dict = {}
    
    for word in words:
        if word in word_dict:
            word_dict[word] += 1
        else: 
            word_dict[word] = 1
    
    return word_dict"
Design a Python web crawler that takes a URL as an input and prints out a list of all the hyperlinks on the page.,"import requests 
from bs4 import BeautifulSoup 

def crawl_page(url): 
    page = requests.get(url) 
    soup = BeautifulSoup(page.content, 'html.parser') 
    return [link.get('href') for link in soup.find_all('a')] 

url = ""https://www.example.com""
links = crawl_page(url)
for link in links:
 print(link)"
Write a loop in Python that accumulates the sum of the numbers in an array.,"sum = 0

for num in [1, 2, 3]:
    sum += num

print(sum)"
Write a function in Python to Print a given string in Reverse order.,"def reverseString(string):
    revString = ''
    for i in range(len(string)-1, -1, -1):
        revString += string[i]
    return revString"
Create a Python function which takes an integer as input and prints it in binary.,"def int_to_binary(n):
    if n == 0:
        return '0'
    bin_string = """"
    while n > 0:
        bin_string = str(n%2) + bin_string
        n = n // 2
    return bin_string"
Create a Python program to join a list of strings with a delimiter.,"def join_list_str(list_str, delimiter):
  return delimiter.join(list_str)

list_str = [""Apple"", ""Orange"", ""Mango""]
delimiter = "",""

result = join_list_str(list_str, delimiter)

print(result)

# Output
Apple,Orange,Mango"
Design an algorithm in Python to search a number in an sorted array.,"def search(arr, x): 
    l = 0
    r = len(arr) - 1
    while l <= r: 
        mid = l + (r - l) // 2

        if arr[mid] == x: 
            return mid 
        
        elif arr[mid] < x: 
            l = mid + 1
  
        else: 
            r = mid - 1
  
    return -1"
"Optimize the following Python program for computing Fibonacci numbers:
def fib(n):
 if n <= 1:
  return n
 else:
  return fib(n-1) + fib(n-2)","def fib(n):
 fibonacci_numbers = [0, 1]

 for i in range(2, n + 1):
  fibonacci_numbers.append(fibonacci_numbers[i - 1] + fibonacci_numbers[i - 2])

 return fibonacci_numbers[n]"
Edit a Python module to include a function that adds two given numbers.,"def subtract(x, y):
    return x - y

def add(x, y):
    return x + y"
"Modify the Python function so that it prints ""Success!"" if the input parameter is greater than 10, or prints ""Failed!"" if it is less than or equal to 10.","def check_num(num):
    if num > 10:
        print(""Success!"")
    else:
        print(""Failed!"")

check_num(7)"
Use Python to sort the list of words in descending alphabetical order.,"words = [""correct"", ""tango"", ""apple"", ""banana""] 

# Sort words in reverse alphabetical order 
words.sort(reverse=True) 

# Print list in descending order 
print(words)"
Generate a function in Python which can be used to compare two strings to see which one is longer.,"def compare_length(s1, s2):
    if len(s1) == len(s2):
        return 0
    elif len(s1) > len(s2):
        return 1
    else:
        return 2"
"Given a URL, write a Python script to fetch and decode the HTML web page using the `requests` library.","import requests

url = ""https://example.org/""

response = requests.get(url)

if response.status_code == 200:
  html_page = response.content.decode('utf-8')"
Create a function in Python that takes a string as input and replaces the character at a given index with the character '*'.,"def replace_character(string, index):
    new_string = """"
    for i in range(len(string)):
        if i == index:
            new_string += ""*""
        else:
            new_string += string[i]
    return new_string

print(replace_character(""Hello world"", 3)) # Output: Hel*lo world"
Design an interface for a Python program that parses HTML documents.,"from bs4 import BeautifulSoup


class HTMLParser:
    def __init__(self, html_doc):
        self.html_doc = html_doc

    def parse(self):
        soup = BeautifulSoup(self.html_doc, 'html.parser')
        return soup"
Construct a Python code that accepts a string as an input and returns the total number of vowels in the string,"def count_vowels(string): 
    vowels = ""aeiou""
    count = 0
    for s in string:
        if s.lower() in vowels:
            count += 1
    return count"
Create a loop in Python to print the following sentence 5 times.,"for i in range(5):
    print(""I love coding!"")"
"Implement a function in Python that takes a nested list as an input, and flattens the list into a single list.","def flatten_list(list):
 flattened_list = []
 for sublist in list:
 for item in sublist:
 flattened_list.append(item)
 return flattened_list

print(flatten_list([[1,2,3],[4,5,6],[7,8,9]]))
# Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]"
"Write a Python program to generate a dictionary that contains numbers (between 1 and n) in the form (x, x*x).","nums = {x: x*x for x in range(1, n+1)}
print(nums)"
Can you create a Python program that compares two lists and finds common elements?,"list1 = [3, 4, 5, 6, 7]
list2 = [2, 3, 4, 5, 6]

common_elements = set(list1) & set(list2)
print(list(common_elements)) 
# Output: [3, 4, 5, 6]"
Design a function in Python that takes a positive integer and returns the sum of its digits.,"def sum_digits(n):
    num_str = str(n)
    total = 0
    for digit in num_str:
        total += int(digit)
    return total"
Enhance a given program in python so that it prints all divisors of a given number.,"def printDivisorsOfNumber(n): 
    print(""The divisors of the number are: "")
    for x in range(1, n+1):
        if n%x == 0: 
            print(x)"
Create a Python program to take two numbers as user input and print the result of subtracting the smaller from the larger.,"x = int(input(""Enter the first number: ""))
y = int(input(""Enter the second number: ""))

if x > y:
 result = x-y
else:
 result = y-x
 
print(""The result of the operation is:"", result)"
Can you modify the previous program in python to generate random passwords with length 10 and include a symbol?,"import string, random

characters = string.ascii_letters + string.digits + string.punctuation

def generate_password():
	
	password = """"

	for i in range(10):
		password += random.choice(characters)

	return password

print(generate_password())"
Generate a Python program that translates a sentence into pig latin,"def pig_latin(sentence):
  words = sentence.split(' ')
  result = """"
  for word in words:
    result += word[1:] + word[0] + ""ay"" + "" ""
  return result

print(pig_latin(""Hello world""))"
Generate a function in Python that takes a list and returns a list of all possible subsequences.,"def get_subsequences(arr):
    subsequences = [[]]
    for num in arr:
        new_subsequences = []
        for sub in subsequences:
            new_subsequences.append(sub + [num])
        subsequences += new_subsequences
    return subsequences

arr = [1, 2, 3]
result = get_subsequences(arr)
print(result)"
Generate a method for a Python class that returns the most commonly used words in a text document.,"def most_common_words(self):
 words = {}
 words_list = self.text.split(' ')
 
 for word in words_list:
 if word in words.keys():
 words[word] += 1
 else:
 words[word] = 1
 
 return sorted(words, key=words.get, reverse=True)[:10]"
Write a Python program to print out the numbers from one to ten and identify any numbers that are divisible by three.,"for i in range(1, 11):
 if i % 3 == 0:
 print (f'{i} is divisible by three.')
 else:
 print (i)"
Generate a python program to detect palindromes,"def is_palindrome(word): 
    word = word.lower() 
    rev_word = word[::-1] 
    if word == rev_word: 
        return True
    else: 
        return False"
Convert a string to lowercase using Python.,"str = ""HELLO WORLD!""
lowerCaseStr = str.lower()
print(lowerCaseStr)"
Implement a Python program to remove all duplicates from an array.,"def remove_duplicates(my_list):
    result = []
    seen = set()
    for item in my_list:
        if item not in seen:
            seen.add(item)
            result.append(item)
    return result"
Create a Python script to calculate the sum of all the even numbers between 1 and 1000.,"def sum_even_numbers(n):
    sum = 0
    for i in range(2,n+1,2):
      sum += i
    return sum

print(sum_even_numbers(1000))"
Create a basic chatbot in Python that takes input from the user and responds.,"import random

def chatbot():
 prompt = ""> ""
 response = """"
 
 while response != ""goodbye"":
 response = input(prompt)
 
 if response == ""hello"":
 print(""Hi there!"")
 elif response == ""how are you?"":
 responses = [""I'm good!"", ""I'm doing alright!"", ""Not too bad!""]
 print(random.choice(responses))
 
chatbot() // Output: Hi there!"
"Using a built-in sorting algorithm, write a Python program to sort a given list of integers.","def sort_list(arr):
    return sorted(arr)

my_list = [3, 4, 6, 1, 9, 5, 2]
sorted_list = sort_list(my_list)
print(sorted_list)"
Create a program in any programming language to display a UI widget.,"//Use Python

import tkinter as tk

# Create the main window
root = tk.Tk()

# Create a label
label = tk.Label(master = root, text = ""Hello World!"")

# Put the label in the window
label.pack()

# Start the mainloop
root.mainloop()"
Translate the following code from Python to JavaScript,"function calculateArea(width, height) {
    return width * height;
}"
Write a function to find the minimum total path sum in the given triangle.,"def min_sum_path(A): 
	memo = [None] * len(A) 
	n = len(A) - 1
	for i in range(len(A[n])): 
		memo[i] = A[n][i] 
	for i in range(len(A) - 2, -1,-1): 
		for j in range( len(A[i])): 
			memo[j] = A[i][j] + min(memo[j], 
									memo[j + 1]) 
	return memo[0]"
Develop a Python program to calculate the Volume of a Sphere with the given radius.,"def calculateSphereVolume(radius):
    volume = (4/3) * (3.142) * (radius**3)
    return round(volume, 2)

radius = 5
result = calculateSphereVolume(radius)
print(result)  # Output: 523.6"
Construct a Python program to sum the items of a given list.,"def list_sum(input_list):
    """"""Computes the sum of the items of a given list.""""""
    output = 0
    for item in input_list:
        output += item
    return output

print(list_sum([3, 5, 6, 10]))"
"Given a string as an argument, write a Python function to find the longest palindrome in the string.","def longest_palindrome(s):  
    longest_p = 0
    for i in range(len(s)):
        for j in range(i+1,len(s)+1):
            if s[i:j] == s[j-1::-1] and len(s[i:j]) > longest_p:
                longest_p = len(s[i:j])
    return longest_p"
Create a Python program to visualize the performance of different stock prices over a period of time.,"import matplotlib.pyplot as plt
 
# Read in data
data = []
with open('stock_prices.txt') as f:
    data = [float(x) for x in f.read().split()]

# Plot data
plt.plot(range(1, len(data)+1), data)
plt.title('Stock Price Over Time')
plt.xlabel('Time')
plt.ylabel('Price')
plt.show()"
Write a function to remove all elements from a given list present in another list.,"def remove_elements(list1, list2):
    result = [x for x in list1 if x not in list2]
    return result"
Create a function in Python that converts a sentence to upper case.,"def sentence_to_upper(sentence):
    return sentence.upper()

print(sentence_to_upper(""This is an example sentence.""))"
Create a program in Python to print the following output.,"str = ""programming""
print(str[::-1])

Output: gnimmargorp"
Generate a Python script to detect the most frequent word in a sentence.,"def most_frequent_word(s): 
    words = s.split() 
    freq_word = words[0] 
    freq_count = 1 
      
    for i in range(1, len(words)): 
        if words[i] == freq_word: 
            freq_count += 1
        else: 
            if freq_count > 1: 
                freq_word = words[i] 
                freq_count = 1
      
    return freq_word"
Generate a linear regression model in Python that predicts the target variable (Y) based on two input variables (X1 and X2).,"import pandas as pd
from sklearn.linear_model import LinearRegression

# Load data
data = pd.read_csv('data.csv')

# Split to features and target
X = data[['X1', 'X2']]
Y = data['Y']

# Create the model
model = LinearRegression()
model.fit(X, Y)

# Print the coefficients
print('Intercept:', model.intercept_)
print('Coefficients:', model.coef_)"
Write a Python program to print the elements in a set without duplicates.,"def print_set(s):
    result = []
    for x in s:
        if x not in result:
            result.append(x)
    print(result)"
Write a function to find whether a given array of integers contains any duplicate element.,"def test_duplicate(arraynums):
    nums_set = set(arraynums)    
    return len(arraynums) != len(nums_set)     "
"In Python, create a function to identify whether a given number is even or odd.","def is_odd(n):
  if(n % 2 == 0):
    return ""Even""
  else:
    return ""Odd""
 
print(is_odd(21)) # Outputs: ""Odd"""
"Given a set of numbers, write a Python program to find the maximum number after performing arithmetic operations on the digits of the set of numbers.","def find_max(nums):
    max_num = 0
    for num in nums:
        str_num = str(num)
        mul_res = 1
        for digit in str_num:
            mul_res *= int(digit)
        max_num = max(max_num, mul_res)
    return max_num"
Write a Python program that takes two given strings and checks if the first is a substring of the second one.,"def is_substring(string_1, string_2):
    
    if string_1 in string_2:
        return True
    else:
        return False"
Generate an empty 2D array of size n x n in Python.,"# Create an empty 2D list
n = 10
arr = [[0 for j in range(n)] for i in range(n)]

# Print the array
print(arr)"
Write a python code for taking an array of numbers and returning only the odd numbers in descending order.,"def extract_odd(arr):
    odd = [x for x in arr if x % 2 != 0]
    return sorted(odd, reverse = True)

arr = [1, 8, 5, 9, 12, 17]
print(extract_odd(arr)) # Output: [17, 9, 5, 1]"
"Create a Python script to print out the values in a given dictionary, with each key and value on a separate line.","for k, v in my_dict.items():
    print(f'{k}: {v}')"
Generate a Python program that adds two then doubles the result.,"def double_add(num1, num2): 
    return (num1 + num2) * 2"
Implement a binary search algorithm in Python.,"def binarySearch(nums, target):
	if len(nums) == 0:
		return -1
 
	left = 0
	right = len(nums) - 1
	while left <= right:
		mid = (left + right) // 2
		if nums[mid] == target:
			return mid
		elif nums[mid] < target:
			left = mid + 1
		else:
			right = mid - 1
 
	return -1"
Implement a Python program to calculate the area of a triangle given the length of three sides.,"def triangle_area(a, b, c): 
    # Semi-perimeter
    s = (a + b + c) / 2
    # calculate the area
    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5    
    return area 

# Driver code 
a = 5
b = 6
c = 7
print(""Area of the triangle is {:.2f}"".format(triangle_area(a, b, c)))"
Create a Python code to split a given string into an array with all of the individual sentences.,"def split_sentences(text):
    sentences = []
    start = 0
    for i in range(len(text)):
        if text[i] == '.' or text[i] == '!' or text[i] == '?':
            sentences.append(text[start:i+1])
            start = i+1
    return sentences

split_sentences('This is a test string with three sentences!')"
Create a Python program for sorting a dictionary based on a given key.,"def sort_dict(d, key): 
 return sorted(d.items(), key=lambda x: x[1][key])

#Test
d = {""apple"": 10, ""banana"": 5, ""pear"": 7} 

print(sort_dict(d, ""price""))
# Output: [('banana', {'price': 5}), ('pear', {'price': 7}), ('apple', {'price': 10})]"
Write a function in Python to create a random string of 10 characters.,"import random

def generate_string(string_length):
    random_characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
    random_string = ''.join(random.choices(random_characters, k=string_length))
    return random_string

print(generate_string(10)) # Length: 10"
Compare two strings using Python and output the similarity score between them.,"import difflib

def compare_strings(str1, str2):
 score = difflib.SequenceMatcher(None, str1, str2).ratio() 
 print(""Similarity score is:"", score)

compare_strings(""hello world"", ""hey world"") # Output: Similarity score is: 0.909"
Change the following Python code such that it prints the difference between two numbers.,"n1 = 9
n2 = 4
print(n1 - n2)"
Write a Python code snippet to remove all occurrences of a character from a string.,"def remove_char(s, c):
  return s.replace(c, '')"
Create an API using flask and python which takes a list or array of integers and returns their minimum and maximum values.,"from flask import Flask, request
app = Flask(name)

@app.route('/minmax', methods=['POST'])
def minmax():
 data = request.get_json()
 nums = data['nums']
 minVal = min(nums)
 maxVal = max(nums)
 return {'min': minVal, 'max': maxVal}

if name == 'main':
 app.run()"
Write a function to rotate a given list by specified number of items to the right direction.,"def rotate_right(list1,m,n):
  result =  list1[-(m):]+list1[:-(n)]
  return result"
Modify a Python program to optimize its performance and handle errors gracefully.,"# Library import
import os

# Path of the file
file_name = ""myfile.txt""

# Open file
try:
  with open(file_name, 'r') as f:

    # Read file
    contents = f.read()

    # Print file
    print(contents)

except IOError:
  print('Error: file not found!')

finally:
  if f:
    f.close()"
Write a Python program to print out all possible pairs of two lists.,"for i in list1:
    for j in list2:
        print(i,j)

# Output:
# (1, 'a')
# (1, 'b')
# (1, 'c')
# (2, 'a')
# (2, 'b')
# (2, 'c')
# (3, 'a')
# (3, 'b')
# (3, 'c')"
Explain the following Python code,"The given code defines a function named 'fun' which accepts two arguments, 'a' and 'b'. The function returns the sum of 'a' and 'b'."
Generate a Python program to sort a list of strings alphabetically.,"def sort_strings(string_list):
    sorted_list = sorted(string_list)
    return sorted_list

unsorted_list = ['banana', 'apple', 'orange']
sorted_list = sort_strings(unsorted_list)
print(sorted_list)"
Generate a class that adds two fractional numbers in a python program.,"class Fraction:
    def __init__(self, numerator, denominator):
        self.numerator = numerator
        self.denominator = denominator
    
    def add(self, x):
        self.numerator = self.numerator * x.denominator + x.numerator * self.denominator
        self.denominator = self.denominator * x.denominator
        return self.numerator, self.denominator"
Write a function in Python which takes a string as input and returns its reversed version.,"def reverse_string(string): 
  
  # Create an empty string  
  rev_str = """" 
  
  # Iterate over characters of the given string  
  for char in string: 
    # Prepend the character to the beginning of rev_str 
    rev_str = char + rev_str 
  
  return rev_str 
  
# Driver code 
string = ""Hello World""
print(reverse_string(string)) # Output: dlroW olleH"
Develop a program in Python to subtract two given integers.,"# Program to subtract two integers

int1 = -5
int2 = 3

# Subtract
subtract = int1 - int2
 
print("" Difference of two given integers is :"", subtract)"
Generate a stack trace for the following Python program,"Traceback (most recent call last):
  File ""code.py"", line 6, in <module>
    foo(10, 0)
  File ""code.py"", line 3, in foo
    return x/y
ZeroDivisionError: division by zero"
Modify the python code to correctly display the output.,"if 4 < 8: 
  print('Hello World')
else:
  print('Goodbye World')"
"Classify the following programming languages: JavaScript, Python, R, PHP, Java, and C.","JavaScript: Scripting/Web
Python: Scripting/General-purpose 
R: Statistical/Data Science
PHP: Scripting/Web 
Java: Object-oriented/General-purpose 
C: Low-level/Systems programming"
Write Python code to convert Fahrenheit temperature to Celsius.,"def convert_to_celsius(fahrenheit):
    celsius = (fahrenheit - 32) * 5 / 9
    return celsius

fahrenheit = 32
celsius = convert_to_celsius(fahrenheit)
print(f""Fahrenheit: {fahrenheit}, Celsius: {celsius}"")"
Create a class in Python to represent a job offer.,"class JobOffer:
    def __init__(self, title, salary):
        self.title = title
        self.salary = salary
    
    def get_title(self):
        return self.title
    
    def get_salary(self):
        return self.salary"
Write a python function to check if the elements of a given list are unique or not.,"def all_unique(test_list):
    if len(test_list) > len(set(test_list)):
        return False
    return True"
Write a Python function to print a Pascal Triangle.,"def printPascalTriangle(n): 

	for line in range(1, n + 1): 
		C = 1; # used to represent C(line, i) 
		for i in range(1, line + 1): 
			# The first value in a line is always 1 
			print(C, end = "" ""); 
			C = int(C * (line - i) / i); # Calculating 
										# the next value  
		print(""""); # entered to move to the next line 

# Driver Code 
n = 5; 
printPascalTriangle(n); 

Output:
1 
1 1 
1 2 1 
1 3 3 1 
1 4 6 4 1"
Create a for loop in Python to iterate over a list of numbers and print only the even numbers.,"for num in my_list:
    if num % 2 == 0:
        print(num)"
Write a python program to sort a given list of tuples based on its first element in increasing order.,"def sortTuplesByFirstElement(lst):
    lst.sort(key = lambda x: x[0])
    return lst

sortedList = sortTuplesByFirstElement([(3, 'ape'), (1, 'cat'), (4, 'dog'), (2, 'bee')])
print(sortedList)"
Design a python code for validating an email address.,"import re

def is_valid_email(email):
    regex = '^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$'
    if re.search(regex, email):
        return True
    else:
        return False"
Write a function to sort the given list based on the occurrence of first element of tuples.,"def sort_on_occurence(lst): 
	dct = {} 
	for i, j in lst: 
		dct.setdefault(i, []).append(j) 
	return ([(i, *dict.fromkeys(j), len(j)) 
				for i, j in dct.items()]) "
Design an algorithm in Python to find the largest number in a list.,"def largest_num_in_list(arr):
    largest_num = 0
    for num in arr:
        if num > largest_num:
            largest_num = num
    return largest_num

if __name__ == '__main__':
    print(largest_num_in_list([2, 5, 8, 10, 21])) # 21"
Compare two arrays of Python objects and return True if all objects in arrayA are also in arrayB.,"def compare_arrays(arrA, arrB):
    for i in arrA:
        if i not in arrB:
            return False
    return True"
Write a python function to count the occcurences of an element in a tuple.,"def count_X(tup, x): 
    count = 0
    for ele in tup: 
        if (ele == x): 
            count = count + 1
    return count "
"Rewrite the following Python code in Java.

myString = ""Hello World""
print(myString[0:5])","String myString = ""Hello World"";
System.out.println(myString.substring(0,5));"
Write a function to find the list with maximum length using lambda function.,"def max_length_list(input_list):
    max_length = max(len(x) for x in input_list )   
    max_list = max(input_list, key = lambda i: len(i))    
    return(max_length, max_list)"
Develop an algorithm for a Linear Search of an unordered array in Python.,"def linear_search(arr, target):
    for i in range(len(arr)):
        if arr[i] == target:
            return i
    return -1"
Generate a correct python function to check if a given list of integers contains a certain number.,"def contains_number(numbers, number):
 for x in numbers:
 if x == number:
 return True
 return False"
Generate a python code to rotate an array by k steps.,"def leftRotate(arr, k): 
    new_arr = arr[k:] + arr[:k] 
    return new_arr"
Create an array in Python for storing usernames.,"usernames = [""John"", ""Jane"", ""Mary"", ""Jill"", ""Bob""]"
Write a Python program to print out the current time.,"from datetime import datetime

# get the current time and print it out
now = datetime.now()
print(now)"
Create a short Python program that prints out the current date and time in the specified format.,"import time

time_now = time.strftime(""%Y-%m-%d %H:%M:%S"")
print(time_now)"
Generate a python program to apply bubble sort to an array,"def bubble_sort(arr): 
  n = len(arr) 
  for i in range(n): 
    for j in range(0, n-i-1): 
      if arr[j] > arr[j+1] : 
        arr[j], arr[j+1] = arr[j+1], arr[j]"
Write a function to check whether a list contains the given sublist or not.,"def is_sublist(l, s):
	sub_set = False
	if s == []:
		sub_set = True
	elif s == l:
		sub_set = True
	elif len(s) > len(l):
		sub_set = False
	else:
		for i in range(len(l)):
			if l[i] == s[0]:
				n = 1
				while (n < len(s)) and (l[i+n] == s[n]):
					n += 1				
				if n == len(s):
					sub_set = True
	return sub_set"
Refactor a Python function to use list comprehension.,"def square_list(nums):
    return [num ** 2 for num in nums]"
Construct a for loop in Python for outputting the numbers in the range of 5-15.,"for i in range(5, 16): 
    print (i)"
Can you write a Python program that finds the second largest element in the given array by sorting it?,"arr.sort()
second_largest = arr[-2] # 35"
Create a python program to convert the given time value to 24-hour time format.,time_24_hour = '20:45'
Write a Python function to find the most frequent elements in a list.,"def most_frequent_elements(lst):
 count = {}
 for item in lst:
 if item in count:
 count[item] += 1
 else:
 count[item] = 1
 max_count = 0
 max_element = None
 for item in count:
 if count[item] > max_count:
 max_count = count[item]
 max_element = item

return max_element

print(most_frequent_elements([3, 4, 2, 5, 4, 3, 2, 5, 4]))
# Output: 4"
Write a Python comparative sorting algorithm,"def sort(list):
    """"""
    Implements a comparison sorting algorithm using Python.
    Sorts the given list in ascending order.
    """"""
    for i in range(len(list)):
        for j in range(i + 1, len(list)):
            if list[i] > list[j]:
                list[i], list[j] = list[j], list[i]
    return list

if __name__ == '__main__':
    list = [9, 8, 7, 6, 5, 4, 3, 2, 1]
    print(sort(list))"
Write a Python program to sort a given list according to specified criteria.,"def sort_list(lst):
  return sorted(lst, key=lambda x: x[1])

result = sort_list([('a', 1), ('b', 3), ('c', 2)]) 
print(result)"
"Using the input dictionary as a guide, implement a Python function to print out the list of values for each key.","def print_values(dict_in):
    for key,value in dict_in.items():
        print(key, "":"", value)

print_values(my_dict)"
Create a program in Python that takes an array of integers and prints the first odd number from the left side.,"def first_odd(arr):
    for num in arr:
        if num % 2 != 0:
            print(num)
            break

arr = [1, 4, 5, 6, 9, 10, 11]
first_odd(arr)"
Design a class in python that calculates the area and perimeter of a rectangle.,"class Rectangle: 
    def __init__(self, width, length): 
        self.width = width 
        self.length = length

    def get_area(self): 
        return self.length * self.width 

    def get_perimeter(self):
        return 2*(self.length + self.width)"
Write an algorithm in Python to find the Fibonacci number at a given position.,"def fibonacci(n):
  if n == 0: 
    return 0
  elif n == 1: 
    return 1
  else: 
    return fibonacci(n-1) + fibonacci(n-2) 
  
# Test
print(fibonacci(5))

# Output
5"
Create a Python script to send an email.,"import smtplib

# Set up the SMTP server
s = smtplib.SMTP(host='your_host_address_here', port=your_port_here)
s.starttls()
s.login(""your_username_here"", ""your_password_here"")

# Send the mail
message = ""A message""
s.sendmail(""from@example.com"", ""to@example.com"", message)

# Terminate the SMTP session and close the connection
s.quit()"
Write a Python program to classify the type of an angle based on the measure of the angle.,"def classify_angle(angle):
  if angle == 0:
    return ""Zero angle""
  elif angle > 0 and angle < 90:
    return ""Acute angle""
  elif angle == 90:
    return ""Right angle""
  elif angle > 90 and angle < 180:
    return ""Obtuse angle""
  elif angle == 180:
    return ""Straight angle""

result = classify_angle(angle)"
Optimize the following Python code to print the numbers in reverse.,"for i in reversed(range(1,11)):
    print(i)"
Create a function in Python that takes a list of numbers and finds the largest even number.,"def largest_even(arr):
    even_nums = []
    for num in arr:
        if num % 2 == 0:
            even_nums.append(num)
    
    if len(even_nums) == 0:
        return None
    
    largest = even_nums[0]
    for num in even_nums:
        if num > largest:
            largest = num
    
    return largest

result = largest_even([2, 5, 7, 6])
print(result)"
Generate a code for running a for loop in Python.,"for i in range(10):
    print(i)"
Write a Python program to measure the similarity between two strings using Jaccard index.,"def jaccard_index(str1, str2):
    set1 = set(str1.split())
    set2 = set(str2.split())

    return float(len(set1 & set2)) / len(set1 | set2)

str1 = input(""String1: "")
str2 = input(""String2: "")
print(""Jaccard Index: "", jaccard_index(str1, str2))"
Create a loop in Python to print out all the numbers from 1 to 10.,"for num in range(1,11):
    print(num)"
Create a program to fetch data from Wikipedia using Python.,"import wikipedia

def get_wikipedia_data(query):
    #Get the summary from wikipedia
    summary = wikipedia.summary(query)
    #Extract the content from the summary
    content = wikipedia.page(query).content
    #Return the content and summary
    return content, summary"
Write a function to sort a given list of strings of numbers numerically.,"def sort_numeric_strings(nums_str):
    result = [int(x) for x in nums_str]
    result.sort()
    return result"
Create a python function to take two integers input and calculate the sum of both integers.,"def add(int1,int2):
    sum = int1 + int2
    return sum"
Create a Python function to sort the words in a sentence.,"def sort_words(sentence): 
  words = sentence.split("" "")
  words.sort()
  return ' '.join(words)

sentence = ""I love coding""
sortedSentence = sort_words(sentence)
print(sortedSentence) 
// Outputs 'I coding love'"
Construct a Python function which takes two strings as input arguments and returns their concatenation.,"def concat_strings(str1, str2):
  return str1 + str2

result = concat_strings(""Hello "", ""World!"")
print(result)"
Create a program in Python that adds two numbers together.,"def add(x, y): 
    return x + y 
  
x = 5
y = 10

print(add(x, y))"
Generate a json response from a python method that takes two parameters and returns a dictionary of key-value mappings.,"def generate_response(param1, param2):
    # dictionary of key-value mappings
    key_value_mappings = {
        param1: param2
    }

    # create json response
    json_response = json.dumps(key_value_mappings)

    return json_response"
Implement a Python program to find all substrings of a given string.,"def all_substrings(input_string):
 substrings = []
 for i in range(len(input_string)):
  for j in range(i + 1, len(input_string) + 1):
   substring = input_string[i:j]
   substrings.append(substring)
 
 return substrings
 
#example:
all_substrings(""Hello"") # returns ['H', 'He', 'Hel', 'Hell', 'Hello', 'e', 'el', 'ell', 'ello', 'l', 'll', 'llo', 'l', 'lo', 'o']"
Develop a system in Python for detecting plagiarism.,"import difflib

def plagiarism_detector(string_a, string_b):
    sequence = difflib.SequenceMatcher(None, string_a, string_b)
    similarity = sequence.ratio() * 100
    print('Similarity = {:.2f}%'.format(similarity))

plagiarism_detector('The quick brown fox', 'The quick brown fox jumps over the lazy dog')"
Create a recursive function for generating a Fibonacci sequence in Python.,"def Fibonacci(n): 
    if n<0: 
        print(""Incorrect input"") 
    elif n==1: 
        return 0
    elif n==2: 
        return 1
    else: 
        return Fibonacci(n-1)+Fibonacci(n-2) 

print(Fibonacci(5)) # Output: 3"
Write a python function that determines if a given number is within a given range of numbers,"def is_in_range(n, start, end):
  if n >= start and n <= end:
    return True
  else:
    return False"
Write a function to find maximum of three numbers.,"def max_of_three(num1,num2,num3): 
    if (num1 >= num2) and (num1 >= num3):
       lnum = num1
    elif (num2 >= num1) and (num2 >= num3):
       lnum = num2
    else:
       lnum = num3
    return lnum"
Write a Python program to optimize the following code such that it runs faster.,"xx = [4, -4, 2, -2]
s = 0
for i in xx:
    s += max(i, 0)

if __name__ == ""__main__"":
    xx = [4, -4, 2, -2]
    s = 0
    for i in xx:
        s += max(i, 0)
    print(s) # Output: 6"
Implement a function in Python that prints out the contents of a given list with even indices only.,"def print_even_indices(my_list):
    for i in range(len(my_list)):
        if i % 2 == 0:
            print(my_list[i])
            
print_even_indices(my_list)"
Create a for loop in python to loop through a list of numbers.,"for num in [1, 5, 8]: 
    print(num)"
Make necessary changes to the given code to make it compatible with Python 3,"# Python 3
print(""Hello World!"")"
Write a Python program for searching a 2-dimensional array for a target value.,"def search(arr, target):
 for row in arr:
  for element in row:
   if element == target:
    return True
 return False

result = search(arr, target)
print(result) # True"
Generate a Python Regular Expression to match any number greater than 5 and even.,"import re
pattern = re.compile(r'[6-9]|[2-4][0-9]')"
Write a Python program to generate a random string containing lowercase and uppercase letters with a length of 8 characters.,"import random

def generate_string(length):
    letters = string.ascii_letters
    return ''.join(random.choice(letters) for i in range(length))

print(generate_string(8))"
Generate a function to return the all the vowels from a string in Python.,"def get_vowels(string):
 vowels = 'aeiou'
 return [char for char in string if char in vowels]"
Write a Python program to make a prediction using a Support Vector Machine (SVM),"import numpy as np
from sklearn import svm

X = np.array([[0, 0], [1, 1]])
y = np.array([0, 1])

clf = svm.SVC(kernel='linear')
clf.fit(X, y)

prediction = clf.predict([[2., 2.]])
print(prediction)"
Write a Python program to use a type hint to check if a variable is an instance of a particular class.,"def check_type(variable, class_name):
    if isinstance(variable, class_name):
        print(""It is an instance of the class"")
    else:
        print(""It is not an instance of the class"")"
Create a Lambda function in Python to return the maximum of three numbers.,"max_func = lambda a, b, c : max(a,b,c)
print(max_func(3, 12, 7))"
Develop a function in Python to randomly select one element from a given array.,"import random

def randomElement(arr):
    return random.choice(arr)"
Create a Python program to render a grid of numbers and letters.,"def print_grid(rows, columns):
 for i in range(rows):
  for j in range(columns):
   print(chr(i*j+65), end=' ')
  print('\n')

print_grid(5,5)

#Output:
A  B  C  D  E  
A  C  E  G  I 
A  F  K  P  U 
A  I  P  W  E 
A  N  U  E  N"
Write a Python program to compute the square of a given number.,"def square(num):
    return num ** 2"
Suggest a code optimization to make this python snippet run faster.,"def add_numbers_in_list(l):
    total = 0
    for i in range(0, len(l), 2):
        total += (l[i] + l[i+1]) if (i+1 < len(l)) else l[i]
    return total"
Assemble a Python program to measure similarity,"def compute_similarity(s1, s2):
    len1 = len(s1)
    len2 = len(s2)
    max_len = max(len1, len2)
    count = 0

    for i in range(max_len):
        if i >= len1 or i >= len2:
            break
        if s1[i] == s2[i]:
            count += 1
    
    return count / max_len"
Write a function to check whether all dictionaries in a list are empty or not.,"def empty_dit(list1):
 empty_dit=all(not d for d in list1)
 return empty_dit"
"Create a Python version of the classic ""Hello World!"" program.","print(""Hello World!"")"
Create a Python function to sort an array of numbers based on their size.,"def sort_array(arr):
    arr.sort()
    return arr"
Write a Python program to detect the most frequently occurring element in a given array.,"from collections import Counter

def most_frequent_element(array):
  return Counter(array).most_common(1)[0][0]
  
# Driver code 
print(most_frequent_element([1, 3, 1, 4, 5, 3, 4, 3]))"
Write a code in python to remove given character from a given string.,"def remove_char(given_string, character):
    new_string =  given_string.replace(character, """")
    return new_string"
How would you write a code to flatten a given nested list in Python?,"def flatten_list(nested_list):
    flattened_list = []
    for item in nested_list:
        if type(item) == list:
            flattened_list.extend(flatten_list (item))
        else:
            flattened_list.append(item)
    return flattened_list"
"Create a class in Python to represent a car and its properties such as make, model, color, number of wheels etc.","class Car():
    #initialize car
    def __init__(self, make, model, color, wheels):
        self.make = make
        self.model = model
        self.color = color
        self.wheels = wheels
    
    #string representation
    def __str__(self):
        return '{}, {}, {}, {}'.format(self.make, self.model, self.color, self.wheels)"
Generate an appropriate Python command to edit the following list such that all the negative numbers are replaced with 0.,"def filter_negative(nums):
    return [max(0, n) for n in nums]"
Identify the data type of the following input and provide a code to convert it to an integer in Python.,"input_type = type(""123"") # str

converted_int = int(""123"") # 123"
Debug the given Python code.,"def calculate_sum(a, b):
   sum = a + b 
   return sum 

c = calculate_sum(2, 3)
print(""The sum is"", c)"
Create a Python program to print out the following message and its variables.,"name = ""John""

print(""Hello "" + name + ""!"")  # Outputs: ""Hello John!"""
Create a function to return the second largest element in a python list.,"def second_largest_elem(lst):
    lst.sort()
    return lst[-2]"
Write a Python function that takes an array of integers as input and computes the average of the elements.,"def compute_average(arr):
 sum = 0
 for i in arr:
 sum += i
 return sum / len(arr)
 
 arr = [1, 2, 3, 4]
 avg = compute_average(arr)
 print(""Average of array elements is:"", avg)"
Write a Python function to generate a multiplication table for a given number.,"def generate_table(num):
    # print the table heading
    print(""MULTIPLICATION TABLE FOR {}"".format(num))
    # generate the table
    for i in range(1, 11):
        print(""{} x {} = {}"".format(num, i, num*i))

# generate table for 9
generate_table(9)"
Generate a Python script to classify the given data points according to their label.,"def classify_data_points(data_points, labels):
    classified_data_points = []
    for data_point in data_points:
        if data_point[0] == data_point[1]:
            classified_data_points.append((data_point, labels[0]))
        else:
            classified_data_points.append((data_point, labels[1]))
    return classified_data_points"
"Create a Python class for a Person, with first name and last name attributes.","class Person:
    def __init__(self, first_name, last_name):
        self.first_name = first_name
        self.last_name = last_name

person = Person(""John"", ""Doe"")
print(person.first_name, person.last_name)"
Generate a valid python code to find the length of string without using built-in functions,"def length_of_string(string): 
    count = 0
    for char in string: 
        count += 1
    return count"
Write a Python program to classify a given set of data into any two classes.,"def classify_data(data):
 class_1 = []
 class_2 = []

 for value in data:
 if value % 2 == 0:
 class_1.append(value)
 else:
 class_2.append(value)

 return class_1, class_2"
Develop a program in Python to classify the sentiment of a given sentence.,"from textblob import TextBlob

def sentiment_classifier(sentence):
  sentiment_score = TextBlob(sentence).sentiment.polarity
  if sentiment_score > 0:
    return 'positive'
  elif sentiment_score < 0:
    return 'negative'
  else:
    return 'neutral'"
"Create a program in Python to calculate the sum of the first n positive integers, using recursion.","def calculateSum(n):
    if n <= 0:
        return 0
    else:
        return n + calculateSum(n-1)

result = calculateSum(5)
print(result)"
Generate a Python program that adds a given number to an array.,"def add_to_array(num, array):
  for i in range(len(array)):
    array[i] += num

  return array"
Create a program to search for a substring in a string and return the starting position of the substring.,"string = ""Python is powerful & fun""
substring = ""pow""
 
start_pos = string.find(substring)
if start_pos == -1:
    print(""substring not found"")
else:
    print(""substring found at position:"", start_pos)"
Create a Python script to send an email.,"import smtplib

def send_email(sender, recipient, subject, message):
    # set up the audience and message
    message = """"""\

From: %s
To: %s
Subject: %s

%s
"""""" % (sender, recipient, subject, message)

    # set up the SMTP connection and send the message
    session = smtplib.SMTP('smtp.example.com', 25)
    session.login(""sender_username"", ""sender_password"")
    session.sendmail(sender, recipient, message)
    session.quit()"
"Create a python class called Student that can store students' information, such as name, gender, and age.","class Student():
    def __init__(self, name, gender, age):
        self.name = name
        self.gender = gender
        self.age = age

    def get_name(self):
        return self.name

    def get_gender(self):
        return self.gender

    def get_age(self):
        return self.age"
Create a function in Python that takes a list of numbers as an argument and prints the highest value in the list.,"def get_largest(nums):
    largest = nums[0]
    for num in nums[1:]:
        if num > largest:
            largest = num
    return largest

print(get_largest([13, 6, 8, -2, 20]))"
Write a function in Python to return the kth smallest element in the given array.,"def find_kth_smallest(arr, k):
    """"""
    This function finds the kth smallest element in an array. 
    :param arr: array of integers
    :param k: integer
    :return: kth smallest element
    """"""
    sorted_arr = sorted(arr)
    return sorted_arr[k-1]"
Design a program in Python to find the largest of three numbers.,"def getMax(a,b,c):
    if a > b and a > c:
        return a
    elif b > a and b > c:
        return b
    else:
        return c

print(getMax(2, 5, 7))"
Generate a Python program to search an array of strings and return the string that contains a given substring.,"def searchArray(array, query):
    results = []
    for string in array:
        if query in string:
            results.append(string)
    return results

array = [""apple"", ""banana"", ""pear"", ""kiwi""]
query = ""ana""

print(searchArray(array, query))"
Write a function in Python which takes a question string and returns the answer.,"def answer_question(question):
    if question == 'What is the capital of China?':
        return 'Beijing'
    else:
        return 'I don\'t know'"
"Given a sentence, generate a dictionary with the most frequently used words.","freq_words_dict = {
    'python': 2,
    'is': 1,
    'an': 1,
    'interpreted': 1,
    'high-level': 1,
    'general-purpose': 1,
    'programming': 1,
    'language': 1
}"
Create a function that concatenates two lists in Python.,"def concatenate_lists(list1, list2):
    return list1 + list2"
Create a Python program that computes the median of an array of numbers.,"def median(array):
    sorted_array = sorted(array)
    length = len(sorted_array)
    if (length % 2 == 0):
        median = (sorted_array[length//2] + sorted_array[length//2 - 1]) / 2
    else:
        median = sorted_array[length//2]

    return median

array = [5, 4, 3, 2, 1]
print(median(array))  # Output: 3"
Design an algorithm in Python that sorts an unordered array of numbers from low to high.,"def sort(arr): 
  for i in range(len(arr)): 
    minIdx = i 
    for j in range(i+1, len(arr)): 
      if arr[minIdx] > arr[j]: 
        minIdx = j       
    arr[i], arr[minIdx] = arr[minIdx], arr[i]
  return arr"
Can you write a program in Python to remove the duplicate elements in a list?,"def remove_duplicates(arr):
    new_arr = []
    for item in arr:
        if item not in new_arr:
            new_arr.append(item)
    return new_arr

my_list = [5, 9, 2, 4, 5, 9, 2]
print(remove_duplicates(my_list))
# Output: [5, 9, 2, 4]"
Generate an efficient python code which finds the most frequent element in an array.,"# Find the most frequent element in the array
most_freq = 0
count = 0

for x in arr:
    freq = arr.count(x)
    if freq > count:
        most_freq = x
        count = freq

# Print the most frequent element
print(""Most frequent element:"",most_freq)"
Develop a Python code for computing the length of a string.,"def get_length(string):
    length = 0
    for char in string:
        length += 1
    return length"
How would you convert the following pseudocode into python?,"if A > B:
    print(""A is greater than B"")
else:
    print(""B is greater than A"")"
Create a text tokenizer using regular expression in Python.,"import re
 
def tokenizeText(text):
    tokens = re.findall(r'\w+', text)
    return tokens"
Write a function to find all pairs in an integer array whose sum is equal to a given number.,"def get_pairs_count(arr, n, sum):
    count = 0 
    for i in range(0, n):
        for j in range(i + 1, n):
            if arr[i] + arr[j] == sum:
                count += 1
    return count"
Design a Python program to print out the list of prime numbers up to the input value.,"def printPrimeNum(n): 
  
    prime_list = [] 
   
    for num in range(2, n + 1): 
        prime = True
        for i in range(2, num): 
            if (num % i == 0): 
                prime = False
        if prime:
            prime_list.append(num) 
              
    print(prime_list)
  
  
num = 25 
printPrimeNum(num)"
Create a function in Python to remove all non-alphanumeric characters in a string.,"import re

def remove_non_alphanum(str):
 return re.sub(r'[^\w]', '', str)"
Implement a Python program that takes an input string and returns the first character that appears more than once in that string.,"def find_duplicate_char(input_string):
 char_count = {}
 for char in input_string:
  if char in char_count:
   return char
  else:
   char_count[char] = 1
 return 'No duplicates found'

input_string = ""programming""
print(find_duplicate_char(input_string))

# Output:
# 'r'"
Create a function for checking if a string is palindrome using Python.,"def is_palindrome(text):
    reverse = text[::-1] # reverse the string
    return text == reverse"
Generate a python program that matches regular expression pattern.,"import re

def regex_match(pattern, text):
    regex = re.compile(pattern)
    matches = regex.findall(text)
    return matches"
Create a python program to test if a number is even or odd.,"def is_even(num):
    if num%2==0:
        return True
    else:
        return False"
Implement a sorting algorithm in Python.,"def bubble_sort(items):
    for pass_num in range(len(items) - 1, 0, -1):
        for idx in range(pass_num):
            if items[idx] > items[idx + 1]:
                items[idx], items[idx + 1] = items[idx + 1], items[idx]

numbers = [98, 86, 100, 5, 34, 22]
bubble_sort(numbers)

print(numbers)"
Compose a function in Python to take two numbers as input and return the greatest number.,"def getGreatestNumber(a, b):
    if a > b:
        return a
    return b

greatest_num = getGreatestNumber(5, 8)
print(""Greatest number is"", greatest_num)"
Write a python script to generates random numbers between 0 and 9 that are divisible by 3.,"def generate_random_divisible_number():
    import random
    while True:
        # Generate a random number
        process = random.randint(0, 9)
        # Check if the number is divisible by 3
        if process % 3 == 0:
            # If it is divisible, return it
            return process"
Generate a Python program that takes one string argument and prints it to the console.,"import sys

if __name__ == ""__main__"":
    arg = sys.argv[1]
    print(arg)"
"Generate a list of strings in Python containing all possible combinations of letters ""a"" and ""b"", with the length of each string being 5.","import itertools

words = [''.join(i) for i in itertools.product('ab', repeat = 5)]
print(words)"
Write a Python program to print the key of the element in a dictionary that has the maximum value.,"dictionary = {'a': 3, 'b': 6, 'c': 9, 'd': 12}

max_value = max(dictionary.values())
for key, value in dictionary.items():
 if value == max_value:
 print(key)"
Develop a natural language processing (NLP) model in Python that takes a sentence as an input and returns the subject and predicate of the sentence.,"def parse_sentence(sentence):
 tokens = nltk.word_tokenize(sentence)
 tagged_tokens = nltk.pos_tag(tokens)
 subject = None
 predicate = None
 for token, tag in tagged_tokens:
 if tag == 'NN':
 subject = token
 elif tag == 'VBP':
 predicate = token
 return subject, predicate"
Create a website using the Django web framework.,"# create a new Django project
$ django-admin startproject mysite

# create a new application 
$ python manage.py startapp myapp

# add the new application in INSTALLED_APPS in the settings.py file 
INSTALLED_APPS = [ 
    'myapp',
    ...
]

# define the urls in urls.py file 
urlpatterns = [ 
    path('', myapp.views.index, name='index'), 
    ...
]"
Write a function in Python that takes an array of integers as an input and returns an array with only the distinct numbers from the input.,"def distinct_numbers(arr):
 return list(set(arr))"
Create a python function that reads comma-separated values to generate a dataframe.,"def csv_to_df(csv):
    # Create an empty list
    df = []

    # Add each row as a list
    lines = csv.split(""\n"")
    for line in lines:
        df.append(line.split("",""))

    # Convert list into a DataFrame
    import pandas as pd
    df = pd.DataFrame(df[1:], columns=df[0])
    return df"
Write a basic HTML parser in Python that extracts the data from a given webpage.,"import requests
from bs4 import BeautifulSoup
 
URL = 'http://example.com'
 
page = requests.get(URL)
soup = BeautifulSoup(page.content, 'html.parser')
 
# find all links
links = soup.find_all('a')
for link in links:
    print(link.get('href'))
 
# find all text
texts = soup.find_all('p')
for text in texts:
    print(text.get_text())"
"Generate a program in Python to remove all vowels from a sentence, and print the resulting string to the console.","def remove_vowels(word):
    new_word = """"
    for i in word:
        if i not in ""aeiouAEIOU"":
            new_word += i
    return new_word

sentence = ""This is a sentence""
print(remove_vowels(sentence))"
Create a Python class to manage a shopping cart.,"class ShoppingCart:
    def __init__(self):
        self.cart = [] 
  
    def add_item(self, item):
        self.cart.append(item)
  
    def remove_item(self, item):
        self.cart.remove(item)
  
    def get_total(self):
        total = 0
        for item in self.cart:
            total += item.price
        return total"
Write a Python script which can remove all the punctuation characters from a text.,"import string

def remove_punctuation(text):
    #convert punctuation chars into a string
    punctuation_chars = ''.join(string.punctuation)
    
    #iterate through input text and replace punctuation chars with an empty string
    for char in punctuation_chars:
        if char in text:
            text = text.replace(char, '')
    
    return text"
Develop a Python program to calculate the largest sum of a consecutive sequence of n numbers given in an array.,"def max_consecutive_sum(array):
    max_val = 0
    cur_man = 0
    for x in array:
        cur_man = max(cur_man + x, 0)
        max_val = max(cur_man, max_val)
    return max_val"
Compress a given folder using GZip in Python.,"import gzip 
import shutil 

# Source files to compress 
source = '/files'
  
# Destination to store compressed files 
destination = '/files/compressed'
  
# set the compression level 
compression_level = 3

shutil.make_archive(destination, 'gz', source, compression_level)"
Write a code to remove a specific value from a list in Python.,"mylist = [10, 20, 30, 40, 10]
value_to_remove = 10

# new list after value is removed
new_list = [item for item in mylist if item != value_to_remove] 

print(new_list)"
Develop a Python function to compare two given dictionaries.,"def compare_dictionaries(d1, d2):
  for key in d1:
    if key not in d2 or d1[key] != d2[key]: 
      return False
  return True"
Optimize the following code snippet for accessing an element in a Python list.,"my_list = [1, 2, 3, 4, 5]

if len(my_list) > 0:
  element = my_list[0]
else:
  element = None"
Develop a program in Python for printing an asterisk triangle consisting of n rows.,"def asterisk_triangle(n):
    for i in range(n):
        for j in range(i+1):
            print('*', end="" "")
        print()

n = 5
asterisk_triangle(n)"
Produce a python program that calculates the prime factors of a given positive integer.,"def prime_factors(num):
    """"""Returns the prime factors of a given positive integer.
    
    Args:
        num (int): Positive integer.
        
    Returns:
        list: List of prime factors.
    """"""
    factors = []
    d = 2
    while num > 1:
        while num % d == 0:
            factors.append(d)
            num /= d
        d += 1
    return factors"
Write a python program to round a float value to the next decimal place.,"def round_up(value):
    """"""Rounds up a number to the next decimal.""""""
    return int(value * 10) / 10"
Generate a python program to check the sum of two numbers and determine if they are equal or not.,"def compare_sum(a, b):
  if a + b == 10:
    return True
  else:
    return False"
Write a Python program to add two numbers taken as input from the user.,"# get two numbers from the user
num1 = float(input(""Enter first number: ""))
num2 = float(input(""Enter second number: ""))

# calculate the result
result = num1 + num2

# display the result
print(""The sum of {0} and {1} is {2}"".format(num1, num2, result))"
Write a Python program to calculate the simple interest on a loan of $1000 over 10 years at an interest rate of 5%.,"loan_amount = 1000
interest_rate = 5
number_of_years = 10

simple_interest = loan_amount * (interest_rate/100) * number_of_years

print(""Simple interest = %.2f"" %simple_interest)"
Build a function in Python to test whether a string is a palindrome.,"def is_palindrome(s): 
    # Reverse the string 
    rev = s[::-1] 
  
    # Check if the string is equal to its reverse 
    if (s == rev): 
        return True
    return False
  
# Driver code 
s = ""aba""
ans = is_palindrome(s) 
  
if ans == 1: 
    print(""Yes"") 
else: 
    print(""No"")"
Generate code in Python to find the factorial of a given number.,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n*factorial(n-1)"
Create a lambda expression in Python that takes two arguments and returns their product.,"product = lambda x, y: x * y"
Write a Python program to detect out-of-range values in a given column of a data set.,"for row in dataset.values():
 salary = row['Salary']
 if salary < 40000 or salary > 100000:
 print(""Out-of-range value: {}"".format(salary))"
Create a Python script for implementing a linear search in an array of integers.,"def linear_search(arr, key): 
    n = len(arr) 
  
    for i in range(0, n): 
        if arr[i] == key: 
            return i
    return -1"
Write a function to find sequences of lowercase letters joined with an underscore.,"import re
def text_lowercase_underscore(text):
        patterns = '^[a-z]+_[a-z]+$'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')"
Generate a Python function to convert a given sentence into a list of words.,"def split_sentence(sentence):
    return sentence.split("" "")

sentence = ""This is a sentence""

words = split_sentence(sentence)
print(words)"
Write a python function to toggle only first and last bits of a given number.,"def take_L_and_F_set_bits(n) : 
    n = n | n >> 1
    n = n | n >> 2
    n = n | n >> 4
    n = n | n >> 8
    n = n | n >> 16 
    return ((n + 1) >> 1) + 1      
def toggle_F_and_L_bits(n) :  
    if (n == 1) : 
        return 0 
    return n ^ take_L_and_F_set_bits(n) "
Design a REST-API in Python using Flask that displays the current date and time when a GET request is sent.,"from flask import Flask, jsonify
from datetime import datetime

app = Flask(__name__)

@app.route('/time', methods=['GET'])
def time():
  time = {
    'time': datetime.now()
  }
  return jsonify(time)

if __name__ == '__main__':
  app.run()"
Create a machine learning model using Python and Scikit-Learn that can classify emails as either spam or ham.,Machine learning model using Python and Scikit-Learn that can classify emails as either spam or ham.
Implement a K-Means clustering algorithm in Python to cluster the given set of points into three clusters.,"import numpy as np 
from sklearn.cluster import KMeans 

dataset = [[2, 4], [5, 8], [3, 7], [9, 2], [7, 1]]

X = np.array(dataset) 

kmeans = KMeans(n_clusters=3, random_state=0).fit(X)

labels = kmeans.labels_

for i in range(len(X)):
 print(""datapoint:"", X[i], ""belongs to cluster"", labels[i])"
Design a Python algorithm to compute the total number of inversions in an array of integers.,"def count_inversions(arr): 
  inversion_count = 0  
  for i in range(len(arr)): 
    for j in range(i + 1, len(arr)): 
        if arr[i] > arr[j]: 
            inversion_count += 1
  
  return inversion_count"
Write a Python function to calculate the difference between two dates in days.,"def days_difference(date1, date2): 
    from datetime import datetime 
    difference = datetime.strptime(date1, '%m/%d/%Y') - datetime.strptime(date2, '%m/%d/%Y') 
    return abs(difference.days)"
Perform automatic code refactoring on a python program that calculates the factorial of a given number.,"def factorial(num: int):
 if num < 0:
  return ""Error: Must be a positive integer""
 elif num <= 1:
  return 1
 else:
  return num * factorial(num-1)"
Build a function in Python to fetch records from a MongoDB database.,"import pymongo

def fetchRecords(host, port, database_name, collection_name):
    client = pymongo.MongoClient(host, int(port))
    db = client[database_name]
    collection = db[ collection_name ]
    records = collection.find({})
    return records"
Create a Python function to filter a dictionary that contains strings only.,"def filterStringDict(input):
    result = {}
    for key, value in input.items():
        # Check if value is a string
        if isinstance(value, str):
            # Add to result
            result[key] = value
    return result"
Create a program using Python to classify the type of company an advertising company can be.,"def classify_company(company):
 if company in [""AUTOMOTIVE"", ""FOOD & BEVERAGE"", ""FINANCE"", ""TECHNOLOGY""]:
 return company
 else:
 return ""OTHER"""
Program a Python function to calculate the average of a list of integers.,"def avg_list(lst): 
  sum_lst = 0
  for i in range(len(lst)): 
    sum_lst = sum_lst + lst[i] 
  return sum_lst/len(lst) 
  
print(avg_list([1, 3, 5, 3, 7, 1]))"
Create a Python script to extract email addresses from an input text and save them in an array.,"import re

text = ""Some text here with an email example@test.com and another test@example.com""

matches = re.findall(r'[\w\.-]+@[\w\.-]+\.\w+', text)

print(matches)
# Output: ['example@test.com', 'test@example.com']"
"Create a Python script that reads an integer, n, from the user and prints out the value of n factorial.","# Get input from the user
n = int(input(""Enter a number: ""))

# Calculate the factorial of the number
factorial = 1
while n > 1:
    factorial *= n
    n -= 1

# Print out the result
print(""The factorial of the given number is:"", factorial)"
Write a python program to find the maximum value in the given list of numbers.,"def find_max(nums):
    max_val = nums[0]
    for num in nums[1:]:
        if num > max_val:
            max_val = num
    return max_val"
Write a function to find the largest subset where each pair is divisible.,"def largest_subset(a, n):
	dp = [0 for i in range(n)]
	dp[n - 1] = 1; 
	for i in range(n - 2, -1, -1):
		mxm = 0;
		for j in range(i + 1, n):
			if a[j] % a[i] == 0 or a[i] % a[j] == 0:
				mxm = max(mxm, dp[j])
		dp[i] = 1 + mxm
	return max(dp)"
Write a function to count the element frequency in the mixed nested tuple.,"def flatten(test_tuple): 
	for tup in test_tuple: 
		if isinstance(tup, tuple): 
			yield from flatten(tup) 
		else: 
			yield tup 
def count_element_freq(test_tuple):
  res = {}
  for ele in flatten(test_tuple):
    if ele not in res:
      res[ele] = 0
    res[ele] += 1
  return (res) "
Write a Python program to insert a given string at the beginning of all items in a list.,"# Insert the given string at the beginning of all list items 
new_list = [""prefix_"" + item for item in mylist]

# Print the new list 
print(new_list) # Output: [""prefix_one"", ""prefix_two"", ""prefix_three""]"
Write a Python code snippet to flatten the given list.,"my_list = [2, 3, [4, 5, [6]], [7, 8]]
new_list = []
def flatten(lst):
    for item in lst:
        if isinstance(item, list):
            flatten(item)
        else:
            new_list.append(item)

flatten(my_list)
print(new_list)"
Generate a function in Python for finding the maximum value in a list of numbers with time complexity O(n).,"def max_val(num_list):
	if len(num_list) == 0:
		return None
	
	max_num = num_list[0]
	
	for num in num_list:
		if num > max_num:
			max_num = num
	
	return max_num"
Create a Python class called Student that contains attributes for a students name and grade.,"class Student:
    def __init__(self, name, grade):
        self.name = name
        self.grade = grade"
Create a program in Python that takes a list of words and an integer n and returns a list of words that appear at least n times in the given list.,"from collections import Counter

def frequent_words(words, n):
    counts = Counter(words)
    return [word for word, count in counts.items() if count >= n]

result = frequent_words(words, n)

print(result) # prints ['a', 'd']"
Generate a multi-line string in Python.,"multi_line_str = ''' 
This is a multi-line string
that spans multiple lines.
'''"
Write a Python code to replace all the given elements of a list with the given value.,"def replace_list_with_value(list1, value):
    list1[:] = [value] * len(list1) 
    return list1

result = replace_list_with_value(list1, value) 
print(result)"
Create a program in Python to convert a Celsius temperature to its equivalent Fahrenheit temperature.,"def convertCelsiusToFahrenheit(celsiusTemp):
    fahrenheitTemp = (celsiusTemp*9/5)+32
    return fahrenheitTemp"
Create a Python function for sorting a given list of integers using QuickSort algorithm.,"def quick_sort(numbers):
    if len(numbers) <= 1:
        return numbers 
    else:
        pivot = numbers[0]
        less = [i for i in numbers[1:] if i <= pivot]
        greater = [i for i in numbers[1:] if i > pivot]
        return quick_sort(less) + [pivot] + quick_sort(greater)

numbers = [8,5,4,7,3,1]
sorted_numbers = quick_sort(numbers)
print(sorted_numbers)"
Create a webhook to call a Python web service.,"import requests

def call_web_service():
    API_ENDPOINT = ""http://example.com/api/v1""

    # Make a post request to call the web service
    r = requests.post(url= API_ENDPOINT)

# Create webhook
webhook = call_web_service('http://example.com/callback')

# Use the webhook to call the web service
requests.post(url = webhook)"
Write a Python regex expression to match any telephone number that has 8-12 digits with area code.,"^\(?\d{3}\)?\s?\-?\d{8,12}$"
Create an algorithm to solve the Tower of Hanoi in Python.,"def tower_of_hanoi(num_discs, source, auxiliary, destination): 
 if num_discs == 1: 
     print(""Move disc 1 from"", source, ""to"", destination) 
     return
 tower_of_hanoi(num_discs - 1, source, destination, auxiliary) 
 print(""Move disc"", num_discs, ""from"", source, ""to"", destination) 
 tower_of_hanoi(num_discs - 1, auxiliary, source, destination) 

tower_of_hanoi(3, ""A"", ""B"", ""C"")"
Construct a Python code to convert degrees Fahrenheit to Celsius.,"def fahrenheit_to_celsius(fahrenheit):
    celsius = (fahrenheit - 32)*(5/9)
    return celsius"
Create a web scraper in Python to extract all the titles and descriptions from the website https://example.com.,"import requests
from bs4 import BeautifulSoup

url = 'https://example.com'
page = requests.get(url)
soup = BeautifulSoup(page.content, 'html.parser')

titles = soup.find_all('h2')
descriptions = soup.find_all('p')

for title in titles:
 print(title.text)

for description in descriptions:
 print(description.text)"
Modify an existing Python function to eliminate any redundancies,"def just_me(name):
    print(""Hi, my name is ""+name+"". I am special and nothing else matters."")
    print(""What about you?"")"
Compose a code in Python that counts the number of positive integers in a list.,"def count_positive_numbers(numbers):
    count = 0
    for num in numbers:
        if num > 0:
            count += 1
    return count"
Generate a Python function that takes a list and a target number as input and returns a list of the indices of all elements in the given list that are smaller than the given target number.,"def find_smaller_elements(nums, target):
  indices = []
  for i, num in enumerate(nums):
    if num < target:
      indices.append(i)
  return indices
  
result = find_smaller_elements([2, 3, 4, 5, 6], 4)
print(result) # [0, 1]"
Create a method in Python to calculate the Euclidean distance between two points.,"def euclidean_distance(point_a, point_b):
    sum_squares = 0
    for i in range(len(point_a)):
        sum_squares += (point_a[i] - point_b[i]) ** 2
    return (sum_squares ** 0.5)

point_a = (1, 2, 3)
point_b = (4, 5, 6)

distance = euclidean_distance(point_a, point_b)
print(""Distance between points: {}"".format(distance)) #5.19615"
Program a python method that enables the user to access and store items in an online database.,"def access_database(db):
 connection = db.connect()
 cursor = connection.cursor()
 cursor.execute(""SELECT * FROM restaurant_reviews"")
 results = cursor.fetchall()
 connection.close()
 return results"
Develop a Python class that implements a stack data structure with push and pop methods.,"class Stack:
  def __init__(self):
    self.items = []
    
  def push(self, item):
    self.items.append(item)
    
  def pop(self):
    return self.items.pop()"
Write a Python script to print all prime numbers from 1 to n,"def print_primes(n):
    for num in range(2, n+1):
        for i in range(2, num):
            if (num % i) == 0:
                break
        else:
            print(num)

print_primes(10)"
Create a Python script to help streamline the process of scraping data from a web page.,"import requests
from bs4 import BeautifulSoup

# Get HTML content from target website
r = requests.get('URL')
html_doc = r.text

# Create a beautiful soup object
soup = BeautifulSoup(html_doc)

# Find and extract desired data
data = soup.select('SELECTOR') 

# Print extracted data
for x in data: 
 print(x.text)"
Develop a Python program to demonstrate the use of **args and *kargs.,"""""""Demonstrates usage of *args and **kwargs""""""

def my_func(*args, **kwargs):
   """"""Prints arguments passed to the my_func() function""""""
   for arg in args:
        print(""Argument passed:"", arg)
   for key, value in kwargs.items():
        print(""{0} = {1}"".format(key,value))
 
a = 1
b = 2
my_dict = {'firstname': 'John', 'lastname': 'Doe'}
 
my_func(a, b, **my_dict)"
Design an algorithm in Python to detect duplicate elements in an array.,"def find_duplicates(lst):
    seen = set()
    duplicates = []
    for item in lst:
        if item in seen:
            duplicates.append(item)
        else:
            seen.add(item)
    
    return duplicates"
Write a Python code snippet to find the words which are at least 4 characters long in a given string.,"def find_words(string):
    words = string.split()
    result = []
    for word in words:
        if len(word) >= 4:
            result.append(word)
    return result"
Create a Python program to find the square root of a number without using the square root function.,"# A function to calculate the Square Root of a number using 
# the babylonian method 
def sqrt(n): 
	
	# We are using n itself as initial approximation 
	# This can definitely be improved 
	x = n 
	y = 1
	
	# e decides the accuracy level 
	e = 0.000001
	
	while(x - y > e): 
		x = (x + y)/2
		y = n/x 

	return x 

# Driver Program 
num = 25
print(sqrt(num))"
Write a function to convert a given string to a tuple.,"def string_to_tuple(str1):
    result = tuple(x for x in str1 if not x.isspace()) 
    return result"
Create a Python class to manage a checking account.,"class CheckingAccount:
  def __init__(self, balance):
    self.balance = balance
    
  def deposit(self, amount):
    self.balance += amount
    return self.balance
    
  def withdraw(self, amount):
    if self.balance - amount < 0:
      raise Exception(""Insufficient funds"")
    self.balance -= amount
    return self.balance"
Write a Python function to sort a dictionary by value.,"def sortDictByValue(dictionary):
 sorted_dictionary = sorted(dictionary.items(), key=lambda x: x[1])
 return dict(sorted_dictionary)
     
dictionary = {
 'a': 10,
 'b': 3,
 'c': 5
}

print(sortDictByValue(dictionary)) 
// Output: {'b': 3, 'c': 5, 'a': 10}"
Design a Python function to compute the factorial of a given number.,"def factorial(n):
    if n < 1:
        return 1
    else:
        return n * factorial(n - 1)"
Create a Python program to find the sum of the series - 1² + 2² + 3² + ... + n²,"def series_sum(n):
    sum = 0
    for i in range(1, n+1):
        sum += i**2
    return sum

print(series_sum(5))"
Write a Python code to check if a given number is divisible by both 5 and 7,"def is_divisible_by_5_and_7(num):
    if (num % 5 == 0 and num % 7 == 0):
        return True
    else:
        return False

print(is_divisible_by_5_and_7(50))"
Create a Python program that takes in an array of arrays of numbers as an argument and returns a new array with each of the inner arrays multiplied by its index in the outer array.,"def arrayMultiplied(arr):
 resultArr = []
 for index, innerArr in enumerate(arr):
  resultArr.append([x * index for x in innerArr])
 return resultArr

print(arrayMultiplied([[1, 2, 3], [4, 5, 6]]))
# Output: [[0, 2, 6], [0, 5, 12]]"
Write a python program to create a class that converts from Celsius to Fahrenheit.,"class Celsius_to_Fahrenheit:
    def __init__(self, celsius):
        self.celsius = celsius
    
    def to_fahrenheit(self):
        return (self.celsius * 9 / 5) + 32"
Create a Python script to clean text data. The script should remove punctuation and white space and convert all of the words to lower case.,"import re

def clean_text(text):
 cleaned_text = re.sub(r'[^\w\s]','', text)
 cleaned_text = cleaned_text.lower().strip()
 return cleaned_text
 
 text = 'This is a sample sentence.'
 cleaned_text = clean_text(text)
 print(cleaned_text)

# Output: thisisasamplesentence"
Create a python class with setter and getter methods.,"class Person:
  def __init__(self, name, age):
    self.name = name
    self.age = age
  
  def get_name(self):
    return self.name

  def get_age(self):
    return self.age

  def set_name(self, name):
    self.name = name

  def set_age(self, age):
    self.age = age"
Write a function to remove all the tuples with length k.,"def remove_tuples(test_list, K):
  res = [ele for ele in test_list if len(ele) != K]
  return (res) "
Write a Python program using NumPy to generate a random array of 10 values between 0 and 1.,"import numpy as np

# Generate an array of 10 random values between 0 and 1
array = np.random.random(10)

print(array)"
Develop a Python function to sum an array of integers,"def sumIntArray(arr):
    arr_sum = 0
    for num in arr:
        arr_sum += num
    return arr_sum

arr = [1, 2, 3, 4]
print(sumIntArray(arr)) #prints 10"
Write a command line script in Python to print the current day's date.,"import datetime
 
datetime_object = datetime.datetime.now()
print(datetime_object.strftime(""%A, %B %d, %Y""))"
Create a function in Python that takes two numbers as inputs and prints out their sum.,"def sum_numbers(x, y):
    return x + y
  
print(sum_numbers(5, 8))"
Develop a Python script to print the current date and time in ISO 8601 format.,"import datetime

# Get current datetime 
now = datetime.datetime.now()

# Print the current datetime in ISO 8601 format
print(now.isoformat())"
Develop a Python function to select the odd numbers from a given list.,"def selectOddNumbers(arr):
    oddNumbers = []
    for num in arr:
        if num % 2 == 1:
            oddNumbers.append(num)
    return oddNumbers

arr = [2, 3, 4, 5, 6, 7, 8, 9]
result = selectOddNumbers(arr)
print(result)"
Generate a Python script that prints the numbers from 1 to 10.,"# Print numbers 1 to 10
for num in range(1, 11):
    print(num)"
Write a Python program to find the number of times each character in an array occurs.,"from collections import Counter

s = ['a', 'b', 'c', 'a', 'c', 'b', 'd', 'd']
counts = Counter(s)

for c, count in counts.items():
 print(f'{c}: {count} times')"
Write a function to find the n'th perrin number using recursion.,"def get_perrin(n):
  if (n == 0):
    return 3
  if (n == 1):
    return 0
  if (n == 2):
    return 2 
  return get_perrin(n - 2) + get_perrin(n - 3)"
Write a function to find the ration of positive numbers in an array of integers.,"from array import array
def positive_count(nums):
    n = len(nums)
    n1 = 0
    for x in nums:
        if x > 0:
            n1 += 1
        else:
          None
    return round(n1/n,2)"
Can you create a Python program to generate a random string of 16 alphabets?,"import random
import string

def random_string():
    chars = string.ascii_lowercase
    size = 16
    return ''.join(random.choice(chars) for _ in range(size))

print(random_string())"
Write a Python program to sort a list of dictionaries by a given key.,"def sort_dicts_by_key(list_of_dicts, key):
    return sorted(list_of_dicts, key=lambda k: k[key])

sorted_dicts = sort_dicts_by_key(list_of_dicts, sort_by_key)

# Output:
[
{'name': 'John', 'age': 25},
{'name': 'Sarah', 'age': 28},
{'name': 'Adam', 'age': 30}
]"
What is the best way to generate a basic HTTP server in Python?,"import http.server

server_address = ('', 8000) 
httpd = http.server.HTTPServer(server_address, http.server.SimpleHTTPRequestHandler)
httpd.serve_forever()"
Write a python function to find the character made by adding all the characters of the given string.,"def get_Char(strr):  
    summ = 0
    for i in range(len(strr)): 
        summ += (ord(strr[i]) - ord('a') + 1)  
    if (summ % 26 == 0): 
        return ord('z') 
    else: 
        summ = summ % 26
        return chr(ord('a') + summ - 1)"
Create a Python class that can be used to represent a user profile.,"class UserProfile:
    def __init__(self, username, password):
        self.username = username
        self.password = password

    def get_username(self):
        return self.username

    def get_password(self):
        return self.password

user = UserProfile('username', 'password')
print(user.get_username())"
Create a Python function that takes two arguments: a list of numbers and an integer k. The function should return a list of all pairs of numbers in the given list whose sum is equal to k.,"def get_pairs(list, k):
 pairs = []
 for i in range(len(list)):
 for j in range(i+1, len(list)):
 if list[i] + list[j] == k:
 pairs.append( [list[i], list[j]] )
 return pairs

print(get_pairs([1, 2, 3, 4, 5], 5))

# Output: [[1, 4], [2, 3]]"
Optimize the python code using premature optimization techniques.,"# optimizing python code using premature optimization techniques
def foo():
    a = [i for i in range(1000)]"
Write a function to get an item of a tuple.,"def get_item(tup1,index):
  item = tup1[index]
  return item"
Generate a Python program that checks if all elements of a given list are the same.,"def check_list_elements(list_of_elements):
    if len(set(list_of_elements)) == 1:
        return True
    else:
        return False

list_of_elements = [1, 4, 1, 4, 1]
same_elements = check_list_elements(list_of_elements)
print(same_elements)"
Design a program in Python to split a list of strings into two halves.,"def split_list(string_list):
    mid = len(string_list) // 2
    return string_list[:mid], string_list[mid:]"
Come up with an algorithm in Python that takes two strings as input and checks whether one string is a rotation of another.,"def is_rotation(s1, s2):
    if len(s1) != len(s2):
        return False
    
    s1s1 = s1 + s1
    if s2 in s1s1:
        return True
    return False

print(is_rotation(""ABACD"", ""CDABA""))"
Design an algorithm in Python that checks whether a given number is a perfect square.,"def is_perfect_square(n):
  if n < 0: 
    return False
  x = n
  while x*x > n:
      x = (x + n/x) // 2
  return x*x == n"
"Generate a Python program to print the numbers 1 to 100, but only print ""fizz"" for multiples of 3, ""buzz"" for multiples of 5, and ""fizzbuzz"" for multiples of both 3 and 5.","for i in range(1,101):
 if i % 3 == 0 and i % 5 == 0:
 print(""fizzbuzz"")
 elif i % 3 == 0:
 print(""fizz"")
 elif i % 5 == 0:
 print(""buzz"")
 else:
 print(i)"
Write a function to find palindromes in a given list of strings using lambda function.,"def palindrome_lambda(texts):
  result = list(filter(lambda x: (x == """".join(reversed(x))), texts))
  return result"
Code a python program to simulate a dice roll,"""""""
Simulate a dice roll with Python
""""""
import random

def simulate_dice_roll():
    dice_roll = random.randint(1, 6)
    return dice_roll

if __name__ == '__main__':
    dice_roll = simulate_dice_roll()
    print(dice_roll)"
Design a Python program to convert all the lowercase letters to their corresponding uppercase letters in a given string.,"def upper_string(str): 
    res = """" 
    for i in range(len(str)): 
        if str[i].isupper(): 
            res += str[i] 
        else: 
            res += chr(ord(str[i])-32) 
    return res"
Create a web scrapper in Python to fetch data from a website. The scrapper should accept a URL and fetch the data and output it in a JSON format.,"import requests 
import json

url = ""https://www.example.com""

response = requests.get(url)
if response.status_code == 200:
    response_data = response.text
    parsed_data = json.loads(response_data)
    print(parsed_data)"
Design a Python class to represent a currency with its amount and name.,"class Currency:
    def __init__(self, name, amount):
        self.name = name
        self.amount = amount

    def convert_to_dollars(self):
        return self.amount * self.get_currency_rate()

    def get_currency_rate(self):
        return 1.0 # return rate accordingly

currency = Currency(""USD"", 10.0)
converted_amount = currency.convert_to_dollars() # 10.0"
Write a Python function to find the index of the smallest integer in a list.,"def find_smallest_int(lst):
  min_index = 0
  for index, num in enumerate(lst):
    if num < lst[min_index]:
      min_index = index
  return min_index

lst = [1, 4, 7, 8, 10]
smallest_int_index = find_smallest_int(lst)
print(""Index of the smallest integer:"", smallest_int_index)"
Create a function in Python to move a list of items from one list to another.,"def move_items(list1, list2): 
    for item in list1: 
        list2.append(item) 
    for i in range(len(list1)): 
        list1.pop() 

list1 = [2, 4, 6, 8, 10]
list2 = [1, 3, 5, 7, 9] 

move_items(list1, list2) 

print(""List 1 = "", list1) 
print(""List 2 = "", list2)"
Optimize a Python program that squares an array of integers so that it consumes the least possible memory.,"def square_array(a):
    res = [x ** 2 for x in a]
    return res"
Write a function to remove even characters in a string.,"def remove_even(str1):
 str2 = ''
 for i in range(1, len(str1) + 1):
    if(i % 2 != 0):
        str2 = str2 + str1[i - 1]
 return str2"
Specify a quick sort algorithm in Python to sort the given array of numbers.,"def quick_sort(arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    mid = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quick_sort(left) + mid + quick_sort(right)

print(quick_sort([9, 6, 5, 3, 4, 7, 4, 1]))"
Write a function to sort each sublist of strings in a given list of lists using lambda function.,"def sort_sublists(input_list):
    result = [sorted(x, key = lambda x:x[0]) for x in input_list] 
    return result"
Write a Python program that classifies and prints the type of a given triangle based on the lengths of its sides.,"a = 8
b = 8
c = 12

if a == b and b == c:
    print(""Equilateral triangle"")
elif a == b or b == c or a == c:
    print(""Isosceles triangle"")
else:
    print(""Scalene triangle"")"
Generate a Python script to download the source code of a given web page.,"import urllib.request

def download_webpage_source(url):
    '''This function will download the source code of a given web page'''

    response = urllib.request.urlopen(url)
    data = response.read()
    text = data.decode('utf-8')

    return text"
Use Python loops to generate a new list containing the square of all numbers in the following list.,"""""""
Generate a new list containing the square of all numbers in a list
""""""
# input list
in_list = [1,2,3,4,5]

# output list
out_list = []

# loop over the input list
for i in in_list:
    # calculate the square of the element and append it to output list
    out_list.append(i**2)

# print the output list
print(out_list)"
Can you provide a Python code for extracting the first word from a sentence?,"def extract_first_word(sentence):
    words = sentence.split()
    return words[0]

sentence = ""This is a sentence""
first_word = extract_first_word(sentence)
print(first_word)"
Create a Python program that takes two numbers from user and generates a list of all numbers in between them.,"def generateList(start, end):
    res = []
    for num in range(start, end+1):
        res.append(num)
    return res

start = 2
end = 6
print(generateList(start, end))  # Output: [2, 3, 4, 5, 6]"
Can you create a Python program that converts binary numbers to decimal numbers?,"def binary_to_decimal(binary_number):
    decimal_number = 0
    for digit in binary_number:
        decimal_number = decimal_number*2 + int(digit)
    return decimal_number

binary_number = ""1010""

print(binary_to_decimal(binary_number)) # 10"
Write a python function to find smallest power of 2 greater than or equal to n.,"def next_Power_Of_2(n): 
    count = 0; 
    if (n and not(n & (n - 1))): 
        return n   
    while( n != 0): 
        n >>= 1
        count += 1
    return 1 << count; "
Write a python function to find the maximum volume of a cuboid with given sum of sides.,"def max_volume (s): 
    maxvalue = 0
    i = 1
    for i in range(s - 1): 
        j = 1
        for j in range(s): 
            k = s - i - j 
            maxvalue = max(maxvalue, i * j * k)         
    return maxvalue "
Create a Python algorithm which generates a unique ID for every user. The ID should be unique within a given set of users and should not be guessable.,"import random
import string

def generate_user_id(length):
 generated_id = ''
 chars = string.ascii_letters + string.digits + '!@#$%^&*()'
 current_users = [user.id for user in User.query.all()]

 while generated_id in current_users:
 generated_id = ''.join(random.choice(chars) for _ in range(length))

 return generated_id"
Write a function to join the tuples if they have similar initial elements.,"def join_tuples(test_list):
  res = []
  for sub in test_list:
    if res and res[-1][0] == sub[0]:
      res[-1].extend(sub[1:])
    else:
      res.append([ele for ele in sub])
  res = list(map(tuple, res))
  return (res) "
Create a Python function to generate a password of length 10 containing alphanumeric characters only.,"import string
import random

def generate_password(length):
    chars = string.ascii_lowercase + string.ascii_uppercase + string.digits
    return ''.join(random.choice(chars) for _ in range(length))

generate_password(10)"
Develop a function in Python that removes all the duplicates from a list.,"def remove_duplicates(arr):
    new_list = []
    for i in arr:
        if i not in new_list:
            new_list.append(i)
    return new_list

arr = [1, 2, 2, 3, 3, 4, 4]
print(remove_duplicates(arr))"
Optimize the following function in Python so that it runs faster:,"def three_times_sum(a, b, c):
    return a + b + c"
Generate a Python class called Student with instance variables 'name' and 'grade'.,"class Student: 
    def __init__(self, name, grade): 
        self.name = name 
        self.grade = grade 
  
    def display(self): 
    	print(""Name:"", self.name, ""Grade:"", self.grade)"
Write a Python code to return the highest frequency element in a given array of integers.,"from collections import Counter

def highest_frequency(arr):
    arr_counts = Counter(arr)
    max_freq = 0
    max_freq_num = 0
    for num in arr_counts:
        if arr_counts[num] > max_freq:
            max_freq = arr_counts[num]
            max_freq_num = num
    return max_freq_num

print(highest_frequency(arr))"
Create a game in Python using the PyGame library.,"import pygame

pygame.init()

screen = pygame.display.set_mode((800,600))

pygame.display.set_caption(""My Game"")

run = True

while run:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            run = False

    pygame.display.update()"
Write a Python program to traverse a two-dimensional array and print each row.,"def traverse_2d_list(list2d):
    for row in list2d:
        print(row)"
"Edit an existing Python script so that it prints the sum of two numbers, instead of only the first number.","a = 4
b = 8
print(a + b)"
Create a text classifier in Python using Naive Bayes.,"from sklearn.naive_bayes import MultinomialNB 

clf = MultinomialNB(alpha=1.0)
clf.fit(X_train, y_train)"
Write an Python program to convert Celsius to Fahrenheit.,"def celsius_to_fahrenheit(celsius):
    fahrenheit = celsius * 9/5 + 32
    return fahrenheit

celsius = 100
result = celsius_to_fahrenheit(celsius)
print(result)"
Create a Python program to reverse a string.,"def reverse_string(string):
    reversed_string = """"
    for c in string:
        reversed_string = c + reversed_string
    return reversed_string

string = ""Hello""
print(reverse_string(string))"
Design a Python program to search for a specific word in a given sentence,"def search_word(sentence, word):
    words = sentence.split("" "")

    if word in words:
        return True
    else:
        return False"
Create a Python function to generate a list of numbers between given two numbers,"def numbers_between(start, end):
    return [x for x in range(start, end + 1)]"
Generate a python program to generate a json response based on following specification,"import json

data = {
    'name': 'John Doe',
    'email': 'john@example.com',
    'age': 32
}

json_data = json.dumps(data)
print(json_data)"
Generate a Python program for a clock view which will show the time in the console.,"import time

while True:
    localtime = time.localtime()
    result = time.strftime(""%I:%M:%S %p"", localtime)
    print(result, end=""\r"")
    time.sleep(1)"
Create a Python program to remove all the duplicates in the given list,"def remove_duplicates(list): 
    temp_list = [] 
    for i in list: 
        if i not in temp_list:
            temp_list.append(i)
    return temp_list

remove_duplicates(list) # output: [2, 10, 20, 30, 40]"
Transform the following Python code into valid JavaScript code.,"function fun() {
  let a = 1;
  let b = 2;
  let c = a + b;
  return c;
}"
Create a solution that detects the presence of a character in a string.,"def detect_character(string, char):
    for ch in string:
        if ch == char:
            return True
    return False

string = 'Python'
char = 'y'
print(detect_character(string, char))"
Write a python code for sorting n distinct integers using insertion sort.,"def insertion_sort(arr):
    for i in range(1, len(arr)): 
  
        key = arr[i] 
  
        # Move elements of arr[0..i-1], 
        # that are greater than key, 
        # to one position ahead of 
        # their current position 
        j = i-1
        while j >= 0 and key < arr[j] : 
                arr[j + 1] = arr[j] 
                j -= 1
        arr[j + 1] = key"
Create a class in Python to add two matrices.,"class MatrixAddition:
 
    def addTwoMatrices(self, X, Y):
        result = [[0, 0, 0],
                  [0, 0, 0],
                  [0, 0, 0]]
 
        for i in range(len(X)):
            for j in range(len(X[0])):
                result[i][j] = X[i][j] + Y[i][j]
        for r in result:
            print(r)"
Build a natural language processor that can translate English to French.,"# Python
import googletrans
from googletrans import Translator

translator = Translator()
text = 'Hello, World!'
result = translator.translate(text, dest='fr') 

print(result.text)"
Write a function to find number of even elements in the given list using lambda function.,"def count_even(array_nums):
   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))
   return count_even"
Edit the following Python function to raise an exception if the given number is lower than 0.,"def square(num):
    if num < 0:
        raise ValueError('Cannot square negative numbers.')
    return num**2"
Find the maximum element in an array using a Python program.,"def findMax(arr):
    max = arr[0] 
    for i in range(1,len(arr)): 
        if arr[i] > max: 
            max = arr[i] 
  
    return max"
Write a Python list comprehension to extract the individual digits of a given number.,[int(d) for d in str(num)]
Generate a Python function to execute a valid insertion sort on a given list of integers.,"def insertion_sort(arr):
 for i in range(1, len(arr)):
 key = arr[i]
 j = i -1
 while j >= 0 and key < arr[j] :
    arr[j + 1] = arr[j]
    j = j - 1
 arr[j + 1] = key

return arr"
Construct a program in Python to find the total number of words in a list of strings.,"def count_words(strings):
    count = 0
    for string in strings:
        words = string.split(' ')
        count += len(words)
    return count

strings = [""Hello World"", ""Foo Bar"", ""Hello Again""]
count = count_words(strings)
print(count)"
Create a webserver in Python that can take HTTP requests and return a response.,"from http.server import HTTPServer, BaseHTTPRequestHandler

class SimpleHTTPRequestHandler(BaseHTTPRequestHandler):

    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b'Hello, world!')

httpd = HTTPServer(('localhost', 8000), SimpleHTTPRequestHandler)
httpd.serve_forever()"
Apply a filter in Python that removes any stop words from a text,"from nltk.corpus import stopwords 
from nltk.tokenize import word_tokenize 

def filter_stop_words(text):
    word_tokens = word_tokenize(text)
    filtered_text = [w for w in word_tokens if not w in stopwords.words('english')]
    return ' '.join(filtered_text)"
"Create a Python program to generate 10 random numbers between 0 and 100, then print out the average.","import random

numbers = []
total = 0

#Generate 10 random numbers
for i in range(10):
    n = random.randint(0, 100)
    numbers.append(n)
    total += n

#Print the generated numbers
print(""Generated numbers :"")
for i in numbers:
    print(i)

#Calculate and print the average
average = total / len(numbers)
print(""The average is:"", average)"
Use automated refactoring to make Python code more readable.,"def concat(str1: str, str2: str) -> str:
    """"""Concatenate two strings.

    Args:
        str1: The first string
        str2: The second string

    Returns:
        str: The concatenated string
    """"""
    return str1 + str2"
Generate a Python code for a decision tree classifier.,"import pandas as pd
from sklearn import tree

# Load the data
data = pd.read_csv('data.csv')
X = data[['height', 'weight']]
y = data['gender']

# Train the model
clf = tree.DecisionTreeClassifier()
clf = clf.fit(X, y)

# Make a prediction
prediction = clf.predict([[180, 80]])
print(prediction)"
Create a Python program which takes in a string of text and returns all the unique words in the string.,"def find_unique_words(string):
    return set(string.split())"
Construct a python program which takes in input the size of a jagged array and prints it(no values).,"def print_jagged_array(array_size):    
    # Initialize a jagged array with the given size
    array = [None] * array_size
    
    # Populate the array with empty arrays
    for i in range(array_size):
        array[i] = []
    
    # Print the output array
    print(array)

if __name__ == ""__main__"":
    array_size = 4
    print_jagged_array(array_size)"
Create a function for checking valid passwords in Python.,"def check_valid_password(pwd):
 length_valid = (len(pwd) >= 8)
 has_uppercase = False
 has_lowercase = False
 has_digit = False
 for char in pwd: 
 if char.isupper():
 has_uppercase = True
 elif char.islower():
 has_lowercase = True
 elif char.isnumeric():
 has_digit = True
 valid = length_valid and has_uppercase and has_lowercase and has_digit
 return valid"
"Create a class in Python that can store the details of a student including name, age, gender, GPA, and college.","class Student:
    def __init__(self, name, age, gender, gpa, college):
        self.name = name
        self.age = age
        self.gender = gender
        self.gpa = gpa
        self.college = college
    
    def __str__(self):
        return f""Name: {self.name}, Age: {self.age}, Gender: {self.gender}, GPA: {self.gpa}, College: {self.college}"""
Design a program in Python to calculate the sum of all the elements in a given list.,"def get_sum(list_nums):
    sum = 0
    for num in list_nums:
        sum += num
    return sum"
Write a Python program to compute the randomness score of a given string.,"import random

def randomness_score(string):
    random.seed(string)
    score = 0
    for i in range(100):
        score += random.random()
    return score"
Create an async function in Python to fetch data from a JSON endpoint.,"import aiohttp
import asyncio

async def fetch_data(url):
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            data = await response.json()
            return data

async def main():
    data = await fetch_data('http://example.com/data.json')
    print(data)

asyncio.run(main())"
Create a code in Python to create a random binary tree.,"def create_tree(max_depth):
    depth = random.randint(0, max_depth)
    if depth == 0:
        return random.choice([0, 1])
    else:
        left = create_tree(depth - 1)
        right = create_tree(depth - 1)
        return (left, right)"
"Given a json-formatted string, create a python program to parse it into a dict.","import json

data = '{""name"": ""John"",""age"": 30,""address"": {""city"": ""New York"",""state"": ""NY""}}'

data_dict = json.loads(data)"
Create a a Python program to check whether an integer is even.,"def is_even(n):
 if n % 2 == 0:
 return True
 return False

num = int(input('Enter an integer: '))
if is_even(num):
 print('The number is even.')
else:
 print('The number is odd.')"
Construct a Python program to generate a random password using alphanumeric characters and special symbols.,"import random
import string

def generate_password(length):
    chars = string.ascii_letters + string.digits + string.punctuation
    return ''.join(random.choice(chars) for _ in range(length))

print(generate_password(8))"
Write a python program that adds two numbers together.,"def add_numbers(num1, num2):
  return num1 + num2
  
result = add_numbers(8, 10)
print(result)"
Write a Python script that will take an array of numbers and output the distinct elements.,"my_list = [1, 1, 3, 4, 5, 6, 6, 7, 8, 9, 9]
new_list = []

for item in my_list:
 if item not in new_list:
 new_list.append(item)

print(new_list)
# Output: [1, 3, 4, 5, 6, 7, 8, 9]"
Write a function in Python that takes a list of integers and returns a new list containing only odd numbers.,"def odd_numbers_list(numbers):
    return [num for num in numbers if num % 2 != 0]"
Write a function to pack consecutive duplicates of a given list elements into sublists.,"from itertools import groupby
def pack_consecutive_duplicates(list1):
    return [list(group) for key, group in groupby(list1)]"
"Create a function in Python that takes a list of strings and a value, and returns a new list of the strings with the value preprended to each string.","def prepend_list(List, Value):
    return [Value + Value for Value in List]
  
List = [""one"", ""two"", ""three""]
Value = ""STR-""
print (prepend_list(List, Value))

# Output: ['STR-one', 'STR-two', 'STR-three']"
Create a Python program to generate and print out a calendar for a given month.,"import calendar

# Input the year and month
year = int(input('Enter year: '))
month = int(input('Enter month: '))

# Generate the calendar
cal = calendar.month(year, month)

# Print the calendar
print(cal)"
Use Python to modify the list below by swapping the first and last elements.,"[4, 6, 8, 5, 3]"
Write a Python script to search for a specific word in a given string.,"import re 
  
def searchWord(string, word): 
    return re.search(word, string)
  
result = searchWord(""The quick brown fox"", ""brown"") 
if result is not None:
    print(""Word found"")
else:
    print(""Word not found"")"
Rewrite the given Java code into Python.,"n = 5
for i in range(1, n+1):
 print(i, end=' ')"
"Write a Python program to convert a given time in seconds to the equivalent time in hours, minutes, and seconds.","def convert_to_hms(time_in_seconds):
    hours = int(time_in_seconds / 3600)
    minutes = int((time_in_seconds % 3600) / 60)
    seconds = int(time_in_seconds % 60)
    return hours, minutes, seconds"
Create a python program to implement the Newton-Raphson method,"def newton_raphson(f, df, x_0, eps):
    delta = df(x_0)
    while delta > eps:
        x_0 = x_0 - f(x_0)/delta
        delta = df(x_0)
    return x_0"
Write a Python program to create a dictionary with keys=(numbers 1-10) and values=(numbers squared).,"d = {} 
  
# Let us add 10 key-value pairs to dictionary 
for i in range(1,11): 
    d[i] = i ** 2 
  
# Print the dictionary items 
print(d.items())"
Create a Python class that uses a custom exception for handling incorrect data types.,"class CustomExceptionHandling:
    class DataTypeException(Exception):
        def __init__(self, message):
            super().__init__(message)

    def check(self, value):
        if type(value) != str:
            raise self.DataTypeException(""Invalid data type"")"
Create a web API in Python Flask to get the sum of the numbers provided in a query string.,"from flask import Flask, request

app = Flask(__name__)

@app.route(""/sum"", methods=['GET'])
def get_sum():
    numbers = request.args.getlist('numbers')
    result = sum([int(num) for num in numbers])
    return str(result)

if __name__ == ""__main__"":
    app.run()"
Design a program in Python that converts a text string to a titlecase.,"def to_titlecase(str):
    new_str = """"
    for word in str.split(): 
        new_str += word.capitalize() + "" ""
    return new_str.strip()

print(to_titlecase(""Hello World""))"
Create a function in Python that takes an integer input and prints all combinations of the numbers.,"def permutations(n):
 for i in range(n+1):
  for j in range(n+1):
   for k in range(n+1):
    for l in range(n+1):
     print(i,j,k,l)

# Calling the function
permutations(4)"
Write a Python program to print the numbers of a specified list after removing even numbers from it.,"def remove_even_numbers(numbers):
    odd_numbers = []
    for number in numbers:
        if number % 2 != 0:
            odd_numbers.append(number)
    return odd_numbers

numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
odd_numbers = remove_even_numbers(numbers)
print(odd_numbers)"
Can you build a python program to generate a random 5 character string?,"import random

def generate_random_string():
    char_list = ""abcdefghijklmnopqrstuvwxyz0123456789""
    random_string = """"
    for _ in range(5):
        random_string += random.choice(char_list)
    return random_string"
"Create a new class in Python, named 'Car', that contains two attributes, 'make' and 'model'.","class Car:
    def __init__(self, make, model):
        self.make = make
        self.model = model"
Rewrite the following JavaScript string-manipulation function in Python.,"def fix_string(s): 
    s = s.replace("" "", """") 
    s = s.lower() 
    s = """".join(reversed(s)) 
    return s"
"Creating a Python dictionary comprehension, generate a new dictionary with keys from the first dictionary and values multiplied by 2.","my_dict = {'a': 1, 'b': 2, 'c': 3}

new_dict = {k:v*2 for k, v in my_dict.items()}

print(new_dict) # {'a':2, 'b':4, 'c':6}"
"Create a Python function to search for a substring in a string. The function should take two arguments, the haystack string and the needle string, and should return a boolean indicating whether the substring was found or not.","def contains_substring(haystack, needle): 
 return needle in haystack

# Usage example
contains_substring(""This is a string"", ""is"") # returns True 
contains_substring(""This is a string"", ""xyz"") # returns False"
Create a Python program to get the average rating of each restaurant in a given dataset.,"import pandas as pd

data_file = 'restaurant_ratings.csv'

data = pd.read_csv(data_file)

# Group the data by Restaurant
grouped_restaurants = data.groupby('Restaurant')

# Calculate the average rating for each restaurant
avg_ratings = grouped_restaurants['Rating'].mean()

# Print the average ratings to the console
print(avg_ratings)"
Write a function to find the surface area of a sphere.,"import math
def surfacearea_sphere(r):
  surfacearea=4*math.pi*r*r
  return surfacearea"
Create a python program that takes a list of user-defined objects as input and prints a summary of the objects.,"def print_summary(object_list):
    for object in object_list:
        print('Name: {}\nAge: {}\n'.format(object['name'], object['age']))

print_summary([{'name': 'John', 'age': 23}, {'name': 'Mary', 'age': 35}])"
Develop a Python function to calculate the tax of each item,"# Function to calculate tax
def calculate_tax(price, tax_rate):
    # Calculate the tax
    tax = price * tax_rate
    # Return the tax
    return tax

# Demonstration
price = 100
tax_rate = 0.15
tax = calculate_tax(price, tax_rate)
print(""Tax of the item:"", tax)"
Write a function to find the list with minimum length using lambda function.,"def min_length_list(input_list):
    min_length = min(len(x) for x in input_list )  
    min_list = min(input_list, key = lambda i: len(i))
    return(min_length, min_list)"
"Generate a function in Python that takes an unsorted list of integers, and sorts it using a bubble sort algorithm.","def bubble_sort(list):
  for i in range(len(list)-1):
    for j in range(len(list)-i-1):
      if list[j] > list[j+1]:
        temp = list[j]
        list[j] = list[j+1]
        list[j+1] = temp
  return list
  
print(bubble_sort([9, 4, 5, 1, 0])) // [0, 1, 4, 5, 9]"
Create a function in Python that takes a dictionary and a string as an argument and checks if the key is present in the given dictionary.,"def checkKeyExists(dictionary, key):
    return key in dictionary.keys()

dict = {
    ""Name"":""John"",
    ""Age"":25
}
String = ""Name""

print(checkKeyExists(dict, String))"
Build a Python script that takes an array of numbers as input and prints the maximum element.,"def find_max(arr):
    max_value = -float('inf')
    for num in arr:
        if num > max_value:
            max_value = num
    return max_value

arr = [1,4,7,3]
result = find_max(arr)
print(result)"
Generate code to find the intersection of two lists in Python.,"def intersect(list1, list2):
    return list(set(list1).intersection(list2))

print(intersect([1,2,3,4], [2,3,4,5])) # prints [2,3,4]"
Write a Python function to check if two given strings are anagrams or not. An anagram is two phrases or sentences that use the same exact letters and line up one letter to another.,"def is_anagram(str1, str2): 
 
	# Get oder of the strings  
	str1_order = sorted(str1)  
	str2_order = sorted(str2)  
	  
	# Compare the order of strings  
	if (str1_order == str2_order):  
		return True  
	return False"
Write a Python script to find the maximum and the minimum value in a given list.,"def find_max_min(lst):
 max_val = max(lst)
 min_val = min(lst)
 return max_val, min_val"
Write a function to remove the parenthesis area in a string.,"import re
def remove_parenthesis(items):
 for item in items:
    return (re.sub(r"" ?\([^)]+\)"", """", item))"
Design a Python script to generate a frequency table from a given data set.,"def calculateFrequency(data_set):
    frequency_table = dict()
    for item in data_set:
        frequency_table[item] = frequency_table.get(item, 0) + 1
    return frequency_table

data_set = [9,5,9,8,5,5,9]
frequency_table = calculateFrequency(data_set)
print(frequency_table) # Outputs {9: 3, 5: 3, 8: 1}"
Optimize the following Python program by introducing several code refactoring techniques.,"def factorial(number):
  total = 1
  while number > 0: 
    total *= number
    number -= 1
  return total

print(factorial(5))"
Create a python script which replaces each letter in a string by the letter which appears n positions after it.,"def replace_letter(string, n):
    result = """"
    for char in string:
        if char == 'z':
            result += 'b'
        elif char == 'Z':
            result += 'B'
        else:
            result += chr(ord(char) + n)
    
    return result"
Create a Decision Tree classifier in Python that can be used to predict whether a given customer will buy a car or not.,"# Import Decision Tree Classifier
from sklearn.tree import DecisionTreeClassifier

# Define the Decision Tree Classifier
clf = DecisionTreeClassifier()

# Train the Decision Tree Classifier
clf.fit(X_train, y_train)

# Predict the target values
y_pred = clf.predict(X_test)"
Create a JSON parser in Python,"import json

def parseJSON(jsonString):
    data = json.loads(jsonString)
    return data"
Provide a solution using Python to capitalize the first letter of each word in a given phrase.,"def capitalize(phrase):
  words = phrase.split("" "")
  capitalized_words = [word.capitalize() for word in words]
  capitalized_phrase = "" "".join(capitalized_words)
  return capitalized_phrase

capitalized_phrase = capitalize(""the quick brown fox"")
print(capitalized_phrase)"
"Create a Python program to find the first five positive numbers which are divisible by 7, but not a multiple of 5.","result = []
num = 1
while len(result) < 5:
    if (num % 7 == 0) and (num % 5 != 0):
        result.append(num)
    num += 1
    
print(result)"
Write a Python program to multiply two numbers using recursion.,"def multiply(x, y):
	if y == 0:
		return 0
	else:
		return x + multiply(x, y - 1)"
Create a class in Python that manages a list of items.,"class ItemList:
    def __init__(self):
        self.items = []

    def add(self, item):
        self.items.append(item)

    def remove(self, item):
        self.items.remove(item)

    def print_all_items(self):
        for item in self.items:
            print(item)"
Write code in Python to count the number of distinct substrings for a given string.,"def count_distinct_substrings(string):
    count = 0
    for i in range(len(string)):
        for j in range(i+1, len(string)+1):
            count += 1
    return count

result = count_distinct_substrings(""abcd"")
print(result)"
Create an algorithm in Python using numpy to normalize a given array of numbers.,"import numpy as np

def normalize(arr):
  return (arr - np.mean(arr)) / np.std(arr)

normalize([1,2,3,4]) # [-1.,  0.,  1.,  2.]"
"Craft a program in Python to take in a list of integers, and return the sum of the even numbers in the list.","def sum_even(arr):
    '''
    Function to calculate the sum of even numbers in an array
    
    Parameters
    arr: list of integers
    
    Returns
    sum of even numbers in the array
    '''
    total = 0
    for num in arr:
        if num % 2 == 0:
            total += num
    return total"
Write a Python Program to create a triangle of asterisks of a given height as shown below.,"def drawTriangle(n):
    for i in range(n):
        for j in range(i+1):
            print(""*"", end="""")
        print(""\r"")

drawTriangle(5)"
Design a program in Python to remove duplicate items in a list and display the resulting list.,"def remove_duplicates(mylist):
    newlist = list(set(mylist))
    return newlist

mylist = ['apple', 'pineapple', 'apple', 'banana']
print(remove_duplicates(mylist))"
Generate a class that models a car in Python.,"class Car:
 def __init__(self, make, model, year):
  self.make = make
  self.model = model
  self.year = year
 
 def get_make(self):
  return self.make
 
 def get_model(self):
  return self.model
 
 def get_year(self):
  return self.year"
Write a Python program to randomly shuffle a list of elements.,"import random

list_elements = [1,2,3,4,5,6,7]
random.shuffle(list_elements)
print (list_elements)"
Write a Python script to automate the mouse or keyboard.,"import pyautogui
 
# Move mouse to (100, 200)
pyautogui.moveTo(100, 200)
 
# Drag mouse from (100, 200) to (300, 400)
pyautogui.dragTo(300, 400, button='left')
 
# Click at position (300, 400)
pyautogui.click(x=300, y=400, clicks=2, button='left')
 
# Type the word ""Hello World"" 
pyautogui.typewrite(""Hello World"")"
Generate a python function to find the largest number from the given list,"def largest_number(list):
    largest = list[0]
    for number in list:
        if number > largest:
            largest = number
    return largest"
Optimize a given Python program for better runtime,"x = 0
for i in range(0,10000,2):
    x += i
x *= 2
x += (10000 - 1)"
Code a solution for creating a function that sorts an array of strings in descending order using Python.,"def sort_array(arr):
    arr.sort(reverse = True)
    return arr
  
arr = [""Hello"", ""World"", ""This"", ""is"", ""a"", ""Test""]
print(sort_array(arr))"
"Generate a Python program that reads input from the user, and divides the number by 5.","# Read number from user
num = float(input(""Enter a number: ""))

# Divide the number by 5
result = num / 5

# Print the result
print(""Result = %.2f"" % result)"
Generate a Python program to print the most popular item in a list.,"from collections import Counter

def most_popular(arr):
    cnt = Counter()
    for number in arr:
        cnt[number] += 1
    return cnt.most_common(1)[0][0]

result = most_popular([1, 5, 9, 1, 4, 5, 9])
print(result)"
Design an algorithm in Python to calculate the maximum of two numbers.,"def max_of_two(a,b):
    if a> b:
        return a
    else:
        return b

max_of_two(10,11)"
"Create a Python class for a Car that has attributes for make, model and year.","class Car:
  def __init__(self, make, model, year):
    self.make = make
    self.model = model
    self.year = year

  def get_make(self):
    return self.make
  
  def get_model(self):
    return self.model
  
  def get_year(self):
    return self.year"
Develop a classifier using Logistic Regression in Python.,"import numpy as np
from sklearn.linear_model import LogisticRegression
# Build Logistic Regression model 
model = LogisticRegression() 
model.fit(X_train, y_train)"
"Write a function in Python to sort a dictionary according to its values, in descending order.","def sortDictionary(dictionary):
  sorted_list = sorted(dictionary.items(), key=lambda x: x[1], reverse=True)
  sorted_dictionary = dict(sorted_list)
  return sorted_dictionary

sorted_dictionary = sortDictionary({'apple': 2, 'banana': 3, 'mango': 1})
print(sorted_dictionary)"
Create a function in python to calculate the distance between two points in 3D space.,"def calculateDistance(x1,y1,z1,x2,y2,z2): 
	dist = math.sqrt((x2 - x1)**2 + (y2 - y1)**2 + (z2 - z1)**2) 
	return dist 

print(calculateDistance(8,-4,1,5,8,-2))"
Build a Python program that extracts all email addresses from a given string.,"import re

def find_emails(text):
    regex = r""([a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+)""
    emails = re.findall(regex, text)
    return emails

emails = find_emails(""This is an example with two emails: john@example.com, and jane@example.com"")
print(emails)"
Write a function to count total characters in a string.,"def count_charac(str1):
 total = 0
 for i in str1:
    total = total + 1
 return total"
Create a python program that clean up the given text.,"def clean_text(text):
    return text.replace(""\t"", """").strip()"
Create a web scraper in Python that retrieves the top 10 headlines from a website's news section.,"import requests
from bs4 import BeautifulSoup

url = 'http://example.com/news'
response = requests.get(url)
soup = BeautifulSoup(response.text, ""html.parser"")

headlines = soup.find_all(""h2"", class_=""headline"")
for headline in headlines[:10]:
 print(headline.string)"
Write a function to print the first n lucky numbers.,"def lucky_num(n):
 List=range(-1,n*n+9,2)
 i=2
 while List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1
 return List[1:n+1]"
Create a Python dictionary for alphabetical order of numeric input,"def createDict(arr):
  res = {}
  for i in range(len(arr)):
    res[arr[i]] = i + 1
  return res

d = createDict([2, 3, 1])
print(d)"
Compose a Python program to move zeros in a given list to the end.,"def move_zeroes(nums):
    """"""
    Moves all the zeros in a given list to the end.
    @param nums: List
    @return: List
    """"""
    i = 0
    for num in nums:
        if num != 0:
            nums[i] = num
            i += 1
    while i < len(nums):
        nums[i] = 0
        i += 1
    return nums"
Create a python program that outputs a given number of random numbers within a given range,"import random

def get_n_random_numbers(max_num, num_of_nums):
    random_numbers = []
    for _ in range(num_of_nums):
        random_numbers.append(random.randrange(max_num))
    return random_numbers"
Write a python function to find the difference between sum of even and odd digits.,"def is_Diff(n): 
    return (n % 11 == 0) "
Write a Python script to query the IMDB database and get all movies released in 2020 with 9 or 10 rating.,"import requests

API_ENDPOINT = 'https://imdb-api.com/'

# Sending get request and saving the response as response object
resp = requests.get(API_ENDPOINT + 'movie/{' + 'release_date:2020%2Creview:9:10' + '}')

# Extracting data in json format
data = resp.json()

# Printing the output
print(data)"
Out put the first 3 characters of a given string.,"string = ""Python""

print(string[:3])"
Provide an example of how to generate a key-value Python dictionary from a list.,"my_list = [1, 2, 3, 4]
my_dict = {list_val:list_val**2 for list_val in my_list}
print(my_dict)
# {1: 1, 2: 4, 3: 9, 4: 16}"
Create a binary search algorithm in Python,"def binary_search(item, lst):
    start = 0
    end = len(lst) - 1
    while start <= end:
        mid = (start + end) // 2
        if lst[mid] == item:
            return mid
        elif lst[mid] < item:
            start = mid + 1
        else:
            end = mid - 1
    return -1"
Write a python program to a calculate the area of a circle given its radius.,"import math

radius = 8
area = math.pi * radius * radius
print(area)"
"Create a Python class for a calculator that can add, subtract, divide and multiply two numbers.","class Calculator:
 
 def __init__(self):
  pass
 
 def add(self, a, b):
  return a + b
 
 def subtract(self, a, b):
  return a - b
 
 def divide(self, a, b):
  return a / b
 
 def multiply(self, a, b):
  return a * b"
Generate a Python program that counts the number of words and the average word length in a given sentence.,"def count_words(sentence):
  words = sentence.split()
  num_words = len(words)
  total_len = 0
  for word in words:
    total_len += len(word)
  avg_word_len = total_len / num_words
  return (num_words, avg_word_len)"
Write an optimized sequential search algorithm in Python that takes a list of numbers and a target number as input and returns the index of the target if it exists in the list.,"def find_target(nums, target):
  for i in range(len(nums)):
    if nums[i] == target:
      return i
  return -1"
Edit the following Python code to remove duplicate values in the given array.,"arr = [1, 2, 4, 5]
 
unique_arr = []
 
for element in arr:
    if element not in unique_arr:
        unique_arr.append(element)
 
print(unique_arr) # [1, 2, 4, 5]"
Optimize a Python program for calculating the sum of the first N numbers.,"def get_sum(n):
    return (n*(n+1)) // 2

n = 20
sum_of_num = get_sum(n)

print(""Sum of first"", n, ""numbers is"", sum_of_num)"
Create a python program for creating a dictionaries of char count in a given string.,"def get_char_count(s):
    """"""
    This function returns a dictionary of character count in a given string.
    :param s: string
    :return: dictionary
    """"""
    char_count = dict()
    for char in s:
        if char not in char_count.keys():
            char_count[char] = 1
        else:
            char_count[char] += 1
    return char_count"
Debug existing Python code to update a field in a table.,"cur.execute('UPDATE records SET value = ? WHERE name = ?', (value, name))
conn.commit() # Added statement to commit changes to the database."
Create an AI assistant in Python that can tell jokes.,"import random

jokes = [
   'Why did the chicken cross the playground? To get to the other slide!',
   'Why did the monkey fall out of the tree? Because it was dead!',
   'Why did the dinosaur go to the dentist? Because he had a toothache!'
]

def tell_joke():
   joke = random.choice(jokes)
   print(joke)

tell_joke()"
Can you build an algorithm in Python to check whether a given number is a prime or not?,"def is_prime(num):
    if num < 2:
        return False
    for i in range(2, num):
        if num % i == 0:
            return False
    return True

print(is_prime(7))"
Develop a function to delete duplicates from a given string in Python.,"def remove_duplicates(string):
    new_string = """"
    for char in string:
        if char not in new_string:
            new_string += char
    return new_string

no_duplicates = remove_duplicates(""mississippi"")
print(no_duplicates)"
Create a user input validation in Python to restrict user input to a number between 0 and 10.,"def validate_input(user_input):
  if user_input < 0 or user_input > 10:
    raise ValueError('Input should be between 0 and 10')
  else:
    return user_input

# take user input
user_input = int(input('Enter a number between 0 and 10: '))

# validate and print the result
validated_input = validate_input(user_input)
print('Validated input: ', validated_input)"
Create a lambda expression in Python to filter a list of integer greater than 50.,"list1 = [45, 12, 52, 89, 33, 99]
filtered_list = list(filter(lambda x: x > 50, list1))

print(filtered_list)"
Suggest a way to get a substring of a given string in Python.,"def substring(string, start, end):
    '''This function takes a string, start index and end index, and returns the substring between the two given indexes.'''
    return string[start:end]"
Develop a Python program to check if a list contains any duplicates,"def contains_duplicates(nums):
    seen = set()
    for num in nums:
        if num in seen:
            return True
        seen.add(num)
    return False

if __name__ == '__main__':
    nums = [1, 4, 5, 1]
    contains = contains_duplicates(nums)
    if contains:
        print('The list contains duplicates.')
    else:
        print('The list doesn\'t contain duplicates.')"
Generate a program in Python that will check if a given number is a palindrome.,"def is_palindrome(n):
 n = str(n)
 
 return n == n[::-1]
 
num = 123321
if is_palindrome(num):
 print(f""{num} is a palindrome"")
else:
 print(f""{num} is not a palindrome"")"
Write a function to find the maximum value in a given heterogeneous list.,"def max_val(listval):
     max_val = max(i for i in listval if isinstance(i, int)) 
     return(max_val)"
Develop a web scraper in Python which can extract information from HTML page.,"import requests
from bs4 import BeautifulSoup
 
def scrape_data(url):
 response = requests.get(url)
 
 if response.status_code == 200:
  html_data = response.text
  soup = BeautifulSoup(html_data, 'html.parser')
  
  # extract data here
 
 else:
  print(""Invalid response!"")
 
scrape_data('https://example.com')"
Write an algorithm in Python to find the number of inversions in an array.,"def countInversions(arr):
	# To store counts of inversions
	count = 0

	# Iterating from first element
	for i in range(len(arr)):
		# To find number of elements smaller than arr[i]
		# which are on right side of arr[i]
		for j in range(i + 1, len(arr)):
			if arr[i] > arr[j]:
				count += 1
	return count"
Write a function in Python that takes a list of words as an argument and outputs a string of comma separated words.,"def listToString(words):
 return ', '.join(words)"
Generate a code snippet in Python to convert a given number to its binary format.,"def toBinary(num):
   result = """"
   while num > 0:
      result = str(num % 2) + result
      num = num // 2
   return result

print(toBinary(245))  # output: 11110101"
Write a python program to classify the source of an error.,"def classify_error(message):
    if 'Connection timed out' in message:
        return 'Network'
    else:
        return 'Other'"
Construct a machine learning model in Python for predicting the prices of apartments in your city.,"#Import Data
import pandas as pd
data = pd.read_csv(‘data.csv’)

#Prepare Data
X = data[['size', 'location', 'bedrooms']]
y = data['price']

#Train Model
from sklearn.linear_model import LinearRegression
model = LinearRegression()
model.fit(X,y)

#Test Model
test_X = [[1500, 'downtown', 3]]
test_y = model.predict(test_X)
print(test_y)"
Read the following data structure and create an equivalent dictionary in Python.,"data = {
    'height': '150cm',
    'age': 20,
    'name': 'John'
}"
Generate a Python program to test the equality of two given strings,"if st1 == st2:
    print(""Strings are equal."")
else:
    print(""Strings are not equal."")"
Create a Python program to display a multiplication table of size n x n.,"n = 3

for i in range(1, n+1):
    for j in range(1, n+1):
        print(f'{i} x {j} = {i*j}', end='\t')
    print()"
Write a Python program to call a given API with an input parameter and store the result in a variable.,"import requests

url = 'https://example.org/api?name=test'
response = requests.get(url)
data = response.json()
result = data['result']"
Write a function to find the longest chain which can be formed from the given set of pairs.,"class Pair(object): 
	def __init__(self, a, b): 
		self.a = a 
		self.b = b 
def max_chain_length(arr, n): 
	max = 0
	mcl = [1 for i in range(n)] 
	for i in range(1, n): 
		for j in range(0, i): 
			if (arr[i].a > arr[j].b and
				mcl[i] < mcl[j] + 1): 
				mcl[i] = mcl[j] + 1
	for i in range(n): 
		if (max < mcl[i]): 
			max = mcl[i] 
	return max"
Design a function in Python that computes the area of a triangle given its base length and height.,"def triangle_area(base_length, height):
    area = 0.5 * base_length * height
    return area"
Create a Python program that takes in an array and returns an array with each element multiplied by two.,"def double_array_elements(arr):
    new_arr = []
    for num in arr:
        new_arr.append(num * 2)
    return new_arr

arr = [2, 3, 4]

new_arr = double_array_elements(arr)
print(new_arr) # [4, 6, 8]"
Write a function to find the lateral surface area of a cylinder.,"def lateralsuface_cylinder(r,h):
  lateralsurface= 2*3.1415*r*h
  return lateralsurface"
Write a Python function to sort the given list of tuples based on their second elements.,"def sort_tuples_by_second(tuples):
 tuple_order = sorted(tuples, key=lambda x: x[1])
 return tuple_order"
"Pick two languages from Python, Java, C++ and Go. Write a function in both languages that takes in two integer numbers and returns the sum of them.","#Python

def add(a, b):
 return a + b

#Java

public static int add(int a, int b) {
 return a + b;
}

#C++

int add(int a, int b) {
 return a + b;
}

#Go

func add(a int, b int) int {
 return a + b
}"
Write a Python program to generate random passwords of length 8.,"import random

def generate_password(): 
    s = ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ@#$0123456789""
    p =  """".join(random.sample(s,8))
    return p

print(generate_password())"
Come up with a python program to find the longest common prefix in a list of strings.,"def longest_common_prefix(strings):
    if len(strings) == 0: 
        return ''

    prefix = strings[0]
    for s in strings:
        i = 0 
        while i < len(prefix) and i < len(s) and s[i] == prefix[i]: 
            i += 1 
        prefix = prefix[:i] 
    return prefix 

print(longest_common_prefix([""hello"", ""hey"", ""hi"", ""have""]))  # Output: h"
"Create a function in Python that takes two parameters, an array and an integer, and returns a new array with all of the elements of the array multiplied by the integer.","def multiply_by_int(array, int):
    new_array = []
    for elem in array:
        new_array.append(elem * int)
    return new_array"
Generate a Python function that takes a list of strings and returns a dictionary with each string as the key and the length of the string as the value.,"def count_lengths(strings):
  return {string : len(string) for string in strings}

strings = ['one', 'two', 'three', 'four']

print(count_lengths(strings))
# Output: {'one': 3, 'two': 3, 'three': 5, 'four': 4}"
Create an algorithm in Python to calculate the Fibonacci sequence up to n terms.,"def f_Fibonacci(n): 
  a = 0
  b = 1
  if n < 0: 
    print(""Incorrect input"") 
  elif n == 0: 
    return a 
  elif n == 1: 
    return b 
  else: 
    for i in range(2,n): 
      c = a + b 
      a = b 
      b = c 
    return b"
Clean the following dataset using Python to remove any irrelevant entries.,"def clean_data(data):
    cleaned_data = []
    for row in data:
        if row[1] != '' and row[2] != '':
            cleaned_data.append(row)
    
    return cleaned_data"
Generate a list of distinct values from an array of integers using a python program.,"unique_list = list(set([50, 20, 30, 40, 10]))
print(unique_list)"
Develop a code to sort the following  Python dictionary by its values from low to high.,"def sort_dict_by_values(students):
    sorted_students = sorted(students, key=students.get)
    return [sorted_students, [students[key] for key in sorted_students]]

print(sort_dict_by_values(students))"
Generate a Python program to identify the last occurrence of an element in a list.,"def last_occurrence(x, lst):
  last_index = -1
  for i in range(len(lst)):
    if lst[i] == x:
      last_index = i
  return last_index"
Write a function to match two words from a list of words starting with letter 'p'.,"import re
def start_withp(words):
 for w in words:
        m = re.match(""(P\w+)\W(P\w+)"", w)
        if m:
            return m.groups()"
Develop a Python script to print the prime factors of a given positive integer.,"def primeFactors(n): 
      
    factors = []
    while n % 2 == 0: 
        factors.append(2) 
        n = n / 2
  
    for i in range(3, int(sqrt(n))+1, 2): 
          
        while n % i== 0: 
            factors.append(i) 
            n = n / i 
          
    if n > 2: 
        factors.append(n) 
  
    return factors 
  
n = 315
print(primeFactors(n))"
Write a function to extract elements that occur singly in the given tuple list.,"def extract_singly(test_list):
  res = []
  temp = set()
  for inner in test_list:
    for ele in inner:
      if not ele in temp:
        temp.add(ele)
        res.append(ele)
  return (res) "
Create a Python script that takes a list of integers and finds the highest value.,"The highest value is 8.

list_ints = [2, 5, 3, 4, 8]

highest_value = max(list_ints)

print('The highest value is ' + str(highest_value) + '.')"
Create a program in Python to to compute the sum of all the numbers present in a given string.,"def sum_of_numbers_in_string(string):
    number_list = []
    for word in string.split(' '):
        if word.isdigit():
            number_list.append(int(word))

    return sum(number_list)"
Create a CGI script in Python to process form data from an HTML page.,"#!/usr/bin/env python
 
import cgi
 
#Get form data
form = cgi.FieldStorage()
 
name = form.getvalue('name')
age = form.getvalue('age')

# Display the results
print ""Content-type: text/html""
print
print ""<html>""
print ""<body>""
print ""<p>Hi, %s! You are %s years old.</p>"" % (name, age)
print ""</body>""
print ""</html>"""
Create a PDF document from a Word document using Python.,"import win32com.client

# word file to be converted
wordFile =  r'filename.docx'

# Open the word file
word = win32com.client.Dispatch(""Word.Application"")
doc = word.Documents.Open(wordFile)

# Set the pdf parameters
pdf_format_id = 17
file_name = r'filename.pdf'

# Save the file as pdf
doc.SaveAs(file_name, FileFormat=pdf_format_id)

# Close the word file
word.Quit()"
Design a program in Python that outputs the N-th Fibonacci number.,"def nth_fibonacci_number(n):
    if n == 0:
        return 0
    if n == 1:
        return 1
    
    a = 0
    b = 1
    for i in range(2, n+1):
        c = a + b
        a = b
        b = c
    
    return c"
Write a python function to count number of cubes of size k in a cube of size n.,"def No_of_cubes(N,K):
    No = 0
    No = (N - K + 1)
    No = pow(No, 3)
    return No"
Create a Python program to find the n'th Fibonacci number.,"def fibonacci_number(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return (fibonacci_number(n-1) + fibonacci_number(n-2))

n = int(input(""Enter the n'th Fibonacci number: ""))

print(""Fibonacci number at %d is: %d"" % (n,fibonacci_number(n)))"
Edit the following Python program to take user input.,"name = input(""Please enter your name: "")
print(""Hello {name}"".format(name=name))"
Write a python function to find sum of products of all possible subarrays.,"def sum_Of_Subarray_Prod(arr,n):
    ans = 0
    res = 0
    i = n - 1
    while (i >= 0):
        incr = arr[i]*(1 + res)
        ans += incr
        res = incr
        i -= 1
    return (ans)"
Construct a Python class with the following atributes and methods.,"class MyClass:
    def __init__(self):
        self.name = """"
        self.ID = 0
 
    def setName(self, name):
        self.name = name
    
    def setID(self, ID):
        self.ID = ID
 
    def getName(self):
        return self.name
 
    def getID(self):
        return self.ID"
Generate a Python class to check whether a string contains all the vowels or not.,"class CheckVowel():
    def __init__(self, string):
        self.string = string

    def check_vowel(self):
        vowels = ""aeiouAEIOU""
        for char in self.string:
            if char not in vowels:
                return False
        return True"
Create a Python program to group words of the same length together,"def group_words(words):
    # Function to group words of the same length together
    groups = {}
    
    for word in words:
        length = len(word)
        if length not in groups:
            groups[length] = []
        groups[length].append(word)
    return groups"
Create a Python program to generate a list of random integers with the size,"import random

def generate_random_int_list(n):
  return [random.randint(0,10) for i in range(n)]"
Design a class in Python that stores student information.,"class Student:
    def __init__(self, name, age, class_name, grade):
        self.name = name
        self.age = age
        self.class_name = class_name
        self.grade = grade

    def get_name(self):
        return self.name 
    
    def get_age(self):
        return self.age

    def get_class_name(self):
        return self.class_name

    def get_grade(self):
        return self.grade"
"Generate a Python dictionary from two arrays, such that the first array serves as keys and the second array serves as values.","my_dict = {
    'name': 'John',
    'age': 24,
    'gender': 'male'
}"
Develop a Python program to clearly understand the concept of recursion.,"# This program is to understand recursion in Python.

# Define a recursive function to calculate the factorial of a number
def factorial(n):
   if n == 1:
      return 1
   else:
      return n * factorial(n - 1)

# Calculate factorial of number 5
result = factorial(5)
print(""Factorial of 5 is "", result) 

# Output: Factorial of 5 is 120"
Write a Python program to search an element in a list using linear search.,"def linear_search(lst, x):
    for i in range(len(lst)):
        if lst[i] == x:
            return i
 
    return -1"
Write a Python program to encrypt a sentence using substitution cipher.,"def encrypt(text):
    encrypted_text = """"
    for letter in text:
        if letter.isalpha(): 
            encrypted_text += chr(ord(letter) + 2)
        else:
            encrypted_text += letter

    return encrypted_text

text = ""Hello, world!""
encrypted_text = encrypt(text)
print(encrypted_text)"
Write a python function to check whether the given array is monotonic or not.,"def is_Monotonic(A): 
    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or
            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) "
"Write a function in Python that takes two parameters ""n"" and ""k"" and returns the number of ways to jump ""k"" steps, starting from 0, taking 1 or 2 steps at a time, and not going beyond n.","def steps(n, k):
 if k == 0 or n == k:
  return 1
 if n > k:
  return steps(n-1, k-1) + steps(n-2, k-1)
 else:
  return 0"
Can you write a Python3 program to calculate the number of times a character appears in a given string?,"str1 = ""Hello World!""

char = 'l'
count = 0

for i in str1:
     if i == char:
          count = count + 1

# Print the result 
print (f'The character {char} appears {count} times in the string {str1}')"
Generate a Python class to represent a 3-dimensional vector.,"class Vector3D:
    def __init__(self, x, y, z):
        self.x = x
        self.y = y
        self.z = z
    
    def length(self):
        return (self.x**2 + self.y**2 + self.z**2)**0.5"
Convert a given list of integers to a string in Python.,"def list_to_string(int_list):
  return ' '.join(str(x) for x in int_list)

int_list = [56, 23, 7]
print(list_to_string(int_list))"
Generate a Python method to format a given string in the desired manner.,"def format_string(string):
  return string.lower().title()"
Create a Python dictionary from two given lists.,"dict1 = dict(zip(list1, list2)) 
print(dict1)"
Create a Python program to make a copy of an array.,"""""""
Create a Python program to make a copy of an array. 
""""""

def copy_array(arr):
    return arr[:]

if __name__ == '__main__':
    arr = [1,2,3,4,5]
    print(copy_array(arr))"
Identfy the techniques used in the code snippet to achieve concurrent execution.,"The code snippet uses the threading module from Python to achieve concurrent execution. This is done by using the Thread class to create new threads and using the start() method to start each thread. The Thread class also provides methods for synchronization and communication between the threads, such as the Lock and Condition Objects."
Create a decision tree classifier in Python to distinguish cats and dogs.,"import numpy as np
from sklearn import tree

# Create the data
x = np.array([[0, 0], [1, 1]])
y = np.array([0, 1])

# Train the tree
clf = tree.DecisionTreeClassifier()
clf = clf.fit(x, y)"
Create a code that would prompt the user for a given number and print out the Python equivalent of the given number.,"def user_number(number):
    number_py = '{}'.format(number)
    print(""The Python equivalent of {} is {}"".format(number, number_py))"
Rewrite this JavaScript code in Python.,"arr = [1, 2, 3, 4, 5]
for element in arr:
   print(element * 2)"
Create a program in Python to simulate the queue data structure.,"class Queue(object):
    def __init__(self):
        self.items = []

    def isEmpty(self):
        return self.items == []

    def enqueue(self, item):
        self.items.insert(0, item)

    def dequeue(self):
        return self.items.pop()

    def size(self):
        return len(self.items)"
Create a python program to cluster a given dataset using K-Means clustering.,"""""""
Cluster a given dataset using K-Means clustering
""""""
import numpy as np
from sklearn.cluster import KMeans

def cluster_dataset(X, n_clusters):
    kmeans = KMeans(n_clusters=n_clusters, random_state=0).fit(X)
    return kmeans.labels_

if __name__ == '__main__':
    X = np.array([[1, 2], [1, 4], [1, 0],
                [10, 2], [10, 4], [10, 0]])
    print(cluster_dataset(X, n_clusters=2))"
Create an algorithm in Python to implement insertion sort.,"def insertionSort(array): 
    for i in range(1, len(array)): 
        key = array[i] 
        j = i-1
        while j >=0 and key < array[j] : 
                array[j+1] = array[j] 
                j -= 1
        array[j+1] = key 
  
array = [12, 11, 13, 5, 6] 
insertionSort(array) 

print(array)"
Create a python program to find the length of the longest run of 1s in the binary form of a positive integer.,"def longest_run_of_ones(n):
    max = 0
    count = 0
    while n > 0:
        if n % 2 == 1:
            count += 1
        else:
            if count > max:
                max = count
            count = 0
        n //= 2
    if count > max:
        max = count
    return max"
Write a Python program that takes a single integer as input and prints out the table of its multiplication.,"def print_table(n):
    for i in range(1, 11):
        print('{0} x {1} = {2}'.format(n ,i , n*i))

print_table(4)"
Create a Python program to remove repeating numbers from an array.,"def removeRepeats(arr):
    result = []
    seen = set()
    for num in arr:
        if num not in seen:
            result.append(num)
            seen.add(num)
     return result

res = removeRepeats([2, 3, 3, 4, 5, 4])
print(res)"
Write a python program that takes a single argument and returns the first 10 characters of the argument string.,"# Get the first 10 characters of a string
def get_first_10_chars(string):
 return string[0:10]

str = 'Hello, world!'
print(get_first_10_chars(str))"
"Given two strings, write a python function to check whether one string is a substring of another.","def is_substring(string1, string2): 
    if string1 in string2:
        return True
    else:
        return False"
Design a Python program to determine if a number is odd or even.,"def is_even(num):
 if num % 2 == 0:
 return True
 else:
 return False

number = int(input(""Enter a number: ""))

if is_even(number):
 print(""The number is even"")
else:
 print(""The number is odd"")"
Design an algorithm in Python to convert a binary string into its decimal representation.,"def binaryToDecimals(binary_number):
  decimal = 0
  for i, digit in enumerate(reversed(binary_number)):
    decimal += int(digit) * (2**i)
  return decimal

print (binaryToDecimals(""1010""))  # Output 10"
Write a python function to check whether an array can be sorted or not by picking only the corner elements.,"def check(arr,n): 
    g = 0 
    for i in range(1,n): 
        if (arr[i] - arr[i - 1] > 0 and g == 1): 
            return False
        if (arr[i] - arr[i] < 0): 
            g = 1
    return True"
Create a class called Player in Python and add two class methods called attack and defend.,"class Player:
    
    def __init__(self):
        pass
    
    def attack(self):
        print(""The Player is attacking!"")
    
    def defend(self):
        print(""The Player is defending!"")"
Design a Python program to find the sum of the two largest numbers in a list.,"def find_sum_of_largest(lst):
  lst.sort()
  return lst[-1] + lst[-2]

print(find_sum_of_largest([1, 3, 5, 7, 9]))"
Generate a code to create an array in python of size n.,array = [None] * n
"Given a string “Python Exercises”, write a Python function to convert it into “python exercises”.","def convert_string(input_string): 
    return input_string.lower()"
Use a Python list comprehension to generate a new list which contains only even numbers in the number range from 1 to 10.,"even_numbers = [x for x in range(1, 11) if x % 2 == 0]"
Create a function in Python to optimize a cost function using gradient descent.,"def optimize(x, alpha):
 grad = 2 * x
 x = x - alpha * grad
 return x

for i in range(1000):
 x = optimize(x, 0.1) 

print(x) # Output: 0.0"
Write a function in Python that takes a single string argument and prints it out in reverse.,"def printReverseString(in_str): 
  
    reversed_str = in_str[::-1] 
    print(reversed_str) 

printReverseString(""Hello World!"")"
Develop a Python code which can search for a name in a list and return the position of the name in the list.,"def search(name_list, name): 
    for i in range(len(name_list)): 
        if name_list[i] == name: 
            return i 
    return -1"
Create a Python dictionary comprehension to remove all odd numbers from the provided list.,"even_dict = {k: v for k, v in enumerate([1, 2, 3, 4, 5]) if v % 2 == 0}"
Write a code to create a class in Python for Employee with two private attributes: first_name and last_name.,"class Employee:
    
    def __init__(self, first_name, last_name):
        self.__first_name = first_name
        self.__last_name = last_name
    
    @property
    def first_name(self):
        return self.__first_name
    
    @property
    def last_name(self):
        return self.__last_name"
"Write a Python program to replace all occurrences of the word ""hello"" with ""hi"".","updated_sentence = sentence.replace(""hello"", ""hi"")"
Improve the following Python program,"def get_product_listing(product_category):
    return [product.get_listing() for product in product_category]"
Create a python script to encode a string using Base64,"import base64

def encode_base64(string):
    encoded_bytes = base64.b64encode(string.encode(""utf-8""))
    return encoded_bytes.decode(""utf-8"")"
Develop a recursive solution in Python to calculate the Fibonacci sequence up to the nth term.,"def fibonacci_sequence(n): 
    if n <= 1: 
        return n 
    else: 
        return(fibonacci_sequence(n-1) + fibonacci_sequence(n-2)) 

print(""The Fibonacci sequence up to the nth term:"") 
for i in range(7): 
    print(fibonacci_sequence(i))"
"Write a Python program that takes two numbers, a and b, and prints the sum of those numbers, (a + b).","def add_numbers(a, b):
  print(a + b)

add_numbers(3, 2)"
Write a function in Python which takes a number as a parameter and returns the factorial.,"def factorial(num):
  if num == 0 or num == 1:
    return 1
  else:
    return num * factorial(num - 1)
  
print(factorial(5))"
Generate a Python program to find the maximum number in a given set of numbers.,"def find_maximum(nums):
    # Initialize the maximum number 
    max_num = nums[0]
    # Loop through the list
    for num in nums:
        # Check if the current number is bigger
        if num > max_num:
            # If it is, save the number
            max_num = num

    return max_num

# call the function
maximum = find_maximum(nums)
print(""The maximum is "" + str(maximum))"
Create a function to extract the first key of a given dictionary in Python.,"def get_first_key(d):
    if d:
        return next(iter(d))
    return None"
Implement a function in Python to calculate the standard deviation of a list,"def std_dev(array):
    import math

    mean = sum(array)/len(array)
    sum_of_squared_differences = 0
    for element in array:
        sum_of_squared_differences += (element-mean)**2
    return math.sqrt(sum_of_squared_differences/len(array))"
Write a Python function that takes a list of strings and returns a list of tuples containing each string and the number of characters in that string.,"def list_to_tuples(words):
    # create an empty list
    result = []

    # create a tuple for each string
    for word in words:
        result.append((word, len(word)))
    
    return result

result = list_to_tuples(['foo', 'bar', 'baz'])
print(result)"
Write a Python program that creates a new dictionary from two existing dictionaries.,dict3 = {key:dict1[key] if key in dict1 else dict2[key] for key in (dict1.keys() | dict2.keys())}
Create variables in Python to store the number of cats and dogs in a household.,"num_cats = 0
num_dogs = 0"
Write a python code to create a dictionary that has the first 10 prime numbers as the keys and their squares as the values.,"primes_dict = {}
for i in range(2, 11):
    is_prime = True
    for j in range(2, i):
        if i % j == 0: 
            is_prime = False 
            break
    if is_prime:
        primes_dict[i] = i**2

print (primes_dict)"
Write a Python script to print the frequency of all unique words in a given string.,"words = ""Hello world, hello programmer"".split()

word_freq = {}
for word in words:
    if word not in word_freq:
        word_freq[word] = 1 
    else:
        word_freq[word] += 1

for key, value in word_freq.items():
    print(f""{key} : {value}"")"
Write a Python script to find the GCD of two numbers.,"def findGCD(a, b): 
   if (b == 0): 
       return a
   return findGCD(b, a % b)
    
a = 1000
b = 500
print(""GCD of number is: "", findGCD(a, b))"
"Create an array of numbers using python, only using the number 0","# Create an array of 10 zeros
arr = [0 for i in range(10)]

# Create an array of 20 zeros
arr = [0 for i in range(20)]

# Create a 3x3 array of zeros
arr = [[0 for i in range(3)] for j in range(3)]

# Create a 5x5 array of zeros
arr = [[0 for i in range(5)] for j in range(5)]"
Can you build an algorithm using Python which shuffles the elements of a list?,"import random
 
def shuffle(list_data):
  # Loop through the indices of the list
  for i in range(len(list_data)-1, 0, -1):
    # Generate a random index
    random_index = random.randint(0, i)
    # Swap the elements
    temp = list_data[i]
    list_data[i] = list_data[random_index]
    list_data[random_index] = temp
 
  # Return the shuffled list
  return list_data"
"In Python, generate a list of numbers from 0 to 30 with a step size of 5.","my_list = list(range(0, 30, 5))
print(my_list)"
Calculate the sum of a given list of integers in Python.,"def sum_list(my_list):
  total = 0
  for num in my_list:
    total += num
  return total

print(sum_list([7, 15, 23, 5, 9]))"
Create a function in Python that will convert a given string of text into its equivalent URL-safe slug format.,"def url_slug(text):
 '''Takes text and converts it to url-safe slug format.
 
 Args:
 text (str): Text to be converted to slug
 
 Returns:
 str: slugified text
 '''
 
 text = text.lower()
 text = re.sub(r'\s+', '-', text)
 text = re.sub(r'[^\w-]', '', text)
 return text"
"Finish a Python program to select all employees with a salary greater than 10,000.","SELECT *
FROM employees
WHERE salary > 10000"
Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.,"def bin_coff(n, r): 
	val = 1
	if (r > (n - r)): 
		r = (n - r) 
	for i in range(0, r): 
		val *= (n - i) 
		val //= (i + 1) 
	return val 
def find_ways(M): 
	n = M // 2
	a = bin_coff(2 * n, n) 
	b = a // (n + 1) 
	return (b) "
Improve the following code in Python to find the product of two given numbers without using the multiply operator.,"def multiply(x, y):
    result = 0
    for i in range(y):
        result += x
    return result

def power(x, y):
    result = 1
    for i in range(y):
        result *= x
    return result"
Generate a Python script to convert a text to title case format.,"def title_case(string):
    convert_string = string.split("" "")
    title_string = """"
    for each_word in convert_string: 
        first_letter = each_word[0].upper()
        other_letters = each_word[1:].lower()
        title_string += first_letter + other_letters + "" ""
    return title_string"
Update the existing code in the following Python program to generate a list of prime numbers in a given range.,"def generate_prime_numbers(start, end):
    for i in range(start, end + 1):
        is_prime = True
        # check for all numbers from 2 to (i - 1)
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            print(i, end="" "")"
Suggest improvements to the following Python code.,"def get_fibonacci_series(n):
	# Initialize empty list for Fibonacci series 
	series = []
	a = 0
	b = 1
	# Iterate till number of terms required 
	for i in range(n):
		series.append(a)
		c = a + b 
		a = b 
		b = c 
	return series"
"Create a Python class called ""Friend"" with fields ""name"", ""age"" and ""hobbies"".","class Friend:
 
  def __init__(self, name, age, hobbies):
    self.name = name
    self.age = age
    self.hobbies = hobbies
    
  def getName(self):
    return self.name
    
  def getAge(self):
    return self.age
    
  def getHobbies(self):
    return self.hobbies"
Generate a python program that takes an integer and then prints out the factorial of it?,"def factorial(num):
    if num <= 1:
        return 1
    else:
        return num * factorial(num - 1) 

n = int(input(""Enter a number: ""))  
print(""Factorial of"",n,""is"",factorial(n))"
Write a Python program to generate a list of squares of values from 1 to a given input number.,"def generate_squares(n):
    res = []
    for i in range(1, n+1):
        res.append(i**2)
    return res

res = generate_squares(n)"
Create a python program to classify the type of a triangle based on the side lengths.,"def get_triangle_type(a, b, c):
    if a == b and b == c:
        return ""Equilateral""
    elif a == b or b == c or c == a:
        return ""Isosceles""
    else:
        return ""Scalene"""
Create an algorithm in Python to find the maximum number in a list,"def find_max(list):
    max_num = list[0]
    for num in list:
        if num > max_num:
            max_num = num
    return max_num

max_number = find_max(list)
print(max_number)"
"Generate a random password in Python with length 10, containing both lowercase and uppercase characters.","import string
import random

def generatePassword():
    # Generate list of lowercase and uppercase letters
    letters = string.ascii_letters
    # Generate a random string with length 10 
    password = ''.join(random.choice(letters) for i in range(10)) 
    return password

print(generatePassword())"
Create an object-oriented Python program to convert temperatures from Celsius to Fahrenheit and vice-versa.,"class Temperature:
 def __init__(self, value):
 self.value = value

def to_fahrenheit(self):
 return (self.value * 9/5) + 32

def to_celsius(self):
 return (self.value - 32) * 5/9

temp = Temperature(212)
print(temp.to_celsius())
print(temp.to_fahrenheit())"
"Given a list of student records consisting of student name, roll number, and marks, write a Python program to sort the records based on marks in descending order.","def sort_by_marks(records):
    # Sort the records list according to the marks 
    sorted_records =sorted(records, key = lambda x: x[2], reverse=True)

    # Return the sorted list
    return sorted_records"
How would you create a class in Python to store and process data in a Car object?,"class Car:
    def __init__(self, make, model, color, mileage):
        self.make = make
        self.model = model
        self.color = color
        self.mileage = mileage

    def accelerate(self, speed):
        self.speed = speed

    def decelerate(self, speed):
        self.speed = speed"
Can you convert a given dictionary into a string using Python?,"dictionary_string = str({""foo"": ""bar"", ""hello"": ""world""})"
Write a function to find all possible combinations of the elements of a given list.,"def combinations_list(list1):
    if len(list1) == 0:
        return [[]]
    result = []
    for el in combinations_list(list1[1:]):
        result += [el, el+[list1[0]]]
    return result"
Create an algorithm in Python that reads and stores the following data into a dictionary.,"input_data = ""John,31;Alice,27;Bob,40""
data_dict = {}

temp = input_data.split("";"") 
for i in temp: 
    data = i.split("","") 
    data_dict[data[0]] = data[1] 

print(data_dict)"
Implement a function for making web requests in Python.,"import requests

def make_web_request(url):
    '''This function makes an HTTP request to the given URL and returns the response.'''
    response = requests.get(url)
    return response.text"
"Given a 2D array in Python, write a code to calculate the sum of all elements.","total = 0
for row in arr: 
    for num in row: 
        total += num 
print(total) # 45"
Develop a program in Python to remove all the punctuation from an English sentence.,"def remove_punctuation(sentence):
    punctuations = '''!()-[]{};:'""\,<>./?@#$%^&*_~'''
    clean_sentence = """" 
    for letter in sentence: 
        if letter not in punctuations: 
            clean_sentence += letter 
    return clean_sentence

sentence = ""This is an example sentence!""
print(remove_punctuation(sentence))"
Write a function to remove multiple spaces in a string.,"import re
def remove_spaces(text):
 return (re.sub(' +',' ',text))"
Debug the given python program to output b2 instead of a3.,"a1 = 6
a2 = 3
b1 = a1 // a2
b2 = a1 % a2"
"In Python, write a program to find the average of all the even numbers in a given list.","def average_even(list):
    even_list = []
    for i in list:
        if i % 2 == 0:
            even_list.append(i)
    return sum(even_list)/len(even_list)"
Edit a given Python program to use regex to extract the phone numbers from the text.,"import re

txt = ""My number is 666-111-1111 and my office number is 888-666-1234.""

phone_numbers = re.findall(r'\d{3}-\d{3}-\d{4}', txt)
print(phone_numbers) # output: ['666-111-1111', '888-666-1234']"
Write a python function to find the minimum length of sublist.,"def Find_Min_Length(lst):  
    minLength = min(len(x) for x in lst )
    return minLength "
Create a Python program to find all numbers in a given list that are evenly divisible by 4.,"def find_divisible_by_4(num_list):
    result_list = []
    
    for i in num_list:
        if i % 4 == 0:
            result_list.append(i)
            
    return result_list
 
print(find_divisible_by_4([1, 8, 10, 15, 20, 25]))"
Create an endpoint for a Python Flask application which returns JSON data for HTTP GET requests.,"@app.route('/data', methods=['GET'])
def get_data():
 data = {
 'key1': 'value1',
 'key2': 'value2',
 'key3': 'value3'
 }
 return jsonify(data)"
Write a Python program to convert a list into a dictionary.,"input_list = [1, 2, 3, 4]
output_dict = {}

for item in input_list:
  output_dict[item] = None

print(output_dict)"
Write a python program to parse a given XML document.,"import xml.etree.ElementTree as ET

def parse_xml(xml_doc):
  # Parse the XML document
  tree = ET.parse(xml_doc)
  # Get the root element
  root = tree.getroot()
  # Iterate through children
  for child in root:
    print(child.tag, child.attrib)

# Function call 
parse_xml(""sample.xml"")"
Create a Python script to check whether a given number is an even number or an odd number.,"def is_even(n):
 if n % 2 == 0:
 return True
 else:
 return False"
Create a class to represent a stack data structure in Python.,"class Stack:

    def __init__(self):
        self.items = []

    def push(self, item):
        self.items.append(item)

    def pop(self):
        return self.items.pop()

    def is_empty(self):
        return self.items == []"
Use the NumPy library to generate a 3x3 identity matrix in Python.,"import numpy as np

identity_matrix = np.identity(3)
print(identity_matrix)"
Write a Python program to extract all the text from a web page.,"import requests
from bs4 import BeautifulSoup

url = 'http://www.example.com'
res = requests.get(url)
soup = BeautifulSoup(res.text, 'lxml')
text = soup.get_text()
print(text)"
Construct a for loop in Python for printing the odd numbers from 1 to 10 (inclusively).,"for i in range(1, 11):
    if i % 2 != 0:
        print(i)"
Develop a function to search for a character into a given string and return its index if present.,"#function to search for a character
def search_char(str, char):
	idx = -1
	for i in range(len(str)):
		if str[i] == char:
			idx = i
			break
	return idx
    
#call the function
str = 'Python'
char = 'y'

index = search_char(str, char)
#print the result
if index != -1:
	print('Character found at index:', index)
else:
	print('Character not found')"
Create a Python script to search a list of words for a given word and return its index.,"def search(words, search):
    for i, word in enumerate(words):
        if word == search:
            return i
    return -1

index = search(words, 'language')
print(index)"
Generate Python code to search through a given list of integers and return the closest match to the given number.,"def closest_match(numbers, search_term):
    closest_match = None
    min_diff = float('inf')
    
    for number in numbers:
        diff = abs(number - search_term)
        if diff < min_diff:
            min_diff = diff
            closest_match = number
    
    return closest_match"
Print the Fibonacci sequence up to a given number in Python.,"# Declare a function
def Fibonacci(num):
    a = 0
    b = 1
    
    # Iterate
    for i in range(num):
        print(a, end="" "")
        c = a + b
        a = b
        b = c
    print()
    
# Print the sequence
Fibonacci(10)"
Generate a Python 3 program to find out the highest common factor of two numbers.,"def find_hcf(x, y): 
  
    if x > y: 
        smaller = y 
    else: 
        smaller = x 
    for i in range(1,smaller + 1): 
        if((x % i == 0) and (y % i == 0)): 
            hcf = i 
              
    return hcf 
      
x = 60
y = 80

hcf = find_hcf(x, y) 
print(""The Highest Common Factor of"", x,""and"", y,""is"", hcf)"
Write a python function to check whether the triangle is valid or not if sides are given.,"def check_Validity(a,b,c):  
    if (a + b <= c) or (a + c <= b) or (b + c <= a) : 
        return False
    else: 
        return True        "
Create an algorithm in Python to generate an array of 20 random numbers between 1 and 100.,"import random

def generate_array():
  my_array = []
  for i in range(20):
    my_array.append(random.randint(1,100))
  return my_array"
Write a function in Python to check if a given array of numbers is in ascending order.,"def isSorted(arr):
    for i in range(len(arr) - 1):
        if arr[i] > arr[i+1]:
            return False
    return True

print(isSorted([3, 5, 7, 9, 16, 19]))"
Modify the existing Python program to add an exception clause.,"def calculate_square(x):
    try:
        return x * x
    except TypeError:
        print(""The argument must be a number"")
    except ValueError:
        print(""The argument cannot be a negative number"")
        
calculate_square(10)"
Write a function to find the index of the first occurrence of a given number in a sorted array.,"def find_first_occurrence(A, x):
    (left, right) = (0, len(A) - 1)
    result = -1
    while left <= right:
        mid = (left + right) // 2
        if x == A[mid]:
            result = mid
            right = mid - 1
        elif x < A[mid]:
            right = mid - 1
        else:
            left = mid + 1
    return result"
Design an algorithm in Python that checks if a given number is even or odd.,"def is_even(n):
   if n % 2 == 0:
    return True
   else:
    return False"
Improve the execution time of a given Python program.,"def factorial(n):
    ans = 1
    while(n > 1):
        ans *= n
        n -= 1
    return ans

num = 4
print(factorial(num))"
Write a Python code to find the factorial of a given number without using inbuilt functions like factorial().,"def factorial(num): 
    if num == 0: 
        return 1 
  
    return num * factorial(num - 1) 
  
num = 6
print(""Factorial of"", num, ""is"", factorial(num))"
Create a Python program to reverse the character order in a given string.,"def reverse_string(s):
 reversed_string = ''.join(reversed(s))
 return reversed_string

string = 'Hello World!'
reversed_string = reverse_string(string)
print(reversed_string)"
Develop a Python program to generate a random string of length 10.,"import string
import random

def random_string(stringLength=10):
    letters = string.ascii_lowercase
    return ''.join(random.choice(letters) for i in range(stringLength))

print(random_string())"
"Create a stack program in python that can perform the push, pop and size operations.","class Stack(object):

    def __init__(self):
        self.items = []

    def push(self, item):
        self.items.append(item)

    def pop(self):
        return self.items.pop()

    def size(self):
        return len(self.items)

# testing
stack = Stack()
stack.push(1)
stack.push(5)

print(stack.pop()) # 5
print(stack.size()) # 1"
Create a Python program that will parse a website and get all the links on the page.,"import requests
from bs4 import BeautifulSoup

URL = 'http://example.com/'

# get the webpage
page = requests.get(URL)

# parse the webpage
soup = BeautifulSoup(page.content, 'html.parser')

# get all links
links = soup.find_all('a')
for link in links:
 print(link.get('href'))"
Generate a random password of 10 characters using Python.,"import string 
import random 
  
def random_password(): 
    letters_and_digits = string.ascii_letters + string.digits 
    password = ''.join(random.choice(letters_and_digits) for i in range(10))
  
    return password 
  
password = random_password() 
print(""Random Password: "",password)"
Write a Python function to compare two lists and return the elements that are not common in both lists.,"def get_unique_elements(list1, list2):
 return list(set(list1) - set(list2))"
Create code that generates the following output using looping concepts in Python.,"for x in range(1, 10):
    for y in range(1, 10):
        print('{} x {} = {}'.format(x, y, x*y))"
"Write a Python program to represent the following data structure:

{
 'Fruits':[
  'Apple',
  'Banana',
  'Orange'
 ],
 'Vegetables':[
  'Carrot',
  'Cucumber',
  'Potato'
 ]
}","data = {
 'Fruits':[
  'Apple',
  'Banana',
  'Orange'
 ], 
 'Vegetables':[
  'Carrot',
  'Cucumber',
  'Potato'
 ]
}
 
print(data)"
"Given a binary tree, you need to write a Python program to print out all the nodes at each level.","def print_level_order(root):
    if root is None:
        return

    queue = []

    queue.append(root)
    while(len(queue) > 0):
        print(queue[0].data, end="" "")
        node = queue.pop(0)

        if node.left is not None:
            queue.append(node.left)

        if node.right is not None:
            queue.append(node.right)"
Generate a Python statement to select unique values from a list.,"result = set(seq)
print(result)"
"Using basic Python, create a Fibonacci sequence.","def get_fibonacci_sequence(n):
    series = [0,1]
    while len(series) < n:
        series.append(sum(series[-2:]))
    return series

print(get_fibonacci_sequence(10))"
Generate a function in Python to delete a key from a dictionary.,"def delete_key(dictionary, key): 
    if key in dictionary: 
        del dictionary[key] 
    else: 
        print('Error! Key not found') 

delete_key(dictionary, key) 
print(dictionary)"
Write a Python program to convert a list of numeric values into an array of even numbered values.,even_arr = [x for x in arr if x % 2 == 0]
Write a function to create a JSON object from a given Python list.,"import json

def list_to_json(data):
    return json.dumps(data)"
"Given a list of names, write a program in Python to create a new list with the first letter in each name capitalized.","def capitalized_list(names):
    new_list = []
    for name in names:
        new_list.append(name.capitalize())
    
    return new_list

print(capitalized_list(names))

# Output
['Kevin', 'David', 'James', 'George']"
Develop a greedy algorithm in Python to complete a given optimization task.,"def greedy_solution(arr):
    arr.sort()
    cur_max = arr[0]
    result = [cur_max]
    for i in range(1, len(arr)):
        if arr[i] > cur_max + 1:
            cur_max = arr[i]
            result.append(cur_max)
    return result"
"Using the NumPy library, create a Python program to generate a 3X3 array of random integers ranging from 1 to 5.","import numpy as np 

a = np.random.randint(1, 6, size=(3,3)) 
print(a)"
Generate a script in python to split a given string into words and store them in a list.,"def split_str(str):
    words = str.split("" "")
    return words"
Create a class in Python with a method to sort the given array in an ascending order.,"class Sort: 
    def sort_arr(self, arr):
        arr.sort()
        return arr"
Create a loop in Python that prints numbers 1 to 10.,"for i in range(1, 11):
    print(i)"
Generate a Python script to sort an array of strings in case-insensitive order.,"def sort_strings(arr):
    arr_lower = [element.lower() for element in arr]
    sorted_lower = sorted(arr_lower)

    sorted_arr = [arr[arr_lower.index(element)] for element in sorted_lower]

    return sorted_arr

arr = [""Apple"", ""banana"", ""APple""]
sorted_arr = sort_strings(arr)
print(sorted_arr) # prints [""APple"", ""Apple"", ""banana""]"
Create a Python function to parse an HTML to extract all links from the content.,"from BeautifulSoup import BeautifulSoup

def parseHtml(html):
    soup = BeautifulSoup(html)
    links = []
    for link in soup.findAll('a'):
        links.append(link.get('href'))
    return links"
Create a sorting algorithm in Python to organize a given array of numbers.,"def bubbleSort(nums): 
    for i in range(len(nums)-1): 
        for j in range(0, len(nums)-i-1): 
            if nums[j] > nums[j+1] : 
                nums[j], nums[j+1] = nums[j+1], nums[j] 
    return nums
  
arr = [3, 5, 4, 1, 6]
print (bubbleSort(arr))"
"Write a Python program to query all 10,000 rows in the provided SQL table.","import sqlite3

# connect to SQL database
db = sqlite3.connect('example.db')

# create cursor
cur = db.cursor()

# execute query
cur.execute('SELECT * FROM ""example""')

# fetch all rows
rows = cur.fetchall()

# display all rows
for row in rows:
    print row"
Write a function to find the ascii value of a character.,"def ascii_value(k):
  ch=k
  return ord(ch)"
"Write a Python script that processes the list of words, and changes the case of the characters to capital letters.","def capitalize_strings(words):
    capital_words = []
    for word in words:
        capital_words.append(word.upper())
    
    return capital_words

capitalized_words = capitalize_strings(words)
print(capitalized_words)"
Create a Python script that takes a dictionary as an argument and prints the value of each key-value pair.,"def print_dict(dct):
    for key, value in dct.items():
        print('Key:', key, ', Value:', value)

example_dict = { 'a' : 1, 'b' : 2, 'c' : 3 }
print_dict(example_dict)"
Generate an algorithm in Python that finds the number of times an element is present in an array.,"def countOccurrences(arr, x): 
  
    count = 0
    for i in range(len(arr)): 
        if (x == arr[i]): 
            count = count + 1
  
    return count 
  
arr = [4, 5, 2, 4, 2]
x = 2
print(countOccurrences(arr, x))"
Edit the following object-oriented Python code to use inheritance.,"class A:
    def __init__(self, x):
        self.x = x
    
    def get_x(self):
        return self.x

class B(A):
    def modify_x(self, x):
        A.modify_x(self, x)
        self.x += 1"
Write a Python program to generate all possible strings by rearranging the characters of a given string.,"def generate_all_strings(string):
   if len(string) == 1: 
       return [string]
    result = []
    for i, letter in enumerate(string):
        for permutation in generate_all_strings(string[:i] + string[i+1:]):
            result += [letter + permutation]
    return result"
Write a Python program to compute the integral of a given function using the trapezoidal rule.,"def trapezoidal_rule(f, a, b, n):
 # calculate h
 h = (b-a)/n
 # initialize output
 result = 0.0
 # calculate last term
 result += 0.5*f(a) + 0.5*f(b)
 # calculate intermediate terms
 for i in range(1,n):
 result += f(a + i*h)
 # multiply by step size
 result *= h
 return result"
Design a linear search algorithm in Python that returns the index of an item in an array.,"def linear_search(arr, target):
    """"""
    Searches through a given input array to find the index of a provided target number.
    Returns -1 if the target number is not found.
    """"""
    for i in range(len(arr)):
        if arr[i] == target:
            return i
    return -1"
Implement a binary search algorithm in Python.,"def binary_search(array, target):
    left = 0
    right = len(array) - 1

    while left <= right:
        middle = (left + right) // 2
        if array[middle] == target:
            return middle
        elif array[middle] < target:
            left = middle + 1
        else:
            right = middle - 1

    return -1"
Write a Python program to generate a random password string containing letters and digits.,"import random
import string 

def generate_password(length): 
    password_characters = string.ascii_letters + string.digits
    return ''.join(random.choice(password_characters) for i in range(length))

password = generate_password(8)
print(""Password is:"", password)"
Create a class in Python with a constructor that initializes 3 variables and a method that prints the values of these variables.,"class Example:
    def __init__(self, a, b, c):
        self.a = a
        self.b = b
        self.c = c
    
    def print_values(self):
        print(self.a, self.b, self.c)

example = Example(10, 20, 30)
example.print_values()"
Create a Python program to classify a set of numbers into odd and even.,"def classify_odd_even(input_list):
    odd_nums = []
    even_nums = []
    for item in input_list:
        if item % 2 == 0:
            even_nums.append(item)
        else:
            odd_nums.append(item)

    return odd_nums, even_nums

input_list = [1, 2, 3, 4, 5]
odd_nums, even_nums = classify_odd_even(input_list)
print(""Odd Numbers: "", odd_nums)
print(""Even Numbers: "", even_nums)"
Generate a Python script that takes a list of integers and prints out the sum of their squares.,"data = [1, 2, 3] 
sum = 0 

for number in data: 
 sum += number ** 2 

print(f""The sum of the squares of the given numbers is {sum}."")"
Design a function in Python to generate a Fibonacci sequence.,"def Fibonacci(n): 
	if n<0: 
		print(""Incorrect input"") 
	# First Fibonacci number is 0 
	elif n==1: 
		return 0
	# Second Fibonacci number is 1 
	elif n==2: 
		return 1
	else: 
		return Fibonacci(n-1)+Fibonacci(n-2) 

# Driver Program 

print(Fibonacci(9))"
Design a Python code snippet that deletes all duplicates in a given list of numbers.,"def deleteDuplicates(list): 
    final_list = [] 
    for num in list: 
        if num not in final_list: 
            final_list.append(num) 
    return final_list"
Can you write a function in Python that takes in a 2-dimensional array of integers and returns the lowest element in the array?,"def find_min(matrix): 
    result = float('inf') 
    for row in matrix: 
        result = min(result, min(row))
    return result 

matrix = [[3, 4, 5], [2, 7, 8], [12, 1, 9]]
print(find_min(matrix)) # Output: 1"
Optimize a function in Python which takes a list and returns the sum of all its elements.,"def sum_list_elements(lst):
    sum = 0
    for item in lst:
        sum += item
    return sum

print(sum_list_elements([1, 2, 3]))"
Create a Python program to read an array of integers and calculate their sum.,"def calculate_sum(arr):
  sum = 0

  for i in arr:
    sum += i

  return sum

input_array = [1, 3, 5, 7]

result = calculate_sum(input_array)

print(result) # prints 16"
Generate a valid Python code that will create an empty dictionary,my_dict = {}
Create a function in Python for converting currencies from one type to another.,"def convert_currencies(currency_from, currency_to, exchange_rate):
 return currency_fit * exchange_rate 

c = convert_currencies('USD', 'EUR', 0.9)
print(c) # Output: 0.9"
Write a Python program to create a 3x3x3 array (3D array) filled with zeros.,"import numpy as np
arr = np.zeros((3, 3, 3))
print(arr)"
Optimize an existing Python program to reduce its running time.,"def find_sum(n): 
   return n * (n + 1) // 2
  
print(find_sum(10))"
Come up with a Python program to generate a Fibonacci sequence till n steps,"def fibonacci(n):
    numbers = []
    a = 0
    b = 1

    while len(numbers) <= n:
        c = a + b
        numbers.append(c)
        a = b
        b = c
    
    return numbers

if __name__ == '__main__':
    print(fibonacci(8))"
Create a script in Python to generate the nth term of the Fibonacci series.,"def Fibonacci(n):
 a = 0
 b = 1
 if n < 0:
  print(""Incorrect input"")
 elif n == 0:
  return a
 elif n == 1:
  return b
 else:
  for i in range(2,n):
   c = a + b
   a = b
   b = c
  return b

print(Fibonacci(5))"
Generate a Python algorithm to generate the following pattern,"for i in range(4):
    for j in range(4):
        print(""*"", end="" "")
    print()"
Construct a Python function that takes in three strings as parameters and returns a list containing sorted versions of the strings.,"def sort_strings(s1, s2, s3):
    return sorted([s1, s2, s3])

result = sort_strings('apples', 'oranges', 'peaches')
print(result)"
Write a python program to detect the occurrence of a given string in another large string.,"def str_find(str1, str2):
    return str1.find(str2) != -1

str_find(""This is a test."", ""test"")"
Generate a correct python program that reverses a string,"def reverse_string(string):
    reversed_string = """"
    for char in string:
        reversed_string = char + reversed_string
    return reversed_string"
"Generate code for a Python class called Basket, which should inherit from a List class and have the following methods: add_item(), remove_item(), and get_total().","class Basket(list):
 
 def __init__(self):
  super().__init__()
 
 def add_item(self, item):
  self.append(item)
 
 def remove_item(self, item):
  self.remove(item)
 
 def get_total(self):
  total = 0
  for item in self:
   total += item.price
  return total"
Identify the type of object a Python expression will evaluate to.,Integer.
Write a function to find the ration of zeroes in an array of integers.,"from array import array
def zero_count(nums):
    n = len(nums)
    n1 = 0
    for x in nums:
        if x == 0:
            n1 += 1
        else:
          None
    return round(n1/n,2)"
Create a Python program to convert a Celsius temperature to Fahrenheit,"def celsius_to_fahrenheit(celsius):
	fahrenheit = celsius * 9/5 + 32
	return fahrenheit"
Write an algorithm in Python to perform a linear search.,"def linear_search(arr, key):
    for index, element in enumerate(arr):
        if element == key:
            return index
    return -1

print(linear_search(arr, key))"
Write an algorithm in Python to determine if a number is an Armstrong number or not.,"def armstrong_number(num):
  digits = [int(x) for x in str(num)]
  n_digits = len(digits)
  sum_of_cubes = 0
  for digit in digits:
    sum_of_cubes += digit ** n_digits
  if sum_of_cubes == num:
    return True
  else:
    return False

armstrong_number(370)"
Design a Python script to rank a set of given numbers.,"def rank(nums): 
    sortedNums = sorted(nums, reverse = True) 
    for i in range(len(sortedNums)): 
        if sortedNums[i] == nums[i]: 
            print (i + 1, end = "" "") 
  
# Driver code 
nums = [3, 8, 2, 9, 5] 
rank(nums)"
Compute the greatest common divisor of two numbers with Python.,"def gcd(a, b): 
    if (a == 0): 
        return b 
    return gcd(b % a, a) 
  
print (""GCD("", a, "","", b, "") = "", gcd(a, b))"
Create a Python function to remove all the characters of a specified string that appear more than once.,"def remove_duplicates(string):
    result = """"
    for char in string:
        if string.count(char) == 1:
            result += char
    return result"
Create a basic chatbot in Python to respond to user queries,"import re

def chatbot_response(user_input):
    user_input = user_input.lower()
    
    # Check for Greeting
    if re.search(""hello|hi|sup"", user_input):
        return ""Hey there!""
    elif re.search(""bye"", user_input):
        return ""Goodbye""
    elif re.search(""what's your name"", user_input):
        return ""My name is ChatBot""
    else:
        return ""I don't understand"""
Create a Python program which calculates the mean of a dataset,"def dataset_mean(data):
    return sum(data)/len(data)"
Write a function in Python that receives two numbers as parameters and returns the larger one,"def larger_num(a, b):
    if a > b:
        return a
    else:
        return b"
Create a virtual environment in Python to manage project dependencies.,"""""""
Create a virtual environment in Python to manage project dependencies
""""""

# Create the virtual environment
python3 -m venv env

# Activate the virtual environment
source env/bin/activate

# Install project requirements
pip install -r requirements.txt"
Write a Python script to print out all the leap years from 2001 to 2025.,"for year in range(2001,2026):
    # leap year condition
    if((year%4 == 0 and year%100 != 0) or year%400 == 0):
        print(year, end=' ')"
Design a command-line interface in Python to accept user input,"import sys

# collect the user's input
user_input = input('Enter your command: ')

# process the user's input and execute the corresponding command
if user_input == 'exit':
    sys.exit()
elif user_input == 'help':
    print('This is a helpful message.')
else:
    print('Command not recognized, try again.')"
Create a Python function that takes two numbers and returns the biggest of them.,"def max_of_two(x, y):
    if x > y:
        return x
    else:
        return y
 
x = 3
y = 6
maximum = max_of_two(x, y)
print('The maximum of', x, 'and', y, 'is', maximum)"
Write a Python program to turn a string into Pig Latin.,"def toPigLatin(s):
   vowels = ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')
   if s[0] in vowels:
      return s + 'way'
   else:
      return s[1:] + s[0] + 'ay'
      
print(toPigLatin(""Hello World""))"
Write a function to find the n-th rectangular number.,"def find_rect_num(n):
  return n*(n + 1) "
Write a Python program to multiply two given lists containing integers of the same size.,"# Create a new list with the elements of both lists 
list1 = [1, 2, 3]
list2 = [4, 5, 6]

# Multipliy each element of 2 lists and store in the 3rd list 
list3 = [] 
for x, y in zip(list1, list2): 
    list3.append(x*y) 

# Print the result 
print(list3)

# Output 
[4, 10, 18]"
Generate a Python dictionary of given word frequencies.,"wordFrequencies = {
 'cat': 2,
 'dog': 5,
 'bird': 3
}"
Write a function to find maximum of two numbers.,"def max_of_two( x, y ):
    if x > y:
        return x
    return y"
Generate a Python program to print a square matrix of size n containing the numbers from 11 to n*n.,"n = 3

output_matrix = [[0 for x in range(n)] for y in range(n)] 
  
num = 1
  
for i in range (0, n):    
 for j in range(0, n):     
 output_matrix[i][j] = num    
 num = num + 1    
  
for i in range(0, n):
 for j in range(0, n):
 print(output_matrix[i][j], end = "" "")
 print("""")"
Create a function in Python to normalize a given set of tokens.,"def normalize_tokens(tokens):
    return [tok.lower() for tok in tokens]"
Write a Python function to calculate factorial using recursion.,"def factorial(n): 
    if n == 0: 
        return 1
    else: 
        return n*factorial(n-1)"
"Given a list of words and a length, write a Python program that returns a list of words with length equal or greater than the given length.","def search_by_length(words, length):
    result = []
    for word in words:
        if len(word) >= length:
            result.append(word)
    return result

words = ['apple', 'toy', 'trees']
length = 5

print(search_by_length(words, length))"
Create an algorithm in Python to calculate the Fibonacci sequence up to a given number.,"def fibonacci(n):
  a, b = 0, 1
  while a < n:
    print(a, end=' ')
    a, b = b, a+b

fibonacci(100)"
Write a Python program that prints out all possible words from a collection of letters.,"import itertools

letters = [""a"", ""b"", ""t""]
words = []

# we use itertool's permutations to generate all combinations of letters
Result = itertools.permutations(letters, 3)

# we iterate through the output of itertool's permutation
# and append it to result list of words
for ele in list(Result):
    words.append(''.join(ele))

# printing the result
print(words)"
Use a for-loop in Python to print the ASCII value of each character in a given string.,"for i in range(len(string)):
    print(ord(string[i]))  # Output: 72, 101, 108, 108, 111"
Edit the following Python code to add exception handling for user input.,"try:
  name = input('What is your name? ')
  print('Hello, ' + name)
except:
  print('There was an error parsing your name.')"
Write a function to check if a nested list is a subset of another nested list.,"def check_subset_list(list1, list2): 
    l1, l2 = list1[0], list2[0] 
    exist = True
    for i in list2: 
        if i not in list1: 
            exist = False
    return exist "
Write a Python program to convert a list of lists into a dictionary where the first element of each list is the key and the rest of the elements are the values.,"dict1 = {}
for lst in [list1, list2]:
 key = lst[0]
 val = lst[1:]
 dict1[key] = val

print(dict1)
# Output: {'apple': ['red', 'green'], 'banana': ['yellow', 'green']}"
Generate a Python program that takes two strings from the user and compares them to indicate if they are equal.,"string1 = input(""Enter a string: "")
string2 = input(""Enter another string: "")

if string1 == string2:
 print(""The strings are equal"")
else:
 print(""The strings are not equal"")"
Write a Python program to convert a query string into a dictionary.,"queryString = ""country=usa&city=ny&lang=en&temp=77""

queryDict = {}

for keyValueString in queryString.split('&'):
 key, value = keyValueString.split('=')
 queryDict[key] = value

print(queryDict)
# Output: {'country': 'usa', 'city': 'ny', 'lang': 'en', 'temp': '77'}"
Write a function to count character frequency of a given string.,"def char_frequency(str1):
    dict = {}
    for n in str1:
        keys = dict.keys()
        if n in keys:
            dict[n] += 1
        else:
            dict[n] = 1
    return dict"
Code a binary search algorithm in Python.,"def binary_search(array, target):
    lower = 0
    upper = len(array)
    while lower < upper:
        x = lower + (upper - lower) // 2
        val = array[x]
        if target == val:
            return x
        elif target > val:
            if lower == x:
                break
            lower = x
        elif target < val:
            upper = x
    return -1"
Develop a Python program that calculates the average of a set of numbers based on user input,"numlist = []
while True:
    user_input = input(""Enter a number: "")
    if user_input == 'done':
        break
    elif user_input == '': 
        continue
    else:
        numlist.append(int(user_input))
print(""Average is: "", sum(numlist) / len(numlist))"
Write a Python program to generate a list of even numbers between two given numbers.,"def generate_list(start, end):
    result = []
    for i in range(start, end+1):
        if i%2 == 0:
            result.append(i)
    return result

print(generate_list(2, 20))"
Create a script in Python that can sort the following list of items alphabetically.,"def sortAlpha(list):
    list.sort()
    return list"
Write an example of a class definition in Python.,"class Employee:
    def __init__(self, name, age):
        self.name = name
        self.age = age
    
    def get_name(self):
        return self.name
    
    def get_age(self):
        return self.age
    
    def set_age(self, age):
        self.age = age"
Create a Python function to optimize a given function towards a minimum,"def optimize_function(function):
    # Perform optimization
    return min_value"
Design a FOR loop algorithm in Python to print all numbers starting from one to the given number.,"for i in range(1, 11): 
    print(i)"
Write a function in Python that takes an integer as a parameter and returns the sum of all its positive divisors,"def sum_of_divisors(n): 
    divisors = [i for i in range(1,n+1) if n%i == 0] 
    return sum(divisors) 
  
n = 24
print(""Sum of the positive divisors of 24 is:"",sum_of_divisors(n))"
Create a quicksort algorithm in Python.,"def quicksort(array):
    if len(array) < 2:
        return array
    else:
        pivot = array[0] 
        less = [i for i in array[1:] if i <= pivot]
        greater = [i for i in array[1:] if i > pivot]
        return quicksort(less) + [pivot] + quicksort(greater)"
Generate a JSON string from a Python dict object.,"import json

json_obj = json.dumps(dict_object)"
Write an algorithm in Python that identifies and removes duplicates from a given array.,"def removeDuplicates(array):
 result = []

 for number in array:
 if number not in result:
 result.append(number)

 return result

array = [2, 3, 4, 3, 2]
print(removeDuplicates(array))"
Develop a Python script for creating a dictionary with all the occurrences of the words in a sentence.,"sentence = ""John and Mary went to the school""
words = sentence.split()
word_dict = {}

for word in words:
    if word in word_dict:
        word_dict[word] += 1
    else:
        word_dict[word] = 1

print(word_dict)"
Write a Python program to do data classification.,"from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier

def classify_data(dataset):
    X, y = dataset.data, dataset.target
    X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)

    knn = KNeighborsClassifier(n_neighbors=3)
    knn.fit(X_train, y_train)
    print(""Accuracy of K-NN: {}"".format(knn.score(X_test, y_test)))"
Find the largest number in an array using Python.,"arr = [1, 10, 5, 6, 9, 8, 20]

def largest_number(arr):
  largest = arr[0]
  for num in arr:
    if num > largest:
      largest = num

  return largest

largest = largest_number(arr)
print(largest) # 20"
"Create a Python program to determine if a given string is a palindrome and if so, print it.","# Function to check if a string is a palindrome
def isPalindrome(s):
 # Reverse the string
 rev_s = s[::-1]

 # Check if the string is the same as its reverse
 if (s == rev_s):
 return True
 return False

# Driver code
s = 'racecar'

# Check if the given word is a palindrome
if (isPalindrome(s)):
 print(s)"
Convert the following pseudo code into a Python Program.,"n = int(input(""Enter a number: ""))
if n%2 == 0:
    print(""Even"")
else:
    print(""Odd"")"
Debug the following Python code,"# define f1 #
def f1(x):
    return x + 1

# define f2 #
def f2(x):
    return f1(x) * f1(x)

# call f2 #
print(f2(2)) #Output: 9"
Write a Python program to generate all the prime numbers between two given numbers.,"def prime_num_generator(start, end):
    prime_list = [] 
    for num in range(start, end + 1):
        if num > 1:
            for i in range(2, num):
                if (num % i) == 0:
                    break
            else:
                prime_list.append(num)
    return prime_list"
Generate a python code to calculate the sum of two numbers given.,"def calculate_sum(a, b):
    """"""Calculate the sum of two numbers given.
    
    Parameters
    ----------
    a : int
        The first argument.
    b : int
        The second argument.
        
    Returns
    -------
    int
        The sum of the two numbers given.
    """"""
    sum = a + b
    return sum"
Create a Python script to find the maximum and minimum numbers from a list.,"maxnum = max(list1)
minnum = min(list1)
print(""Maximum number is:"", maxnum) 
print(""Minimum number is:"", minnum) 
#prints Maximum number is: 7   Minimum number is: 2"
Create a method in Python that accepts two strings and returns a boolean if the two strings are anagrams.,"def is_anagram(string1, string2):
    return (sorted(string1) == sorted(string2))

print(is_anagram(""listen"", ""silent"")) # prints True"
Create a function in Python for calculating the surface area of a cube.,"def cube_area(side):
 return 6 * (side ** 2)"
Generate a Python program for merging two sorted lists.,"def merge_sorted_lists(l1, l2):
        l3 = l1 + l2
        l3.sort()
        return l3
    
l1 = [1, 2, 5] 
l2 = [3, 4, 6]

result = merge_sorted_lists(l1, l2)
print(result)"
Define a Python class called Appointment that creates appointment objects.,"class Appointment():
     
    def __init__(self, date, time, reason):
        self.date = date
        self.time = time
        self.reason = reason
    
    def get_details(self):
        return f"" The appointment is on {self.date}, at {self.time}, for {self.reason}."""
Create a method in Python to search through a list and return all elements which are divisible by 5.,"def find_division_by_5(lst):
    """"""Search through a list and return all elements which are divisible by 5""""""
    result = []
    for item in lst:
        if item % 5 == 0:
            result.append(item)
    
    return result
    
if __name__ == '__main__':
    lst = [4, 9, 5, 20, 21, 33]
    print(find_division_by_5(lst))"
Write a function to find minimum number of coins that make a given value.,"import sys 
def min_coins(coins, m, V): 
    if (V == 0): 
        return 0
    res = sys.maxsize 
    for i in range(0, m): 
        if (coins[i] <= V): 
            sub_res = min_coins(coins, m, V-coins[i]) 
            if (sub_res != sys.maxsize and sub_res + 1 < res): 
                res = sub_res + 1  
    return res "
"Create a Python script to print the numbers from 1 to 50, but for multiples of 3 print ""Fizz"" instead of the number, for multiples of 5 print ""Buzz"" instead of the number and for multiples of both 3 and 5 print ""FizzBuzz"".","for i in range(1, 51):
    if i % 3 == 0 and i % 5 == 0:
        print(""FizzBuzz"")
    elif i % 3 == 0:
        print(""Fizz"")
    elif i % 5 == 0:
        print(""Buzz"")
    else:
        print(i)"
Generate a Python function that takes a dataframe and returns a new dataframe with only the columns that start with the letter 'A'.,"def filter_A_columns(df): 
    col_list = [col for col in df.columns if col[0] == 'A']
    return df[col_list]"
Implement a function in Python to print the next n prime numbers.,"def n_prime_numbers(n):
 
    prime_list = []
    num = 2
    while len(prime_list) < n:
        for x in range(2,num):
            if num % x == 0:
                break
        else:
            prime_list.append(num)
        num += 1
    return prime_list

print(n_prime_numbers(10))"
"Generate a Python program to print ‘Hello, world!’ when executed.","print('Hello, world!')"
Write an algorithm in Python to calculate the area of a triangle given by its three points.,"def area(x1,y1,x2,y2,x3,y3): 
    a = (x1 * (y2 - y3) + x2 * (y3 - y1) + 
         x3 * (y1 - y2))/2; 
    return abs(a); 

# Driver Code 
x1,y1 = (4,7)
x2,y2 = (5,6)
x3,y3 = (7,4)

print(area(x1,y1,x2,y2,x3,y3));"
"Write a Python program that parses and prints the value of the ""name"" field in a json string.","import json

data = json.loads(json_string)

print(data['name'])

# Output: John"
Create a Python dictionary structure that stores a warning message for each item in the following list.,"{
 'apple': 'This apple is not fresh.',
 'orange': 'This orange has gone bad.',
 'banana': 'This banana is too ripe.'
}"
Create a logic gate simulation using a Python program,"def or_gate(a, b):
    if a or b == 0:
        return 0
    else:
        return 1"
Write a Python program to insert a given string at the beginning of all items in a list.,"my_list = [""hello"", ""world"", ""python""]
prefix = ""Programming - ""

# Insert the prefix to all items in the list
new_list = [prefix + item for item in my_list]

print(new_list)"
Create a Python program to generate a list of random numbers.,"import random

def generate_random_numbers(length, min, max):
  result = []
  for _ in range(length):
    result.append(round(random.uniform(min, max), 1))
  return result

print(generate_random_numbers(5, 2, 10)) # [2.6, 6.2, 2.5, 8.5, 8.1]"
"Using the turtle library in Python, create a geometric shape.","import turtle

t = turtle.Turtle();
t.speed(2);

t.right(72);
t.fd(100);
t.left(144);
t.fd(100);
t.left(144);
t.fd(100);
t.left(144);
t.fd(100);
t.left(144);
t.fd(100);

t.done();"
Debug this Python code.,"def calculate_sum(numbers):
      sum = 0
      for num in numbers: # the colon is missing
         sum += num
      return sum"
"Create a Python script to make an API request to an online store's API. The script should query for all available products, and print a summary of the results.","import requests
 
# Make an API request
url = 'https://example.com/api/products'
data = requests.get(url).json()
 
# Show results
print('Available Products')
for item in data['products']:
    print(f'{item[""name""]} - {item[""price""]}')"
Create a python program to pre-order traverse a given binary tree.,"def preOrderTraverse(tree):
    if tree is None:
        return
    
    print(tree.data)
    preOrderTraverse(tree.left)
    preOrderTraverse(tree.right)"
Design a function in Python to classify an input into positive or negative.,"def classify_number(number):
    if number > 0:
        return 'positive'
    else:
        return 'negative' 

result = classify_number(number)
print(result)"
"Use Python to build a random number generator in the range [0, 10).","import random
 
x = random.randint(0, 9)
print(x)"
Keep a record of all the URLs visited from a given website in Python.,"def track_urls(url): 
    visited_urls = set() 
    current_url = url 
    while current_url: 
        if current_url not in visited_urls: 
            visited_urls.add(current_url) 
        current_url = get_next_url(current_url) 
    return visited_urls"
Design a python program to create a directory,"import os

def create_dir(path):
    try:
        os.mkdir(path)
    except OSError:
        print(""Creation of the directory %s failed"" % path)
    else:
        print(""Successfully created the directory %s "" % path)"
Design a script in Python to scrape text data from a particular web page.,"from bs4 import BeautifulSoup
import requests

# Get the HTML of the page
html_content = requests.get(url).text

# Create the Soup object
soup = BeautifulSoup(html_content, 'lxml')

# Find the text data
data = soup.find_all('p')

# Print the text data
for element in data:
      print(element.text)"
Extract the 2nd and 3rd element from a given list in Python.,new_list = list[1:3]
Write a function to check whether the entered number is greater than the elements of the given array.,"def check_greater(arr, number):
  arr.sort()
  if number > arr[-1]:
    return ('Yes, the entered number is greater than those in the array')
  else:
    return ('No, entered number is less than those in the array')"
Generate a Python program to implement the following feature: Search a phrase in a given string.,"def search(phrase, string):
  if phrase in string:
     return True 
  else:
     return False 

result = search(""to be or not to be"", ""Whether 'tis nobler in the mind to suffer"")
print(result)"
Write a Python program to read in three numbers and find the smallest of the three.,"a = int(input(""Enter first number: ""))
b = int(input(""Enter second number: ""))
c = int(input(""Enter third number: ""))

minimum = min(a, b, c)

print(""The smallest of the three numbers is"", minimum)"
Write a Python program to calculate the sum of two given numbers. The two supplied numbers will be equal or one will be greater than the other.,"def sum_two_numbers(num1, num2):
 return num1 + num2

print(sum_two_numbers(num1, num2))
# Output: 8"
Write a function to find the median of a trapezium.,"def median_trapezium(base1,base2,height):
 median = 0.5 * (base1+ base2)
 return median"
Design a Python program to sort a given numeric array in increasing order.,"def sort_array(arr):
    for i in range(len(arr)-1):
        for j in range(len(arr)-i-1):
            if arr[j] > arr[j+1]:
                temp = arr[j]
                arr[j] = arr[j+1]
                arr[j+1] = temp
    return arr"
Read the string ‘Hello World’ and identify the lengths of the words using Python,"def word_lengths(string):
    words = string.split(' ')
    lengths = []
    for word in words:
        lengths.append(len(word))
    return lengths 

word_lengths('Hello World') // [5, 5]"
Create a python program to calculate the mean of 3 numbers.,"def calculate_mean(num1, num2, num3):
    mean = (num1 + num2 + num3) / 3
    return mean"
Create a Python program to generate all the permutations of a string using backtracking.,"def permute(s, l, r):
 if l == r:
  print(''.join(s))
 else:
  for i in range(l, r+1):
   s[l], s[i] = s[i], s[l]
   permute(s, l + 1, r)
   s[l], s[i] = s[i], s[l] 

def generate_all_permutations(s):
 n = len(s)
 permute(list(s), 0, n-1)

s = 'ABC'
generate_all_permutations(s)"
Find a bug in the given Python program and fix it.,"def get_times_table(x):
  times_table = []
  for i in range(10):
      times_table.append(x * i)
  return times_table"
Create a machine learning model in Python that predicts the stock price the next day given past 6 days' prices.,"import numpy as np
import pandas as pd
from sklearn.linear_model import LinearRegression

data = pd.read_csv('stock_data.csv') 
X = data.iloc[:, :-1] 
y = data.iloc[:, -1] 

model = LinearRegression() 
model.fit(X, y) 

def predict_price(prices):
 x = np.array(prices).reshape(1, -1)
 return model.predict(x)[0]"
Generate 1000 random numbers between 0 and 1 using Python.,"import random

random_numbers = []
for _ in range(1000):
    random_numbers.append(random.random())

print(random_numbers)"
Create an algorithm and its corresponding code implementation in Python that counts the number of words in a string.,"def word_count(string):
 words = string.split()
 return len(words)

print(word_count(""This is a sentence""))"
Create a Python script which removes specified index from a list.,"def remove_index(my_list, remove_index):
my_list.remove(my_list[remove_index])
return my_list"
Create a program to detect plagiarism using Python.,"import difflib

def detect_plagiarism(text1, text2):
    sequenceMatcher = difflib.SequenceMatcher(None, text1, text2)
    matchPercentage = sequenceMatcher.ratio() * 100
    return matchPercentage

detect_plagiarism(""This is a sample text"", ""This is a sample text."")"
create a function in Python to add 10 to any given number.,"def add_ten(number):
    """"""
    This function takes a number as an argument and adds 10 to it.
    """"""
    return number + 10


if __name__ == '__main__':
    print(add_ten(5)) # Output: 15"
Generate code to implement a pre-order tree traversal in Python.,"def preOrderTraversal(root):
 if root is None:
 return

 print(root.data)
 preOrderTraversal(root.left)
 preOrderTraversal(root.right)"
Suppose you are given a list of strings in Python. Write a function that takes the list of strings as input and prints out the first string that is longer than 10 characters.,"def find_long_string(string_list):
    for string in string_list:
        if len(string) > 10:
            print(string)
            break

string_list = [""cat"", ""doggo"", ""elephant"", ""giraffe""]
find_long_string(string_list)"
Write a python function to find the minimum operations required to make two numbers equal.,"import math   
def min_Operations(A,B):  
    if (A > B): 
        swap(A,B)  
    B = B // math.gcd(A,B);  
    return B - 1"
"Create a Python script that generates a random list of 5 numbers between 1 and 99, each of the numbers must be unique and different.","import random 

# Generate a random list of 5 numbers between 1 and 99
random_list = random.sample(range(1,100), 5) 

# Print the list 
print(random_list)"
Provide a Python program to print out a Pascal triangle,"""""""
A function to print out a Pascal triangle
""""""

def pascal_triangle(n): 
    # Initialize the row
    row = [1]

    # Calculate each successive row 
    y = [0] 
    for x in range(max(n, 0)): 
        print(row)
		# Compute the next row
        row = [sum(i) for i in zip(row + y, y + row)] 
        # Copy the row
        y = row[:] 
		
if __name__ == '__main__':
    n = 5
    pascal_triangle(n)"
Rewrite the following algorithm using Python:,"def star_pattern(n):
    # Outer loop to handle number of rows 
    # n in this case 
    for i in range(0, n): 
      
        # Inner loop to handle number of columns 
        # values changing acc. to outer loop 
        for j in range(0, i+1): 
          
            # Printing stars 
            print(""* "",end="""") 
       
        # Ending line after each row 
        print(""\r"") 
  
# Driver Code 
n = 5
star_pattern(n)"
Create a Python function that returns all the prime numbers between 1 and a given number.,"def get_primes(n):
 primes = []
 for num in range(2, n + 1):
 is_prime = True
 for divisor in range(2, num):
 if num % divisor == 0:
 is_prime = False
 break
 
 if is_prime:
 primes.append(num)
 
 return primes
 
primes = get_primes(25)
print(primes) # prints [2, 3, 5, 7, 11, 13, 17, 19, 23]"
Write a python function to print an array in reverse order,"def print_reverse(arr): 
    for i in range(len(arr)-1, -1, -1): 
        print(arr[i], end="" "")"
Can you generate a random number between 1 and 10 using Python?,"import random

def generate_random_number():
 return random.randint(1, 10)"
"Create a Python class Person, which has the properties first_name, last_name and age.","class Person:
    def __init__(self, first_name, last_name, age):
        self.first_name = first_name
        self.last_name = last_name
        self.age = age

    def full_name(self):
        return self.first_name + "" "" + self.last_name"
"Given a JSON string, write a Python program that prints out the values for each key.","import json

data_string = '{""FirstName"": ""John"", ""LastName"": ""Smith""}'
data = json.loads(data_string)

for key, value in data.items(): 
    print(""{} = {}"".format(key, value))"
Write a python program to flatten a list of lists,"def flatten(lst):
    flattened = []
    for elem in lst:
        if isinstance(elem, list):
            flattened += flatten(elem)
        else:
            flattened.append(elem)
    return flattened

if __name__ == '__main__':
    lst = [[1,2,3], [4,5], [6]]
    print(flatten(lst))"
Write a Python program to create a list consisting of the squares of all the odd numbers between two given numbers m and n.,"def list_odd_squares(m, n):
  squares = []
  for i in range(m, n+1):
    if i % 2 != 0:
      squares.append(i*i)
  return squares"
Write a code in Python to display a sorted array of the numbers in an array that are greater than the given value.,"def sort_greater_numbers(arr, num):
    result = [x for x in arr if  x > num]
    result.sort()
    return result"
Write a Python program for creating email address based on input domain name and username.,"def generate_email_address(username, domain):
  return f""{username}@{domain}""

username = input(""Enter username:"")
domain = input(""Enter domain:"")

email_address = generate_email_address(username, domain)
print(""Generated email address:"", email_address)"
Write a Python program to optimize this linear equation.,"# function to solve equation 
def solve(eqn): 
    x, y = sympy.symbols('x y') 
    return sympy.solve((eqn, ), (x, y)) 
  
# equation
eqn = x + y - 5

# solve equation
result = solve(eqn)
x_sol = result[x]
y_sol = result[y]

print(""x ="", x_sol)
print(""y ="", y_sol)"
Write a short program in Python to print out each word in a given sentence.,"sentence = ""This is a sentence""

for word in sentence.split():
    print(word)"
Write a Python program to convert a list to a tuple,"def list_to_tuple(list):
    return tuple(list)"
Create a Python program that takes two string as input and produces a new string as output. The output string is the concatenation of the two inputs with all the vowels removed.,"def remove_vowels(string1, string2):
  res = ''
  vowels = 'aeiouAEIOU'

  for char in string1 + string2:
    if char not in vowels:
      res += char
  
  return res

print(remove_vowels(string1, string2))"
Create a python program that calculates the maximum of three numbers.,"def max_three(a, b, c):
    m = max(a, b)
    m = max(m, c)
    return m"
Convert the following basic Python code into its equivalent JavaScript code.,"for(let i = 1; i < 5; i++){
    console.log(i);
}"
Design a Python class for quadratic equations.,"class QuadraticEquation:
    def __init__(self, a, b, c):
        self.a = a
        self.b = b
        self.c = c
        
    def get_roots(self):
        d = (self.b**2) - (4*self.a*self.c)
         
        # find two solutions
        sol1 = (-self.b-cmath.sqrt(d))/(2*self.a)
        sol2 = (-self.b+cmath.sqrt(d))/(2*self.a)
        
        return (sol1, sol2)"
Create a Python module to evaluate expressions.,"def evaluate(expression):
    """"""Evaluates the given expression""""""

    try:
        return eval(expression)
    except TypeError:
        raise ValueError(""The expression must be a valid Python expression"")"
"Given a Python dictionary, write a function that prints out the key-value pairs in alphabetical order.","def print_dict_alphabetically(dictionary):
    sorted_keys = sorted(dictionary.keys())
    for key in sorted_keys:
        print(f""{key}: {dictionary[key]}"")

print_dict_alphabetically({
 'Mark': '68',
 'Carol': '35',
 'John': '42'
})"
Generate an algorithm in Python to classify an email as spam or not spam.,"def classify_email(email):
    spam_words = ['spam', 'scam', 'unsubscribe', 'refund', 'free', 'win']

    # Check if email contains any words that indicate a spam email
    for word in spam_words:
        if word in email:
            return 'spam'

    # If no words were found, return 'not spam' 
    return 'not spam'"
Write a function in Python to generate a random number between two given numbers.,"import random
def random_between_nums(num1, num2):
    return random.randint(num1, num2)"
"Given a Python list of integers, write a function to find the sum of the elements in the list.","def findSum(nums):
 total = 0
 for num in nums:
 total += num
 return total"
Design a Python program to stop a loop after some specific iterations,"for i in range(100):
    if (i > 10):
        break
    print(i)"
Create a program in Python to generate an infinite sequence of random numbers.,"# This program will generate an infinite sequence of random numbers
import random

# Generate infinite sequence of random numbers
def rand_seq():
 while True:
  yield random.random()
  
# Print 10 random numbers
for i in range(10):
 print(next(rand_seq()))"
"Write an SQL query that will find all books whose titles contain the word ""Python"".","SELECT *
FROM books
WHERE title LIKE '%Python%'"
Create a Python program to replace all vowels in a given string with a given character.,"def replace_vowels(s, c): 
    return s.translate(str.maketrans('aeiou', c*5))

print(replace_vowels(string, character)) 

# Output: 
 r*pl*c* *ll v*w*ls"
Create a basic Twitter bot using Python and Tweepy for publishing tweets.,"import tweepy

# authentication
consumer_key = 'YOUR_CONSUMER_KEY'
consumer_secret = 'YOUR_CONSUMER_SECRET'
access_token = 'YOUR_ACCESS_TOKEN'
access_token_secret = 'YOUR_ACCESS_TOKEN_SECRET'

auth = tweepy.OAuthHandler(consumer_key, consumer_secret)
auth.set_access_token(access_token, access_token_secret)
api = tweepy.API(auth)

# Tweeting
text = 'Hello, world!'
api.update_status(text)"
Design a Python program that computes the reverse of a given string.,"def reverseString(s):
    return s[::-1]
 
s = ""Hello""
print(reverseString(s))"
Rewrite the following JavaScript code to a python code.,"def addNums(x, y):
    return x + y"
Create a Python program to count the number of occurrences of a certain element in a list.,"def count_occurrences(lst, element):
    count = 0
    for item in lst:
        if item == element:
            count += 1
    return count

result = count_occurrences([1, 2, 1, 2, 5, 2, 1], 2)
print(result)"
Write a Python script to find all prime numbers in a given list of numbers.,"""""""
Find all prime numbers in a given list of numbers
""""""

def is_prime(n):
    for i in range(2, n):
        if n % i == 0:
            return False
        else:
            return True

numbers = [13, 19, 23, 5, 7]
for num in numbers:
    if is_prime(num):
        print(num,""is a prime number"")"
Create a Python program to count the number of upper case and lower case letters in a given string,"def countLetters(s): 
   uppercase, lowercase = 0, 0
   for x in s: 
      if x.islower(): 
         lowercase+= 1
      elif x.isupper(): 
         uppercase+= 1
   print (""No. of Upper case characters : "", uppercase) 
   print (""No. of Lower case Characters : "", lowercase) 

countLetters('Hello World')"
"Create a function which takes two strings as arguments, concatenates the two strings, and capitalizes the result.","def concat_and_capitalize(str1, str2):
    result = str1 + str2
    return result.capitalize()

str1 = 'python'
str2 = 'programming'
print(concat_and_capitalize(str1, str2))"
Write a Python program that takes a list of numbers and creates a new list of even numbers only.,"def get_even_numbers(lst):
    even_lst = []
    for num in lst:
        if num % 2 == 0:
            even_lst.append(num)
    return even_lst"
Develop a Python program to determine the frequency of characters in an input string.,"def frequency(string):
 freq = {}
 for c in string:
 if c not in freq:
 freq[c] = 1
 else:
 freq[c] += 1
 return freq

string = input('Please enter your string: ')
print(frequency(string))"
Compose a python program to search an element in an array,"def linear_search(arr, x): 
    for i in range(len(arr)): 
  
        if arr[i] == x: 
            return i+1
  
    return -1

arr = [2, 3, 4, 5] 
x = 4

print(linear_search(arr, x))"
Create a Python program to convert raw JSON data into a Pandas DataFrame.,"import json
import pandas as pd

data = {
 ""Name"": ""John Smith"",
 ""Age"": 25,
 ""Location"": ""New York, USA""
}

df = pd.DataFrame.from_dict(json.loads(json.dumps(data)))
print(df)

Output
   Name  Age      Location
0  John   25  New York, USA"
Generate a list of prime numbers in Python list comprehension format within 1000.,"primes_list = [num for num in range(2, 1000) if all(num % i != 0 for i in range(2, num))]"
Create a function to find the number of times the given string appears in the array.,"def count_occurrences(items, string):
  count = 0
  for item in items: 
    if item == string:
      count += 1
  return count

print(count_occurrences(['Python', 'Python'], ""Python""))

# Output: 2"
Create a Python program to find the elements that are common in two unsorted lists.,"def common_in_two_lists(list1, list2):
    common_elements = []
    for number in list1:
        if number in list2:
            common_elements.append(number)
    return common_elements"
Design a program to build a recursive tree structure with nodes in Python.,"class Node:
    def __init__(self, val):
      self.right = None
      self.data = val
      self.left = None

def insert(node, data): 
  if node is None:
    return Node(data)
  else:
    if data <= node.data:
      node.left = insert(node.left, data)
    else:
      node.right = insert(node.right, data)
  return node"
Write a Python program which prints out all prime numbers between 1 and 100.,"def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

for n in range(1, 101):
    if is_prime(n):
        print(n)"
Model a logistic regression algorithm using Python to predict a binary target: true or false.,"import numpy as np

X = np.array([[0,0], [0,1], [1,0], [1,1]])
y = np.array([1,1,0,1])

from sklearn.linear_model import LogisticRegression

clf = LogisticRegression(random_state=0).fit(X, y)

print(""Prediction:"", clf.predict([[2,2]]))"
Write a Python script that sorts a list of tuples in descending order based on the second element of each tuple.,"def sortTupleListInDescendingOrder(tuple_list):
    tuple_list.sort(key=lambda tup: tup[1], reverse=True)
    return tuple_list

sorted_list = sortTupleListInDescendingOrder([('a', 3), ('b', 1), ('c', 4)])

print(sorted_list)"
Create a Python script to remove all elements from a list that are divisible by 3.,"def remove_divisible_by_3(arr):
    new_arr = []
    for num in arr:
        if num % 3 != 0:
            new_arr.append(num)
    return new_arr

arr = [2, 3, 4, 6, 8, 9]
result = remove_divisible_by_3(arr)
print(result)"
Write a Python program that takes an array containing n elements and generates the power set.,"import itertools

def powerset(lst):
    powerset = []
    for n in range(len(lst) + 1):
        for subset in itertools.combinations(lst, n):
            powerset.append(subset)
    return powerset

arr = [1, 2, 3]
print(powerset(arr))"
Create a program in Python to accept user input and sort the user input in ascending order.,"user_list = [2, 7, 4, 5]
sorted_list = sorted(user_list)
print(sorted_list)
# Output: [2, 4, 5, 7]"
Generate a Python program that finds the maximum and minimum values of a given list.,"def findMaxMin(numbers):
    max_val = max(numbers)
    min_val = min(numbers)
    return max_val, min_val

numbers = [-1, 6, 4, -2, 3]
max_val, min_val = findMaxMin(numbers)

print(""The maximum value is:"", max_val)
print(""The minimum value is:"", min_val)"
Create a Python program to find the sum of all divisors of an input number.,"def sum_divisors(num): 
    r = 0
    for i in range(1, num + 1):
        if num % i == 0:
            r += i
    return r

num = int(input(""Input a number: ""))
print(""Sum of all divisors of input is"", sum_divisors(num))"
"Create a data structure in Python to store the following data: Student Name, Score in Mathematics, Score in English.","students = {
 'John': {'Math': 91, 'English': 83},
 'Mary': {'Math': 94, 'English': 93},
}"
Write a Python program that generates a series of Fibonacci numbers.,"def fibonacci(n):
    a = 0
    b = 1
    for _ in range(n):
        a, b = b, a + b
    return a

print(fibonacci(10))"
Write a Python program to create and print a list of the first 10 prime numbers.,"import math

def is_prime(n):
    if n <= 1:
        return False  
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True

list_of_primes = []

for i in range(2, 11):
    if is_prime(i):
        list_of_primes.append(i)

print(list_of_primes)"
Write a Python program for converting a decimal number into its corresponding binary string.,"def decimal_to_binary(n):
 binary_string = """"
 while n > 0:
 binary_string += str(n % 2)
 n //= 2
 return binary_string[::-1]

# Example
result = decimal_to_binary(5)
print(result) 

# Output
101"
Write a quick sorting algorithm using Python.,"def quick_sort(array):
    if len(array) <= 1:
        return array

    pivot = array[0]
    left = []
    right = []

    for element in array[1:]:
        if element <= pivot:
            left.append(element)
        else:
            right.append(element)

    return quick_sort(left) + [pivot] + quick_sort(right)"
Generate a Python program to implement binary search on the given sorted array.,"def binary_search(arr, target):
    low = 0
    high = len(arr) - 1
    while low <= high:
        mid = (low + high) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            low = mid + 1
        else:
            high = mid - 1
    return -1"
Write a Python program to combine two given strings by alternating its characters,"def combine_strings(string1, string2):
    combined_string = """"
    length = max(len(string1), len(string2))
    for i in range(length):
        combined_string += string1[i] if i < len(string1) else """"
        combined_string += string2[i] if i < len(string2) else """"
    return combined_string

result = combine_strings(""ab"", ""xy"")
print(result)"
Write a function to iterate over elements repeating each as many times as its count.,"from collections import Counter
def count_variable(a,b,c,d):
  c = Counter(p=a, q=b, r=c, s=d)
  return list(c.elements())"
Optimize the following Python code to compute the sum of even numbers in a list.,"my_list = [1, 2, 3, 4, 5, 6]

# sum comprehension 
total = sum(num for num in my_list if num % 2 == 0)
print(total)"
Create a python script for Creating a car class with attributes like color and engine type.,"class Car:
    def __init__(self, color, engine_type): 
        self.color = color 
        self.engine_type = engine_type 
  
    def get_color(self):
        print(""Car's Color: "", self.color) 
  
    def get_engine_type(self):
        print(""Car's Engine Type: "", self.engine_type)"
Create a python program to find if a number is a prime number,"def is_prime(num):
    for i in range(2, num):
        if not num % i:
            return False
    return True

num = 15 
if is_prime(num):
    print(""The number is prime"")
else:
    print(""The number is not prime"")"
Write a function to tokenize a sentence using NLTK library in Python.,"# Solution
# First, let's import NLTK library
import nltk

# Define our sentence to tokenize
sentence = 'This is a test sentence.'

# Tokenize the sentence
tokenized_sentence = nltk.word_tokenize(sentence)

# Print out the result
print(tokenized_sentence)"
Generate a Python program that takes an integer N and outputs the sum of 1 to N.,"def sum_1_to_n(n):
  sum = 0
  for i in range(1, n+1):
    sum += i
  return sum"
"Write a python program to clean up a string by removing punctuation, non-alphanumeric regions  or converting to lowercase.","import string

example_string = ""This i$n't a siMPle StrinG""
new_string = example_string.translate(str.maketrans('', '', string.punctuation)).replace(' ', '').lower()
print(new_string)

Output:
thisisntasimplestring"
Design a Python function to print out all permutations of a given string.,"def permute(s):
    if len(s) == 1:
        return s

    perms = []
    for i in range(len(s)):
        element = s[i]

        remaining_elements = s[:i] + s[i+1:]
        z = permute(remaining_elements)

        for t in z:
            perms.append(element + t)

    return perms

print(permute(""ABC""))"
Write a function to add the given tuple to the given list.,"def add_tuple(test_list, test_tup):
  test_list += test_tup
  return (test_list) "
How can you write a function in Python to pivot a data frame with 2 columns?,"import pandas as pd 
  
def pivot_dataframe(df): 
    df_pivot = df.pivot(index = 'A', columns ='B') 
    return df_pivot

df = pd.DataFrame({'A':{1:'a',2:'c'}, 
                   'B':{1:'b',2:'d'} 
                  }) 

print(pivot_dataframe(df)) 
# Output 
   B  
A     b  d
  a  c"
Develop a program in Python to sort a list of integer numbers.,"def sort_list(list):
 sorted_list = sorted(list)
 return sorted_list 

list = [1, 7, 5, 9 , 3]
print(sort_list(list)) # will print [1, 3, 5, 7, 9]"
Generate a random set of 10 numbers between 1 and 100 in Python.,"import random

random_nums = random.sample(range(1,101), 10)
print(random_nums)

// Output: [45, 76, 70, 83, 24, 53, 22, 81, 77, 71]"
Write a python program to create a list of every third number between 1 and fifty.,"my_list = []
for i in range(1, 50, 3):
    my_list.append(i)"
Create a Python program that finds the low and high stock prices from a given array of stock prices.,"def min_max_stock_price(arr):
 low = float('inf')
 high = float('-inf')
 
 for price in arr:
 low = min(low, price)
 high = max(high, price)
 
 return [low, high]
 
print(min_max_stock_price([9, 15, 7, 8, 13, 5])) # Output: [5, 15]"
Write a Python program to a generate a random 4-digit number in which all 4 digits are even.,"import random

def generate_random_even_number():
    n = 0
    while n < 1000 or n > 9999:
        n = 0
        for i in range(4):
            n += random.randint(0, 8) * (10 ** i)
        if n % 2 == 0:
            break
    return n"
"Create a class Animal in Python with two instance variables, name and age, and a constructor Animal(name, age). It should also have a speak() method that prints out the animal's name.","class Animal:
 def __init__(self, name, age):
  self.name = name
  self.age = age
 
 def speak(self):
  print(""My name is"", self.name)"
"Create a function in Python that takes a list of strings, converts it to camelCase, and returns a new list with the converted strings.","def convertToCamelCase(list):
    camelCaseList = []

    for string in list:
        string = string.capitalize()
        camelCaseList.append(string)

    return ''.join(camelCaseList)"
Write a function in Python to print a random permutation of array elements.,"import random
def random_permutation(input_array):
    perm = []
    while(len(input_array) > 0):
        el = random.choice(input_array)
        perm.append(el)
        input_array.remove(el)
    return perm"
Create a Python program that finds the longest common prefix strings among an array of strings.,"def lcp(arr):
    if len(arr) == 0:
        return """"
    elif len(arr) == 1:
        return arr[0]
    else:
        prefix = arr[0]
        for i in range(1, len(arr)):
            while arr[i].find(prefix) != 0:
                prefix = prefix[:-1]
        return prefix

result = lcp([""flower"",""flow"",""flight""])
print(result)"
Generate a Python script that prints out the first n Fibonacci numbers.,"def fibonacci(n): 
    a = 0
    b = 1
    if n < 0: 
        print(""Incorrect input"") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2,n+1, 1): 
            c = a + b 
            a = b 
            b = c 
        return b"
Create a function in Python that takes two strings and combines the characters of each string keeping the order of the characters.,"def combine(s1, s2):
    result = """" 
    for i in range(max(len(s1), len(s2))):
        if i < len(s1):
            result += s1[i]
        if i < len(s2):
            result += s2[i]
    return result"
"Assuming a Python class Point for representing a point in a two dimensional plane with x and y as its field variables, write a method to calculate the distance from a point to the origin.","class Point:
    def __init__(self, x=0, y=0):
        self.x = x
        self.y = y
    
    def distance_from_origin(self):
        return ((self.x ** 2) + (self.y ** 2)) ** 0.5"
Write a Python function to input a list of integers and a number and output the number of times that number appears in the list.,"def count_occurrences(numbers, n):
 count = 0
 for num in numbers:
 if num == n:
 count += 1
 return count"
Implement an algorithm in Python to find the mode of the given array,"def findMode(arr): 
 max_count = 1 
 mode = arr[0] 
 count = 1 
  
 for i in range(1,len(arr)): 
 if (arr[i] == arr[i - 1]): 
 count = count + 1 # increment count
 if (count > max_count): 
 max_count = count # update max_count 
 mode = arr[i] 
 else: 
 count = 1 # reset count 
  
 return mode 

# Driver program 
arr = [2, 4, 3, 3, 5, 3, 7] 
print(findMode(arr)) # prints 3"
Generate a correct python program to store a dictionary of customer information,"customer_dict = {}

def store_customer_info(name, phone_number, address):
    customer_dict[name] = {
        'phone_number': phone_number,
        'address': address
        }

if __name__ == '__main__':
    store_customer_info('John Doe', '1234567890', 'New York')"
Develop a web service using Python Flask to handle POST requests.,"from flask import Flask, request

app = Flask(__name__)

@app.route('/api', methods=['POST'])
def api():
 if (request.method == 'POST'):
  # All code for handling POST requests
  return 'Handling POST requests'
 else:
  return 'Method Not Allowed'

if __name__=='__main__':
 app.run(debug=True)"
Create a Python program to find the longest word in a given sentence.,"def longestWord(sentence): 
    words = sentence.split(' ')
    longest_word = ''
    for word in words:
        if len(word) > len(longest_word):
            longest_word = word
    return longest_word

sentence = ""This is a test sentence""
print(longestWord(sentence)) // ""sentence"""
"Write a Python program that prints out the numbers from 1 to 100, with the exception of numbers divisible by 3, which should be printed as ""Fizz"" and numbers divisible by 5, which should be printed as ""Buzz"". Numbers divisible by both 3 and 5 should be printed out as ""FizzBuzz"".","for i in range(1, 101):
 if i % 3 == 0 and i % 5 == 0:
 print(""FizzBuzz"")
 elif i % 3 == 0:
 print(""Fizz"")
 elif i % 5 == 0:
 print(""Buzz"")
 else:
 print(i)"
Write a script in Python to filter out the strings containing the character 'x'.,"def filter_x(list):
    new_list = []

    # iterate through the list 
    for i in list:
        if 'x' not in i:
            # add the string not containing x
            new_list.append(i)
    return new_list

list = ['abc', 'efg', 'X', 'xyz', 'xabc']
filtered_list = filter_x(list)
print(""The list after filtering: "", filtered_list)"
Write a Python module to clean off noisy data by smoothing out short-range fluctuations.,"import numpy as np

def smooth_data(data, window_size):
    window = np.ones(int(window_size))/float(window_size)
    return np.convolve(data, window, 'same')"
Generate a hashmap in Python to store the given data.,"dict = {}

dict['Alice'] = {'Age': 30, 'Gender': 'Female'}
dict['Bob'] = {'Age': 20, 'Gender': 'Male'}"
Write a function in Python to remove a specific character from a string.,"def remove_character(string, character):
    return string.replace(character, '')

print(remove_character(string, character))"
Create a function in Python that outputs the Fibonacci series up to the nth number.,"def Fibonacci(n):
  
  # Setting up the base cases
  if n == 0:
    return 0
  elif n == 1:
    return 1
  
  # Calculating the Fibonacci sequence
  num1, num2 = 0, 1
  for i in range(2, n+1):
    num1, num2 = num2, num1 + num2
    
  return num2

# Driver Code
n = 10
print(Fibonacci(n))"
Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.,"def validate(n): 
    for i in range(10): 
        temp = n;  
        count = 0; 
        while (temp): 
            if (temp % 10 == i): 
                count+=1;  
            if (count > i): 
                return False
            temp //= 10; 
    return True"
Generate an api response in Python for the provided data.,"response = {
  ""status"": 200,
  ""data"": {""name"": ""John"",""age"":28},
  ""message"": ""Success""
}"
You need to write a Python program to convert a decimal number into its binary equivalent.,"def get_binary(num):
    return bin(num)[2:]

res = get_binary(num)
print(res)"
"Given a list of words and a target word, write a Python function to check if the target word exists in the list.","def isElementPresent(list, target): 
  for word in list: 
    if word == target: 
      return True
  return False

wordlist = ['apple', 'banana', 'car', 'dog'] 
target = 'banana'
print(isElementPresent(wordlist, target)) 
# prints True"
Create a Python program that reads in an unsorted array of integers and prints the array in sorted order.,"def sort_array(arr):
   arr.sort()
   return arr

arr = [3, 2, 5, 1, 7, 4]

sorted_arr = sort_array(arr)
print(sorted_arr) # [1, 2, 3, 4, 5, 7]"
"Generate a Python class for a Person object with attributes for name, age, height, and weight.","class Person:
 def __init__(self, name, age, height, weight):
 self.name = name
 self.age = age
 self.height = height
 self.weight = weight
 
 def get_info(self):
 return f'Name: {self.name}, Age: {self.age}, Height: {self.height}, Weight: {self.weight}'"
"Given a 2D array of integers, write a Python function to rotate the array clockwise by 90 degrees.","def rotate_array(arr):
    newarr = []
    for i in range(len(arr[0])):
        newarr_row = []
        for j in range(len(arr)):
            newarr_row.append(arr[len(arr)-j-1][i])
        newarr.append(newarr_row)

    return newarr"
Develop a Python program that automatically prints out a Fibonacci sequence of length n.,"def print_fibonacci(length):
    a = 0 
    b = 1

    while length > 0:
        print(a)
        temp = a 
        a = b 
        b = temp + b 
        length = length - 1"
Create a slugify function in Python that converts a sentence into a valid URL slug.,"def slugify(string):
    slug = string.lower().strip().replace(' ', '-')
    return slug

slug = slugify(""This Is a Test"")
print(slug)"
Write a code in Python to print out every integer between 5 and 15 (inclusive).,"for i in range(5, 16):
    print(i)"
Generate a program in Python to solve a given linear equation,"def solve_linear_eq(eq):
    x, b = eq.split(' ')
    a, op, constant_term = x.split('x')

    a = int(a)
    b = int(b)
    constant_term = int(constant_term)
    
    if op == '+':
        x = (constant_term - b) / a
    elif op == '-':
        x = (b - constant_term) / a
    
    return x

solution = solve_linear_eq('3x + 5 = 10')
print(""x = "" + str(solution))"
Write a Python program to generate 10 random numbers and put them in a list.,"import random

random_list = []
for i in range(10):
 number = random.randint(1, 100)
 random_list.append(number)"
Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.,"def super_seq(X, Y, m, n):
	if (not m):
		return n
	if (not n):
		return m
	if (X[m - 1] == Y[n - 1]):
		return 1 + super_seq(X, Y, m - 1, n - 1)
	return 1 + min(super_seq(X, Y, m - 1, n),	super_seq(X, Y, m, n - 1))"
"Construct a Python program to calculate the body mass index (BMI) of a person, given their height and weight","def calculate_bmi(height, weight): 
    bmi = weight / (height * height) 
    return bmi"
Develop a program to track the stock price using the Yahoo Finance API in Python,"import yfinance as yf

# Get the data of the stocks for the given ticker
ticker = ""AAPL""
data = yf.Ticker(ticker)

# The Yahoo API token
token = ""abc123""

# Get historical data for the ticker
data.history(period=""1mo"", token=token)

# Print the price
print(data.history(token=token)[""Close""].iloc[-1})"
Create a Python library to implement a common algorithm.,"import math

def algorithm(input1, input2):
    # Algorithm logic here
    return output"
Optimize a given Python function to run faster.,"def long_function(lst):
    counter = 0
    for i in lst:
        counter += i
    return counter"
Create a function in Python that flattens a nested list.,"def flatten_list(lst):
 flattened = []
 for i in lst:
  if type(i) == list:
   flattened += flatten_list(i)
  else:
   flattened.append(i)
 return flattened"
Generate a python script to calculate the total public holiday hours for a given state.,"state = ""Illinois""

def calculate_public_holiday_hours(state):
    # code to calculate public holiday hours for a given state
    if state == ""Illinois"":
        return 8
    # code for other states

hours = calculate_public_holiday_hours(state)
print(""Public holiday hours:"", hours)"
Design a program in Python to print out the prime numbers from 2 to a given upper limit.,"def is_prime(upper_limit):
    for num in range(2, upper_limit+1):
        if num > 1:
            for i in range(2, num):
                if (num % i) == 0:
                    break
            else:
                print(num, end="" "")

upper_limit = 20
is_prime(upper_limit)"
Create a prototype of a bubble sort function in Python.,"def bubbleSort(arr):
    for i in range(len(arr)):
        for j in range(0, len(arr)-i-1):
            if arr[j] > arr[j+1] :
                arr[j], arr[j+1] = arr[j+1], arr[j]
    return arr"
"Create a basic bot for Telegram using Python. It should respond to the ""/start"" command by sending a welcome message and display a list of command the bot supports.","import telebot

bot = telebot.TeleBot(""<bot token>"")

@bot.message_handler(commands=['start'])
def send_welcome(message):
 bot.reply_to(message,
 'Welcome! Here are the commands this bot supports:\n\
/list - list all items\n\
/add - add a new item\n\
/remove - remove an item\n\
')

# Bot logic

bot.polling()"
Generate a Python program to convert a list of lists into one flat list.,"def flattenList(inputList): 
    outputList = [] 
    for subList in inputList: 
        for item in subList: 
            outputList.append(item) 
    return outputList"
Write a Python function to check if a given number is an Armstrong number.,"def is_armstrong_number(num): 
 
    # Calculate the number of digits 
    n = len(str(num)) 
  
    # Check whether is an armstrong number 
    sum = 0 
    temp = num 
    while temp > 0: 
        digit = temp % 10
        sum += digit ** n 
        temp //= 10
  
    if num == sum: 
        return True
    else: 
        return False"
Generate a Python program that finds the maximum of an array of numbers.,"def find_max(arr): 
    # Initialize max 
    max = arr[0] 
  
    # Traverse from arr[1] to end 
    for i in range(1, len(arr)): 
  
        # Compare every element with current max 
        if arr[i] > max: 
            max = arr[i] 
              
    return max

arr = [2, 4, 6, 1, 7, 12] 

result = find_max(arr)
print(result)"
Write a python statement to extract the first element from a 3-item tuple.,"first_element = (3, 4, 5)[0]"
Write a Python program to remove all occurrences of a specific number in a given list.,"def remove_num(myList, num):
    return [x for x in myList if x != num]
  
removed_list = remove_num(list, 2)
print(removed_list)"
Design a Python program to check if a given string has balanced parenthesis.,"def is_balanced(string): 
    stack = [] 
    for char in string: 
        if char == '(': 
            stack.append(char) 
        elif char == ')': 
            if len(stack)==0: 
                return False
            stack.pop() 
  
    if len(stack) == 0: 
        return True
    else: 
        return False"
Optimize the following Python code for adding two numbers,"def addTwoNum(a, b):
 return a + b

c = addTwoNum(3, 4)"
Create a class in Python that models a charging station.,"class ChargingStation:
    def __init__(self, id, description, max_charge):
        self.id = id
        self.description = description
        self.max_charge = max_charge

    def check_status(self):
        if self.max_charge > 0:
            return ""Charging station is available""
        else:
            return ""Charging station is not available"""
Generate a function in Python to take a list of numbers as input and count the number of elements that are greater than a given number.,"def count_greater_than_threshold(list, threshold):
    count = 0
    for num in list:
        if num > threshold:
            count += 1
    return count
print(count_greater_than_threshold(list, threshold)) # Prints 2"
Write a script in Python using the Requests library to scrape all the websites from a list.,"import requests

site_urls = [""http://www.example1.com"" , ""http://www.example2.com""]

for url in site_urls:
 response = requests.get(url)
 page_source = response.content
 print(page_source)"
Create a Python program to compare two given strings and returns the number of mismatched letters.,"def compare_strings(string1, string2):
    mismatched = 0
    for i in range(min(len(string1), len(string2))):
        if string1[i] != string2[i]:
            mismatched += 1
    return mismatched

string1 = ""abcdefg""
string2 = ""accfghe"" 
compared = compare_strings(string1, string2)
print(""Number of mismatched letters:"", compared)"
Create a Python program to generate a random password of length n.,"import random

def generate_password(length):
  characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*(){}[]?/'
  password = ''
  for c in range(length):
    password += random.choice(characters)
  return password

length = 10
password = generate_password(length)
print(password)"
Create a Python script that generates a random password of length n with a minimum required characters.,"import string
import random

def generate_password(length):
    password_characters = string.ascii_letters + string.digits + string.punctuation
    return ''.join(random.choice(password_characters) for i in range(length))

print(generate_password(8))"
Write a python program to calculate the sum of the squares of the odd numbers between the given two numbers.,"def sum_square_odd(n1, n2):
    sum = 0
    for i in range(n1, n2+1):
        if i % 2 != 0:
            sum += i*i
    return sum

sum = sum_square_odd(n1, n2)
print(sum)"
Write a function to generate a random MAC address in Python.,"import random
import string

def gen_mac_address():
    """"""Generates a random MAC address""""""
    mac = [ 0x00, 0x24, 0x81,
        random.randint(0x00, 0x7f),
        random.randint(0x00, 0xff),
        random.randint(0x00, 0xff) ]
    return ':'.join(map(lambda x: ""%02x"" % x, mac))

print(gen_mac_address())"
Generate a Python program that takes a number as input and prints all of the powers of two up to that number.,"def pow_2(number):
 for i in range(number + 1):
  print(2 ** i)
  
pow_2(10)"
Generate a sentence in Python that uses a for loop to iterate over a list of strings.,"for s in strings:
    print(f'I like to eat {s}!')"
Design an algorithm in Python which takes a given 2D array and finds the product of the elements in each row.,"def rowProduct(arr):
    result = []
    for row in arr:
        product = 1
        for num in row:
            product = product * num
        result.append(product)

    return result

arr = [[1, 2], [3, 4]]

result = rowProduct(arr)
print(result)"
Write a Python script to find the factorial of any given number.,"def factorial(num):
    result = 1
    if num > 1:
        for i in range(2,num+1):
            result *= i
    return result"
Write a python program to fill in a 2D array with zeros.,"import numpy as np

# define an array of size 5x5
my_array = np.zeros((5, 5))

print(my_array)"
Develop an AI-based program in Python that can recognize and label speech.,"import speech_recognition as sr
from collections import defaultdict

sentences = defaultdict(list)

r = sr.Recognizer()
with sr.Microphone() as source:
    print(""Speak the sentence:"")
    audio = r.listen(source)
    sentence = r.recognize_google(audio)
    sentences[sentence].append(audio)"
Write a Python script for multiplying all items in a list.,"def multiply_list(items):
   result = 1
   for i in items: 
      result *= i 
   return result"
Generate a random string of 8 alphanumeric characters using a Python program.,"import random
import string
 
def generate_random_string(size=8):
 return ''.join(random.choices(string.ascii_uppercase + string.digits, k=size))
 
random_string = generate_random_string()
print(random_string)
# Output: '6L6Y4M4V'"
Develop a Python program that encrypts a given string using 'Caeser Cipher',"def caesarCipherEncryptor(string, key):
  newLetters = []
  newKey = key % 26
  for letter in string:
   newLetters.append(getNewLetter(letter, newKey))
  return ''.join(newLetters)
 
def getNewLetter(letter, key):
   newLetterCode = ord(letter) + key
   return chr(newLetterCode) if newLetterCode <= 122 else chr(96 + newLetterCode % 122)"
Create a Python function to calculate the sum of all numbers in a nested list.,"def calculate_sum(nested_list):
    sum = 0
    for item in nested_list:
        for num in item:
            sum += num
    return sum

nested_list = [[1,2], [3,4], [6,7]]
print(calculate_sum(nested_list))"
Write a Python program to sort the input list according to its length.,"list = [""Hello"", ""World"", ""This is a test""]

def sort_list_length(list):
    '''
    Function to sort the list according to its length
    '''
    return sorted(list, key=len)

if __name__ == ""__main__"":
    list = [""Hello"", ""World"", ""This is a test""]
    sorted_list = sort_list_length(list)
    print(sorted_list)"
"Write a python class called ""Car"" which has attributes like model, color and year.","class Car(object):
    """"""A car object with attributes like model, colour and year""""""

    def __init__(self, model, colour, year):
        self.model = model
        self.colour = colour
        self.year = year

# Example
my_car = Car(""Ford Mustang"", ""Red"", 2016)"
"Using the Pandas library, create a Python script to calculate statistics for a given dataset.","import pandas as pd

data = pd.read_csv('input.csv')
print(data.describe())"
Create a Python script that generates the Fibonacci sequence.,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)

for n in range(10):
    print(fibonacci(n))"
Create a Python program that sorts a list of integers.,"def sort_list(list):
    for i in range(len(list)):
        for j in range(i+1, len(list)):
            if list[i] > list[j]:
                list[i], list[j] = list[j], list[i]
    return list

my_list = [9, 3, 6, 7, 1]
my_list = sort_list(my_list)
print(my_list)"
Generate a Python code to search for an element in an array,"def linear_search(arr, N):
  for i in range(len(arr)):
    if arr[i] == N:
      return i+1
  return -1"
Calculate the area of a rectangle in Python.,"area = length * width
print(area)"
Write a function to find the summation of tuple elements in the given tuple list.,"def sum_elements(test_tup):
  res = sum(list(test_tup))
  return (res) "
Generate a python code to calculate the factorial for a given number.,"def factorial(number):
    if number == 0:
        return 1
    else:
        return number * factorial(number -1)

factorial(num)"
Produce a Python program to do a linear search of an element in a given array.,"def linearSearch(arr, x): 
    for i in range (len(arr)): 
        if arr[i] == x: 
            return i 
    return -1"
Create a Python dictionary that allows a user to store a city name as a key and its population as the value.,"city_population = {
    'New York': 8450000, 
    'Los Angeles': 4000000, 
    'Chicago': 2700000, 
    'Houston': 2300000
    }"
Identify all bugs in the following Python code and suggest fixes.,"a = int(input('Enter a number: '))
b = int(input('Enter a number: '))
if a > b:
 print('a is greater than b')"
Develop a program to normalize a list of numbers in Python.,"def normalize_list(lst):
    '''Normalizes a list of numbers'''
    max_val = max(lst)
    min_val = min(lst)

    normalized_lst = []
    for num in lst:
        normalized_val = (num - min_val)/(max_val - min_val)
        normalized_lst.append(normalized_val)

    return normalized_lst"
Write a Python program to determine if one number is a multiple of another.,"def is_multiple(num1, num2):
   if (num1 % num2 == 0):
       print(f'{num1} is a multiple of {num2}')
   else:
       print(f'{num1} is not a multiple of {num2}')

is_multiple(32, 8)

Output:
32 is a multiple of 8"
Create a program in Python to select the data from a list of items.,"def select_data(my_list):
    result = []
    for item in my_list:
        if item['selected']:
            result.append(item)
    return result"
Write a Python program to filter a list and sort it in descending order by length.,"a.sort(key=len, reverse=True)
# Output: ['elephant', 'giraffe', 'ball', 'apple', 'dog', 'cat', 'frog']"
Create a Python program to reverse a string in place.,"def reverse_string_in_space(s): 
    temp_list = list(s) 
    start = 0
    end = len(temp_list) - 1
  
    while start < end: 
        temp_list[start], temp_list[end] = temp_list[end], temp_list[start] 
        start += 1
        end -= 1
  
    s = """".join(temp_list) 
      
    return s
  
s = ""Hello World!""
print(reverse_string_in_space(s))"
Create a Python code to generate a string containing the multiplying table for any given number up to ten.,"def generate_multiplication_table(num):
    """"""
    Generates a string with the multiplication table of a given number up to ten.
    @param num: int
    @return: str
    """"""
    table_str = """"

    for i in range(1, 11):
        result = num * i
        table_str += f""{num} * {i} = {result}\n""
    return table_str"
Develop a Python script to print out the prime numbers up to a given limit.,"def is_prime(n):
 if n == 1:
 return False
 for i in range(2, n):
 if n % i == 0:
 return False
 return True

# Print out prime numbers from 1 to 100
limit = 100

for i in range(1, limit+1):
 if is_prime(i):
 print(i)"
Create a Python program to calculate the Mean Squared Error (MSE) of a given dataset.,"mse = (sum([(x[i]-y[i])**2 for i in range(len(x))]))/len(x)
print(mse)"
Create a Python function to print all elements in a nested list.,"def print_elements(nested_list):
    
    for item in nested_list:
        if type(item) == list:
            print_elements(item)
        else:
            print(item)

print_elements(nested_list)"
Suggest a programming language and a library for text classification.,"Python is a great language for text classification tasks and there are several libraries that could be used, including scikit-learn and NLTK. Additionally, pytorch provides a number of utilities for text classification."
Create a function in Python to calculate the total cost after applying a discount. The function should accept the original cost and the discount percentage as arguments.,"def calculate_discounted_cost(cost, discount_percentage):
 discounted_cost = cost - (cost * (discount_percentage/100))
 return discounted_cost

discounted_cost = calculate_discounted_cost(100, 25)
print ('The discounted cost is: ', discounted_cost)"
Develop a Python guess the number game. The program should pick a random number between 1 to 10 and the user has to guess it.,"import random

answer  = random.randint(1, 10)

guess = int(input('Guess a number between 1 and 10: '))

if guess == answer:
 print('You guessed correct!')
elif guess < answer:
 print('Your guess is too low')
elif guess > answer:
 print('Your guess is too high')"
Write a script in Python that takes a URL and a list of words as input and then searches the page content for any of the given words.,"import requests

url = 'https://www.example.com'
word_list = ['cat', 'dog', 'bird']

r = requests.get(url).text
for word in word_list:
 if word in r:
  print('Word ""{}"" found on the given URL'.format(word))
else:
  print('Word ""{}"" not found the given URL'.format(word))"
Create a python program to randomly select a survivor from a given list of names,"import random

names = [""Alex"", ""Bob"", ""Charlotte"", ""John"", ""Mike""]

def randomly_select_survivor(names):
    survivor = random.choice(names)
    print(f""The randomly selected survivor is: {survivor}"")

randomly_select_survivor(names)"
Design a Python program that prints out the reverse of a given string.,"def reverse_string(String):
    rev_str = """" 
    for i in String: 
        rev_str = i + rev_str
    return rev_str

print(reverse_string(""Hello World""))"
Develop a unit test in Python to verify correctness of an algorithm.,"import unittest

class TestAlgorithm(unittest.TestCase):
    
    def test_algorithm(self):
        10 = algorithm([1, 2, 3, 4])
        self.assertEqual(10, 10)
        
        40 = algorithm([10, 10, 10, 10])
        self.assertEqual(40, 40)

if __name__ == '__main__':
    unittest.main()"
Write a function to add a dictionary to the tuple.,"def add_dict_to_tuple(test_tup, test_dict):
  test_tup = list(test_tup)
  test_tup.append(test_dict)
  test_tup = tuple(test_tup)
  return (test_tup) "
Implement the Singleton Design Pattern in a Python class.,"class Singleton:
 _instance = None

 def __new__(cls, *args, **kwargs):
 if not cls._instance:
 cls._instance = super().__new__(cls, *args, **kwargs)
 return cls._instance

s = Singleton()
print(s)"
"Create a class called <Person> in Python with three properties - <name>, <age> and <height>.","class Person:
    def __init__(self, name, age, height):
        self.name = name
        self.age = age
        self.height = height"
"In Python, generate a script to find the length of a given list.","def lengthList(arr):
    length = 0
    for i in arr:
        length += 1
    return length
 
print(lengthList([1, 3, 5, 7, 9])) # Outputs: 5"
Develop a recursive algorithm in Python for generating permutations of a given set of elements.,"def permutations(s): 
 if len(s) == 0: 
  return [] 
 if len(s) == 1: 
  return [s] 
 l = [] # empty list that will store current permutation 
 # Iterate the input(s) and calculate the permutation 
 for i in range(len(s)): 
   m = s[i] 
   rem = s[:i] + s[i+1:] 
   for p in permutations(rem): 
    l.append([m] + p) 
 return l"
"Create a program in any language that outputs all the prime numbers between 1 and a given number (say, n).","# Python code

n = 90

for num in range(2, n+1):
   if num > 1:
       for i in range(2, num):
           if (num % i) == 0:
               break
       else:
           print(num)"
Create a Python program to rotate a 2-dimensional array clockwise.,"def rotate_sqr_matrix_clockwise(matrix):
    N = len(matrix)
    res = [[0] * N for i in range(N)]
    for i in range(N):
        for j in range(N): 
            res[i][j] = matrix[N - 1 - j][i] 
    return res"
Write a Python program to find the largest palindrome number less than 4400.,"max_palindrome = 0
for i in range(4400, 0, -1): 
    if str(i) == str(i)[::-1]: 
        max_palindrome = i 
        break
print(max_palindrome) # Output: 4331"
Write a python function to find the largest number that can be formed with the given digits.,"def find_Max_Num(arr,n) : 
    arr.sort(reverse = True) 
    num = arr[0] 
    for i in range(1,n) : 
        num = num * 10 + arr[i] 
    return num "
Create a class in python that finds the sum of two numbers.,"class Sum:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    
    def find_sum(self):
        return self.x + self.y
        
if __name__ == '__main__':
    s = Sum(10, 5)
    print(s.find_sum())"
Create a quicksort algorithm in Python which sorts an array in ascending order.,"def quicksort(arr):
    if len(arr) <= 1:
        return arr
    
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quicksort(left) + middle + quicksort(right)"
Write a Python utility to calculate the Fibonacci series up to a specified number.,"def fibonacci(length):
 # Initialize the first two numbers 
 a, b = 0, 1 

 # We generate the Fibonacci series 
 # up to a given length 
 res = [] 
 while (len(res) < length): 
 res.append(b)
 
 # Calculate the next Fibonacci number 
 a, b = b, a + b 

 # Return the generated Fibonacci series 
 return res

print(fibonacci(5))
# Output -> [1, 1, 2, 3, 5]"
Create a Euclidean distance function in Python.,"def euclidean_distance(x1, y1, x2, y2): 
    # Calculating distance 
    return math.sqrt(math.pow(x2 - x1, 2) + math.pow(y2 - y1, 2)) 
  
# Driver Code 
x1 = int(input(""Enter x1:""))
y1 = int(input(""Enter y1:""))
x2 = int(input(""Enter x2:""))
y2 = int(input(""Enter y2:""))

print(euclidean_distance(x1,y1,x2,y2))"
"Create a class in Python called ""Person"" with two properties, ""name"" and ""age"".","class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age"
Can you write a Python function to sort the items in a dictionary by their values?,"def sort_dict_by_values(d):
    sorted_list = sorted(d.items(), key=lambda item: item[1])
    return sorted_list"
Create a function in Python to generate a 5x5 two-dimensional array with random integers between 0 and 9.,"import random

def generateArray():
 arr = [[0 for i in range(5)] for j in range(5)]
 
 for i in range (5):
 for j in range (5):
  arr[i][j] = random.randint(0,9)
  
 return arr

print(generateArray())"
Create an Python decorator that measures the execution time of a function and logs it.,"import time
import logging

def timeit(func):
    def wrapper(*args, **kwargs):
        start = time.time()
        result = func(*args, **kwargs)
        end = time.time()
        duration = end - start
        logging.info(""Execution of {} took {} seconds"".format(func.__name__, duration))
        return result
    return wrapper"
Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.,"def count_no_of_ways(n, k): 
	dp = [0] * (n + 1) 
	total = k 
	mod = 1000000007
	dp[1] = k 
	dp[2] = k * k	 
	for i in range(3,n+1): 
		dp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod 
	return dp[n]"
Create a web crawler in Python to crawl a website for links.,"import requests
from bs4 import BeautifulSoup

# get the HTML from the URL
response = requests.get('https://example.com')
html = response.text

# create the BS4 object and get all the <a> elements
bsobj = BeautifulSoup(html, 'html.parser')
links = bsobj.find_all('a')

# print all the links
for link in links:
 if link.has_attr('href'):
   print(link['href'])"
Design a python program to sort a list of tuples according to their 2nd item.,"# Input list
list_of_tuples = [('Alice', 20), ('Bob', 30), ('Andrew', 20), ('Catherine', 40)]

# Sort the list by second item
sorted_list = sorted(list_of_tuples, key=lambda x: x[1])

# Print the result
print(sorted_list)"
Write a function in Python to find the index of a given element in a given list of numbers.,"def find_index(nums, element):
    for i, num in enumerate(nums):
        if num == element:
            return i
    
    return -1"
Write a Python program that takes in a string of numbers delimited by spaces and returns the largest number.,"def findMax(string):
  numbers = string.split("" "")
  largest = 0
  
  for number in numbers:
    if number > largest:
      largest = number
      
  return largest
  
string = ""64 8 224 54 21""
print(f""The largest number is {findMax(string)}."")"
Create a new program in Python that creates a list of prime numbers ranging from 2 to n.,"""""""
Create a list of prime numbers ranging from 2 to n.
""""""

def prime_list(n):
    prime_list = []
    for num in range(2, n + 1):
        for prime in prime_list:
            if num % prime == 0: 
                break
        else: 
            prime_list.append(num)
    return prime_list

if __name__ == '__main__':
    n = 15
    print(prime_list(n))"
Write a Python program to retrieve a list of 10 latest posts from Reddit.,"import praw

reddit = praw.Reddit('bot1')

latest_posts = [] 
for submission in reddit.subreddit('all').new(limit=10):
 latest_posts.append(submission.title)
 
print(latest_posts)"
Produce a program using Python that visualizes the given function.,"import matplotlib.pyplot as plt 
import numpy as np 

x = np.arange(-4.0, 4.0, 0.1) 
y = np.arange(-4.0, 4.0, 0.1) 
X, Y = np.meshgrid(x, y) 

def f(x, y): 
    return x + y 

Z = f(X, Y)

fig = plt.figure()
plt.contourf(X, Y, Z) 
plt.xlabel('x')
plt.ylabel('y')
plt.title('f(x,y) = x + y') 
plt.show()"
Create a Python script that makes an HTTP request to retrieve data and convert it from JSON to a pandas DataFrame.,"import requests
import pandas as pd

url = 'https://example.com/api/data'

# Make the request and get the response
response = requests.get(url)

# Convert the JSON response to a python dictionary
data = response.json()

# Convert the dictionary to a pandas DataFrame
df = pd.DataFrame(data)"
Write a script in Python to input a list of strings and convert it into a single string.,"# Convert list of strings into a single string
def list_to_string(lst):
    return ' '.join(lst)"
Create a Python function that takes the average of the three numbers given as parameters.,"def average(a, b, c):
    return (a+b+c)/3"
Create a code in Python to generate a random English word.,"import random

words = [""hello"", ""world"", ""hi"", ""moon"", ""sun""]

random_word = random.choice(words)

print(""Random word: "" + random_word)"
Optimize the following Python code by replacing the for-loop with a list comprehension,"def hipsterify(sentence):
  return ' '.join([""hipster "" + word for word in sentence])"
Find the first 5 prime numbers using python.,"prime_nums = [2, 3, 5, 7, 11]
print(""The first 5 prime numbers are: "", prime_nums)"
Design a Python program to perform linear regression for predicting the numbers in a given dataset.,"import numpy as np
from sklearn.linear_model import LinearRegression

X = np.array([1,2,3,4,5]).reshape(-1,1)
Y = np.array([3,5,7,9,13])

model = LinearRegression()
model.fit(X, Y)

# Predicts the value of y
print(model.predict([[7]]))"
Generate a Python code to calculate the value of the nth Fibonacci number.,"def fib(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n-1) + fib(n-2)

print(""The requested Fibonacci number is: "" + str(fib(6)))"
Create a function in Python which takes a parameter and finds the maximum value in the parameter.,"def max_value(parameter):
    max_val = parameter[0]
    for num in parameter:
        if num > max_val:
            max_val = num
    return max_val

max_num = max_value(parameter)
print(max_num)"
"Write a function to find uppercase, lowercase, special character and numeric values using regex.","import re
def find_character(string):
  uppercase_characters = re.findall(r""[A-Z]"", string) 
  lowercase_characters = re.findall(r""[a-z]"", string) 
  numerical_characters = re.findall(r""[0-9]"", string) 
  special_characters = re.findall(r""[, .!?]"", string) 
  return uppercase_characters, lowercase_characters, numerical_characters, special_characters"
"With the input, create a Python program which takes in a sentence and returns the word which appears most frequent.","def most_frequent_word(sentence):
    """"""Return the word which appears most frequent in a sentence.""""""
    words = {}
    for word in sentence.split():
        if word in words:
            words[word] += 1
        else:
            words[word] = 1
    return max(words, key=words.get)"
Generate an algorithm in Python that takes a decimal number x and converts it to binary.,"# Input decimal number
decimal_number = 178

# Output binary number
binary_number = """"

# Main algorithm to convert from decimal to binary
while decimal_number > 0:
    remainder = decimal_number % 2
    binary_number = str(remainder) + binary_number
    decimal_number = decimal_number // 2

print(binary_number)"
Implement the following pseudocode in Python,"A = [x, y, z]
B = [a, b, c]

C = []
for x,y in zip(A,B):
    C.append(x)
    C.append(y)

print(C) #[x, a, y, b, z, c]"
Write a Python program to create a list of dictionaries from a given list of dictionary keys and a list of dictionary values.,"keys = [1,2,3] 
values = [""a"",""b"",""c""]
list_of_dict = [dict(zip(keys, values)) for i in range(len(keys))] 
print(list_of_dict) # Output: [{1: 'a', 2: 'b', 3: 'c'}]"
Can you create a Python program to get the largest element from a list?,"def largestElement(myList): 
    return max(myList)"
Create a Python program to join two strings together.,"def join_strings(string1, string2):
    return string1 + string2"
Create a Python program to split a given string into two parts according to a given character.,"def split_string(s, char):
    new_list = s.split(char)
    return new_list

result = split_string(""apple-banana-orange"", ""-"")
print(result)"
Create a function ``squareSum`` in python which will take a list of numbers as arguments and calculate their sum of squares.,"def squareSum(numbers):
    sum_of_squares = 0
    for num in numbers:
        sum_of_squares += num**2
    return sum_of_squares"
Write a code in Python to parse a JSON string.,"import json

json_string = '{""name"": ""James"",""age"": 27}'
data = json.loads(json_string)
print(data[""name""], data[""age""])"
Generate a Python code which calls a function to print the following array?,"arr = [1,3,7,9,10]

def print_array(arr):
    '''This function prints the elements of an array'''
    for ele in arr:
        print(ele)

print_array(arr)"
Design a program to capitalize each letter of a given string in Python.,"def capitalize_string(str):
    capitalized_str = """"
    for char in str:
        capitalized_str += char.upper()
    return capitalized_str

test_string = ""hello world""
capitalized_string = capitalize_string(test_string)
print(capitalized_string)"
Write a Python program to generate a multiplication table of given number.,"for i in range(1, 11):
    print(number,""X"",i,""="",number*i)"
Generate a Python program to search an element in an array.,"def searchElement(arr, x): 
    for i in range(len(arr)): 
        if arr[i] == x: 
            return i
    return -1
    
arr = [2, 4, 6, 8]
x = 8

result = searchElement(arr, x) 

if(result == -1): 
  print(""Element is not present in array"") 
else: 
  print(""Element is present at index"", result)"
Write a python function to find the last two digits in factorial of a given number.,"def last_Two_Digits(N): 
    if (N >= 10): 
        return
    fac = 1
    for i in range(1,N + 1): 
        fac = (fac * i) % 100
    return (fac) "
Write a Python program to generate a random password. The program should include at least two types of characters (numbers and symbols) and the length of the password should be between 8 and 16.,"import random
import string

def generate_password():
    chars = string.ascii_lowercase + string.digits + string.punctuation
    size = random.randint(8, 16)
    return ''.join(random.choice(chars) for _ in range(size))

print(generate_password())"
Generate a Python function that takes a list and a number as input and assigns the number to each item in the list.,"def assign_value(lst, num):
    for i in range(len(lst)):
        lst[i] = num
    return lst

print(assign_value([2, 3, 4, 5], 7)) # Output: [7, 7, 7, 7]"
"Design a program in Python and select features from list A and list B, given the following constraints:","features = [a, c, 2] # Selecting a, c from list A and 2 from list B."
Create a JavaScript object containing a list of programming languages and their respective paradigms.,"const languages = {
 'C': 'Imperative',
 'C++': 'Imperative',
 'Java': 'Object-Oriented',
 'Scala': 'Object-Oriented',
 'Python': 'Object-Oriented',
 'PHP': 'Object-Oriented',
 'Go': 'Imperative/Functional',
 'Ruby': 'Object-Oriented/Functional',
 ' JavaScript': 'Functional/Prototype-based',
};"
Design a Python program to sort the given list using insertion sort.,"def insertionSort(arr): 
    for i in range(1, len(arr)): 
  
        j = i-1
        key = arr[i] 
  
        while j >=0 and key < arr[j] : 
                arr[j+1] = arr[j] 
                j -= 1
        arr[j+1] = key 
  
arr = [3,8,15,2,6,10]
insertionSort(arr) 
print (""Sorted array is:"") 
for i in range(len(arr)): 
    print (""%d"" %arr[i])"
Create a program using Python to generate a histogram given a list of numbers.,"# importing matplotlib module
import matplotlib.pyplot as plt

# list of numbers 
numbers = [2, 5, 2, 8, 3, 9, 4, 10]

# draw histogram 
plt.hist(numbers, bins = [0, 2, 4, 6, 8, 10])

# x label, y label and title
plt.xlabel('Numbers');
plt.ylabel('Frequency');
plt.title('Histogram for Numbers')

# display histogram 
plt.show()"
Implement a function in Python to convert a decimal number to binary.,"def decimalToBinary(num): 
    # empty list to store the binary number 
    binaryList = [] 
   
    # if the number is 0, return 0
    if num == 0:
        return [0]
  
    # loop until the number becomes 0 after division by 2
    while num > 0:
        binaryList.append(num % 2) 
        num //= 2
  
    # Reverse the list
    binaryList = binaryList[::-1] 
  
    return binaryList"
Create a function in Python that can tell if a string is a palindrome or not.,"def is_palindrome(word):
    reversed_word = word[::-1]

    if word == reversed_word:
        return True
    else:
        return False
        
result = is_palindrome('civic')
print(result)"
Write a Python function to remove all consecutive duplicates of a given number.,"def remove_duplicates(lst):
  result = []
  curr = lst[0]

  for num in lst:
    if num != curr:
      result.append(num)
      curr = num
  return result"
Write Python code that prints out the characters of a given string in reverse.,"string = input() 
length = len(string) 

for i in range(length-1, -1, -1):
    print(string[i], end="""")"
Create a GUI in Python using Tkinter.,"# imports
import tkinter as tk

# create root app window
root = tk.Tk()

# setting window's size
root.geometry(""200x200"")

# main loop
root.mainloop()"
Develop a function in Python for performing sentiment analysis of a given text.,"Develop a function in Python to analyze the sentiment in a given text. Utilize natural language processing (NLP) techniques such as tokenization and parts of speech tagging, then leverage a pre-trained sentiment classifier to determine the sentiment in the given text."
"Optimize the existing Python code, so that the application runs faster (on average).","def factorial(n):
 result = 1
 for i in range(1, n+1):
 result *= i
 return result
 
print(factorial(3))"
Write a function to check if a dictionary is empty or not.,"def my_dict(dict1):
  if bool(dict1):
     return False
  else:
     return True"
Create a Python program that takes a number and prints the product of that number and its next two values.,"def product(num):
	return num * (num + 1) * (num + 2)

print(product(num))"
Create a Python class that holds information about a car.,"class Car:
    def __init__(self, make, model, year):
        self.make = make
        self.model = model
        self.year = year

    def description(self):
        return f'This car is a {self.year} {self.make} {self.model}'"
"Edit the following code snippet to print out ""Hello World"" instead of ""Hello Python""","print(""Hello World"")"
Create a Python module that provides a way to add two numbers and a way to subtract two numbers.,"def add(x, y):
    return x + y

def subtract(x, y):
    return x - y"
Write a Python program to implement a sorting algorithm (your choice).,"def sorting_algorithm(num_list):
    for i in range(len(num_list)):
        for j in range(i + 1, len(num_list)):
            if num_list[i] > num_list[j]:
                num_list[i], num_list[j] = num_list[j], num_list[i]
    return num_list"
Write a python function to convert complex numbers to polar coordinates.,"import cmath  
def convert(numbers):    
  num = cmath.polar(numbers)  
  return (num) "
Create a Python program to find the total number of elements in a stack.,"def findNumOfElements(stack): 
    return len(stack)"
Edit the existing Python program to append a new record with data programmatically.,"people = [
 {""name"": ""Alice"", ""age"": 8},
 {""name"": ""Bob"", ""age"": 11},
 {""name"": ""Charlie"", ""age"": 13},
 {""name"": ""John"", ""age"": 15},
]

# Append a new record with data programmatically:
record = {""name"": ""John"", ""age"": 15}
people.append(record)"
Develop a Python function to calculate the amount of words in a short text.,"def calculate_words_in_text(text):
    words = text.split("" "")
    return len(words)"
Create a class to create a linked list in python nodes.,"class ListNode:
    def __init__(self, data):
        self.data = data
        self.next = None"
Use Python to create a dictionary whose keys are strings and whose values are lists containing numbers.,"my_dict = {""cat"": [1], ""dog"": [2], ""mouse"": [3]}"
"Given a list of numbers, write a Python function to find out if any two numbers add up to a given number.","def two_sum(numbers, given):
    for i in range(len(numbers)):
        for j in range(i+1, len(numbers)):
            if numbers[i] + numbers[j] == given:
                return True
    return False"
Implement a Python function that takes a list of numbers as an input and counts the number of odd numbers in the list.,"def countOddNumbers(arr):
    count = 0
    for num in arr:
        if num % 2 != 0:
            count += 1
    return count

count = countOddNumbers([2, 3, 5, 7])
print(""Number of odd numbers found: "" + str(count))"
Write a Python program to parse a set of given comma-separated numbers in a string.,"# Parsing the string
numbers = [int(num) for num in string.split(',')]

print(numbers)"
Generate a code for a Python program that removes all instances of a given character from a string.,"def remove_letter(word, letter):
    new_word = ''
    for char in word:
        if char != letter:
            new_word += char
    return new_word 

print(remove_letter('Hello World!', 'o'))"
Create a web scraper using Python to extract a list of all the movie names from IMDb's Top 250 Movies page.,"import requests
from bs4 import BeautifulSoup

url = 'https://www.imdb.com/chart/top?sort=us,asc'
response = requests.get(url)
soup = BeautifulSoup(response.text, 'html.parser')

movie_names = []
for div in soup.find_all('div', {'class': 'lister-list'}):
  for h3 in div.find_all('h3'):
    movie_names.append(h3.find('a').text)

print(movie_names)"
Create a Python program to calculate the formula 2*sqrt(x+2).,"import math

x = 10

result = 2*math.sqrt(x+2)

print(result ) # 12.0"
Create a Python program to calculate the volume of a sphere.,"def vol_sphere(r):
    '''Calculate the volume of a sphere with a given radius'''
    return (4/3) * math.pi * r**3"
Create a Python script that will create a dictionary that contains the character count of the given string.,"from collections import Counter 
  
str = ""Python""

# character count 
# using collections.Counter() 
res = Counter(str) 

# printing result  
print(""Count of all characters in GeeksforGeeks is :\n ""
                                        +  str(res))"
Write a python function to convert decimal number to octal number.,"def decimal_to_Octal(deciNum):
    octalNum = 0
    countval = 1;
    dNo = deciNum;
    while (deciNum!= 0):
        remainder= deciNum % 8;
        octalNum+= remainder*countval;
        countval= countval*10;
        deciNum //= 8; 
    return (octalNum)"
Can you generate code to clear all whitespace from a given string in Python?,"def clear_whitespace(s):
        s = s.strip() # Remove leading and trailing whitespaces
        s = """".join(s.split()) # Remove middle whitespaces
        return s

print(clear_whitespace("" Hello World    ""))"
Write a function to find length of the string.,"def string_length(str1):
    count = 0
    for char in str1:
        count += 1
    return count"
Create a Python function to calculate the sum of two numbers using a for loop.,"def sum_of_two(x, y):
  result = 0
  for i in range(x, y+1):
    result += i
  return result"
Propose a Python program to tokenize the given sentences.,"import nltk

def tokenize_sentences(sentence):
    tokens = nltk.word_tokenize(sentence)
    return tokens"
"Using Python, create a program that calculates the average grade of 4 students.","john_grade = 85
george_grade = 90
sarah_grade = 75
emily_grade = 95

def average_grade(john_grade, george_grade, sarah_grade, emily_grade):
    return (john_grade + george_grade + sarah_grade + emily_grade) / 4

avg_grade = average_grade(john_grade, george_grade, sarah_grade, emily_grade)
print('The average grade of 4 students is', avg_grade)"
Generate a Python script to calculate the sum of the first 10 numbers.,"number_sum = 0
for i in range(1, 11):
    number_sum += i
print(number_sum) # 55"
Write a script in Python which takes a two-dimensional array as input and finds the smallest number in the array.,"def find_smallest(array):
    smallest_item = array[0][0]
    for row in array:
        for item in row:
            if item < smallest_item:
                smallest_item = item
    return smallest_item"
Create a Python program to randomly filter out half of the elements of an array.,"import random

def filter_half_array(arr):
    while len(arr)>0:
        el = random.choice(arr) # randomly select an element of the list
        arr.remove(el) # remove the selected item from the list
    return arr

arr = [9, 2, 7, 4, 5, 6, 8, 1, 4, 0]
filter_half_array(arr)"
Write a Python program that outputs the average of 3 given numbers.,"def find_average(num1, num2, num3):
 return (num1 + num2 + num3) / 3"
Create a Python program to encode an input string using base64 encoding.,"import base64

def encode_string(input_string):
    encoded_bytes = base64.b64encode(input_string.encode('utf-8'))
    return encoded_bytes.decode('utf-8')"
Generate a class in Python that contains a dictionary to store student name and their grades.,"class StudentGrades: 
    def __init__(self): 
        self.student_grades = {} 
  
    def store_grade(self, student_name, grade): 
        self.student_grades[student_name] = grade 
  
    def get_grade(self, student_name): 
        return self.student_grades.get(student_name)"
Design a function in Python which takes a string and returns the string with the last word capitalized.,"def capitalize_last_word(mystring):
    words = mystring.split()
    words[-1] = words[-1].capitalize()
    return ' '.join(words)

result = capitalize_last_word(mystring)
print(result)"
Write a Python program to replace all the vowels in a string with '#'.,"def replace_vowels(input_string):
    output_string = """"
    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']

    for char in input_string:
        if char in vowels:
            output_string += '#'
        else:
            output_string += char
    return output_string

input_string = ""Hello, I am a string.""
output_string = replace_vowels(input_string)

print(output_string)"
Create a web scraper in Python to extract the titles of all articles from Medium.,"import requests
from bs4 import BeautifulSoup

# Make a request
url = 'https://medium.com/'
response = requests.get(url) 
html = response.text 

# Parse HTML 
soup = BeautifulSoup(html, 'html5lib') 

# Extract all the titles of the articles 
titles = soup.find_all('h3', class_='graf--title') 

# Print the titles 
for title in titles:
 print(title.text)"
Write a Python code to add two numbers using bit-wise operations and print the result.,"def add_numbers(x, y):
    while (y != 0):
        carry = x & y
        x = x ^ y
        y = carry << 1
    return x

num1 = 10
num2 = 5

res = add_numbers(num1, num2)
print(res)"
Develop an algorithm in Python that takes an array of integers and returns the maximum of the numbers.,"def get_max(arr):
    max_num = None

    for num in arr:
        if max_num == None or num > max_num:
            max_num = num 

    return max_num

result = get_max([7, 9, 5, 10, 2])
print(result)"
Generate a cross-platform program in Python that takes in two sets of numbers and returns a list with the common elements found in both sets.,"def find_common_elements(set1, set2):
    result = []
    for element in set1:
        if element in set2:
            result.append(element)
    
    return result"
Create a Python program that takes in a string and counts the number of vowels in it.,"def count_vowels(s):
    count = 0
    for char in s:
        if char in ""aeiouAEIOU"":
            count += 1
    return count

s = ""Hello""
result = count_vowels(s)
print(result)"
How can you design a Python program to find the sum of all prime numbers between 1 and a given limit?,"def sum_primes(limit):
    sum = 0
    for i in range(2, limit+1):
        if is_prime(i):
            sum += i

    return sum

def is_prime(n):
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True"
Use Python to generate a program that takes a list of integers as input and prints out their factors.,"def print_factors(numbers):
    
    for n in numbers:
        print(""Factors of {}:"".format(n)) 
        for i in range(1, n + 1):
            if n % i == 0:
                print(i)

print_factors([24, 75])"
Establish a connection to a MySQL database using Python.,"import mysql.connector 
  
# connect to  database 
mydb = mysql.connector.connect( 
host=""localhost"", 
user=""yourusername"", 
passwd=""yourpassword""
) 
  
# print the connection object 
print(mydb)"
Create a Python program to randomly shuffle an array of integers.,"def shuffle(arr):
    """"""Randomly shuffles an array of integers""""""
    # Using Fisher-Yates shuffle algorithm
    for i in range(len(arr) - 1, 0, -1):
        # Generate random index
        j = random.randint(0, i)
        # Swap elements
        arr[i], arr[j] = arr[j], arr[i] 
    return arr"
Write a recursive function in Python to calculate the Fibonacci sequence for an input value N.,"def Fibonacci(n): 
   if n<0: 
      print(""Incorrect input"") 
   # First Fibonacci number is 0 
   elif n==1: 
      return 0
   # Second Fibonacci number is 1 
   elif n==2: 
      return 1
   else: 
      return Fibonacci(n-1)+Fibonacci(n-2)"
Design a python code to convert a given sentence to camelCase,"def toCamelCase(s):
    s = s.split(' ')
    return ''.join(x.title() for x in s)

s = ""this is some random text""
print(toCamelCase(s))"
Design a Python program that computes the maximum and minimum of a given list.,"def find_max_min(list_vals): 
    max_val = max(list_vals) 
    min_val = min(list_vals) 
  
    return max_val, min_val 

list_vals = [5, 3, 4, 10, 7] 
print(""Maximum value :"", find_max_min(list_vals)[0]) 
print(""Minimum value :"", find_max_min(list_vals)[1])"
Generate a Dataframe in Python,"import pandas as pd

data = [('John', 24, 'Male'), 
        ('Sarah', 32, 'Female')] 
  
# Create the pandas DataFrame 
df = pd.DataFrame(data, columns = ['Name', 'Age', 'Gender']) 
  
print(df)"
Write a python program to extract the non-vowel words in a sentence.,"def extract_words(sentence):
    non_vowel_words = []
    words = sentence.split()
    vowels = ['a','e','i','o','u','A','E','I','O','U']
    for word in words:
        if not any(char in vowels for char in word):
            non_vowel_words.append(word) 
    return non_vowel_words"
Write a Python program to remove items from a list present in other list.,result_list = [item for item in list1 if item not in list2]
Write a Python script to display a digital clock in the terminal.,"import time

def display_digital_clock():
    """"""
    function to display a digital clock in terminal
    """"""
    while True:
        current_time = time.strftime(""%H:%M:%S"", time.localtime())
        print(current_time, end='\r')
        time.sleep(1)
    
display_digital_clock()"
Create a Python program to take a list of names and sort them alphabetically.,"def sort_names_alphabetically(names):
    names.sort()
    print(names)

names = ['Adam', 'David', 'Mark', 'John', 'Sam']
sort_names_alphabetically(names)

# Output: 
# ['Adam', 'David', 'John', 'Mark', 'Sam']"
Create an algorithm in Python which takes a list of numbers and sorts them in ascending order.,"def sortAscending(numbers):
    for i in range(len(numbers)):
        for j in range(i+1,len(numbers)):
            if numbers[i] > numbers[j] :
                temp = numbers[i]
                numbers[i] = numbers[j]
                numbers[j] = temp
    return numbers

print(sortAscending([4, 1, 8, 5, 6]))

# Output:
# [1, 4, 5, 6, 8]"
Create a sentiment analysis program in Python which takes a given sentence as an input and outputs its sentiment label.,"import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer

sentence = 'This movie was great!'

sid = SentimentIntensityAnalyzer()
sentiment_scores = sid.polarity_scores(sentence)

if sentiment_scores['compound'] > 0:
 print('Positive')
elif sentiment_scores['compound'] == 0:
 print('Neutral')
else:
 print('Negative')"
Write a Python code to check whether an integer is divisible by 3 and 5.,"def is_divisible_by_3_and_5(number):
    """"""This function checks whether a number is divisible by 3 and 5.

    Parameters: 
        number (int): The number to be checked.
	
    Returns: True if the number is divisible by 3 and 5, False otherwise.
    """"""
    if (number % 3 == 0) and (number % 5 == 0):
        return True
    else:
        return False"
Create a Python script to calculate the Fibonacci sequence for a given integer n.,"# Fibonacci sequence
def Fibonacci(n):
 a = 0
 b = 1
 if n < 0:
 print(""Incorrect input"")
 elif n == 0:
 return a
 elif n == 1:
 return b
 else:
 for i in range(2,n):
 c = a + b
 a = b
 b = c
 return b

# Driver Program
print(Fibonacci(7)) 
# Output: 13"
Create a Python program to calculate the 10th Fibonacci number. The program should use a recursive approach to calculate the Fibonacci number.,"def fibonacci(n): 
    if n<0: 
        print(""Incorrect input"") 
    elif n==1: 
        return 0
    elif n==2: 
        return 1
    else: 
        return fibonacci(n-1)+fibonacci(n-2) 
  
# Driver Program 
    print(fibonacci(10))"
"Given a list of squares in a 2D array, generate a Python program to find the number of squares with a side greater than 5.","count = 0
for row in arr:
    for col in row:
        if col > 5:
            count += 1
print(count)"
Generate a Python program to demonstrate a sorting algorithm.,"def sort_list(mylist):
 for i in range(len(mylist)):
 
 min_index = i
 temp = mylist[i]
 
 for j in range(i + 1, len(mylist)):
 
  if mylist[min_index] > mylist[j]:
   min_index = j
 
 mylist[i] = mylist[min_index]
 mylist[min_index] = temp
 
 return mylist
 
mylist = [1, 5, 7, 8, 4, 10, 2]
 
print(""Sorted list is:"")
print(sort_list(mylist))"
Compose a Python program for finding the maximum number from a given list of numbers.,"def max_number(list):
    max_num = 0
    for i in list:
        if i > max_num:
            max_num = i
    return max_num

max_num = max_number(list)
print(""The maximum number is:"", max_num)"
Develop a Python program to insert a given element into a specific position in a list,"# Create a function
def insert_element(el, lst):
    # Insert the element into the specific position
    lst.insert(2, el)
    return lst

# Test the function
print(insert_element(2, [1,3,4]))

# Output
[1, 3, 2, 4]"
Create a class in Python to generate a calendar.,"class CalendarGenerator(object):

    def __init__(self, name):
        self.name = name

    def generate_calendar(self):
        calendar = []

        # Code to generate a calendar goes here

        return calendar

calendar = CalendarGenerator(calendarName)
calendar.generate_calendar()"
Generate a Python program to search an item in a given sorted list.,"def binary_search(numbers, n):
   start = 0
   end = len(numbers) - 1

   while start <= end:
      mid = (start + end) // 2
      if numbers[mid] == n:
         return mid
      elif numbers[mid] < n:
         start = mid + 1
      else:
         end = mid - 1
   return -1"
Generate a function in Python to find the maximum element from a given array.,"def findMaxElement(array):
    maxElement = 0
    for element in array:
        if element > maxElement:
            maxElement = element
    return maxElement

array = [10, 15, 20, 11, 99] 
maxElement = findMaxElement(array)
print(""The maximum element in the array is"", maxElement)"
Write a python program to fill missing values in a given dataset.,"def fill_missing_values(data):
    for column in data.columns:
        if data[column].isnull().any():
            mean = data[column].mean()
            data[column] = data[column].fillna(mean)
    return data"
Write a Python code for a program that takes an integer as an input and prints the number of divisors for that integer.,"def count_divisors(number):
    divisors = 0
    for i in range(1, number+1):
        if number % i == 0:
            divisors += 1
    print(""Number of divisors:"", divisors)"
"Write a Python program to generate a HTML table with 3 columns and 5 rows, filled with random numbers.","import random

def generate_html_table():
    html_table = ""<table>\n""
    for i in range(5):
        html_table += ""  <tr>\n""
        for j in range(3):
            html_table += ""    <td>{}</td>\n"".format(random.randint(1, 100))
        html_table += ""  </tr>\n""
    html_table += ""</table>""
    return html_table

print(generate_html_table())"
Take the following Python data structure and render it to JSON format.,"import json

data = {
 'name': 'John',
 'age': 34,
 'hobbies': ['surfing', 'hiking', 'golf']
}

json_data = json.dumps(data)

print(json_data)"
"Write a function in Python which takes two parameters, a string and a single character, and returns a count of occurrence of the single character in the string.","def countOccurrence(string, char):
    count = 0
    for c in string:
        if c == char:
            count += 1
    return count

String = ""The quick brown fox""
Character = ""q""
count = countOccurrence(String, Character)
print(count)"
Implement an algorithm in Python that takes an array of numbers and returns the maximum value in the array.,"def find_max(arr):
    max_val = arr[0]
    
    for num in arr:
        if num > max_val:
            max_val = num
    return max_val

result = find_max([2, 5, 8, 10, 4])
print(result)"
Write a python function to find the sum of fourth power of n natural numbers.,"import math  
def fourth_Power_Sum(n): 
    sum = 0
    for i in range(1,n+1) : 
        sum = sum + (i*i*i*i) 
    return sum"
Create a Python program to prompt the user for a number (x) and then print the list of its factors in increasing order.,"x = int(input(""Enter a number: ""))

# Initialize list
factors = []
# Find the factors
for i in range(1, x + 1):
    if x % i == 0:
        factors.append(i)
# Sort factors
factors.sort()

# Print the factors
print(""The factors of"", x, ""are:"")
for factor in factors:
    print(factor)"
Generate a list using a while loop in Python and appends the current number to the list.,"my_list = []

num = 0

while num < 10:
    my_list.append(num)
    num += 1

print(my_list)"
"Create a python class to store information about a person's name, address and phone number.","class Person:
    def __init__(self, name, address, phone_number):
        self.name = name
        self.address = address
        self.phone_number = phone_number
    
    def get_name(self):
        return self.name
    
    def get_address(self):
        return self.address
    
    def get_phone_number(self):
        return self.phone_number"
Write a Python program to print out the even numbers in the given list.,"#Print out even numbers from the given list
for num in list:
    if (num % 2 == 0):
        print(num)"
Create a Python function that prints a string in reverse order.,"def reverse_string(string): 
  return string[::-1] 
  
print(reverse_string(""GPT-3""))"
Add an input prompt in a Python program that asks for your name and prints it back.,"name = input(""What is your name? "")

print(""Your name is: "" + name)"
Create an algorithm in Python to determine all pairs of negative numbers in an array.,"def findNegativePairs(arr):
  results = []
  for i in range(0, len(arr)):
    for j in range(i + 1, len(arr)):
      if arr[i] < 0 and arr[j] < 0:
        results.append((arr[i], arr[j]))
  return results 

print(findNegativePairs([-2, -1, 0, 1, 2]))"
Identify errors and write fix for the following python code,"def uppercase_letter_count(string):
    count = 0
    for c in string: # Added missing colon
        if c.isupper():
            count += 1
    return count # Removed an unnecessary '-'"
Write a function in Python to find the maximum depth in a tree.,"def max_depth(root):
    if root is None:
        return 0

    left_depth = max_depth(root.left)
    right_depth = max_depth(root.right)

    return max(left_depth, right_depth) + 1"
Write an algorithm in Python that uses an iterative approach to count all elements greater than a given value in an array.,"def countGreaterThan(arr, target):
    count = 0
    for element in arr:
        if element > target:
            count += 1
    return count

# Example
arr = [7, 8, 4, 2, 9]
target = 5
print(countGreaterThan(arr, target))
# Output: 3"
Create a function in Python that checks whether a given string is a palindrome.,"def is_palindrome(string):
    # convert the string to lowercase
    str = string.lower()
    # reverse the string
    revStr = str[::-1]
    # check for the condition
    if str == revStr:
        return True
    return False"
Create a scoring system for a trivia game in Python. The system should take two inputs - the correct answer and user response - and return a single score value.,"def score_trivia(correct, user):
    correct = correct.lower()
    user = user.lower()

    max_score = 10
    score = 0

    if correct == user:
        score = max_score
    elif user in correct or correct in user:
        score = max_score * 0.8

    return score"
Generate a Python script that stores the numbers 0 to 10 in an array.,"# creating an empty array 
array = [] 
  
# loop for iterating over 
for i in range(11): 
    array.append(i) 
  
# print the array 
print(array)"
Construct a loop in Python that iterates over a given list of strings and prints each string.,"strings = [""apple"", ""banana"", ""cherry""]

for string in strings:
    print(string)"
Refactor the following Python code to improve its readability and make it easier to maintain:,images = [item for item in allitems if item.endswith('.jpg')]
Create a script in Python to sort a list of names by alphabetical order.,"names.sort()
print(names)"
Construct a Python program that reads a user input and returns twice the value.,"def double(number):
    return number * 2

# Output 
6"
Design and implement a program in Python that converts temperatures from Celsius to Fahrenheit and vice versa.,"def cel_to_fahr(cel):
    return cel * (9 / 5) + 32
  
def fahr_to_cel(fahr):
    return (fahr - 32) * (5 / 9)"
Create a new Python list with only the odd numbers from the following list.,"odd_numbers = [num for num in [1, 2, 3, 4, 5, 6, 7, 8, 9] if num % 2 != 0]"
Design a Python program that counts the number of words in a sentence.,"def countWords(sentence): 
 
    # split the sentence into words 
    words = sentence.split() 
    wordCount = len(words) 
   
    return wordCount 
  
# Driver code 
sentence = ""This is a sentence with seven words.""
wordCount = countWords(sentence) 
print(""Number of words in the sentence ="", wordCount)"
Create a Python program that uses NumPy to find the correlation coefficient between two variables.,"import numpy as np

x = np.array([1,2,3,4,5])
y = np.array([2,3,4,5,6])

corr = np.corrcoef(x, y)

print(corr[0][1]) # 0.98999999999999999"
Write a Python program to input a list of integers and remove any duplicate values.,"def remove_duplicates(my_list):
    unique_list = []
    for i in my_list:
        if i not in unique_list:
            unique_list.append(i)
    return unique_list"
Write a Python program to validate a given telephone number.,"import re

def validate_telephone_number(number): 
  pattern = '^[0-9]{10}$'
  if re.match(pattern, number): 
    return True
  else: 
    return False"
Write a Python program to classify a set of input data as either True or False.,"def classify(data):
    if min(data) < 0:
        return False
    elif max(data) > 1:
        return False
    else:
        return True"
Develop a program in Python to store 5 integer numbers in a list and print out the maximum value.,"numbers = [7, 9, 23, 0, 4]

maximum = max(numbers)

print(""The maximum value is: ""+ str(maximum))"
"Write a Python program to take a user's input, store it in a variable, and then print out a greeting combining the user's name and the value they entered.","name = input(""Name: "")
value = input(""Value: "")
print(""Hello {}, your value is {}"".format(name, value))"
Write a function to find the largest triangle that can be inscribed in an ellipse.,"import math
def largest_triangle(a,b): 
    if (a < 0 or b < 0): 
        return -1 
    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);  
    return area "
Optimize a Python code to calculate the sum of digits in a number.,"def digit_sum(n):
    if n == 0:
        return 0

    return (n % 10) + digit_sum(n // 10)

n = 123
print(digit_sum(n))"
optimize a given python code by using correct data structures and algorithms.,"def someFunction(someList):
    seen = set()
    outputList = []
    for item in someList:
        if item not in seen:
            outputList.append(item)
            seen.add(item)
    return outputList"
Rewrite the following Python function to minimize the number of lines and improve readability.,"def add_numbers(num1, num2):
    print(f""The sum of two numbers is : {num1 + num2}"")"
Design a program in Python which takes an array of words as input and return an alphabetically ordered array of the words.,"def sortAlphabetically(arr):
    arr.sort()
    return arr

print(sortAlphabetically([""apple"",""banana"",""grapes""]))"
Create a Python script that uses regular expressions to find all phone numbers in a string.,"import re

phone_string = ""(111) 111-1111""

phone_numbers = re.findall(r'\(?\d{3}\)?-?\s?\d{3}-\d{4}', phone_string)

for number in phone_numbers:
 print(number)
# Output: (111) 111-1111"
Create a for loop in Python to print out the numbers in a given list in reverse order.,"list = [1,2,3,4,5]
for i in reversed(list):
    print(i)"
Create a Python program to calculate the number of times a word appears in a given sentence.,"count = sentence.count(word)
print(count)"
"Given a Python script containing functions, optimize the code to reduce the number of iterations.","def myfunc(n):
   for i in range(0, n, 5): 
       print(i) 

def main(): 
   myfunc(50) 
   myfunc(100)"
Optimize a code snippet in Python for maximum performance.,"import time

def sleep_for_the_night():
 while True:
  start_time = time.time()
  time.sleep(5)
  end_time = time.time()
  elapsed_time = end_time - start_time
  if elapsed_time < 5:
   time.sleep(5-elapsed_time)

while True:
 sleep_for_the_night()"
Create a script in Python to replace all occurrences of a character in a string with another character.,"def replace_char(string, char1, char2):
    new_string = """"
    for char in string:
        if char == char1:
            new_string += char2
        else:
            new_string += char
    return new_string

string = ""This is an example""
new_string = replace_char(string, ""s"", ""z"")
print(new_string)
# Output: Thiz iz an example"
Create a class in Python which calculates the cost of a given item based on its size and weight.,"class CostCalculator:
    def __init__(self, size, weight):
        self.size = size
        self.weight = weight
    
    def calculate_item_cost(self):
        cost = self.size * self.weight * 0.1
        return cost"
"Using the comment as a guide, create a python loop that calculates the sum of the numbers in a given list","def sum_list(input_list):
    """"""Calculate the sum of the numbers in a given list""""""
    total = 0
    for num in input_list:
        total += num
    return total"
Create a python script that outputs the following string,print('My favorite color is blue.')
Construct a class in Python to represent a point in Cartesian coordinates.,"class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y
  
    def distance_from_origin(self):
        return (self.x ** 2 + self.y ** 2) ** 0.5
  
p = Point(3, 4)
print(p.distance_from_origin())"
Design a Python program to print a triangle pyramid pattern.,"for i in range(0, 5):
    for j in range(0, i+1):
        print(""* "",end="""")
    print(""\r"")"
Write a python function to find the smallest missing number from the given array.,"def find_First_Missing(array,start,end): 
    if (start > end): 
        return end + 1
    if (start != array[start]): 
        return start; 
    mid = int((start + end) / 2) 
    if (array[mid] == mid): 
        return find_First_Missing(array,mid+1,end) 
    return find_First_Missing(array,start,mid) "
Design a function in Python to compute the factorial of a given number.,"def factorial(n):
 if n == 0:
 return 1
 else:
 return n * factorial(n-1)"
Create a function in Python to remove all duplicates from a given list.,"def remove_duplicates(lst): 
    new_list = [] 
    for item in lst: 
        if item not in new_list: 
            new_list.append(item) 
    return new_list"
Develop a function to convert kilometers to miles in Python.,"def kms_to_miles(kms):
  miles = kms / 1.609
  return miles"
"Given a linked list, write an algorithm in Python to check if the linked list contains a cycle (i.e. the list is circular).","def contains_cycle(head):
 slow_pointer = head
 fast_pointer = head

 while fast_pointer and fast_pointer.next:
 slow_pointer = slow_pointer.next
 fast_pointer = fast_pointer.next.next

 if slow_pointer == fast_pointer:
 return True

 return False"
Optimize the following Python code to use built-in functions.,"def removeDuplicates(array): 
    finalArray = []
    for element in array: 
        if element not in finalArray: 
            finalArray.append(element)
    return finalArray"
Write a python function to find the sum of the largest and smallest value in a given array.,"def big_sum(nums):
      sum= max(nums)+min(nums)
      return sum"
Write a Python program to check if all the elements in a given list are unique.,"def is_list_unique(list):
    unique_list = list(dict.fromkeys(list))
    return len(list) == len(unique_list)"
Design a Python program to generate a set of Fibonacci numbers up to a given value.,"def fibonacci(n): 
 fib = [] 
 
 a, b = 0, 1
 while a < n: 
  fib.append(a) 
  a, b = b, a + b 
 
 return fib

n = 10
print(fibonacci(n))"
Write a Python program to split a string into a list of words.,"def split_into_words(text):
    """"""
    Splits a string into a list of words
    """"""
    # Split the text on whitespace
    return text.split()"
Write a function to find numbers divisible by m or n from a list of numbers using lambda function.,"def div_of_nums(nums,m,n):
 result = list(filter(lambda x: (x % m == 0 or x % n == 0), nums)) 
 return result"
Construct a python script to display the frequency of each words appearing in a document,"from collections import Counter
 
with open('text.txt', 'r') as f:
    data = f.read().lower().split()
    
word_counter = Counter(data)
 
# Print the sorted most common 10 words
for word, count in word_counter.most_common(10):
    print('{}: {}'.format(word, count))"
Write a python code to perform a three-way comparison of three numbers.,"def three_way_comparison(num1, num2, num3):
    if num1 > num2 and num1 > num3:
        return 1
    elif num2 > num1 and num2 > num3:
        return 2
    elif num3 > num1 and num3 > num2:
        return 3"
Write a python function to add a minimum number such that the sum of array becomes even.,"def min_Num(arr,n):  
    odd = 0
    for i in range(n): 
        if (arr[i] % 2): 
            odd += 1 
    if (odd % 2): 
        return 1
    return 2"
Convert the following JavaScript function to Python.,"def double(x):
  return 2 * x"
Write a python program to combine two lists in a dictionary. The dictionary should have the first list as keys and the second list as the corresponding values.,"def list_to_dict(keys, values):
 result = {}
 for i in range(len(keys)):
  result[keys[i]] = values[i] 
 return result"
"Create a program in Python to generate a random password. The password should contain a minimum of 8 characters including lowercase letters, uppercase letters, numbers, and special characters.","import string
import random

def generate_password(length=8):
 characters = string.ascii_letters + string.digits + string.punctuation
 return ''.join(random.choice(characters) for _ in range(length))

password = generate_password()
print(password)"
Write a python class to store an employee's ID number and name.,"class Employee:
  def __init__(self, id, name):
    self.id = id
    self.name = name

  def get_id(self):
    return self.id

  def get_name(self):
    return self.name"
Construct a function to reverse an array in Python.,"def reverse_array(arr):
    left = 0
    right = len(arr) - 1

    while left < right:
        temp = arr[left]
        arr[left] = arr[right]
        arr[right] = temp
        left += 1
        right -= 1

arr = [1, 2, 3, 4]

reverse_array(arr)

print(arr)  # [4, 3, 2, 1]"
"Using the input, write a Python function to calculate the average number of items in the list.","def average_list_items(list_items):
  list_length = len(list_items)
  list_sum = sum(list_items)
  average = list_sum/list_length
  return average"
Write a python function to find the index of smallest triangular number with n digits.,"import math 
def find_Index(n): 
    x = math.sqrt(2 * math.pow(10,(n - 1))); 
    return round(x); "
Write a function in Python to create a list containing all even numbers between 1 and 20 (inclusive).,"def even_numbers():
    even_list = []
    for number in range(1, 21):
        if number % 2 == 0:
            even_list.append(number)
    return even_list"
Create a class in Python to handle the following Student object.,"class Student:
    def __init__(self, name, age, marks):
        self.name = name
        self.age = age
        self.marks = marks
        
    def get_name(self):
        return self.name
    
    def get_age(self):
        return self.age
    
    def get_total_marks(self):
        return sum(self.marks)"
Develop an algorithm to find the least common multiple of two non-negative integers using Python.,"# Find the greatest common denominator
def gcd(num1, num2):
    if num2 == 0:
        return num1
    else:
        return gcd(num2, num1 % num2)

# Find the least common multiple
def lcm(num1, num2):
    return (num1 * num2) // gcd(num1, num2)

num1 = 12
num2 = 18

print(lcm(num1, num2))"
Create a Python method which will make an HTTP GET request to the given URL and return the response.,"import requests

def getRequest(url):
 response = requests.get(url)
 return response

res = getRequest('http://www.example.com/')
print(res.text)"
Generate Python code that collects all the even numbers from a given list of numbers.,"def collect_even_numbers(nums):
    even_nums = []
    for num in nums:
        if num % 2 == 0:
            even_nums.append(num)
    return even_nums"
Write a Python program to find the most common number among a given array of numbers.,"def most_common(arr):
    counts = {}
    for n in arr:
        if n in counts:
            counts[n] += 1
        else:
            counts[n] = 1
    max_count = 0
    max_element = None
    for k, v in counts.items():
        if v > max_count:
            max_count = v
            max_element = k
    return max_element"
Write a function to check if the given tuple list has all k elements.,"def check_k_elements(test_list, K):
  res = True
  for tup in test_list:
    for ele in tup:
      if ele != K:
        res = False
  return (res) "
Provide a type definition for the following class in Python.,"from typing import NamedTuple

class Student(NamedTuple):
    name: str
    age: int"
Create a Python script for downloading webpages from a list of URLs.,"import requests

urls = [""https://www.google.com"", ""https://www.youtube.com"", ""https://www.yahoo.com""]

for url in urls:
 response = requests.get(url)
 html = response.text
 with open(f""{url.split('//')[1]}.html"", ""w"") as file:
 file.write(html)"
Construct a Python script for finding the second smallest element in a given list.,"def secondSmallestElement(lst): 
    min1 = min(lst[0], lst[1]); 
    min2 = max(lst[0], lst[1]); 
   
    for i in range(2, len(lst)): 
        if lst[i] < min1: 
            min2 = min1; 
            min1 = lst[i]; 
   
    return min2;"
Build a python program to extract only the unique words from the following sentence.,"def extract_unique_words(sentence):
    words_list = sentence.split()
    unique_words_list = set(words_list)
    return unique_words_list"
Generate a Python program that normalizes a given array by subtracting the mean.,"def normalize(arr):
   mean = sum(arr) / len(arr)
   normalized_arr = [x - mean for x in arr]
   return normalized_arr"
Create an algorithm in Python that takes in a two-dimensional array (matrix) and returns a flattened version of the array.,"def flattenMatrix(matrix):
    return [elem for row in matrix for elem in row]

matrix = [[1,2,3],
          [4,5,6],
          [7,8,9]] 

flatMatrix = flattenMatrix(matrix)
print(flatMatrix)

# Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]"
Write a code in Python to find the sum of all the prime numbers less than or equal to a given number.,"def sum_of_primes_below(n):
    prime_sum = 0
    for num in range(2, n+1):
        for i in range(2,num):
            if (num % i == 0):
                break
        else:
            prime_sum += num
    return prime_sum"
Create a command-line tool in Python that can calculate the sum of two numbers.,"import argparse

# Create a parser
parser = argparse.ArgumentParser()
# Add the arguments
parser.add_argument('--num1', type=int, help='First number')
parser.add_argument('--num2', type=int, help='Second number')
# Execute the parse_args() method
args = parser.parse_args()

#Calculate the sum
sum = args.num1 + args.num2
#Print the sum
print(sum)"
Generate a Python code snippet to combine two dictionaries.,"dict3 = {**dict1, **dict2}"
Can you create a program to implement the factorial of a number,"# Python code to implement factorial 
def factorial(n): 
    # single line to find factorial 
    return 1 if (n==1 or n==0) else n * factorial(n - 1);  
  
# Driver Code 
num = 5; 
print(""Factorial of"", num, ""is"",  factorial(num))"
"In Python, generate a function to extract data from a MySQL table, given a query string.","def extract_data_from_mysql(query_string):
    conn = mysql.connector.connect(host=""localhost"", user=""root"", passwd=""password"", database=""student"")
    
    cursor = conn.cursor()
    cursor.execute(query_string)
    
    result = cursor.fetchall()
    
    conn.close()
    
    return result"
What is the shortest way to sort a list of integers in descending order in Python?,"# using the sorted function with key parameter 
list_of_ints = [8, 0, 7, 4, 5, 6, 9]

sorted_list_ints = sorted(list_of_ints, key=lambda num: -num)

print(sorted_list_ints) #[9, 8, 7, 6, 5, 4, 0]"
Write a function to split a list for every nth element.,"def list_split(S, step):
    return [S[i::step] for i in range(step)]"
Create a python program that reads a list of names and picks a random name from that list.,"import random

names = [""John"", ""Mary"", ""Paul"", ""Gerry""]

print(""The randomly chosen name is"", random.choice(names))"
"Generate an appropriate Python program to calculate the future value of an investment with the given principal, rate of interest and years.","# Calculate the Future Value of an Investment 
def future_value(principal, rate, years): 

# Calculate the total amount  
total_amount = principal * (1+(rate/100))**years

# return the future value
return round(total_amount,2)

# Testing 
print(future_value(10000,10,5))"
Create a Python program that takes a list of digits as input and returns a 2D list of all the possible permutations of these digits.,"def permutations(nums):
 permutations_list = []
 for permutation in itertools.permutations(nums):
 permutations_list.append(list(permutation))
 
 return permutations_list
 
 print(permutations([1, 2]))
# Output: [[1, 2], [2, 1]]"
Implement a function in Python which takes an array of integers and an integer target and returns whether the given target exists in the array or not.,"def contains_target(numbers, target):
    return target in numbers"
Can you generate a program to convert a given string to a list of characters in Python,"def string_to_list(string):
    char_list = []
    for char in string:
        char_list.append(char)
    return char_list"
Can you generate a Python program that takes a list of numbers and creates a new list with only even numbers?,"def extractEvenNumbers(numbers): 
    even_numbers = [num for num in numbers if num % 2 == 0]
    return even_numbers
  
numbers = [1, 2, 3, 4, 5, 6, 7, 8]
even_numbers = extractEvenNumbers(numbers)
print(even_numbers)"
"Given two strings A and B, construct a Python program to determine if B is a substring of A.","def is_substring(A, B): 
    if B in A: 
        return True 
    else: 
        return False"
Generate a SQL query in Python to find the sum of numbers in a given dataset.,"import pandas as pd

df = pd.DataFrame([[1, 2], [3, 4], [5, 6]])

query = 'SELECT SUM(NUM1 + NUM2) AS SUM_NUM FROM df'

sum_num = pd.read_sql_query(query, con=df.to_sql('df'))
print(sum_num)"
Create a call to an external API in Python and process the response.,"import requests

url = 'https://www.example.com/api/data'
response = requests.get(url)
data = response.json()

# Process response data
for item in data:
  # Do something with item..."
Write a script in Python to extract the title of a webpage from its HTML code.,"soup = BeautifulSoup(html, 'html.parser')
title = soup.find('title').text
print(title)"
"Given a string which humans can read, write a Python program to create a list that contains all the words in the string in reverse order","input_words = input_string.split()
output_words = [word[::-1] for word in input_words]
print(output_words)"
Write a Python program to look for an element in an array and return its index if found or -1 otherwise,"def search_element(arr, ele):
    for i in range(len(arr)):
        if arr[i] == ele:
            return i
    return -1"
Write a Python program to convert all strings in a list to uppercase.,"def to_uppercase(list):
  return [item.upper() for item in list]"
Make a program that finds the reverse of a string in Python.,"def reverse(s): 
    return s[::-1] 

reverse(""Hello World"")"
Design a Python program to find all the palindromes in a given list of words.,"mylist = [""apple"", ""eye"", ""ball"", ""abba""]

palindromes = [word for word in mylist if word == word[::-1]]
print(palindromes)"
Convert a SQL query to Python code.,"import sqlite3

conn = sqlite3.connect('database.db')
c = conn.cursor()
c.execute('SELECT * FROM orders WHERE status = \'shipped\'')

result = c.fetchall()

for row in result:
    print(row)

conn.close()"
Write a Python code snippet to split a given text into sentences.,"import nltk
from nltk.tokenize import sent_tokenize

def split_into_sentences(text):
    sentences = sent_tokenize(text)
    return sentences"
edit the following Python code to make the loop stop when the counter is equal to five,"counter = 0
while counter < 10:
    print(counter)
    if counter == 5:
        break
    counter = counter + 1"
Construct a Python program to sort an array in descending order.,"def descending_sort(arr): 
    for i in range(len(arr)): 
        for j in range(0, len(arr)-i-1): 
            if arr[j] < arr[j+1] : 
                arr[j], arr[j+1] = arr[j+1], arr[j]
    return arr
  
arr = [4, 5, 2, 6, 1, 3]
  
descending_sort(arr)

print (""Sorted array is:"") 
for i in range(len(arr)): 
    print (""%d"" %arr[i])"
Create a script in any language that will accept two variables and will swap their values.,"# Python
def swap(a, b):
    temp = a
    a = b
    b = temp
    return (a, b)

# JavaScript
function swap(a, b) {
    let temp = a;
    a = b;
    b = temp;
    return [a, b];
}"
Generate a Python script that takes any number of integer arguments and returns their sum.,"def sum_ints(*args):
    total = 0
    for num in args:
        total += num
    
    return total

print(sum_ints(3, 5, 7))"
Can you modify the given Python program to fetch the top 5 elements in the list?,"sequence = [2, 8, 6, 4, 1, 9, 5]

top_5 = sorted(sequence)[-5:]

print(top_5)"
"Write a Python program to replace all empty strings in a given list with ""NULL"".","data = [""A"", ""NULL"", ""B"", ""NULL"", ""C"", ""NULL""]

##
new_data = []
for i in data:
 if i == """":
 new_data.append(""NULL"")
 else:
 new_data.append(i)

print(new_data)"
Create a Python function which adds the given list of numbers and returns the sum.,"def add_nums(list_of_nums):
 sum = 0
 for num in list_of_nums:
  sum += num
 return sum

sum_of_nums = add_nums(list_of_nums)
print(sum_of_nums) # 15"
Convert the given JSON object to a Python list.,"data = {""name"": ""John"", ""age"": 25, ""hobby"": ""programming""}

list = list(data.values())
 
print(list)
# Output: [""John"", 25, ""programming""]"
Implement a method in Python to calculate the factorial of a given number.,"def factorial(x):
    result = 1
    for i in range(1,x+1):
        result = result*i
    return result
    
print(factorial(5))"
Create a function in Python to search a list for a given item.,"def search_list(lst, item): 
    for i in range(len(lst)): 
        if lst[i] == item: 
            return i 
    return -1

idx = search_list(list, item) 
if idx == -1: 
    print(""Item not found"")
else:
    print(""Item found at index"", idx)"
Create a basic search engine using Elasticsearch and Python. The search engine should allow users to enter a query and return a list of relevant documents.,"from elasticsearch import Elasticsearch

# create the client
es = Elasticsearch()

# define the query
query = {
 ""query"": {
 ""match"": {
 ""text"": ""query_term""
 }
 }
}

# search the index
response = es.search(index=""index_name"", body=query)

# print the results
for hit in response[""hits""][""hits""]:
 print(hit[""_source""])"
Write a function to find length of the subarray having maximum sum.,"from sys import maxsize 
def max_sub_array_sum(a,size): 
	max_so_far = -maxsize - 1
	max_ending_here = 0
	start = 0
	end = 0
	s = 0
	for i in range(0,size): 
		max_ending_here += a[i] 
		if max_so_far < max_ending_here: 
			max_so_far = max_ending_here 
			start = s 
			end = i 
		if max_ending_here < 0: 
			max_ending_here = 0
			s = i+1
	return (end - start + 1)"
Write a function to count coin change.,"def coin_change(S, m, n): 
    table = [[0 for x in range(m)] for x in range(n+1)] 
    for i in range(m): 
        table[0][i] = 1
    for i in range(1, n+1): 
        for j in range(m): 
            x = table[i - S[j]][j] if i-S[j] >= 0 else 0
            y = table[i][j-1] if j >= 1 else 0 
            table[i][j] = x + y   
    return table[n][m-1] "
"Create a function in Python that takes a list as an input and returns a list containing the same elements, but with all duplicates removed.","def remove_duplicates(list):
 result = []
 for element in list:
  if element not in result:
    result.append(element)
 return result

print(remove_duplicates(list)) # Will return [1, 2, 3, 4, 5]"
Write a python code to sort the given array of numbers in ascending order.,"""""""
Sort array of numbers in ascending order
""""""

def sort_in_ascending(arr):
    arr.sort()
    return arr

if __name__==""__main__"":
    arr = [3, 5, 1, 6, 9, 4]
    sorted_arr = sort_in_ascending(arr)
    print(""Sorted array in ascending order is ""+str(sorted_arr))"
Define a function in Python that takes two strings and returns a new string which is the concatenation of the two.,"def concatenate_two_strings(str_1, str_2):
    return str_1 + str_2

conc_str = concatenate_two_strings(""Hello"", "" World"")
print(conc_str)"
"Write a Python program to define a class Employee and add methods to get salary, change name and change salary.","class Employee:

    def __init__(self, name, salary):
        self.name = name
        self.salary = salary
    
    def get_salary(self):
        return self.salary
    
    def change_name(self, name):
        self.name = name
    
    def change_salary(self, salary):
        self.salary = salary"
Write a function in Python that returns the nth term in a Fibonacci sequence.,"# Fibonacci sequence generator
def fibonacci(n):
  a = 0
  b = 1
  if n < 0:
    print(""Incorrect input"")
  elif n == 1:
    return a
  elif n == 2:
    return b
  else:
    for i in range(2,n):
      c = a + b
      a = b
      b = c
    return b"
Generate a python script that replaces each character in a string with its reverse:,"def reverseString(string):
    n = len(string) 
    # create an empty array
    revString = [0 for i in range(n)] 
  
    for i in range(n):
        revString[n-i-1] = string[i] 
  
    return ""("" + ''.join(revString) + "")""
print(reverseString(""Hello World""))"
Generate a function in Python for sorting a list of numbers in decreasing order.,"def sort_list(numbers): 
    sorted_list = sorted(numbers, reverse=True)
    return sorted_list"
Generate a random integer within a range of 1 to 10 using Python.,"import random
random_number = random.randint(1, 10)
print(random_number)"
Create a Python script to transform a number into its equivalent binary format.,"def to_binary(num): 
    # convert to a binary number
    if num > 1: 
        to_binary(num // 2)
    print(num % 2,end = '')"
Design a Python function to return the sum of three numbers.,"def sum_three_numbers(nums):
    return sum(nums)

result = sum_three_numbers([5, 10, 8])
print(result)"
What Python code can you create to remove the second character from a given string?,"removed_string = string[:1] + string[2:]
print(removed_string) # ""xample"""
Implement a sorting algorithm in Python that takes in a list of integers and returns a sorted version.,"def sort_list(lst): 
  for i in range(len(lst)):
    min_idx = i
    for j in range(i+1, len(lst)):
      if lst[min_idx] > lst[j]:
        min_idx = j
    lst[i], lst[min_idx] = lst[min_idx], lst[i]
  return lst

print(sort_list([3, 5, 18, 6, 1, 20]))"
Generate Python code that computes the nth Fibonacci number.,"def nth_fibonacci(n):
    """"""Return the nth Fibonacci number""""""
    a = 0
    b = 1
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        for i in range(2, n):
            c = a + b
            a = b 
            b = c
        return b"
"Write a Python program to generate random passwords of six characters long and include lowercase letters, uppercase letters, and numbers.","import string
import random

def generate_password():
 password_characters = string.ascii_letters + string.digits 
 password = ''.join(random.choice(password_characters) for i in range(6))
 return password

print(generate_password())"
Create a recursive function in Python to calculate the Fibonacci numbers up to the nth term.,"def computeFibonacci(n): 
   if n<0: 
      print(""Incorrect input"") 
   elif n==1: 
      return 0
   elif n==2: 
      return 1
   else: 
      return computeFibonacci(n-1)+computeFibonacci(n-2)"
Create an algorithm in Python to find the smallest number in an unsorted list,"def find_smallest(list):
    smallest = list[0]
    for num in list:
        if num < smallest:
            smallest = num
    return smallest

result = find_smallest([12, 5, 9, 8, 10])
print(result)"
Create a serverless API in Python that takes a text string as input and returns the associated Wikipedia page for the text.,"import wikipedia

def get_wiki_page(query):
 try:
 page = wikipedia.page(query)
 except:
 return None
 
 return page.content"
Write an Algorithm to sort an array of integers using the insertion sort technique in Python,"def insertion_sort(arr): 
 for i in range(1, len(arr)): 
 key = arr[i] 
 j = i-1
 while j>=0 and key < arr[j] : 
 arr[j+1] = arr[j] 
 j -= 1
 arr[j+1] = key 
return arr 
  
arr = [9, 3, 4, 2, 6, 7]
answer = insertion_sort(arr)
print(answer) # [2, 3, 4, 6, 7, 9]"
Develop a function in Python to normalize a string.,"import string

def normalize_string(string):
    normalized_string = string.lower().strip().translate(str.maketrans('', '', string.punctuation))
    return normalized_string"
Suggest a function to round a float number to two decimal places in Python.,"def round_to_two_decimals(x):
    return round(x, 2)"
Create a python program to remove all characters in a string that occur more than once,"def remove_duplicates(string):
    unique_chars = """"
    for ch in string:
        if ch not in unique_chars:
            unique_chars += ch

    return unique_chars

remove_duplicates(""aaabbcdefg"") # returns ""bcdefg"""
Write a python function to find remainder of two numbers.,"def find(n,m):
  r = n%m
  return (r)"
Build an HTTP API endpoint in Python using Flask that allows a user to add two numbers and returns the sum of the two numbers.,"from flask import Flask, request
app = Flask(__name__)
 
@app.route('/add', methods=['POST'])
def add():
    num1 = request.json['num1']
    num2 = request.json['num2']
    sum = num1 + num2
    return {'sum': sum}

if __name__ == '__main__':
    app.run(debug=True)"
Create an algorithm using Python to generate random passwords.,"import random
 
def generate_password(length):
    # Generate a random password that is length characters long
    chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'
    password = ''
    for _ in range(length):
        password += random.choice(chars)
    return password
 
generated_password = generate_password(10)
print(generated_password)"
"Create a python object to store a students name, roll number, and courses","class Student:
  def __init__(self, name, roll_number, courses):
    self.name = name 
    self.roll_number = roll_number 
    self.courses = courses"
Write a python program to find the smallest element in an array.,"def find_smallest(arr):
    smallest = arr[0]
    for i in range(1, len(arr)):
        if arr[i] < smallest:
            smallest = arr[i]
    return smallest"
"Given a list of numbers, write a Python program to find the number which occurs the most in the list","def most_frequent(list1): 
	return max(set(list1), key = list1.count) 

list1 = [1, 2, 3, 4, 4, 3, 3, 3]
print(""Number that occurs the most in the list is : "", most_frequent(list1))"
Design a Graphical User Interface (GUI) in Python with a label and a button.,"import tkinter as tk

root = tk.Tk()
root.title('My App')

# Create a label
label = tk.Label(root, text=""Hello, World!"")
label.pack()

# Create a button
button = tk.Button(root, text = ""Click Me!"")
button.pack()

root.mainloop()"
Write a code snippet in Python to print out the contents of a given dictionary.,"dictionary = {""apple"": 1, ""banana"": 2, ""carrot"": 3}

for item in dictionary:
  print(""{}: {}"".format(item, dictionary[item]))"
Generate a Python program to solve the Tower of Hanoi puzzle.,"def hanoi(n, source, helper, target):
    if n > 0:
        # move tower of size n - 1 to helper:
        hanoi(n - 1, source, target, helper)
        # move disk from source peg to target peg
        if source:
            target.append(source.pop())
        # move tower of size n-1 from helper to target
        hanoi(n - 1, helper, source, target)"
Modify the following python code to print the count of values greater than 5.,"data = [1,2,3,4,5,6,7,8,9]

count = 0
for value in data:
  if value > 5:
    count += 1

print(count)"
Edit a given Python program in order to make it run faster.,"# This function calculates the sum of the numbers 0 to n.
def my_sum(n):
  if n <= 1:
    return n
  else: 
    return n + my_sum(n-1)"
Create a function in Python that takes a list of strings and replaces each string with its length.,"def length_strings(string_list):
  new_list = []
  for string in string_list:
    new_list.append(len(string))
  return new_list

print(length_strings([""apple"", ""banana"", ""mango""])) # [5, 6, 5]"
Compile a list of data types for Python,"In Python, there are various data types such as strings, numbers (integer, float, complex), booleans, lists, tuples, dictionaries and sets."
Develop a Python script to delete all non-alphabetic characters in a string.,"def remove_non_alpha(string):
    new_string = """"
    for char in string:
        if char.isalpha():
            new_string += char
    return new_string"
Design a program to reverse a given string.,"def reverse_string(input_string):
    reversed_string = """"
    for i in range(len(input_string)-1, -1, -1):
        reversed_string += input_string[i]
    return reversed_string

input_string = ""Python""

print(reverse_string(input_string))"
"Given a list of integers, write a Python program to compute the maximum difference between any two numbers of the list?","def max_difference(numbers):
 max_diff = 0
 for i in range(len(numbers)-1):
 for j in range(i+1, len(numbers)):
 cur_diff = abs(numbers[i] - numbers[j])
 if cur_diff > max_diff:
 max_diff = cur_diff
 return max_diff

result = max_difference([4, 8, 2, 10, 6])
print(result)"
Develop Python code to print all possible permutations of a given string.,"def permutations(string): 
    if string == """": 
        return [''] 
          
    prev_list = permutations(string[1:]) 
    next_list = [] 
    char = string[0] 
    for word in prev_list: 
        for j in range(len(word) + 1): 
            next_list.append(word[:j] + char + word[j:]) 
    return next_list 

string = ""abc""
perm_list = permutations(string) 
print (perm_list)"
Create a set in Python to store the elements of an array.,"numbers = [1, 2, 3, 4, 5, 6]
numbers_set = set(numbers)"
Can you create a Python function that returns the sum of all the elements in a given list?,"def list_sum(list):
   sum = 0
   for el in list:
       sum += el
   return sum"
Write a function to calculate the perimeter of a regular polygon.,"from math import tan, pi
def perimeter_polygon(s,l):
  perimeter = s*l
  return perimeter"
Create a Python program to display the prime numbers between 1 and 100.,"for num in range(2,101):
for i in range(2,num):
 if (num % i) == 0:
 break
 else:
 print(num)"
Create a python program to insert a new element into a given list in the correct order,"def insert_element(array, element):
    if element >= array[len(array)-1]:
        array.append(element)
    else:
        for i in range(len(array)):
            if element < array[i]:
                array.insert(i, element)
                break
    return array"
Write a Python function that takes two strings as arguments and returns true if the second string could be obtained by rotating the first string.,"def is_rotation(str1, str2):
    if len(str1) == len(str2) and len(str1) > 0:
        return (str1 + str1).find(str2) != -1
    return False
    
is_rotation('waterbottle', 'erbottlewat')"
Optimize a Python function for maximum performance.,"def reverse_string(s): 
    start = 0 
    end = len(s) 
    string="""" 

    while end > 0: 
        string += s[end-1] 
        end -= 1

    return string"
Write a script in Python to sort a list of words alphabetically.,"def sort_words(words):
    '''
    Function to sort a list of words alphabetically
    
    Parameters
    words: list of strings
    
    Returns
    sorted list of strings
    '''
    sorted_list = sorted(words)
    return sorted_list"
Write a python script to sort the given array,"arr = [10, 15, 7, 8, 12]
arr.sort()
print(arr)"
Generate a code snippet in Python to convert a string with the following format to a dictionary. (name1=123&name2=456&name3=789).,"inp = ""name1=123&name2=456&name3=789""
kv = inp.split(""&"")
d = {}
for i in kv:
    k,v = i.split(""="")
    d[k] = v

print(d)"
Create a class in Python 3 which describes a rectangle in a two-dimensional plane.,"class Rectangle:
    
    def __init__(self, length, width):
        self.length = length
        self.width = width
        
    def get_area(self):
        return self.length * self.width
    
    def get_perimeter(self):
        return 2*(self.length + self.width)"
Generate a valid Python script which calculates the median of a given  list of numbers.,"def median(my_list):
  my_list.sort()
  if len(my_list) % 2 == 0:
    return (my_list[(len(my_list) // 2) - 1] + my_list[(len(my_list)) // 2]) / 2
  return my_list[len(my_list) // 2]"
Create a Python program to print out the numbers in reverse order from 100 to 1.,"for i in range (100,0,-1):
    print(i)"
Design a Python function to sort a list of strings by their first character alphabetically.,"def sort_list_by_first_char(strings):
    return sorted(strings, key=lambda s: s[0])

strings = [""yesterday"", ""today"", ""tomorrow""]
print(sort_list_by_first_char(strings))"
Create a function in Python that will take an array of integers and return the minimum value.,"def find_min(arr):
min = arr[0]
for num in arr:
 if num < min:
 min = num
return min

# Test
arr = [3, 9, 0, 7, 88]
min_val = find_min(arr)
print(""Minimum value is:"", min_val)  # Output: Minimum value is: 0"
Create a basic Python script that takes a user's input and calculates the sum of all digits in the input.,"# sum of all digits
def sum_of_digits(number):
 total = 0
 while number > 0:
 digit = number % 10
 total += digit
 number = number // 10
 
 return total

# get user input
number = int(input(""Enter a number: ""))

# calculate the sum
result = sum_of_digits(number)

# print the result
print(""Sum of all digits:"", result)"
Sort a given list of integers in Python in ascending order.,list_of_integers.sort()
Write a function to calculate volume of a tetrahedron.,"import math
def volume_tetrahedron(num):
	volume = (num ** 3 / (6 * math.sqrt(2)))	
	return round(volume, 2)"
Write a valid python statement to convert a dict to a list,mylist = list(mydict.items())
Answer a question using Python.,"int sum = 0
 
for i in range(500, 1000):
  if(i % 25 == 0):
    sum += i
 
print(sum)"
Write a function to convert the given tuple to a key-value dictionary using adjacent elements.,"def tuple_to_dict(test_tup):
  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))
  return (res) "
Create a Python dictionary to store data about a student.,"student_data = {
    'name': 'John Smith',
    'year': 'Freshman',
    'gpa': 3.25,
    'courses': ['math', 'english', 'Computer Science', 'Statistics'],
    'extracurricular': ['Chess Club', 'Student Government', 'Debate Team']
}"
Create a Python function that takes a list of strings as input and returns a dictionary of words with their frequency counts.,"def word_count(words):
    counter = {}
    for word in words:
        if word not in counter:
            counter[word] = 0
        counter[word] += 1
    return counter
    
words = [""apple"", ""orange"", ""apple"", ""orange"", ""pear""]
word_count(words)
""""""
{'apple': 2, 'orange': 2, 'pear': 1}
"""""""
Create a Python program which prints the top three elements in a given list,"def top_three(list):
    sorted_list = sorted(list, reverse = True) 
    return sorted_list[:3]"
Create a Python function to score the similarity between two strings.,"def score_similarity(str1, str2):
    n = len(str1)
    m = len(str2)
    dp = [[0 for _ in range(m + 1)] for _ in range(n + 1)]

    for i in range(1, n + 1):
        for j in range(1, m + 1):
            if str1[i - 1] == str2[j - 1]:
                dp[i][j] = dp[i - 1][j - 1] + 1
            else:
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])

    return dp[n][m] / (n + m)"
Generate code to implement quick sort in Python.,"def quicksort(arr):
 if len(arr) <= 1:
 return arr
 pivot = arr[len(arr) // 2]
 left = [x for x in arr if x < pivot]
 middle = [x for x in arr if x == pivot]
 right = [x for x in arr if x > pivot]
 
return quicksort(left) + middle + quicksort(right)"
Upgrade the following code so that it runs on Python 3,"print(""Hello World!"")"
Write a Python program to create a dictionary mapping letters to numbers and numbers to letters.,"letters_numbers = {
 'a': 1, 'b': 2, 'c': 3,  'd': 4, 'e': 5,
 'f': 6, 'g': 7, 'h': 8,  'i': 9, 'j': 10,
 'k': 11, 'l': 12, 'm': 13, 'n': 14, 'o': 15,
 'p': 16, 'q': 17, 'r': 18, 's': 19, 't': 20,
 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26
}
numbers_letters = dict(zip(letters_numbers.values(), letters_numbers.keys()))
print(numbers_letters)"
Create a code generation task to generate a Python program to calculate the sum of a list of numbers.,"def list_sum(nums): 
    '''This function will take a list as input and return the sum of its elements.'''
    result = 0
    for num in nums:
        result += num
    return result

nums = [2, 5, 10, 15]
print(list_sum(nums))"
Generate a Python program to find the greatest common divisor (GCD) for two given numbers.,"def gcd(number1, number2): 
    if(number2 == 0): 
        return number1 
    return gcd(number2, number1%number2) 

first_num = 6
second_num = 4

print(""The greatest common divisor of 6 and 4 is"", gcd(first_num, second_num))"
Generate a Python program to identify prime numbers up to a given positive integer.,"def isPrime(num):
    for i in range(2, num):
        if num % i == 0:
            return False
    return True

n = int(input(""Enter any positive integer: ""))

print(""Prime numbers up to"", n, ""are:"")
for i in range(2, n+1):
    if isPrime(i):
        print(i, end = "" "")"
Generate a script in Python to run a linear regression model using scikit-learn.,"import numpy as np
from sklearn.linear_model import LinearRegression

x = np.array([[7,5,3,9,8,4]]).T
y = np.array([7,3,4,6])

model = LinearRegression()
model.fit(x, y)

preds = model.predict(x)

print(f""R-squared score: {model.score(x,y)}"")
print(f""Coefficients: {model.coef_}"")
print(f""Predictions: {preds}"")"
Generate a function to print a Fibonacci series with n steps (including 0) in Python.,"def printFibo(n): 
    a = 0
    b = 1
    if n < 0: 
        print(""Incorrect input"") 
    elif n == 0: 
        print(a) 
    elif n == 1: 
        print(a,b) 
    else: 
        print(a,b,end="" "") 
        for i in range(2,n): 
            c = a + b 
            a = b 
            b = c 
            print(b,end="" "") 

printFibo(10)"
Develop a Python program that prints out the nth Fibonacci number.,"def fibonacci(n): 
    a = 0
    b = 1
    if n < 0: 
        print(""Incorrect input"") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2,n): 
            c = a + b 
            a = b 
            b = c 
        return b 

print(fibonacci(n))"
"Create a function in Python that takes a list as input and searches for a number ""x"" and returns the index of it.","def search(arr, x):
    for i in range(len(arr)):
        if arr[i] == x:
            return i
    return -1

arr = [10, 8 , 5, 15]
x = 15
print(search(arr, x))"
"Define and implement a Python class to represent a date object that stores the day, month, and year as separate fields.","class Date:
    # Constructor
    def __init__(self, day=1, month=1, year=1990):
        self.day = day
        self.month = month
        self.year = year
    
    # String representation
    def __str__(self):
        return '%02d/%02d/%4d' % (self.day, self.month, self.year)"
"Generate code for a Python for loop that prints ""Hello World"" n times.","for i in range(5):
 print(""Hello World"")"
Write a Python program to search for a specific value in a large array of integers and return the index of the value if found.,"def search(arr, target):
 for i in range(len(arr)):
  if arr[i] == target:
   return i
 return -1
  
arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
target = 8
index = search(arr, target)
if index != -1:
 print(""Found at index: "" + str(index))
else:
 print(""Not Found"")"
Modify this Python program to compute the sum of all elements in a multi-dimensional array.,"def sum_multi_dim_array(multi_dim_array):
    # init sum to 0 
    sum = 0 
  
    # iterate over rows 
    for row in multi_dim_array: 
  
        # iterate over columns 
        for num in row: 
  
            # add number to sum 
            sum += num 
  
    return sum"
"Write a SQL query to find all the articles with a title containing the word ""Python"".","SELECT * FROM Articles 
 WHERE title LIKE '%Python%';"
Edit the following code snippet to ensure it meets the Python PEP 8 coding standards.,"def example_function(a, b):
    return a + b"
Compute the output of this Python program.,"3
2
1
Blast off!"
"Generate an algorithm in Python that given a string of words, should check if it is a Palindrome.","def isPalindrome(s):
 s = s.lower()
 
 left = 0
 right = len(s) - 1
 
 while left < right:
 if s[left] != s[right]:
 return False
 left += 1
 right -= 1
 
 return True

s = 'racecar'
isPalindrome = isPalindrome(s)

print(isPalindrome) # Output: True"
Generate a Python function that takes a dictionary as an argument and returns an inverted dictionary.,"def invert_dictionary(d):
 inverted_d = {}

 for key, value in d.items():
 if value not in inverted_d:
 inverted_d[value] = []
 inverted_d[value].append(key)

 return inverted_d"
Create Python code to edit a given piece of code and make it more efficient.,"def sum_of_squares(arr):
    total = 0
    for num in arr:
        total += num * num
    return total"
Create a program in Python that prints the following figure with the given number of units.,"for row in range(7):
    for col in range(7):
        if (row + col) % 2 == 0:
            print('#', end='')
        else:
            print(' ', end='')
    print()"
Generate a reinforcement learning algorithm.,"Create a Python program to implement a reinforcement learning agent that utilizes Q-learning for solving an environment with sparse rewards. The algorithm should keep the learning agent in a continuous loop of taking actions, observing rewards and updating the Q-value function to reach the outcome desired."
"Using the Python language, build a function which takes a list of integers as an argument and returns the sum of those numbers.","def sum_list(numbers):
  summed_value = 0
  for num in numbers:
    summed_value += num
  return summed_value"
"Create a program in Python, which takes two parameters: a list of integers and a number X, and returns true if there are two numbers in the list, such that their sum is equal to X.","def two_sum(lst, x):
 for i in range(len(lst)):
  for j in range(i+1, len(lst)):
   if lst[i] + lst[j] == x:
    return True 
 return False

list = [1, 3, 7, 4, 5]
X = 12

two_sum(list, X) # True"
Create a function in Python that takes a string of any length and capitalizes every word.,"def capitalize_words(string):
 words = string.split(' ')
 capitalized = [word.capitalize() for word in words]
 return ' '.join(capitalized)

# Usage

print(capitalize_words('hello world')) # Hello World"
Design a Python module that prints out a table of squares for input ranging from 0 to 10.,"def print_table():
    print("" x | x^2"")
    print(""-----------"")

    for i in range(11):
        answer = i * i
        print(f"" {i} | {answer}"")

print_table()"
Create a Python program that reads two dates and computes the number of days between them.,"from datetime import date

date_1 = date(2020, 1, 1)
date_2 = date(2020, 1, 30)

diff = date_2 - date_1
print('There are {} days between the two dates.'.format(diff.days))"
Create a program in Python that reads a text and then prints out the longest word in the text.,"def find_longest_word(text):
  words = text.split("" "")
  longest = """"
  for word in words:
    if len(word) > len(longest):
      longest = word
  
  return longest

if __name__ == ""__main__"":
  text = ""This is an example of a sample text.""
  print(find_longest_word(text))"
Develop an algorithm to detect and fix Python syntax errors in a given code snippet.,"def test():
    x = 5
    y = 3
    try:
        z
    except NameError:
        print(""NameError: Name 'z' is not defined"")"
Create a Python program that takes a sentence as an input and replaces all the blank spaces with hyphens.,"def replace_spaces(str):
 return str.replace("" "", ""-"")
 
print(replace_spaces(""The quick brown fox""))  # Result: The-quick-brown-fox"
"Create a Python dictionary with three keys named ""Name"", ""Address"" and ""Phone"".","info = {
 'Name':Name,
 'Address':Address,
 'Phone':Phone
}"
Implement a Python program that takes in a string and prints out the ASCII codes for each character in the string.,"def get_ascii_codes(string):
    ascii_codes = [] 
  
    for char in string: 
        ascii_codes.append(ord(char)) 
  
    return ascii_codes 


print(get_ascii_codes(""Hello""))

# Output: [72, 101, 108, 108, 111]"
Modify the following Python code to detect and remove punctuation from a given string.,"my_string = 'Hello, world!'
punctuation = '!,.'
for char in my_string: 
 if char in punctuation: 
 my_string = my_string.replace(char, """")

print(my_string)
# Output: Hello world"
Load a dataset in CSV format into a Python pandas DataFrame.,"import pandas as pd

data = pd.read_csv('dataset.csv')"
Generate a Python program to optimize a low-cost route between two points,"def optimize_route(startX, endX):
    best_route = [startX]
    next_x = startX

    while next_x < endX:
        best_cost = float(""inf"")
        for x in range(next_x+1, endX+1):
            cost = abs(x - next_x)
            if cost < best_cost:
                best_cost = cost
                next_x = x
        best_route.append(next_x)

    return best_route"
Write a code snippet in Python to extract a substring from a given string.,"def extract_substring(string):
  return string[2:5]"
"Given a list of strings, write a Python program to search for a string and return its index.","def find_string(search_string, myList):
    for index, s in enumerate(myList):
        if s == search_string:
            return index"
Write a Python script that reads in a user-defined data set and prints the top-5 highest values contained in the data set.,"data = [100.0, 74.0, 56.2, 45.5, 27.8, 21.0, 8.2, 4.1]

def get_top_five_values(data):
    sorted_data = sorted(data, reverse=True)
    top_five_values = sorted_data[:5]
    return top_five_values

top_five_values = get_top_five_values(data)
print(top_five_values)"
Create a Python script to generate all possible 3-letter words from a 4-letter alphabet.,"import itertools

alphabet = ['a', 'b', 'c', 'd']
words = [''.join(i) for i in itertools.combinations_with_replacement(alphabet, 3)]
print(words)"
Create a function in Python to remove punctuation from a text.,"import string

def remove_punctuation(text):
    punct_chars = string.punctuation
    no_punct = """"
    for char in text:
        if char not in punct_chars:
            no_punct += char
    return no_punct

print(remove_punctuation(""Welcome! My name is Mike, and I’m here to help you.”""))
# Output: Welcome My name is Mike and Im here to help you"
Write a Python function that takes a list as an argument and returns the second largest element in the list.,"def second_largest(lst):
    sorted_list = sorted(lst)
    return sorted_list[-2]

result = second_largest(lst)
print(result)"
"Design a web API in Python, which returns the average of a list of numbers.","from flask import Flask, jsonify

app = Flask(__name__)

@app.route(""/average"", methods=[""POST""])
def get_average():
    list_of_numbers = request.get_json()
    average = sum(list_of_numbers) / len(list_of_numbers)

    return jsonify(average)"
Create an algorithm in Python to sort a sequence of numbers in nondecreasing order.,"def insertion_sort(seq):
    for i in range(1, len(seq)):
        j = i-1
        key = seq[i]
        while (seq[j] > key) and (j >= 0):
           seq[j+1] = seq[j]
           j -= 1
        seq[j+1] = key
   
 
seq = [1, 3, 5, 4, 2, 0, 9]
insertion_sort(seq)
print(seq)

# Output: [0, 1, 2, 3, 4, 5, 9]"
Generate a Python program to print the elements of a given array in reverse order.,"def print_reverse(arr):
    for i in range(len(arr)-1, -1, -1):
        print(arr[i])"
Write a Python function to calculate the number of possible permutations for a given input array.,"from math import factorial 
  
def calculate_permutations(arr): 
    n = len(arr) 
    return factorial(n) 
  
result = calculate_permutations([2, 1, 3])
print(result)"
Create a python script to group values according to given conditions.,"group1 = [1, 2, 3, 4] 
group2 = [5, 6, 7, 8] 
condition = lambda x: x > 5

group_1 = list(filter(condition, group1))
group_2 = list(filter(condition, group2))

print(group_1)
print(group_2)"
Create a simple Python script that logs the current date and time when run.,"import datetime

print(f'Current Date and Time: {datetime.datetime.now().strftime(""%Y-%m-%d %H:%M:%S"")}')"
Compose a Python program that takes a list of strings and checks if each string length is 2 or more.,"def isStringLengthMoreThanTwo(list): 
    new_list = [] 
  
    for string in list:
        if len(string) >= 2: 
            new_list.append(string) 
     
    return new_list
  
# Driver Code 
list = ['dog', 'cat', 'mouse', 'snake', 'python', 'go']
print(isStringLengthMoreThanTwo(list))"
Create a Python program that takes a string and returns a new string with the first letter of each word capitalized.,"def capitalize_words(string): 
    words = string.split(' ') 
    capitalized_words = [word.capitalize() for word in words] 
    return ' '.join(capitalized_words)"
Create a Python program to generate unique coupon codes with a given length and character set.,"import random

def generate_coupon(length, characters):
 coupon_code = ''
 for i in range(length):
  coupon_code += random.choice(characters)
 return coupon_code

coupon_code = generate_coupon(8, '0123456789ABCDEF')
print(coupon_code)"
Python code: generate a function to convert a decimal number to a binary number.,"def decToBin(n):
    binString = """"
    while n > 0:
        binary = n % 2
        binString = str(binary) + binString
        n = n//2
 
    return binString
  
# Driver Code 
n = int(input(""Enter a number: ""))
  
result = decToBin(n)
print(""The binary representation is "", result)"
Create a game in Python based on personal preferences,"Create a game in Python that involves the user's personal preferences. The game should allow the user to input their interests, goals, and preferences to produce a dynamic and personalised experience. The game should use a combination of text, graphics and sounds to create an engaging and immersive experience."
Write a Python program for searching for a particular item in a list.,"def search(input_list, item):
  for i in range(len(input_list)):
    if item == input_list[i]:
      return i
  
  return -1

if __name__ == '__main__':
  input_list = [1, 5, 4, 6, 9, 10]
  item = 6
  result = search(input_list, item)
  print(result)"
Create a script to send an email,"import smtplib

sender = ‘sender@example.com’
receivers = ‘receiver@example.com’

message = “””
Subject: Sending Email using Python

This is a test e-mail message.
”””

try:
   smtpObj = smtplib.SMTP(‘localhost’)
   smtpObj.sendmail(sender, receivers, message)         
   print(“Successfully sent email”)
except SMTPException:
   print(“Error: unable to send email”)"
Create a Python class to store multiple objects in a dictionary?,"class MultiObjectDict(object):
    def __init__(self):
        self.data = {}

    def add(self, key, value):
        try:
            self.data[key].append(value)
        except KeyError:
            self.data[key] = [value]

    def get(self, key):
        return self.data.get(key, None)"
Generate code to convert a JSON string to a Python dictionary,"import json

def json_string_to_dict(json_string):
    '''Converts a JSON string to a Python dictionary.'''
    return json.loads(json_string)"
Construct a Python program to add two matrices.,"def add_matrix(m1, m2):
    result = [[0] * len(m1[0]) for i in range(len(m1))]
    
    for i in range(len(m1)):
        for j in range(len(m1[0])):
            result[i][j] = m1[i][j] + m2[i][j]
            
    return result

result = add_matrix([[1,4,7], [2,5,8], [3,6,9]], [[9,1,2], [5,3,4], [1,8,7]])
print(result)"
Write a code in Python that fills a two-dimensional list of given sizes with increasing numbers starting from 1.,"def fill_2d_list(x, y):
    new_list = [[i+j for i in range(x)] for j in range(0, x*y, x) ]
    return new_list

fill_2d_list(3, 5) 

# Output:
# [[1, 2, 3], 
# [4, 5, 6], 
# [7, 8, 9], 
# [10, 11, 12], 
# [13, 14, 15]]"
What is the best way to optimize the following Python code which prints the first and last letters of an array of strings?,"# optimized version 
words = [""cat"", ""dog"", ""snake"", ""elephant""]

first_letters = [word[0] for word in words] # list of first letters
last_letters = [word[-1] for word in words] # list of last letters

# print the results
print(first_letters)
print(last_letters)"
Generate a code snippet to convert the given JSON string to a dictionary in Python.,"import json

json_dict = json.loads(json_str)"
Write a function to sort the given array by using counting sort.,"def counting_sort(my_list):
    max_value = 0
    for i in range(len(my_list)):
        if my_list[i] > max_value:
            max_value = my_list[i]
    buckets = [0] * (max_value + 1)
    for i in my_list:
        buckets[i] += 1
    i = 0
    for j in range(max_value + 1):
         for a in range(buckets[j]):
             my_list[i] = j
             i += 1
    return my_list"
Create a function in Python that prints out all the odd numbers from a given list.,"def print_odd_numbers(lst):
    odd_nums = []
    for num in lst:
        if num % 2 != 0:
            odd_nums.append(num)
    print(odd_nums)

print_odd_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
Write a Python program that checks if a given number is prime.,"def is_prime(n):
    if n == 2 or n == 3:
        return True
    if n < 2 or n%2 == 0:
        return False
    if n < 9:
        return True
    if n%3 == 0:
        return False

    r = int(n**0.5)
    f = 5
    while f <= r:
        if n%f == 0:
            return False
        if n % (f+2) == 0:
            return False
        f += 6
    return True

num = 7
print(""Is"", num, ""prime?: "", is_prime(num))"
Modify the following Python function to ensure that the two strings are converted to lowercase before comparison.,"def compare_strings(str1, str2):
    str1 = str1.lower()
    str2 = str2.lower()
    
    return str1 == str2"
Write a Python script to convert a list of positive integers to a comma-separated string.,"def convert_list_to_string(list): 
  string = """"
  for num in list:
    string += str(num) + "",""
  return string

print(convert_list_to_string([1, 2, 3, 4]))

# Output: ""1,2,3,4,"""
"Create a python function that takes a string as an input, and returns its first letter in capital.","def capitalize_first_letter(s): 
    if len(s) == 0:
        return s
    else:
        return s[0].upper() + s[1:]"
Develop a Python script for extracting data from a web page.,Properly functioning Python script for extracting data from a web page.
Write a Python code which randomly generates a hopscotch board of given size.,"import random 

def generate_hopscotch_board(size):
    board = []
    for row in range(size):
        board.append([])
        for col in range(size):
            board[row].append(random.randint(1,6))
    return board

# Generate a hopscotch board
print(generate_hopscotch_board(size))"
Write a function to find the list of lists with maximum length.,"def max_length(list1):
    max_length = max(len(x) for x in  list1 )  
    max_list = max((x) for x in   list1)
    return(max_length, max_list)"
Suggest a data structure to store a set of student scores in order to sort them quickly by student name.,"A dictionary would be the ideal data structure for this situation. The student names could be used as keys, and the scores can be stored as values. Using Python, the scores can then be sorted by the student names using the built-in sorted() function."
"Write a string slicing function in Python that takes a string and start and end index, and return the slice.","def slicing(string, start, end):
    return string[start:end]
    
print(slicing(string, start, end))"
Create a Python script that searches the string for a given pattern and returns the starting position.,"def find_pattern_position(string, pattern):
    for i in range(len(string) - len(pattern) + 1):
        if string[i:i+len(pattern)] == pattern:
            return i
    else:
        return -1

position = find_pattern_position(""Hello world"", ""world"")
print(position)"
Classify this Python function according to behavior.,Classifying this Python function as a Predictive Function.
Edit the following Python function to handle keyboard interrupts.,"def main():
 try:
 counter = 0
 while True:
 print(counter)
 counter += 1
 time.sleep(1)
 
 except KeyboardInterrupt:
 print('Goodbye!') 
 sys.exit()"
Write a Python program to format a given date from one format to another.,"from datetime import date

def format_date(date_str, start_format, end_format):
    date_obj = date.strptime(date_str, start_format)
    return date_obj.strftime(end_format)"
Create an algorithm in Python to print a pattern consisting of '*' and '#' characters.,"def pattern(n):
 m = 0
 for i in range(1, n+1):
 for j in range(1, m+1):
 print(""*"", end="""")
 m = m + 2
 
 for k in range(1, n-i+1):
 print(""#"", end="""")
 print()

pattern(5) 
/* Output: 
*#*#*
**#**
***#
****
*/"
"Write a code in Python to print all numbers between 2000 and 3200, which are divisible by 7 and multiple of 5.","def divisible_numbers():
  for num in range(2000, 3201):
    if (num % 7 == 0) and (num % 5 == 0):
      print(num, end="", "")

if __name__ == '__main__':
  divisible_numbers()"
Generate a Python program that finds all palindromes in a given string.,"input_str = ""madamabcdcba""

def find_palindromes(input_str):
 palindromes = []
 for i in range(len(input_str)):
  for j in range(i+1, len(input_str)):
   curr_str = input_str[i:j+1]
   if curr_str == curr_str[::-1]:
    palindromes.append(curr_str)
 return palindromes

print(find_palindromes(input_str))

# Output: ['madam', 'aba', 'bcdbcd', 'cba']"
Write down logic to generate all permutations of a given string in Python.,"def permutations(str): 
    ans = []
    if len(str) == 1: 
        ans = [str] 
    else: 
        for i, letter in enumerate(str):
            for perm in permutations(str[:i] + str[i+1:]):
                ans += [letter + perm]
    return ans

print (permutations(""ABC""))"
Suggest a completion of the following Python code to print all perfect squares between 25 and 45.,"for n in range(25, 46):
    if n ** 0.5 == int(n ** 0.5):
        print(n)"
Create a linear regression model in Python to predict the number of visits to a particular website.,"import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression

# input data
X = np.array([[1, 1], [2, 2], [3, 3], [4, 4]])
y = np.array([5, 10, 15, 20])

# create and fit the model
model = LinearRegression()
model.fit(X, y)

# make a prediction
y_pred = model.predict([[5, 5]])
print(round(y_pred[0], 2))"
Produce a Python code for finding the largest element in an array.,"def find_max(arr):
    max = arr[0]
    for i in range(1,len(arr)):
        if arr[i] > max:
            max = arr[i]
    return max

result = find_max([40, 50, 11, 70, 39])
print(result)"
Write a python program to convert degree Celsius to Fahrenheit.,"def convert_celsius_to_fahrenheit(c):
    f = (c * (9/5)) + 32
    return f

f = convert_celsius_to_fahrenheit(c)
print('{} degree Celsius = {} degree Fahrenheit'.format(c, f))"
You are given a list of integers and a number n. Write a python program that checks if any two numbers in the list sum up to n.,"def sum_check(numbers, n):
    for i in range(len(numbers)):
        for j in range(i + 1, len(numbers)):
            if numbers[i] + numbers[j] == n:
                return True
    return False

numbers = [1, 5, 6, 10, 8, 20]
n = 11

print(sum_check(numbers, n))"
Write a Python function to remove duplicate characters from a string.,"def remove_duplicate_characters(string): 
 result = """" 
  
 for i in range(len(string)): 
  if string[i] not in result: 
   result += string[i] 
  
 return result 
  
print(remove_duplicate_characters(""tree traversal""))"
Write a python function to find the sum of squares of first n even natural numbers.,"def square_Sum(n):  
    return int(2*n*(n+1)*(2*n+1)/3)"
Write a function to find x and y that satisfies ax + by = n.,"def solution (a, b, n): 
	i = 0
	while i * a <= n: 
		if (n - (i * a)) % b == 0: 
			return (""x = "",i ,"", y = "", 
			int((n - (i * a)) / b)) 
			return 0
		i = i + 1
	return (""No solution"") "
Write a script in Python to format a date.,"import datetime 
now = datetime.datetime.now().strftime(""%d/%m/%Y"") 
print(now)"
Write a python function to find the cube sum of first n even natural numbers.,"def cube_Sum(n): 
    sum = 0
    for i in range(1,n + 1): 
        sum += (2*i)*(2*i)*(2*i) 
    return sum"
Write a Python program which prints all perfect numbers between 1 and a given number N (inclusive).,"def print_perfect_numbers(N):
 for val in range(1, N + 1):
   sum = 0
   for testval in range(1, val):
       if (val % testval) == 0:
           sum += testval
   if (sum == val):
       print(val)"
Write a Python program to sort a given list of numbers and return the sorted list,"list_of_numbers = [2, 3, 5, 8, 1, 4]

def sort_list(list_of_numbers): 
    list_of_numbers.sort() 
    return list_of_numbers

sorted_list = sort_list(list_of_numbers) 
print(sorted_list)"
Create a Python script to search for a given element in a list?,"def find_element(my_list, x):
  found = False
  for item in my_list:
    if item == x:
      found = True
      break
  
  return found

element = 3

print(find_element(my_list, element))

# Output
True"
Write a Python program to calculate the factorial of a number.,"def factorial(number): 
 if number == 0: 
 return 1
 else: 
 return number * factorial(number-1) 
  
number = 6
print(factorial(number)) 
# Output: 720"
Write a function to calculate wind chill index.,"import math
def wind_chill(v,t):
 windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)
 return int(round(windchill, 0))"
Design a Python class that displays a diamond shape when it is called.,"class DiamondShape:
    def __init__(self, size):
        self.size = size
    
    def show(self):
        for i in range(1, self.size+1):
            print("" "" * (self.size - i) + "" *"" * (2*i - 1))
        for i in range(self.size-1, 0, -1): 
            print("" "" * (self.size - i) + "" *"" * (2*i - 1))"
Design a machine learning model in Python to predict house prices based on the given features.,"import numpy as np
import pandas as pd
from sklearn import linear_model

# Load the data
data = pd.read_csv('house_price_data.csv')

# Select features
X = data[['size', 'bedrooms', 'bathrooms', 'year']]

# Select target
y = data['price']

# Create and fit the model
model = linear_model.LinearRegression()
model.fit(X, y)"
Write a python program to check if a given number is an Armstrong number or not.,"def is_armstrong_number(num):
    digits_sum = 0
    num_string = str(num)
    for digit in num_string:
        digits_sum += int(digit)**len(num_string)
    return digits_sum == num"
Design a program in Python to change the background color of a web page.,"from selenium import webdriver
from selenium.webdriver.common.keys import Keys

driver = webdriver.Chrome()
driver.get(""http://example.com"")
html = driver.find_element_by_tag_name('html')
html.send_keys(Keys.CONTROL + Keys.SHIFT + Keys.BACKSPACE)
driver.execute_script(""document.body.style.backgroundColor='"" + color + ""'"")"
Construct a python program to identify the number of times the given element is present in the given list.,"def count_x(list, x):
    count = 0
    for i in list:
        if i == x:
            count += 1
    return count"
Create a Python script that uses a for loop to display the items from a list.,"# Create a list
list = ['apple', 'orange', 'banana']

# Loop over the list
for item in list:
    print(item)"
"Given a Python list containing a set of numbers and strings, create a new list with only the integers.","mylist = [item for item in mylist if isinstance(item, int)]"
Write a Python program that can generate a random 5-digit number and check if that number is prime or not.,"import random

def is_prime(num):
	for i in range(2, num):
		if num%i == 0:
			return False
	return True

def generate_prime():
	while True:
		num = random.randint(10000, 99999)
		if is_prime(num):
			return num

if __name__ == '__main__':
	num = generate_prime()
	print(num, 'is a prime number')"
Edit the following program written in Python in order to remove None from the list.,lst = [x for x in lst if x is not None]
Write a python function to merge the first and last elements separately in a list of lists.,"def merge(lst):  
    return [list(ele) for ele in list(zip(*lst))] "
Opitmize a Python program to search a list of numbers for a given target number.,"def search(list, target):
  
 for i in range(len(list)):
  if list[i] == target:
   return i
 return -1

list = [10,20,30,40,50]
target = 40

# linear search in list

index = search(list, target)

if index != -1:
 print(""Element found at index :"", index)
else:
 print(""Element not found"")"
Optimize the following Python Octave code by introducing vectorization.,"#Vectorization
freq = (np.array(freq) + np.array(new_freq)).tolist()"
Come up with a Python program to merge two sorted lists.,"def merge(list1, list2): 
    merged_list = [] 
    i = 0
    j = 0
  
    while i < len(list1) and j < len(list2): 
        if list1[i] < list2[j]: 
            merged_list.append(list1[i]) 
            i+= 1
        else: 
            merged_list.append(list2[j]) 
            j+= 1
   
    merged_list += list1[i:]
    merged_list += list2[j:]
  
    return merged_list"
Write an algorithm in Python to find the largest and smallest element in an array.,"def find_min_max(arr):
    min, max = arr[0], arr[0]
    for item in arr:
        if item < min:
            min = item
        if item > max:
            max = item
    return min, max

# test
arr = [3, 7, 1, 12, 5]
min, max = find_min_max(arr)
print(f'min: {min}, max: {max}')"
Generate a function in Python that returns the index of the first occurrence of a given number in an array.,"def first_occurrence(arr, num):
    '''Returns index of the first occurrence of num in an array.'''
    for i in range(len(arr)):
        if(arr[i] == num):
            return i
    return -1

arr = [1, 4, 6, 9]
num = 5

first_occurrence(arr, num) # -1"
Create a function in Python to calculate the sum of the cubes of the first n positive integers.,"def sum_cubes(n): 
    sum = 0
    for i in range(1,n+1): 
        sum += i**3 
    return sum"
Write a Python program which accepts the user's first and last name and print them in reverse order with a space between them.,"def reverse_name_order(first_name, last_name):
    print(last_name + "" "" + first_name)

first_name = input(""Enter your first name: "")
last_name = input(""Enter your last name: "")
reverse_name_order(first_name, last_name)"
Parse the following JSON into a Python dictionary.,"# import the json module
import json

# parse the json
json_dict = json.loads('{  ""name"": ""John"",  ""age"": 28,  ""hobbies"": [    ""Programming"",    ""Sports""  ]}')

# print the parsed json
print(json_dict)"
Develop a Python program to check if a number is divisible by 3.,"def is_divisible_by_3(num):
 if num % 3 == 0:
 return True
 return False"
Write a Python program to find the sum of all the divisors of a given integer.,"def calculate_sum_divisors(n):
    total_sum = 0
    for i in range(1, n + 1):
        if n % i == 0:
            total_sum += i
    return total_sum
 
print(calculate_sum_divisors(90))"
Convert this psuedocode into a Python program.,"num = 0
while num < 20:
    print (num)
    num += 4"
Develop a program in Python to remove all the vowels from a given sentence.,"def removeVowels(sentence):
 vowels = ""aeiouAEIOU""
 result = """"

 for char in sentence:
 if char not in vowels:
 result = result + char

 return result

print(removeVowels(""This is a test sentence.""))  # Output: ""Ths s  tst sntnc."""
Write a Python program to print a formatted price list with a given list of expenses.,"def print_price_list(expenses):
    print(""Price list of items available:"")
    print(""-"" * 30)
    print(""Item\tPrice"")
    print(""-"" * 30)
    for item in expenses.keys():
        print(""{}\t{}"".format(item, expenses[item]))
    print(""-"" * 30)"
Edit the given Python program to use for loop instead of while loop.,"for i in range(10):
 print(i)"
Evaluate the following code for a Python program that takes two numbers as input and outputs the maximum of the inputs.,"def max_of_two(x, y):
    if x > y:
        return x
    return y

# This code is correct and will output the maximum value of the two numbers."
Translate this JavaScript code to Python.,"def sum(nums):
    result = 0
    for i in range(len(nums)):
        result += nums[i]
    return result"
Write a Python program that takes a list of numbers and lists all the prime numbers in the list.,"[11, 13]"
Write a Python script that takes a list of strings as input and prints out a modified version of the list. The modified version should contain only strings that have the letter 'b' in them.,"input = ['foo', 'bar', 'baz', 'hello', 'world']
output = [x for x in input if 'b' in x]
print(output) # ['bar', 'baz']"
Create a Python script that prints out the Fibonacci sequence of a given number.,"def fibonacci_sequence(n):
  a, b = 0, 1
  
  for i in range(n):
    print(a)
    a, b = b, a+b

fibonacci_sequence(6)

# Output:
# 0
# 1
# 1
# 2
# 3
# 5"
Develop Python code to calculate the Average of two numbers.,"def average(a, b):
    return (a + b) / 2

result = average(2, 3)
print(result)"
Develop an algorithm in Python that takes a number as input and outputs the sum of all its divisors.,"def sum_divisors(num):
    # Initialize sum 
    summation = 0
    
    # Iterate upto num 
    for i in range(1, num+1):
        # If num is divisible  
        # by i, add it to sum 
        if num%i == 0:
            summation += i
    # Return summation 
    return summation
  
   
# Driver Code 
num = 6
result = sum_divisors(num) 
  
# Printing result  
print(result)"
Create a function to sort the below list of numbers in ascending order in Python.,"def sorting_ascending(lst): 
    lst.sort() 
    return lst"
Write a Python function to sort the given list of strings using the length of the strings instead of alphabetically.,"def sortStringByLength(string_list):
    string_list.sort(key = lambda x:len(x)) 
    return string_list"
Generate a Python script that sorts a given array of integers.,"def array_sort(array):
  # Iterate over the array
  for i in range(len(array)):
    # Find the minimum element
    min_position = i
    for j in range(i + 1, len(array)):
      if array[min_position] > array[j]:
        min_position = j

    # Swap minimum element to current position
    array[i], array[min_position] = array[min_position], array[i]
  
  return array"
Create a python function for calculating the area of a circle given the radius.,"def area(radius): 
    return 3.14 * radius * radius"
Generate a python program for creating a function to take a list of strings as input and return the longest string,"def find_longest_string(arr):
    longest = arr[0]
    for string in arr:
        if len(string) > len(longest):
            longest = string
    return longest

result = find_longest_string(['hello', 'world', 'this', 'is', 'awesome'])
print(result)"
Generate a program in Python to evaluate the accuracy of a machine-learning model.,"import numpy as np
from sklearn.metrics import accuracy_score

clf.fit(X_train, y_train)
y_pred = clf.predict(X_test)

# Calculating the accuracy
accuracy = accuracy_score(y_test, y_pred)

print(""Accuracy: "" + str(accuracy))"
Can you create a program for web scraping using Python?,"import requests
from bs4 import BeautifulSoup

# Send a request to the URL
res = requests.get(""https://www.example.com"")

# Parse the response
soup = BeautifulSoup(res.text, 'html.parser')

# Extract the data
data = soup.find_all('div')"
Generate a python program that prints out all the even numbers between a given range of integers,"def print_even_numbers(start, end):
    for num in range(start, end+1):
        if num % 2 == 0:
            print(num)

# main
start = 1
end = 50
print_even_numbers(start, end)"
Create a function in Python to convert a given time from 12-hour clock format to 24-hour clock format.,"def time_conversion(time):
    # Get hour and convert it to 24-hour format
    hour = int(time[:2])
    if time[-2:] == ""PM"":
        hour += 12
    # Get minutes
    min = time[-5:-3]

    return str(hour) + "":"" + min

# Test
print(time_conversion(""3:45pm"")) # 15:45"
Create a Python program to take an array of numbers and calculate the average.,"def average(nums):
    sum = 0
    for n in nums:
        sum += n
    return sum / len(nums)

nums = [1, 4, 5, 6, 7]
print(average(nums))"
Generate a sorting algorithm in Python to order a list of words alphabetically.,"def sort_words(words):
    for i in range(len(words)-1):
        min_index = i 
        for j in range(i + 1, len(words)):
            if words[min_index] > words[j]: 
                min_index = j
        words[i], words[min_index] = words[min_index], words[i]
    return words"
Write a Python program to create a new list which contains the elements of a given list after removing duplicates.,"def remove_duplicates(list):
 resultant_list = []
 for item in list:
 if item not in resultant_list:
 resultant_list.append(item)
 return resultant_list"
Generate a Python program to update the value of a variable by given percentage.,"value = 25.22
percent = 5

new_value = value + (value * (percent/100))

print(""The new value is: "", new_value) 
# Output: The new value is: 26.496"
Create a program to print the following pattern using nested for loops in Python.,"for i in range(5):
    for j in range(i):
        print(""*"", end="""")
    print("""")"
Create an Adaboost classifier in Python to classify a given dataset.,"import numpy as np
from sklearn.ensemble import AdaBoostClassifier

X = np.array([[-1, -1], [-2, -1], [-3, -2], [1, 1], [2, 1], [3, 2]])
Y = np.array([1, 1, 1, 2, 2, 2])

clf = AdaBoostClassifier(n_estimators=50, learning_rate=1)
clf.fit(X, Y)

print(clf.predict([[-0.8, -1]]))"
Write a function in Python to print the Fibonacci series up to the nth term.,"def Fibonacci(n):
    first, second = 0, 1
    for _ in range(n):
        print(first)
        first, second = second, first + second"
Generate a Python program which will convert the given binary number into its equivalent decimal number,"def binary_to_decimal(binary):
  decimal = 0
  binary = binary[::-1]
  for i, num in enumerate(binary):
    if num == '1':
      decimal += pow(2, i)
  return decimal"
Write a python function to set the right most unset bit.,"import math 
def get_Pos_Of_Right_most_Set_Bit(n): 
    return int(math.log2(n&-n)+1)   
def set_Right_most_Unset_Bit(n): 
    if (n == 0): 
        return 1
    if ((n & (n + 1)) == 0):     
        return n 
    pos = get_Pos_Of_Right_most_Set_Bit(~n)      
    return ((1 << (pos - 1)) | n) "
Create a Python program to compute the average of all the numbers in a list.,"def avg(list):
    if len(list) == 0:
        return 0
    else:
        sum = 0
        for num in list:
            sum += num
        return sum / len(list)"
Write function to find the sum of all items in the given dictionary.,"def return_sum(dict):
  sum = 0
  for i in dict.values():
    sum = sum + i
  return sum"
Write a Python program to iterate through a list and return the index of the maximum of all the even numbers in the list.,"def find_max_even_index(lst):
  max_even = None
  index = -1
  
  for i, num in enumerate(lst):
    if num % 2 == 0 and (max_even is None or num > max_even):
      max_even = num
      index = i
  
  return index"
Generate code to de-serialize JSON into Python objects,"import json

data = json.loads(data_json)

# Output:
data = {
 ""name"": ""John Doe"",
 ""age"": 18,
 ""hobbies"": [""reading"", ""swimming"", ""gaming""],
 ""contact"": {
  ""email"": ""johndoe@example.com"",
  ""mobile"": ""+1900000000""
 }
}"
Develop a Python program to evaluate a given polynomial given a value of the independent variable.,"def evaluate_polynomial(polynomial, x):
    terms = polynomial.split(""+"")
    result = 0
    for term in terms:
        factor, exponent = term.split(""x^"")
        result += int(factor)*(x**int(exponent))
    return result

polynomial = ""4x^3 + 7x + 2""
x = 6
print(evaluate_polynomial(polynomial, x))"
Develop an algorithm to identify palindromes using regular expression in Python.,"import re

def is_palindrome(s):
    pattern = r'^[a-zA-Z0-9]*$'
    if re.match(pattern, s):
        return s == s[::-1]
    else:
        return False"
Create a game loop in Python that waits for user input and handles it.,"while True:
 user_input = input(""Enter your input: "")
 
 # handle user input
 if user_input == 'exit':
  break"
Generate a python program to sort a list of numbers,"def sort_list(array): 
    n = len(array) 
  
    for i in range(n): 
  
        min_idx = i 
        for j in range(i+1, n): 
            if array[min_idx] > array[j]: 
                min_idx = j 
        array[i], array[min_idx] = array[min_idx], array[i]

if __name__ == ""__main__"":
    array = [4, 2, 6, 7, 1]
    sort_list(array)
    print(array)"
Create a Python function to replace a specific character in a string?,"def replace_char(string, character, replacement):
   return string.replace(character, replacement)

string = ""Hello World""
character = ""l""
replacement = ""X""
print(replace_char(string, character, replacement))"
Generate a python program to convert a list of strings to a new list of strings with each string's first letter capitalized,"def capitalize(list):
    # Create an empty list to contain the corrected strings 
    output = []
    
    # Iterate over the strings 
    for string in list:
        output.append(string.capitalize())
    
    # Return the corrected list
    return output"
Generate a valid JSON from a given Python dictionary.,"import json
data = {
    'name': 'John',
    'age': 25
}

json_data = json.dumps(data)
# json_data = '{""name"":""John"",""age"":25}'"
Design a Python program to count how many words appear in a given sentence.,"def word_count(sentence): 
    count = 0
    words = sentence.split() 
    for word in words: 
        count += 1
    return count
  
sentence = ""I am writing this code to practice""
count = word_count(sentence)
print(""Number of words present inGiven sentence:"")  
print(count)"
Create a function in Python which can take in a string and capitalize the first character of the string.,"def capitalize_first_character(mystring):
    return mystring[0].upper() + mystring[1:]"
Implement a function in Python that takes in a list of integers and returns a new list where the elements are reversed.,"def reverse_list(arr): 
    return arr[::-1] 

Input_list = [1, 2, 3, 4, 5]
print(""Original List:"", Input_list) 
Rev_list = reverse_list(Input_list) 
print(""Reversed List:"", Rev_list)"
Create a Python program to write a string in Reverse order,"def reverse_string(input_string): 
    str = """" 
    for i in input_string: 
        str = i + str
    return str
  
if __name__ == ""__main__"": 
    input_string = ""This is a Test string""
    print(reverse_string(input_string))"
Convert the following Python code to equivalent JavaScript code.,"function add_two_numbers(a, b) {
  return a + b;
}"
Create a network search algorithm in Python for finding the shortest path between two nodes.,"def network_search(graph, start, end):
 visited, queue = set(), [(start, 0)]
 
 while queue:
 vertex, depth = queue.pop(0)
 
 if vertex not in visited:
 visited.add(vertex)
 
 if vertex == end:
 return depth
 
 for neighbor in graph[vertex]:
 queue.append((neighbor, depth + 1))
 
 return -1"
Develop a Python function that will compute the Fibonacci sequence up to n.,"def fibonacci(n):
 a, b = 0, 1 
 for i in range(0, n): 
 a, b = b, a + b 
 return a"
Construct a Python program to find the index of a given item in a list,"def index_of_item(list_of_items, item):
    for i in range(len(list_of_items)):
        if list_of_items[i] == item:
            return i

list_of_items = [""a"", ""b"", ""c""]
result = index_of_item(list_of_items, ""b"")
print(result)"
Generate a python code for a basic calculator,"def calculate(a, b, op):
    if op == '+':
        return a + b
    elif op == '-':
        return a - b
    elif op == '*':
        return a * b
    elif op == '/':
        return a / b
    else:
        return ""Operation not supported."""
Create a Python program to encode text using the Caesar cipher given an offset n.,"def _encode(char, offset):
 char_code = ord(char)
 new_char_code = char_code + offset
 return chr(new_char_code)

def encode_string(string, offset):
 encoded_string = """"
 
 for char in string:
 encoded_string += _encode(char, offset)
 
 return encoded_string"
Write a Python function for encrypting a string of plaintext.,"import base64
from cryptography.fernet import Fernet

def encrypt(plaintext):
 key = Fernet.generate_key()
 f = Fernet(key)
 encrypted_data = f.encrypt(plaintext.encode())
 return base64.b64encode(encrypted_data)"
Write a Python program to check if the first character of a given string is in uppercase.,"def is_uppercase(text):
    if text[0].isupper():
        print(""True"")
    else:
        print(""False"")"
"Using the comments as a guide, fix the given python code.","num_list = [2, 7, 4, 10, 5]
            
# Replace the line below
total = 0       
for num in num_list:
    total += num

print(total)"
Write abstract methods in Python to implement a stack,"class MYStack:
    def __init__(self):
        self._items = []

    def push(self, item):
        self._items.append(item)

    def pop(self):
        return self._items.pop()

    def size(self):
        return len(self._items)

    def is_empty(self):
        return self.size() == 0"
How can you create a Python function that prints the number of characters in a string?,"def char_count(string): 
    count = 0
    for char in string: 
        count += 1
    print(""Number of characters:"", count)"
Create a Python class to store data about books.,"class Book:
 
    def __init__(self, title, author, publisher, year):
        self.title = title
        self.author = author
        self.publisher = publisher
        self.year = year
 
    def __str__(self):
        return f""{self.title} was written by {self.author} and published by {self.publisher} in {self.year}."""
Write a custom pip command that lists all the installed packages and their versions.,"#!/usr/bin/env python

import pip

def pip_list():
    packages = pip.get_installed_distributions()
    for package in packages:
        print('{}=={}'.format(package.project_name, package.version))
        

if __name__ == '__main__':
    pip_list()"
Optimize a Python program to print the sum of the 10 smallest even numbers larger than a user-defined number.,"num = int(input(""Enter a number: ""))

# Find the 10 smallest even numbers larger than the user-defined number
numbers = []
total = 0
for i in range(num+1, num+21):
 if i%2 == 0:
  numbers.append(i)
  total += i
  
print('The sum is', total)"
Identify the bug in the following Python code snippet and suggestion a fix.,"def updateList(myList):
 myList.append(1)
 
myList = [1, 2, 3]
updateList(myList)
print(myList)"
Build a program in Python that compresses a given string using Run Length Encoding.,"def run_length_encoding(s):
    n = len(s) 
    encoded_string = """"

    i = 1
    while i < n:
        count = 1
        while i < n and s[i] == s[i - 1]:
            count += 1
            i += 1

        encoded_string += (s[i - 1] + str(count))
        i += 1

    return encoded_string"
Write a function to find sequences of lowercase letters joined with an underscore using regex.,"import re
def text_match(text):
  patterns = '^[a-z]+_[a-z]+$'
  if re.search(patterns,  text):
    return ('Found a match!')
  else:
    return ('Not matched!')"
Generate a python program to find and list all numbers between 0 and 1000 that are divisible by 7.,"def find_divisible(n):
  result = []
  for i in range(1, n+1):
    if i % 7 == 0:
      result.append(i)
  return result"
Improve the following Python code to check if a number is in the range of 1 to 10 (inclusive).,"def check_number(num):
  if (num > 0 and num < 11):
    return True
  else:
    return False"
Develop a program in Python for finding the factorial of a given number.,"def factorial(n):
    if n < 0:
        return None
    elif n == 0:
        return 1
    else:
        result = 1
        for i in range(1, n + 1):
            result *= i
        return result

num = 7
print('factorial of {} is {}'.format(num, factorial(num)))"
Create a Python program that wraps a function with a given input sequence and prints out the output of the function.,"def wrapped(f, seq):
    for x in seq:
        print(f(x))

def my_function(x):
    return x * x

sequence = [1, 2, 3, 4, 5]

wrapped(my_function, sequence)

# Output: 
1
4
9
16
25"
Create a Python program that accepts a sentence as an input and prints out the number of vowels present in that sentence.,"def count_vowels(sentence):
    vowels = ""aeiouAEIOU""
    count = 0
    for character in sentence:
        if character in vowels:
            count += 1
    return count

sentence = input(""Enter a sentence: "")

vowel_count = count_vowels(sentence)
print(f""Number of vowels in the sentence is {vowel_count}"")"
Create a Python program which calculates the sum of the two given numbers.,"sum = 0
a = 10
b = 20
sum = a + b

print(""The sum of"", a, ""and"", b, ""is"", sum)"
Create a Python program which sorts elements of an array in ascending order.,"def sort_ascending(array):
    for i in range(len(array)-1):
        for j in range(i, len(array)):
            if array[i] > array[j]:
                array[i], array[j] = array[j], array[i]

    return array

sort_ascending([5, 2, 1, 3, 6, 4]) # Output = [1, 2, 3, 4, 5, 6]"
You need to write a Python code to revert a given list back to its original form.,my_list = my_list[::-1]
Generate a secure random password in Python.,"import string 
import random 

def secure_password(length): 
 password_characters = string.ascii_letters + string.punctuation + string.digits
 password = """".join(random.choice(password_characters) for i in range(length)) 
 return password 

secure_pw = secure_password(20) 
print(""Secure Password:"", secure_pw)"
Edit a given python program,"import math

def round_off(a): 
    if (a - math.floor(a) >= 0.5): 
        a = math.ceil(a) 
    else: 
        a = math.floor(a) 
    return int(a)"
"Build a web-service using the Flask python library that returns a ""Hello, world!"" message when accessed through a browser.","#Import the Flask library
from flask import flask

# Initialize the Flask app
app = Flask(__name__)

#Define the hello function
@app.route('/')
def hello():
    return ""Hello, world!""

# Have the Flask app listen on port 500
if __name__ == '__main__':
    app.run(port=500)"
Generate a Python program to convert a given binary string to its equivalent decimal value.,"def binary_to_decimal(n):
    num = n
    dec_value = 0
    base = 1
    temp = num
    
    while temp > 0:
        last_digit = temp % 10
        temp = temp // 10
        dec_value += last_digit * base
        base = base * 2
    return dec_value"
Write a Python program to extract the text from an HTML document.,"from bs4 import BeautifulSoup

html = '<h2>Hello World!</h2>'
soup = BeautifulSoup(html, 'html.parser')
text = soup.find('h2').text

print(text) # Hello World!"
Create a Python function that takes a list of numbers and returns the sum of the odd numbers in the list.,"def sumOdds(nums):
 total = 0
 for num in nums:
 if num % 2 != 0:
 total += num
 return total

nums = [1,2,3,4,5]
sum_odds = sumOdds(nums)
print(sum_odds) #output: 9"
Create a class in Python that represents a two-dimensional vector.,"class Vector2D:
 def __init__(self, x = 0, y = 0):
  self.x = x
  self.y = y

def __str__(self):
 return '<' + str(self.x) + ', ' + str(self.y) + '>'

def add(self, other):
 return Vector2D(self.x + other.x, self.y + other.y)

def __add__(self, other):
 return self.add(other)

# testing
v1 = Vector2D(3, 4)
v2 = Vector2D(1, 2)
print(v1 + v2)

# Output: <4, 6>"
Convert the following JavaScript code to its equivalent Python code.,"array = [1, 2, 3]"
Create a class in Python to represent a 2-D point and implement a method for finding the Euclidean distance between the two points.,"class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def distance(self, point):
        x_diff = self.x - point.x
        y_diff = self.y - point.y
        return math.sqrt(x_diff**2 + y_diff**2)"
Create a Python program that will simulate a dice roll with 4 sides.,"import random

def rollDice():
result = random.randint(1,4)
print(""You rolled a ""+str(result))

rollDice()"
"Create a Docker container for a simple web application. The application should expose an endpoint for displaying ""Hello world"".","FROM python:3.7

WORKDIR /app

COPY requirements.txt .
RUN pip install -r requirements.txt

COPY . .
EXPOSE 5000

CMD [""python"", ""app.py""]

# File app.py

from flask import Flask

app = Flask(__name__)

@app.route('/')
def hello():
 return 'Hello world!'

if __name__ == '__main__':
 app.run(host='0.0.0.0', debug=True)"
Modify the given Python program to sort a list of words in alphabetical order.,"words = ['cat', 'dog', 'bird', 'fish']

sorted_words = sorted(words)

print(sorted_words)"
Optimize a Python function to reverse a string quickly by using slice notation.,"def reverse_string(string):
    """"""
    Takes a string and returns it reversed quickly with Python
    slice notation.
    """"""
    return string[::-1]"
Create a python program for the following purpose:,"def count_even_pairs(N, A):
    n = 0
    for i in range(N):
        for j in range(i+1,N):
            if (A[i] + A[j]) % 2 == 0:
                n += 1
    return n"
Create a Python program that prints out the words in a sentence in reverse order.,"def reverse_words(sentence):
    words = sentence.split()
    words.reverse()
    return "" "".join(words)

print(reverse_words(""I love programming.""))"
Generate a program in Python to get the index of a particular word in a given sentence,"def index_of_word(sentence, word):
    words = sentence.split()
    for index, value in enumerate(words):
        if value == word:
            return index
    return -1

sentence = ""Python is a programming language.""
word = ""language""
print(index_of_word(sentence, word))"
Create a dictonary in Python with 5 key value pairs.,"myDict = {
 'name': 'John',
 'age': 25,
 'height': 6.1,
 'city': 'New York',
 'job': 'Developer'
}"
Create a program to print out the pyramid pattern in Python.,"for i in range(rows):
    for j in range(i):
        print(""#"", end="""")
    print()"
Design a Python program to find the maximum of two numbers.,"def maximum(a, b):
    if a > b:
        maxVal = a
    elif b > a:
        maxVal = b
    else:
        maxVal = a
    return maxVal

maxVal = maximum(a, b) 
print(""The maximum of two numbers is"", maxVal)"
Optimize a code snippet in Python. The code snippet is a function for computing the factorial of a number.,"def factorial(n):
    if n == 0:
        return 1
    else:
        result = 1
        for i in range(1, n+1):
            result *= i
        return result"
Write a script in Python that takes an array of numbers as parameter and returns the minimum and maximum values.,"def min_max(array):
    min = array[0]
    max = array[0]

    for value in array:
        if value < min:
            min = value
        elif value > max:
            max = value
    
    return min, max

array=[4, 6, 3, 2, 8, 10]

min, max = min_max(array)

print(""Minimum: "", min)
print(""Maximum: "", max)"
Generate a Random Forest classifier in Python to categorize emails into two classes - spam and not-spam.,"# Random Forest classifier setup
from sklearn.ensemble import RandomForestClassifier

# Sample data 
X = [['email_1'], ['email_2'], ...]
y = [0, 1, ...] # 0 is not-spam, 1 is spam

# Train the model
model = RandomForestClassifier(n_estimators=100)
model.fit(X, y)

# Make predictions
predictions = model.predict(X_test)"
Code a function in Python to identify a valid email address.,"import re

def is_valid_email(email):
    regex = '^[a-z0-9]+[\._]?[a-z0-9]+[@]\w+[.]\w{2,3}$'
    return re.search(regex, email)"
Write a Python program to create a line chart displaying numbers from 1 to 15.,"import matplotlib.pyplot as plt

data = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]

# making the line plot
plt.plot(data, '-o') # '-o' is used to connected the dots

# naming the x axis
plt.xlabel('x - axis')
# naming the y axis
plt.ylabel('y - axis')

# giving a title to my graph
plt.title('Line chart of numbers from 1 to 15')

# function to show the plot
plt.show()"
"Using Python, optimize the following code and explain the optimizations you applied.","def count_words(text):
    ''' Counts the number of words in a text '''
    # Optimization #1: Replacing the loop and using Python's count method
    word_count = len(text.split(' ')) 
    return word_count"
Develop a regular expression in Python to match all numeric strings.,"import re 
  
# Regular expression to match all numeric strings 
pattern = '^[0-9]+$'
  
# Input string 
string = '123456789'
  
# Matching a pattern 
result = re.match(pattern, string) 
if result: 
    print(""String is a valid numeric string"") 
else: 
    print(""String isn't a valid numeric string"")"
Develop a Python program to check if a number is an Armstrong number.,"def isArmstrong(x): 
  
    # Calculate the number of 
    # digits in x 
    n = len(str(x)) 
  
    sum1 = 0
  
    # For every digit calculate 
    # its sum of nth power 
    temp = x 
    while temp > 0: 
        d = temp % 10
        sum1 = sum1 + d ** n 
        temp = temp//10
  
    # Check whether sum1 is equal to x 
    if sum1 == x: 
        return True
    return False"
Write a function to extract the maximum numeric value from a string by using regex.,"import re 
def extract_max(input): 
	numbers = re.findall('\d+',input) 
	numbers = map(int,numbers) 
	return max(numbers)"
Write a Python code fragment to print all the leap years between two years.,"for year in range(start_year, end_year+1):
    if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):
        print(year)"
Generate a universal one-time password (OTP) algorithm in Python.,"import secrets

def get_otp(length=6):
    digits = ""0123456789""
    otp = """"
    for i in range(length):
        otp += secrets.choice(digits)  
    return otp

print(get_otp())"
"Given a stream of data, write a Python program to classify the data into two categories.","def classify(data):
    # Initialize categories     
    categories = [0, 1]   
    threshold = 0.5  

    # Make predictions using a classifier 
    predictions = classifier.predict(data)  

    # Classify the data based on the predictions     
    classified_data = [categories[int(pred > threshold)] for pred in predictions]   

    return classified_data"
Write a python function to find common divisor between two numbers in a given pair.,"def ngcd(x,y):
    i=1
    while(i<=x and i<=y):
        if(x%i==0 and y%i == 0):
            gcd=i;
        i+=1
    return gcd;
def num_comm_div(x,y):
  n = ngcd(x,y)
  result = 0
  z = int(n**0.5)
  i = 1
  while(i <= z):
    if(n % i == 0):
      result += 2 
      if(i == n/i):
        result-=1
    i+=1
  return result"
Create a payment processing system written in Python using the Stripe API.,"import stripe 

def make_payment(token, amount):
    stripe.api_key = ""sk_test_xxx""

    charge = stripe.Charge.create(
        amount=amount,
        currency=""usd"",
        source=token,
        description=""example charge""
    )

    return charge

token = ""tok_xxx""
amount = 500

charge = make_payment(token, amount)
print(charge)"
Build a program in Python to fetch the details of a user in a given language.,"def get_user_details(language):
    user_data = {}
    # read the data from a file
    with open(f'data/{language}_users.csv', 'r') as csvfile:
        reader = csv.reader(csvfile)
        for row in reader:
            user_data[row[0]] = row[1:]
    return user_data

users = get_user_details('en')"
Create a basic web scraper in Python to extract text from a web page.,"import requests
from bs4 import BeautifulSoup

r = requests.get('https://example.com')
html = r.text
soup = BeautifulSoup(html)

text = soup.find('div', {'class': 'text'}).text
print(text)"
Generate a random password in Python using at least eight characters including numbers and both uppercase and lowercase letters.,"import random 
def generate_password(): 
    chars = ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890@#$%^&*""
    length = 8 
    password = """" 
    for i in range(length): 
        password += random.choice(chars)
    return password

print(generate_password())"
Create a function in Python to check if a string contains a palindrome. The function should be able to identify if a given string contains a palindrome of at least 4 characters in length.,"def is_palindrome(string):
 rev_str = string[::-1]
 for i in range(len(string) - 3):
  surr_str = string[i:i+4]
  if rev_str[i:i+4] == surr_str:
   return True
 return False"
Create a python program to simulate basic Twitter functionality,"def post_tweet(username, tweet):
    tweet_db.addTweet(username, tweet)

def get_tweets(username):
    return tweet_db.getTweets(username)

def delete_tweet(username, tweetId):
    tweet_db.deleteTweet(username, tweetId)"
Write a Python program to perform a series of transformations on a given list.,"def transformations(arr):
    result = [x*2 for x in arr if x%2 != 0]
    result = [x-3 for x in result]
    return result"
Build a Python program to compute the sum of the two given integers.,"def add_two_ints(a, b):
    return a + b"
Produce a Python program that calculates the average of a list of numbers.,"def average(numbers):
	total = 0
	for num in numbers:
		total += num
	return total/len(numbers)

nums = [1,2,3,4,5,6]
print(""Average of the list of numbers is:"", average(nums))"
Create a Python program to swap the first and last items in a list.,"def swap(items):
    temp = items[0]
    items[0] = items[-1]
    items[-1] = temp
    return items"
Write a Python script to compute the mean of a given set of numbers.,"def mean(list_of_numbers):
    total = 0
    for num in list_of_numbers:
        total += num
    return total / len(list_of_numbers)

list_of_numbers = [78.3, 75.1, 76.7, 78.2]
mean_of_list = mean(list_of_numbers)
print(mean_of_list)"
Write a function in Python that takes a list and prints out all the elements in the list.,"def printList(list1): 
    for x in list1: 
        print(x) 

printList(list1)"
Create a Python program that sorts a list of integers in increasing order.,"def sort_integers(nums):
    for i in range(len(nums)): 
        for j in range(i+1, len(nums)): 
            if nums[i] > nums[j]: 
                nums[i], nums[j] = nums[j], nums[i]
    return nums"
Generate a description of an object with a suite of Python list comprehensions.,"colors = ['red', 'green', 'blue', 'purple']
shapes = ['square', 'circle', 'triangle', 'hexagon']
objects = [{'color': color, 'shape': shape} for color in colors for shape in shapes]

print(objects)"
Create a Python script that takes a word as an input and returns a list of synonyms for that word.,"import requests
import json

word = input(""Enter a word: "")

url = ""https://api.datamuse.com/words?rel_syn="" + word

response = requests.get(url)

if response.status_code == 200:
 json_data = json.loads(response.text)
 synonyms = [item['word'] for item in json_data]
 print(synonyms)
else:
 print(""Something went wrong!"")"
Write a python function to find the last digit of a given number.,"def last_Digit(n) :
    return (n % 10) "
Write a Python program to query a MySQL Server and display the results in a readable format,"import mysql.connector

# Connect to local MySQL Server
conn = mysql.connector.connect(
    user='root',
    password='root',
    host='localhost',
    database='test'
)
cursor = conn.cursor()

# Execute SQL Query
sql = ""SELECT * FROM users""
cursor.execute(sql)

# Fetch and print results
data = cursor.fetchall()
for record in data:
    print(record)"
"Design a function in Python which takes a list of numbers as the input, and returns the maximum element of the list.","def max_list_element(list):
    max_list_element = None
    for element in list:
        if max_list_element is None or max_list_element < element:
            max_list_element = element
    return max_list_element"
Construct an algorithm in Python to calculate the number of possible outcomes of flipping a coin 8 times.,"def count_outcomes(n):
  if n == 0:
    return 1 
  else: 
    return count_outcomes(n-1) + 2**n

print(count_outcomes(8)) # 256"
Write Python code to maximize this objective function.,"def maximize_obj_func(x):
    return 2*x - 4

x_opt = maximize_obj_func(x)
opt_val = obj_func(x_opt)
print(""Optimum value of objective function: "", opt_val)"
Rewrite this C++ loop in Python:,"for i in range(10):
    print(i)"
Write a Python code to sort a dictionary by values,"sorted_dictionary = sorted(dictionary.items(), key=lambda x: x[1])
print(sorted_dictionary)"
Create a python program that takes in temperature readings and prints if it is below 15 degrees or over 30 degrees.,"def check_temperature(temp):
  if temp <= 15:
    print('It is below 15 degrees.')
  elif temp >= 30:
    print('It is over 30 degrees.')
  else:
    print('Temperature is normal.')"
Develop a program in Python to identify the longest string in a list of strings.,"def longest_string(string_list):
    longest_str = string_list[0]
    longest_len = len(longest_str)
    for string in string_list:
        if len(string) > longest_len:
            longest_str = string
            longest_len = len(string)
    return longest_str

string_list = ['apple', 'bee', 'cat']
longest_str = longest_string(string_list)
print(longest_str)"
"Using the given input, sort a list containing both numerical and strings data types in Python.","# define list 
lst = [1, 'c', 3, 'a', 2, 'b']

# sort list
sorted_lst = sorted(lst, key=lambda x:str(x))

# print sorted list
print(sorted_lst)"
Create a Python program to remove all the duplicates from a given list.,"def remove_duplicates(lst): 
  non_duplicate_lst = [] 

  for i in lst: 
    if i not in non_duplicate_lst: 
      non_duplicate_lst.append(i) 

  return non_duplicate_lst 

lst = [1, 4, 2, 5, 6, 4, 1, 5]
print(remove_duplicates(lst))"
Write a Python code snippet to sum the elements of two given lists.,"def sum_lists(list1, list2):
  return [a + b for a, b in zip(list1, list2)]"
"Develop a web socket server with Python that will communicate with a web client, and process messages received from the user.","import asyncio
import websockets

async def handler(websocket, path):
    message = await websocket.recv()
    print(f""Received {message}"")
    await websocket.send(message)

start_server = websockets.serve(handler, 'localhost', 8765)

asyncio.get_event_loop().run_until_complete(start_server)
asyncio.get_event_loop().run_forever()"
Write a function to remove the duplicates from the given tuple.,"def remove_tuple(test_tup):
  res = tuple(set(test_tup))
  return (res) "
Edit the following python program to ensure that it runs correctly.,"def addNumbers(a, b):
    product = 10 * a + b
    return product"
Write a code in Python to add two given numbers.,"#Function to add two given numbers
def add(x, y):
   return x + y
  
# Print the sum
print(add(x, y))"
Optimize this code in Python to reduce the time complexity from O(n^2) to O(nlogn).,"def maximum_two(arr):
    arr.sort(reverse=True) 
    m1 = arr[0] 
    m2 = arr[1]
    return (m1, m2)"
How can you return two values from a Python function?,"There are multiple ways to return multiple values from a Python function. One way is to use a tuple inside the function and return it. Another way is to use Python's 'return' statement to return multiple values. For example:

def get_multi_values():
    value1 = ""ABC""
    value2 = 123
    return value1, value2

value1, value2 = get_multi_values()
print(value1, value2)"
Generate a function in Python that returns a random element from a given list.,"import random

def getRandomElement(list):
  random_index = random.randint(0,len(list)-1)
  return list[random_index]

list = [""cat"", ""dog"", ""bird""]
random_element = getRandomElement(list)
print(random_element)
// Output: one of [""cat"", ""dog"", ""bird""] randomly"
Write a function in Python to find the sum of two arguments.,"def sum(num1, num2): 
    return num1 + num2"
Create a function in Python to print a random element from a list.,"import random

def print_random_element(list):
    index = random.randint(0, len(list)-1)
    print(list[index])"
Think of a data structure and implement it using Python.,"class Queue:
    def __init__(self):
        self.queue = []

    def enqueue(self, element):
        self.queue.append(element)

    def dequeue(self):
        return self.queue.pop(0)"
Create a Python program to check for anagrams of a string.,"def anagramCheck(str1, str2):
    if (len(str1) != len(str2)):
        return False

    str1 = sorted(str1)
    str2 = sorted (str2)

    # Compare each character in str1 with
    # each character in str2
    for i in range( len( str1 ) ):
        if (str1[i] != str2[i]):
            return False
 
    return True"
Create a Python program to check if a list is sorted in ascending order.,"def isListAscending(listA): 
    return all(listA[i] <= listA[i+1] for i in range(len(listA)-1)) 

# Driver code 
listA = [1, 5, 9, 10] 
# listA = [10, 9, 5, 1] 

# Print result 
print(isListAscending(listA))"
Find and fix the errors in this Python code.,"a = 10
b = 15
c = a + b

print(c)"
Create a class in Python to count the instances of an object.,"class Counter:
 def __init__(self):
  self.count = 0
 
 def increment(self):
  self.count += 1
 
 def get_count(self):
  return self.count"
"Classify the following Python code as a linear search, binary search, or other.",This is a linear search.
Develop a program in Python that can convert a given temperature from Celsius to Fahrenheit.,"def celsius_to_fahrenheit(celsius):
    return celsius * (9/5) + 32

temperature = celsius_to_fahrenheit(32)
 
print(""32°C is equal to %.2f°F"" % temperature)"
Generate a Python script to print an inverted triangle pattern made up of asterisks.,"def inverted_triangle(length):
    for i in range(length, 0, -1):
        for j in range(length - i):
            print(' ', end="""")
        for j in range(2 * i - 1):
            print('*', end="""")
        print()

inverted_triangle(5)

# Output:
# *****
#  ***
#   *"
Create a Python algorithm to calculate the maximum profit that can be earned given a stock's price list for the day.,"def maxProfit(prices):
 maxProfit = 0
 minPrice = float('inf')

 for price in prices:
 minPrice = min(minPrice, price)
 maxProfit = max(maxProfit, price - minPrice)

 return maxProfit

# example
maxProfit([5, 7, 1, 3, 6, 8]) # returns 7"
Create a recursive Python function to calculate the Fibonacci sequence up to the given number n.,"def fibonacci(n):
  if n <= 1:
    return n
  else:
    return fibonacci(n-1) + fibonacci(n-2)"
Create a function in Python to create a list of the first 10 numbers divisible by five.,"def five_divisible():
  i = 0
  my_list = []
  while i < 10:
    if i % 5 == 0:
      my_list.append(i)
    i = i + 1
  return my_list

print(five_divisible())"
Convert the following algorithm into a recursive Python function,"def sum_digits(n):
    """"""
    Calculates the sum of all digits of a number

    Args:
        n (int): The number

    Returns:
        int: The sum of the digits
    """"""
    if n == 0:
        return 0
    return n % 10 + sum_digits(n // 10)"
Optimize an algorithm written in Python that sums up the numbers in an array.,"def sum_numbers(arr):
    result = 0
    for num in arr:
        result += num
    return result

arr = [2, 4, 6, 8]

print(sum_numbers(arr))

# optimized version
def optimised_sum_numbers(arr):
    return sum(arr)

print(optimised_sum_numbers(arr))"
Write a python script that normalizes the given text.,"import re

def normalize_text(text):
    return re.sub(r'[^\w\s]','',text.lower())

text = ""The cat and rat chAsEd eAch other""
print(normalize_text(text))

# Output: the cat and rat chased each other"
"Create a Python function that takes a dictionary as an argument, and returns the value with maximum frequency in that dictionary.","def max_freq_val(dic): 
    max_freq = 0
    max_val = None
    for val in dic.values():
        if dic.values().count(val) > max_freq:
            max_freq = dic.values().count(val)
            max_val = val
    
    return max_val

max_val = max_freq_val(dic)
print(max_val)"
Generate code for a key-value store using the Python dictionary.,"def set_value(store, key, value):
  store[key] = value

def get_value(store, key):
  return store[key]

def delete_value(store, key):
  del store[key]"
Find the most frequent value in the given array in Python.,"from collections import Counter

def most_frequent(input_list):
    count = Counter(input_list)
    max_freq = max(count.values())
    for num, freq in count.items():
        if freq == max_freq:
            most_frequent_element = num
    return most_frequent_element

result = most_frequent([2, 3, 4, 2, 5, 3])
print(result)"
Design a loop in Python to iterate over the elements of a list and print the elements in reverse order.,"my_list = [10, 15, 20]
for i in my_list[::-1]:
    print(i)"
Code an algorithm in Python to compute the Fibonacci sequence.,"def fibonacci(n): 
    a = 0
    b = 1
    if n < 0: 
        print(""Incorrect input"") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2,n): 
            c = a + b 
            a = b 
            b = c 
        return b 
  
# Driver Program 
print(fibonacci(10)) 

# Output: 55"
Create a Python script to extract a list of unique words from the given text.,"import re

text = 'This is a sample text with some duplicate entries'
words_list = re.findall(r'\w+', text)
unique_words = set(words_list)

print(unique_words)
# output: {'some', 'is', 'duplicate', 'with', 'entries', 'text', 'This', 'a'}"
Generate a Python program to create a dictionary and add elements to it.,"def create_dict():
    my_dict = {} 
  
    # adding elements one at a time 
    my_dict['a'] = 'alpha'
    my_dict['g'] = 'gamma'
    my_dict['o'] = 'omega'
  
    print(my_dict) 
    return my_dict"
Write a Python function that takes a string and reverses it.,"def reverse_string(string):
    return string[::-1]"
Generate a function for vector addition in Python.,"def vector_addition(v1, v2):
    result = [v1[i] + v2[i] for i in range(len(v1))]
    return result

result = vector_addition([1,2,3], [4,5,6])
print(result)"
Write a Python program to convert a given binary number to decimal.,"def binary_to_decimal(binary):
    decimal, i = 0, 0
    while binary != 0: 
        dec = binary % 10
        decimal = decimal + dec * pow(2, i) 
        binary = binary//10
        i += 1
    return decimal"
Create a function to replace all instances of a string in another string.,"def replace_string(old, new, s): 
    return s.replace(old, new) 


input_string = ""I love Python programming language""
new_string = replace_string(""Python"", ""JavaScript"", input_string)
print(new_string)

# Output: I love JavaScript programming language"
Generate a Python class that stores a collection of words and counts the frequency of each word.,"class WordFrequency:
    def __init__(self):
        self.words = {}

    def add_word(self, word):
        if word not in self.words:
            self.words[word] = 1
        else:
            self.words[word] += 1

    def count_frequency(self):
        for word, count in self.words.items():
            print(f""{word}: {count}"")"
Create a method to find the maximum element in a 2-D array in Python.,"def maxElement2DArray(arr):
    maxElement = arr[0][0]

    for row in range(len(arr)):
        for column in range(len(arr[row])):
            maxElement = max(maxElement, arr[row][column])
    return maxElement"
Design an algorithm in Python to find all the prime factors of an input number.,"def prime_factors(n):
    factors = []
    d = 2
    while n > 1:
        while n % d == 0:
            factors.append(d)
            n = n/d
        d = d + 1

    return factors"
"Create a python script to generate a set of random numbers between 1 and 10, and print out the largest number in the set.","import random

random_numbers = [random.randint(1, 10) for _ in range(20)]
max_number = max(random_numbers)

print(random_numbers)
print(f'The largest number is {max_number}')"
Create a python script to parse a given XML document.,"import xml.etree.ElementTree as ET

def parse_xml_document(filename):
    tree = ET.parse(filename) 
    root = tree.getroot() 

    # loop through the items in XML 
    for child in root: 
        print(child.attrib)"
Construct a Python program that calculates a person's BMI given their height and weight.,"def calculate_bmi(weight, height):
    bmi = weight / (height**2)
    return bmi

weight = 70
height = 1.80

bmi = calculate_bmi(weight, height)
print(""BMI: "" + str(bmi))"
Create a class in Python that will represent a tree. The class should include methods for adding and removing nodes.,"class Tree:
 def __init__(self, data=None):
 self.data = data
 self.children = []

 def add_child(self, obj):
 self.children.append(obj)

 def remove_child(self, obj):
 self.children.remove(obj)


root = Tree('root')
node1 = Tree('node1')
node2 = Tree('node2')

root.add_child(node1)
root.add_child(node2)"
"Given a string and a character, write a Python function to count the number of occurrences of the character in the string.","def count_characters(string, char):
    return sum([1 for x in string if x == char])"
Write a Python program to generate a list with the first 25 odd numbers.,"def print_odd_numbers():
    result = []
    for num in range(1, 51):
        if num % 2 != 0:
            result.append(num)
    return result

list_odd_numbers = print_odd_numbers()
print(list_odd_numbers)"
Write a recursive Python function to generate Fibonacci numbers.,"def fibonacci(n):
    if n == 1 or n == 2:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)
 
print(fibonacci(10))"
Write a function in Python that takes a list of integers and returns the sum of the even numbers in the list.,"def sum_even_integers(lst):
    total = 0
    for num in lst:
        if num % 2 == 0:
            total += num
    return total

print(sum_even_integers([1, 2, 3, 4, 5, 6])) # 12"
Generate a Python code snippet to find the maximum element in an array.,"def find_max(arr):
    max = arr[0]
    for i in range(1, len(arr)):
        if arr[i] > max:
            max = arr[i]
    return max"
"Generate a class in Python, implementing the __init__ and __str__ methods to initialize a variable and print its value.","class Person:
    def __init__(self, name):
        self.name = name

    def __str__(self):
        return self.name

p = Person('John Doe')
print(p)"
"Write a function in Python that receives two positive integers and prints out all the numbers in the range of the two integers (inclusive), except for numbers divisible by three.","def print_numbers(lower_bound, upper_bound):
 for num in range(lower_bound, upper_bound+1):
 if num % 3 != 0:
 print(num)
  
print_numbers(5, 15)"
"Create a REST API for a simple ""hello world"" application in Python. The API should have endpoints for greeting a visitor and returning the current date and time.","# main.py
import datetime
from flask import Flask, jsonify

app = Flask(__name__)

@app.route('/')
def hello():
 greeting = ""Hello, world!""
 return jsonify(greeting)

@app.route('/date')
def date():
 now = datetime.datetime.now()
 return jsonify(now)

if __name__ == '__main__':
 app.run(debug=True)"
You need to write a Python program which converts a given Fahrenheit temperature to its corresponding Celsius temperature.,"def fahrenheit_to_celsius(temperature_fahrenheit):
    temperature_celsius = (temperature_fahrenheit - 32) * 5.0 / 9.0
    return temperature_celsius

result = fahrenheit_to_celsius(temperature_fahrenheit)
print(f""{temperature_fahrenheit}°F = {result}°C"")
# Output: 68°F ="
Develop a program that alters and returns a given string.,"""""""
Develop a program that alters and returns a given string
""""""

def alter_string(string):

    # alter the original string 
    string_altered = string.replace(""!"", ""?"")

    return string_altered

if __name__ == '__main__':
    string = ""Python is fun!""
    print(alter_string(string))"
Create a Python script to illustrate the concept of Threading.,"from threading import Thread

def worker():
    print(""I am a worker"")

threads = list()
for _ in range(5):
    th = Thread(target=worker)
    threads.append(th)
    th.start()

for th in threads:
    th.join()

print(""Done"")"
Implement a python function to remove all special characters from a string.,"import re

def remove_special_characters(string):
    return re.sub('[^A-Za-z0-9]+', '', string)"
Generate a python code to classify an array of numbers into a set of categories,"def even_odd_classification(arr):
    evens = []
    odds = []

    for i in arr:
        if i % 2 == 0:
            evens.append(i)
        else:
            odds.append(i)
    
    return evens, odds"
Create a program in any language that reads numbers from the keyboard until it reads a negative number and then prints the sum of the numbers that have been read.,"Python solution:

num = int(input('Enter a number: '))
sum = 0

while num >= 0:
    sum += num
    num = int(input('Enter a number: '))

print('The sum is', sum)"
Write a code to define a class object in Python.,"class Object:
  def __init__(self,attr1,attr2,attr3):
    self.attr1 = attr1
    self.attr2 = attr2
    self.attr3 = attr3"
Design a Python program for Bubble Sort,"def bubble_sort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(0, n-i-1):
            if arr[j] > arr[j+1]:
                # swap elements
                arr[j], arr[j+1] = arr[j+1], arr[j]"
Write a python function to search a list of numbers for a given number and output the position if found.,"def search_list(numbers, search):
    for index, num in enumerate(numbers):
        if num == search:
            return index
    return -1"
Can you create a Python script to find the maximum element in the given array using divide and conquer algorithm?,"def findMaxElement(arr, low, high):
    if (high == low): 
        return arr[low] 
    else: 
        mid = (low + high) // 2
        max_left = findMaxElement(arr, low, mid) 
        max_right = findMaxElement(arr, mid + 1, high) 
        return max(max_left, max_right) 

print(findMaxElement(arr, 0, len(arr)-1)) # 20"
Design an algorithm in Python to calculate the greatest common divisor of two numbers.,"def gcd(x,y): 
 if x == 0: 
 	return y 
 return gcd(y%x, x) 

# Driver code
print(gcd(x,y))"
Build a decision tree model in Python.,"# Import decision tree classifier from the sklearn library
from sklearn import tree
 
# Input data to the model
X = [[0, 0], [1, 1]]
y = [0, 1]
 
# Create a decision tree classifier object
clf = tree.DecisionTreeClassifier()
 
# Train the decision tree classifier
clf = clf.fit(X, y)"
"Optimize the following Python code to sort a set of numbers (set = [2, 6, 3, 8, 4]) in O(n) time complexity.","def sort_list(unsorted_list):
    sorted_list = []
    while unsorted_list:
        min_elem = min(unsorted_list)
        unsorted_list.remove(min_elem)
        sorted_list.append(min_elem)
    return sorted_list"
Can you suggest an algorithm for finding all the permutations of a given string in Python?,"def permutations(string):
  if len(string) == 1:
    return [string]
  
  result = []
  for i in range(0, len(string)):
    subString = string[0:i] + string[i+1: len(string)]
    subPermutations = permutations(subString)
    for j in range(0, len(subPermutations)):
      result.append(string[i] + subPermutations[j])
  
  return result"
Generate a Python program to find groups of numbers that are divisible by a given number (n).,"def find_groups(n):
    groups = []
    for i in range(2, n):
        group = []
        for j in range(1, n):
            if i * j % n == 0:
                group.append(i * j)
        if group:
            groups.append(group)
    return groups"
Design a Python program to implement the Bubble Sort algorithm.,"def bubble_sort(arr):
    for i in range(len(arr) - 1):
        for j in range(len(arr) - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
    return arr

result = bubble_sort([1, 8, 4, 6, 2, 5])
print(result)"
Write a Python script to sort dictionaries as per the value.,"dictionary = {""a"": 10, ""b"": 3, ""c"": 4, ""d"": 1, ""e"": 5}
sorted_dict = dict(sorted(dictionary.items(), key=lambda x: x[1],reverse = False)) 
 
print(""Sorting Dictionary as per the Value: "")
print(""The Original Dictionary : "",dictionary)  
print(""The Sorted Dictionary : "",sorted_dict)"
"Design a class in Python that implements a stack with the basic operations (push, pop, and peek)","class Stack:
    def __init__(self):
        self.items = []
        
    def push(self, item):
        self.items.append(item)

    def pop(self):
        return self.items.pop()
    
    def peek(self):
        return self.items[-1]
    def isEmpty(self):
        return self.items == []"
Create another version of a python program which multiplies two numbers without using the multiplication operator.,"def multiply_2_numbers(x, y):
    product = 0
    for i in range(y):
        product += x
    return product"
Create a Python dictionary to store the details of different users with their names as the key.,"users = {
  ""John"": {
    ""age"": 28,
    ""location"": ""New York""
  },
  ""Mary"": {
    ""age"": 34,
    ""location"": ""London""
  },
  ""David"": {
    ""age"": 40,
    ""location"": ""Berlin""
  }
}"
Create a basic Python program that prints out the class average for a list of student grades.,"numbers = [80, 85, 90, 75, 95]

total = 0
for number in numbers:
 total += number

class_average = total / len(numbers)
print(class_average)"
Create a function in Python to calculate the power of a number.,"def power(num, pow):
 return num**pow"
Create a function in Python which takes a given string and returns a dictionary containing the frequency of each word in the string.,"def word_frequency(string):
    word_freq = {} 
  
    for word in string.split(): 
        if word in word_freq: 
            word_freq[word] += 1
        else: 
            word_freq[word] = 1
  
    return word_freq 
      
string = ""Hello world hello world""
print(word_frequency(string))"
Combine the two Python lists into a single list.,"combined_list = list1 + list2
print(combined_list)"
Create a Python function that converts an integer into a binary representation as a string.,"def to_binary(num):
  result = """"
  while num > 0:
   remainder = num % 2
   num = num // 2
   result = str(remainder) + result
  return result

print(to_binary(13)) # '1101'"
Write a Python program to format a number with leading zeros.,"def leading_zeros(num, zeros=6):
  return str(num).zfill(zeros)"
Create a Python program that prints out the Fibonacci series up to n.,"# Returns the nth Fibonacci number
def Fibonacci(n):
    if n == 0: 
        return 0
    elif n == 1: 
        return 1
    else: 
        return Fibonacci(n-1) + Fibonacci(n-2) 

# Prints the Fibonacci series
n = 5 
for i in range(n+1): 
    print(Fibonacci(i))"
Create a Python script to divide two sets and store the results in a new set.,"set1 = {2, 4, 6, 8, 10} 
set2 = {3, 5, 7, 9}

# Divide two sets and store the results in a new set
new_set = set1.difference(set2) 
 
# Print the result
print(new_set) # Output: {2, 4, 6, 8, 10}"
Construct a Python program that tests if an input number is an Armstrong number,"def is_armstrong_number(num):
    order = len(str(num))
    sum = 0
    temp = num

    while temp > 0:
        remainder = temp % 10
        sum += remainder ** order
        temp //= 10

    if sum == num:
        return True
    else:
        return False"
Classify the following items using a supervised machine learning algorithm in Python,"import numpy as np 
from sklearn import svm 

# Input data to classify
X = np.array([[3, 5, 7, 1, 0]])

# Label data, either 0 or 1
y = np.array([0])

# Create a SVC classifier
clf = svm.SVC(gamma=0.001, C=100.)

# Train the model, using the training sets
clf.fit(X, y)

print('Prediction:', clf.predict(X))

Output:
Prediction: [0]"
Write a function to find the pairwise addition of the elements of the given tuples.,"def add_pairwise(test_tup):
  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))
  return (res) "
Create a Python program to detect if a number is a prime number.,"def is_prime(x):
    if x < 2:
        return False
    
    for i in range(2, x):
        if x % i == 0:
            return False
    return True"
"Formulate a Python loop to print out the words ""Hello World"" 10 times.","for i in range(10):
    print(""Hello World"")"
Create a Python program to check if two given lists are disjoint.,"def check_disjoint(list1, list2):
    return not bool(set(list1) & set(list2))

result = check_disjoint(list1, list2)
print(result)"
"Create a python function which takes two inputs, a list of strings and a character, and returns a dictionary containing the count of each string beginning with the given character.","def find_words(words, char):
    count_dict = dict()
    for word in words:
        if word.startswith(char):
            count_dict[word] = count_dict.get(word, 0) + 1
    return count_dict"
Generate a Python program that can convert temperature from Fahrenheit to Celsius.,"def fahrenheit_to_celsius(F):
    # convert Fahrenheit to Celsius
    C = (F - 32) * 5.0/9.0
    return C

F = 78.8
C = fahrenheit_to_celsius(F) 
print('%0.1f degree Fahrenheit is equal to %0.1f degree Celsius' %(F,C))"
Generate a code snippet in Python that takes a user-inputted string and creates and prints a dictionary with keys that are the indices of the characters in the string.,"user_string = input('Enter a string: ')
char_dict = {i:char for i, char in enumerate(user_string)}
print(char_dict)"
Create a function in Python to print the Fibonacci numbers from 0 to 1000.,"def printFibonacci(): 
    fib1 = 0
    fib2 = 1
    print(fib1, end = "" "") 
    while (fib2 < 1000): 
        print(fib2, end = "" "") 
        temp = fib2
        fib2 = fib2 + fib1   
        fib1 = temp"
"Input a text string, and build a function in Python to count the number of vowels in the string.","def countVowels(sentence):
    vowels = 'aeiouAEIOU'
    count = 0
    for ch in sentence:
        if ch in vowels:
            count += 1
    return count

result = countVowels('The quick brown fox jumps over the lazy dog')
print(result)"
Create a python program to sort a given array in increasing order.,"def insertion_sort(arr):
    for key in range(1,len(arr)):
        j=key
        while j>0 and arr[j-1] > arr[j]:
            arr[j-1],arr[j]=arr[j],arr[j-1]
            j-=1
    return arr

print(insertion_sort([21, 3, 14, 15, 5, 21]))"
Develop an algorithm in Python to store a set of objects in the most efficient data structure.,"def store_elements(elements):
    store = []
    for i in elements:
        store.append(i)
    return store

objects = [1, 2, 3, 4, 5]
storage = store_elements(objects)
print(storage)"
Create a function in Python that will take two strings and merge them together without spaces.,"def joinStrings(s1, s2):
    return s1 + s2

print(joinStrings('Hello', 'World'))"
Write a python function to replace multiple occurence of character by single.,"import re 
def replace(string, char): 
    pattern = char + '{2,}'
    string = re.sub(pattern, char, string) 
    return string "
Create a program in Python that takes two lists and checks for common elements between them.,"list1 = [1,2,3,4]
list2 = [3,4,5,6] 

def check_common(list1, list2): 
    result = False
    for x in list1: 
        for y in list2: 
            if x == y: 
                result = True
                return result  
    return result 
  
print(check_common(list1, list2))"
Develop a python program that checks if a given word is consonant or not.,"def is_consonant(word): 
    # List containing all consonants 
    consonants = [""b"",""c"",""d"",""f"",""g"",""h"",""j"",""k"",""l"",""m"",""n"",""p"",""q"",""r"",""s"",""t"",""v"",""x"",""z""] 
    for char in word: 
        if char in consonants: 
            return True
    return False

# Example
print (is_consonant(""hello"")) # False"
Generate a function in Python that will take a username and password as parameters and authenticate the user.,"def authenticate(username, password):
    """"""Authenticate a user with username and password""""""
    # Your authentication implementation
    return is_authenticated  # true or false"
"Create a Python class for a Car with the attributes 'color', 'make', 'model', and 'price'.","class Car:
    def __init__(self, color, make, model, price):
        self.color = color
        self.make = make
        self.model = model
        self.price = price"
Can you provide a Python program to generate all possible combinations of a given list of numbers?,"import itertools

# list of numbers
list_of_nums = [1, 2, 3]

# get all possible combinations of numbers
combinations = itertools.combinations(list_of_nums, 3)

# print all possible combinations
for combination in combinations:
    print(combination)"
How do you create a function in Python to find the highest common factor of the two given numbers?,"def highestCommonFactor(num1, num2): 
    if num1 > num2: 
        small = num2 
    else: 
        small = num1 
    for i in range(1, small+1): 
        if((num1 % i == 0) and (num2 % i == 0)): 
            hcf = i 
    return hcf"
Compute the sum of two matrices in Python.,"import numpy as np

matrix_1 = np.array(matrix_1)
matrix_2 = np.array(matrix_2)

result = np.add(matrix_1, matrix_2)

## Output: [[ 8 10 12], [14 16 18]]"
Generate a python program to print the ordered combination of the elements of the given list.,"def ordered_combination(arr):
    result = []

    # Generate all permutations using library function 
    permutations = itertools.permutations(arr, len(arr)) 

    # Append each permutation in a list  
    for permutation in permutations: 
        result.append(list(permutation)) 
  
    # Return the list of ordered combinations
    return result"
Generate a Python list comprehension that returns all even numbers in a given range.,"even_nums = [num for num in range(start_num, end_num + 1) if num % 2 == 0]"
Create and solve a traveling salesman problem using Python.,"import networkx as nx

def solve_tsp(G):
    dist_matrix = {frozenset({v,w}):G[v][w]['weight'] for v in G for w in G}    
    return nx.algorithms.tournament.tsp.solve_tsp(G, dist_matrix)"
"Create a Dockerfile to build a container with python, flask, and gunicorn.","FROM python:3.7
	
RUN mkdir /usr/src/app

WORKDIR /usr/src/app

COPY requirements.txt ./

RUN pip install --no-cache-dir -r requirements.txt

EXPOSE 5000

COPY . .

CMD [""gunicorn"", ""--workers"", ""3"", ""-eventlet"", ""--bind"", "":5000"", ""wsgi:app""]"
Create an algorithm in Python to generate the fibonacci sequence.,"def fibonacci_sequence(n):
    sequence = [1]
    if n == 1:
        return sequence
    else:
        sequence.append(1)
        for i in range(2, n):
            sequence.append(sequence[i-1] + sequence[i-2])
        return sequence

n = 10
result = fibonacci_sequence(n)
print(result)"
Create a Python program which takes a list of strings as input and outputs a dictionary containing the count of each string.,"string_list = ['Python', 'Java', 'C', 'Python', 'JavaScript']

string_dict = {}
for string in string_list:
 if string in string_dict:
 string_dict[string] += 1
 else:
 string_dict[string] = 1

print(string_dict) # Output: {'Python': 2, 'Java': 2, 'C': 1, 'JavaScript': 1}"
"Using Python, create a function to convert HTML to plain text.","import lxml.html as lh

def html_to_text(html):
    tree = lh.fromstring(html)
    return tree.text_content()

html = ""<p>Hello world!</p><div><p>This is a test.</p></div>""

print(html_to_text(html))"
What is the output of this python program?,13
Transform string of format ‘YYYY-MM-DD’ to date type in Python,"import datetime

def date_string_to_datetime(date_str):
  return datetime.datetime.strptime(date_str, ""%Y-%m-%d"").date()"
Create a variable in Python to store the length of a list.,list_length = len(example_list)
Generate a Python program that inputs a sequence of numbers and returns the largest number in the sequence.,"num_list = list() 
num = input(""Enter how many elements you want:"") 
print ('Enter numbers in array: ') 
  
for i in range(int(num)): 
    n = input(""num :"") 
    num_list.append(int(n)) 
  
print ('Largest number is:', max(num_list))"
Create a Python algorithm to check if a given word exists in a dictionary.,"# Function to test if a word exists in a dictionary 
def wordExists(dictionary, word):
    for key, value in dictionary.items():
        if key == word:
            return True
    
    return False

# Main function
dictionary = {""hello"": ""greeting"", ""car"": ""vehicle""}
word = ""hello""
print(wordExists(dictionary, word))"
Create an algorithm that checks if a given String is a valid identifier in Python.,"def is_valid_identifier(string):
  if string.isidentifier():
    return True
  else:
    return False"
Design a code snippet in Python to find the factorial of a given number.,"def factorial(num): 
    if num == 0:
        return 1
    else:
        return num * factorial(num-1)

num = 5
fact = factorial(num)
print(""Factorial of"", num,"" is"", fact)"
Create a Python function which returns the greatest common divisor of two integers.,"def greatest_common_divisor(a, b):
    # Ensure that a is greater than b
    if a < b:
        a, b = b, a

    # Calculate the GCD of a and b
    while b != 0:
        # Get the remainder
        rem = a % b
        # Set a to b
        a = b
        # Set b to the remainder
        b = rem

    # Return the greatest common divisor
    return a

print(greatest_common_divisor(18, 48))"
Write a python program to return the average value of numbers in the given list.,"def avg_list(numbers): 
    total = 0
    for x in numbers: 
        total += x 
    return total / len(numbers)"
Optimize a given Python code to improve the performance.,"def find_common_elements(lst1, lst2):
    result = []
    set_2 = set(lst2)
    for elem1 in lst1:
        if elem1 in set_2:
            result.append(elem1)
    return result"
Generate a python program that prints the cube of a given number.,"def print_cube(num):
    print(num**3)
    
num = 3
print_cube(num)"
Design a data structure in Python that stores customer data such as customer ID and payment history.,"class Customer:
 def __init__(self, customer_id, payments):
  self.customer_id = customer_id
  self.payments = payments
  
# Sample usage
customers = []
customers.append(Customer(1, [50, 100, 150]))
customers.append(Customer(2, [75, 125, 175]))"
Create a python program to rotate a list of numbers by a given number.,"def rotate_list(nums, n):
  return nums[n:] + nums[:n]"
Write a Python program that croscorrelates two given arrays.,"import numpy as np
 
#input arrays
arr1 = np.array([2, 3, 5, 7])
arr2 = np.array([1, 4, 6, 8])

#calculating correlation
correlation = np.corrcoef(arr1, arr2)

#printing correlation
print(""Correlation: "", correlation[0][1])"
Generate a program in Python to generate a list with numbers from 1 to 20 in random order.,"import random

def randomListGenerator():
    randomList = []
    for i in range(1, 21):
        randomNumber = random.randint(1,20)
        while randomNumber in randomList:
            randomNumber = random.randint(1,20)
        else:
            randomList.append(randomNumber)
    return randomList

print(randomListGenerator())"
Generate a correct python program for solving the following problem,"def find_pairs_with_sum(values, target):
    indices_list = []
    for i in range(len(values)):
        x = target - values[i]
        if x in values[i+1:]:
            indices_list.extend([i, values.index(x)])
    return indices_list"
Develop a Python program that calculates the mean of list of numbers.,"def calculate_mean(nums):
    total = 0
    for n in nums:
        total += n
    mean = total / len(nums)
    return mean

mean = calculate_mean([1, 5, 2, 4, 9])"
Optimize the following python program and reduce its runtime.,"def find_min(lst):
    min_val = lst[0]
    for value in lst[1:]:
        if value < min_val:
            min_val = value
    return min_val

list = [2, 3, 8, 4, 5]"
Write a Python program to remove the vowels from a given sentence.,"def removeVowels(my_string): 
    vowels = 'aeiouAEIOU'
    no_vowels = """"
    for char in my_string:
        if char not in vowels:
            no_vowels += char
    return no_vowels

sentence = ""A beautiful sun rises in the morning.""
print(removeVowels(sentence))

Output:
A btfll sn rs s n th mrnn."
Design a Python solution to find the position of a given element in a list.,"def find_index(arr, element):
    for index, value in enumerate(arr): 
        if value == element: 
            return index
    return -1
  
arr = ['a', 'b', 'c', 'd']
element = 'd'
print(find_index(arr, element)) # Output: 3"
Create a basic Python script that takes the string input from the command line and prints it back.,"import sys

# Get the string
string = sys.argv[1]

print(string)"
"Given an array of integers, write a function in Python to search for a given number in the array.","def search_in_array(array, number):
    for element in array:
        if element == number:
            return True
    return False

array = [1, 5, 8, 9]
number = 5
result = search_in_array(array, number)
if result:
    print(""Number found"")
else:
    print(""Number not found"")"
Create a program in Python to split a string into a list by given character,"def split_string(string, delimiter): 
    return string.split(delimiter) 

print(split_string('This is a sample string', ' '))"
Generate a Python dictionary comprehension that creates a new dictionary where the keys are the numbers from 1 to 10 and the values are their squares.,"squares = {x: x**2 for x in range(1, 11)}"
Write a Python program to impute the NaN values in the given dataset with the mean of the corresponding column.,"def impute_nan(dataset, strategy=""mean""):
  for row in range(dataset.shape[0]):
    for col in range(dataset.shape[1]):
      if np.isnan(dataset[row, col]):
        if strategy == ""mean"":
          dataset[row, col] = dataset[:, col].mean()
  return dataset"
"Given a Python dictionary and a value, write a program to remove key from the dictionary having the given value.","def remove_key_by_value(dictionary, value):
    keys_to_remove = []
    for key, val in dictionary.items():
        if val == value:
            keys_to_remove.append(key)

    for key in keys_to_remove:
        del dictionary[key]
    return dictionary"
Write code in Python to find the frequency of words in a given string.,"str = ""The apple is red and the banana is yellow.""
wordfreq = {}
 
for rawword in str.lower().split():
    word = rawword.replace(""."","""")
    if word not in wordfreq:
        wordfreq[word] = 0
    wordfreq[word] += 1
    
print(""Frequency of the words:"")
for key, value in wordfreq.items():
  print(key, value)"
Rewrite a python function from a set of instructions using list comprehension.,"def odd_numbers(numbers):
 return [n for n in numbers if n % 2 != 0]"
Develop a python program to calculate the maximum product of two numbers greater than 0 in a given numerical array.,"def maxProduct(arr): 
    n = len(arr) 
    max_prod = 0
    for i in range(0, n): 
        for j in range(i + 1, n): 
            if arr[i] > 0 and arr[j] > 0: 
                max_prod = max(max_prod, arr[i] * arr[j]) 
  
    return max_prod 

# Input
array = [6, -3, -10, 0, 2]

# Output
result = maxProduct(array)
print(result)"
Create a function to print the last character of a given string in Python.,"def print_last_char(input_string):
  print(input_string[-1])"
"Generate Python code to print the first 10 numbers from 10 to 19, seperated by commas.","for i in range(10,20):
    if i == 19:
        print(i, end = '')
    else:
        print(i, end = ', ')"
Create a Python script that will automatically detect the largest number in a given list.,"def find_largest_number(list):
 largest = list[0]
 for number in list:
 if number > largest:
 largest = number
 return largest

list = [7, 2, -4, 5, 8, 1]
print(find_largest_number(list))
# Output: 8"
Generate a Python program to unpack a given list of tuples,"list_of_tuples = [(1, ""a""), (2, ""b""), (3, ""c"")]

list_1, list_2 = zip(*list_of_tuples)

print(list_1)
print(list_2)"
Design a python program that returns the index of the first occurrence of an item in a given list,"def index_first_occurrence(item, list):
    for i in range(len(list)):
        if list[i] == item:
            return i
    return -1"
Modify this Python program to sort a given list of numbers.,"numbers.sort()
print(numbers) # prints [1, 2, 3, 4, 5]"
Generate a Python program to find the intersection of two lists.,"def intersect(l1, l2):
    return [x for x in l1 if x in l2]"
Create a Python program to read in a list of items and print them out in reverse order.,"my_list = [""Apple"", ""Pear"", ""Banana"", ""Orange""]

for item in reversed(my_list):
 print(item)"
Create a Python Program to print the Fibonacci sequence up to n terms,"def Fibonacci(n):
      
    # First and second number in the sequence 
    Fib_list = [0, 1]
    
    # Generate the Fibonacci sequence up to n terms
    for i in range(2,n): 
        Fib_list.append(Fib_list[i-2] + Fib_list[i-1])
    return Fib_list

# Driver code 
n = 5
print(Fibonacci(n))"
Create a Python script to scrape content from a website.,"import requests
from bs4 import BeautifulSoup 
 
url = 'https://example.com'
page = requests.get(url)
soup = BeautifulSoup(page.content, 'html.parser')
 
for content in soup.find_all('div', class_='content'):
 print(content.text)"
Find the most efficient algorithm to reverse a string in Python,"def reverse(input): 
  str = """" 
  for i in input: 
    str = i + str
  return str"
"Write a Python program to combine two dictionaries of similar structure together, such that the entries in the two dictionaries are merged into a single dictionary.","def merge_dict(dict_a, dict_b):
    merged_dict = {**dict_a, **dict_b}
    return merged_dict"
"Create a Python program to print out the sum of all even numbers between the given range, inclusive.","def sum_even_numbers(start, end):
 result = 0
 for n in range(start, end+1):
 if n % 2 == 0:
 result += n
 return result

print(sum_even_numbers(2, 10))"
"Using the input, create a Python program which generates a random array of length n filled with binary values.","import random

def random_binary_array(n):
    """"""Return a random array of length n with binary values.""""""
    array = []
    for i in range(n):
        array.append(random.choice([0, 1]))
    return array"
Approximate pi to 4 decimal places using Monte Carlo simulation in Python.,"import random

def approx_pi(n):
    circle_points = 0
    square_points = 0
 
    for _ in range(n):
        x = random.uniform(0, 1)
        y = random.uniform(0, 1)
        dist = x**2 + y**2
        if dist <= 1:
            circle_points += 1
        square_points +=1
 
    pi = 4 * (circle_points/square_points)
    return round(pi, 4)

print(approx_pi(1000))"
Optimize the following Python function. The function calculates the sum of squares of two given numbers.,"def SumOfSquares(x, y):
 return x * (x + y) + y * y"
Develop a Python program to calculate Fibonacci sequence.,"def Fibonacci(n): 
    F = [0]*(n+1) 
    F[0] = 0; F[1] = 1
    for i in range(2, n + 1): 
        F[i] = F[i-1] + F[i-2]
    return F[n]"
Create a Python script to combine two dictionaries into one.,"def combine_dict(dict1, dict2):
    combined_dict = dict1.copy()
    combined_dict.update(dict2)
    return combined_dict"
Generate a recursive function in Python to compute the Fibonacci series,"def Fib_recursive(n):
    if n <= 1:
        return n
    else:
        return Fib_recursive(n - 1) + Fib_recursive(n - 2)"
Tackle the task of optimizing a given Python program for faster execution.,"# Program to find the sum of two numbers
def add_numbers(a, b):
    # Use bitwise operators instead of normal arithmetic operations
    # as they are much faster and more efficient 
    return a ^ b if a <= b else b ^ a if b <= a else a ^ b"
Write a Python program to reverse the list elements.,"def reverse_list(list):
    reversed_list = list[::-1]
    return reversed_list"
Optimize this Python code to reduce run time complexity,"def function(n):
    result = 0
    for i in range(n):
        result += (n * (i * (i+1)) // 2)
    return result"
Develop a Python program to estimate the value of PI using Leibniz's formula.,"def estimate_pi(n_terms: int) -> float:
    numerator: float = 4.0
    denominator: float = 1.0
    operation: float = 1.0
    pi: float = 0.0

    for _ in range(n_terms):
        pi += operation * (numerator / denominator)
        denominator += 2.0
        operation *= -1.0

    return pi


if __name__ == ""__main__"":
    print(estimate_pi(1000))"
Create a Python program that prints out the pyramid pattern as described in the input.,"def print_pyramid(height):
    """"""Print the pyramid pattern as described in the input""""""
    for i in range(1, height+1):
        spaces = "" "" * (height - i)
        symbols = (2 * i - 1) * ""*""
        print(spaces + symbols + spaces)"
Create a function in Python to generate a random string composed of letters and digits of length 8 characters.,"import random

def random_string_generator():
    char_set = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
    random_string = ''.join(random.sample(char_set, 8))
    return random_string

print(random_string_generator())"
Write a for loop in Python to print out the squared value of the numbers from 0 to 10.,"for i in range(0,11):
    print(i**2)"
"Given a dictionary, create a program to find the longest word in Python.","def longest_word(dictionary): 
    longest = """"
    for word in dictionary: 
        if len(word) > len(longest): 
            longest = word 
    return longest"
Write a python function to find the first natural number whose factorial is divisible by x.,"def first_Factorial_Divisible_Number(x): 
    i = 1;
    fact = 1; 
    for i in range(1,x): 
        fact = fact * i 
        if (fact % x == 0): 
            break
    return i "
Can you implement a k-nearest neighbor model using Python?,"Yes, it is possible to implement a k-nearest neighbor model using Python. The SciKit-Learn library and other effective libraries such as PyKNN, KNeighbors-Classifier, and NearestNeighbors provide various functions and modules for users to implement a k-nearest neighbor model in Python."
Write a python function to find the minimum of two numbers.,"def minimum(a,b):   
    if a <= b: 
        return a 
    else: 
        return b "
Create an array of 10 integers in Python.,"arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
"Refactor a Python program by identifying code unnecessarily repeated, converting it into a function, and using the function wherever necessary.","def my_function():
  print_loop(0, 5, 'loop 1')
  print_loop(0, 5, 'loop 2')

def print_loop(start, end, tag):
  for i in range(start, end):
    print(tag + ':', i)"
Create a Python function for predicting the label for a given set of features.,"def predict_label(features):
    # write your code here
    label = None
    
    if features[0] > 10 and features[1] > 20:
        label = ""A""
    elif features[0] > 10 and features[1] < 20:
        label = ""B""
    else:
        label = ""C""
        
    return label

features = [10, 20, 30]
label = predict_label(features)
print(label)"
Construct a python program to create a dictionary encryption for a user-inputted string and display the encrypted text,"def encrypt_string(string):
    letters = {}
    for i in range(len(string)):
        letters[string[i]] = i
    encrypted_text = """"
    for char in string:
        encrypted_text += str(letters[char])
    return encrypted_text"
Generate a python program for searching for a value in an array.,"def search_value(arr, target):
    for i in range(len(arr)):
        if arr[i] == target:
            return i
    return -1"
Write a function to check if the string is a valid email address or not using regex.,"import re 
regex = '^[a-z0-9]+[\._]?[a-z0-9]+[@]\w+[.]\w{2,3}$'
def check_email(email): 
	if(re.search(regex,email)): 
		return (""Valid Email"") 
	else: 
		return (""Invalid Email"") "
Write a Python program to clean up a data set containing temperature readings. Write a function that takes the raw temperature data and returns a list of cleaned up readings as integers.,"def clean_temps(raw_readings):
 cleaned_data = []
 for reading in raw_readings:
 cleaned_data.append(int(reading.strip()))
 return cleaned_data
 
print(clean_temps(raw_readings)) 
# Output: [24, 31, 15, 21]"
Write a Python class to implement a stack.,"class Stack:
    def __init__(self):
        self.items = []

    def isEmpty(self):
        return self.items == []

    def push(self, data):
        self.items.append(data)

    def pop(self):
        return self.items.pop()

    def peek(self):
        return self.items[len(self.items)-1]

    def size(self):
        return len(self.items)"
Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.,"from itertools import groupby 
def group_element(test_list):
  res = dict()
  for key, val in groupby(sorted(test_list, key = lambda ele: ele[1]), key = lambda ele: ele[1]):
    res[key] = [ele[0] for ele in val] 
  return (res)
"
Create a Python function that takes two strings as input. The function should return a boolean value that indicates whether the two strings are anagrams of each other.,"def is_anagram(s1, s2):
 s1 = s1.replace(' ', '').lower()
 s2 = s2.replace(' ', '').lower()

 if len(s1) == len(s2):
 return sorted(s1) == sorted(s2)
 else:
 return False"
Compile a Python program that takes a given list and returns a dictionary with the list elements as keys and their frequencies as values.,"def get_frequencies(arr):
  frequency_dict = {}
  for item in arr:
    if item in frequency_dict:
      frequency_dict[item] += 1
    else:
      frequency_dict[item] = 1
  
  return frequency_dict"
Create a Python function to identify if a number is divisible by 7.,"def is_divisible_by_7(number):
    return number % 7 == 0

result = is_divisible_by_7(42)
print(result) # True"
Write a python function to find the sublist having maximum length.,"def Find_Max(lst): 
    maxList = max((x) for x in lst) 
    return maxList"
Write a Python code snippet to generate the following pattern using a single for loop.,"for i in range(1, 10):
    for j in range(1, i):
        print(""*"", end="""")
    print()"
Write a function to count array elements having modular inverse under given prime number p equal to itself.,"def modular_inverse(arr, N, P):
	current_element = 0
	for i in range(0, N):
		if ((arr[i] * arr[i]) % P == 1):
			current_element = current_element + 1
	return current_element"
Create a function in Python to find the length of a string.,"def string_length(word):
  return len(word)

print(string_length('Hello World!'))
# Output: 12"
Design an algorithm to analyze text data and identify patterns.,"A Python implementation of the algorithm that takes the text data as input, identifies patterns in the data, and produces meaningful results."
"Write a Python program to read a list of numbers from the user, and then output the average of the numbers.","numbers = []

# get numbers from the user
while True:
 user_input = input('Enter a number (or press enter to quit): ')
 if user_input == '':
 break
 numbers.append(int(user_input))

#calculate the average
average = sum(numbers) / len(numbers)

print(f'The average is {average}')"
Compute the sum of the fibonacci sequence up to n using a recursive Python function.,"def fib_sum(n):
  if n <= 1:
    return n
  else:
    return fib_sum(n-1) + fib_sum(n-2) + n

print(fib_sum(5))"
Generate a python function that takes a dataframe as its input and returns the sum of all values in the dataframe.,"def sum_dataframe(df):
 total = 0
 for col in df.columns:
 total += df[col].sum()

 return total
 
# Example usage
print(sum_dataframe(df)) # prints 18"
Create a script in Python that checks a provided URL for a specific keyword within its content and outputs either a pass or fail result.,"import requests

url = 'http://www.example.com'
keyword = 'success'

r = requests.get(url)
if keyword in r.text:
 print('Pass')
else:
 print('Fail')"
Create a python function that prints out the numbers from 1 to n,"def printNumbers(n): 
  for i in range(1,n+1): 
    print(i, end ="" "") 

printNumbers(5)"
Generate a Python script that contains a function with two parameters and returns the sum of the two parameters.,"def add(x, y): 
 """"""Returns the sum of x and y""""""
 return x + y"
"Given two strings s and t, write a Python program to check if t is a substring of s.","def is_substring(s, t):
    if t in s:
        return True
    else:
        return False"
Create a Python program that prints a welcome message to the user based on their input.,"name = input(""Enter your name:"") 
 
print(""Welcome to my program "" + name + ""!"")"
Create a class in Python to store temperature data.,"class TemperatureData:
    def __init__(self, temperature):
        self.temperature = temperature

    def get_temperature(self):
        return self.temperature"
"Write a Python program to solve a quadratic equation given the coefficients a, b, c?","import math

def solve_quadratic(a, b, c):
    # calculate discriminant
    d = (b**2) - (4*a*c)
    
    # find two solutions
    sol1 = (-b-math.sqrt(d))/(2*a)
    sol2 = (-b+math.sqrt(d))/(2*a)
    
    return sol1, sol2"
Create a python program that categorizes a given list of numbers into odd and even numbers.,"even = []
odd = []

for num in N:
    if num % 2 == 0:
        even.append(num)
    else:
        odd.append(num)"
Construct a code in Python to reverse a given list.,"myList = [""Apple"", ""Banana"", ""Cherry""]

def reverse(myList):
    myList.reverse()
    return myList

print(reverse(myList))  # [""Cherry"", ""Banana"", ""Apple""]"
Create a Python for loop that prints out each element in a given list.,"for element in [10,20,30,40]:
    print(element)"
Write a python function to find the sum of hamming distances of all consecutive numbers from o to n.,"def Total_Hamming_Distance(n):   
    i = 1
    sum = 0
    while (n // i > 0):  
        sum = sum + n // i  
        i = i * 2     
    return sum"
Generate a Python program which will take as input a string and output the corresponding hexadecimal representation of the string.,"import binascii

def stringToHex(s):
 output = ''
 for c in s:
 output += '%02x' % ord(c)

return output

inputString = input('Input a string:')
hexString = stringToHex(inputString)
print(""The hexadecimal representation of the string is: {}"".format(hexString))"
"Create a Python script to calculate all possible paths from (0,0,0) to (5,5,5).","def calculate_paths(x, y, z):
    if x == 5 and y == 5 and z == 5:
        return 1
    total_paths = 0
    if x < 5:
        total_paths += calculate_paths(x + 1, y, z)
    if y < 5:
        total_paths += calculate_paths(x, y + 1, z)
    if z < 5:
        total_paths += calculate_paths(x, y, z + 1)
    return total_paths"
Create a python program to remove all the values in a list that are greater than a given value.,"# Defining a function to remove all the values in a list that are greater than a given value
def remove_greater(list, n):
  return [val for val in list if val <= n]

# Testing the remove_greater() function
list = [10, 15, 20, 25, 30]
print(remove_greater(list, 15)) # [10, 15]"
Design and write a python program that simplifies user input.,"import re

def simplify_user_input(user_input):
    words = user_input.split("" "")
    filtered_words = [word for word in words if len(word) > 2]
    return "" "".join(filtered_words)

user_input = ""I have a great idea   !    Let's  do it""
simplified_string = simplify_user_input(user_input) # ""idea great Let's do"""
Generate a python program to generate a random list of N elements.,"import random

def generate_random_list(n):
    res = []
    for _ in range(n):
        res.append(random.randint(1, 100))
    return res"
Create a function using Python that reverses the order of the words in a given string.,"def reverse_words(string): 
    words = string.split(' ') 
    reverse = words[::-1] 
    return ' '.join(reverse)"
Create an AI model in Python that predicts whether a person is a relative of the speaker.,"def relative_prediction_model():
    # Variables
    features = [""age"", ""gender"", ""race"", ""income"", ""location"", ""origin"", ""religion"", ""political views"", ""marital status"", ""education level"", ""occupation""]
    target = ""relation""
    # Defining model, training and predicting
    model = MLPClassifier()
    model.fit(features, target)
    return model"
Write a Python program to parse a string containing HTML tags and extract the text not contained in the HTML tags.,"import re

html = '<p>This is a <a href=""https://example.com"">link</a>.'
text = re.sub(r'<[^>]+>', '', html)
print(text)

# Output: This is a link."
Generate a python program to find and print the count of each vowel present in the given string.,"vowels = ""aeiou""
input_string = input(""Input string: "")

vowel_count = {}
for char in input_string:
  if char in vowels:
    if char in vowel_count:
      vowel_count[char] += 1
    else:
      vowel_count[char] = 1

print (vowel_count)"
"Create a function in Python which takes in a number n and returns ""Fizz"" if the number is divisible by 3, ""Buzz"" if the number is divisible by 5, and ""FizzBuzz"" if the number is divisible by both 3 and 5.","def fizzbuzz(n):
 if n % 3 == 0 and n % 5 == 0:
  return 'FizzBuzz'
 elif n % 3 == 0:
  return 'Fizz'
 elif n % 5 == 0:
  return 'Buzz'
 else:
  return n"
Write a Python program to generate UUID,"import uuid

def generate_uuid():
    return str(uuid.uuid4())"
Design a Python program for generating a random alphanumeric string,"import random
import string

def generateRandomString(stringLength=8):
    lettersAndDigits = string.ascii_letters + string.digits
    return ''.join(random.choice(lettersAndDigits) for i in range(stringLength))

print (""Random alphanumeric string is:"", generateRandomString())"
Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.,"def max_sum_rectangular_grid(grid, n) : 
	incl = max(grid[0][0], grid[1][0]) 
	excl = 0
	for i in range(1, n) : 
		excl_new = max(excl, incl) 
		incl = excl + max(grid[0][i], grid[1][i]) 
		excl = excl_new 
	return max(excl, incl)"
Produce code to print out the multiplication table of a given number in Python.,"# Program to print the multiplication table
num = 5

# Iterate from 1 to 10
for i in range(1,11):
 print(f'{num} X {i} = {num * i}')"
Create an algorithm to detect a palindrome string in Python.,"def isPalindrome(str):
  left, right = 0, len(str) - 1
  while right >= left:
    if not str[left] == str[right]:
      return False
    left += 1
    right -= 1
  return True"
Write a Python program to read in a list of words separated by spaces and reverse them in-place.,word_list.reverse()
Suggest a solution that writes a Python program to print the following pattern.,"for i in range(1, 7):
    print(""*"" * i)"
Write a function in Python which takes a number and multiplies it by 3.,"def multiplyByThree(number):
  return number*3

multiplied_value = multiplyByThree(4)
print(multiplied_value)"
"Create a Python function that takes two lists as parameters, and returns the first list with each element doubled.","def double_list(list1,list2):
  for i in range(len(list1)):
    list1[i] *= 2
  return list1

list1 = [1, 2, 3] 
list2 = [4, 5, 6]

print(double_list(list1,list2))"
Convert a Bubble Sort algorithm in C++ to Python.,"def bubble_sort(nums):
    n = len(nums)
    # Traverse through all array elements
    for i in range(n):
        # Last i elements are already in place
        for j in range(0, n-i-1):
            # traverse the array from 0 to n-i-1
            # Swap if the element found is greater than the next element
            if nums[j] > nums[j+1]:
                nums[j], nums[j+1] = nums[j+1], nums[j]"
"Given a sentence, write a Python program to capitalise the first letter of each word.","words = ""hello world""
words = words.split()

new_words = [word.capitalize() for word in words]
modified_string = "" "".join(new_words)

print(modified_string)"
Create a Python function to remove duplicate elements from a given array.,"def remove_duplicates(arr):
    seen = set()
    result = []
    for item in arr:
        if item not in seen:
            seen.add(item)
            result.append(item)
    
    return result"
"Create a Django application with a model that stores the name, address, and email of a user.","# create Django app
django-admin startproject myapp

# create user model
from django.db import models

class User(models.Model): 
    name = models.CharField(max_length=100) 
    address = models.CharField(max_length=100)
    email = models.EmailField(max_length=100)

# migrate models
python manage.py makemigrations
python manage.py migrate"
Create a Python function that processes a string and returns the string in lowercase.,"def process_string(string):
    return string.lower()

process_string(""MyString"") # returns ""mystring"""
Write a Python program to intersect two given arrays without using any in-built functions.,"def intersect(a, b):
  intersection = [] 
  for i in a:
    for j in b:
      if i == j and i not in intersection:
        intersection.append(i)
  return intersection

print(intersect([1, 7, 11, 58, 80], [11, 13, 7, 32, 80]))"
Generate a list of all possible subsets of a list of size n in Python,"def all_subsets(lst):
    
    res = [[]]
    
    for elem in lst:
        res += [subset + [elem] for subset in res]
        
    return res
all_subsets([1,2,3])"
Write a Python program to sort a given list of numbers using QuickSort.,"def quickSort(arr): 
	if len(arr) <= 1:
	return arr 
	else: 
		pivot = arr[0] 
		lessThanPivot = [number for number in arr[1:] if number <= pivot] 
		moreThanPivot = [number for number in arr[1:] if number > pivot] 
		return quickSort(lessThanPivot) + [pivot] + quickSort(moreThanPivot)

arr = [3, 8, 6, 10, 11, 4] 
print(quickSort(arr))"
Write a function to move all zeroes to the end of the given array.,"def re_order(A):
    k = 0
    for i in A:
        if i:
            A[k] = i
            k = k + 1
    for i in range(k, len(A)):
        A[i] = 0
    return A"
Generate Python class to define and simulate a bouncing ball.,"import math

class BouncingBall():
    def __init__(self):
        self.x = 0.0   # horizontal position 
        self.y = 5.0   # vertical position 
        self.vy = 0.2  # vertical velocity 
        self.g = 9.81  # gravitational acceleration 

    def update(self, dt):
        self.y -= self.vy * dt
        self.vy -= self.g * dt

        if self.y <= 0:
            self.y = 0
            self.vy *= -0.9"
"Write a function in Python that takes in two parameters, an array of integers and a target, and returns the indices of the two numbers in the array that add up to the target.","def two_sum(arr, target):
 for i in range(len(arr)):
 for j in range(i+1, len(arr)):
 if arr[i] + arr[j] == target:
 return (i, j)

# Usage
arr = [3, 5, 7, 9, 10]
target = 12

print(two_sum(arr, target))
# Output: (0, 4)"
Create a solution to implement a sorting algorithm in Python.,"def sort(arr): 
    for i in range(len(arr)): 
  
        min_idx = i 
        for j in range(i+1, len(arr)): 
            if arr[min_idx] > arr[j]: 
                min_idx = j 
          
        arr[i], arr[min_idx] = arr[min_idx], arr[i] 
  
    return arr"
Write a Python program to check whether a string contains all letters of the alphabet,"def check_alphabet(s):
    alphabet = ""abcdefghijklmnopqrstuvwxyz""
    for letter in alphabet:
        if letter not in s:
            return False
    return True"
Write a Python program that divides two integers and prevents divide by zero error.,"def divide(num1, num2):
    try:
        result = num1 / num2
        print(""Result is {}"".format(result))
    except:
        print(""Divide by zero error!"")"
Write a function in Python to convert a list of strings to an array of integers.,"def convert_list_integers(str_list):
    return list(map(int, str_list))

list = ['12','14','17','25','99','168']
arr = convert_list_integers(list)
print(arr) # [12, 14, 17, 25, 99, 168]"
Write a Python program to determine and-or operations,"x = False and False

# Output
print(x)
# False"
Develop a code in Python to simulate a lottery game.,"import random

def generate_lottery_numbers():
    # Generate 6 unique random numbers between 1 and 49
    lottery_nums = random.sample(range(1, 50), 6)
    return lottery_nums

if __name__ == '__main__':
    print(""Lottery numbers:"", generate_lottery_numbers())"
Write a Python program to print the even numbers from 1 to 50,"for i in range(1,51):
  if (i % 2 == 0):
    print(i)"
Optimize a code snippet to port the code from Python to R.,"# R code snippet
add_numbers <- function(a, b) {
  a + b
}"
Write a python program to read input from user and check if it is a valid number.,"while True:
  num = input(""Please enter a valid number: "")
  if num.isdigit():
    print(""Valid number entered: "" + num)
    break
  else:
    print(""Invalid number entered - please try again."")"
Write a test suite for a Python class that calculates the area of a triangle given the length of its sides.,"import unittest

class TriangleTestCase(unittest.TestCase):
    def setUp(self):
        self.triangle1 = Triangle(2,3,4)
        self.triangle2 = Triangle(3,4,5)

    def test_area_triangle1(self):
        self.assertEqual(self.triangle1.area(), 2.9047)
        
    def test_area_triangle2(self):
        self.assertEqual(self.triangle2.area(), 6.0000)"
Write a Python function to convert an array of strings to a dictionary.,"def string_to_dict(strings):
    return {string: len(string) for string in strings}"
Implement a function in Python to generate a password of size n,"import string
import random

def generate_password(n):
    password = ''
    for i in range(n):
        password += random.choice(string.ascii_letters + 
        string.digits + string.punctuation)
    return password"
Generate a Python program to convert a list of strings to a list of integers.,"def str_to_int(lst):
  int_lst = []
  for i in lst:
    int_lst.append(int(i))
  return int_lst"
Design an efficient data-structure using Python for,"class StringList:
    def __init__(self): 
        self.storage = []
 
    def add(self, item): 
        self.storage.append(item)
 
    def search(self, query): 
        if query in self.storage:
            return True 
        else: 
            return False"
Create a Python program to calculate the sum of all numbers between 1 and 50 inclusive.,"total = 0

for i in range(1, 51):
    total += i

print(total)"
Transform the following nested for loop into a list comprehension statement in Python.,"[(i,j)  for i in range(2,5) for j in range(3)]"
Develop a Python class that stores the details of 10 students of a college and renders them in a tabular format.,"class StudentDetails:
 def __init__(self):
  self.students=[]
 
 def add_student(self,name,age,roll):
  self.students.append({""name"":name,""age"":age,""roll"":roll})
 
 def print_table(self):
  print(""Name\tAge\tRoll"")
  for s in self.students:
   print(""{}\t{}\t{}"".format(s['name'],s['age'],s['roll']))"
Write a Python program to identify the count of the largest contiguous subarray of numbers in a given array.,"def max_contiguous_subarray(arr):
 max_end = 0
 max_so_far = 0

 for i in range(len(arr)):
 max_end = max(max_end + arr[i], 0)
 max_so_far = max(max_end, max_so_far)

 if max_so_far > 0:
 return len(arr) - max_so_far
 else:
 return 0"
Convert the following equation into a Python program: y = x^2 - 3x + 2,"def equation(x):
    return (x**2 - 3*x + 2)"
Write a Python code snippet that computes the Fibonacci sequence of the number 8.,"def Fibonacci(n): 
    if n<0: 
        print(""Incorrect input"") 
    elif n==1: 
        return 0
    elif n==2: 
        return 1
    else: 
        return Fibonacci(n-1)+Fibonacci(n-2) 

print(Fibonacci(8))"
Construct an algorithm in Python to convert a string to uppercase.,"def stringToUpper(str):
    return str.upper()

inputStr = ""hello world""

outputStr = stringToUpper(inputStr)

print(outputStr)"
Write a script in Python that encrypts a given string.,"def encrypt(string):
    encrypted_string = """"
    for i in range(len(string)):
        char = string[i]
        encrypted_string += chr(ord(char)+2)
    return encrypted_string"
Write a class to represent an Employee in Python.,"class Employee:
    def __init__(self, name, age, salary):
        self.name = name
        self.age = age
        self.salary = salary

   def get_name(self):
        return self.name

   def get_age(self):
        return self.age

   def get_salary(self):
        return self.salary"
Create a Ruby program to implement lexicographical sorting.,"def lexicographical_sort(arr)
  arr.sort_by { |word| word.downcase }
end

sorted_arr = lexicographical_sort([""ruby"", ""go"", ""java"", ""python""])

puts sorted_arr"
Create a python program to check if the value entered is a prime number,"def is_prime(n):
    # edge cases
    if n == 1 or n < 0:
        return False
    # check if number is divisible by any number
    # from 2 to n
    for i in range(2, n): 
        if (n % i) == 0: 
            return False
    return True  

x = 5
if is_prime(x): 
    print(x, ""is a prime number"") 
else: 
    print(x, ""is not a prime number"")"
Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.,"import heapq as hq
def raw_heap(rawheap):
  hq.heapify(rawheap)
  return rawheap"
Create a Python class that encapsulates a Queue data structure.,"class Queue:
  def __init__(self):
    self.items = []

  def is_empty(self):
    return self.items == []

  def enqueue(self, item):
    self.items.insert(0, item)
  
  def dequeue(self):
    return self.items.pop()

  def size(self):
    return len(self.items)"
Write a Python code snippet to check if a list contains duplicated elements.,"""""""
Python code snippet to check if a list contains duplicated elements
""""""

def has_duplicates(arr):
    seen_elements = set()
    for elem in arr:
        if elem in seen_elements:
            return True
        seen_elements.add(elem)
    return False

if __name__ == '__main__':
    arr = [3, 6, 8, 9, 10, 3]
    print(has_duplicates(arr)) # True"
Fill in the blanks to create a Python program to calculate the total number of words in a list.,"words = [""Hello"", ""World"", ""!""]

total_words = 0
for word in words:
____ total_words = total_words + ____

print(total_words)

# Output: 3

total_words = 0
for word in words:
    length = len(word)
    total_words = total_words + length

print(total_words)

# Output: 3"
"Write a function to find eulerian number a(n, m).","def eulerian_num(n, m): 
	if (m >= n or n == 0): 
		return 0 
	if (m == 0): 
		return 1 
	return ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))"
Write a function to perform mathematical division operation across the given tuples.,"def division_elements(test_tup1, test_tup2):
  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) "
Write a Python program to sort a dictionary by its keys.,"d = {""name"": ""John"", ""age"": 24, ""class"": ""Engineering""}

sorted_d = sorted(d.items(), key=lambda x: x[0]) 

print(sorted_d)"
Design an algorithm in Python to print all the permutations of a given string.,"def permutations(s):
    result = []
    if len(s) == 1:
        result = [s]

    else:
        for i, letter in enumerate(s):
            for perm in permutations(s[:i] + s[i+1:]):
                result += [letter + perm]

    return result"
Create a class in Python that takes two integer arguments and implements the __add__ method.,"class adder:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    
    def __add__(self):
        return self.x + self.y"
Generate a short Python program to swap two items in a given list.,"def swap_items(lst, item1, item2):
    idx1 = lst.index(item1)
    idx2 = lst.index(item2)
    lst[idx1], lst[idx2] = lst[idx2], lst[idx1]
    
    return lst"
Automate the following task using Python,"import pandas as pd

# load spreadsheet
df = pd.read_csv('customer_purchase.csv')

# calculate total purchase for each customer
total_purchase = df.groupby('Customer Name')['Purchase Amount'].sum().reset_index()

# print total purchase for each customer
print(total_purchase)"
Create a searching algorithm in Python to find a target element in a list of integers.,"def search(target, elements):
  start = 0 
  end = len(elements) - 1

  while start <= end:
    mid = (start + end) // 2 
      
    if target == elements[mid]: 
      return True 
  
    elif target < elements[mid]: 
      end = mid - 1

    else: 
      start = mid + 1
    
  return False"
Implement a Python method to encrypt a given string.,"def encrypt(text): 
    result = """" 
    for i in range(len(text)): 
        char = text[i] 
        if (char.isupper()): 
            result += chr((ord(char) + 7)) 
        else: 
            result += chr((ord(char) + 3)) 
    return result 

text = ""Hello, World!""
print(encrypt(text))"
"Write a Python class to represent a person and it should have attributes such as name, age, and gender.","class Person:
    def __init__(self,name,age,gender):
        self.name = name
        self.age = age
        self.gender = gender

    def get_name(self):
        return self.name
    
    def get_age(self):
        return self.age
    
    def get_gender(self):
        return self.gender"
Create a python program to calculate the grade based on a given score.,"score = 80
if score >= 90:
    grade = 'A'
elif score >= 80:
    grade = 'B'
elif score >= 70:
    grade = 'C'
elif score >= 60:
    grade = 'D'
else:
    grade = 'F'

print(grade)"
Write a python program to check whether two sequences are equal or not.,"def is_equal(seq_1, seq_2):
  return sorted(seq_1) == sorted(seq_2)"
Build a function in Python for computing the Hamming Distance between two strings of equal length.,"def hammingDistance(s1, s2): 

    # initialize with 0
    distance = 0
  
    # Calculate the length of the string 
    length_str1 = len(s1) 
    # Compare adjacent characters and increment the count 
    # if characters are not same 
    for i in range(length_str1): 
        if s1[i] != s2[i]: 
            distance += 1
  
    return distance"
Write a function to assign frequency to each tuple in the given tuple list.,"from collections import Counter 
def assign_freq(test_list):
  res = [(*key, val) for key, val in Counter(test_list).items()]
  return (str(res)) "
Generate a code to remove a given element from a dictionary in Python,"def remove_dict_element(dictionary, key):
    # Check if the key is present in the dictionary
    if key in dictionary:
        # If yes, remove the key
        del dictionary[key]
    # Return the updated dictionary     
    return dictionary"
Refactor the following Python function to use list comprehensions.,"def square_numbers(nums):
  return [num ** 2 for num in nums]"
Generate a Dockerfile for the following server configuration.,"FROM python:3.8.5-slim

RUN apt-get update
RUN apt-get install -y mysql-server-5.7 nginx

RUN service mysql start && \
	mysql -e ""CREATE DATABASE new_database;""
	
EXPOSE 80

CMD [""nginx"", ""-g"", ""daemon off;""]"
Create a Python class that takes a list as input and returns a sorted list as output.,"class SortList:
    def __init__(self, lst):
        self.lst = lst
        
    def sort_list(self):
        self.lst.sort()
        return self.lst"
Generate a new Python list that contains only the even values from a given list.,"def get_even_list(list):
    even_list = []
    for num in list:
        if num % 2 == 0:
            even_list.append(num)
    return even_list

list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(get_even_list(list))"
Suggest a completion for a python function to find the square of a given number.,"def square(num):
    return num**2"
Write a python function to left rotate the string.,"def left_rotate(s,d):
    tmp = s[d : ] + s[0 : d]
    return tmp  "
Develop a class in Python that prints a box to the screen using asterisks.,"class Box:
    def __init__(self, height, width):
        self.height = height
        self.width = width
    
    def print_box(self):
        for _ in range(self.height):
            for _ in range(self.width): 
                print(""*"", end="""")
            print("""")"
Write a Python program to group a list of numbers based on their modulo with a given number.,"def group_modulo(list_numbers, num):
    result = {i:[] for i in range(num)}
    for number in list_numbers:
        result[number % num].append(number)
    
    return result
    
result = group_modulo(list_numbers, num)
print(result)"
Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.,"def tuple_intersection(test_list1, test_list2):
  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])
  return (res)"
Write a Python program that prints out items that appear in both listA and listB,"listA = [1, 2, 3, 4]
listB = [2, 4, 5, 6]

for i in listA:
    if i in listB:
        print(i)

# Output
2
4"
Create a REST API to search for a user in the database.,"A REST API can be created using programming languages such as Python, JavaScript, etc. It will contain code to connect to the database, query it for a user, and return a response in the appropriate format."
Construct a Python function that takes as input a string and returns the length of the longest word in the string.,"def longest_word_length(input_string):
    longest_word_length = 0
    words = input_string.split()
    for word in words:
        if len(word) > longest_word_length:
            longest_word_length = len(word)
    return longest_word_length"
Write a python function to shift first element to the end of given list.,"def move_last(num_list):
    a = [num_list[0] for i in range(num_list.count(num_list[0]))]
    x = [ i for i in num_list if i != num_list[0]]
    x.extend(a)
    return (x)"
Write a Python script that takes a dictionary and prints out the keys and their respective lengths.,"for key, value in dictionary.items():
 print(f'The length of {key} is {len(key)}')"
Write a function in Python to sort the given list of strings based on the length of the words in ascending order.,"def sort_by_word_length(word_list):
	""""""
	Function to sort a given list of strings 
	based on the length of the words in ascending order.
	@param word_list: list
	@return: list
	""""""
    return sorted(word_list, key=lambda x: len(x))"
Create a program in Python that reads a string from standard input and prints the frequency of each letter in the input.,"from collections import Counter

def frequency(string):
    count = Counter()
    for letter in string:
        count[letter] += 1
    return count

if __name__ == ""__main__"":
    input_string = input(""Enter the string: "")
    count = frequency(input_string)
    print(count)"
Create a Python program that reads an input list and replaces all occurrences of 0 with -1.,"def replace_zeros(lst):
  for i in range(len(lst)):
    if lst[i] == 0:
      lst[i] = -1
  return lst

# Main
input_list = [1, 0, 2, 4, 0, 5]
new_list = replace_zeros(input_list)

print('List after replacement:', new_list)"
Create a code solution in Python to generate a random grid of characters.,"import random

# Generate grid of characters
grid_rows = 3
grid_cols = 5

grid = []
for row in range(grid_rows):
 row_data = []

for col in range(grid_cols):
 row_data.append(random.choice(""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ""))

grid.append(row_data)

print(grid)"
Write a Python function to filter a list of numbers and return only prime numbers.,"def filter_prime_numbers(numbers):
    primes = []
    for num in numbers:
        if is_prime(num):
            primes.append(num)
    return primes

def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True"
Write a python code snippet to identify a word is a palindrome or not.,"# Python code to identify word is palindrome or not 
  
word = 'radar'
  
# Reversing a word 
rev_word = word[::-1] 
  
# checking if the word is equal to its reverse 
if (word == rev_word): 
    print(""The word is a palindrome."") 
else: 
    print(""The word is not a palindrome."")"
"Write a Python code that finds the maximum value of a list, given a list of numbers as input.","max_value = max([1, 4, 8, 2, 6])
print(max_value)"
Create a Python script that finds the most frequent words in a passage.,"from collections import Counter

def most_frequent_words(passage):
    word_list = passage.split() 
    word_freq = Counter(word_list) 
  
    most_freq_word = word_freq.most_common(1) 
    return most_freq_word"
"Build a program in Python using the Pandas library to calculate the mean, median, and mode of a given series.","import pandas as pd

# Create Series
data = [1, 2, 2, 3, 3, 3, 4, 5]
series = pd.Series(data)

# Calculate mean
mean = series.mean()

# Calculate median
median = series.median()

# Calculate mode
mode = series.mode()

# Print results
print(""Mean:"", mean)
print(""Median:"", median)
print(""Mode:"", mode)"
Write a Python function that takes a list of names as an input and generates a dictionary of people’s names as keys and their scores as values.,"def names_scores(names):
    scores = {}
    for name in names:
        scores[name] = random.randint(1, 10)
    return scores"
Write a Python program to remove a specified item from a dictionary.,"def remove_from_dict(d, key):
    if key in d:
        del d[key]
    return d

result = remove_from_dict(sample_dict, 'three')
print(result)"
Write a function to sort each sublist of strings in a given list of lists.,"def sort_sublists(list1):
    result = list(map(sorted,list1)) 
    return result"
Refactor this Python program to optimize the performance,"def calculate_sum(numbers):
    return sum(numbers)"
Write a Python algorithm to convert the following text into a list of integers.,"# convert a string to list of numbers
def convert_to_list(s):
    numbers = s.split(',')
    return [int(num) for num in numbers]

text = ""3, 17, 2, 9, 11""
int_list = convert_to_list(text)
print(int_list)"
Can you develop a python program that uses a loop to print the numbers 10 to 1 in reverse order?,"for i in range(10, 0, -1):
    print(i)"
Write a function in Python to perform standard normalization of a given data.,"def normalize(data):
    """"""Performs standard normalization of a given data""""""
    mean = sum(data)/len(data)
    std_dev = (sum([(x-mean)**2 for x in data])/len(data)) ** 0.5
    return [(x-mean)/std_dev for x in data]

data = [35,45,55,65,75]

print(normalize(data)) # output: [-1.0, -0.5, 0.0, 0.5, 1.0]"
Produce a Python code to sort a two dimensional array in row-wise manner.,"def row_wise_sorting(arr):
    for row in arr:
        row.sort()

arr = [[12, 17, 11], [17, 11, 13], [14, 18, 22]]
row_wise_sorting(arr)

print(arr)"
Generate a correct python code to sort a given array of numbers.,"def bubble_sort(arr):
    for i in range(len(arr)-1):
        for j in range(len(arr)-1-i):
            if arr[j] > arr[j+1]:
                arr[j],arr[j+1] = arr[j+1],arr[j]
    return arr"
Generate a Python code snippet to rearrange an array of integers into an alternate order of even and odd elements.,"def rearrange(arr):
    even, odd = [], [] 
    for n in arr:
        if n % 2 == 0:
            even.append(n)
        else:
            odd.append(n)
    return [item for pair in zip(even, odd) for item in pair]"
Write a python function to find the first digit of a given number.,"def first_Digit(n) :  
    while n >= 10:  
        n = n / 10; 
    return int(n) "
Design a graphical user interface using Python's tkinter library.,"# Imports
import tkinter as tk

# Setting up the window
window = tk.Tk()
window.title(""My GUI"")

# Adding components
label1 = tk.Label(window, text=""Hello World"")
label1.pack()

# Running the program
window.mainloop()"
Write a function to check if a triangle of positive area is possible with the given angles.,"def is_triangleexists(a,b,c): 
    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180): 
        if((a + b)>= c or (b + c)>= a or (a + c)>= b): 
            return True 
        else:
            return False
    else:
        return False"
Optimize a Python function that returns the value at the index of an array (list) of size n.,"def getValueAtIndex(arr, index):
    return arr[index] if index >= 0 and index < len(arr) else 0

print(getValueAtIndex([20, 30, 50, 70, 90], 3)) # 70"
Develop a program in Python that prints the multiplication table for the number 5.,"for i in range(1,11):
 print('5 *', i, '=', 5 * i)

# Output
# 5 * 1 = 5
# 5 * 2 = 10
# 5 * 3 = 15
# 5 * 4 = 20
# 5 * 5 = 25
# 5 * 6 = 30
# 5 * 7 = 35
# 5 * 8 = 40
# 5 * 9 = 45
# 5 * 10 = 50"
"Using Python, edit the following dataset to discard outliers.","import numpy as np

dataset = [12, 34, 37, 10, 89, 67, 99, 101]
dataset_without_outliers = [x for x in dataset if abs(x-np.mean(dataset)) < 3*np.std(dataset)]

print(dataset_without_outliers) # prints [12, 34, 37, 10, 89, 67, 99]"
Create a command line application in Python that takes two numbers as arguments and prints the addition of them.,"import sys

def add(num1, num2):
  return num1 + num2

if __name__ == '__main__':
  num1 = int(sys.argv[1])
  num2 = int(sys.argv[2])
  print(add(num1, num2))"
Develop a Python 3 program that takes a list of integers as an argument and returns the mean of the list.,"def mean(list):
 total = 0
 for num in list:
 total+=num
 return total/len(list)

list = [1,2,3,4,5]
mean = mean(list)
print(mean) # prints 3.0"
"Generate a python script that takes a list of integer values, and reverse the order of elements in the list","def reverse_list(lst):
    return lst[::-1]"
Write a Python program to generate a random integer between 0 and 9.,"""""""
Generate a random integer between 0 and 9
""""""

import random

def generate_random_integer():
    # Generate a random number in the range [0, 9] 
    x = random.randint(0,9) 
    return x

if __name__ == '__main__':
    print(generate_random_integer())"
Create a program in Python to normalize a given input string.,"import re 

def normalize_string(input_string): 
  ## convert to lowercase 
  normalized_string = input_string.lower() 
  
  ## remove special characters 
  normalized_string = re.sub(""[^a-z0-9]"", """", normalized_string) 
  
  ## return the normalized string
  return normalized_string

normalized_string = normalize_string(input_string) 
print(normalized_string) # davidxq35"
"Create a function in Python to apply a discount rate to a given price. This should accept two parameters, a float for the discount rate between 0 and 1 and the price. The function should return the discounted price.","def applyDiscount(discountRate, price):
    discountedPrice = discountRate * price
    return discountedPrice

print(applyDiscount(discountRate, price)) # 180"
Develop a program in Python that implements Binary Search tree.,"class Node: 
    def __init__(self, key): 
        self.key = key  
        self.left = None
        self.right = None
  
def insert(root, key): 
  
    if root is None: 
        return Node(key) 
  
    if root.key < key: 
        root.right = insert(root.right, key) 
    else: 
        root.left = insert(root.left, key) 
  
    return root"
Write a python function to check whether the sum of divisors are same or not.,"import math 
def divSum(n): 
    sum = 1; 
    i = 2; 
    while(i * i <= n): 
        if (n % i == 0): 
            sum = (sum + i +math.floor(n / i)); 
        i += 1; 
    return sum; 
def areEquivalent(num1,num2): 
    return divSum(num1) == divSum(num2); "
Create a Python code snippet to return the index of a given item from a list.,"item_index = list_of_numbers.index(item)
print(item_index) # Prints 1"
Create a function in Python to return the largest number in a list.,"""""""
Return the largest number in a list
""""""

def largest_num(nums):
    largest = nums[0]
    for num in nums:
        if num > largest:
            largest = num
    return largest

if __name__ == '__main__':
    nums = [50, 30, 65, 80]
    print(largest_num(nums))"
Generate a Python program that implements Linear Search with a list of integers as input.,"def linearSearch(sampleList, x):
 for i in range(len(sampleList)):
 if sampleList[i] == x:
 return i 

return -1

# Driver code
x = 5
result = linearSearch(sampleList, x)

if result == -1:
 print(""Element not found"")
else:
 print(""Element found at index"", result)"
Create a Python program that print the Fibonacci sequence for n terms.,"def fibonacci_sequence(n): 
    a = 0
    b = 1
    print(""Fibonacci sequence:"")
    print(a) 
    print(b) 
    for i in range(2,n): 
        c = a + b 
        a = b 
        b = c 
        print(c)"
Write a Python function to calculate the probability of an event occurring.,"def probability(p): 
    return p 
  
print(f""The probability of the event occurring is {probability(p)}"")"
Develop a Python script to find the element that appears most often in a given list.,"from collections import Counter

mylist = [2, 3, 4, 5, 2, 3, 2, 5, 6, 7]
freq = Counter(mylist)
most_common_element = freq.most_common(1)[0][0]
print(""The most common element is %d"" %most_common_element)"
Develop a Python program for generating a random integer between 0 and 10.,"import random

random_number = random.randint(0, 10)
print(""Random number is: "", random_number)"
Create a Python program to implement the Fibonacci sequence.,"def fibonacci_seq(n): 
    if n==0: 
        return 0
    elif n==1: 
        return 1
    else: 
        return fibonacci_seq(n-1)+fibonacci_seq(n-2)"
Write a Python program to compute the sum of two given integers.,"sum = a + b
print(sum) # 12"
"Write a Python function that selects which kind of data type (float, integer, string) each element of a list is.","def infer_data_type(my_list):
    output_list = []
    for item in my_list:
        if type(item) == int:
            output_list.append('integer')
        elif type(item) == float:
            output_list.append('float')
        else:
            output_list.append('string')
    return output_list"
Write a Python program to compute the sum of three given numbers.,"def sum_numbers(num1, num2, num3):
    return num1 + num2 + num3
    
if __name__ == ""__main__"":
    print(sum_numbers(5, 10, 15))"
Create a recursive Python function to calculate the sum of all elements in a list.,"def sum_list(list):
 if not list:
  return 0

 return list[0] + sum_list(list[1:])"
"Design a basic class in Python called ""Dog"" and create a constructor method.","class Dog:
    def __init__(self, name, age, weight):
        self.name = name
        self.age = age
        self.weight = weight

# Sample call
dog = Dog(""Fido"", 2, 40)"
Create a Python program that takes a list and replaces all negative numbers in the list with zeros.,"def replace_negative_with_zero(numbers):
    new_list = []

    for num in numbers:
        if num < 0:
            new_list.append(0)
        else:
            new_list.append(num)
    return new_list"
Create a code snippet in Python that calculates the number of distinct items in a list.,"def distinct_items_in_list(input_list):
    distinct_items = set(input_list)
    return len(distinct_items)"
"Write a python code to find all numbers in a given string, and print them out.","import re

string = ""There are 45.8 apples and 12.3 oranges.""
numbers = re.findall(r""[-+]?\d*\.\d+|\d+"", string)
print(numbers)

# Output: ['45.8', '12.3']"
Generate a program in python that searches for an element in the given list and returns its index.,"def search_list(mylist, element):
  
  for i in range(len(mylist)):
    if mylist[i] == element:
      return i
  
  return -1

mylist = [1, 4, 5, 8, 9]
element = 5

index = search_list(mylist, element)

if index == -1:
  print(""Element not found."")
else:
  print(""Element found at index:"", index)"
Write a Python script which iterates over a list of numbers and prints them out in reverse order.,"numbers = [1, 2, 3, 4]
 
for i in range(len(numbers)-1, -1, -1):
    print(numbers[i])"
Re-write the following SQL query in Python.,"import sqlite3

conn = sqlite3.connect('movies.db') 
cursor = conn.cursor()

cursor.execute(""SELECT * FROM Movies WHERE category = 'horror'"")

result = cursor.fetchall()
for row in result:
    print(row)

conn.close()"
"Generate a python dictionary for storing student information as { Student ID: (name, email, phone number) }","student_dict = {
    123456: (""Alice"", ""alice@example.com"", ""123-456-789""),
    789456: (""Bob"", ""bob@example.com"", ""456-789-012"")
}"
Write a Python program to create a new list that contains the common elements of two other lists.,"def common_elements(list1, list2):
    common_list = []
    for element in list1:
        if element in list2:
            common_list.append(element)
    return common_list

list1 = [1, 2, 3, 4]
list2 = [2, 4, 6, 8]
print(common_elements(list1, list2))"
Develop a Python program to generate a Ruby code to format a given text.,"def format_text(input_text):
    formatted_str = """"
    for i in input_text:
        if i.isupper():
            formatted_str += ""'#{i}'""
        else:
            formatted_str += i
    return formatted_str"
Write a Python program to generate the Fibonacci series between 0 to 50.,"def fibonacci(n):
 a, b = 0, 1
 for i in range(n):
  a, b = b, a + b
 return a

for i in range(51):
 print(fibonacci(i))"
Write a Python program to sort the values of a dictionary by its keys in alphabetical order.,"def sort_dictionary_by_keys(dictionary):
    result = {}
    for key in sorted(dictionary.keys()):
        result[key] = dictionary[key]
    return result

dictionary = {""c"": 3, ""a"": 1, ""b"": 2}
sorted_dictionary = sort_dictionary_by_keys(dictionary)

print(sorted_dictionary)"
Can you make a loop in Python to print out the number from 10 to 20?,"for i in range(10, 21):
    print(i)"
Create a program in Python which can calculate the median of an array of integers.,"def median(arr):
    arr.sort()

    if len(arr) % 2 != 0:
        return arr[len(arr)//2]
    else: 
        return (arr[len(arr)//2 - 1] + arr[len(arr)//2]) / 2

arr = [3, 5, 7, 4, 8, 1, 9]

med = median(arr)
print('Median of the given array is:', med)"
Write a Python script to convert temperatures from Fahrenheit to Celsius.,"def fahrenheit_to_celsius(fahrenheit):
    celsius = (fahrenheit - 32) * 5/9
    return celsius"
Optimize the Python program below for making the code more efficient.,"def sum_list(list):
    return sum(list)"
Create a function in Python that takes two strings as arguments and returns a concatenated string.,"def concat_strings(first_str, second_str):
 return first_str + second_str

print(concat_strings(""Hello "", ""World"")) # prints ""Hello World"""
Create a data structure that can store the 10 most recent items inserted into a list.,"#!/usr/bin/env python

from collections import deque

# Create an empty container 
myList = deque(maxlen=10) 
  
# Add values to the list 
for i in range(100): 
    myList.append(i) 
  
# Access the 10 recent values in the list 
print(list(myList))"
Create a Python function that takes a string as an argument and reverses it.,"def reverse_string(str_input):
    reversed_string = ''
    index = len(str_input)
    while index > 0: 
        reversed_string += str_input[ index - 1 ]
        index = index - 1
    return reversed_string

print(reverse_string(""testing""))"
Create a Python script that prints the number of unique characters in a given string and their frequency.,"inputString = ""Hello World"" 
freq = {}
  
for ch in inputString:
    if ch in freq:
        freq[ch] += 1
    else:
        freq[ch] = 1

for key, value in freq.items():
    print (key + "" has a frequency of "" + str(value))"
Construct a function in Python to print the sum of two numbers.,"def print_sum(a, b):
    """"""Print the sum of two numbers.""""""
    print(a + b)"
Design a Python algorithm to determine if a given number x is a prime number.,"def is_prime(x):
    if x < 2:
        return False 
    for i in range(2, int(x ** 0.5) + 1):
        if x % i == 0:
            return False
    return True"
Design a regression model using a random forest in Python.,"from sklearn.ensemble import RandomForestRegressor

# Initialize the model
model = RandomForestRegressor(n_estimators=100)

# Fit the model to the data
model.fit(X_train, y_train)

# Evaluate the model
score = model.score(X_test, y_test)

print(""Score: "", score)"
Create a web-crawler in Python to extract links from a web page.,"import urllib.request 
from bs4 import BeautifulSoup

#Providing the url as an argument to urlopen() 
url = ""http://www.example.com""
html = urllib.request.urlopen(url).read() 
soup = BeautifulSoup(html, features = 'html.parser') 

# extracting links from the web page 
links = [] 
for link in soup.findAll('a'): 
    links.append(link.get('href')) 

print(links)"
Use Python to implement a tree traversal algorithm that produces an in-order traversal.,"def inOrderTraversal(root):
    if root is not None:
        inOrderTraversal(root.left)
        print(root.val)
        inOrderTraversal(root.right)"
Can you write code to calculate the Fibonacci sequence in Python up to the 10th number?,"a, b = 0, 1

fibonacci = [a]

while b < 10:
    fibonacci.append(b)
    a, b = b, a + b

print(fibonacci)"
Create a function in Python to find the prime numbers up to a given integer n.,"def primes_up_to(n):
 primes = []
 for i in range(2, n + 1):
 for j in range(2, i):
 if i % j == 0:
 break
 else:
 primes.append(i)
 break
 return primes

print(primes_up_to(8)) # [2, 3, 5, 7]"
Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.,"import re
pattern = 'fox'
text = 'The quick brown fox jumps over the lazy dog.'
def find_literals(text, pattern):
  match = re.search(pattern, text)
  s = match.start()
  e = match.end()
  return (match.re.pattern, s, e)"
Write a function to find the maximum value in a normal list in Python,"def max_value_index(array):
    current_index = 0
    max_value = array[0]
    for i in range(1, len(array)):
        if array[i] > max_value:
            max_value = array[i]
            current_index = i
    return current_index"
Create an algorithm in Python that takes an array of strings and sorts them in alphabetical order.,"def alphabeticalSort(arr):
    arr.sort()
    return arr

result = alphabeticalSort(['Jan', 'June', 'Raju', 'April'])
print(result)"
Implement an algorithm in Python which can sort an array of numbers in ascending order.,"def insertion_sort(arr): 
    #Iterationg through the array 
    for i in range(1, len(arr)): 
        key = arr[i] 
        j = i-1
        
        while j >= 0 and arr[j] > key: 
            arr[j + 1] = arr[j] 
            j -= 1
        arr[j + 1] = key 
  
    return arr"
Create a command line application in Python which takes a list of numbers and returns whether the list is sorted.,"import sys

def is_sorted(nums):
 for i in range(len(nums) - 1):
  if nums[i] > nums[i + 1]:
   return False
 return True

nums = [int(x) for x in sys.argv[1:]]

if is_sorted(nums):
 print('The list is sorted')
else:
 print('The list is not sorted')"
Use the BeautifulSoup library in Python to parse HTML from a website.,"import requests
from bs4 import BeautifulSoup

#make a GET request
response = requests.get('https://www.example.com')

#parse HTML
soup = BeautifulSoup(response.text, 'html.parser')"
"Generate a Python program that prints out every number from 0 to 10, but with every number being multiplied by 2.","for i in range(11):
 print(i*2)"
Write a Python program to prompt the user for 3 numbers and return the average of the numbers.,"def averageNums():
 nums = []
 for i in range(3):
 num = input(""Enter a number: "")
 nums.append(float(num))
 
 return sum(nums) / len(nums)

# Example
averageNums() # Will prompt the user for 3 numbers and print the average"
Create a Python program to display the calendar of a given year.,"import calendar

def show_calendar(year):
    return calendar.calendar(year)"
Generate a Random Forest classifier in Python,"import numpy as np
from sklearn.ensemble import RandomForestClassifier

# Create a Random Forest Classifier
clf = RandomForestClassifier(n_estimators=100)

# Train the model using the training sets
clf.fit(X_train, y_train) 

# Predict the response for test dataset
y_pred = clf.predict(X_test)"
Write a function to repeat the given tuple n times.,"def repeat_tuples(test_tup, N):
  res = ((test_tup, ) * N)
  return (res) "
Create a class in Python using object-oriented programming that creates instance of a book.,"class Book(object):
    def __init__(self, title, author, year_published):
        self.title = title
        self.author = author
        self.year_published = year_published

    def __str__(self):
        return '{0} by {1} published in {2}.'.format(
            self.title, self.author, self.year_published)"
Write a script in Python to retrieve data from a web API.,"import requests

zipcode = '12345'
url = 'http://api.example.com/v1/zipcodes'

params = {'zipcode': zipcode}
response = requests.get(url, params=params)

if response.status_code == 200:
 data = response.json()
 print(data)
else:
 print('Error: ', response.status_code)"
Write a Python program to sort a list of integers in ascending order.,"list = [4, 2, 3, 5, 1]
list.sort()
print(list)"
"Create a class in Python that defines a shape and has three methods that calculate the perimeter, area, and volume.","class Shape:
    def __init__(self):
        # Initialize any variables as needed.
        pass

    def calculate_perimeter(self):
        # Code to calculate perimeter
        pass
    
    def calculate_area(self):
        # Code to calculate area
        pass

    def calculate_volume(self):
        # Code to calculate volume
        pass"
What is the most efficient way to reverse a singly linked list in 7 lines of Python code?,"# Definition for singly-linked list.
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next
        
def reverseList(head): 
    prev = None
    current = head

    while current is not None:
        nxt = current.next
        current.next = prev 
        prev = current
        current = nxt

    head = prev 
    return head"
Write a python function to check whether the given number can be represented by product of two squares or not.,"def prod_Square(n):
    for i in range(2,(n) + 1):
        if (i*i < (n+1)):
            for j in range(2,n + 1):
                if ((i*i*j*j) == n):
                    return True;
    return False;"
"Design a class called ""Coach"" in Python that has two attributes: a name and a team.","class Coach:
    def __init__(self, name, team):
        self.name = name
        self.team = team

    def __str__(self):
        return f""The coach of {self.team} is {self.name}."""
Create a Python program to add two numbers.,"def add_numbers(a,b):
    return a + b"
"Design a REST API endpoint in Python Flask to return a list of users, sorted by last name.","@app.route(""/users"", methods=[""GET""])
def get_users():
    users = User.query.order_by(User.last_name).all()
    return jsonify([user.serialize() for user in users]), 200"
"Given a list of strings, write a Python program to sort the strings in alphabetical order.","def sort_strings(strings):
	return sorted(strings)

if __name__ == '__main__':
	strings = ['Python', 'Java', 'C++', 'C#']
	sorted_strings = sort_strings(strings)
	print(sorted_strings)"
Construct a program in Python to check if a string contains only digits.,"def is_number(s):
    try:
        float(s)
        return True
    except ValueError:
        return False"
Translate this Python program into a JavaScript program.,"function hello_name(name) {
   return ""Hello "" + name + ""!"";
}"
Write a Python program to count the number of characters in a string.,"String = ""Hello World""

def count_characters(str):
  return len(str)

print(""Number of characters in the string:"", count_characters(String))"
Write a Python script to convert a given string to datetime format.,"import datetime

def convert_to_date(input_date):
    date_obj = datetime.datetime.strptime(input_date,""%d/%m/%Y"")
    return date_obj"
Construct a neural network model in Python to predict the sale numbers of a product.,"model = Sequential()
model.add(Dense(8, activation='relu', input_shape=[6]))
model.add(Dense(1, activation='linear'))
model.compile(optimizer='adam', loss='mean_squared_error', metrics=['mae'])
model.fit(x_train, y_train, epochs=500, verbose=False)"
"Create a Python program that takes a list of numbers, sorts them in descending order, calculates the average of the numbers, and prints the result.","# Calculating average of [3, 7, 9, 4, 5]
sorted_nums = sorted([3, 7, 9, 4, 5], reverse=True)
sum_nums = sum(sorted_nums)

# Calculating average
average = sum_nums/len(sorted_nums)

# Printing the average
print('The average of the list is: ', average)"
Write a python function to count the number of prime numbers less than a given non-negative number.,"def count_Primes_nums(n):
    ctr = 0
    for num in range(n):
        if num <= 1:
            continue
        for i in range(2,num):
            if (num % i) == 0:
                break
        else:
            ctr += 1
    return ctr"
Generate a Python program that takes a number as input and calculates its sum of digits.,"n = 123
sum_of_digits = 0

while n > 0:
    digit = n % 10
    sum_of_digits += digit
    n //= 10

print(""Sum of digits in 123 is:"", sum_of_digits)"
Write a Python program that takes a list as input and returns the longest consecutive string of characters.,"def longest_consecutive(lst):
    longest = """"
    for word in lst:
        if len(word) > len(longest):
            longest = word
    return longest

lst = ['a', 'bb', 'ccc', 'dd', 'eee']

print(longest_consecutive(lst))

# Output should be ""ccc"""
Write a function in Python that takes two lists of integers and returns a single merged list with unique elements sorted in ascending order.,"def merge_unique_sorted_lists(list1, list2):
	merged_list = list1+list2
	unique_list = list(set(merged_list))
	unique_list.sort()
	return unique_list"
Design a function in Python for swapping the values of two given integers.,"def swap_values(x, y):
    temp = x
    x = y
    y = temp
    return x, y

x, y = swap_values(3,5)
print(x, y)"
Write a Python function to find the maximum from 3 numbers.,"def find_max(a, b, c):
    max = a
    if b > max:
        max = b
    if c > max:
        max = c
    return max

max_number = find_max(10, 7, 4)
print('Maximum number is', max_number)"
"Given the following input, write a Python program to output the characteristics of the longest word.","def longest_word(list_words):
    longest_word = max(list_words, key=len)
    print(""Length of longest word: "" + str(len(longest_word)))
    print(""Longest Word: "" + longest_word)

list_words = [""laptop"", ""computer"", ""keyboard""]
longest_word(list_words)"
Generate a Python program that calculates the factorial of a given number.,"def factorial(n): 
    if n == 0:
        return 1
    else: 
        return n * factorial(n-1) 

# Test
num = 5
fac = factorial(num)
print(""Factorial of"", num, ""is"", fac)"
Write a Python function that accepts an integer as an argument and returns its factorial.,"def factorial(n):
    if n == 0: 
        return 1
    else: 
        return n * factorial(n-1)"
Create a program in Python that takes two strings as input from the user and returns True if a substring is found within the first string or False otherwise.,"first_string = input('Enter the main string: ')
second_string = input('Enter the substring: ')

if second_string in first_string:
 print(True)
else:
 print(False)"
Create a function in Python which takes a string as an input and adds the number 1 to each character in the string.,"def add_one_to_each_char(mystring):
    new_str = """"
    for c in mystring:
        new_str += chr(ord(c) + 1)
    return new_str"
Rewrite a given Java class using Python syntax.,"class MyClass:
 def __init__(self, x, y):
  self.x = x
  self.y = y"
Create a program to filter a list of numbers using the built-in Python filter() function.,"def even_number_filter(number):
  return number % 2 == 0

numbers = [25, 35, 8, 2, 10]
filtered_list = list(filter(even_number_filter, numbers))
print(filtered_list)"
"Read an uncommented Python program, comment all the lines, and print the commented version.","def func_name(param1, param2):
    # Add two parameters
    a = param1 + param2
    
    # Multiply two parameters
    b = param1 * param2
    
    # Return a and b
    return a, b"
Create a Python program which takes two lists as input and outputs all the elements which appear in both lists.,"def list_intersection(list1, list2):
  return [item for item in list1 if item in list2]

list1 = [1, 2, 3] 
list2 = [3, 4, 5]

intersectedList = list_intersection(list1, list2)

print(intersectedList)

# Output: [3]"
Edit the Python 3 code below so that it returns the sum of the two integers a and b.,"def add_numbers(a, b):
    return a + b

if __name__ == '__main__':
    a = 3
    b = 5
    result = add_numbers(a, b)
    print(result)"
"Write a Python program to generate a random password of length 10, consisting of letters, numbers, and special characters.","import string, random

def gen_password():
 chars = string.ascii_letters + string.digits + '!@#$%^&*'
 return ''.join(random.choice(chars) for _ in range(10))

print(""Random Password :"",gen_password())
``"
Create a program in Python to perform web scraping using the BeautifulSoup module.,"import requests 
from bs4 import BeautifulSoup 

# Get the webpage
url = 'https://en.wikipedia.org/wiki/Python_(programming_language)'
response = requests.get(url) 

# Create the soup
soup = BeautifulSoup(response.text, 'html.parser') 

# Extract the text
text = soup.get_text() 

# Output the text
print(text)"
Implement a program in Python that encodes a given string of text.,"def encode_string(encoding_string):
    encoded_string = """"
    for char in encoding_string : 
        encoded_string += str(ord(char)) + "" ""
    return encoded_string"
Create a command line utility in Python that takes two arguments. The utility should compare the two arguments and output the result as either “equal” or “not equal”.,"import sys

arg1 = sys.argv[1]
arg2 = sys.argv[2]

if arg1 == arg2:
 print('equal')
else:
 print('not equal')"
Edit the given Python code to add a feature which will print the squares of given numbers.,"def printNumbers(a, b): 
    for i in range(a, b + 1): 
        print(i, end = "" "") 
    print(""\n"")
    for i in range(a, b + 1):
        print(i*i, end = "" "")"
Write a Python program to find the largest and smallest number from a given list of numbers.,"def find_num(input_list):
    """"""Finds the largest and smallest number from a given list of numbers.""""""
    max_num = max(input_list)
    min_num = min(input_list)
    return max_num, min_num

largest, smallest = find_num([7, 4, 2, 9, 0, 5])
print('The largest number is', largest)
print('The smallest number is', smallest)"
Create a basic Python script that uses the requests library to get a web page and prints it out.,"# importing the requests library 
import requests 

# api-endpoint 
URL = ""http://www.example.com""

# sending get request and saving the response as response object 
r = requests.get(url = URL) 

# extracting data in json format 
data = r.text 

# printing the output 
print(data)"
Edit the existing Python program so that it rounds a number to the nearest whole number.,"# Program to round off a number 
num = 89.15

rounded_num = round(num)
print(""The rounded number is: "", rounded_num)"
"Create a Python Pandas DataFrame for a real-world dataset of your choice, and display information about it.","import pandas as pd

# load the dataset
data = pd.read_csv('data.csv')

# display information about the dataset
data.info()

# observe the first five rows
data.head()

# list all columns
data.columns 

# display summary statistics
data.describe()"
Write a python function to find the minimum element in a sorted and rotated array.,"def find_Min(arr,low,high): 
    while (low < high): 
        mid = low + (high - low) // 2;   
        if (arr[mid] == arr[high]): 
            high -= 1; 
        elif (arr[mid] > arr[high]): 
            low = mid + 1; 
        else: 
            high = mid; 
    return arr[high]; "
Write a Python program to sort a list of lists of integers by the first element of the sublists. The list should be sorted in ascending order.,"def sortList(lst): 
    lst.sort(key = lambda x: x[0]) 
    return lst 
  
result = sortList([[2, 4, 6], [1, 9, 8], [3, 7, 5]]) 
print(result)"
Generate a Python script to identify which words in a given list appear more than 3 times and print them out.,"words = ['blue', 'red', 'green', 'red', 'yellow', 'blue', 'blue', 'orange']
from collections import Counter
word_counts = Counter(words)
words_appearing_more_than_3_times = [word for word, count in word_counts.items() if count > 3]
print(words_appearing_more_than_3_times)"
Create a Python function to generate anagrams from a given string.,"def generate_anagrams(s):
    if len(s) == 1:
        return s

    anagrams = [] 
    for i, letter in enumerate(s):
        for anagram in generate_anagrams(s[:i] + s[i+1:]):
            anagrams.append(letter + anagram)
    return anagrams"
Create a Pythonically optimized version of the following code.,"def add_nums(nums):
    return sum(nums)"
Write a Python program to add two numbers in base-10.,"def add_base10(num1, num2): 
    return num1 + num2"
Generate a Python script for a query to fetch data from a given MySQL table.,"import mysql.connector

db = mysql.connector.connect(
 host=""localhost"",
 user=""root"",
 passwd=""password"",
 database=""dbname""
)

mycursor = db.cursor()

sql = ""SELECT product_id, name, price FROM Products""

mycursor.execute(sql)

myresult = mycursor.fetchall()

for row in myresult:
  print(row)"
Generate an error message when a provided Python code fails to execute.,"try:
    exec(<python_code>)
except Exception as e:
    print(""Error: "", e)"
Generate a Python dictionary that contains the count of the characters in a given string.,"def count_chars(string):
    count_dict = {}

    for char in string:
        if char in count_dict:
            count_dict[char] += 1
        else:
            count_dict[char] = 1

    return count_dict

print(count_chars(""Hello World""))

# Output: {'H': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'W': 1, 'r': 1, 'd': 1}"
Create a recursive function in Python to print the sum of the natural numbers up to the given number.,"def sum_natural_numbers(limit):
    if limit < 2:
        return limit
    else:
        return limit + sum_natural_numbers(limit-1)

#print the sum 
print(sum_natural_numbers(limit))"
Write a Python program to find the number of system parameters that are not set correctly.,"def find_system_parameter_count():
    """"""Find the number of system parameters not set correctly.""""""
    count = 0
    for param in system_parameters:
        if not is_correctly_set(param):
            count += 1
    return count"
Implement a function in Python that returns the sum of Pythagorean triplets up to the given number n.,"def pythagorean_triplet_sum(n):
    result = 0
    for c in range(1, n + 1):
        for b in range(1, c):
            for a in range(1, b):
                if a**2 + b**2 == c**2:
                    result += a + b + c
    return result"
Develop a Python program to list the first 10 numbers in the Fibonacci series.,"a, b = 0, 1
print(""The first 10 numbers in Fibonacci series are:"")
while a < 10:
    print(a)
    a, b = b, a + b"
In Python print out the first 10 numbers of the Fibonacci sequence.,"a, b = 0, 1
for i in range(10):
  print(a)
  a, b = b, a + b

# Output:
0
1
1
2
3
5
8
13
21
34"
Write a python function to move all zeroes to the end of the given list.,"def move_zero(num_list):
    a = [0 for i in range(num_list.count(0))]
    x = [ i for i in num_list if i != 0]
    x.extend(a)
    return (x)"
Implement a function in Python to remove all instances of an item from a list.,"def remove_item(list, item):
    while item in list:
        list.remove(item)
    return list

result = remove_item([1, 2, 1, 3, 4, 1], 1)
print(result)"
"Unify the style of a code snippet in Python. Make sure to keep the original structure, including indentation, comments, and whitespace.","""""""This function takes two arguments and adds them""""""
def add(x, y):
    return x + y"
Update the given Python code to remove all the duplicated elements from a list.,"def remove_duplicates(nums):
    new_list = []
    for num in nums:
        if num not in new_list:
            new_list.append(num)
    return new_list"
"Given a string of text, write a function in Python that prints out every word in the string.","def printWords(text):
 words = text.split()
 for word in words:
 print(word)

printWords(""The quick brown fox"")"
Generate a program in Python to count the occurrence of an element in a given list,"def count_element(list, element):
    count = 0
    for i in list:
        if i == element:
            count += 1
    return count"
Generate a correct python program to accomplish the next objective,"def find_common_element(arr1, arr2):
    common_elements = []
    for element1 in arr1:
        for element2 in arr2:
            if element1 == element2 and element1 not in common_elements:
                common_elements.append(element1)
    return common_elements"
Write a function to get the n largest items from a dataset.,"import heapq
def larg_nnum(list1,n):
 largest=heapq.nlargest(n,list1)
 return largest"
Implement a method in Python that takes an integer n and returns the n-th Fibonacci number.,"def fibonacci(n): 
 if n==0: 
 return 0
 elif n==1: 
 return 1
 else: 
 return fibonacci(n-1)+fibonacci(n-2)"
"Utilizing the list comprehension, create a python program that removes all multiples of 3 from the input list.","res = [x for x in [3,4,6,8,9,12] if x % 3 != 0] 
print(res)"
Create a Python class for a hospital patient.,"class Patient:
    def __init__(self,name, age, medical_history):
        self.name = name
        self.age = age
        self.medical_history = medical_history
        
    def get_name(self):
        return self.name
        
    def get_age(self):
        return self.age
    
    def get_history(self):
        return self.medical_history"
Create a React component for displaying a list of strings.,"const List = ({ items }) => { 
  return ( 
    <ul> 
      {items.map(item => ( 
        <li> 
          {item} 
        </li> 
      ))} 
    </ul> 
  ) 
};

ReactDOM.render( 
  <List items={[ ""javascript"",""java"",""python""]} />, 
  document.getElementById('root') 
);"
Edit the following Python program so that it prints out the square root of a given number.,"import math

number = 8

# compute the square root of the given number
square_root = math.sqrt(number)

# print the square root
print(f""The square root of {number} is {square_root}"")"
Create a search algorithm in Python to find a target element in a given array.,"def search(arr, target): 
  for idx, num in enumerate(arr): 
    if num == target:
      return idx
  return -1

idx = search([1, 4, 6, 8, 10], 8)
print(idx)"
Write a Python program that takes an integer and prints a set of stairs with that many levels.,"def staircase(n):
    for i in range(1, n+1):
        for j in range(1, n+1):
            if j <= n-i:
                print(' ', end='')
            else:
                print('#', end='')
        print('')

n = 5
staircase(n)"
Generate all permutations of a given list of numbers with Python.,"import itertools

list_nums = [1, 2, 3]

perms = itertools.permutations(list_nums)
for perm in perms:
  print(perm)"
Work out a solution to the Towers of Hanoi game using Python.,"def TowersOfHanoi(n, fromRod, toRod, auxRod): 
    if n == 1: 
        print(""Move disk 1 from rod"",fromRod,""to rod"",toRod) 
        return
    TowersOfHanoi(n-1, fromRod, auxRod, toRod) 
    print(""Move disk"", n, ""from rod"", fromRod, ""to rod"", toRod) 
    TowersOfHanoi(n-1, auxRod, toRod, fromRod) 

n = 4
TowersOfHanoi(n, 'A', 'C', 'B')"
Create a for loop in Python to iterate over a list of strings and print each one.,"strings = [""string1"", ""string2"", ""string3""]
for s in strings:
    print(s)"
Implement a function in Python that takes two arguments: a list and a string. The function should return the indices where the string appears in the list.,"def find_indices(list, string):
    indices = []
    for i,item in enumerate(list):
        if item == string:
            indices.append(i)

    return indices"
Write a python function to find the sublist having minimum length.,"def Find_Min(lst): 
    minList = min((x) for x in lst) 
    return minList"
Write a function in Python that takes a string as input and returns the length of the longest word.,"def length_longest_word(s):
    longest_word = """"
    longest_len = 0
  
    words = s.split()
    for word in words:
        if len(word) > longest_len:
            longest_len = len(word)
            longest_word = word
  
    return len(longest_word)
  
result = length_longest_word(string)
print(result)"
Create a Python script to parse a given HTML page and find the URLs linking to other pages.,"import requests
from bs4 import BeautifulSoup

url = ""https://example.com/""
# fetch the content from url
page = requests.get(url)
# parse the fetched content
soup = BeautifulSoup(page.text, 'html.parser')
# find all href values for a tags
all_links = soup.find_all('a', href=True)
# show the results
for link in all_links:
    print(link['href'])"
Generate a table of numbers up to 10 in list format using Python.,"mylist = [1,2,3,4,5,6,7,8,9,10]"
Create a class in Python that defines two methods,"class MyClass:
    def FirstMethod(self):
        pass
    def SecondMethod(self):
        pass"
Design a method in Python to deduplicate a given list of elements.,"# store the given list
my_list = [4, 5, 1, 9, 5, 4, 3]

# remove the duplicates
deduplicated_list = list(set(my_list))

# print the result
print(""Deduplicated list:"", deduplicated_list)"
Write a function to remove duplicate words from a given string using collections module.,"from collections import OrderedDict
def remove_duplicate(string):
  result = ' '.join(OrderedDict((w,w) for w in string.split()).keys())
  return result"
Create a Python program that classifies articles based on sentiment.,"import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer

sentences = [""This article is bad""]

sid = SentimentIntensityAnalyzer()
for sentence in sentences:
  print(sentence)
  ss = sid.polarity_scores(sentence)
  print(ss)
  if ss['compound'] >= 0.05:
    print(""Positive"")
  elif -0.05 < ss['compound'] < 0.05:
    print(""Neutral"")
  else:
    print(""Negative"")"
Generate a code in Python to style a paragraph using HTML tags.,"def style_paragraph(text):
  return ""<p style='text-align: justify; font-weight: bold; font-family: sans-serif;'>{}</p>"".format(text)"
Modify the below Python function to make it efficient.,"def min_product(a, b):
    if a > b:
        return a * b
    else:
        return a * b * (a - b)"
Create a method to compute the factorial of an input integer using python,"def factorial(n): 
    #base case
    if n == 0: 
        return 1 
  
    # recursive case
    return n * factorial(n-1) 
  
# Driver code 
num = 7
print(""The factorial of"", num, ""is"",factorial(num))"
Write a function in Python to return the parity of the number which is even if the number is divisible by 2 otherwise it will be odd.,"def parity (num):   
    if num % 2 == 0: 
        return ""even""
    else: 
        return ""odd"""
"Create a class in Python to represent a 3D vector. The class should contain properties for the x, y, and z coordinates and methods for calculating the magnitude.","class Vector3D:

    def __init__(self, x, y, z):
        self.x = x
        self.y = y
        self.z = z

    def magnitude(self):
        return (self.x**2 + self.y**2 + self.z**2)**(1/2)"
Write a function to calculate a dog's age in dog's years.,"def dog_age(h_age):
 if h_age < 0:
 	exit()
 elif h_age <= 2:
	 d_age = h_age * 10.5
 else:
	 d_age = 21 + (h_age - 2)*4
 return d_age"
Write a Python program to build a decision tree using a given dataset,"from sklearn import tree

def create_tree_model(x,y):
    model = tree.DecisionTreeClassifier()
    model.fit(x, y) 
    return model"
Output a program in Python to find the most frequent occurring item in an array,"from collections import Counter

arr = [1,3,3,3,4,4,4,4,5,5]
data = Counter(arr)
get_mode = dict(data)
mode = [k for k, v in get_mode.items() if v == max(list(data.values()))]

print(f""Mode of the given list is {mode}"")"
Write Python code to parse this JSON data.,"import json

data = {
  ""title"": ""The Adventures of Tom Sawyer"",
  ""author"": ""Mark Twain"",
  ""year"": 1876
}

parsed_data = json.loads(data)

title = parsed_data['title']
author = parsed_data['author']
year = parsed_data['year']"
Write a Python program to optimize a given array of integers such that each element is greater than or equal to the previous element in the array.,"def optimize_array(array):
    optimized_array = []
    prev = -float(""inf"")
    for n in array:
        if(n>=prev):
            optimized_array.append(n)
            prev = n
    return optimized_array

array = [7, 2, 5, 8, 4, 0]
print(optimize_array(array))
# Output: [7, 5, 8, 4]"
"Create a Python program that merges two lists, removing any duplicates.","def merge_lists(list_a, list_b): 
    merged_list = []
    for ele in list_a:
        if ele not in merged_list:
            merged_list.append(ele)
    for ele in list_b:
        if ele not in merged_list:
            merged_list.append(ele)
    return merged_list"
Create a basic Python script to scrape a web page and retrieve all the headings and anchor tags.,"import requests
from bs4 import BeautifulSoup

url = ""http://example.com""

html_doc = requests.get(url).text

soup = BeautifulSoup(html_doc, 'html.parser')
headings = soup.find_all('h1')
anchors = soup.find_all('a')

for heading in headings:
 print(heading.text)

for anchor in anchors:
 print(anchor.get('href'))"
Write a function to check if a url is valid or not using regex.,"import re
def is_valid_URL(str):
	regex = (""((http|https)://)(www.)?"" +
			""[a-zA-Z0-9@:%._\\+~#?&//=]"" +
			""{2,256}\\.[a-z]"" +
			""{2,6}\\b([-a-zA-Z0-9@:%"" +
			""._\\+~#?&//=]*)"")
	p = re.compile(regex)
	if (str == None):
		return False
	if(re.search(p, str)):
		return True
	else:
		return False"
Create a custom function in python to generate a random number between 1 to 10.,"import random

def random_num():
    return random.randint(1, 10)"
Create a Python class with the given attributes and functions.,"class Person:
    
    def __init__(self, name, age, email):
        self.name = name
        self.age = age
        self.email = email
    
    def toString(self):
        return f""Name: {self.name}, Age: {self.age}, Email: {self.email}"""
"Using the input, generate a Python program that prints out the frequency of each item in the list.","def item_freq(list_input):
    freq = {} 
  
    for item in list_input: 
        if (item in freq): 
            freq[item] += 1
        else: 
            freq[item] = 1
  
    for key, value in freq.items(): 
        print (""% s : % d""%(key, value))"
Generate a Python script to print the numbers from 1 to 10 in reverse order.,"for i in range(10,0,-1):
  print(i)"
"In Python, create a class to define a circle object.","class Circle:
    def __init__(self, radius):
        self.radius = radius 
 
    def area(self):
        return 3.14 * self.radius * self.radius
 
    def circumference(self):
        return 2 * 3.14 * self.radius
 
# Driver code 
c = Circle(2)
print('Area = ', c.area())
print('Circumference = ', c.circumference())"
Prepare a python program that displays a decoded message given in a list.,"code = [1,2,3,2,2,3,1,3]

message = """"
for d in code:
    if d == 1:
        message += ""A""
    elif d == 2:
        message += ""B""
    elif d == 3:
        message += ""C""
print(message)"
"Write a Python program to convert seconds to day, hour, minutes and seconds.","def convertSeconds(seconds):
    day = seconds//(24*3600)
    seconds = seconds%(24*3600)
    hour = seconds//3600
    seconds %= 3600
    minutes = seconds // 60
    seconds %= 60
    return day, hour, minutes, seconds

day, hour, minute, second = convertSeconds(3600)

print(""Day: {}, Hour: {}, Minute: {}, Second: {}"".format(day, hour, minute, second))"
"Write a Python program to clean a text corpus, transforming it into a bag of words.","corpus = ""the cat in the hat""

words = corpus.lower().split()
bag_of_words = set(words)

print(bag_of_words)
# Output: {'the', 'in', 'cat', 'hat'}"
Generate a solution to translate a text from English to French using Python.,"# install the module 
# in command prompt
pip install googletrans

# import module
from googletrans import Translator

# create an object
translator = Translator()

# define text
text = ""Hello, this is a sample text to translate.""

# call the function and pass the text
translation = translator.translate(text, dest='fr') 

# print the translation 
print(translation.text)"
Create a python script to print a word 100 times.,"for i in range(100):
    print(""Word"")"
Construct a program that computes the sum of the first n natural numbers in Python.,"def sum_of_n(n):
    sum = 0
    for i in range(1, n+1):
        sum += i
    return sum"
Build a python class that takes two parameters and returns the sum of the two numbers.,"class Summation:
    def __init__(self, num1, num2):
        self.num1 = num1
        self.num2 = num2

    def get_sum(self):
        return self.num1 + self.num2

total = Summation(5, 10).get_sum()
print(total)"
Write a python program to check if a given string contains all alphabetic characters.,"def is_alpha(word): 
    if word.isalpha(): 
        return True 
    else: 
        return False"
Develop a Python program to show the product of all odd number components in an array.,"""""""
Python program to show the product of all odd numbers in an array
""""""

def product_of_odds(arr):
    product = 1
    for num in arr:
        if num % 2 != 0:
            product *= num
    return product

if __name__ == '__main__':
    arr = [3, 4, 5, 6, 7]
    print(product_of_odds(arr)) # 105"
Write a valid Python program that takes a list and outputs the sum of the elements.,"def sumListElements(arr):
    sum = 0
    for num in arr:
        sum += num
    return sum

result = sumListElements([1,2,3]) 
print(result)"
Create a web crawler in Python that takes a given URL and prints out a list of links.,"from bs4 import BeautifulSoup
import requests

url = 'https://www.example.com'
response = requests.get(url)

soup = BeautifulSoup(response.text, 'lxml')
for link in soup.find_all('a'):
    print(link.get('href'))"
Write a function to find tuples which have all elements divisible by k from the given list of tuples.,"def find_tuples(test_list, K):
  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]
  return (str(res)) "
Develop a python program to demonstrate taxonomic classification.,"class SpeciesClassifier():
    def __init__(self, species_list):
        self.species_list = species_list

    def classify_species(self, species_name):
        for name_from_list in self.species_list:
            if name_from_list == species_name:
                return self.species_list[name_from_list]['classification']
        return None"
Convert this code from Java to Python.,"for i in range(5):
    print(""Hello world!"")"
Write a Python program to find the list of words that are longer than given length,"# Create a list to store the result
long_words_list = []

# Iterate the list to find words longer than the given length
for word in word_list:
    if len(word) > length:
        long_words_list.append(word)

# Print the result
print(long_words_list)"
Write a python function to sort a list according to the second element in sublist.,"def Sort(sub_li): 
    sub_li.sort(key = lambda x: x[1]) 
    return sub_li "
Write a Python program to extract the last two digits of the given array of integers.,"res = []
for num in arr:
    res.append(num%100)
print(res) # [30, 93, 56]"
Write a Python statement to check if a given number is within a given range,"if 0 <= 3 <= 10:
 print('Number is within the range')
else:
 print('Number is not within the range')"
Configure the following python code to work the mathematical expression.,"def calculate(x, y, operator):
    if operator == '+':
        return x + y
    elif operator == '-':
        return x - y
    elif operator == '*':
        return x * y
    elif operator == '/':
        return x / y"
Generate a program in Python that takes in a string and returns the reverse of the string.,"def reverse_string(str):
    """""" Reverses a given string """"""

    rev_str = """"

    for c in str:
        rev_str = c + rev_str

    return rev_str

str = ""Hello World""
rev_str = reverse_string(str)

print(rev_str)"
Create a Python function called add_marks which takes two parameters: marks(a list) and mark(an integer). The function should add the mark to each value in the marks list.,"def add_marks(marks, mark):
 return [m + mark for m in marks]"
Convert the following code from C++ to Python.,"def main():
  val1 = 25
  val2 = 6
  sum = val1 + val2
  print(sum)
  return 0"
Generate a Python dictionary that tracks the frequency of letters in a given string.,"frequency_dict = {}

for letter in test_string:
    if letter not in frequency_dict:
        frequency_dict[letter] = 0
    frequency_dict[letter] += 1"
Create a Python program to print the Fibonacci sequence.,"def Fibonacci(n): 
    a = 0
    b = 1
    if n < 0: 
        print(""Incorrect input"") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2,n): 
            c = a + b 
            a = b 
            b = c 
        return b 

# Driver Program 

print(Fibonacci(9))"
"Construct a for loop in Python to generate the sequence [0, 1, 2, 3, 4, 5, 6, 7, 8].","for i in range(9):
    print(i)"
"Write an API endpoint for a basic user authentication system in Python. It should accept a username and password, validate them, and return a token if the user is valid.","import jwt
 
@app.route('/auth', methods=['POST'])
def auth():
 username = request.form.get('username')
 password = request.form.get('password')
 
 # authenticate the user here
 
 token = jwt.encode({'username': username}, app.config['SECRET_KEY'])
 
 return token"
Create a Python script to partition a list into sub-lists of equal size.,"def partition(lst, n):
 return [lst[i:i+n] for i in range(0, len(lst), n)]
 
list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
partitions = partition(list, 3)
 
for p in partitions:
 print(p)

# Output
# [1, 2, 3]
# [4, 5, 6]
# [7, 8, 9]
# [10]"
Design a for loop in Python which iterates over two given lists and prints their items in a orderly manner.,"for item1, item2 in zip(list1, list2):
    print(f""{item1}: {item2}"")"
Write a python function to find the count of rotations of a binary string with odd value.,"def odd_Equivalent(s,n): 
    count=0
    for i in range(0,n): 
        if (s[i] == '1'): 
            count = count + 1
    return count "
Analyze a given python code and debug it.,"def calculate_sum(numbers: Array[int]):
    sum = 0
    for i in numbers:
        sum += i
    return sum

nums = [3, 7, 10]
print(""The sum is"", calculate_sum(nums))"
Develop Python code to reverse an array.,"def reverse_array(arr): 
    start = 0
    end = len(arr) - 1
      
    while start < end: 
        arr[start], arr[end] = arr[end], arr[start] 
        start += 1
        end -= 1
    return arr 
  
# Driver code 
arr = [1, 2, 3, 4, 5] 
print(reverse_array(arr))"
Write a python script that checks if a given string is a palindrome.,"def isPalindrome(s): 
    rev = ''.join(reversed(s))
    if s == rev:
        return True
    return False"
Design an algorithm in Python that prints out all the prime numbers up to a certain number.,"def is_prime(n):
  if n == 1:
    return False

  for i in range(2, int(n ** 0.5) + 1):
    if n % i == 0:
      return False
   
  return True

def get_prime_numbers(n):
  result = []
  for num in range(2, n+1):
    if is_prime(num):
      result.append(num)
  return result

prime_numbers = get_prime_numbers(15)
print(prime_numbers)"
Suggest alternative code to determine the mode of a given list in Python.,"from collections import Counter

def get_mode(numbers):
    num_count = Counter(numbers)
    max_count = max(num_count.values())
    mode = [x for x in num_count.keys() if num_count[x] == max_count]
    return mode"
Write a python program to split a list into two halves,"def split_list(data):
    # Calculate the length of data
    length = len(data)
    # calculate the midpoint of the list 
    midpoint = length//2
    
    # split the data into two halves 
    first_half = data[:midpoint]
    second_half = data[midpoint:]
    
    return first_half, second_half
    
split_list([1, 2, 3, 4, 5]) # Returns ([1, 2], [3, 4, 5])"
Write a Python code to get the third largest element in a given row.,"def third_largest(lst):
    if len(lst) < 3:
        return
    distinct = []
    for i in lst:
        if i not in distinct:
            distinct.append(i)
    distinct.sort(reverse=True)
    return distinct[2]"
Construct a class in Python to implement a queue.,"class Queue(object):
 def __init__(self):
  self.items = []

 def isEmpty(self):
  return self.items == []

 def enqueue(self, item):
  self.items.insert(0, item)

 def dequeue(self):
  return self.items.pop()

 def size(self):
  return len(self.items)"
Create a unit test for an existing Python function. The function should take a single argument and return the square of the argument.,"import unittest

def square(x):
   return x * x

class TestSquareFunction(unittest.TestCase):
   def test_square(self):
       self.assertEqual(square(3), 9)
       self.assertEqual(square(5), 25)
       self.assertEqual(square(7), 49)

if __name__ == '__main__':
     unittest.main()"
Write a function to return the sum of all divisors of a number.,"def sum_div(number):
    divisors = [1]
    for i in range(2, number):
        if (number % i)==0:
            divisors.append(i)
    return sum(divisors)"
Create a Python program to search for a particular pattern in a string of text and return all matching substrings.,"import re

text = ""hey this is a string to match for a pattern""
pattern = ""match""

# Find all matches
matches = re.findall(pattern, text)

# Print the matches
print(matches)
# Output: ['match']"
Generate a random 5-letter word using a code for a Python program.,"import random

alphabet = 'abcdefghijklmnopqrstuvwxyz'

def generate_random_word():
    word = ''
    for i in range(5):
        word += random.choice(alphabet)
    return word

print(generate_random_word())"
Generate a Python program to convert Fahrenheit to Celsius using a given formula.,"def fahrenheit_to_celsius(fahrenheit):
    celsius = (fahrenheit - 32) * 5 / 9
    return celsius"
Create a program in Python which will compute the sum of all the numbers in a range.,"def sum_of_range(start, end): 
    sum = 0
    for i in range(start, end+1): 
        sum += i
    return sum 
  
# Driver Code 
print(sum_of_range(10, 20))"
"Rewrite the following Javascript code as a Python code that solves the same problem.

Given an array of numbers, find the square root of each number and print it.","import math

numbers = [2, 3, 4, 5]

for number in numbers:
 print(math.sqrt(number))

# Output
# 1.414
# 1.732
# 2.000
# 2.236"
Design a Python script to calculate the count of words in a given sentence.,"def word_count(sentence):
    words = sentence.split(' ')
    return len(words)"
Write a function in Python that finds all possible substrings of a string and prints them.,"def printSubstrings(s): 
    n = len(s) 
      
    for i in range(n):
        for j in range(i+1, n+1):
            print(s[i:j])
  
# Driver code 
s = ""Hello World""
printSubstrings(s)"
Write a python program to calculate the mean of a list of numbers and display the mean using print statement.,"list = [2, 6, 9, 8, 4, 5]
sum = 0 
for num in list:
 sum += num 

# calculate mean
mean = sum / len(list)

# print mean
print(""Mean:"", mean)

# Output
Mean: 5.8"
Create an animation in Python using some type of visualization library like Matplotlib.,"import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation

fig, ax = plt.subplots()
xdata, ydata = [], []

def update(frame):
 xdata.append(frame)
 ydata.append(frame ** 2)

 ax.clear()
 ax.plot(xdata, ydata)

animation = FuncAnimation(fig, update, frames=range(100), interval=100)
plt.show()"
Write a function to check whether a specified list is sorted or not.,"def issort_list(list1):
    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))
    return result"
"Write a Python program to sum the list of integers in ""input_list"".","def sum_list(input_list):
    total = 0
    for item in input_list:
        total += item
    return total"
Create a python code to convert a string of comma-separated numbers into list.,"numbers = '1,2,3,4,5,6'

numbers_list = [int(x) for x in numbers.split(',')]

print(numbers_list) # [1, 2, 3, 4, 5, 6]"
Generate a Python script for calculating the Fibonacci numbers.,"def fibonacci(n): 
    if n<0: 
        print(""Incorrect input"") 
    elif n==1: 
        return 0
    elif n==2: 
        return 1
    else: 
        return fibonacci(n-1)+fibonacci(n-2) 

# Driver Program 
  
print(fibonacci(9))"
Modify the given function to sort a list of tuples based on the second index of each tuple in Python.,"def sort_list_of_tuples(input_list):
    sorted_list = sorted(input_list, key=lambda tup: tup[1])
    return sorted_list"
Create a program that can find the top five most common words in the input.,"import collections
import re

# clean and preprocess text
words = re.sub('\W+', ' ', input_text).split()

# find most common words
word_counter = collections.Counter(words)

# print top five most common words
print(word_counter.most_common(5))

# Output:
[('a', 1), ('Python', 1), ('is', 1), ('powerful', 1), ('general', 1)]"
Develop a Python script to perform sentiment analysis on a given text.,"import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer

text = ""I'm feeling really great today""

sid = SentimentIntensityAnalyzer()
ss = sid.polarity_scores(text)

print(ss['compound']) # Prints 0.6249, which is positive sentiment."
Write a code snippet in Python for sorting a given array of numbers in ascending order.,"def sort_array(arr): 
    arr.sort() 
    return arr 

sort = sort_array([3, 7, 1, 5])

print(sort)"
Create a Python program to edit a given string and insert a given word into the middle of the string.,"def insert_word(string, word):
  mid_index = len(string)//2
  start_string = string[:mid_index]
  end_string = string[mid_index:]
  new_string = start_string+word+end_string
  return new_string

string = 'I am a programmer'
word = 'software'

print(insert_word(string, word))"
Create a decision tree in Python to classify a given dataset.,"from sklearn.tree import DecisionTreeClassifier

# define the model with the desired parameters
model = DecisionTreeClassifier(criterion='entropy', max_depth=5)

# fit the model with the data
model.fit(X, y)

# make predictions
y_pred = model.predict(X_new)"
Edit the given Python function to include an exception handling code block.,"def convert_to_integer(x):
    try:
        return int(x)
    except Exception:
        print('Unable to convert to integer.')
        return x"
Write a function to filter the height and width of students which are stored in a dictionary.,"def filter_data(students,h,w):
    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}
    return result    "
Create a Python script to scrape a web page and output the title of the page.,"import requests
from bs4 import BeautifulSoup

url = 'https://www.example.com'

resp = requests.get(url)
soup = BeautifulSoup(resp.text, 'html.parser')
title = soup.find('title').get_text()

print(title)"
Write a python function to find the sum of all odd natural numbers within the range l and r.,"def sum_Odd(n): 
    terms = (n + 1)//2
    sum1 = terms * terms 
    return sum1  
def sum_in_Range(l,r): 
    return sum_Odd(r) - sum_Odd(l - 1)"
"Given a Python dictionary, write a program to remove all the keys whose value is greater than a specified number.","dictionary = {'a': 1, 'b': 2, 'c': 3, 'd':4}
threshold = 2

def remove_keys(dict, threshold):
    to_remove = [k for k, v in dict.items() if v > threshold]
    for k in to_remove:
        del dict[k]
    return dict

print(remove_keys(dictionary, threshold))
# Output: {'a': 1, 'b':2}"
Create a python function that takes in a string and reverse any words that contain a certain character.,"def string_reverse(string, character):
    new_string = []
    for word in string.split(' '):
        if character in word:
            new_string.append(word[::-1])
        else:
            new_string.append(word)
    return ' '.join(new_string)

string_reverse(""Hello World!-Abc"", ""-"") # Output: ""Hello dlroW!-cbA"""
Create a program in Python that takes 5 numbers input from the user and prints out their median.,"nums = []
ans = 0

for _ in range(5):
 nums.append(int(input()))
 
nums.sort()

if len(nums) % 2 == 0:
 ans = (nums[len(nums)//2] + nums[len(nums)//2-1]) / 2
else:
 ans = nums[len(nums) // 2]
 
print(""Median of the given numbers is: "" + str(ans))"
Design a function in Python to generate Fibonacci numbers from 1 to a given range.,"def fibonacci(x):
 fib_numbers = [1,1]
 for i in range(2,x):
  fib_numbers.append(fib_numbers[i-1] + fib_numbers[i-2])
 return fib_numbers"
Sort a list in descending order using a lambda function in Python.,"list = [1, 5, -9, 8, 21]
sorted_list = sorted(list, reverse=True, key= lambda x:x)
print(sorted_list)"
Create a Python class for handling exceptions.,"class CustomException(Exception):
    def __init__(self, message):
        self.message = message
    def __str__(self):
        return self.message

def divide(x, y):
    try:
        result = x // y
    except ZeroDivisionError:
        raise CustomException(""Division by zero is not allowed"")
    else:
        return result"
Create a program to calculate the number of ways to arrange five numbers in a sequence.,"# Python
numbers = [1, 2, 3, 4, 5]

count = 0

for i in range(5):
 for j in range(5):
 if j != i:
 for k in range(5):
 if k != i and k != j:
  for l in range(5):
  if l != i and l != j and l != k: 
   for m in range(5):
   if m != i and m != j and m != k and m != l:
   count += 1

print(count)
# 120"
Create a Python class called 'Rectangle' with a constructor that takes two arguments: length and width.,"class Rectangle:
    def __init__(self, length, width):
        self.length = length
        self.width = width

    def area(self):
        return self.length * self.width"
Write a Python program to find the maximum and minimum value in a given dictionary.,"def max_min_dict(dict_a):
 max_val = -float('inf')
 min_val = float('inf')
 for key in dict_a:
 max_val = max(max_val, dict_a[key])
 min_val = min(min_val, dict_a[key])
 
 return max_val, min_val
 
max_min_dict(dict_a)"
"Given a duration in seconds, write a Python code to convert it into a string showing hours, minutes and seconds.","def to_time_string(duration):
    hours, remainder = divmod(duration, 3600)
    minutes, seconds = divmod(remainder, 60)
    return ""%02d:%02d:%02d"" % (hours, minutes, seconds)

print(to_time_string(32400))"
Develop a function in Python which reverses any given string.,"def reverseString(str):
  return str[::-1]"
Create a machine learning algorithm in Python that takes a set of data points and classifies them into two distinct classes.,"import numpy as np
from sklearn.svm import LinearSVC

X = np.array([[1, 2], [-2, 3], [-1, -4], [0, 0]])
# y = [1, -1, -1, 0]
y = np.array([1, -1, -1, 0])

clf = LinearSVC()
clf.fit(X, y)

# Predict the class of the points [[3, -1], [-2, 0]]
predictions = clf.predict([[3, -1], [-2, 0]])
# Output -> [1, -1]"
Generate a Python function to compute the Fibonacci sequence.,"def fibonacci(n):
 if n == 0:
  return 0
 elif n == 1:
  return 1
 else:
  return fibonacci(n - 1) + fibonacci(n - 2)"
Write a Python function to get the GCD (Greatest Common Divisor) of two positive integers.,"def gcd(a,b): 
      
    if b == 0: 
        
        return a 
      
    return gcd(b, a % b)"
Generate a Python function which takes an array and a value and returns the index at which this value is present in the array.,"def find_index(arr, x):
    for i in range(len(arr)):
        if arr[i] == x:
            return i
    return -1

print(find_index(arr, x))"
"Generate a Python dictionary with 10 key-value pairs, where the value should be an integer.","dictionary = {
    'one': 1,
    'two': 2,
    'three': 3,
    'four': 4,
    'five': 5,
    'six': 6,
    'seven': 7,
    'eight': 8,
    'nine': 9,
    'ten': 10
}"
Create a Python program to remove all white-space from a given string.,"string = ""Hello World   ""

no_space_string = string.replace(' ', '')

print(no_space_string)"
Create a function in python to generate a multiplication table for a given number n.,"def generate_multiplication_table(n):
    table = []
    for i in range(1, n+1):
        row = []
        for j in range(1, n+1):
            row.append(i * j)
        table.append(row)
    return table"
Create a Python script to parse a JSON string and return the value of the given field.,"def get_value(json_string, field):
    json_dict = json.loads(json_string)
    return json_dict[field]"
Construct a python function that sorts a list of tuples containing the names of the keys and values of a dictionary.,"def sort_dictionary(dictionary):
    return sorted(dictionary.items(), key=lambda x: x[1])"
Generate a class in Python that can store the following data,"class HealthData:
    def __init__(self, month, calories, minutes):
        self.month = month
        self.calories = calories
        self.minutes = minutes"
Develop a code in Python to print the nth Fibonacci number.,"def Fibonacci(n): 
    if n<0: 
        print(""Incorrect input"") 
    # First Fibonacci number is 0 
    elif n==1: 
        return 0
    # Second Fibonacci number is 1 
    elif n==2: 
        return 1
    else: 
        return Fibonacci(n-1)+Fibonacci(n-2) 

print(Fibonacci(6))"
Write a Python program to arrange the following list in descending order,"arr = [4,7,1,10,3]

arr.sort(reverse=True)

print(arr)
# Output: [10, 7, 4, 3, 1]"
Write a Python function which takes a number as a parameter and check the number is prime or not.,"def is_prime(num): 
    if num > 1:
        for i in range(2, num):
            if (num % i) == 0:
                return False 
        return True
    else: 
        return False"
Write a Python program to extract all the links from a web page.,"from bs4 import BeautifulSoup
import requests

url = 'https://www.example.com'
response = requests.get(url)
soup = BeautifulSoup(response.text, 'html.parser')

links = []
for link in soup.find_all('a'):
    links.append(link.get('href'))

print(links)"
Design a recursive function in Python that calculates the Fibonacci sequence to the nth number.,"def fib(n):
 if n == 0:
  return 0
 elif n == 1:
  return 1
 else:
  return fib(n-1) + fib(n-2)

num = 10
print(""The Fibonacci sequence to the "" + str(num) +""th number is:"")
for i in range(num):
 print(fib(i))"
Generate a new Python program to be able to classify a list of emails.,"def classify_email(email_list): 
    classified_list = []
    for email in email_list: 
        if '@' in email: 
            classified_list.append('Valid') 
        else: 
            classified_list.append('Invalid') 
    return classified_list"
Create a function in Python that takes a list of strings as an argument and sorts the strings in alphabetical order.,"def sort_strings(strings):
    strings.sort()
    return strings"
Write a function to sort the tuples alphabetically by the first item of each tuple.,"def sort_tuple(tup): 
	n = len(tup) 
	for i in range(n): 
		for j in range(n-i-1): 
			if tup[j][0] > tup[j + 1][0]: 
				tup[j], tup[j + 1] = tup[j + 1], tup[j] 
	return tup"
Write a function to find the division of first even and odd number of a given list.,"def div_even_odd(list1):
    first_even = next((el for el in list1 if el%2==0),-1)
    first_odd = next((el for el in list1 if el%2!=0),-1)
    return (first_even/first_odd)"
"Given a set of data, develop a Python program to classify the data into two categories: low and high.","# Define the threshold
threshold = 5

def classify(data):
  result = []
  for item in data:
    if item <= threshold:
      result.append('low')
    else:
      result.append('high')
  return result

print(classify([8, 5, 9, 1, 3, 10]))
# Output: ['high', 'low', 'high', 'low', 'low', 'high']"
Create a string reverse function in Python.,"def string_reverse(string):
  return string[::-1]

print(string_reverse(""Hello world!""))"
Create a scalable program in Python using functions to add two numbers.,"def add(x, y): 
    return x + y
 
# Driver code 
num1 = 7
num2 = 9
print(""Sum of {0} and {1} is {2}"" 
        .format(num1, num2, add(num1, num2)))"
Write a Python program that takes a list of integers and returns a list of their squares.,"def square_list(l):
 return [i**2 for i in l]

print(square_list([1, 2, 3, 4]))
# Output: [1, 4, 9, 16]"
Write a Python script for creating a type-safe data model based on a given JSON object.,"class DataModel:
 def __init__(self, name: str, age: int, likes: List[str]):
  self.name = name
  self.age = age
  self.likes = likes

data = DataModel(name=""Bob"", age=42, likes=[""Sports"", ""Coding""])"
Write a Python program to get a slice of elements from a list.,"def get_slice(mylist, start, end):
    return mylist[start:end]

result = get_slice([1,2,3,4,5,6], 2, 5)
print(result)"
Write a Python program to create an array containing 10 random numbers from 1 to 10 and sort them in ascending order.,"import numpy as np

# Create an array of 10 random numbers between 1 to 10
arr = np.random.randint(low=1, high=11, size=10)

# Sort the array in ascending order
arr.sort()

print(arr)"
Write a python function to find the length of the longest word.,"def len_log(list1):
    max=len(list1[0])
    for i in list1:
        if len(i)>max:
            max=len(i)
    return max"
Generate a Python program to divide two numbers and produce the result in decimal form.,"def divide(a,b):
 return round(a/b, 2)"
Write a python function to check whether all the bits are unset in the given range or not.,"def all_Bits_Set_In_The_Given_Range(n,l,r):  
    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) 
    new_num = n & num
    if (new_num == 0): 
        return True
    return False"
"Write a function in Python that takes a list of numbers as an input, and returns the largest of them.","def largest(list):
 largest = 0
 for number in list:
 if number > largest:
 largest = number
 return largest

print(largest([1, 2, 3, 4, 5]))
# Outputs 5"
Write a short python program to sort a list of words in lowercase alphabetical order,"def sort_words(word_list):
  word_list.sort(key = lambda x : x.lower())
  return word_list"
Create a class in Python to calculate the area and perimeter of a rectangle.,"class Rectangle:
    def __init__(self, length, width):
        self.length = length
        self.width = width

    def area(self):
        return self.length * self.width

    def perimeter(self):
        return 2 * (self.length + self.width)"
"Write a python program, taking a string input from the user, to reverse all the words in it.","user_input = input('Please enter a string: ')
 
words = user_input.split(' ')
 
reverse_words = [word[::-1] for word in words]
 
print(' '.join(reverse_words))"
Write a python function to check whether all the bits are within a given range or not.,"def all_Bits_Set_In_The_Given_Range(n,l,r): 
    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) 
    new_num = n & num 
    if (num == new_num): 
        return True
    return False"
Create a data analysis solution using Python and Pandas.,"import pandas as pd

# Read in the CSV file
df = pd.read_csv(""data.csv"")

# Calculate population density
df['Density'] = df['Population'] / df['Area']

# Print the density of the first 5 countries
print(df.head()['Density'])"
"Create an algorithm in Python to calculate the tax payable, given yearly income and tax rates.","def calculatetax(yearly_income, rate):
    tax = yearly_income * rate
    return tax

income = 70000
rate = 0.2
tax_payable = calculatetax(income, rate)

print(""Tax payable: "" + str(tax_payable))"
Create a dictionary in Python with key-value pairs,"my_dict = {
    ""FirstName"": ""John""
}"
Develop an algorithm in Python that takes an array of integers and finds two numbers whose sum is the given target.,"def two_sum(arr, target):
 for num1 in arr:
 for num2 in arr:
 if num1 + num2 == target:
 return (num1, num2)

result = two_sum([1, 3, 5, 7, 9], 12)
print(result)
# Output -> (5, 7)"
Create a list in Python from a given list of numbers.,"myList = [1, 2, 4, 8, 16]"
Create a Python function to classify a given string as either a palindrome or not.,"def is_palindrome(string):
    string_temp = string.lower()
    reverse_string = string_temp[::-1]
    if string_temp == reverse_string:
        print(""yes, this is a palindrome"")
    else:
        print(""no, this is not a palindrome"")

is_palindrome(string)"
Write a Python program that sorts a list of integers in ascending order without using the built-in sort() method.,"def selection_sort(arr):
 n = len(arr)
 for i in range(n):
 min_idx = i
 for j in range(i+1, n):
 if arr[min_idx] > arr[j]:
 min_idx = j
 arr[i], arr[min_idx] = arr[min_idx], arr[i]

arr = [4, 5, 13, 2, 9, 7]
selection_sort(arr)
print(arr)
# Output: [2, 4, 5, 7, 9, 13]"
"Write a Python function that takes a string as input and returns true if the string starts with the letter ""a"".","def starts_with_a(string):
    if string[0] == 'a':
        return True
    else:
        return False

result = starts_with_a('awesome')
print(result)"
Please provide Python code to print out all the prime numbers in a list of numbers.,"def is_prime(num):
  for i in range(2, num):
    if num % i == 0:
      return False
  return True

list_of_numbers = [2, 3, 4, 5, 6, 7, 8, 9, 11] 
for i in list_of_numbers:
  if is_prime(i):
    print(i)"
Optimize the following Python function to merge two lists.,"def merge_lists(a, b):
  merged_list = []
  a_pos = 0
  b_pos = 0
  
  while a_pos < len(a) and b_pos < len(b):
    if a[a_pos] < b[b_pos]:
      merged_list.append(a[a_pos])
      a_pos += 1
    else:
      merged_list.append(b[b_pos])
      b_pos += 1

  return merged_list + a[a_pos:] + b[b_pos:]

a = [1,3,5]
b = [2,4,6]
print(merge_lists(a,b))"
Can you create a Python program to return true if a given string is a valid IP address and false otherwise?,"import re
def is_valid_ip(ip):
    regex_pattern = r""^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$""
    if re.match(regex_pattern, ip):
        return True
    else:
        return False"
Write a python program to search through a list of integers and find the smallest number.,"def find_smallest(int_list):
    # set the minimum value to the first item in the list initially
    min_val = int_list[0]
    # loop over the list and compare each item to the minimum value
    for num in int_list:
        if num < min_val:
            min_val = num
    # return the minimum value
    return min_val"
"Write a Python program to edit this list of lists and remove any empty lists from the beginning, middle and end of the list.","def remove_empty_lists(lst):
  new_lst = []
  for li in lst:
    if li:
      new_lst.append(li)
  return new_lst

# call the function  
modified_list = remove_empty_lists([[], [2, 3], [], [4, 5], [], [6]])

print(modified_list)  
# Output: [[2, 3], [4, 5], [6]]"
Write Python code to normalize the values of a list of numbers by subtracting each number from the maximum value in the list and dividing it by the maximum value.,"def normalize(lst): 
    max_num = max(lst)
    normalized_lst = [(num-max_num)/max_num for num in lst]
    return normalized_lst

lst = [7,8,10]
normalized_values = normalize(lst)
print(normalized_values)"
Write a Python program that takes an integer as input and check if the number is prime or not.,"def is_prime(n):
    if n < 2: 
        return False

    for i in range(2, int(n**0.5) + 1):  
        if n % i == 0: 
            return False

    return True"
Write a python program that prints a greeting for each name in the given list,"for name in names:
    print('Hello ' + name + '!')"
Build a python program to convert any currency to a different currency given its exchange rate,"def currency_converter(input_currency, output_currency, exchange_rate):
amount = float(input('Enter the amount to convert: '))
total_amount = amount * exchange_rate

print('{} {} = {} {}'.format(amount, input_currency, total_amount, output_currency))"
Generate command line commands for running a basic GridSearch model to improve an existing machine learning classifier.,"from sklearn.model_selection import GridSearchCV

parameters = {'C': [1, 5, 10, 100], 'gamma': [0.0001, 0.001, 0.01, 0.1]}
clf = GridSearchCV(svm.SVC(), parameters)

# Run grid search
python your_program.py --estimator  clf --parameters $parameters"
Write a Python program which prints out the Fibonacci series up to the N-th term.,"def print_fibonacci_series(n): 
    a = 0
    b = 1
    c = 0

    while c < n:
        print(a,end="" "")
        c = c+1
        temp = a+b
        a = b 
        b = temp 
		
print_fibonacci_series(15)"
Write a Python functions to generate a random number between 1 and 9,"import random

def random_number():
 return random.randint(1,9)"
Generate a function to find the GCD of two numbers in Python.,"def gcd(a,b): 
    if(b==0): 
        return a 
    else: 
        return gcd(b,a%b)"
Generate a function in Python using the input argument side-effect free function to calculate the square root of a number.,"def get_sqrt(x):
    return x**0.5"
Write a Python program to combine two lists of dictionaries into one list.,"combined = [{'a': 'b', 'c'}, {'d': 'e', 'f': 'g'}, {'h': 'i', 'j' : 'k'}, {'l': 'm'}]"
Create a sorting algorithm in Python for evaluating and sorting a list of tuples with two elements.,"def sort_list_tuples(tuples):
  # sort by the second element in each tuple
  return sorted(tuples, key=lambda x: x[1])

# test code
tuples = [('a', 3), ('b', 2), ('c', 1)] 
print(sort_list_tuples(tuples))"
Write a function in Python that takes a list of names as the parameter and returns the longest name in the list.,"def longest_name(names):
 longest_name = ''

 for name in names:
  if len(name) > len(longest_name):
   longest_name = name
 
 return longest_name

Names = ['John', 'Michael', 'Scott', 'Steve']

longest = longest_name(Names)

print(longest) # Michael"
Create a python code for linear search of an item in a list.,"def linear_search(arr, x): 
  
    for i in range(len(arr)): 
  
        if arr[i] == x: 
            return i 
  
    return -1"
Combine two Python dictionaries and return a new dictionary,"def combine_dict(dict1, dict2):
    combined_dict = {}
    for key, value in dict1.items():
        combined_dict[key] = value
    for key, value in dict2.items():
        combined_dict[key] = value
    return combined_dict

dict1 = {'a':1, 'b':2}
dict2 = {'b':3, 'c':4}
combined_dict = combine_dict(dict1, dict2)
print(combined_dict)"
Create a Python program that asks the user for a number and displays all the prime numbers up to that number.,"number = int(input(""Please enter a number: ""))

for n in range(2, number + 1):
    is_prime = True
    for i in range(2, n):
        if n % i == 0:
            is_prime = False
            break
    if is_prime:
        print(n)"
Create a Python program to sort the list of colors in alphabetical order.,"colors = [""red"", ""green"", ""blue""]

#sorting in ascending order
desc_colors = sorted(colors)

print(""Colors in alphabetical order:"", desc_colors)"
Design a dynamic Python list to hold a series of IP addresses.,ip_list = []
Create a python program that prints out the powers of two.,"# Print out the powers of two from 2^0 to 2^10
for i in range(11):
  print(2**i)"
Predict the output of the following Python program.,15
Write a Python program to find the missing number in a list of integers.,"def find_missing_num(lst):
 expected_num = sum(range(lst[0],lst[-1]+1))
 actual_sum = sum(lst)
 return expected_num - actual_sum

lst = [1,2,4,5,6,7,8]
missing_num = find_missing_num(lst)
print(""The missing number is"", missing_num)"
Create a python program to print all two dimensional subarrays in a given two-dimensional array,"for i in range(len(two_dimensional_array)): 
    for j in range(i+1): 
        for k in range(len(two_dimensional_array[i])): 
            print(two_dimensional_array[j][k], end="" "") 
        print()"
Suggest code to print the following pattern in Python.,"for row in range(6): 
    for col in range(7): 
        if (row == 0 and col % 3 != 0) or (row == 1 and col % 3 == 0) or (row - col == 2) or (row + col == 8): 
            print(""*"", end="""") 
        else: 
            print("" "", end="""") 
    print()"
Write a function in Python that takes a list of objects and returns a list of those objects sorted by one of their attributes.,"def sort_by_attr(objects, attr):
 return sorted(objects, key=lambda item: item[attr])
 
sort_by_attr([{""name"": ""Alice"", ""age"": 20}, {""name"": ""Bob"", ""age"": 21}], ""age"")"
Develop a RESTful web service in Python which returns the data provided in the given URL.,"import flask
from flask import Flask
import requests

app = Flask(__name__)

@app.route('/data', methods=[""GET""])
def data():
    r = requests.get('https://example.com/dataset.json')
    return flask.jsonify(r.json())

if __name__ == '__main__':
    app.run()"
Construct a Python program to round the number up to the nearest integer,"def round_up(num): 
    if num == int(num): 
        return int(num) 
    return int(num + 1) 

num = 5.6
print(round_up(num))"
Generate code to solve a Fibonacci sequence using recursion in Python.,"def fibonacci(n):
   if n <= 1:
       return n
   else:
       return(fibonacci(n-1) + fibonacci(n-2))

# Print the first 10 numbers in the sequence
for i in range(10):
   print(fibonacci(i))"
Create a Python program to detect if a given string has any palindrome substrings.,"def is_palindrome(s):
    for i in range(len(s)):
        for j in range(len(s)-i+1):
            substring = s[i:j]
            if substring == substring[::-1]:
                return True
    return False"
Improve this Python code so that it prints out an appropriate error when the index is out of bounds.,"def search(lst, index): 
    if index < 0 or index >= len(lst):  
        print(""Index out of bounds"") 
        return None
    else:  
        return lst[index]"
Generate Python code for printing the average of a list of numbers.,"list = [2, 5, 6, 7]

sum = 0

for num in list:
 sum += num
 
average = sum / len(list)
print(""Average:"", average)"
Create a function in Python to count the number of occurrences of a particular letter in a string.,"def CountLetterOccurrences(str, letter): 
    return str.count(letter)"
Write a Python Script to find all pairs of numbers in a list that have a sum equal to the target value.,"def findPair(lst, target): 
    for i in range(0, len(lst)): 
        for j in range(i + 1, len(lst)): 
            if lst[i] + lst[j] == target: 
               return print(lst[i],"","", lst[j]) 
    
list = [2, 4, 6, 8] 
target = 10
findPair(list, target)"
Create a Python function to generate a URL endpoint mapping based on a given URL string.,"from flask import Flask

app = Flask(__name__)

@app.route(""/posts/<title>/<action>"")
def process_url(title: str, action: str):
	print(f'URL endpoint mapping for title: {title} and action: {action}')

if __name__ == '__main__':
	app.run()"
Create a method in Python which takes a string and an integer as arguments and returns an integer representing the number of times that character appears.,"def findCount(s, c):
    count = 0
    for char in s:
        if char == c:
            count += 1
    return count 

print(findCount(s, c))"
Write a Python program to check if a given number is divisible by 3 and 5 or not.,"def check_divisible_3and5(num):
    if (num % 3 == 0 and num % 5 == 0):
        return True
    else:
        return False

# test given number
num = 10
if check_divisible_3and5(num):
    print(""%d is divisible by 3 and 5"" %num)
else:
    print(""%d is not divisible by 3 and 5"" %num)"
Write a Python script to find the area of a triangle when three sides are given.,"# calculate the semi-perimeter
s = ( a + b + c ) / 2
  
# calculate the area
area = (s*(s-a)*(s-b)*(s-c)) ** 0.5
  
print('The area of the triangle is %0.2f' %area)
// Output: The area of the triangle is 6.00"
Write a Python function to find the number of pairs of integers in an array that sum up to a given number,"def count_pairs(numbers, target_sum):
 count = 0
 for i in range(len(numbers)):
 for j in range(i + 1, len(numbers)):
 if numbers[i] + numbers[j] == target_sum:
 count += 1
 return count"
Create a Python script to check a given URL and see if it is active or not.,"import requests 
  
def check_url(url): 
    try:
        response = requests.get(url)
        if response.status_code == 200:
            return True
        else:
            return False
    except:
        return False"
Create a Python function that takes inputs in the form of two words and returns the start index of the second word in the first word.,"def index_of_word(w1, w2):
    pos = 0
    for i in w1:
        if w1.find(w2,pos) > -1:
            return w1.find(w2,pos)
        pos +=1
    return -1"
Write a Python program to shuffle the items of a list.,"import random

lis = [1, 2, 3, 4, 5]
random.shuffle(lis)
print(lis)"
Write a Python program to filter a list of words by their length.,"def filter_by_length(word_list, length):
    filtered_list = []
    for word in word_list:
        if len(word) == length:
            filtered_list.append(word)
    return filtered_list

result = filter_by_length(word_list, 5)
print(result)"
Write a Python code to normalize a list of numbers.,"""""""
Normalize a list of numbers using Python
""""""

def normalize_list(list_numbers):
  max_val = max(list_numbers)
  normalized = [n/max_val for n in list_numbers]
  return normalized

if __name__ == '__main__':
  list_numbers = [1, 4, 4, 5, 7]
  print(normalize_list(list_numbers))"
"Write a python function to compare two strings and return 1 if the strings are anagrams, 0 if not.","def is_anagram(string1, string2):
    string1 = sorted(string1.replace("" "", """").lower())
    string2 = sorted(string2.replace("" "", """").lower())
    
    if string1 == string2:
        return 1
    else:
        return 0"
Create a Python program that randomly shuffles the values in an array,"import random

def shuffle(my_arr):
    shuffled_arr = my_arr[:]
    random.shuffle(shuffled_arr)
    return shuffled_arr

shuffled_arr = shuffle(my_arr)
print(shuffled_arr)"
Implement a program in Python that takes a string as an input and prints out the length of the longest word in the string.,"def longest_word(string):
    words = string.split("" "")
    max_length = 0
    longest_word = """"
    for word in words:
        if(len(word) > max_length):
            max_length = len(word)
            longest_word = word
    print(""Longest word is {} with length {}"".format(longest_word,max_length))"
Generate a Python function to get the prime factors of a number,"def prime_factors(n):
    prime_factors = []
    while n % 2 == 0: 
        prime_factors.append(2)
        n = n / 2
    for i in range(3, int(math.sqrt(n)) + 1, 2): 
        while n % i == 0: 
            prime_factors.append(int(i))
            n = n / i
    if n > 2: 
        prime_factors.append(int(n))
    return prime_factors"
Create a line chart representing the given data in Python.,"import matplotlib.pyplot as plt 

x = [1, 2, 3, 4, 5]
y = [2, 4, 6, 8, 10]

plt.plot(x, y)
plt.title('Line Chart') 
plt.xlabel('X-Axis') 
plt.ylabel('Y-Axis') 
plt.show()"
Create an algorithm in Python to remove duplicates from an array of integers while preserving the order of the elements.,"def remove_duplicates(arr):
  seen = set()
  result = []

  for item in arr:
    if item not in seen:
      seen.add(item)
      result.append(item)

  return result

arr = [1, 8, 10, 4, 1, 8, 8]

print(remove_duplicates(arr)) # Output: [1, 8, 10, 4]"
Create a Python program that uses a given list of words to construct a poem.,"def create_poem(words):
    poem = """"
    for word in words:
        poem += word + ""\n""

    poem += ""\nSleep, dream and beauty\nReality shatters in life\nWhere dreams forevermore dwell""
    return poem

print(create_poem([""Sleep"", ""Dream"", ""Reality"", ""Beauty"", ""Life""]))"
"Given a list of numbers, write a program in Python to select only the elements divisible by 5.","def divisible_five(nums):
    result = []
    for num in nums:
        if num % 5 == 0:
            result.append(num)
    return result"
Generate Python code to add 1 to every element of an array.,"def add_one(arr): 
    for i in range(len(arr)): 
        arr[i] += 1 
    return arr"
Write a Python script for developing a simple calculator.,"import operator

ops = {
 ""+"": operator.add,
 ""-"": operator.sub,
 ""*"": operator.mul,
 ""/"": operator.truediv
}

while True:
 print(""\nEnter 'q' to exit."")
 num1 = input(""\nEnter a number: "")
 if num1 == 'q':
 break
 op = input(""Enter an operator: "")
 num2 = input(""Enter another number: "")
 
 answer = ops[op](float(num1), float(num2))
 print(""The answer is:"", answer)"
Create a Python program to group elements of a list based on their length.,"def groupByLength(arr):
    result = {}
    for word in arr:
        if len(word) in result:
            result[len(word)].append(word)
        else:
            result[len(word)] = [word]
    return result

groupedByLength = groupByLength(['cat', 'dog', 'apple'])
print(groupedByLength)"
Create a Python function to find the maximum number in an array. The function should accept a single argument and return the maximum value in the array.,"def find_maximum(arr):
  max_val = arr[0]
  for value in arr:
    if value > max_val:
      max_val = value
  return max_val

# Usage
max_num = find_maximum([5, 8, 0, 1, 3, 9])
print(max_num)
# prints 9"
Write a function to remove the nested record from the given tuple.,"def remove_nested(test_tup):
  res = tuple()
  for count, ele in enumerate(test_tup):
    if not isinstance(ele, tuple):
      res = res + (ele, )
  return (res) "
Write a Python script to generate a random password of at least 8 characters.,"import random 
import string

def gen_random_password():
  chars = string.ascii_letters + string.digits
  password = ''.join(random.choice(chars) for _ in range(8))
  return password

print(gen_random_password())"
Generate code to remove any duplicates from a list of integers in Python.,"def remove_duplicates(lst): 
    final_list = [] 
    for num in lst: 
        if num not in final_list: 
            final_list.append(num) 
    return final_list 
    
lst = [1, 1, 2, 3, 4, 4, 5] 
print(remove_duplicates(lst))"
Code a Python function to split a sentence into an array of words.,"def splitSentence(sentence):
 words = sentence.split()
 return words

# Usage
sentence = ""Split a sentence into an array of words""
words = splitSentence(sentence)
print(words) # ['Split', 'a', 'sentence', 'into', 'an', 'array', 'of', 'words']"
Create a loop in Python that prints each item of the following list with a message:,"my_list = ['A', 'B', 'C', 'D']

for item in my_list:
    print(""The item is: {}"".format(item))"
"Generate a Python code snippet to convert a string to a list, where each word is an item in the list.","string = ""This is a test string""

list = string.split("" "")

print(list) # Output: ['This', 'is', 'a', 'test', 'string']"
Create a Python program to fetch data from an HTTPS resource.,"import requests

url = ""https://example.com/data""

# Send a GET request to the URL
r =  requests.get(url)

# Check the status of the request
if r.status_code == 200:
 data = r.json()
 # Process the fetched data
else:
 print('Error: status code {}'.format(r.status_code))"
Can you provide a Python program to generate a random integer within the range of 1 to 100?,"import random

def random_int_between_1_and_100():
  return random.randint(1, 100)"
Generate a Python script to find common elements in two lists.,"def find_common_elements(list1, list2):
    result = []
    for val in list1:
        if val in list2:
            result.append(val)
    return result

list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]

result = find_common_elements(list1, list2)
print(result)"
Create a program in Python that takes a sentence as an input and prints out the sentence in reverse.,"def reverse_sentence(sentence): 
    words = sentence.split() 
    newWords = [word[::-1] for word in words] 
    newSentence = "" "".join(newWords) 
    return newSentence

print(reverse_sentence(""Hello world!""))"
Write a Python program to generate random passwords from a list of strings.,"import random

strings = [""random"",""password"",""security"",""codes"",""aaa"",""bbb"",""ccc"", ""ddd""]
password = """"

for i in range(len(strings)):
 randomIndex = random.randint(0,len(strings) -1)
 password += strings[randomIndex]

print(""Generated Password:"", password)"
Classify the performance complexity of the following code snippet written in Python.,The performance complexity of the code snippet is O(n).
Can you create a Python script to print out the two smallest elements from an array of numbers?,"def smallest_two_elements(nums):
    min1 = min(nums)
    nums.remove(min1)
    min2 = min(nums)
    
    print(min1, min2)

smallest_two_elements([45, 24, 2, 17, 78])"
Write a Python program to generate a square matrix with random values from 0 to 9.,"import random

def matrix(size):
  matrix = [[0 for i in range(size)] for j in range(size)]
  for i in range(size):
    for j in range(size):
      matrix[i][j] = random.randint(0, 9)
  return matrix

result = matrix(4)
for row in result:
  print(row)"
Create a Python program to format a given amount of money with a given currency symbol.,"def format_money(amount, symbol):
    return f""{symbol}{amount:.2f}""

format_money(95.50, '€') # returns €95.50"
"Design a data structure in Python to store a list of cars with associated properties like name, color, and price.","class CarData:
    def __init__(self):
        self.cars = {}

    def add_car(self, name, color, price):
        car = {
            ""name"": name,
            ""color"": color,
            ""price"": price
        }
        self.cars[name] = car

    def get_car(self, name):
        if name in self.cars:
            return self.cars[name]
        return None"
Debug the provided Python code to make it run without errors.,"num_list = [1, 2, 3, 4, 5]

for num in num_list:
 print(""Square of"", num, ""is"", num*num)"
Edit the following Python program to fix the syntax error,"def fx(x):
    if x == 0:
        x += 1
    return x"
Convert a Javascript function to Python.,"def add(a, b):
    return a + b"
Optimize a Python program to count occurrences of each letter in a given string.,"from collections import Counter

def count_letters(string):
    return Counter(string)

print(count_letters(""This is a sample string""))"
Write a Python program to calculate the sum of all multiples of 3 and 5 up to a given number.,"def sum_of_multiples_of_3_and_5(num):
    sum = 0 
    for i in range(num):
        if i % 3 == 0 or i % 5 == 0:
            sum += i
    return sum

result = sum_of_multiples_of_3_and_5(20)
print(result)"
Build a generator in Python that returns a JSON string of the current time,"def time_json_string():
    t = datetime.utcnow().isoformat()
    return json.dumps({""currentTime"": t })"
Construct a Python function to calculate the sum of all elements of a given array.,"def array_sum(arr):
    s = 0
    for i in arr:
        s += i
    return s

print(array_sum([3,2,1,6,5,7,4]))"
Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.,"def No_of_Triangle(N,K):
    if (N < K):
        return -1;
    else:
        Tri_up = 0;
        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;
        Tri_down = 0;
        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;
        return Tri_up + Tri_down;"
Develop an algorithm in Python to create a Fibonacci sequence up to the nth number.,"def fibonacci(n):
  if n<0:
    print(""Incorrect input"")
  elif n==1:
    return 0
  elif n==2:
    return 1
  else:
    return fibonacci(n-1)+fibonacci(n-2)
print(""Fibonacci series up to"",n,"":"")
for i in range(1,n+1):
  print(fibonacci(i))"
"Create a Python class that simulates a bank account. The class should have methods for depositing and withdrawing money, and for displaying the account balance.","class BankAccount:
 def __init__(self):
 self.balance = 0
 
 def deposit(self, amount):
 self.balance += amount
 
 def withdraw(self, amount):
 self.balance -= amount
 
 def show_balance(self):
 print(""Your balance is $%.2f"" % self.balance)"
Write a python program to use an API and process the results.,"import requests

url = 'https://api.example.com/xyz'

# Make a request to the API
resp = requests.get(url)

# Process the response
data = resp.json()

# Do stuff with the response
for item in data:
	print(item)"
Implement a sorting algorithm in Python that sorts a given array of numbers in descending order.,"def sort_descending(list):
    sorted_list = sorted(list, reverse=True)
    return sorted_list"
Can you provide a code snippet in Python that takes a list of strings as input and sorts them based on their length?,"words = [""Hello"",""World!"",""Good"",""Morning""]

words.sort(key=len)

print(words)"
Construct a function in Python that will take a list as an argument and prompt the user to delete elements from that list.,"def delete_element(list): 
    print(""Original list: "" + str(list)) 
    element = int(input(""Please enter the element which you want to delete: ""))
    list.remove(element) 
    print(""List after deletion of element: "" + str(list))"
Write a Python function to compare two strings and check if they are equal.,"def str_compare(str1, str2):
return str1 == str2

str_compare('Hello', 'World')"
Transform the following code from Python to JavaScript.,"for (let i = 0; i < 10; i++) {
  console.log(i);
}"
Write a Python code snippet to print the sum of all even numbers between 1 to 10,"sum = 0
for i in range (1,11):
    if i % 2 == 0:
        sum += i
print(sum)"
Suggest a Python program to compute the sum of pairs of elements in a given array,"def sum_pairs(input_list):
    output_list = []
    for i in range(len(input_list)-1):
        sum = input_list[i] + input_list[i+1]
        output_list.append(sum)
    return output_list

input_list = [2, 4, 5, 10]
result = sum_pairs(input_list)
print(result)"
Suggest a Python library for web scraping.,"BeautifulSoup is a popular library for web scraping and data extraction from HTML and XML documents. It is designed to work with HTML/XML parsers like html5lib, lxml and html.parser."
Generate a program in Python count the number of words in a given sentence.,"def count_words(sentence):
    words = sentence.split(' ')
    return len(words)"
Write an algorithm in Python to find the maximum element of a given array.,"def find_max_element(arr):
  
  max = arr[0]
  
  for i in range(1, len(arr)):
    # compare current max with the next array element
    if arr[i] > max:
      max = arr[i]
  
  return max

arr = [2, 7, 1, 6, 5]
max_element = find_max_element(arr)
print(""Max element in the array:"", max_element)"
Implement an algorithm in Python to classify a given dataset into different target classes.,"import pandas as pd
from sklearn.neighbors import KNeighborsClassifier
import numpy as np
 
# Load dataset
data = pd.read_csv('dataset.csv')
X = data.iloc[:, :-1]
y = data.iloc[:, -1]
 
# Create and fit classifier
classifier = KNeighborsClassifier(n_neighbors=5)
classifier.fit(X, y)
 
# Make predictions
predictions = classifier.predict(X)
print(np.mean(predictions == y))"
Create a program in Python to merge two dictionaries into a new one.,"# Dictionaries
dict1 = {'name': 'John', 'age': 25}
dict2 = {'company': 'Google', 'city': 'New York'}

# Merge two dictionaries
dict3 = {**dict1, **dict2}

# Print the merged dictionary
print(dict3)

# Output:
# {'name': 'John', 'age': 25, 'company': 'Google', 'city': 'New York'}"
Write a function in Python that takes an array of integer values and reverses the order of the values.,"def reverse_array(arr):
  return arr[::-1]  # Returns a slice of the list in reverse order"
Create a python script to fetch data from an API,"import requests

#make the API call
response = requests.get('http://api.example.com/')

#get the data from the response
data = response.json()

#print the data
print(data)"
Create a program to generate a frequency table from a given list,"# Python3 program to find frequency table 
from collections import Counter 
def freq_table(arr):
    return dict(Counter(arr))"
Design an algorithm in Python to calculate the Euclidean distance between two points,"import math 
    
def euclidean_distance(point1, point2):
    dist = math.sqrt( (point1[0]-point2[0])**2 + (point1[1]-point2[1])**2 )
    return dist 

print(euclidean_distance([2,4], [4,8]))"
Write a Python program that takes a string as input and edits the string to remove all punctuation marks.,"import string

def remove_puncutuation(string):
    translator = str.maketrans('', '', string.punctuation)
    return string.translate(translator)

string = ""This string contains , a comma, and a % symbol.""

print(remove_puncutuation(string))"
Write a Python function that takes a list of strings as input and returns a new list containing all the strings that start with 'A',"def startWithA(list): 
	new_list = [] 
	for el in list: 
		if el[0] == 'A': 
			new_list.append(el) 
	return new_list"
Write a Python code to sort the given array.,"# Bubble sort algorithm
def sort_array(array):
    for i in range(len(array)):
        for j in range(len(array)-i-1):
            if array[j] > array[j+1]:
               array[j], array[j+1] = array[j+1], array[j]
    return array

# Sample array
array = [2, 4, 1, 3, 7, 5]

# Function call
sorted_array = sort_array(array)

# Print sorted output
print(sorted_array)"
Generate a 5-digit pin code using a Python program.,"import random
 
def generate_pin():
    # generates a 5 digit pin
    pin = """"
    for i in range(5):
        pin += str(random.randint(0,9))
    return pin
 
pin = generate_pin()
print(""Generated pin is:"", pin)"
Write a function of recursion list sum.,"def recursive_list_sum(data_list):
	total = 0
	for element in data_list:
		if type(element) == type([]):
			total = total + recursive_list_sum(element)
		else:
			total = total + element
	return total"
Write a Python program that searches for a substring in a given string.,"def search_substring(string, substring):
  if substring in string:
    return ""Substring found!""
  else:
    return ""Substring not found."""
"Construct a function in Python that takes two integers, a and b, and returns their sum.","def add_integers(a, b):
    return a + b"
Suggest a python program that implements a stack data structure.,"class Stack(object):

    def __init__(self):
        self.items = []

    def push(self, item):
        self.items.append(item)

    def pop(self):
        return self.items.pop()
    
    def is_empty(self):
        return len(self.items) == 0"
Generate a python script for creating a list containing the first 20 square numbers,"sq_list = []
n = 1
while len(sq_list) <= 19:
    sq_list.append(n*n)
    n += 1
print(sq_list)"
Optimize this Python code to reduce its run-time complexity.,"def foo(l1, l2):
    result = [i + j for i in l1 for j in l2]
    return result"
Create a web scraper to extract data from a website using Python.,"import requests
from bs4 import BeautifulSoup

url = 'https://example.com/'

response = requests.get(url)
soup = BeautifulSoup(response.text, 'html.parser')

data = soup.findAll('div', class_='data-element')

for datum in data:
 # extract data and process it
 print(datum.text)"
Create a Python program to convert a binary string to its decimal equivalent.,"def bin_to_dec(binary_string):
    decimal = 0
    for digit in binary_string:
        decimal = decimal * 2 + int(digit)
    return decimal

print(bin_to_dec('1100'))"
Generate a Python program to merge two input lists.,"def merge_lists(list1, list2):
   merged_list = list1 + list2
   return merged_list

result = merge_lists([1,2,3], [4,5,6])
print(result)"
Construct a Python program to check whether a given number is prime or not.,"def check_prime(num):
    if num == 1:
        return False
    for i in range(2,num):
        if not num % i:
            return False
    return True

result = check_prime(13)
print(result)"
Write a Python program to find the maximum of two numbers provided by the user.,"x = int(input(""Enter the first number: ""))
y = int(input(""Enter the second number: ""))

maximum = x if x > y else y

print(""The maximum of two numbers is"", maximum)"
Write a Python class to model a 2-dimensional vector with appropriate methods for addition and subtraction.,"class Vector2D:
  def __init__(self, x, y):
    self.x = x
    self.y = y
  
  def add(self, other):
    self.x += other.x
    self.y += other.y

  def subtract(self, other):
    self.x -= other.x
    self.y -= other.y"
Write a Python script to generate a random password of a given length.,"import string
import random

def random_password_generator(length):
 chars = string.ascii_letters + string.digits + string.punctuation
 return ''.join((random.choice(chars) for i in range(length)))

print(random_password_generator(length))"
Write a function to split a string at uppercase letters.,"import re
def split_upperstring(text):
 return (re.findall('[A-Z][^A-Z]*', text))"
Create a Python function that takes two numbers and returns the Greatest Common Divisor (GCD) of the two numbers.,"def gcd(x, y):
    while y != 0:
        x, y = y, x % y
    return x"
Create a project using Python with automated testing. The project should include tests that verify the correct functionality of the code.,"# import the necessary libraries
import unittest

# The function to be tested
def add(a,b):
 return a+b

# Create the test class
class TestAdd(unittest.TestCase):

 def test_add(self):
 # Test that add works correctly
 self.assertEqual(add(2,3), 5)
 self.assertEqual(add(4,5), 9)

if __name__ == '__main__':
 unittest.main()"
Create a Python script that calculates the area of a triangle by taking the base and height as user input.,"base = float(input('Enter the base:'))
height = float(input('Enter the height:'))

def areaOfTriangle(base, height):
 return 0.5 * base * height

print(areaOfTriangle(base, height))"
How can you create a matrix in Python?,"# Create a matrix using a list of lists
matrix = [[1, 2, 3],
          [4, 5, 6],
          [7, 8, 9]]

# Create a matrix using Numpy
import numpy as np 
matrix = np.array([[1, 2, 3],
                    [4, 5, 6],
                    [7, 8, 9]])"
Create a Python script to generate a calendar representation of a given month.,"import calendar

year = 2020
month = 4

# create a calendar of the given month and year
cal = calendar.month(year, month)

# print it
print(cal)

# Output
     April 2020
Mo Tu We Th Fr Sa Su
       1  2  3  4  5
 6  7  8  9 10 11 12
13 14 15 16 17 18 19"
Write a Python program to check if two strings are a rotation of each other.,"if len(string1) == len(string2) and string1 in string2*2:
    print(""The strings are a rotation of each other"")
else:
    print(""The strings are not a rotation of each other"")"
Generate a function in Python that takes a number as input and prints out the n-th Fibonacci number.,"def nthFibonacciNumber(n): 
    if n==0: 
        return 0
    elif n==1: 
        return 1
    else: 
        return nthFibonacciNumber(n-1)+nthFibonacciNumber(n-2)

result = nthFibonacciNumber(6)
print(result)"
Write a python function to capitalize first and last letters of each word of a given string.,"def capitalize_first_last_letters(str1):
     str1 = result = str1.title()
     result =  """"
     for word in str1.split():
        result += word[:-1] + word[-1].upper() + "" ""
     return result[:-1]  "
Create a program in Python which takes a string and prints out all the words present in the string in alphabetical order.,"def sortString(string):
    words = string.split("" "")
    words.sort()
    return words
    
print(sortString(string))"
Create a data structure in Python that can store 10 strings of different lengths.,"# Create an empty list to store 10 strings
my_list = []

# Loop to prompt user to enter 10 different strings 
for i in range(10):
    input_string = input(""Enter a string: "")
    my_list.append(input_string)

print(my_list)"
Design an algorithm in Python to count all unique elements in a list.,"def count_unique(lst):
    unique_count = 0
    seen = set()
    for element in lst:
        if element not in seen:
            unique_count += 1
            seen.add(element)
    return unique_count"
Generate a spreadsheet to model a sine wave using Python.,"import pandas as pd
import numpy as np

# Create spreadsheet
df = pd.DataFrame()

# Add column of x-values
x_values = np.arange(start=0,stop=2*np.pi,step=0.1)
df['x'] = x_values

# Add column of y-values
y_values = np.sin(x_values)
df['y'] = y_values

# Save spreadsheet
df.to_csv('sine-wave.csv', index=False)"
Analyze a given Python code and write a function that checks if a given number is prime.,"def primeCheck(num):
 if num > 1:
 for i in range(2, num):
  if (num % i) == 0:
   return False
 else:
  return False
 return True"
Create an object-oriented program in Python to represent a game.,"class Game:
 def __init__(self):
 self.players = []
 self.board = None

def add_player(self, player):
 self.players.append(player)

def set_board(self, board):
 self.board = board

def start(self):
 for player in self.players:
 player.turn()

def end(self):
 for player in self.players:
 player.game_over()"
Create a Python program to create a stack with basic push and pop operations.,"""""""
Create a stack with basic push and pop operations
""""""

class Stack:
    def __init__(self):
        self.stack = []
    def push(self, item):
        self.stack.append(item)
    def pop(self):
        return self.stack.pop()
    def peek(self):
        return self.stack[-1]
    def is_empty(self):
        return len(self.stack) == 0"
Generate a Python function that checks to see if a given string is a palindrome.,"def is_palindrome(str):
    reversed_str = """"
    for i in range(len(str) - 1, -1, -1): 
        reversed_str += str[i]

    if str == reversed_str: 
        return True
    else: 
        return False

string = ""madam""
result = is_palindrome(string)
print(result)"
Create a Python script that classifies an incoming sentence as either positive or negative.,"import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer

def classify_sentence(text):
    sid = SentimentIntensityAnalyzer()
    ss = sid.polarity_scores(text)
    if ss['compound'] >= 0.05:
        return 'positive'
    elif ss['compound'] <= -0.05:
        return 'negative'
    else:
        return 'neutral'"
Optimize an existing python program to improve its processing speed.,"def my_func(x): 
    x += x << 1  # 2x faster than adding 1
    for i in range(1000000 // 2):  # divide loop by 2
        x += x << 2 
    return x  # no extra operation needed on return value as it is already doubled twice already."
Generate a Python function for computing a factorial.,"def factorial(n):
    if n == 0:
        return 1
    return n * factorial(n-1)"
Write a function to sort a given mixed list of integers and strings.,"def sort_mixed_list(mixed_list):
    int_part = sorted([i for i in mixed_list if type(i) is int])
    str_part = sorted([i for i in mixed_list if type(i) is str])
    return int_part + str_part"
Build a Python script to compare two strings and determine which string is the longest.,"def longest(str1, str2):
    if len(str1) > len(str2):
        return str1
    elif len(str2) > len(str1):
        return str2
    else:
        return 'Strings are equal length.'

str1 = 'Hello'
str2 = 'World'

print(longest(str1, str2))
# Output: World"
Construct a program in Python which reverses each word of a given sentence.,"# Function to reverse each word
def word_reverse(s) : 
    # Splitting each word
    words = s.split() 
    rev_str = """" 
    for word in words: 
        # Reversing each word
        rev_str += word[::-1] + "" ""
    return rev_str"
Provide a Python program that sorts a list of strings based on the length of the strings.,"my_list = [""banana"", ""apple"", ""watermelon""]
my_list.sort(key=len)

# my_list is now [""apple"", ""banana"", ""watermelon""]"
Create a Python script to generate random passwords.,"import random
import string

def generate_password(length):
 characters = string.ascii_letters + string.digits + string.punctuation
 return ''.join(random.choice(characters) for _ in range(length))

length = int(input('Enter password length: '))
password = generate_password(length)
print(password)"
"Create a Python script to calculate the average of the three numbers 62, 72, and 85.","# Calculate the average of three numbers

def calculate_average(num1, num2, num3):
    sum = num1 + num2 + num3
    average = sum / 3 
    return average

number1 = 62
number2 = 72
number3 = 85

print(""The average is:"", calculate_average(number1, number2, number3))"
Generate a Python program to give an output as true if the given string contains at least two distinct characters,"def containsTwoDistinctChars(string):
    distinctChars = set()
    for char in string:
        distinctChars.add(char)
    
    return len(distinctChars) >= 2

print(containsTwoDistinctChars(""AbcdABC""))"
Generate a Python program to print each letter in a word on a separate line.,"def print_letters(word):
    for letter in word:
        print(letter)"
Create an algorithm in Python to separate numbers below 10 and above 5.,"below_ten = [] # Separated numbers
above_five = [] # Separated numbers

# Iterate over array
for n in array:
    if n > 5:
        above_five.append(n)
    else:
        below_ten.append(n)

# Print results
print(""Below 10: "", below_ten)
print(""Above 5: "", above_five)"
Develop a Python code to find the longest palindromic substring,"def find_longest_palindrome(word):
    max_length = 0
    max_start = 0
    for i in range(len(word)):
        for j in range(0, i):
            sub = word[j:i+1]
            if sub == sub[::-1] and len(sub) > max_length:
                max_start = j
                max_length = len(sub)
    print(word[max_start:max_start + max_length])"
Write a Python program to create a histogram of the data in the given array.,"import matplotlib.pyplot as plt

data = [2, 3, 5, 6, 8, 4, 2, 4, 6, 9]

plt.hist(data)
plt.title(""Histogram of Data"")
plt.xlabel(""Data Values"")
plt.ylabel(""Frequency"")
plt.show()"
Write a Python code that prints out all the even numbers between 2 and 100.,"for i in range(2, 101):
    if i % 2 == 0:
        print(i)"
Develop a python program for predicting a movie's rating based on its reviews.,"#Code
num_reviews = len(reviews)
num_positive_reviews = 0

for review in reviews:
    if 'great' in review:
        num_positive_reviews +=1

rating = num_positive_reviews / num_reviews #Rating  
print(rating) #Prints the rating"
Write a python program to transform input set of numbers into a list of tuples.,"[(1, 2), (3, 4), (5, None)]"
Develop a program using Python to process a PDF document.,"import PyPDF2

# open the PDF file
pdf_file = open('sample.pdf', 'rb')

# create a PDF reader object
pdf_reader = PyPDF2.PdfFileReader(pdf_file)

# get the number of pages
num_pages = pdf_reader.numPages

# iterate over all pages
for page_num in range(num_pages):
    # get the page
    page = pdf_reader.getPage(page_num)
    # extract text
    text = page.extractText()
    print(text)"
Generate a python function to calculate the total cost of a purchase given prices and quantities.,"def calculate_total_cost(prices, quantities):
 total = 0
 for price, quantity in zip(prices, quantities):
 total += price * quantity
 return total"
Produce a Python code section to calculate the average value for all elements of a given array.,"array = [2, 7, 5, 4]

total = 0
for num in array:
 total += num
average = total/len(array)

print(""The average of the array is:"", average)"
Normalize the following text using Python.,"text = ""the Cat in the hat""
text = text.replace('  ', ' ').strip()
print(text)"
Create a Python program that takes a positive integer as input and returns the closest Fibonacci number.,"def closest_fibonacci(number):
    a, b = 0, 1
    while b < number:
        a, b = b, a + b
    return a

number = int(input('Enter a positive integer: '))
print(""The closest Fibonacci number is"", closest_fibonacci(number))"
Generate a unique 32-bit number in Python.,"import uuid

unique_number = uuid.uuid4().int
print(unique_number)"
Design a Python program for finding the median of a given list of numbers.,"def find_median(lst):
    lst.sort()
    if len(lst)%2 == 0:
        median1 = lst[len(lst)//2]
        median2 = lst[len(lst)//2 - 1]
        median = float(median1 + median2) / 2
    else:
        median = lst[len(lst)//2]
    return median

result = find_median([7, 4, 5, 2, 10])
print(result)"
Modify the given Python code to optimize efficiency.,"def calculate_sum(nums):
    return sum(nums)"
Translate the following code from JavaScript to Python:,"def add_two(num):
    return num + 2"
Write a Python program to check if a given array contains a pair of elements whose sum is equal to a given number.,"def check_pair(arr, sum):
    s = set()
    for item in arr:
        target = sum - item
        if(target in s):
            return True
        s.add(item)
    return False

print(check_pair([2, 4, 6, 5], 8))"
Generate an algorithm in Python that reverses the order of elements in an array.,"def reverseArray(arr): 
    start = 0
    end = len(arr) - 1
    while start < end: 
        arr[start], arr[end] = arr[end], arr[start] 
        start += 1
        end -= 1
    return arr"
Create an algorithm in Python to fill every element in a matrix with its own column number.,"matrix = [[1, 2, 3], 
          [4, 5, 6], 
          [7, 8, 9]]

for row_index, row in enumerate(matrix):
    for col_index, _ in enumerate(row):
        matrix[row_index][col_index] = col_index + 1

print(matrix)"
"Create a Python program that takes in a string and counts how many vowels are in it, regardless of case.","def count_vowels(word):
  answer = 0
  for letter in word:
    if letter.lower() in 'aeiou':
      answer += 1
  return answer

print(count_vowels('amazing'))"
Generate a python program to parse and extract information from the following input,"def parse(input):
    output = []
    for d in input:
        for key, value in d.items():
            output.append({key: value})
    return output"
Modify the following Python code to remove any duplicate elements in an array.,myList = list(set(myList))
Write a Python program to calculate the hypotenuse of a right-angled triangle.,"import math

# calculate the hypotenuse
def calc_hypotenuse(a, b):
    hyp = math.sqrt(a**2 + b**2)
    print(""The length of the hypotenuse is"", hyp)

# input lengths of triangle sides
a = 5
b = 12

# call the function
calc_hypotenuse(a, b)"
Write a function that generates a random 5-letter string in Python.,"import string
import random

def random_string():
    letters = string.ascii_letters
    return ''.join(random.choice(letters) for i in range(5))

result = random_string()
print(result)"
"Create a Python list comprehension to get the squared values of a list [1, 2, 3, 5, 8, 13].","[x*x for x in [1, 2, 3, 5, 8, 13]]"
"Using Docker, create a container with Python 3 installed.",docker run -it --name python3 -v /path/to/local/project:/path/to/container/project -p 80:80 python:3
Rewrite the following code in Python to print a 5x5 matrix of random integers between 0 and 4.,"import numpy as np

x = np.random.randint(0,5,(5,5))
print(x)"
"Create an asynchronous function in Python for processing a list of tasks. The task should complete one item from the list, and then pass that item to another function to be processed.","async def process_tasks(tasks, fn):
 for task in tasks:
 await fn(task)

def process_task(task):
 # Do something with task
 print(task)

my_tasks = ['task_1', 'task_2', 'task_3']

asyncio.run(process_tasks(my_tasks, process_task))"
Create a Python 3 program that filters a list of numbers. The program should filter out any numbers greater than 10.,"numbers = [20, 5, 2, 15, 7, 10]
numbers = [x for x in numbers if x <= 10]
print(numbers)"
Create a Python program for calculating the area of a given triangle.,"def triangleArea(a, b, c): 

    # calculate the semi-perimeter 
    s = (a + b + c) / 2

    # calculate the area 
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5

    return area"
Modify the existing python program to fulfill the following purpose,"def most_frequent(lst):
    max = 0
    frequent = lst[0]
    for item in lst:
        freq = lst.count(item)
        if freq > max:
            max = freq
            frequent = item
    return frequent"
Construct a python program that randomly swaps two elements within a list of numbers.,"import random

# input list
data_list = [1, 2, 3, 4, 5]

# choose two random indices
i, j = random.sample(range(len(data_list)), 2)

# store the values before swapping
a = data_list[i]
b = data_list[j]

# swap two elements in a list
data_list[i] = b
data_list[j] = a

# print the list after swapping
print(data_list)"
Create a Python program that takes a list of integers as an input and returns a dictionary with keys being the numbers and values being the frequency of those numbers in the list.,"def counting(nums):
    result={}
    for num in nums:
        if num in result:
            result[num]+=1
        else:
            result[num]=1
    return result

nums=[1, 3, 5, 6, 1, 2, 5, 3]
result=counting(nums)
print(result)
# Output: {1: 2, 3: 2, 5: 2, 6: 1, 2: 1}"
"In Python, write a program to calculate the area of a triangle when the base and height are given.","def triangle_area(base, height):
 return (base * height) / 2

triangle_area(10, 5)  # 25.0"
Write a code optimization code that reduces the number of lines of code in a given Python script.,"def count_words(string):
    counts = { }
    for w in string.split():
        counts[w] = counts.get(w, 0) + 1
    return counts"
Write a function to calculate the sum of all digits of the base to the specified power.,"def power_base_sum(base, power):
    return sum([int(i) for i in str(pow(base, power))])"
Write a function to find all anagrams of a string in a given list of strings using lambda function.,"from collections import Counter 
def anagram_lambda(texts,str):
  result = list(filter(lambda x: (Counter(str) == Counter(x)), texts)) 
  return result"
Create a web scraper with Python and Beautiful Soup to scrape data from a single webpage.,"import requests
from bs4 import BeautifulSoup

url = 'http://example.com/page'

response = requests.get(url)

soup = BeautifulSoup(response.text, 'html.parser')

results = soup.find_all('div', {'class': 'result'})

for result in results:
 title = result.find('h2').text
 description = result.find('p').text 
 print(title, description)"
"Given some code, identify the type of the code written.",The code written is a combination of Python and logic control. It is a conditional statement which checks whether x is equal to y and adds one to z if this is true.
Generate Python code to calculate the sum of the elements in a given list.,"list = [1,4,8,10]

def calculate_sum(list):
 sum = 0
 for number in list:
 sum += number
 return sum

sum = calculate_sum(list)
print(sum) # Output: 23"
What is a Python script to list the full path of all directories in a directory?,"import os

path = "".""

for dirName, subdirList, fileList in os.walk(path):
 print(os.path.abspath(dirName))"
Create an automated program that converts a given number of dollars to Canadian currency using Python.,"# define the currency ratio
usd_to_cad = 1.33

# get user input
usd_amount = float(input('Enter the amount in USD: '))

# convert USD to CAD
cad_amount = usd_amount * usd_to_cad

# print the amount in CAD
print('The amount in CAD is', cad_amount)"
"Write a Python program to split a list into two parts, where the size of the first part is determined by the user.","def split_list(lst, size):
    part1 = lst[:size]
    part2 = lst[size:]
    return part1, part2

# example
my_list = [1, 2, 3, 4, 5, 6, 7]
part1, part2 = split_list(my_list, 3)
print(part1) # [1, 2, 3]
print(part2) # [4, 5, 6, 7]"
Read the following pseudocode and generate a Python program to complete the given task.,"numbers = [1, 2, 3, 4, 5]
 
numbers.reverse()
 
for num in numbers:
    print(num)"
Write a Python program that determines whether the given string is a palindrome.,"def is_palindrome(string):
  if len(string) <= 1:
    return True
  else:
    letter_1 = string[0]
    letter_2 = string[-1]
    if letter_1 != letter_2:
      return False
    else:
      new_word = string[1:-1]
      return is_palindrome(new_word)"
Construct a Python dictionary based on the following data,"dict = {
    ""car"" : ""Ford"", 
    ""bike"" : ""Honda""
}"
Divide two numbers without using the divide operator in Python.,"def divide_without_operator(a, b):
    return a // b + (a % b != 0)

print(divide_without_operator(9, 3))"
Create a Python list comprehension to return all numbers divisible by 3 and 5 that are smaller than 10,[number for number in range(10) if number % 3 == 0 and number % 5 == 0]
Parse the following JSON string into a Python dictionary.,"import json

data = '{""name"":""John"",""age"":30,""city"":""New York""}'

parsed_data = json.loads(data)
print(parsed_data) # {'name': 'John', 'age': 30, 'city': 'New York'}"
Create a Python script to print the first n even numbers.,"n = 10

for i in range(1, n+1):
 if i % 2 == 0:
 print(i)"
Create a program in Python for ASCII conversion.,"def ascii_conversion(string):
 return ''.join([f'{ord(c):08b}' for c in string])

print(ascii_conversion(""Hello World""))"
"Create a Python class for an employee with variable type member fields of name, age, and salary.","class Employee:
    def __init__(self, name, age, salary):
        self.name = name
        self.age = age
        self.salary = salary"
Create a graphql query in python to retrieve all the books stored in a database.,"def books_query():
    books_query = '''
    query {
        books {
            id
            title
            author
            published_date
        }
    }
    '''
    return books_query"
Write a function to filter a dictionary based on values.,"def dict_filter(dict,n):
 result = {key:value for (key, value) in dict.items() if value >=n}
 return result"
Write a function to find minimum of two numbers.,"def min_of_two( x, y ):
    if x < y:
        return x
    return y"
Make a program in Python,"# print hello world
print(""Hello World!"")"
Create a Python function that takes a string as input and returns a dictionary that counts the frequency of every character.,"def char_freq(s):
    freq = dict()
    for i in s:
        if i in freq:
            freq[i] += 1
        else:
            freq[i] = 1
    return freq

string = 'hello'
result = char_freq(string)

print(result) # {'h': 1, 'e': 1, 'l': 2, 'o': 1}"
Create a shell script that runs a Python program and prints out the results.,"#!/bin/bash

python program.py ""example input""
output=$(python program.py ""example input"")

echo $output"
Implement a cost function with two parameters in Python.,"def cost_function(x, y):
    return (x**2 + y**2)"
Replace a string in the following python program.,"string = ""Hello, world!""
substring = ""world""
substitution = ""Python""

print(string.replace(substring, substitution))"
Create a shell script to run a Python program.,"#! /bin/bash
python my_program.py"
Construct a Python script that uses regular expressions to find phone numbers in a text.,"import re

text = 'The following numbers belong to us: 888-555-0000, +1-217-543-1000.'

# Find all phone numbers
numbers = re.findall(r'\+?\d[\d -]{8,12}\d', text)

# Output
print(numbers)"
Create a web-scraping function in Python to extract the text content from any website.,"import requests
from bs4 import BeautifulSoup

def scrape_text(url):
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')
    texts = soup.find_all(text=True)
    return ' '.join(texts)
    
scraped_text = scrape_text('https://example.com')
print(scraped_text)"
Generate a Python program to check if three given numbers are in the range 10 and 20 inclusive or not.,"def is_in_range(num1, num2, num3): 
  
    # Using not operator , NOT 
    return ((10 <= num1 <= 20) and  
            (10 <= num2 <= 20) and 
            (10 <= num3 <= 20))"
Write a python program that selects five random elements from a list and prints them.,"import random

my_list = [1, 3, 5, 8, 7, 2, 10, 4, 6, 9]
random.shuffle(my_list)

for i in range(5):
    print(my_list[i])"
Generate a python program that removes all whitespace from a string.,"def remove_whitespace(x):
   return x.replace("" "", """")"
Write a Python function to determine whether a number is a prime or a composite number.,"def is_prime(n):
   if n <= 1:
      return False
   for i in range(2, int(n**0.5) + 1):
      if n % i == 0:
         return False
   return True"
"Develop an API in Python that takes in two strings and returns true if they are anagrams, and false otherwise.","# anagram checker

def check_anagrams(str1, str2):
    if sorted(str1) == sorted(str2):
        return True 
    else: 
        return False 
  
# Driver code 
str1 = ""listen""
str2 = ""silent""

if(check_anagrams(str1, str2)): 
    print(""The strings are anagrams."")  
else: 
    print(""The strings aren't anagrams."")"
Create a program in Python to find the number of occurrences of an element x in a list y.,"def count_x(x, y):
    count = 0
    for i in y:
        if i == x:
            count += 1
    return count"
Improve the following function by using Python built-in functions:,"def sum_array(array):
    '''A function that takes in an array of numbers and returns the sum of all the numbers'''
    return sum(array)"
Write a Python program that generates a random string made up of five lowercase ASCII characters,"import random

def generate_random_string():
   characters = 'abcdefghijklmnopqrstuvwxyz'
   random_string = ''
   for i in range(5):
       random_string += random.choice(characters)
   return random_string

result = generate_random_string()
print(result)"
Write a Python program to find the lowest common multiple of two numbers.,"def lowest_common_multiple(x, y): 
    if x > y:
        greater = x 
    else: 
        greater = y 

    while(True): 
        if((greater % x == 0) and (greater % y == 0)): 
            lcm = greater 
            break
        greater += 1

    return lcm 

print(lowest_common_multiple(x, y))"
Generate a function in Python that checks if an entered number is even or odd and returns a string with the type.,"def check_type(num):
    if num % 2 == 0:
        return 'even'
    else:
        return 'odd'"
Create a Python program to find the sum of all the values in a dictionary,"def sum_values(d):
    sum = 0
    for value in d.values():
        sum += value
    return sum

total = sum_values(d)
print(total) # 60"
Create a Python program which returns the difference between the two largest numbers in a given list,"def maxDifference(arr): 
    n = len(arr) 
    max_diff = arr[1] - arr[0] 
  
    for i in range(0, n): 
        for j in range(i + 1, n): 
            if (arr[j] - arr[i] > max_diff): 
                max_diff = arr[j] - arr[i] 
    return max_diff 
  
arr = [3, 8, 9, 6, 4, 10] 
print( maxDifference(arr))"
Design a natural language processing model in Python to find  patterns in text data.,"import re
from nltk import tokenize

input_text = 'string with several words'

tokens = tokenize.word_tokenize(input_text)
for token in tokens:
  if re.search('\w+', token):
      print(token)"
"Optimize the following Python code:

def count_dups(arr):
  dt = {} 
  count = 0 
 
  for x in arr:
    if x in dt:
      count += 1 
    else:
      dt[x] = 1 
 
  return count","def count_dups(arr):
  dt = {} 
  count = 0 
 
  for x in arr:
    count += x in dt
    dt[x] = 1 
 
  return count"
Write a function to drop empty items from a given dictionary.,"def drop_empty(dict1):
  dict1 = {key:value for (key, value) in dict1.items() if value is not None}
  return dict1"
"Using the given Python code, update its style using pep 8 conventions.","def factorial(x):
    if x <= 1:
        return 1
    return x * factorial(x - 1)"
Write a Python program to classify a given array of numbers into even number and odd number arrays.,"# Create empty lists to store odd and even elements
odd_elements = []
even_elements = []

# Iterate through the array
for element in my_array:
    # Check if the element is even or odd
    if element % 2 == 0:
        even_elements.append(element)
    else:
        odd_elements.append(element)

print(odd_elements)
print(even_elements)"
"Generate a script in Python to generate a random password that has a minimum of 8 characters, including special characters and numbers.","import string
import random

# Generate 8 random characters, including special characters and numbers
size = 8
password = ''.join(random.choices(string.ascii_uppercase + string.ascii_lowercase + string.digits + string.punctuation, k=size))

print(password) # Output: eu$y6c17"
Write a python function to calculate the number of odd days in a given year.,"def odd_Days(N): 
    hund1 = N // 100
    hund4 = N // 400
    leap = N >> 2
    ordd = N - leap 
    if (hund1): 
        ordd += hund1 
        leap -= hund1 
    if (hund4): 
        ordd -= hund4 
        leap += hund4 
    days = ordd + leap * 2
    odd = days % 7
    return odd "
Generate a program to take a sentence and capitalize the first letter of each word in the sentence.,"def capitalize_sentence(sentence):
  words = sentence.split(' ')
  capitalized_words = [word.capitalize() for word in words]
  return ' '.join(capitalized_words)

# Driver Code
sentence = 'i am learning python'

result = capitalize_sentence(sentence)

print(result) # prints ""I Am Learning Python"""
Write a function to find the directrix of a parabola.,"def parabola_directrix(a, b, c): 
  directrix=((int)(c - ((b * b) + 1) * 4 * a ))
  return directrix"
Create a class hierarchy with a base class and two derived classes using inheritance in python.,"class Base:
    # Base class
    def __init__(self, value):
        self.value = value

class Derived1(Base):
    # First derived class
    def __init__(self, value, name):
        super().__init__(value)
        self.name = name

class Derived2(Base):
    # Second derived class
    def __init__(self, value, age):
        super().__init__(value)
        self.age = age"
Generate a Python class that represents a Rectangle and a Square.,"class Rectangle:
    def __init__(self, width, height):
        self.width = width
        self.height = height

    def get_area(self):
        return self.width * self.height


class Square(Rectangle):
    def __init__(self, side_length):
        self.width = side_length
        self.height = side_length"
Create a new python class called Person that takes a name and age as parameters.,"class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age"
Write a Python class with methods for printing strings and computing the length of a string.,"class MyString:
    def __init__(self):
        self.string = """"
 
    def set_string(self, string):
        self.string = string
 
    def get_string(self):
        return self.string
 
    def print_string(self):
        print(self.string)
 
    def get_length(self):
        string_length = len(self.string)
        return string_length"
Generate a program in Python that counts the number of words in a string.,"def count_words(string):
    words = 0
    for x in string.split():
        words += 1
    return words"
Develop a Python function that takes a list of numbers and returns the minimum value.,"def findMinValue(numlist): 

    minVal = numlist[0] 
  
    for i in numlist: 
        if i < minVal: 
            minVal = i 
  
    return minVal 

numlist = [10, 5, 20, -20, 30] 
print(findMinValue(numlist))"
Create a Python program that prints a multiplication table of the given number.,"def multiplication_table(number): 
    for i in range(1, 11): 
        print(number, 'x', i, '=', number*i) 

multiplication_table(number)"
Create a Python class which can be instantiated into an object. The object should take two parameters in its construction and store them as separate instance variables.,"class SampleObject:
    def __init__(self, param1, param2):
        self.param1 = param1
        self.param2 = param2

obj = SampleObject(1, 2)"
Create a Python program to extract the first three characters of a string.,"result = string[:3]
print(result) #pro"
Write a Python function to flatten a nested list of lists into a single list containing all elements.,"def flatten_list(nested_list):
    return [item for sublist in nested_list for item in sublist]"
Write a function for computing square roots using the babylonian method.,"def babylonian_squareroot(number):
    if(number == 0):
        return 0;
    g = number/2.0;
    g2 = g + 1;
    while(g != g2):
        n = number/ g;
        g2 = g;
        g = (g + n)/2;
    return g;"
Create a basic Python program that prints a message in the console every 3 seconds.,"import time

while True:
    print 'This message is printed every 3s'
    time.sleep(3)  # Sleep for 3 seconds"
Implement a linear search algorithm in Python to search for an element in an array.,"def linear_search(arr, x): 
    for i in range(len(arr)): 
        if arr[i] == x: 
            return i 
    return -1
  
arr = [2, 3, 4, 10, 40] 
x = 10

result = linear_search(arr, x) 
if result == -1: 
    print(""Element is not present in array"") 
else: 
    print(""Element is present at index"", result)"
Write a Python script that normalizes given input strings.,"import re
s = ""Hello,  world    !  How are you?""
s = re.sub(' +', ' ', s)
print(s)

# Output
# 'Hello, world! How are you?'"
Build a Python program that identifies valid Leap Years.,"def is_leap(year):
    if (year % 400 == 0): 
        return True
    if (year % 100 == 0):  
        return False
    if (year % 4 == 0): 
        return True
    else:
        return False
  
year = int(input())
print(is_leap(year))"
Create a function in Python that takes an array of numbers and prints out its maximum value.,"def print_max(arr):
 max_val = max(arr)
 print(max_val)
 
print_max([1, 4, 8, 9, 10])"
Develop a Python Program to sort an array without using any built-in functions.,"def sort_array(array): 
    for i in range(len(array)): 
        for j in range(i+1, len(array)): 
            if array[j] < array[i]: 
                array[j], array[i] = array[i], array[j] 
  
    return array"
"Write a Python program that prints out the number of times the character ""e"" occurs in the string given.","def count_letter(string, letter):
	""""""Function to count the number of specified letter in the string""""""
	count = 0
	for char in string:
		if char == letter:
			count += 1
	return count

# Driver code 
string = ""this is a sample sentence""
print(count_letter(string, 'e'))"
Write a Python code to check if the given number is prime.,"def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, n//2 + 1):
        if n % i == 0:
            return False
    return True

if is_prime(23):
    print('The given number is prime')
else:
    print('The given number is not prime')"
"Given a Python dictionary, print out the keys and values that are duplicated.","for key, value in my_dict.items():
    if my_dict.values().count(value) > 1:
        print(key, value)"
Compose a python script to create a bar chart.,"import matplotlib.pyplot as plt
 
# x-axis values 
x = [4, 6, 3, 7, 2] 

# Y-axis values 
y = [0, 2, 3, 4, 5] 

# Function to plot the bar
plt.bar(x, y)

# Naming the x-axis 
plt.xlabel('x - axis')
# Naming the y-axis 
plt.ylabel('y - axis')
# Writing a title to the graph
plt.title('Bar Chart') 
# Show the plot
plt.show()"
Find the frequency of elements in a given list in Python.,"from collections import Counter

given_list = [1, 1, 2, 3, 3, 3, 4, 4, 5]

my_dict = Counter(given_list)

print(my_dict) # output: Counter({3: 3, 4: 2, 1: 2, 2: 1, 5: 1})"
Develop a function in Python to find the largest two numbers in a given array.,"def find_largest_two(input_array):
    largest1, largest2 = -float(""inf""), -float(""inf"")
    if len(input_array)<2:
        return
    for el in input_array:
        if el > largest1:
            largest2 = largest1
            largest1 = el
        elif el > largest2:
            largest2 = el
    return largest1,largest2"
Write a Python program using NumPy to calculate the dot product of two vectors.,"import numpy as np

x = np.array([3, 4, 5])
y = np.array([2, 6, 4])

dot_product = np.dot(x, y)

print(dot_product) # 46"
Can you design a function in Python which takes two string arguments and checks that two strings are anagrams or not?,"def is_anagram(str1, str2):
    if (len(str1) != len(str2)):
        return False
    
    list1 = sorted(list(str1)) 
    list2 = sorted(list(str2)) 
  
    for i in range(0, len(str1)): 
        if (list1[i] != list2[i]): 
            return False
  
    return True"
Write a Python program for finding the maximum of 3 numbers.,"def max_of_three(a, b, c):
  if (a > b) and (a > c):
    greatest = a
  elif (b > a) and (b > c):
    greatest = b
  else:
    greatest = c
  return greatest

print(""Max is: "", max_of_three(4, 7, 6))"
Create a python code to check if an integer is a power of two,"def isPowerOfTwo(number):
    return (number > 0) and ((number & (number - 1)) == 0)

print(isPowerOfTwo(16))"
Create a dictionary in python from a comma-separated value string.,"def csv_to_dict(s):
    data_dict = {}
    # split the string into list of elements
    elements = s.split(',')
    
    # iterate through the list
    for i in range(0, len(elements), 2):
        # add each element as a key to the dictionary
        data_dict[elements[i]] = elements[i+1]
    
    # return the dictionary
    return data_dict"
Rewrite the given code to use dictionaries instead of switch statements in Python.,"def convert_letter_grade(grade):
    grades = {
        'A': 4.0,
        'B': 3.0,
        'C': 2.0,
        'D': 1.0
    }
    return grades[grade]"
Write a Python program to calculate the entropy of a given dataset.,"def entropy(dataset):
    counts = {}
    entropy = 0
    for i in dataset:
        if i in counts:
            counts[i] += 1
        else:
            counts[i] = 1
    for i in counts:
        p = counts[i]/len(dataset)
        entropy -= p*np.log2(p)
    return entropy

entropy([1,1,1,1,1,1,2,2,2,2,3,3])"
Construct a Python program to sort a list of strings by their length in ascending order.,"def sort_by_length(string_list):
    return sorted(string_list, key=len)"
Write a function in Python that returns the maximum element in the given list.,"def get_max_elem(arr):
    max_elem = arr[0]
    for elem in arr:
        if elem > max_elem:
            max_elem = elem
    return max_elem
 
arr = [1, -2, 3, 4]
max_elem = get_max_elem(arr)
print(max_elem) # Output: 4"
Create a python program to delete all items from a dictionary.,"d = {'a':1, 'b':2, 'c':3}

# Using the clear() method
d.clear()

print(d) # Prints an empty dictionary"
Create a virtual environment in Python using Pipenv.,"pip install pipenv
pipenv install 
pipenv shell"
Write a function to find the longest common prefix in the given set of strings.,"def common_prefix_util(str1, str2): 
	result = """"; 
	n1 = len(str1) 
	n2 = len(str2) 
	i = 0
	j = 0
	while i <= n1 - 1 and j <= n2 - 1: 
		if (str1[i] != str2[j]): 
			break
		result += str1[i] 
		i += 1
		j += 1
	return (result) 
def common_prefix (arr, n): 
	prefix = arr[0] 
	for i in range (1, n): 
		prefix = common_prefix_util(prefix, arr[i]) 
	return (prefix) "
Create a function in Python to sort strings in alphabetical order.,"def sort_strings(strings):
    strings.sort()
    return strings

strings = ['abc', 'bac', 'bca', 'axy', 'axz']

print(sort_strings(strings))"
Can you write a Python function to determine if a supplied number is prime?,"def is_prime(num):
    """"""Check if the given number is prime.

    Args:
        num (int): A number to check

    Returns:
        bool: True if num is prime, False otherwise.
    """"""

    if num < 2: 
        return False

    for i in range(2, num):
        if (num % i) == 0:
            return False
    return True

num = 20
result = is_prime(num)
print(f""Is {num} prime? {result}"")"
Create a Python Flask application for solving a linear equation. The application should have an endpoint that receives an equation as input and returns the solution as output.,"from flask import Flask, request
from sympy import *

app = Flask(name)
x = Symbol('x')

@app.route('/solve', methods=['POST'])
def solve():
 equation = request.json['equation']
 solution = solve(equation, x)
 return {'solution': str(solution[0])}

if name == 'main':
 app.run(debug=True)"
Create a Python program to generate a random name from two given lists of names.,"import random

def get_random_name(first_names, last_names):
    first_name = random.choice(first_names)
    last_name = random.choice(last_names)
    random_name = first_name + ' ' + last_name
    return random_name"
Generate a function in Python to zip two lists.,"def zip_two_lists(list1, list2):
    return zip(list1, list2)"
Describe the sorted() method and how it works,The sorted() method is a built-in function in Python that takes an iterable object and returns a sorted list. It is used to sort the items of an iterable in a specific order which may be either ascending or descending. The sorted() method works by comparing each item in the iterable with all the other items and sorting them in a specific order.
Write a Python program to visualize a given dataset in a 2D scatterplot.,"import matplotlib.pyplot as plt
def visualize_data(x_data, y_data):
 plt.scatter(x_data, y_data)
 plt.xlabel('x data')
 plt.ylabel('y data')
 plt.title('2D Scatterplot')
 plt.show()"
Create a Python app to take a list of words and determine if each word is an anagram of another.,"def is_anagram(word1, word2):
    if sorted(word1) == sorted(word2):
        return True
    else:
        return False"
Write a function to list out the list of given strings individually using map function.,"def listify_list(list1):
  result = list(map(list,list1)) 
  return result "
Design a python program to error correct a given sentence.,"def error_correct(sentence):
    words = sentence.split()
    correct_words = []
    for word in words:
        if word == 'potatoo':
            correct_words.append('potato') # correction
        else:
            correct_words.append(word)
    return ' '.join(correct_words)"
Write a Python program to scroll a given message on the console.,"def scrollMessage(message): 
    for char in message: 
        for i in range(100): 
            print (char, end = "" "")
        print("""")


# Input
message = 'Hello World!'

# Output
scrollMessage(message)"
Generate a random password using Python.,"import random

password_characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*().,?0123456789'

def generate_password(length):
    return ''.join(random.choices(password_characters, k=length))
  
print(generate_password(10))"
Suggest a way to optimize the following Python code snippet.,"def find_max(arr):
    '''This function returns the maximum element in the given array.'''
    maxval = arr[0]
    for num in arr:
        if num > maxval:
            maxval = num
    return maxval"
Create a Python script to generate random numbers with using a certain range.,"import random

min_n = 5
max_n = 15

def random_number_generator(min_n, max_n):
  return random.randint(min_n, max_n)

for num in range(0, 10):
    print (random_number_generator(min_n, max_n))"
Implement an algorithm in Python to optimize the following cost function,"def optimization_algorithm(x): 
    cost = 3 * x ** 2 + 4*x + 2
    while cost > 0: 
        cost = cost - (6*x + 4)
        x = x - 0.01
    return x"
Write a function in Python to compare two given strings character-wise and return the position of the first difference.,"def compare_strings_charwise(s1, s2):
    for i in range(min(len(s1), len(s2))):
        if s1[i] != s2[i]:
            return i
    return -1"
Contruct a python program that sorts an array of strings using BubbleSort algorithm.,"def bubbleSort(arr): 
    n = len(arr) 
  
    for i in range(n):      
        for j in range(0, n-i-1): 
            if arr[j] > arr[j+1] : 
                arr[j], arr[j+1] = arr[j+1], arr[j] 
  
    return arr"
Develop a Python function to calculate the area of an irregular polygon with three sides.,"def calculate_area(s1, s2, s3):
    # calculate the perimeter
    p = s1 + s2 + s3
    # calculate the semi-perimeter
    sp = p / 2
    # calculate the area
    area = math.sqrt(sp * (sp - s1) * (sp - s2) * (sp - s3))
    
    return area"
We are given the input and output schematic of a neural network. You are required to implement the network in Python code.,"import numpy as np
 
# Inputs
x = np.array([2, 1])
 
# Weights - Initilise to random values
w1 = np.random.rand(2, 2)
w2 = np.random.rand(2, 1)
 
# Hidden layer
h1 = np.matmul(x, w1)
 
# Output layer
y = np.matmul(h1, w2)"
Generate a Python script to print all the prime numbers in a given range.,"for n in range(2, 21): 
   if n > 1: 
       for i in range(2, n//2 + 2): 
           if (n % i) == 0: 
               break
       else: 
           print(n)"
Write a python function to find number of elements with odd factors in a given range.,"def count_Odd_Squares(n,m): 
    return int(m**0.5) - int((n-1)**0.5) "
"Given a list of strings, write a Python snippet to sort the strings in ascending order according to word length.","strings = [""Code"", ""Python"", ""JavaScript"", ""Java""]

# sort the list by word length
strings.sort(key = lambda x: len(x))

print(strings)
# Output: [""Code"", ""Java"", ""Python"", ""JavaScript""]"
Generate an automated unit test in Python for the following function,"import unittest

class TestAddition(unittest.TestCase):

    def test_addition(self):
        self.assertEqual(add(1, 1), 2)
        self.assertEqual(add(2, 5), 7)
        self.assertEqual(add(3, 3), 6)
        self.assertEqual(add(-8, 6), -2)
        self.assertEqual(add(-3, -3), -6)

if __name__ == '__main__':
    unittest.main()"
Write a Python program to update a dictionary with the its key's length as the value.,mydict = {k: len(k) for k in mydict.keys()}
Create a function in Python that takes a list of words as an argument and returns a new list without duplicates.,"def remove_duplicates(words):
  seen = set()
  unique_words = []
  for word in words:
    if word not in seen:
      seen.add(word)
      unique_words.append(word)
  return unique_words

arr = ['apple', 'banana', 'apple', 'orange']
result = remove_duplicates(arr)
print(result)"
"Create a Python program which takes a word as an input, reverses it and prints the output.","def reverse_word(word):
    return word[::-1]

word = ""hello""
result = reverse_word(word)
print(result)"
Write a Python program to sort the characters in a given string in reverse alphabetical order.,"def sortReverseString(string):
 char_list = list(string)
 char_list.sort(reverse=True)
 return ''.join(char_list)

# Usage:
string = ""Hello""
sortedString = sortReverseString(string)
print(sortedString) # Output: olleH"
Develop a program in Python to rotate the elements of an array to the right by K times.,"def rotate_k_times(my_list, k):
    rotated_list = my_list.copy()
    for i in range(k):
        rotated_list = [rotated_list[-1]] + rotated_list[:-1]
    return rotated_list

if __name__ == '__main__':
    print(rotate_k_times(my_list, 3))"
Generate a Python code to sort a list of numbers.,"list = [100, 50, 30, 10, 7]
list.sort()
print(list) # Output: [7, 10, 30, 50, 100]"
"Make a function in Python which takes a string of any length, reverses it, and then returns the reversed string.","def reverse_string(string):
    reversed_string = """"
    for char in string:
        reversed_string = char + reversed_string
    return reversed_string"
Write a function to generate a two-dimensional array.,"def multi_list(rownum,colnum):
  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]
  for row in range(rownum):
    for col in range(colnum):
        multi_list[row][col]= row*col
  return multi_list
"
Create a Python program that takes two arguments in the form of two lists and calculates the dot product of the two arguments.,"def dot_product(list1, list2):
  product = 0
  for i in range(len(list1)):
    product += (list1[i] * list2[i])
  return product
#Example
list1 = [1,2]
list2 = [3,4]

result = dot_product(list1, list2)
print(result)
#Output
11"
Create a Python script to generate random passwords of length 8 characters.,"import string
import random

def generatePassword():
  characters = string.ascii_letters + string.digits + string.punctuation
  password = ''.join(random.choice(characters) for i in range(8))
  return password
 
print(generatePassword())"
Create a function in Python that takes a string as an input and reverses each word of the string.,"def reverse_words(string):
    words = string.split("" "")
    output_string = """"
    for word in words:
        output_string += word[::-1] + "" ""
    return output_string.strip()"
Create a function to generate random numbers within a given range in Python.,"import random

def generate_random_numbers(start, end):
    return random.randint(start, end)

result = generate_random_numbers(1,10)
print(result)"
Develop a function in Python to calculate the n factorial.,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n*factorial(n-1)"
Develop a valid Python script which computes the root of a given quadratic equation,"import math

def quadratic_equation_roots(a, b, c):
  d = b**2 - 4*a*c

  if d > 0:
    x1 = (-b + math.sqrt(d)) / (2*a)
    x2 = (-b - math.sqrt(d)) / (2*a)
    return x1, x2
  else:
    return ""This equation has no real roots!"""
Generate a main.py python script that will return the maximum of two numbers.,"def max(a, b): 
    if a > b: 
        return a 
    else:  
        return b 
  
#Driver Code 
a = 3
b = 4
print(max(a, b))"
Create a Python script to perform sentiment analysis on a given piece of text. Use the TextBlob package to detect the sentiment of the text and print out the sentiment score.,"import textblob

text = ""The movie was great! I really enjoyed watching it.""

blob = textblob.TextBlob(text)
sentiment = blob.sentiment

print(""Sentiment score:"", sentiment.polarity)"
Write a Python function to calculate the tax on a given price.,"def calculate_tax(price):
 tax_rate = 0.135
 return price * tax_rate"
Create a text parser in Python that converts a given string into an integer.,"def parse_int(string):
 return int(string)

result = parse_int(""47"")
print(result)

# Result: 47"
Generate a python code to build a simple regression model?,"import numpy as np

X = np.array(X)
Y = np.array(Y)

b = np.linalg.inv(X.T.dot(X)).dot(X.T).dot(Y)

#Print the parameters
print(""Parameters: "", b)

#Make predictions
x_new = [[1, 2, 3]]
y_pred = np.dot(x_new, b)
print(""Predicted output: "", y_pred)"
Write a Python program to edit the following code in such a way that the output is increased is increased by one.,"def add_two_numbers(a, b):
    c = a + b
    d = a - b
    total = c + d + 1
    print(total)"
"Create a class in Python to store the names, addresses and age of customers.","class Customer:
    def __init__(self, name, age, address):
        self.name = name
        self.age = age
        self.address = address

    def get_details(self):
        return f'Name: {self.name} | Age: {self.age} | Address: {self.address}'"
Edit the following Python code to handle unexpected errors.,"def add_numbers(a,b): 
    try:
        return a + b
    except TypeError as e:
        print(e)
        return None"
Write a Python script to parse a JSON string and convert it into a dictionary.,"import json

json_str = '{""name"": ""GPT"", ""type"": ""AI""}'

dict_x = json.loads(json_str)
print(dict_x)"
"Using the Python turtle library, create a drawing of a spider web on the screen.","import turtle

# Create a starting point
turtle.setup(400, 400)
turtle.penup()
turtle.backward(150)
turtle.pendown()

# Create the spiderweb
for _ in range(10):
    turtle.forward(50)
    turtle.right(80)

# Hide the turtle
turtle.hideturtle()
turtle.done()"
Develop a Python program to reverse a list of numbers.,"def reverse_list(nums):
    """"""Function to reverse a list of numbers.

    Parameters
    ----------
    nums : list
        List of numbers to be reversed.

    Returns
    -------
    reversed_list : list
        Reversed list of numbers.
    """"""

    reversed_list = nums[::-1]

    return reversed_list"
Write a function in Python to generate a Fibonacci sequence up to n.,"def fibonacci(n): 
    a = 0
    b = 1
    if n < 0: 
        print(""Incorrect input"") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2,n): 
            c = a + b 
            a = b 
            b = c 
        return b"
Write a Python program to calculate the Fibonacci number at a particular position.,"def Fibonacci(n): 
    if n<0: 
        print(""Incorrect input"") 
    # First Fibonacci number is 0 
    elif n==1: 
        return 0
    # Second Fibonacci number is 1 
    elif n==2: 
        return 1
    else: 
        return Fibonacci(n-1)+Fibonacci(n-2) 

# Driver Program 
if __name__ == ""__main__"": 
    print(Fibonacci(6))"
Design a web scraper using python to extract information from wikipedia.,"import requests
from bs4 import BeautifulSoup

web_url = ""https://en.wikipedia.org/wiki/Wikipedia""

web_data = requests.get(web_url).text
soup = BeautifulSoup(web_data,""html.parser"")

for title in soup.find_all(""h1""):
    print(title.string)

for para in soup.find_all(""p""):
    print(para.string)"
"Using Python, create an algorithm to identify all prime numbers between 1 and 100.","primes = []

for num in range(2, 101):
    is_prime = True
    for i in range(2, num):
        if (num % i == 0):
            is_prime = False
            break
 
    if is_prime:
        primes.append(num)

print(primes)"
"Create a class called 'Car' in Python, which instantiates with name, model, and price.","class Car:
    def __init__(self, name, model, price):
        self.name = name
        self.model = model
        self.price = price"
Optimize the following code written in Python such that its time complexity becomes linear.,"def sum(arr):
 total = 0
 for i in range(len(arr)):
 total += arr[i] * (sum(arr[i+1:]) - arr[i])
 return total"
Create a sorting algorithm in Python to sort a given array in ascending order.,"def quicksort(arr): 
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quicksort(left) + middle + quicksort(right)

print(quicksort([9, 8, 7, 6, 5, 4, 3, 2, 1]))"
Write python program to find the maximum of 3 numbers and display the result,"def max_3(n1, n2, n3):
    max = n1
    if n2 > max:
        max = n2
    if n3 > max:
        max = n3
    
    return max

# Example
print(max_3(1, 2, 3))  # Output: 3"
Create a Python function to generate a random password of length n,"import string
import random

def gen_password(length):
    characters = string.ascii_letters + string.digits + string.punctuation
    password = """"
    for i in range(length):
        password += random.choice(characters)
    return password

result = gen_password(3)
print(result)"
"Create a Python class representing a vehicle with attributes make, model, year, and color.","class Vehicle:
    """"""Class representing a vehicle.""""""

    def __init__(self, make, model, year, color):
        """"""Initialize vehicle object with its attributes.""""""
        self.make = make
        self.model = model
        self.year = year
        self.color = color"
Write a python program to preprocess a dataset such that each row is a list containing tuples and containing max four columns.,"import csv

def preprocess_data(in_file):
    '''This function preprocesses a csv file into a list containing tuples with max four columns per row.'''
    with open(in_file) as fin:
        reader = csv.reader(fin)
        data = [line[:4] for line in reader]
        return [tuple(line) for line in data]"
"Write a Python program to create a dictionary with keys a, b, c and their respective values as 1, 2, 3.","mydict = {
    'a': 1,
    'b': 2,
    'c': 3 
}"
Write code using Python to generate a random password of given length.,"import string
import random

def generate_password(length):
    chars=string.ascii_uppercase + string.ascii_lowercase + string.digits
    return ''.join(random.choice(chars) for i in range(length))

print(generate_password(8))"
Generate a function that increments a given input by one in Python.,"def increment(x): 
    return x + 1"
Write a function to convert all possible convertible elements in the list to float.,"def list_to_float(test_list):
  res = []
  for tup in test_list:
    temp = []
    for ele in tup:
      if ele.isalpha():
        temp.append(ele)
      else:
        temp.append(float(ele))
    res.append((temp[0],temp[1])) 
  return (str(res)) "
Write a python function to find the element that appears only once in a sorted array.,"def search(arr,n) :
    XOR = 0
    for i in range(n) :
        XOR = XOR ^ arr[i]
    return (XOR)"
"Given a multi-dimensional array, write a python code snippet to find the sum of its elements.","# Use nested list comprehension to calculate the sum 
total_sum = sum([sum(row) for row in arr])"
Develop a python program to add two matrices of the same size.,"def add_matrices(X, Y):
    result = [[0 for col in range(len(X[0]))] for row in range(len(X))] # Create a matrix of all 0s
    for i in range(len(X)):
        for j in range(len(X[0])):
            result[i][j] = X[i][j] + Y[i][j]
    return result 

print(add_matrices(X, Y))"
Write python code to find the sum of all even numbers from 0 to 100.,"# Function to find the sum of all even numbers from 0 to n
def sum_of_even_numbers(n):
    # Initialize a sum variable
    sum = 0
    # Iterate through all even numbers less than or equal to n
    for i in range(0, n+1, 2):
        sum += i
    # Return the sum
    return sum

# This function is called
sum = sum_of_even_numbers(100)
print(sum)"
Write a Python program to compute the sum of the absolute difference of all pairs of numbers in a given array.,"arr = [5, 8, 10, 15]
Sum = 0

for i in range(len(arr)):
    for j in range(len(arr)):
        if(i != j):
            Sum += abs(arr[i] - arr[j])
            
print(Sum)"
Write a python program to calculate the areas of two rectangles and determine which one is larger,"def calculate_area(length, width):
    return length * width

rectangle_1_area = calculate_area(2, 4)
rectangle_2_area = calculate_area(4, 6)

if(rectangle_1_area > rectangle_2_area):
    print(""Rectangle 1 is larger"")
else:
    print(""Rectangle 2 is larger"")"
Output the sum of numbers in a list in Python.,"def list_sum(inpList):
    sum = 0
    for num in inpList:
        sum += num
    return sum

print(list_sum([1, 2, 3, 4, 5]))"
Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.,"import heapq
def merge_sorted_list(num1,num2,num3):
  num1=sorted(num1)
  num2=sorted(num2)
  num3=sorted(num3)
  result = heapq.merge(num1,num2,num3)
  return list(result)"
Develop a Python program for reversing the order of a given array.,"def reverse_array(arr):
  start = 0
  end = len(arr) - 1
  while start < end:
    arr[start], arr[end] = arr[end], arr[start]
    start += 1
    end -= 1
  return arr"
Classify the following text as valid or invalid python code,Valid
Write a Python program to find all the numbers divisible by a certain number within a certain range.,"def find_numbers_divisible_by(m, n, divisor):
    divisible_numbers = []
    for i in range(m, n+1):
        if i % divisor == 0:
            divisible_numbers.append(i)
    return divisible_numbers"
Generate a Python script to generate n distinct prime numbers.,"import math

def generate_primes(n): 
    primes = []
    num = 2
    while len(primes) < n: 
        is_prime = True
        for i in range(2, int(math.sqrt(num)) + 1): 
            if num % i == 0: 
                is_prime = False
                break

        if is_prime: 
            primes.append(num)

        num += 1
    
    return primes

n = 8
primes = generate_primes(n)
print(primes)"
"Generate a class in Python that takes three parameters: name, age, and gender.","class Person:
  def __init__(self, name, age, gender):
    self.name = name
    self.age = age
    self.gender = gender
    
    def display_person(self):
      print(""Name: "" + self.name + ""\nAge: "" + str(self.age) + ""\nGender: "" + self.gender)

person = Person(""John"", 28, ""Male"")
person.display_person()"
Code a program in Python to calculate the mean from a dataset,"def calculate_mean(numbers):
    total = 0
    for num in numbers:
        total += num
    return total / len(numbers)
    
dataset = [0.07, 0.69, 0.29, 0.17, 0.11, 0.51, 0.5]
mean = calculate_mean(dataset)
print(mean)  # Output: 0.3542857142857143"
Create an algorithm in Python to identify the missing number in a sequence of integers.,"def missing_number(arr): 
  n = len(arr) 
  total = (n+1)*(n+2)/2
  for i in range(n): 
    total -= arr[i] 
  return total
  
arr = [1,2,4,5]
print(""The missing number is"",int(missing_number(arr)))"
Write a Python program to automatically format and validate user input.,"import re

def validate_input(input):
 # validate pattern:
 pattern = r""^[a-zA-Z]*$""
 # compile regex
 regex = re.compile(pattern)

 # check if input matches pattern
 if(regex.match(input)):
  # format the input
  input = input.lower().capitalize()
  # return formatted input
  return input
 else:
 # return error
 return ""Error: Invalid input"""
"Create a class ""Animal"" in Python with a function ""make_sound"" to print the sound the animal can make.","class Animal:
    def __init__(self):
        pass
    
    def make_sound(self):
        print(""The animal makes a sound."")"
Compose a Python function to find all the prime numbers between 1 and 100.,"def find_primes(x, y):
    result = []
    for num in range(x, y + 1):
        if num > 1:
            isPrime = True
            for i in range(2, num//2 + 1):
                if num % i == 0:
                    isPrime = False
                    break
            if isPrime:
                result.append(num)
    return result"
Can you write a python program to solve a system of linear equations?,"def solve_linear_equations(a, b, c):
    """"""
    This function takes three parameters: a, b and c, which are the coefficients of a system of linear equations, 
    and returns a tuple of the solution of the system.
    """"""
    x = (c - b) / (a - b)
    y = (5 - a*x) / b
    
    return (x, y)"
"Create a python function that takes in two arguments x and y, and will print out the multiplication result after adding 1 to x.","def multiply_add_one(x, y):
    print(x + 1 * y)"
Write a script in Python to send an email using the Gmail SMTP service.,"import smtplib

sender_email = ""sender@gmail.com""
receiver_email = ""receiver@example.com""
password = 'password'

message = """"""\
Subject: Hi There

This is an email to test the Gmail SMTP service.
""""""

server = smtplib.SMTP('smtp.gmail.com', 587)
server.ehlo()
server.starttls()

server.login(sender_email, password)
server.sendmail(sender_email, receiver_email, message)

server.quit()"
Generate a Python class to represent a 2D point.,"class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __str__(self):
        return '({}, {})'.format(self.x, self.y)"
Create a python class which will contain all the necessary methods to implement the str method.,"class MyClass:
    
    def __init__(self, *args):
        self.args = args
        
    def __str__(self):
        return 'MyClass({})'.format(', '.join(str(arg) for arg in self.args))"
Create a Python program to edit the following string and make all characters in the string uppercase.,"def to_uppercase(input):
    output = """"
    for char in input:
        output += char.upper()
    return output"
Create a Python program to remove any items from a given list that are less than 5.,"my_list = [1, 4, 6, 8, 10, 15, 20]

filtered_list = [item for item in my_list if item >= 5]

print(filtered_list)  # Output: [6, 8, 10, 15, 20]"
Create a Python function to print the following star pyramid pattern.,"def print_star_pyramid(n):
  # Outer loop to handle number of lines
  for i in range(0, n):
    # Inner loop to handle number of columns
    for j in range(0, i+1):
      #  Will print star
      print(""* "", end="""")
    # Line break
    print(""\r"")

# Program to demonstrate star pyramid
n = 5
print_star_pyramid(n)"
Write a Python code to print a dictionary where the keys are numbers between 1 and 15 (both included) and the values are square of keys.,"my_dict ={}
for num in range(1, 16):
    my_dict[num] = num*num

print(my_dict)"
Create a method to generate a random integer between 0 and 10 (inclusive) in Python.,"import random 
  
def random_int(): 
    return random.randint(0, 10)"
Rewrite the existing code to edit the contents of an existing Python dictionary.,"language_dict = {
    'English': 'Hi', 
    'Spanish': 'Hola', 
    'Japanese': 'Konnichiwa'
    }
    
def edit_dict(dictionary, key, value):
    dictionary[key] = value"
Implement a CRUD (Create Read Update Delete) system in Python.,"class CRUD:
    def __init__(self):
        self.records = []
    
    def create(self,data):
        record = data
        self.records.append(record)
    
    def read(self):
        return self.records
 
    def update(self,index,data):
        self.records[index] = data
 
    def delete(self,index):
        self.records.pop(index)"
Optimize a given Python program by reducing the running time.,"def sum_of_numbers(n):
    return int(n * (n + 1) / 2)"
"Create a function in Python to execute the following rule: given an array of integers, find the pair of adjacent elements that has the largest sum and print the sum.","def find_largest_sum(lst):
    largest_sum = 0
    for i in range(len(lst) - 1):
        current_sum = lst[i] + lst[i+1]
        if current_sum > largest_sum:
            largest_sum = current_sum
    return largest_sum"
Create a Python program to die arbitary shape black and white using matplotlib,"import matplotlib.pyplot as plt

# Generating random coordinates
x = np.random.randint(0,100,100)
y = np.random.randint(0,100,100)

# Use the coordinates to plot a black and white shape
plt.scatter(x, y, c='black')
plt.fill_between(x, y, color='white')
plt.show()"
Generate a Python program to compare two given dictionaries and output a dictionary with elements common in both.,"def compare_dicts(dict1, dict2):
    common_elements = {}
    for key1, value1 in dict1.items():
        for key2, value2 in dict2.items():
            if key1 == key2:
                common_elements[key1] = value1
    return common_elements"
Build a Python program to take a given list and create a dictionary with the elements and their corresponding indices.,"def create_dict(L):
    dict = {}
    for i in range(len(L)): 
        dict[L[i]] = i
    return dict

dict_list = dict(create_dict([""a"",""b"",""c""]))
print(dict_list)"
Write a python function to find the digit distance between two integers.,"def digit_distance_nums(n1, n2):
         return sum(map(int,str(abs(n1-n2))))"
Solve this basic algebra problem in Python.,x = (35 + 4)/5
Generate a Python program to calculate the Mean Absolute Error (MAE) of a given dataset.,"def mae(data): 
  # Calculate the mean of the data
  mean = sum(data) / len(data) 

  # Calculate the absolute difference of the data values from the mean
  abs_differences = [abs(value - mean) for value in data] 

  # Calculate the mean absolute error
  mae = sum(abs_differences) / len(abs_differences) 

  return mae"
Design a function in Python that takes two lists as input and returns the elements in common.,"list1 = [2, 3, 4, 5]
list2 = [1, 2, 4, 5]

def common_elements(list1, list2):
    result = []
    for item in list1:
        if item in list2:
            result.append(item)
    return result

print(common_elements(list1, list2))"
Optimize the above Python program to calculate the sum of a given array of numbers for better performance.,"import numpy as np

def sum(arr):
 return np.sum(arr)

sum([1,2,3,4]) # 10"
Create a Python function to select all rows from a table where the 'status' is 'approved',"def select_approved_rows():
   sql = ""SELECT * FROM table WHERE status = 'approved'""
   cur.execute(sql)
   return cur.fetchall()"
Write a python function to check whether two given lines are parallel or not.,"def parallel_lines(line1, line2):
  return line1[0]/line1[1] == line2[0]/line2[1]"
Design a Python program to remove duplicate characters from a given string.,"def remove_duplicate_characters(string):
    new_string = ''
    new_string_set = set()
    for character in string:
        if character not in new_string_set:
            new_string += character
            new_string_set.add(character)
    return new_string"
Edit the given Python code to convert a list of temperatures in Fahrenheit to a list of temperatures in Celsius.,"temperatures_fahrenheit = [32, 64, 78, -10]

temperatures_celsius = [((temp-32)*5)/9 for temp in temperatures_fahrenheit]
print(temperatures_celsius)"
Write a python program to convert a string to int and float.,"# define a string
string = ""12345""

# convert string to int
integer = int(string)

# convert string to float
floating = float(string)

# print results
print(""String: "", string)
print(""Integer: "", integer)
print(""Float: "", floating)

# Output
# String: 12345
# Integer: 12345
# Float: 12345.0"
Generate a 2-dimensional array with 7 columns and 5 rows in Python.,"import numpy as np 
  
# creating 2-dimensional array 
arr = np.array([[0, 0, 0, 0, 0, 0, 0], 
                [0, 0, 0, 0, 0, 0, 0], 
                [0, 0, 0, 0, 0, 0, 0], 
                [0, 0, 0, 0, 0, 0, 0], 
                [0, 0, 0, 0, 0, 0, 0]]) 
  
# displaying the array 
print (""2-dimensional array is:: "", arr)"
Create a Python program to compute the sum of all integers from 1 to n.,"# compute sum of all numbers from 1 to n
def compute_sum(n):
 sum = 0
 
 for i in range(1, n+1):
 sum += i
 
 return sum
 
print(compute_sum(10))"
Generate a Python implementation for these pseudocode.,"def print_product_names():
    unscanned_barcodes = [barcodes] #list of unscanned barcodes

    while len(unscanned_barcodes) > 0:
        barcode = unscanned_barcodes.pop(0)
        product_name = scan_barcode(barcode) #function that returns product name
        print(product_name)"
Design an algorithm in Python that will accept an array of integers and return an array with alternate elements removed starting from the even indices.,"def alternating_elements(arr):
    new_arr = [arr[i] for i in range(0, len(arr), 2)]
    return new_arr

result = alternating_elements([1, 2, 3, 4, 5, 6])
print(result) #[2, 4, 6]"
Develop a Python script to extract the minimum of two numbers.,"def min(num1, num2):
    if num1 < num2:
        return num1
    else:
        return num2

print(min(2, 5))"
Output the factorial of a given number in Python.,"def factorial(n):
    if n == 0 or n == 1:
        return 1
    else:
        return n * factorial(n-1)

print(factorial(4))"
Create a Python program to find all the common elements between two given lists in a single line of code.,common_list = [element for element in List1 if element in List2]
Create a Python program that takes a list of integers and prints out the total number of times that the number 7 appears in the list.,"def count_7(nums):
  count = 0
  for num in nums:
    if num == 7:
      count += 1
  return count"
Generate a Python program which converts a given number of hours into minutes,"def hours_to_minutes(hours):
    minutes = hours * 60
    return minutes

minutes = hours_to_minutes(20)
print(minutes)"
Generate a Python program to partition a given array into two parts such that every element in first part is less or equal than the elements in the second part.,"def partition(arr):
  pivot = arr[0]
  i = 0
  j = len(arr) - 1

  while i <= j:
   while arr[i] < pivot:
    i += 1
   while arr[j] > pivot:
    j -= 1

   if i <= j:
    arr[i], arr[j] = arr[j], arr[i] 
    i +=1
    j -= 1

  return arr

print(partition([1, 9, 0, 5, 2]))"
Create a program in Python to print out the elements in a list in reverse order.,"list = [""A"", ""B"", ""C"", ""D""]

for i in range(len(list)-1, -1, -1):
    print(list[i])"
"In Python, create a method that can take two integers and return their sum.","def sum_ints(int1, int2):
    return int1 + int2"
Write a Python function to remove a specific element from a list.,"def remove_element(list, element):
    for i in range(len(list)):
        if list[i] == element:
            del list[i]
            break
    return list

list = remove_element(list,40)"
Create a program in Python that prints out the first 100 Fibonacci numbers.,"a, b = 0, 1
 
# print the first 100 Fibonacci numbers
for i in range(100):
    print(a, end=' ')
    a, b = b, a + b"
Compose a python program to identify the characters in a given alphabet,"alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'

def identify_characters(alphabet):
    char_list = []
    for c in alphabet:
        char_list.append(c)
    return char_list"
Classify a list of words into their corresponding part of speech using Python.,"pos_tags = nltk.pos_tag([""happy"", ""run"", ""went"", ""like""])
for tag in pos_tags:
    print(f'{tag[0]}: {tag[1]}')

# Output 
# happy: JJ
# run: VB
# went: VBD
# like: IN"
Find the Fibonacci sequence of a given number using a Python program.,"def Fibonacci(n): 
    if n<0: 
        print(""Incorrect input"")
    elif n==1: 
        return 0
    elif n==2: 
        return 1
    else:
        return Fibonacci(n-1)+Fibonacci(n-2) 

# Driver Program 
print(Fibonacci(n))"
"Given a language (example: Python), write a function to convert a string (example: ""Hello World!) to a list.","def str_to_list(string):
    return string.split(' ')"
Implement a Queue data structure in Python.,"class Queue:
  def __init__(self):
    self.items = []

  def is_empty(self):
    return self.items == []

  def enqueue(self, item):
    self.items.insert(0, item)

  def dequeue(self):
    return self.items.pop()

  def size(self):
    return len(self.items)"
Write a Python program to generate a two-dimensional array of Boolean values with alternating True and False values.,"def generate_alternating_2d_array(n):
 arr = []
 prev_value = False
 for i in range(n):
  row = []
  for j in range(n):
   cur_value = not prev_value
   row.append(cur_value)
   prev_value = cur_value 
  arr.append(row)
 return arr

arr = generate_alternating_2d_array(5)
for row in arr:
 print(row)"
Create a function in Classical Python to extract the hostname from a given URL,"def get_hostname(url):
    hostname = url.split(""/"")[2]
    return hostname

hostname  = get_hostname(url)
print(hostname)"
Develop an object orientated program in Python to generate random numbers.,"import random

class RandNumGenerator:
    def __init__(self, low, high):
        self.low = low
        self.high = high
    
    def generate_rand_num(self):
        return random.randint(self.low, self.high)

if __name__ == '__main__':
    gen = RandNumGenerator(10, 50)
    print(gen.generate_rand_num())"
"Given a list of strings, write a Python program to find the string which has the maximum length","def max_length(list1): 
	return max(list1, key=len) 

list1 = ['cat', 'primate', 'monkey']
print(""String with maximum length is : "", max_length(list1))"
Create a function in Python that takes two strings as an input and returns their concatenation.,"def concat_string(str1, str2):
    return str1 + str2

result = concat_string(str1, str2)
print(result)"
Write a function to find common index elements from three lists.,"def extract_index_list(l1, l2, l3):
    result = []
    for m, n, o in zip(l1, l2, l3):
        if (m == n == o):
            result.append(m)
    return result"
Design a function in Python that takes an integer and returns its opposite in sign.,"def opposite_int(num):
  return -1 * num"
Generate a Python function that takes two strings as arguments and returns a sorted version of the strings.,"def sort_strings(str1, str2): 
    str1 = sorted(str1)
    str2 = sorted(str2)
    return str1, str2"
Write a python program to calculate the sum of the divisors of a number,"def sum_divisors(n):
    '''Returns the sum of all divisors of the given number.'''
    if n <= 1:
        return 0
    #assume n is a positive integer
    sum_divisors = 1
    for i in range(2, int(n/2)+1):
        if n % i == 0:
            sum_divisors += i
    return sum_divisors"
Create a Python program to print out all the combination of a given set of numbers.,"def combinations(arr):
    res = []
    for i in range(len(arr)):
        for j in range(i + 1, len(arr)):
            res.append([arr[i], arr[j]])
    return res

print(combinations([1, 2, 3]))"
Create a Python script to encode a given message using the Caesar cipher.,"def caesar_cipher(message, shift):
 encrypted_message = """"
 for char in message:
 charIndex = ord(char)
 encryptedIndex = charIndex + shift
 if encryptedIndex <= 255:
 encrypted_message += chr(encryptedIndex)
 else:
 encrypted_message += chr(encryptedIndex - 255)
 return encrypted_message

print(caesar_cipher(""Hello World"", 5)) # prints Mjqqt Btwqi"
"Create a Python class called Department with three instance variables: name, employees, and budget.","class Department:
 def __init__(self, name, employees=[], budget=0):
  self.name = name
  self.employees = employees
  self.budget = budget

 def set_name(self, name):
  self.name = name

 def add_employee(self, employee):
  self.employees.append(employee)

 def set_budget(self, budget):
  self.budget = budget"
"Create a virtual environment using Python with the name ""myenv""",python -m venv myenv
Write a Python program to remove duplicate characters of a given string.,"def remove_duplicate_characters(string):
    result = """"
    seen = set()
    for char in string:
        if char not in seen:
            seen.add(char)
            result += char
    return result

print(remove_duplicate_characters(""bufferoverflow""))"
Create a binary search algorithm in Python that searches an input array for a certain number.,"def binarySearch(A, x):
 start = 0
 end = len(A) - 1

 while start <= end:
  mid = (start + end) // 2

  if A[mid] == x:
   return mid
  elif A[mid] > x:
   end = mid - 1
  else:
   start = mid + 1

return -1"
Translate the Python code below into C# code.,"private bool IsEven(int n)
{
    return n % 2 == 0;
}"
Construct a for loop in Python to iterate over a list of strings and print each string.,"for word in list_of_strings:
    print(word)"
Write a Python program to modify a given dataset for a specific task.,"def modify_data(dataset, task):
modified_data = []
 if task == ""filter age >18"":
 for d in dataset:
 if d['age'] > 18:
 modified_data.append(d)
 return modified_data"
Create a class to represent a door in a Python program.,"class Door:
    #Initializing a door with default values
    def __init__(self, is_open=False, color=""brown"", material=""wood""):
        self.is_open = is_open
        self.color = color
        self.material = material

    #Function to open door 
    def open_door(self):
        self.is_open = True

    #Function to close door 
    def close_door(self):
        self.is_open = False"
Write a Python program to create a dataframe from a given dictionary of lists.,"import pandas as pd

data_df = pd.DataFrame(data)

print(data_df)"
Round an input float to two decimal places in Python.,"num = 8.374
rounded_num = round(num, 2)
print(rounded_num)"
Create a Python program to zip two lists of same size into one dictionary.,"list1 = [1,2,3]
list2 = [4,5,6]
 
zip_dict = dict(zip(list1, list2))
print(zip_dict) # {1: 4, 2: 5, 3: 6}"
Solve the following problem using python,"def replace_by_length(list_of_strings):
    final_list = []
    for string in list_of_strings:
        final_list.append(len(string))
    return final_list

if __name__ == ""__main__"":
    list_of_strings = [""hello"", ""world"", ""coding""]
    print(replace_by_length(list_of_strings))"
Develop a program in Python to find the second largest element in a given array.,"def second_largest(arr):
    first = max(arr[0], arr[1])
    second = min(arr[0], arr[1])
 
    for i in range(2, len(arr)):
        if arr[i] > first:
            second = first
            first = arr[i]
        elif arr[i] > second and arr[i] != first:
            second = arr[i]
 
    return second"
Write a function to find whether all the given tuples have equal length or not.,"def find_equal_tuple(Input, k):
  flag = 1
  for tuple in Input:
    if len(tuple) != k:
      flag = 0
      break
  return flag
def get_equal(Input, k):
  if find_equal_tuple(Input, k) == 1:
    return (""All tuples have same length"")
  else:
    return (""All tuples do not have same length"")"
Create a class in Python that can represent a 3D point with the given fields.,"class Point3D:
  def __init__(self, x, y, z):
    self.x = x
    self.y = y
    self.z = z

  def __str__(self):
    return 'Point3D is at {x}, {y}, {z}'.format(x = self.x, y = self.y, z = self.z)"
Create a Python script that sends a GET request to a specified URL and prints out the response.,"import requests

url = 'http://example.com/'

r = requests.get(url)

print('Status code:', r.status_code)
print('Response text:
', r.text)"
Create an interactive CLI tool with Python that takes in student names and adds them to a list.,"import sys

# init an empty list
students = []

# ask for user input
while True:
 student_name = input('Please enter a student name: ')
 
 if student_name.strip() == '':
  break
 students.append(student_name.strip())

print('The following students have been added to the list:')
for student in students:
 print(student)

sys.exit()"
Write a Python program to sort a given list of dictionaries by a specific key in the dictionary.,"def sort_dict_by_key(dict_list, key):
    return sorted(dict_list, key=lambda k: k[key])"
Create an array of 100 randomly generated integers using Python.,"import random 

my_array = [random.randint(1, 100) for _ in range(100)]"
Create an HTTP GET request in Python.,"import requests

resp = requests.get(""http://example.com"")"
"Create a Python program that takes a list and returns a dictionary with the elements from the list as keys, and their frequency as values.","my_dict = {}

for item in my_list:
    if item not in my_dict:
        my_dict[item] = 0
    my_dict[item] += 1

print(my_dict) # {1: 2, 2: 1, 3: 1, 4: 4, 5: 1, 6: 1}"
Write a function to find the nested list elements which are present in another list.,"def intersection_nested_lists(l1, l2):
    result = [[n for n in lst if n in l1] for lst in l2]
    return result"
"Given a list and an integer, write a Python function to return a sublist of the list with the given integer.","def get_sublist(lst, n):
    return [lst[i:i+n] for i in range(0,len(lst),n)]"
Create a function in Python that prints out all prime numbers between 1 and a given number.,"def print_primes(n):
  for num in range(2, n + 1):
      isPrime = True
      for i in range(2, num):
          if (num % i == 0):
              isPrime = False
      if isPrime:
          print(num)"
Create a function in Python to print out all of the stuff in a given dictionary.,"def print_dict(dict):
 for key in dict:
   print(key,"":"", dict[key])"
Write a function to find maximum run of uppercase characters in the given string.,"def max_run_uppercase(test_str):
  cnt = 0
  res = 0
  for idx in range(0, len(test_str)):
    if test_str[idx].isupper():
      cnt += 1
    else:
      res = cnt
      cnt = 0
  if test_str[len(test_str) - 1].isupper():
    res = cnt
  return (res)"
Design an algorithm in Python to find the longest substring without repeating characters.,"def longestSubstringWithoutRepeatingCharacters(str):
    maxLength = 0
    hashMap = dict()
    start = 0

    for i in range(len(str)):
        if str[i] in hashMap:
            start = max(hashMap[str[i]], start)

        maxLength = max(maxLength, i - start + 1)
        hashMap[str[i]] = i + 1

    return maxLength"
Build a Python function that takes a single list of numbers and performs an insertion sort. The function should return a sorted list.,"def insertion_sort(arr):  
    for i in range(1, len(arr)): 
    
        key = arr[i] 

        j = i-1
        while j >= 0 and key < arr[j] : 
                arr[j + 1] = arr[j] 
                j -= 1
        arr[j + 1] = key 

    return arr

insertion_sort([4,1,8,11,15])

# Output  [1, 4, 8, 11, 15]"
Create a simple Python function for calculating the Fibonacci numbers.,"def fibonacci(n): 
 if n == 0:
 return 0
 elif n == 1:
 return 1
 else:
 return fibonacci(n - 1) + fibonacci(n - 2)"
Write a Python program to calculate the total electricity bill given the rate per kwh for domestic loads.,"def calculate_bill(rate, consumption):
    bill = rate * consumption
    print(""Your total electricity bill is Rs. {}"".format(bill))

calculate_bill(40, 300)"
Create a function in Python to generate a Fibonacci series up to a given number.,"def fibonacci(num):
    a = 0
    b = 1
    if num == 1:
        print(a)
    elif num == 2:
        print(a,b)
    else:
        print(a,b, end="" "")
        for i in range(2,num):
            c = a + b
            a = b
            b = c
            print(b, end="" "")

fibonacci(50) # output: 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181"
Edit this Python code to scale the inputs before applying a regression model.,"X = preprocessing.scale(np.array([[1,2],[2,1],[3,4],[6,7]]))
y = np.array([1.1,2.2,3.3,4.4])
model = LinearRegression().fit(X, y)"
Write a Python function to find the intersection of two given sets.,"def intersection(set1, set2): 
    return [i for i in set1 if i in set2]"
Create a program in Python to find all pairs of elements in a list with the given difference.,"def find_pair_with_difference(list, difference):
    result = []
    for i in range(len(list)):
        for j in range(i+1, len(list)):
            if list[j] - list[i] == difference:
                result.append((list[i], list[j]))
    return result

list=[9, 4, 7, 5]
difference = 4
result = find_pair_with_difference(list, difference)
print(result)"
Create a Python program to generate random numbers between 1 and 10 of a specified length.,"import random
def generate_random_nums(length):
  lst = []
  for _ in range(length):
    lst.append(random.randint(1, 10))
  return lst"
Generate random strings of fixed length in Python.,"import random 
import string

def generate_random_string(length):
    return ''.join(random.choices(string.ascii_letters + string.digits,k=length))

generate_random_string(8); //Output: 'K5h5get6'"
Generate a program in Python to convert a list of integers into a single integer.,"def list_to_int(list_of_ints):
 number = 0
 for int in list_of_ints:
  number = number*10 + int
 return number"
Write a Python script to generate the Fourier transform of a given signal.,"from scipy.fftpack import fft 
 
def fourier_transform(signal):
 
    # length of the signal
    N = len(signal)
 
    # calculate fourier transform (complex numbers list)
    fourier = fft(signal)
 
    return fourier"
Create a Python program for converting Celsius to Fahrenheit.,"def celsiusToFahrenheit(celsius):
 return (9/5)*celsius + 32"
Perform set theory operations using Python.,"A = {1, 2, 3}
B = {2, 3, 4}

# Union of Sets
C = A.union(B) 
print(C) 

# Intersection of Sets 
C = A.intersection(B) 
print(C) 

# Difference of Sets 
C = A.difference(B) 
print(C)"
Develop a Python code to print the current date and time.,"import datetime

dateTimeObj = datetime.datetime.now()

print('Current Date and Time:', dateTimeObj)"
Implement a lazy evaluation pattern for a function in Python.,"class lazy_evaluation:
 def __init__(self, func):
 self.func = func

 def __call__(self, *args, **kwargs):
 result = self.func(*args, **kwargs)
 return result

@lazy_evaluation
def add(a, b):
 return a + b

result = add(2, 3)
print(result)"
Design an API for a Python script that returns the average of any given list of numbers.,"# Create API endpoint
@app.route('/api/average', methods=['POST'])
def average():
    # Get data from request
    data = request.get_json()

    # Calculate average
    avg = np.mean(data)

    # Return result
    return jsonify({'result': avg})"
Write a Python function to generate the concatenation of two inputs strings.,"def concatenate_string(string1, string2):
    return string1 + string2

string1 = ""Hello ""
string2 = ""World!""

concatenated_string = concatenate_string(string1, string2)
print(concatenated_string)"
Create a Python module that converts a temperature in Celsius to Fahrenheit.,"def celsius_to_fahrenheit(celsius): 
  return (celsius * 9/5) + 32"
Generate a Python code for finding the sum and difference of two numbers.,"# Function to calculate the sum and difference
def sum_difference(num1, num2):
    sum = num1 + num2
    difference = num1 - num2
    return sum, difference

# Calculating the sum and difference 
x,y = sum_difference(7,9)

# Print the results 
print(""Sum:"", x)
print(""Difference:"", y)"
Edit a given Python code to return the maximum number in the given array.,"def findMax(arr):
    max = arr[0]
    for num in arr:
        if num > max:
            max = num
    return max

print(findMax(arr))"
Generate a script to send an email using Python.,"import smtplib

sender = 'test@example.com'
receiver = 'test@example.com'
subject = 'test'
message = 'Hello World'

try:
 smtpObj = smtplib.SMTP('localhost')
 smtpObj.sendmail(sender, receiver,
  ""Subject: "" + subject + ""\n"" + message)
 print(""Successfully sent email"")
except Exception as e:
 print(""Error: unable to send email"")"
Create a graphical representation of a given string using Python.,"import matplotlib.pyplot as plt 

# initializing string
string = ""Hello World!""

# declaring x, yaxis 
X = range(len(string)) 
Y = [ord(i) for i in string] 

# making a graph 
plt.plot(X, Y) 
plt.title('Graphical representation of String : ' + string) 

plt.show()"
Generate a Python script to delete every second word in a string.,"def delete_every_second_word(input):
    words = input.split()
    output = """"
    
    for i, word in enumerate(words):
        if i % 2 == 0:
            output += word + "" ""
    
    return output.strip()"
Create a function that takes two strings as its inputs and returns true if one of the two strings is a substring of the other.,"def is_substring(string1, string2):
    for i in range(len(string1)):
        for j in range(len(string2)):
            if string1[i] == string2[j]:
                return True
    return False

result = is_substring(""python"", ""java"")
print(result)"
Create a Python generator that generates the odd numbers between 0 and given n.,"def oddNumbers(n):
    for i in range(0, n + 1):
        if i % 2 != 0:
            yield i

n = 10
for num in oddNumbers(n):
    print(num)"
Write a Python script to search through a list of strings and find if any of the strings contain a substring.,"def search_for_substring(list, substring):
    for item in list:
        if substring in item:
            return True
    return False

result = search_for_substring(list, substring)
print(result) # True"
Create an algorithm in Python that prints out all permutations of a given set of numbers.,"def permutation(nums):
    if len(nums) == 1:
        return [nums]

    perm_list = [] 
    for i in range(len(nums)):
       m = nums[i] 

       remLst = nums[:i] + nums[i+1:] 

       for p in permutation(remLst): 
           perm_list.append([m] + p) 
    return perm_list"
Modify the given code such that a python list of strings is created based on the input.,"lst_strs = []
for i in lst:
    lst_strs.append(str(i))"
Write a function to sort a given matrix in ascending order according to the sum of its rows.,"def sort_matrix(M):
    result = sorted(M, key=sum)
    return result"
Modify a basic Python algorithm to increase the speed of the program.,"def faster_sum(arr):
 total = 0
 # looping over the array and adding the elements
 # to the variable total
 for i in range(0, len(arr)):
 total += arr[i]
 return total

list_of_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# using the faster_sum() function
result = faster_sum(list_of_numbers)
print(result)"
Generate a Python program to read a dataset into memory.,"import pandas as pd

def read_data(filename):
    return pd.read_csv(filename)"
Create a Python program to generate a random password at least eight characters long.,"import string
import random

def gen_password(length):
    all_chars = string.ascii_letters + string.digits + string.punctuation
    generated_password = ''.join(random.choice(all_chars) for _ in range(length))
    return generated_password

if __name__ == '__main__': 
    password = gen_password(8)
    print(password)"
Generate a python program that takes input as a string and prints out each word in the string in reverse order.,"# Take input
text = input('Enter a string: ')

# Split string into words
words = text.split(' ') 

# Reverse order
words.reverse() 

# Print
for word in words:
 print(word)"
Develop a Python program for converting feet to meters.,"def feet_to_meters(feet):
    return feet * 0.3048

feet = 10
meters = feet_to_meters(feet)

print('{} feet is equal to {} meters.'.format(feet, meters))"
Construct a Python script to find the average of three numbers.,"def find_average(a, b, c):
  return (a + b + c) / 3

result = find_average(10, 20, 30)
print(result) # 20"
Design a python program that calculates a person's BMI (body mass index).,"def calculate_bmi(weight, height):
    bmi = weight/(height**2)
    return bmi"
Generate a Python function to calculate the sum of the first 100 positive natural numbers,"def sum_first_100_natural_numbers():
 total = 0
 for i in range(1,101):
 total += i
 return total

# example
print(sum_first_100_natural_numbers()) # output: 5050"
"Rewrite the following JavaScript code in Python:

for (let i = 1; i <= 10; i++) {
 console.log(i);
}","for i in range(1, 11):
 print(i)"
Write Python code snippets that will convert comma separated values to a list of dictionaries.,"csv_data = [
 {'name': 'Albert', 'age': 22},
 {'name': 'Bob', 'age': 24},
 {'name': 'Charles', 'age': 20}
]"
"Given a 2D array of integers, write a Python function that returns the sum of all values in the array.","def sum2dArray(arr):
    two_d_sum = 0
    for sub_arr in arr:
        for elem in sub_arr:
            two_d_sum += elem
    return two_d_sum

arr = [[1,2], [3,4], [5,6]]
result = sum2dArray(arr)
print(result) # 21"
Enhance the following Python code for saving a webpage to a local directory.,"import urllib.request
from urllib.parse import urlparse
import os

def save_webpage(url, path):
 parsed_url = urlparse(url)
 path = os.path.join(path, parsed_url.netloc + parsed_url.path)
 if not os.path.exists(os.path.dirname(path)):
 os.makedirs(os.path.dirname(path))
 urllib.request.urlretrieve(url, path)"
Create a python code to remove duplicates from a given list while preserving the order.,"def remove_duplicates(data):
    """"""Removes duplicates from a given list while preserving the order.""""""
    seen = set()
    result = []
    for x in data:
        if x not in seen:
            seen.add(x)
            result.append(x)
    return result"
Predict the output for the following Python code snippet.,"c = [3, 6, 8, 11]"
Write a function to perform the adjacent element concatenation in the given tuples.,"def concatenate_elements(test_tup):
  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))
  return (res) "
Write a Python program create a string made of the first and last two characters from a given string.,"def substring(str):
    if len(str) < 3:
        return
    else:
        return str[:2] + str[-2:]

substring(""hello"")"
Create a class in Python which takes an employee name and salary as parameters and prints them.,"class Employee:
    def __init__(self, name, salary):
        self.name = name
        self.salary = salary
    
    def print_employee_details(self):
        print('Employee Name: {}, Salary: {}'.format(self.name, self.salary))

employee = Employee('John Smith', 5000)
employee.print_employee_details()"
Generate a text-based progress bar using Python.,"import sys 

def progress_bar(iteration, total, length=50, fill='█'):
    iteration = iteration + 1
    percent = (""{0:.1f}"").format(100 * (iteration / float(total)))
    filledLength = int(length * iteration // total)
    bar = fill * filledLength + '-' * (length - filledLength)
    sys.stdout.write('\r |{}| {}% {}'.format(bar,percent, ""Complete""))
    sys.stdout.flush()"
Implement a method in Python to round off any given number to the nearest integer.,"def roundNum(num): 
    if (num - int(num)) >= 0.5: 
        return int(num) + 1
    else: 
        return int(num) 
  
num = 5.66
roundedNum = roundNum(num) 
print(roundedNum)"
Transform the following piece of code in C to Python.,"a = 10
b = 13

c = a * b"
Design a Python script to remove duplicate elements of an array.,"def remove_duplicates(list):
    result = []
    for value in list:
        if value not in result:
            result.append(value)
    return result

list = [10, 1, 2, 5, 1, 10, 3]
result = remove_duplicates(list) 
print(result) # Output: [10, 1, 2, 5, 3]"
"Convert the following string to a list of individual elements in Python: ""apple,orange,banana"".","list = [""apple"", ""orange"", ""banana""]"
Create a program in python to count the occurences of a given word in a sentence.,"#Defining the sentence and keyword
sentence = ""This is a sample sentence for the purpose of the example. ""
keyword = ""example""

#Counting the occurences
count = sentence.count(keyword)

#Printing the result
print(""The keyword appears "" + str(count) + "" time(s) in the sentence."")"
Write a Python function that takes a string as input and counts the number of occurrences of each character in that string.,"def count_characters(string):
    counts = {}
    for s in string:
        counts[s] = counts.get(s, 0) + 1
    return counts

result = count_characters('python')
print(result)"
Write a function to check whether the given number is armstrong or not.,"def armstrong_number(number):
 sum = 0
 times = 0
 temp = number
 while temp > 0:
           times = times + 1
           temp = temp // 10
 temp = number
 while temp > 0:
           reminder = temp % 10
           sum = sum + (reminder ** times)
           temp //= 10
 if number == sum:
           return True
 else:
           return False"
Generate a code in Python to find the maximum sum subarray of size k.,"def maxSubArraySum(arr, k): 
    n = len(arr) 
    max_sum = 0
  
    for i in range(n - k + 1): 
        window_sum = sum(arr[i : k + i]) 
        max_sum = max(max_sum, window_sum) 
  
    return max_sum
  
  
arr = [1, 4, 2, 10, 2, 3, 1, 0, 20] 
k = 4
print(maxSubArraySum(arr, k))"
Write a python function to find the frequency of the smallest value in a given array.,"def frequency_Of_Smallest(n,arr): 
    mn = arr[0] 
    freq = 1
    for i in range(1,n): 
        if (arr[i] < mn): 
            mn = arr[i] 
            freq = 1
        elif (arr[i] == mn): 
            freq += 1
    return freq "
Create an algorithm in Python to search for a particular string in a given text.,"def search(query, text):
  n = len(query)
  result = []
  # Loop through the text
  for i in range(len(text)): 
    # Compare the current n characters of the text 
    # with the query string
    if text[i: i + n] == query: 
      # If matches, append the current index of text to 
      # the result 
      result.append(i) 
  # Return the list of indices  
  return result"
Write a Python program to optimize the following code snippet so that it runs faster,"def optimizeCode():
  n = 10
  arr = [i * i for i in range(n)]
  print(arr)

optimizeCode()"
Create a Python script to access a database and query a table.,"import sqlite3

# Create or open a database
conn = sqlite3.connect('database.db')

# Create a cursor
c = conn.cursor()

# Execute a query
c.execute(""SELECT * FROM `table_name`;"")

# Get the result
rows = c.fetchall()

# Iterate over the result
for row in rows:
 print(row)

# Close the connection
c.close()
conn.close()"
Translate the above Java program into Python program.,"for a in range(1, 26):
    for b in range(1, 26):
        for c in range(1, 26):
            if (a*a + b*b == c*c and a+b+c == 25):
                print(""Pythagorean triplet: "" + str(a) + "", "" + str(b) + "", "" + str(c))"
Create a K means clustering algorithm in Python.,"import numpy as np
from sklearn.cluster import KMeans

def KMeansCluster(features, clusters):
    kmeans = KMeans(n_clusters=clusters, random_state=0).fit(features)
    return kmeans.labels_
    
if __name__ == ""__main__"":
    features = np.array([[ 1.8 ,2.4],[ 3.2, 1.3], [ 1.1 , 8.2], [ 8.2, 1.2]])
    clusters = 2    
    print(KMeansCluster(features, clusters))"
Produce a Python code to calculate the sum of two squares given x and y as input.,"def sum_squares(x, y):
    return x**2 + y**2

x = 2
y = 4
s = sum_squares(x, y)
print(""The sum of two squares is {}"".format(s))"
Implement a KNN classifier in Python.,"import pandas as pd 
import numpy as np
from sklearn.neighbors import KNeighborsClassifier

#Load the data
df = pd.read_csv('dataset.csv')
#Split the labels and independent variables
x = df.iloc[:,:-1].values
y = df.iloc[:,-1].values

# Fit KNN algorithm on the dataset
knn = KNeighborsClassifier(n_neighbors=5, metric='euclidean')
knn.fit(x,y)"
Generate a code for creating a new python dictionary with the keys and values specified,"""""""
This code creates a new dictionary with the specified keys and values 
""""""

my_dict = {
    ""name"" : ""John"",
    ""age"" : 25,
    ""occupation"" : ""Engineer""
}"
Take an input string and write a python program to determine if it is a palindrome.,"def isPalindrome(s):
 left, right = 0, len(s) - 1
 while left < right:
 if s[left] != s[right]:
 return False
 left += 1
 right -= 1
 return True

s = ""racecar""
print(isPalindrome(s))  # True"
Write a Python program to randomly select an item from a list.,"import random

list_of_names = [""John"", ""Anna"", ""Bill"", ""Kim"", ""Claire""]
random_name = random.choice(list_of_names)

print(f'Randomly selected name from the list: {random_name}')"
Write a function to determine if the given number is an Armstrong number in Python.,"def is_armstrong(num): 
    n = len(str(num)) 
    total = 0
    temp = num
    while temp > 0:
        digit = temp % 10
        total += digit**n
        temp //= 10
    if num == total:
        return True
    else:
        return False"
Write a Python function to take a list of words and return a dictionary of word counts.,"def word_counts(words):
    counts = {}
    for word in words:
        if word in counts:
            counts[word] += 1
        else:
            counts[word] = 1
    return counts"
Write a Python program to remove all duplicated words from a given input string.,"sentence_words = sentence.split("" "")
 
unique_words = set(sentence_words)
 
print("" "".join(unique_words))"
Create a Python program to retrieve the longest string from an array of strings,"def get_longest_string(names):
    longest_string = ''
    for name in names:
        if len(name) > len(longest_string):
            longest_string = name
    return longest_string"
Design a Python program to find the area and perimeter of a circle.,"def area_perimeter_circle(radius):
    """"""Function to return the area and perimeter of a circle""""""
    area = 3.14 * (radius ** 2)
    perimeter = 2 * 3.14 * radius
    return area, perimeter

# Driver code
radius = 4

area, perimeter = area_perimeter_circle(radius)

print(f'Area of the circle is {area} and Perimeter of the circle is {perimeter}')"
"Generate a random number between two given numbers, using Python.","""""""
Generate a random number between two given numbers, using Python
""""""

import random

def random_number(min_range, max_range):
    return random.randrange(min_range, max_range)

print(random_number(30, 100))"
Write a Python program to determine the number of elements in a given array before the return value is -1.,"def countElements(Array): 
    count = 0
    for i in Array: 
        if i != -1: 
            count = count + 1
        else: 
            break
    return count"
"Create a Python program to read in a list of numbers and output a list that contains, for every even number, the list of odd numbers that sum up to it.","def sumOfOdds(inputList):
 result = []
 for num in inputList: 
  if (num % 2 == 0): 
   for i in range(1, num): 
    if (i % 2 != 0): 
     if (num == i + (num - i)):
      result.append([i, num - i])
 
 return result
 
# Driver code
inputList = [4, 6, 10, 8]
 
print(sumOfOdds(inputList))"
"Create a class in Python for a given Job object with properties like title, company, location, and job type.","class Job:
    def __init__(self, title, company, location, job_type):
        self.title = title
        self.company = company
        self.location = location
        self.job_type = job_type"
Design a personal database in Python to store Customer's details.,"class CustomerDatabase:
    def __init__(self):
        self.customers = []
   
    def add_customer(self, customer):
        self.customers.append(customer)
   
    def get_customer(self, id):
        for customer in self.customers:
            if customer.id == id:
                return customer
        return None
   
    def get_all_customers(self):
        return self.customers"
Generate a program in Python that takes in a string and returns its reverse.,"def reverse_string(string): 
    return string[::-1]"
Create a Python program that prints a number sequence of the Fibonacci series up to 15.,"def fibonacci(n):
    a, b = 0, 1
    while a < n:
        print(a, end=' ')
        a, b = b, a+b
    print()

fibonacci(15)"
Suggest a completion for the following python code to count the number of a given character in a string.,"def count_characters(s, c):
 count = 0
 for ch in s:
  if ch == c:
   count += 1
 return count"
Generate code to connect to an Oracle Database using a Python program.,"# Import the library
import cx_Oracle

# Connect to the database
connection = cx_Oracle.connect('<username>', '<password>', '<database_url>')

# Create a cursor
cursor = connection.cursor()

# Execute a query
cursor.execute('SELECT * FROM my_table')

# Get the results
result = cursor.fetchall()

# Close the connection
connection.close()"
Write a function to find the number of subsequences having product smaller than k for the given non negative array.,"def no_of_subsequences(arr, k): 
	n = len(arr) 
	dp = [[0 for i in range(n + 1)] 
			for j in range(k + 1)] 
	for i in range(1, k + 1): 
		for j in range(1, n + 1): 
			dp[i][j] = dp[i][j - 1] 
			if arr[j - 1] <= i and arr[j - 1] > 0: 
				dp[i][j] += dp[i // arr[j - 1]][j - 1] + 1
	return dp[k][n]"
Write a Python function to create a list of 10 random numbers between 0 and 100.,"import random

def create_random_list():
 result = []
 for i in range(10):
  result.append(random.randint(0, 100))
 return result"
Write a function in Python to return the indices of all occurrences of a given item in a list.,"def find_all_occurrence_indices(list, item):
result = []
for index, number in enumerate(list):
if number == item:
result.append(index)
return result"
Format a numerical table of data into a JSON object in Python.,"Assuming the numerical table of data is stored in a 2D list data, a function to format it into a JSON object can be written as follows:

import json
def formatData2JSON(data):
    json_formatted_data = json.dumps(data)
    return json_formatted_data"
Write a python program that will generate a password containing numbers and letters from an entered string.,"def generate_password(word):
      # initialize variables 
    password = """"
    letters = """"
    numbers = """"

    # create new password
    for i in range(0, len(word)):
      letters += word[i]
      numbers += str(i)

    password = letters + numbers
    return password

print(generate_password(""Hello""))"
Design a REST API in Python that allows users to get and post data on a table.,"from flask import Flask
from flask_restful import Resource, Api
 
app = Flask(__name__)
api = Api(app)
 
class TableData(Resource):
 def get(self):
  # Get data from table
  return {'data': 'formatted data'}
  
 def post(self):
 # Post data to table
 return {'message': 'Data posted successfully'}
 
api.add_resource(TableData, '/table')

if __name__ == '__main__':
 app.run(debug=True)"
Create a Python program that can convert a list of strings into their corresponding encoded values.,"def encode_list_of_strings(list_of_strings):
  encoded = []
  for string in list_of_strings:
    encoded.append(string.encode(""utf-8""))
  return encoded

list_of_strings = [""hello"",""world"",""how"",""are"",""you""]
encoded = encode_list_of_strings(list_of_strings)

# Output: [b'hello', b'world', b'how', b'are', b'you']"
"Generate code in Python to produce a random string of length 10 which contains the characters a, e, i, o, and u.","import random

def get_random_string(length=10):
    vowels = ['a', 'e', 'i', 'o', 'u']
    return """".join(random.choices(vowels, k=length))"
Write a python function to find the highest power of 2 that is less than or equal to n.,"def highest_Power_of_2(n): 
    res = 0; 
    for i in range(n, 0, -1): 
        if ((i & (i - 1)) == 0): 
            res = i; 
            break; 
    return res; "
"Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.","def min_Jumps(a, b, d): 
    temp = a 
    a = min(a, b) 
    b = max(temp, b) 
    if (d >= b): 
        return (d + b - 1) / b 
    if (d == 0): 
        return 0
    if (d == a): 
        return 1
    else:
        return 2"
Optimize a triple nested Python loop to perform faster.,"for i in range(n): 
    for k in range(n): 
        temp = 0
        for j in range(n): 
            temp += A[i][j] * B[j][k] 
        ans += temp"
Create a Python script to analyze a text document. The script should locate all words with three or more characters in a row and count their frequency in the document.,"from collections import defaultdict

text = 'The quick brown fox jumps over the lazy dog. The fox barked at the dog.'

words = defaultdict(int)

 for word in text.split():
  if len(word) >= 3:
   words[word] += 1

print(words)"
"Using the comment as the guide, generate a Python program to replace an element at a given index.","arr = [2, 3, 4, 5]
index = 2
# Replace the element at index with 0
arr[index] = 0
print(arr)"
Create a Python script to find the person with the highest grade in a classroom.,"highest_grade_person = max(students, key=lambda x:x['grade'])
print(""The student with highest grade is {}"".format(highest_grade_person))"
"Implement a default Python class for a message object. The class should implement `__init__` and `__str__` methods, and have a `text` attribute.","class Message:
    def __init__(self, text):
        self.text = text

    def __str__(self):
        return self.text"
Write a function in Python to calculate the maximum value of two given numbers.,"def max_val(num1, num2):
    # function to find the maximum value of two numbers
    if(num1 > num2):
        return num1
    else:
        return num2

# get the input values from the user
a = int(input(""Enter first number: ""))
b = int(input(""Enter second number: ""))

# call the max_val() function
max_val = max_val(a,b)

print(""The maximum value is:"", max_val)"
Create a Python program to find out if a string contains any characters from another given string.,"def contains_chars(str1, str2):
 if any([c in str1 for c in str2]):
 return True
 return False

string1 = ""Hello""
string2 = ""eo""

print(contains_chars(string1, string2)) // Outputs: True"
Write a Python program to create a FuzzyWuzzy string matching for the given two strings.,"from fuzzywuzzy import fuzz 
def fuzzy_match(str1, str2): 
    return fuzz.ratio(str1, str2)"
Create a program in Python that adds a given list of numbers.,"def add_list(list_of_numbers):
    sum = 0
    for i in list_of_numbers:
        sum += i
    return sum

list = [2, 5, 9]
result = add_list(list)
print(result)"
Design a function in Python to test if the given number is a prime or not.,"def is_prime(n):
 if n <= 1:
 return False

 for i in range(2, n):
 if n % i == 0:
 return False

 return True

is_prime(13) # True"
Write an algorithm in Python that takes a list of elements and determines if the list is sorted or not.,"def is_sorted(lst):
 # base case: if the list is empty then it is sorted
 if not lst:
  return True
 # compare the first two element
 if lst[0] > lst[1]:
  return False
 # recursively call the function with the remaining elements in the list
 return is_sorted(lst[1:])"
Design a Python program to find the position of the maximum element in a list of numbers.,"def find_max_position(nums):
    max_num = nums[0]
    max_pos = 0

    for i in range(len(nums)):
        if nums[i] > max_num:
            max_num = nums[i]
            max_pos = i

    return max_pos

nums = [1, 5, 8, -3, 0]
max_pos = find_max_position(nums)
print(f""The maximum element is at position {max_pos}"")"
"Design an algorithm in Python that takes two input arrays, and finds an element that is common to both arrays.","def find_common_element(arr1, arr2):
    common = []
    for num1 in arr1:
        for num2 in arr2:
            if num1 == num2:
                common.append(num1)
    return common

find_common_element(arr1, arr2) # return [2, 3]"
Create a Python program that outputs a dictionary containing the names of the months as keys and the number of days they contain as values.,"month_days = { 
 ""January"": 31, 
 ""February"": 28, 
 ""March"": 31, 
 ""April"": 30, 
 ""May"": 31, 
 ""June"": 30, 
 ""July"": 31, 
 ""August"": 31, 
 ""September"": 30, 
 ""October"": 31, 
 ""November"": 30, 
 ""December"": 31 
} 
 
print(month_days)"
"Convert a Python list into a string with each item separated by a comma, with no additional characters or whitespace","','.join(str(item) for item in my_list)"
Create a function in Python to find the maximum value in a list.,"def find_max(list):
    max_value = list[0]
    for value in list:
        if value > max_value:
            max_value = value
    return max_value"
Build a machine learning model in Python to predict the price of a house using its size as the independent variable.,"import pandas as pd
from sklearn.linear_model import LinearRegression

data = pd.read_csv('house_price-data.csv')

X = data[['size']]
y = data['price']

model = LinearRegression()
model.fit(X, y)"
Compose a Python program to generate a list of numbers from 1 to 50.,"number_list = [i for i in range(1, 51)]
print(number_list)"
Develop a Python program to delete the third element of a given list.,"# Input list
list = [""A"", ""B"", ""C"", ""D"", ""E""]

# Deleting the third element
list.pop(2)

# Printing the list after deletion
print(list)
# Output: ['A', 'B', 'D', 'E']"
Construct a python program to copy an array.,"def copyArray(arr): 
  
    res = [] 
  
    for i in range(len(arr)): 
        res.append(arr[i]) 
  
    return res"
Develop a Python program to find all possible words from a set of characters,"def findWords(string):
    results = []
    for i in range(len(string)):
        for j in range(i+1, len(string)+1):
            results.append(string[i:j])
    return results

string = ""abcd""
print(findWords(string))"
Generate a solution for finding all possible subsets of a given set in Python.,"""""""
Generate a solution for finding all possible subsets of a given set in Python.
""""""

def find_subsets(nums):
  subsets = [[]]

  for current_num in nums:
    for i in range(len(subsets)):
      set_to_add = subsets[i] + [current_num]
      subsets.append(set_to_add)

  return subsets

nums = [1, 2, 3]
print(find_subsets(nums))"
Create a Python script to generate a randomly generated password of 8 characters.,"import random

def generate_password():
    password_length = 8
    password_characters = ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$^&*()_+-=""
    password = ''.join(random.sample(password_characters, password_length))
    return password"
Create a class in Python that allows for a linked list of strings.,"class Node:
 def __init__(self, data):
 self.data = data
 self.next = None

class LinkedList:
 def __init__(self):
 self.head = None

def append(self, new_data):
 new_node = Node(new_data)
 if self.head == None:
 self.head = new_node
 return
 last = self.head
 while last.next:
 last = last.next
 last.next = new_node"
Create a program in Python to sort a given list of numbers in ascending order.,"def sort_asc(lst):
    return sorted(lst)"
Suggest a Python program which takes a string as an input and prints the length of the string.,"def string_length(string):
    print(len(string))"
Create a program in Python that will add two numbers entered by the user.,"def add_two_numbers():
    num1 = int(input(""Please enter a number: ""))
    num2 = int(input(""Please enter a another number: ""))
    return num1 + num2"
"Write a python program to extract all the words from a given sentence and store them into a dictionary. Calculate the frequency of each word, and store them in the same dictionary keyed with the words.","words_dict = {}
sentence = ""I love to code""
words = sentence.split()

for word in words:
 if word in words_dict:
 words_dict[word] += 1
 else:
 words_dict[word] = 1

print(words_dict)

# Output:
# {'I': 1, 'love': 1, 'to': 1, 'code': 1}"
Write a function to check if the triangle is valid or not.,"def validity_triangle(a,b,c):
 total = a + b + c
 if total == 180:
    return True
 else:
    return False"
Generate a Python program to convert a given temperature from Fahrenheit to Celsius.,"def fahrenheitToCelsius(fahrenheit):
    celsius = (fahrenheit - 32) * 5 / 9

    return celsius

fahrenheit_value = 68
celsius_value = fahrenheitToCelsius(fahrenheit_value)

print(""{0} Fahrenheit is equal to {1} Celsius"".format(fahrenheit_value, celsius_value))"
Create a Python script to iterate over a list of words and print them out one by one.,"for word in ['cat', 'dog', 'bird']:
    print(word)"
Create a vectorized function in Python that computes the sigmoid of a given number.,"import numpy as np

def sigmoid(x):
    """"""
    Compute the sigmoid of an array of numbers x. 
    """"""
    # Apply the sigmoid function to every element of x 
    sig = np.vectorize(lambda x: 1/(1 + np.exp(-x)))
    return sig(x)

print(sigmoid(5))"
Create a program in Python that takes a URL as input and prints out all the links (href) that appear in the page.,"import requests
from bs4 import BeautifulSoup

url = 'http://www.example.com'

html = requests.get(url).text
soup = BeautifulSoup(html, 'html.parser')

for link in soup.find_all('a'):
 print(link.get('href'))"
Find and remove the unnecessary code in the following Python code snippet.,"def get_data(url):
    data = []
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()"
Construct a decision tree algorithm in Python to classify credit card transactions.,"from sklearn.tree import DecisionTreeClassifier
import numpy as np 

X = np.array([features])
y = np.array([target])

clf_dt = DecisionTreeClassifier()
clf_dt.fit(X,y)

# Predict class labels
preds = clf_dt.predict(X)"
Write a python code to print the current time in the given timezone (America/Chicago).,"import datetime
import pytz
 
def print_time(timezone):
    tz = pytz.timezone(timezone)
    current_time = datetime.datetime.now(tz)
    print(""Current time in {tz}: {time}"".format(tz=timezone, time=str(current_time)))
 
if __name__ == '__main__':
    print_time('America/Chicago')"
Give a Python program to extract a given number of random items from a given list.,"import random

def extract_random_items(lst, num):
q = random.sample(lst, num)
return q"
Create a Python program to sort a list of strings by the descending length of the strings and alphabetically in case of ties.,"unsorted_list = [""hello"", ""world"", ""from"", ""code""]

sorted_list = sorted(unsorted_list, key=lambda s: (-len(s), s))

print(sorted_list)
# Output: [""world"", ""hello"", ""from"", ""code""]"
Create a function that returns multiple values in Python.,"def multiple_values():
    x = 2
    y = 7
    z = ""Hello""
    return x, y, z

x, y, z = multiple_values()

print(x, y, z) # 2 7 Hello"
Design a python program that takes an integer as input and returns the sum of all multiples of 3 and 5 up to (but not including) the given integer.,"def calculate_sum(n):
 sum = 0
 for i in range(n):
  if i % 3 == 0 or i % 5 == 0:
   sum += i
 return sum
 
print(calculate_sum(15)) # 42"
Write a function to extract only the rear index element of each string in the given tuple.,"def extract_rear(test_tuple):
  res = list(sub[len(sub) - 1] for sub in test_tuple)
  return (res) "
Create a class in Python and add two functions to it.,"class MyClass:
    def say_hello(self):
        print(""Hello world!"")
    
    def say_goodbye(self):
        print(""Goodbye!"")"
Create a python program to Reverse Engineer an API and find its endpoints.,"import requests

url = 'http://example.com/api'
response = requests.get(url)

if response.status_code == 200:
    # Find the API endpoints
    data = response.json()
    endpoints = data.get('endpoints')
    print(endpoints)"
"Using Python, write a program that takes a list of strings as input and returns a dictionary where the keys are the strings and the values are the lengths of the strings.","def length_dict(strings):
    length_dict = {}
    for string in strings:
        length_dict[string] = len(string)
    return length_dict

print(length_dict(['apple', 'banana', 'orange'])) # {'apple': 5, 'banana': 6, 'orange': 6}"
Create a Python script to append a list to another list.,"def append_list(list_to_append, list_to_add):
    return list_to_append + list_to_add"
"Given two strings, write a Python program to check if one is an anagram of other.","def isAnagram(str1, str2):
    str1_sorted = sorted(str1)
    str2_sorted = sorted(str2)
    # Compare sorted strings
    if str1_sorted == str2_sorted:
        return True
    else:
        return False

str1 = ""listen""
str2 = ""silent""

print(isAnagram(str1, str2))"
Create a text-based chatbot using Python. The chatbot should have the ability to respond to “hello” and give a warm welcome message.,"import random

while True:
 user_message = input('User: ')
 
if user_message == 'hello':
 response_options = ['Hi', 'Hi there', 'Hello, how are you?', 'Hey there']
 bot_response = random.choice(response_options)
 print(bot_response)
 
elif user_message == 'exit':
 break"
Create a Python program to detect whether a given number is even or odd.,"def detect_even_or_odd(num):
 if num % 2 == 0:
 print(num, ""is Even"")
 else:
 print(num, ""is Odd"")

if __name__ == ""__main__"":
 num = int(input(""Enter a number: ""))
 detect_even_or_odd(num)"
Create a python function that takes a string as an argument and substitues each letter with its corresponding number in the alphabet.,"def letterToNumber(input_string):
    result_string = """"
    for letter in input_string:
        result_string += str(ord(letter)-64)
    return result_string

input_string  = ""Data Science""
substituted_string = letterToNumber(input_string)
print(""Substituted string : "",substituted_string)"
"Write a Python code snippet to get the length of string ""Hello World"".","len(""Hello World"")"
Convert a string into a valid python program that prints the string on the terminal.,print('Hello World!')
Refactor a code snippet that creates a list of numbers from 1 to 10 in Python to use a list comprehension.,"numbers = [x for x in range(1, 11)]"
Design an algorithm in Python to find the maximum value in a binary tree.,"def max_in_tree(node):
    if node is None:
        return -float('inf')
    left_max = max_in_tree(node.left)
    right_max = max_in_tree(node.right)
    return max(node.value, left_max, right_max)"
Convert a given python data structure into a json string using json package,"import json

# convert python data structure to json
data = {
    ""name"": ""John"",
    ""age"": 30,
    ""location"": ""Greece""
}

data_string = json.dumps(data)

print(data_string) # '{""name"": ""John"", ""age"": 30, ""location"": ""Greece""}'"
How would you convert a string to float in Python?,"We can use the float() function to convert a string to float in Python. We can pass the string to the function as an argument and it will return the float representation of the same.

Example:

string_value = ""12.45""
float_value = float(string_value)

print(float_value) #Output: 12.45"
Write a function in Python to convert a string of text into separate words in a list.,"def convert_to_list(sentence):
 words = []
 for word in sentence.split():
  words.append(word)
 return words

result = convert_to_list(""The quick brown fox jumped over the lazy dog."")
print(result)
# Output: ['The', 'quick', 'brown', 'fox', 'jumped', 'over', 'the', 'lazy', 'dog.']"
Use a random forest model in Python to predict the sale price of a house.,"import pandas as pd
from sklearn.ensemble import RandomForestRegressor

# Create
data = {'Size': [500], 
'Rooms': [4]}

df = pd.DataFrame(data)

# Train
X = df[['Size','Rooms']] 
Y = df['Price'] 

regressor = RandomForestRegressor(n_estimators = 10, random_state = 0) 
regressor.fit(X, Y)

# Predict
regressor.predict([[500,4]]) # Predicted price: 1716.275"
Write a Python script to generate all possible permutations of a set of input strings.,"def permute(input):
 res = []
 for i in range(len(input)):
 for result in permute(input[:i] + input[i + 1:]):
 res.append([input[i]] + result)    
 return res

inputValues = ['a', 'b', 'c']
permutations = permute(inputValues)

for perm in permutations:
 print(perm)"
Design a class in Python that implements a stack,"class Stack:
    def __init__(self):
        self.items = []
    
    def isEmpty(self):
        return self.items == []
    
    def push(self, item):
        self.items.append(item)
    
    def pop(self):
        return self.items.pop()
    
    def peek(self):
        return self.items[len(self.items)-1]
    
    def size(self):
        return len(self.items)"
Write a python function to find the slope of a line.,"def slope(x1,y1,x2,y2): 
    return (float)(y2-y1)/(x2-x1)  "
Create a python script to split a string into its word components.,"def split_words(s): 
    words = s.split("" "") 
    return words  
s = ""Hello,World!""
words = split_words(s) 
print(words)"
Analyze this Python code and suggest any improvements.,"def calc_sum(a, b): 
    return a + b

sum = 0 
for i in range(5): 
    sum += calc_sum(i, i + 1)

print(sum) 

# Suggested fix:
sum = 0 
for i in range(0, 5):    # Use the range(start, stop) syntax
    sum += sum + calc_sum(i, i + 1)

print(sum)"
Write a function to find minimum k records from tuple list.,"def min_k(test_list, K):
  res = sorted(test_list, key = lambda x: x[1])[:K]
  return (res) "
Optimize the following python program to reduce running time.,"def sum_numbers(arr):
    s = 0
    for i in range(len(arr)):
        s += arr[i]
    return s"
Write a python program to calculate the sum of series 1 + 1/3 + 1/5 + ....,"""""""
Calculate the sum of series 1 + 1/3 + 1/5 + ...
""""""

def sum_series(n):
    result = 0 
    for i in range(1, n+1):
        result += (1 / (2 * i - 1))
    return result
 
if __name__ == '__main__':
    n = 5
    print(sum_series(n))"
Create a Python program to count the occurrence of a specific word in a string.,"def count_occurences(string, word):
    count = 0
    words = string.split(' ')
    for w in words:
        if w == word:
            count += 1
    return count
 
string = 'The quick brown fox'
word = 'The'
 
occurrences = count_occurences(string, word)
print('""The"" occurs', occurrences , 'times in the string.')"
Create a code to parse a web page and check whether or not a particular keyword appears in the page.,"import requests

def check_if_keyword_exists(url, keyword):
    response = requests.get(url)
    if keyword in response.text:
        return True
    return False

keyword = ""python""
print(check_if_keyword_exists(""https://en.wikipedia.org/wiki/Python_(programming_language)"", keyword)) # Output: True"
Develop a Python program for solving a quadratic equation.,"import cmath

def quadratic_equation(a, b, c):
 # calculate the discriminant
 d = (b**2) - (4*a*c)
 
 # find two solutions
 sol1 = (-b-cmath.sqrt(d))/(2*a)
 sol2 = (-b+cmath.sqrt(d))/(2*a)
 
 return sol1, sol2
 
if __name__ == ""__main__"":
 a = 1
 b = 5
 c = 6
 
 solutions = quadratic_equation(a, b, c)
 
 print('The solution are {0} and {1}'.format(solutions[0],solutions[1]))"
"Given a list of phone numbers, extract only the ones that start with 08 using Python.","phone_numbers = ['0834567', '0945678', '07123456', '08901234', '07890123']
result = [number for number in phone_numbers if number.startswith('08')]
print(result)"
Generate a Python program to calculate the average of the the numbers 1-k.,"def average(k):
    sum = 0
    for i in range(1, k+1):
        sum += i

    return sum / k"
Create a python function to parse a character-separated string,"def parse_str(str, separator):
    strList = str.split(separator) 
    return strList"
Implement quick sort in Python.,"def quick_sort(arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quick_sort(left) + middle + quick_sort(right)"
Write a Python script to generate a valid Checksum number.,"def calculate_checksum (data):
    checksum = 0
    for char in data:
        checksum += ord(char)
    return checksum % 256"
"Slice and dice a given list in Python to filter out elements starting with the letter ""a"".","lst = [""apple"", ""banana"", ""orange"", ""apricot""]
  
filtered_list = [ele for ele in lst if ele[0] == 'a'] 
  
# printing filtered elements 
print(""filtered list: "", filtered_list)"
Create a Python program to display the current date in MM/DD/YYYY format.,"from datetime import datetime

date = datetime.today()
date_formatted = date.strftime('%m/%d/%Y')
print(date_formatted)"
Can you create a loop in Python to find the highest value in an array?,"max_val = arr[0]
for num in arr:
    if num > max_val:
        max_val = num
print(max_val)"
Generate code to asynchronously execute multiple tasks in Python.,"from concurrent.futures import ThreadPoolExecutor

def asynchronous_tasks(tasks):
    # initialize a thread pool executor 
    pool_executor = ThreadPoolExecutor(max_workers=4)

    # submit tasks to the executor 
    futures = [pool_executor.submit(task) for task in tasks]

    # wait for the tasks to finish 
    for future in futures:
        print(future.result())"
Design a Python program to convert the temperature in Celsius to Fahrenheit.,"# Program to convert the temperature 
# from Celsius to Fahrenheit 

celsius = 25.2
fahrenheit = (celsius * 9/5) + 32
 
print('%.2f degree Celsius is: %0.2f degree Fahrenheit' %(celsius,fahrenheit)) 

# Output: 25.20 degree Celsius is: 77.36 degree Fahrenheit"
Create a Python function for converting a list to a dictionary. The function should take a list of key-value tuples and return a dictionary.,"def list_to_dict(input_list):
 result = {}
 for key, value in input_list:
 result[key] = value
 return result

list_to_dict([('a', 1), ('b', 2), ('c', 3)]) 
#{'a': 1, 'b': 2, 'c': 3}"
"Create a SQLite database in Python, with one table containing the fields ""name"", ""country"" and ""population"".","import sqlite3

# create a connection to the database
conn = sqlite3.connect(""example.db"")

# create the database
c = conn.cursor()
c.execute(""create table countries (name text, country text, population int)"")

# commit changes
conn.commit()

# close the connection
conn.close()"
Suggest an algorithm in Python to generate the nth prime number.,"def nth_prime_number(n):
    if n==1: 
        return 2
    count, num = 1, 3 
    while count < n: 
        for i in range(2,num): 
            if num % i == 0: 
                break
        else: 
            count += 1
        num += 2
    return num"
Write a Python program to find the nearest 3 squares to a given number.,"def findNearestSquares(n):
  nearestSquareList = []
  i = 1
  # Find all the nearest squares
  while i * i <= n:
    nearestSquareList.append(i * i)
    i += 1
  
  # Find the nearest 3 squares
  nearest3Squares = nearestSquareList[-3:]
  
  return nearest3Squares

nearest3Squares = findNearestSquares(30)
print(nearest3Squares)

# Output:
# [25, 28, 29]"
Design an algorithm in Python to detect an anagram in a string.,"def isAnagram(string):
    for i in range(len(string)):
        for j in range(i + 1, len(string)):
            if sorted(string[i]) == sorted(string[j]):
                return True
    return False"
Design a Python function to replace all occurrences of ‘x’ in a string with ‘y’.,"def replaceXWithY(str, x, y):
    while x in str:
        str = str.replace(x, y)
    return str

result = replaceXWithY(""xx123xx456xx"", ""x"", ""y"")
print(result)"
Write a python function to remove odd numbers from a given list.,"def remove_odd(l):
    for i in l:
        if i % 2 != 0:
            l.remove(i)
    return l"
Generate a Python function to return the elements of a given list in reverse order without using any library.,"def reverse_list(lst): 
  reversed_list = []
  for i in range(len(lst)-1, -1, -1):
    reversed_list.append(lst[i])
  return reversed_list

result = reverse_list([1,2,3,4,5])
print(result)"
Create a function in Python to animate a Gif.,"from PIL import Image
from images2gif import writeGif

def animateGif(images, filename, duration=0.1):
    frames = []

    for image in images:
        frames.append(Image.open(image))

    writeGif(filename, frames, duration=duration)"
Generate code for a Python class that contains functions to add and remove elements from a list.,"class MyList:
    def __init__(self):
        self.elements = []

    def add_element(self, element):
        self.elements.append(element)

    def remove_element(self, index):
        del self.elements[index]"
Design a class to convert Fahrenheit to Celsius in Python.,"class TempConverter:

    def __init__(self, temp_in_fahrenheit):
        self.temp_in_fahrenheit = temp_in_fahrenheit

    def convert_f_to_c(self):
        temp_in_celsius = (self.temp_in_fahrenheit - 32) * 5/9
        return temp_in_celsius"
Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.,"import re
def change_date_format(dt):
        return re.sub(r'(\d{4})-(\d{1,2})-(\d{1,2})', '\\3-\\2-\\1', dt)"
Edit the code to make it in a Python program to check if a number is divisible by 5 and 11.,"def isDivisible(num): 
    if num % 5 == 0 and num % 11 == 0:
        print(""Number is divisible by 5 and 11"") 
    else:
        print(""Number is not divisible by 5 and 11"")"
Create a program in Python to capitalize the first letter of a given string.,"def capitalize_first_letter(text):
  return text[0].upper() + text[1:]

print(capitalize_first_letter(""hello world"")) # Output: Hello world"
Write a Python program for a given list of numbers to generate a new sorted list containing only the even numbers in the list.,"def get_even_list(list):
    """"""
    Generate a new sorted list containing only the even numbers in a given list.
    list: the list to be checked
    """"""
    even_list = [number for number in list if number % 2 == 0]
    even_list.sort()
    return even_list"
Create a Python program to generate a list of prime numbers up to a certain number.,"primes = []

for num in range(2,101):
 for i in range(2,num):
 if (num % i) == 0:
 break
 else:
 primes.append(num)

print(primes)"
Write a Python 3 code snippet to check for the presence of a specific value in a dictionary.,"def is_value_in_dict(key, my_dict):
  return key in my_dict"
Write a Python program to concatenate two strings and print the combined string.,"string1 = 'I love'
string2 = 'Programming'

output = string1 + string2

print(output)

# Output
I love Programming"
Generate a code to print the stack trace in Python when an exception occurs.,"import traceback

try:
    # some code that might generate exceptions
    pass
except Exception as e:
    print(traceback.format_exc())"
Generate a function to check for palindrome strings in Python.,"def check_palindrome(string):
  reversed_string = string[::-1]
  if string == reversed_string:
    return True
  else:
    return False"
Translate the following pseudocode into Python,"def count_even(arr): 
    count = 0
    for x in arr: 
        if x % 2 == 0: 
            count += 1
    return count"
Create a Python function that takes in a string and an integer and returns a string with the input string repeated the number of times indicated by the input integer.,"def repeat_string(s, n):
    return s*n

print(repeat_string('Hello', 3))
# Output: 'HelloHelloHello'"
Create a Python program to automatically delete any repeated words from a given text.,"text = ""The cat was running in the park""

words = text.split(' ')
unique_words = []

for word in words:
 if word not in unique_words: 
  unique_words.append(word)

print(' '.join(unique_words))"
Create an API endpoint in Python that takes a text string as input and outputs a JSON response with the text reversed.,"from flask import Flask, request, jsonify

app = Flask(__name__)

@app.route('/reverse', methods=['POST'])
def reverse():
 data = request.get_json()
 text = data['text']
 reversed_text = text[::-1]

 return jsonify({'reversed_text': reversed_text})

if __name__ == '__main__':
 app.run()"
Write a function to count the longest repeating subsequences such that the two subsequences don’t have same string characters at same positions.,"def find_longest_repeating_subseq(str): 
	n = len(str) 
	dp = [[0 for k in range(n+1)] for l in range(n+1)] 
	for i in range(1, n+1): 
		for j in range(1, n+1): 
			if (str[i-1] == str[j-1] and i != j): 
				dp[i][j] = 1 + dp[i-1][j-1] 
			else: 
				dp[i][j] = max(dp[i][j-1], dp[i-1][j]) 
	return dp[n][n]"
Design an algorithm in Python to search a list of numbers for a particular number and return the index at which the number is located.,"def search(nums, target):
    for i, num in enumerate(nums):
        if target == num:
            return i
    return -1"
Write a Python code snippet to obtain the average of the elements in a given list.,"def average(list):
 total = 0
 for num in list:
 total += num
 return total / len(list)

print(average([2, 3, 5, 4]))"
Replace the element 'apple' in a given array with 'pear' using python code.,"A = ['apple', 'banana', 'orange', 'grape']
A[0] = 'pear'
print(A) # Output:  ['pear', 'banana', 'orange', 'grape']"
Create a function in Python that removes duplicates from a list of items.,"def remove_duplicates(items):
  no_duplicates = []
  for item in items:
    if item not in no_duplicates:
      no_duplicates.append(item)
  return no_duplicates

items = [1, 2, 3, 2, 4, 1]

result = remove_duplicates(items)

print(result) # [1, 2, 3, 4]"
Implement a Python Script that prints out all the prime numbers between 0 and a given number.,"def find_primes(number):
    for num in range(1, number + 1):
       # prime numbers are greater than 1
        if num > 1:
            for i in range(2, num):
                if (num % i) == 0:
                    break
            else:
                print(num)

find_primes(20)"
Write a function to extract values between quotation marks of a string.,"import re
def extract_values(text):
 return (re.findall(r'""(.*?)""', text))"
"Create a Python program that prints the numbers from 1 to 100, except when the number is divisible by 3, print ""Fizz"" and when the number is divisible by 5, print ""Buzz"" and when the number is divisible by both, print ""FizzBuzz"".","for i in range(1, 101):
 if i%3 == 0 and i%5 == 0:
  print(""FizzBuzz"")
 elif i%3 == 0:
  print(""Fizz"")
 elif i%5 == 0:
  print(""Buzz"")
 else:
  print(i)"
Create a Python script to remove the item 'Apple' from the given array.,"def remove(arr):
    result = []
    for item in arr:
        if item != ""Apple"":
            result.append(item)
    return result

print(remove([""Banana"", ""Orange"", ""Apple""])) # Output: [""Banana"", ""Orange""]"
"Write a Python program to print all the numbers from 1 to n (inclusive), where n is a given number.","for i in range(1, n+1): 
 print(i)"
"Write a Python script that creates a class ""Student"" that has two attributes name and age.","class Student:
    def __init__(self, name, age):
        self.name = name
        self.age = age"
Write a Python program to classify a given set of integers depending on the parity of the remainder when they are divided by 2.,"def classifyIntegersByOddEven(arr):
    evens = []
    odds = []
    
    for num in arr:
        if num % 2 == 0:
            evens.append(num)
        else:
            odds.append(num)
    
    return evens, odds

evens, odds = classifyIntegersByOddEven([1, 8, 4, 120])
print('Evens: ', evens)
print('Odds: ', odds)"
Establish a connection to a MySQL database using Python.,"# Python program to establish connection to a MySQL database

import mysql.connector

# establish connection
mydb = mysql.connector.connect(host=""localhost"", user=""yourusername"", passwd=""yourpassword"")

# create a cursor
mycursor = mydb.cursor()"
Construct a Python program that reverses an array.,"def reverse_array(arr): 
    low = 0
    high = len(arr) - 1
    
    while low < high: 
        arr[low], arr[high] = arr[high], arr[low] 
        low += 1
        high -= 1
  
    return arr"
Develop a Python program that reads in a string and reverses the words in it maintaining their order.,"def reverseWords(str): 
    words = str.split("" "") 
  
    newWords = [word[::-1] for word in words] 
  
    newString = "" "".join(newWords) 
  
    return newString 
      
print(reverseWords(""This is a sample string"")) 
# Result: sihT si a elpmas gnirts"
Write a Python program to predict the future stock price of a company.,"import pandas as pd

# Read the data
data = pd.read_csv(""apple stock data.csv"")

# Extract the data points
X = data[['open', 'high', 'low', 'volume']]
y = data['close']

# Fit the model
model.fit(X, y)

# Predict the stock price of Apple in 2021 
predict = model.predict([[Apple_open, Apple_high, Apple_low, Apple_volume]])
print(predict)"
Generate a Python program that takes in a list of strings and outputs a new list containing only those that are between 3 and 7 characters long.,"def filterList(lst):
  result = []

  for s in lst:
    if 3 <= len(s) <= 7:
      result.append(s)
  
  return result

print(filterList(['apple', 'banana', 'strawberry', 'orange'])) # ['apple', 'banana', 'orange']"
Write a Python program to detect duplicate numbers in a given array.,"duplicate_numbers = []
for i in range(len(arr)):
  for j in range(i + 1, len(arr)):
    if arr[i] == arr[j]:
      duplicate_numbers.append(arr[i])

print(duplicate_numbers) # Output: [10, 20]"
Create a python program to return the element most frequently occurring in a list?,"def most_frequent(lst):
    count = 0
    max_element = 0
    for element in lst:
        curr_count = lst.count(element)
        if curr_count > count:
            count = curr_count
            max_element = element
    return max_element"
Write a Python program to extract odd elements from a list.,"mylist = [2, 3, 4, 5, 6, 7, 8]

odd_list = []
for num in mylist:
    if num % 2 != 0:
        odd_list.append(num)

print(odd_list) #[3, 5, 7]"
Generate a python function that takes an array as an argument and returns the distinct elements in the array.,"def distinct_values(arr):
    distinct_arr = []
    for element in arr:
        if element not in distinct_arr:
            distinct_arr.append(element)
    return distinct_arr"
Write a Python program to separate the given string into a list of words.,"# Split the string into words 
words = string.split(' ') 

# Print the list of words 
print(words) # Output: ['This', 'is', 'a', 'test', 'string']"
"Write and edit a Python function to filter a list of strings, removing any string at least 4 characters in length that contains the letter 'k'.","def filter_list(list):
    return [item for item in list if len(item) < 4 or 'k' not in item]

my_list = filter_list(my_list)
print(my_list)

# Output:
# ['cat', 'dog']"
Write a Python script to generate a dictionary with counts of unique characters in a given string.,"def char_count(string):
    char_dict = {}
    for char in string:
        if char in char_dict:
            char_dict[char] += 1
        else:
            char_dict[char] = 1
    return char_dict

string = ""Hello World!""
result = char_count(string)
print(result)

# Outputs: {'H': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'W': 1, 'r': 1, 'd': 1, '!': 1}"
"Given a JSON record of a customer, write a Python program to extract the customer's name.","import json

data = json.loads('{
    ""name"": ""John Smith"",
    ""age"": 35
}')

customer_name = data[""name""]
print(customer_name)"
Write a python function to count the number of digits in factorial of a given number.,"import math 
def find_Digits(n): 
    if (n < 0): 
        return 0;
    if (n <= 1): 
        return 1; 
    x = ((n * math.log10(n / math.e) + math.log10(2 * math.pi * n) /2.0)); 
    return math.floor(x) + 1; "
Write a Python program to generate documentation in HTML format for a given Python solution.,"def generate_html_doc(solution):
 html = ""<html>\n<head>\n<title>Python Documentation</title>\n</head>\n<body>\n\n<h1>Solution</h1>\n\
<pre>\n""
 html += solution + ""\n</pre>\n\n</body>\n</html>""
 return html"
Calculate the number of possible permutations of a string using the following Python function.,"def factorial(string): 
   len_string = len(string) 
   permutations = 1
   for i in range(1, len_string + 1): 
      permutations *= i 
   return permutations 

result = factorial(word) 
print(result)"
Write a function in Python to input a single number and display the square of that number.,"def display_square(number):
    result = number * number
    print(result)

display_square(5)"
Create a function to calculate the sum of a sequence of integers.,"# Python code
def sum_sequence(sequence):
  sum = 0
  for num in sequence:
    sum += num
  return sum"
Write a function in Python that takes 2 numbers and returns their GCD.,"def findGCD(a,b): 
    if (a == 0) 
        return b 
    if (b == 0) 
        return a 
    
    if (a == b): 
        return a 
          
    # If a is greater 
    if (a > b): 
        return findGCD(a-b, b) 
    return findGCD(a, b-a) 

if __name__ == '__main__': 
      a = 48 
      b = 18 
      print(""GCD of"", a , b, ""is:"", findGCD(a, b))"
"Given the following code snippet, create a function in Python that takes two strings and returns true if one string is a substring of the other.","def is_substring(s1, s2):
 # check for empty strings 
 if s1 == '' or s2 == '':
 return False
 
 # check if s2 is a substring of s1
 if s1.find(s2) > -1:
 return True
 
 return False"
Design a software that reverse orders of string words.,"def reverse_string_words(string): 
    words = string.split("" "") 
    words.reverse()
    return ' '.join(words)  
  
string = ""Python programming is fun""
print(reverse_string_words(string))"
Compute the area of a given circle using its radius in Python.,"import math

def calculateCircleArea(radius):
    area = math.pi * radius * radius
    return area

radius = 5

print(""Area of a circle with radius 5 is: "", calculateCircleArea(radius))"
Create a Python script to fill empty cells in a Pandas DataFrame with the median value for that column.,"import pandas as pd

# Replace empty cells with the median value of the column
df = df.fillna(df.median())

# Check if the null values have been replaced
print(df.isnull().sum())"
Create a web scraping program in Python to extract text from a website,"import requests
from bs4 import BeautifulSoup

# provide the url of the website you want to scrape 
url = 'https://example.com'

# send request to the server and get the html content
r = requests.get(url) 

# parse the html content
soup = BeautifulSoup(r.content, 'html.parser') 

# extract text
text = soup.find_all(text=True)

for t in text:
  print(t.strip())"
Generate a lambda function in Python to find the average of all the elements in a list.,"list_nums = [1, 2, 3, 4, 5]

average = lambda list_nums: sum(list_nums) / len(list_nums)

print(average(list_nums))"
Create a Python program to scrape data from a web page given an URL.,"import requests
from bs4 import BeautifulSoup

def scrape_webpage(url):
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')
    return soup"
Provide a Python program to find the average number of elements in the nested list.,"def avg_elements(list_of_lists):
    total_elements = 0
    for sublist in list_of_lists:
        total_elements += len(sublist)
    return total_elements / len(list_of_lists)"
Write a Python program to get the size of an object in bytes,"import sys

def get_object_size(obj):
    #Return the size of the object in bytes
    return sys.getsizeof(obj)"
Module a Python program that takes two numbers and computes the sum of their squares.,"def squared_sum(a, b):
    """"""
    Computes the sum of the squares of two given numbers
    """"""
    return a**2 + b**2

if __name__ == '__main__':
    a = 3
    b = 4
    result = squared_sum(a, b)
    print('The sum of {} and {} squares is: {}'.format(a, b, result))"
Write a function to find the volume of a cuboid.,"def volume_cuboid(l,w,h):
  volume=l*w*h
  return volume"
Create a program in Python for generating a Fibonacci sequence.,"# Generate a Fibonacci sequence

# Function to generate Fibonacci sequence
def Fibonacci(n):
    if n < 0:
        print(""Incorrect input"")
    elif n == 1:
        return 0
    elif n == 2:
        return 1
    else:
        return Fibonacci(n-1) + Fibonacci(n-2)

# Print the sequence upto n terms
terms = 10
print(""Fibonacci sequence:"")
for num in range(1, terms + 1):
    print(Fibonacci(num))"
Categorize the following Github repositories:,"Repo A: Python, JavaScript, HTML
Repo B: Java, JavaScript, CSS"
Write a Python script to generate 100 random numbers from 1-10.,"import random
 
random_nums = [random.randint(1, 10) for _ in range(100)]
 
print(random_nums)"
Generate a Python code that takes in two sets of coordinates and prints the distance between them,"def calculate_distance(p1, p2):
  x1, y1 = p1
  x2, y2 = p2
  return ((x2 - x1)**2 + (y2 - y1)**2)**0.5"
Create a class in Python to model a Point and its methods.,"class Point:
  def __init__(self, x, y):
    self.x = x
    self.y = y

  def move(self, dx, dy):
    self.x += dx
    self.y += dy

  def distance(self, other_point):
    return ((self.x - other_point.x)**2 + (self.y - other_point.y)**2)**0.5

#example 
p1 = Point(2,3)
p2 = Point(5,7)

print(p1.distance(p2))"
Write a function in Python to find the power of a given number n using an iterative approach.,"def power_iterative(n, exponent):
  # First, set an initial product value
  product = 1
  # Iterate up to the desired power
  for _ in range(exponent):
    product *= n
  # Return the product
  return product

power = power_iterative(3, 4)
print(power)"
Create a function to filter out strings that are longer than 10 characters.,"def filter_long_strings(arr):
  result = []
  for word in arr:
    if len(word) <= 10:
      result.append(word)
  return result

myArr = [""Hello"", ""World"", ""Python"", ""Programming""]
print(filter_long_strings(myArr))

# Output: [""Hello"", ""World"", ""Python""]"
Create a Python program to search a given list of strings to find any matches to a given substring.,"matches = []

for string in list_of_strings:
 if substring.lower() in string.lower():
 matches.append(string)

print(""Matches: "", matches)
# Output: Matches: ['Google', 'Amazon']"
Create a program in Python to compute the host BMI given a user’s height and weight.,"def compute_bmi(height, weight):
    bmi = weight / (height * height)
    return bmi

bmi = compute_bmi(172, 85)
print(""Your BMI is {:.2f}"".format(bmi))"
Create a Python program for finding all combinations of numbers that equal a given target number.,"def find_combos(target):
 combos = []
 
 for i in range(int(target/2)+1):
 # increments of two to avoid duplicate results
 for j in range(i, int(target/2)+1, 2):
 if i+j == target:
 combos.append((i,j))
 
 return combos

combos = find_combos(10)
print(combos)"
Create a python program that determines whether or not a number if prime,"def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, n):
        if n % i == 0:
            return False
    return True"
"Given a string containing a sentence, create a function in Python that returns a list of words in the sentence that are longer than 5 characters.","def long_words(sentence):
 words = sentence.split(' ')
 long_words = []
 
 for word in words:
   if len(word) > 5:
     long_words.append(word)
 
 return long_words"
Create a heap data structure in Python using the heapq library.,"import heapq

def create_heap(items):
 heapq.heapify(items)

def add_item(items, item):
 heapq.heappush(items, item)

def pop_item(items):
 return heapq.heappop(items)

items = [4, 5, 2, 33, 1]
create_heap(items)
add_item(items, 6)
pop_item(items)"
"Rewrite the following JavaScript function to Python. The function takes two parameters and returns their product. 
 
 function multiply(x, y) {
   return x * y;
 }","def multiply(x, y):
    return x * y;"
Detect the data type of a given string in Python.,str type
Create a mathematical expression solver function in Python.,"def expression_solver(expression):
    '''This function solves a given mathematical expression'''

    return eval(expression)

expression = ""2 + 2""

result = expression_solver(expression)

print(result) # 4"
Create a Python program to print the even numbers from a given list.,"[2, 4, 6, 8]"
Create a function in Python that takes in an integer and returns an array containing its prime factors.,"def prime_factors(num):
    res = []
    while num%2 == 0:
        num = num/2
        res.append(2)
    for i in range(3, int(num**0.5)+1,2):
        while num%i == 0:
            num = num//i
            res.append(i)
    if num > 2 :
        res.append(int(num))
    return res

print(prime_factors(38))"
Design and implement a Python class that implements a basic stack.,"class Stack:
 def __init__(self):
 self.items = []

 def push(self, item):
 self.items.append(item)

 def pop(self):
 return self.items.pop()

 def peek(self):
 return self.items[-1]

 def is_empty(self):
 return self.items == []

 def size(self):
 return len(self.items)"
Create an algorithm in Python to calculate the area of a triangle.,"def calculate_area(a,b,c): 
    # calculate the semi-perimeter 
    s = (a + b + c) / 2
    # calculate the area 
    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5
    return area 
  
# Driver code 
a = 5
b = 10
c = 13
area = calculate_area(a,b,c) 
  
print(""The area of the triangle is {} cm"".format(area))"
Write a code snippet in Python to print the current month.,"import calendar

# get the current month 
current_month = calendar.month_name[calendar.datetime.now().month]
print('Current Month is %s' %current_month)"
Write a Python program to print an empty square based on size,"def print_square(size): 

    # loop to print size number of lines 
    for _ in range(size): 

        # print stars on each line 
        print(""*"" * size) 

if __name__ == '__main__':
    size = 8
    print_square(size)"
Create a Python script to merge two dictionaries.,"def merge_dicts(dict1, dict2):
    res = {**dict1, **dict2}
    return res

dict1 = {'a': 1, 'b': 2}
dict2 = {'c': 3, 'd': 4}

merged_dicts = merge_dicts(dict1, dict2)

print(merged_dicts)"
Create a Python program to find the nth Fibonacci number,"def Fibonacci(n): 
    if n<0: 
        print(""Incorrect input"") 
    elif n==0: 
        return 0
    elif n==1: 
        return 1
    else: 
        return Fibonacci(n-1)+Fibonacci(n-2)"
Write a Python program to create a histogram representing the frequency distribution of a set of data.,"import matplotlib.pyplot as plt 

data = [1, 2, 3, 4, 5, 5]

plt.hist(data, bins=5) 
plt.title(""Frequency Distribution"")
plt.show()"
Create a Python program that reads in a list of strings from the keyboard and sorts them alphabetically.,"sorted_list = []
input_strings = input(""Enter a list of strings, separated by spaces: "")

input_strings = input_strings.split()
for string in input_strings:
    sorted_list.append(string)

sorted_list.sort()

print(sorted_list)"
Devise a python code which will generate a new list with each element of the list squared.,"def square_list(arr):
    result = [num**2 for num in arr]
    return result"
Write a Python program to find the sum of the first n natural numbers.,"def sum_of_n_numbers(n):
  sum = 0
  for i in range(n+1):
      sum += i
  return sum"
Create a python program which appends a new item to a given list.,"def append_to_list (list_data, new_item):
    list_data.append(new_item)
    return list_data"
Write a Python function that takes two arguments and prints the sum.,"def print_sum(a, b):
    print(a + b)"
Create a recursive program in Python which prints out the Fibonacci Sequence,"def Fibonacci_Sequence(num): 
    if num <= 0: 
        return 0
    elif num == 1: 
        return 1
    else: 
        return Fibonacci_Sequence(num-1) + Fibonacci_Sequence(num-2) 
    
# Program to print the Fibonacci Sequence 
num = int(input(""Enter the number of fibonacci sequence: ""))
if num < 0:
    print(""Incorrect input"")
for i in range(num): 
    print(Fibonacci_Sequence(i))"
Generate a python program to alphabetically sort the following list.,"my_list = [""Paul"", ""John"", ""George"", ""Ringo""]
my_list.sort() 
print(my_list)"
"Implement a function in Python that given an array of integers, returns the largest number in the array.","def get_largest_number(arr):
  max_val = arr[0]
  for n in arr:
    if n > max_val:
      max_val = n
  return max_val

arr = [1, 2, -4, 8, 3, 7]
ans = get_largest_number(arr)
print(ans) # Output 8"
Compose a Python program to convert a list of multiple integers into a single integer.,"def convert_to_integer(my_list):
    my_integer = int("""".join(map(str, my_list))) 
    return my_integer"
Write a python script to compute the mean of a list of integers.,"def find_mean(X):
    # Compute the sum of all the elements in the list
    sum_x = 0
    for x in X:
        sum_x += x
    
    # Compute the mean
    mean = sum_x / len(X)
    
    return mean

if __name__ == '__main__':
    X = [2,4,6,8,10]
    print(find_mean(X))"
Create a Python program to determine the missing elements from a given list.,"def find_missing_elements(list):
    missing_elements = []
    for i in range(min(list), max(list)):
        if i not in list:
            missing_elements.append(i)
    return missing_elements"
Design a Python script to output all values in a given list that are factors of a given integer.,"def factors(list,integer):
    factors_list = []
    for num in list:
        if integer % num == 0:
            factors_list.append(num)
    return factors_list

print(factors([1,2,3,4,5,6], 6))  # [1, 2, 3, 6]"
Create a function in Python that takes in a string and returns the frequency of each character in the string in form of a dictionary.,"def frequency(string): 
    freq = {} 
    for i in string: 
        if i in freq: 
            freq[i] += 1
        else: 
            freq[i] = 1
    return freq

print(frequency('hello world'))"
Write Python code to search a given collection of books to find all books containing the text “Alice in Wonderland”,"def find_books_with_alice(books):
    found_books = []
    for book in books:
        if ""Alice in Wonderland"" in book.Text:
            found_books.append(book)
    return found_books"
Explain what is the purpose of the reduce() function in Python.,"The reduce() function in Python is a part of the functools module. It receives a function and a sequence as arguments and applies the function to each item of the sequence, from left to right, cumulatively. The reduce() function reduces the sequence to a single value by combining items from the sequence using the function that is passed in as argument."
Write a python function to convert a list of multiple integers into a single integer.,"def convert(list): 
    s = [str(i) for i in list] 
    res = int("""".join(s))  
    return (res) "
"Create a class in Python that takes a string as a constructor argument and stores it in a list. The class should have a method that prints the string, followed by the phrase “was stored”","class StringList:
    def __init__(self, string):
        self.stringlist = [string]
    
    def printString(self):
        for s in self.stringlist:
            print(s + ' was stored')

mylist = StringList('Hello World')
mylist.printString()"
Write a Python script that takes in two lists of length n and outputs a set of combinations of the two lists such that the resulting list is of length n^2.,"combinations = []

for i in range(len(list1)):
for j in range(len(list2)):
combinations.append((list1[i], list2[j]))

print(combinations)
# Output: [(1,4), (1,5), (1,6), (2,4), (2,5), (2,6), (3,4), (3,5), (3,6)]"
Write a Python program to find the elements that are present in both lists.,"list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]

common_elements = []
for i in range(len(list1)):
 for j in range(len(list2)):
  if list1[i] == list2[j]:
   common_elements.append(list1[i])

print(common_elements) # [3, 4]"
Write an algorithm in Python that searches for a given keyword in a list of strings.,"def keyword_search(string_list, keyword):
  found = False
  for string in string_list:
    if keyword in string:
      found = True
      break
  return found

result = keyword_search(string_list, keyword)

if result:
  print(""The keyword was found"")
else:
  print(""The keyword was not found"")"
Write a Python program to do the following:,"def product(x, y):
    return x * y"
Generate a python script to extract the 10th row from a table,"import pandas as pd

# read the table
table = pd.read_csv('table_name.csv')

# Extract the 10th row
row = table.loc[9, :]

# Print the row
print('The 10th row is: ', row)"
Generate a Python code to print all the animal types entered in a list,"animal_list = [""dog"", ""cat"", ""mouse"", ""snake""] 

for animal in animal_list:
    print(animal)"
Develop a Python program that can convert a given amount in American Dollar (USD) to British Pound Sterling (GBP).,"# Python code:
def convert_usd_to_gbp(usd):
  gbp = usd / 1.3
  return gbp

usd = 500
gbp = convert_usd_to_gbp(usd)

print(f""{usd} USD = {gbp:.2f} GBP"")"
Improve the Python method provided so that it checks whether the given array is a palindrome or not.,"def is_palindrome(arr):
    mid = len(arr) // 2
    for i in range(mid):
        if arr[i] != arr[len(arr) - 1 - i]:
            return False
    return True

arr = [1, 2, 3, 2, 1]
print(is_palindrome(arr))"
Generate code in python to automate the following task,"def find_number_greater_than_10(arr):
    for num in arr:
        if num > 10:
            return num

# Example
data_set = [1, 2, 11, 20, 6, 7]
print(find_number_greater_than_10(data_set))  # Output: 11"
Can you suggest a code snippet that fetches the last element from a list in Python?,"my_list = [3, 5, 7, 9, 2]

last_element = my_list[-1]
print('Last element in the list is %d' % (last_element))"
Create a Python function to create a dictionary from a given list of tuples with the first elements of each tuple as the key.,"def create_dict(tuples): 
  dictionary = {} 
  
  for item in tuples: 
    dictionary[item[0]] = item[1]
  
  return dictionary 
  
tuples = [(""a"", ""b""), (""c"", ""d""), (""e"", ""f"")]
print(create_dict(tuples)) 

# Output
{'a': 'b', 'c': 'd', 'e': 'f'}"
Create a Python 3 function to calculate the length of a string.,"def get_str_length(string):
  return len(string)

print(get_str_length(string)) # outputs 13"
"Given a matrix, write a Python function to transpose the matrix (swap the rows and columns of the matrix).","def transpose_matrix(matrix):
    m = len(matrix)
    n = len(matrix[0])
    result = []

    for j in range(n):
        row = []
        for i in range(m):
            row.append(matrix[i][j])
        result.append(row)
    return result"
Implement a Stack data structure in Python,"class Stack:
    def __init__(self): 
        self.stack = [] 
  
    def is_empty(self): 
        return self.stack == [] 
  
    def push(self, data): 
        self.stack.append(data) 
      
    def pop(self): 
        data = self.stack[-1] 
        del self.stack[-1] 
        return data 
  
    def peek(self): 
        return self.stack[-1] 
      
    def size_stack(self): 
        return len(self.stack)"
Write a Python program that will count the words in a sentence or piece of text.,"sentence = ""Hello World. This is a sentence.""
words = sentence.split()
word_count = len(words)

print(f""The sentence has {word_count} words."")"
Create a Python function to generate a matrix with random numbers in it.,"import numpy as np
def random_matrix(row, col):
    matrix = np.random.random((row,col))
    print(matrix)

random_matrix(3,3) #Outputs: [[0.48281427 0.8640267  0.16479638]
                      [0.65602432 0.37230416 0.05444421]
                      [0.78832705 0.19239374 0.03173512]]"
Write an algorithm in Python to calculate the sum of the numbers of a list and store the result in a dictionary.,"sum_dict = {}

def sum_list(list):
 total = 0
 for num in list:
 total += num
 sum_dict[""sum""] = total
 return sum_dict

sum_dict = sum_list(list)"
Generate a function in Python that takes a natural number as argument and returns the product of all numbers up to it.,"def getProduct(n):
  result = 1
  for i in range(n):
    result *= i+1
    
  return result"
Create a Python function that takes a string and rotates the characters in the string by a specified integer.,"def rotateString(s, n):
    output = """"
    for char in s:
        output += chr(ord(char) + n)
    return output

result = rotateString(""Hello"", 3)
print(result)"
Write a Socket program in Python to listen for messages on port 8080 and echo the received message.,"import socket

HOST = 'localhost'
PORT = 8080

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind((HOST, PORT))
s.listen()

conn, addr = s.accept()
with conn:
 print('Connected by', addr)
 while True:
 data = conn.recv(1024)
 if not data:
 break
 print('Received:', data.decode('utf-8'))
 conn.send(data)

s.close()"
Implement a Python function to search for an item in an array.,"def search(arr, item):
    for i in range(len(arr)):
        if item == arr[i]:
            return i
    return -1

arr = [15, 20, 25, 30, 35]
item = 25
index = search(arr, item)
if index == -1:
    print(""Element not found"")
else:
    print(""Element found at index"", index)

# Output:
# Element found at index 2"
Write a python script that does the following:,"import requests

url = ""https://example.com"" 
r = requests.get(url)
data = r.content

with open(""example_website.html"", ""wb"") as file:
    file.write(data)

print(""File downloaded successfully."")"
Write a python code to create a histogram,"import matplotlib.pyplot as plt

def create_histogram(data):
    plt.hist(data, bins=20)
    plt.title('Histogram of Input Data')
    plt.show()

# Example data
data = [1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1]

create_histogram(data)"
Design a sorting algorithm in Python that is capable of sorting very large lists.,"def sort(array):
    for i in range(len(array)):
        low = i
        for j in range(i+1, len(array)):
            if array[low] > array[j]:
                low = j
        array[i], array[low] = array[low], array[i]
    return array
 
example = [25, 6, 7, 3, 12, 89, 74, 55]
sorted_array = sort(example)
print(sorted_array)"
Write a function to convert the given string of float type into tuple.,"def float_to_tuple(test_str):
  res = tuple(map(float, test_str.split(', ')))
  return (res) "
Implement a Python program to generate randon uniform numbers. The program should have two input parameters a lower bound and an upper bound.,"import random

# generates a random number between lower and upper
def generateRandomNumber(lower, upper):
 r = random.uniform(lower, upper)
 return r

# driver program
if __name__ == ""__main__"":
 lower = 10
 upper = 20
 print(generateRandomNumber(lower, upper))"
Do you know how to write a recursive Python program to delete a given element from a list?,"def delete_from_list(my_list, element):
    if element in my_list:
        my_list.remove(element)
    else:
        return
      
    delete_from_list(my_list, element)"
"Create a Python program that prints the characters in the alphabet, one per line.","for letter in ""abcdefghijklmnopqrstuvwxyz"":
 print(letter)"
"Make a Python program that prints out a message that gives the number ""7"" when a value for an integer variable ""x"" is 7.","x = 7
if x == 7:
    print(""The number is 7"")"
Suggest a program to convert Celsius to Fahrenheit and vice versa using Python.,"def celsius_to_fahrenheit(celsius):
    return celsius * 9 / 5 + 32 

def fahrenheit_to_celsius(fahrenheit):
    return (fahrenheit - 32) * 5 / 9"
Rewrite the following code using classes in Python.,"class Square: 
    def __init__(self, number): 
        self.number = number 

    def square_number(self): 
        return self.number * self.number 

number_obj = Square(10) 
print(number_obj.square_number())"
Implement a stack in Python using lists.,"class Stack:
 def __init__(self):
 self.items = []
 
 def isEmpty(self):
 return self.items == []
 
 def push(self, item):
 self.items.append(item)
 
 def pop(self):
 return self.items.pop()
 
 def peek(self):
 return self.items[len(self.items)-1]
 
 def size(self):
 return len(self.items)

stack = Stack()
stack.push(1)
stack.push(2)
print(stack.peek())
print(stack.pop())
print(stack.size())"
Write an algorithm in Python that takes as input an array of numbers and returns the maximum element.,"def maxElement(arr): 
    maxElement = arr[0]; 
  
    for i in range(1, len(arr)): 
        if maxElement < arr[i]: 
            maxElement = arr[i]; 
  
    return maxElement; 
  
arr = [15, 25, 7, 1];
maxElement = maxElement(arr); 
print (""Maximum element in the array is:"", maxElement);"
Create a Python program that reads an integer and prints whether it is even or odd.,"# Read the integer
num = int(input())

# Print whether the number is even or odd
if num % 2 == 0:
 print(""The number is even."")
else:
 print(""The number is odd."")"
Generate a program in Python to count the number of times a substring appears in a string?,"def countSubstrings(str, subStr):
    lengthSubStr = len(subStr)
    count = 0
   
    for i in range(len(str)):
        if str[i:i+lengthSubStr] == subStr:
            count += 1
         
    return count

str = ""The quick brown fox jumps over the lazy dog.""
substr = ""the""
print(countSubstrings(str, substr))"
Modify the code to output a float in python instead of integer.,"def multiply(a, b): 
    return float(a * b)"
"Using only base Python (no 3rd party libraries), create a function that checks whether a number is prime or not.","def is_prime(num):
    for i in range(2, int(num / 2)):
        if num % i == 0:
            return False
    else:
        if num < 2:
            return False
        else:
            return True"
Setup a Django server that can host a website.,"# Install Django if it does not already exist
pip install django

# Start a new project
django-admin startproject myproject

# Create and apply migrations
cd myproject
python manage.py makemigrations
python manage.py migrate

# Start the server
python manage.py runserver 0:8000"
Write a Python program that randomly generates a list of 10 numbers in a range from 0 to 100.,"import random

number_list = [random.randint(0, 100) for n in range(10)]

print(number_list)"
Create a Python class named Student that stores a name and ID number.,"class Student:
    def __init__(self, name, id_number):
        self.name = name
        self.id_number = id_number"
Optimize the following application in Python to reduce startup time.,"import time

def func():
    start=time.time()
    # Optimized code using range instead of while loop
    lst = range(100000000)
    end=time.time()
    print(end-start)

func()"
Generate a code snippet to get an item stored in a Python dictionary using the key.,"#Getting the value of the 'name' key from the dictionary 
dict = {'name':'John', 'age': 30, 'city':'New York'}
value = dict['name'] 

#Printing the value 
print(value)"
Write a Python program to convert a given string to all uppercase letters.,"def convert_string_to_uppercase(string):
    return string.upper()"
Write a python program to tokenize a given text,"import nltk 
from nltk.tokenize import word_tokenize 
  
# input text  
text = 'Python is an interpreted, high-level, general-purpose programming language.'
  
# converting the text into tokens 
token = word_tokenize(text) 
  
print(token)"
Create a Python program that combines two lists and returns a single list that contains a combination of elements from both.,"def combine_lists(list1, list2):
 return list1 + list2

list1 = [1, 2, 3]
list2 = [4, 5, 6]
print(combine_lists(list1, list2)) # [1, 2, 3, 4, 5, 6]"
Write a Python program to decode the given encoded text using ROT-13 algorithm.,The code is obfuscated
Write a Python script to list a directory's contents.,"import os

def list_directory_contents(directory_path):
    contents = os.listdir(directory_path)
    return contents

directory = ""your_directory_path""
contents = list_directory_contents(directory)
print(contents)"
How would you design a Python program that checks if a number is divisible by three?,"def is_divisible(n):
    if n % 3 == 0:
        return True
    else:
        return False

num = 45
check_divisible = is_divisible(num)

if check_divisible:
    print(""Number is divisible by three."")
else:
    print(""Number is not divisible by three."")"
Create an algorithm in Python to find the sum of all the numbers in a given range.,"def sum_range(start, end): 
    sum = 0
    for i in range(start, end+1): 
        sum += i 
    return sum 
  
# Driver Code 
start = 2
end = 5
print(sum_range(start, end)) 
# Result: 14"
"Using the provided input, write a Python program to calculate the sum of the digits of a given number.","def sum_of_digits(number):
    result = 0
    while number > 0:
        result += number % 10
        number = number // 10
    return result
    
if __name__ == '__main__':
    number = 123
    print(sum_of_digits(number))"
Create a Machine Learning model in Python to classify the following dataset.,"from sklearn.neighbors import KNeighborsClassifier

# Create the KNN classifier
knn = KNeighborsClassifier(n_neighbors = 3)

# Fit the classifier to the data
knn.fit(X, y)

# Predict the labels for the test set
y_pred = knn.predict(X_test)"
Write a function in Python that normalizes a list of numbers by subtracting their average and dividing by the standard deviation.,"def normalize(numbers):
 avg = sum(numbers) / len(numbers)
 variance = sum((x - avg) ** 2 for x in numbers) / len(numbers)
 stdev = variance ** 0.5
 return [(x - avg) / stdev for x in numbers]"
Generate Python code that will update the values of a list,lst = [x if x <= 10 else x - 5 for x in lst]
Generate a Python program to remove all elements of given list present in other list.,"def remove_from_list(list1, list2):
    for i in list2: 
        list1.remove(i) 
        
    return list1

list1 = [1, 2, 3, 4, 5, 6]
list2 = [2, 4, 6]
       
print(remove_from_list(list1, list2))"
Write a generator function in Python to generate unique integer numbers in a given range.,"def unique_integers_generator(start, end):
    i = start
    used = set()
    while i <= end:
        if i not in used:
            used.add(i)
            yield i
        i += 1

for i in unique_integers_generator(10, 20):
    print(i)"
Generate a python code for linear regression.,"from sklearn.linear_model import LinearRegression

model = LinearRegression()
model.fit(X, y)"
Build an algorithm in Python that creates output based on the given input.,"def algorithm(input_list):
    output_list = []
    for i in input_list: 
        if i % 2 == 0:
            output_list.append(str(i) + ' is an even number')
        else:
            output_list.append(str(i) + ' is an odd number')
    return output_list"
Fix the errors in the following python program to return the correct output.,"def foo(a, b):
    return a + b

x = foo(2, 3)
print(x)  # output is 5"
"Develop a Python program that takes in a single-dimensional array as a parameter, and returns the number of subsets with size 3 or greater.","def find_subsets(arr):
    count = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            for k in range(j+1, len(arr)):
                count += 1
    return count"
Write a Python groupby function that returns the top 3 most frequent elements in each group.,"def top_frequent(data, key):
  grouped = data.groupby(key)
  result = []

  for name, group in grouped:
    counts = group.value_counts()
    top_3 = counts.nlargest(3).index.tolist()
    result.append((name, top_3))
  
  return result"
Create an object-oriented Python program to model a Vehicle.,"class Vehicle:
   def __init__(self, capacity, speed):
      self.capacity = capacity
      self.speed = speed
 
   def increase_speed(self):
      self.speed += 10
 
   def decrease_speed(self):
      if self.speed > 0:
         self.speed -= 10"
Create a Python program that can calculate the Volume of a pyramid based on the provided side length and height.,"def volume_pyramid(side_length, height):
    # Calculate base area
    base = (side_length**2) * 4
    
    # Calculate the volume
    volume = (base * height) / 3
    return volume

# driver code 
side_length = 4
height = 6
result = volume_pyramid(side_length, height)
print(result)"
Generate a function in Python that takes a list of numbers and returns the average value of all the numbers.,"def average(numbers):
 sum = 0
 for number in numbers:
 sum += number
 return sum / len(numbers)"
Write a python function to check whether the first and last characters of a given string are equal or not.,"def check_Equality(str):
  if (str[0] == str[-1]):  
    return (""Equal"") 
  else:  
    return (""Not Equal"") "
Identify the data type of each variable in the given Python snippet.,"x is an integer, name is a string, and y is a list."
Write a function in Python to remove duplicates in a list and return the modified list,"def remove_duplicates(items):
  unique = []
  for item in items:
    if item not in unique:
      unique.append(item)
  return unique

list = [1, 2, 2, 3]
result = remove_duplicates(list)
print(result) # Output: [1, 2, 3]"
Write a web scraper in Python to collect web data from a website.,"import requests
from bs4 import BeautifulSoup

url = ""https://example.com""

try: 
    page = requests.get(url)
    soup = BeautifulSoup(page.content, 'html.parser')
    # your web scraping code here

except Exception as e:
    print('Error:', e)"
Write a Python function that generates a random password of 8 characters containing alphanumeric characters and symbols.,"import string
import random

def generate_password():
    symbols = string.ascii_letters + string.digits + string.punctuation
    password = """".join(random.choice(symbols) for i in range(8))
    return password

pwd = generate_password()
print(pwd) # 1F(8y3?"
Generate a Python program to add new elements to an existing tuple.,"# create a new tuple adding the elements from the old tuple and the new elements
newTuple = oldTuple + newElements"
Generate a list of 100 random integers using Python.,"import random

randoms = random.sample(range(0,1000), 100) 
print(randoms)"
Write a Python program to sort a list in ascending order with respect to a particular key.,"sorted_lst = sorted(lst, key=lambda x: x[key])"
Generate a Python function that takes in two arrays and returns a list of the elements that are present in both arrays.,"def intersection(list1, list2):
    return [value for value in list1 if value in list2]

list1 = [1, 2, 3, 4]
list2 = [2, 4, 6, 7]

print(intersection(list1, list2)) # [2, 4]"
Write a Python program to read a CSV and converting the contents to a dictionary.,"import csv

def csv_to_dict(filename):
 with open(filename) as csv_file:
 reader = csv.DictReader(csv_file)
 csv_dict = {}
 for row in reader:
 csv_dict[row['Date']] = row['Product']
 return csv_dict"
Generate a python program which prints a formatted list containing the elements from two input lists.,"def print_list(list_1, list_2): 
    formatted_list = [list_1 + list_2 for i in range(len(list_1))] 
    for x in formatted_list: 
        for y in x: 
            print(y) 
    
list_1 = [1, 2, 3] 
list_2 = [4, 5, 6]
print_list(list_1, list_2)

# Output:
# 1
# 2
# 3
# 4
# 5
# 6"
Create a GPU-accelerated algorithm in Python that performs matrix multiplication.,"import torch

def matrix_multiplication(A, B):
    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
    A = torch.tensor(A).to(device)
    B = torch.tensor(B).to(device)
    return torch.matmul(A, B).cpu().numpy()"
Implement a depth first search algorithm in Python to find a given node in a tree.,"def depth_first_search(tree, node):
    if tree == None:
        return False
    elif tree.data == node:
        return True
    else:
        left_search = depth_first_search(tree.left, node)
        if left_search == True:
            return True
        right_search = depth_first_search(tree.right, node)
        return right_search"
"Given two lists, write a Python program to return a list that contains the elements from both the lists, except for the elements that are duplicated.","new_list = [1,2,3,6,7,8]"
"Design a Python class to represent a book with title, author, publication year and number of pages.","class Book:
    def __init__(self, title, author, publication_year, number_of_pages):
        self.title = title
        self.author = author
        self.publication_year = publication_year
        self.number_of_pages = number_of_pages"
Create an optimization algorithm written in Python which takes a list of tuples as input and returns the pair with the smallest value.,"def smallest_pair(lst): 
  return min(lst, key = lambda x: x[1]) 

lst = [(2, 3), (4, 1), (6, 4), (5, 8)] 
  
print(smallest_pair(lst)) 

# Output: (4, 1)"
Design a data structure in Python that implements a Stack.,"class Stack: 
 def __init__(self): 
 self.items = [] 

 def push(self, item): 
 self.items.append(item) 

 def pop(self):
 if not self.is_empty(): 
 return self.items.pop()

 def is_empty(self):
 return len(self.items) == 0

 def peek(self):
 if not self.is_empty(): 
 return self.items[-1]

 def size(self):
 return len(self.items)"
Write a class in Python that processes a given String?,"class StringProcessor:
    def __init__(self, s):
        self.string = s
        self.num_words = len(s.split())
        self.uppercase = s.upper()
        
    def reverse_string(self):
        return self.string[::-1]
        
    def remove_whitespace(self):
        return self.string.replace(' ', '')"
Create a function in python to print a string in reverse.,"def reverse_string(string): 
  string = string[::-1] 
  return string 
  
print(reverse_string('hello'))"
"Construct a stack class in Python to perform push, pop, isEmpty, and peek operations.","class Stack:
     def __init__(self):
         self.items = []

     def isEmpty(self):
         return self.items == []

     def push(self, item):
         self.items.append(item)

     def pop(self):
         return self.items.pop()

     def peek(self):
        return self.items[len(self.items)-1]"
Rewrite the following code using reduce() method in Python,"from functools import reduce

result = reduce(lambda x,y: x+y, list)
print(result) # 10"
Write a Python program to flatten a dictionary of nested dictionaries.,"def flatten(d): 
  flatten_d = {} 
  for key, value in d.items():
    if isinstance(value, dict):
      value = flatten(value) 
      for sub_key, sub_value in value.items(): 
        flatten_d[key + '.' + sub_key] = sub_value 
    else: 
      flatten_d[key] = value 
  return flatten_d"
Build a Python program that sorts a list of numbers from highest to lowest.,"def sort_numbers(numbers):
    numbers.sort(reverse=True)
    return numbers

numbers = [28, 5, 17, 10, 43]

sorted_numbers = sort_numbers(numbers)
print(sorted_numbers)"
Write a python function to print duplicants from a list of integers.,"def Repeat(x): 
    _size = len(x) 
    repeated = [] 
    for i in range(_size): 
        k = i + 1
        for j in range(k, _size): 
            if x[i] == x[j] and x[i] not in repeated: 
                repeated.append(x[i]) 
    return repeated "
Create an algorithm in Python to sort a given list of integers from smallest to largest.,"def sort_list(numbers):
    numbers.sort()
    return numbers"
Write a python function to print positive numbers in a list.,"def pos_nos(list1):
  for num in list1: 
    if num >= 0: 
       return num "
Write a function to abbreviate 'road' as 'rd.' in a given string.,"import re
def road_rd(street):
  return (re.sub('Road$', 'Rd.', street))"
Generate a Python program that creates an array of integers between two specified numbers,"def create_array(start, end):
    array = []

    for i in range(start, end+1):
        array.append(i)

    return array"
Write a Python function that takes three numbers as arguments and returns the maximum value.,"def max_val(a, b, c):
    if (a > b and a > c): 
        return a
    elif (b > a and b > c):
        return b
    else: 
        return c

result = max_val(2, 5, 3)
print(result)"
Refactor a Python program to improve its readability and maintainability.,"def main():
    result = [item * item for item in range(10) if item % 3 == 0]
    return result"
"Come up with a python program to join two strings x and y, and then print the resulting combined string.","x = ""Hello""
y = ""World""

result = x + y
print(result)"
Write a Python script that takes a list as an argument and prints each element of the list in a new line.,"for item in [1, 2, 3, 4]:
    print(item)"
"Using numpy, create a Python code which would return an array with the running total of numbers in a given list.","import numpy as np

def runningTotal(arr):
    return np.cumsum(arr)"
Optimize this Python code to count the number of occurrences of an element in an array.,"def countOccurrences(arr, x): 
  
    count = 0
    n = len(arr) 
    for i in range(0, n): 
        if (x == arr[i]): 
            count = count + 1
  
    return count 
  
# Driver code 
arr = [2, 3, 3, 10, 12] 
x = 3
assert countOccurrences(arr, x) == 2"
"Provided a number and a text, write a program in Python that adds the number to each of the words in the text.","def add_num(num, text):
    words = text.split()
    result = [str(int(w) + num) for w in words]
    return ' '.join(result)

print(add_num(5, ""Today is Monday"")) # Output: 10 Today is 10 Monday"
"Optimize the following python code to speed up execution time:

arr = [2, 5, 3, 1]
for i in range(len(arr)):
  for j in range(i + 1, len(arr)):
    if arr[i] > arr[j]:
       arr[i], arr[j] = arr[j], arr[i]","arr = [2, 5, 3, 1]

# using Python's built in `sorted` function
arr = sorted(arr)

# using the Bubble Sort algorithm
for i in range(len(arr) - 1):
 for j in range(len(arr) - 1 - i):
  if arr[j] > arr[j + 1]:
   arr[j], arr[j + 1] = arr[j + 1], arr[j]"
Create a Python script to print the numbers between 500 and 1000 that are divisible by 7,"for i in range(500, 1001):
    if i%7 == 0:
        print(i, end=' ')"
List three popular web frameworks used in Python.,"Popular Python web frameworks include Flask, Django and Pyramid."
Generate a command which prints the type of any given variable in Python.,print(type(variable))
Create a function in Python to calculate the number of hours a worker worked in a week given the number of hours worked in a day.,"def hours_worked_week(hours_per_day):
    hours_worked_week = hours_per_day * 7
    return hours_worked_week"
"Write a Python function to remove elements from a given list of integers, if the integer is a multiple of 3","def remove_multiple_of_three(list):
  new_list = []
  for item in list:
    if item % 3 != 0:
      new_list.append(item)
  return new_list"
Develop a program to convert JSON objects to Python dictionaries.,"import json

def json_to_dict(json_obj):
 return json.loads(json_obj)"
Assemble a Python program to find a pattern,"def find_pattern(arr):
    div_by_3 = []

    for num in arr:
        if num % 3 == 0:
            div_by_3.append(num)
    
    return div_by_3"
Create a python script to read a JSON object and print out its values.,"import json

data = json.loads('{ ""name"": ""Adam"", ""age"": 24, ""city"": ""New York"" }')

print(""Name: "", data['name']) 
print(""Age: "", data['age']) 
print(""City: "", data['city'])"
"Create a program in Python that takes a string as an argument and tokenizes it, removing any punctuation.","import string

def tokenize(string):
    tokens = string.split()
    tokens = [token.strip(string.punctuation) for token in tokens]
    return tokens

tokenized_str = tokenize('This sentence has commas, periods, and colons.')
print(tokenized_str)
# Output: ['This', 'sentence', 'has', 'commas', 'periods', 'and', 'colons']"
Create a Python class with a constructor and a `to_string` method that takes two integers and returns a formatted string.,"class MyClass:
 def __init__(self, x, y):
 self.x = x
 self.y = y

def to_string(self):
 return f'The numbers are {self.x} and {self.y}.'

c = MyClass(7,5)
print(c.to_string())"
Generate a Python code that calculates the mean of a data set given as a list of integers.,"def calculate_mean(data): 
    # Initialize the sum and length of data 
    sum = 0 
    length = len(data) 
  
    # Calculating the sum  
    for x in data: 
        sum += x   
    # Calculating the mean  
    mean = sum / length 
  
    return mean 
  
# Test the function 
data = [1, 2, 3, 4, 5, 6] 
print('Mean of data is:', calculate_mean(data))"
Write a python function to find the parity of a given number.,"def find_Parity(x): 
    y = x ^ (x >> 1); 
    y = y ^ (y >> 2); 
    y = y ^ (y >> 4); 
    y = y ^ (y >> 8); 
    y = y ^ (y >> 16); 
    if (y & 1): 
        return (""Odd Parity""); 
    return (""Even Parity""); "
"In Python, write a program that reads in an unsorted array of integers and returns it in sorted order.","def sort_array(A):
    for i in range(len(A) - 1):
        min = A[i]
        min_index = i
        for j in range(i + 1, len(A)):
            if A[j] < min:
                min = A[j]
                min_index = j
        if min_index != i:
            A[i], A[min_index] = A[min_index], A[i]
    return A"
Use a Python print function to write a statement that takes an input message and prints the message in all uppercase letters.,"message = 'Hello world!'

print(message.upper()) // HELLO WORLD!"
Create a function in Python to extract all words from a sentence that are greater than 3 chars in length.,"def extract_long_words(s):
 words = s.split()
 filtered = [w for w in words if len(w) > 3]
 return filtered"
Write a Python program to access a value from a nested dictionary given its keys.,"def nested_dict_value(dictionary, keys): 
 for key in keys: 
 if key in dictionary.keys(): 
 dictionary = dictionary[key] 
 else: 
 return None
 
 return dictionary

data = {
""first"" : {
""second"" : {
""third"" : 10
}
}
}

result = nested_dict_value(data, [""first"", ""second"", ""third""])
print(result)"
Create a Python script to log the current date and time in the console.,"import datetime

now = datetime.datetime.now()

print ('Current date and time: ', now)"
Optimize a Python function for computing Fibonacci numbers.,"def fibonacci(n): 
    if n <= 1: 
        return n 
    else:
        fibonacci_num=[0,1] #creating a fibonacci list
        i=2
        while i<=n:
            fibonacci_num.append(fibonacci_num[i-1]+fibonacci_num[i-2])
            i+=1
        return fibonacci_num[n]"
Implement a function in Python that takes a number n and generates a random list of integers between 0 and n.,"import random

def randomList(n):
 list = []
 
 for i in range(n):
 list.append(random.randint(0, n))
 
 return list

print(randomList(10))"
Can you write a Python program to take a list and create a new list with unique elements of the first list?,"def unique_list(list):
    unique_list = []
    for element in list:
        if element not in unique_list:
            unique_list.append(element)
    return unique_list

unique_elements = unique_list([1,2,2,3,3,3])
print(unique_elements)"
Write a Python function to create a Fibonacci sequence up to n-th number.,"def FibonacciGenerator(n): 
    a = 0
    b = 1
    if n < 0: 
        print(""Incorrect input"") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2,n): 
            c = a + b 
            a = b 
            b = c 
        return b 
  
 
# Driver Program 
print(FibonacciGenerator(10))"
Create a Python program to convert imperial length units to metric length units.,"""""""
Imperial to Metric conversion program.
""""""

def inches_to_cm(inches):
    return inches * 2.54

if __name__ == '__main__':
    print(inches_to_cm(5))"
You have a list of temperature values. Write a python program to find the day which has the highest temperature.,"def highest_temp(temp_list):
    highest_temp_day = 0 
    highest_temp_val = temp_list[0]

    for i in range(1, len(temp_list)):
        if temp_list[i] > highest_temp_val:
            highest_temp_day = i
            highest_temp_val = temp_list[i]
            
    return highest_temp_day"
Generate a program which accepts a sentence as an input and returns the total number of characters in it?,"# Python program to find number of characters in a sentence 
  
# Function to calculate number of characters 
def find_char(s): 
    return(len(s)) 
  
# Taking the sentence from the user 
str = input(""Enter a sentence: "") 
  
# Calling the function 
count = find_char(str) 
  
# Printing the result 
print(""Number of characters:"", count)"
Create a Python function which takes in two lists and returns a list that contains the elements from both lists.,"def combine_lists(list1, list2):
    return list1 + list2"
Create a simple neural network using TensorFlow in Python.,"import tensorflow as tf

# declaring the model
model = tf.keras.Sequential([
    tf.keras.layers.Dense(4, activation='relu', input_shape=(2,)),
    tf.keras.layers.Dense(4, activation='relu'),
    tf.keras.layers.Dense(1, activation='sigmoid')
])

# compiling the model
model.compile(
    optimizer='adam', 
    loss='binary_crossentropy',
    metrics=['accuracy']
)"
Design a Python code to Print the length of the string entered by user.,"stringLength = len(stringInput)

print(""The length of the string is: "", stringLength)"
Create a Python program to calculate the square root of a user-defined positive number.,"import math

n = 100

#Calculate the square root of a number
square_root = math.sqrt(n)

print(f'Square root of {n} is {square_root}')"
Create a function in Python that can print the first 5 prime numbers.,"def print_first_five_primes():
    prime_numbers = [2, 3, 5, 7, 11]
    for prime in prime_numbers:
        print(prime)"
Create a Python function to remove all non-alphanumeric characters from a string.,"def clean_string(string):
    cleanedString = """"
    for c in string:
        if c.isalnum():   
            cleanedString += c 
  
    return cleanedString"
Write a simple Python function that takes a list of integers and returns the sum of all elements divisible by 3.,"def divisibleBy3(li):
 total = 0
 for num in li:
  if num % 3 == 0:
   total += num
 return total
# Output: 24"
Generate a python script for encrypting a text with Caesar cipher.,"def caesar_cipher(text, key):
    encrypted_text = ''
    for c in text: 
        if c.isalpha(): 
            encrypted_text += chr(ord(c) + key) 
        else:
            encrypted_text += c
  
    return encrypted_text"
Create a Python program to sort a list in O(n) time.,"def sort_list_in_O_n(lst):
    n = len(lst) 
    for i in range(n-1): 
        for j in range(0, n-i-1): 
            if lst[j] > lst[j+1] : 
                lst[j], lst[j+1] = lst[j+1], lst[j]"
Design a Python program to create a list of randomized numbers.,"import random

def rand_list(n):
	rand_num_list = []
	for _ in range(n):
		rand_num_list.append(random.randint(1,100))
	return rand_num_list"
Construct an algorithm in Python that takes an array of numbers and removes all duplicates while maintaining the original order of the array.,"def remove_duplicates(arr):
    seen = set()
    seen_add = seen.add
    return [x for x in arr if not (x in seen or seen_add(x))]

arr = [1, 3, 2, 1, 5, 4, 8, 6, 7, 5]
result = remove_duplicates(arr)

print(result)
# Output: [1, 3, 2, 5, 4, 8, 6, 7]"
Create a python script to download a complete web page and cache it for faster offline access.,"import requests
import os

url = 'https://www.example.com/page1'

if not os.path.exists('cache'):
 os.makedirs('cache')

r = requests.get(url)

filename = url.rsplit('/', 1)[-1]
file_path = os.path.join('cache', filename)

with open(file_path, 'wb') as f:
 f.write(r.content)"
Develop a Python script to output the result of the following boolean expression:,"def booleanExpression(A, B, C, D):
    return (not A or B) and (C or D)"
Write a python function to remove spaces from a given string.,"def remove_spaces(str1):
  str1 = str1.replace(' ','')
  return str1"
Generate a random list of numbers in Python,"import random
 
nums = []
for i in range(10):
 nums.append(random.randint(1, 100))
 
print(nums)"
Construct a web scraper in Python using the Scrapy library which fetches information from a web page.,"import scrapy

class MySpider(scrapy.Spider):  
 name = 'myspider'
 start_urls = [
 'https://example.com/page1',
 'https://example.com/page2',
 ]

def parse(self, response):
 for item in response.css('item'):
 yield {
 'title': item.css('item-title::text').get(),
 'description': item.css('item-description::text').get(),
 }"
Write a function to combine two dictionaries by adding values for common keys.,"from collections import Counter
def add_dict(d1,d2):
   add_dict = Counter(d1) + Counter(d2)
   return add_dict"
Create a Python script that accesses a website's HTML.,"# Import the requests library 
import requests 

# Get the website's content 
r = requests.get('https://www.example.com/') 

# Get the webpage's HTML 
html = r.text

# Print the HTML 
print(html)"
Develop a program in python to realize the following task:,"def avg(arr):
    tot_sum = 0
    for num in arr:
        tot_sum += num
    
    return tot_sum/len(arr)"
Write a function in Python to return the square root of a number.,"import math

def square_root(num):
    return math.sqrt(num)

num = 49
print(""Square root of "", num, "" is: "", square_root(num))"
Create a Python program to find the number of days between two dates.,"from datetime import datetime

def get_days_diff(date1, date2):
 d1 = datetime.strptime(date1, ""%Y-%m-%d"")
 d2 = datetime.strptime(date2, ""%Y-%m-%d"")
 return abs((d2 - d1).days)"
Write a function to extract the ranges that are missing from the given list with the given start range and end range values.,"def extract_missing(test_list, strt_val, stop_val):
  res = []
  for sub in test_list:
    if sub[0] > strt_val:
      res.append((strt_val, sub[0]))
      strt_val = sub[1]
    if strt_val < stop_val:
      res.append((strt_val, stop_val))
  return (res) "
Write a python function to find sum of all prime divisors of a given number.,"def Sum(N): 
    SumOfPrimeDivisors = [0]*(N + 1)   
    for i in range(2,N + 1) : 
        if (SumOfPrimeDivisors[i] == 0) : 
            for j in range(i,N + 1,i) : 
                SumOfPrimeDivisors[j] += i           
    return SumOfPrimeDivisors[N] "
Create a Python program that takes a number n and prints out the Fibonacci sequence from 0 to n.,"def Fibonacci(n): 
 a = 0
 b = 1
 if n < 0: 
 print(""Incorrect input"") 
 elif n == 0: 
 return a 
 elif n == 1: 
 return b 
 else: 
 for i in range(2,n+1): 
 c = a + b 
 a = b 
 b = c 
 return b 

def printFibonacci(n): 
 for i in range(n+1):
 print(Fibonacci(i),end="" "")"
Generate a python program to read the contents from a given URL,"import requests

def read_url(url):
  r = requests.get(url)
  if r.status_code == 200:
    return r.text
  else:
    return None"
Create a web scraper with Python BeautifulSoup library for gathering data from a website.,"import requests
from bs4 import BeautifulSoup

page = requests.get('http://example.com')
soup = BeautifulSoup(page.content, 'html.parser')

data = []

for item in soup.find_all('div', class_='item'):
 title = item.find('h3').get_text()
 description = item.find('p').get_text()
 
 data.append({
 'title': title,
 'description': description
 })
 
print(data)"
Generate a python code snippet to reverse a given list.,"def reverse_list(list):
  return list[::-1]"
Implement a program in Python to detect the occurrence of a string in a given sentence.,"def detectString(sentence, string):
  if string in sentence:
    return ""String '{}' detected in the sentence"".format(string)
  else:
    return ""String '{}' not detected in the sentence"".format(string)

sentence = ""This is an example sentence""
string = ""example""

print(detectString(sentence, string))"
Develop a Python program to identify characters that occur more than once in a string,"def find_duplicate_characters(string):
    count = {}
    result = []
    for char in string:
        count[char] = count.get(char, 0) + 1
        if count[char] > 1:
            result.append(char) 
    return result"
"Write a Python class to represent a person with name, age and gender attributes.","class Person:
    def __init__(self, name, age, gender):
        self.name = name
        self.age = age
        self.gender = gender"
"Write a Python program to generate a random string of fixed length of 10 characters, which contains only lowercase letters and numbers.","import string
import random

def generate_random_string(length):
 chars = string.ascii_lowercase + string.digits
  return ''.join(random.choice(chars) for _ in range(length))

result = generate_random_string(10)
print(result)

# Output : 'n5z5hp5d5v'"
Create a web application in Python to display current weather information for a given city.,"# import libraries
import requests, json 
  
# api-endpoint 
url = ""http://api.openweathermap.org/data/2.5/weather?q={city}&units=metric&APPID="
Design a Python script that takes two dates as input and returns the number of days between them.,"from datetime import date

def days_between_dates(date1, date2):
    d0 = date(date1[0], date1[1], date1[2])
    d1 = date(date2[0], date2[1], date2[2])
    return abs((d1 - d0).days)

date1 = [2020, 8, 1]
date2 = [2020, 8, 11]

print(days_between_dates(date1, date2))"
Create a sorting algorithm in Python to sort strings by their length.,"def sort_by_length(strings):
    for i in range(len(strings) - 1):
        for j in range(i + 1, len(strings)):
            if len(strings[i]) > len(strings[j]):
                strings[i], strings[j] = strings[j], strings[i]
    return strings

unsorted_list = [""cat"", ""dog"", ""apple"", ""banana""]

sorted_list = sort_by_length(unsorted_list)

print(sorted_list)"
Create a Python program that validates the date format.,"def validate_date(date):
  # check if input format is valid
  try:
    datetime.strptime(date, '%d/%m/%Y')
    return True
  except ValueError:
    return False"
Generate a Python script to validate a given email address.,"import re

def validate_email(email):
    regex = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'
    if re.search(regex, email):
        return True
    else:
        return False

valid = validate_email('example@domain.com')
print(valid)"
Create a class in Python that implements the iterator protocol and produces the sequence of the Fibonacci numbers when iterated.,"class Fibonacci:
 def __init__(self, n):
  self.n = n
  self.a = 0
  self.b = 1
 
 def __iter__(self): 
  return self
 
 def __next__(self): 
  if self.a <= self.n:
   temp = self.a
   self.a, self.b = self.b, self.a + self.b 
   return temp 
  else:
  raise StopIteration"
Write an efficient Python program to remove all the duplicate items from a list.,"def removeDuplicates(arr):
  output = []
  for ele in arr:
    if ele not in output:
      output.append(ele)
  return output
  
output = removeDuplicates([1,1,2,2,3,4,5,5]);
print(output) // outputs: [1, 2, 3, 4, 5]"
Write a function to find the product of first even and odd number of a given list.,"def mul_even_odd(list1):
    first_even = next((el for el in list1 if el%2==0),-1)
    first_odd = next((el for el in list1 if el%2!=0),-1)
    return (first_even*first_odd)"
Create a program in Python to remove duplicates from a list and return the new list.,"def remove_duplicates(arr):
    new_list = []
    for item in arr:
        if item not in new_list:
            new_list.append(item)
    return new_list"
Generate an algorithm in Python that returns the kth smallest number in a given array.,"def kthSmallest(arr, k):
 # sort the array
 arr.sort()
 
 # return the kth element
 return arr[k-1]
 
# Driver Code
arr = [3,2,4,1,5]
k = 3

print(kthSmallest(arr, k)) # 3"
Optimize the following Python code to remove any redundant operations.,"x = 0
for i in range(100):
    x += i * 100
    for j in range(100):
        x += j"
Develop a python program for the following task,"def sum_n(n):
    result = (n * (n+1)) / 2
    return result

n = 10

sum = sum_n(n)
print(sum)"
"In Python, create a function to check if a given number is prime, and then print out all prime numbers between 0 and that number.","def is_prime(number):
    if number <= 1:
        return False
    for i in range(2, number):
        if number % i == 0:
            return False
    return True

def print_primes(upper_limit):
    for i in range(2, upper_limit+1):
        if is_prime(i):
            print(i)

print_primes(25)"
Write a Python script that takes in a Python list and returns every other element as a sublist.,"def every_other_sublist(input_list):
 sublist = []
 for i in range(len(input_list)):
 if i % 2 == 0:
 sublist.append(input_list[i])
 return sublist"
Write a Python program that takes in a sentence and returns the words within the given sentence in reverse order.,"def reverse_words(sentence):
    words = sentence.split("" "")
    reversed_words = words[::-1]
    return "" "".join(reversed_words)

print(reverse_words(""Hello world!""))
# Output: world! Hello"
Write a Python program to generate all combinations of 2 given lists.,"def generate_combinations(list1, list2):
    combinations = []
    for x in list1:
        for y in list2:
            combination = (x, y)
            combinations.append(combination)
    return combinations"
Write a python function to print out the first 10 numbers from Fibonacci sequence.,"def print_fibonacci_sequence(n): 
  fibonacci_sequence = [0, 1] 
  for i in range(2, n): 
    fibonacci_sequence.append(fibonacci_sequence[i-1] + fibonacci_sequence[i-2])
  return fibonacci_sequence[:n]

print(print_fibonacci_sequence(10))
##
[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]"
"Write a Python program to edit a given string and remove all occurances of ""the"".","def remove_the(string):
  edited_string = string.replace(""the"", """")
  return edited_string

result = remove_the(""the quick brown fox jumped over the lazy dog"")
print(result)"
Write a Python program to generate an array of least common multiple of all the numbers from 1 to 10.,"import collections 

def least_common_multiples(num):
    lcm_arr = []
    for i in range(1, num + 1): 
        lcm_arr.append(i) 
    lcm_result = collections.Counter(lcm_arr).most_common()[-1][0] 
    return lcm_result"
Write a function to find the lateral surface area of cuboid,"def lateralsurface_cuboid(l,w,h):
  LSA = 2*h*(l+w)
  return LSA"
Write a Python function to convert a list of multiple integers into a single integer.,"def convert_list_to_integer(my_list):
    result = 0
    multiplier = 1
 
    for i in range(len(my_list)-1, -1, -1):
        result += my_list[i]*multiplier
        multiplier *= 10
 
    return result
 
print(convert_list_to_integer(my_list))"
Create a python program to create a dictionary with key-value pairs using two lists,"keys = [""a"", ""b"", ""c""]
values = [1, 2, 3]

d = dict(zip(keys, values))
print(d) # output: {'a': 1, 'b': 2, 'c': 3}"
Generate a Python loop with a number of iterations equal to the number of given numbers.,"for i in range(len(numbers)):
  print(numbers[i])"
Develop a python program to add two arrays of the same size.,"def add_arrays(a, b):
    c = []
    n = len(a)
    for i in range(n):
        c.append(a[i] + b[i])
    return c

a = [2, 3, 4]
b = [5, 6, 7]
result = add_arrays(a, b)
print(result) # prints [7, 9, 11]"
Write a Python program to reformat a string using a given dictionary.,"def reformat_string(string, mapping):
    for k, v in mapping.items():
        string = string.replace('{' + k + '}', v)
    return string

if __name__ == ""__main__"":
    string = ""Hello {name}, it's {time} to go""
    mapping = {""name"": ""John"", ""time"": ""2pm""}
    print(reformat_string(string, mapping)) # Output: Hello John, it's 2pm to go"
Modify the following Python code such that a thread is started from within the function.,"import threading

def doSomething():
	#Do something
    t = threading.Thread(target=functionName)
    t.start()"
Write a Python program to implement an algebraic equation.,"def evaluate_eq(x):
    return 3*x*x + 7*x - 4"
"Given two positive numbers x and y, write a Python program to multiply them.","def multiply_numbers(x, y):
    return x * y

result = multiply_numbers(15, 10)
print(result)"
Create a Python program that computes the total time taken by two runners in a race.,"def race_time_total(time1,time2):
 total = time1 + time2
 return total"
Create a set of classes in Python to represent a school database.,"class Student:
    def __init__(self, name, grade):
        self.name = name
        self.grade = grade

    
class Course:
    def __init__(self, name, teachers):
        self.name = name
        self.teachers = teachers
    
    
class School:
    def __init__(self, name):
        self.name = name
        self.students = []
        self.courses = []"
Generate a class in Python to represent a circle with radius and diameter properties.,"class Circle:
    def __init__(self, radius):
        self.radius = radius
        self.diameter = 2 * self.radius 

    @property
    def radius(self):
        return self.__radius

    @radius.setter
    def radius(self, radius):
        self.__radius = radius
        self.diameter = 2 * self.radius"
Create a program that uses Django and Python to display a list of books.,"# imports
import os
import django

# set up Django
os.environ['DJANGO_SETTINGS_MODULE'] = 'myproject.settings'
django.setup()

# set up model
from myapp.models import book

# query database
books = book.objects.all()

# print books
for book in books:
    print(book.title + ' - ' + book.author)"
Generate a Python function to calculate the least common multiple (LCM) of two numbers.,"def lcm(a, b): 
    lcm = (a*b)//gcd(a,b) 
    return lcm"
Create a method in Python to encrypt a given string using AES-256.,"import base64
from Crypto.Cipher import AES

secret_key = ""YourSecr3tEncrKey""

def encodeAES(text):
Key = base64.b64encode(secret_key.encode(""utf-8""))

IV = 16 * '\x00' 

mode = AES.MODE_CBC
encryptor = AES.new(Key, mode, IV=IV)
text = text.encode(""utf-8"")
ciphertext = encryptor.encrypt(text)

return base64.b64encode(ciphertext).decode(""utf-8"")"
Write a Python program to convert kilometers to miles.,"kilometers = 10

miles = kilometers * 0.621371

print(""{} kilometers is equal to {} miles"".format(kilometers, miles))"
Implement a fibonacci sequence in Python.,"def fibonacci(n):
    a, b = 0, 1
    for _ in range(n):
        a, b = b, a + b
    return b"
Create a program in Python that converts binary to decimal representation.,"def BinaryToDecimal(binary): 
    binary1 = binary 
    decimal, i, n = 0, 0, 0
    while(binary != 0): 
        dec = binary % 10
        decimal = decimal + dec * pow(2, i) 
        binary = binary//10
        i += 1
    return decimal 
  
# Driver code 
binary = 101010
print(BinaryToDecimal(binary))"
Create a program to find the frequency of characters in a given string in Python.,"def find_character_frequency(string):
    freq = {} 
    for i in string: 
        if i in freq: 
            freq[i] += 1
        else: 
            freq[i] = 1
    return freq
 
# example
string = ""abbccccdddde""
print(find_character_frequency(string))
# Output: {'a': 1, 'b': 2, 'c': 4, 'd': 4, 'e': 1}"
Create a program in Python that takes an array of integers and returns a new array with each element multiplied by its index.,"def multiply_by_index(numbers):
    for i in range(len(numbers)):
        numbers[i] *= i
    return numbers"
Create a Python script to scrape a given website.,"import requests
from bs4 import BeautifulSoup

url = '<your website url>'
page = requests.get(url)
soup = BeautifulSoup(page.text, 'html.parser')

# Scraping code goes here...."
Create a Binomial Tree in python,"class BinomialTree:
    def __init__(self, n):
        self.n = n

    def create(self):
        tree = [None] * self.n
        tree[0] = 1

        for i in range(self.n):
            for j in range(i+1):
                if tree[i] is not None:
                    if j == 0:
                        tree[i + 1] = tree[i] * 2
                    else:
                        tree[i + 1] += tree[i - j]
        return tree"
Create a program in Python for converting an integer number to a Roman numeral.,"def int_to_Roman(num):
roma_numerals = {
 1: ""I"",
 4: ""IV"",
 5: ""V"",
 9: ""IX"",
 10: ""X"",
 40: ""XL"",
 50: ""L"",
 90: ""XC"",
 100: ""C"",
 400: ""CD"",
 500: ""D"",
 900: ""CM"",
 1000: ""M"",
}

roman_num = """"
for key, value in sorted(roma_numerals.items(), reverse=True):
 while num >= key:
 roman_num += value
 num -= key

return roman_num"
Write a python function to check whether the given two numbers have same number of digits or not.,"def same_Length(A,B): 
    while (A > 0 and B > 0): 
        A = A / 10; 
        B = B / 10; 
    if (A == 0 and B == 0): 
        return True; 
    return False; "
Create a class in Python to represent books.,"class Book:
    def __init__(self, title, author, year, isbn):
        self.title = title
        self.author = author
        self.year = year
        self.isbn = isbn
    
    def __str__(self):
        return '{} by {} published in {}. ISBN: {}'.format(self.title, self.author, self.year, self.isbn)"
Write an algorithm for linear search in Python.,"def linear_search(list, n):
  i = 0
  while i < len(list):
    if list[i] == n:
      return i
    i = i+1
  return -1

list = [1, 3, 8, 10, 15, 20, 25]
n = 15
index = linear_search(list, n)
print(""Number found at index:"", index)"
Program an algorithm in Python to calculate the largest sum of non-adjacents from an unsorted array.,"def largestSumNonAdjacent(arr):
  incl = 0
  excl = 0
 
  for i in arr: 
    new_excl = max(incl, excl) 
    incl = excl + i 
    excl = new_excl 
    
  return max(incl, excl)"
Write a function to caluclate arc length of an angle.,"def arc_length(d,a):
    pi=22/7
    if a >= 360:
        return None
    arclength = (pi*d) * (a/360)
    return arclength"
Write a query in Python to count the total number of times a value appears in a specific column of a table.,"SELECT COUNT(mycolumn)
    FROM mytable
    WHERE mycolumn = 'myvalue'"
Create an algorithm in Python to find the longest continuous sequence of zeros in a binary string.,"def longestZeroSeq(inputStr):
    maxLength = 0 
   
    currentLength = 0
   
    for c in inputStr:
        if c == '0':
            currentLength += 1
        else:
            maxLength = max(maxLength, currentLength) 
            currentLength = 0
   
    maxLength = max(maxLength, currentLength)
   
    return maxLength"
Create a Python function to extract the largest prime factor from a given number.,"def largest_prime_factor(number):
 largest_factor = 1
 for i in range(2, number+1):
 while number % i == 0:
 largest_factor = i
 number //= i
 return largest_factor

largest_prime_factor(35) # Output: 5"
Can you write Python code to replace all the vowels with '*' in a string?,"def replaceVowels(string):
    vowels = [""a"",""e"",""i"",""o"",""u"", ""A"", ""E"", ""I"", ""O"", ""U""]
    newstr = """"
    for char in string:
        if char in vowels:
            newstr += ""*""
        else:
            newstr += char
    return newstr

print(replaceVowels(""Hello, World!""))  # H*ll*, W*rld!"
"Using the comment, create a python program to find the highest number in a series","def find_max(nums):
    """"""This function takes a series of numbers as input and returns the highest number.
    
    Args:
        nums (list): A list of numbers.
    
    Returns:
        int: The highest number.
    """"""
    return max(nums)"
Generate a Python class to handle an employee's details and facilitate their salary calculation.,"class Employee:
    def __init__(self, name, rate_per_hour, hours_worked):
        self.name = name
        self.rate_per_hour = rate_per_hour
        self.hours_worked = hours_worked
    
    def calculate_salary(self):
        return self.rate_per_hour * self.hours_worked"
"Design a class in Python called ""Car"" to represent a car object.","class Car:
    def __init__(self, make, model, color):
        self.make = make
        self.model = model
        self.color = color
    
    def accelerate(self):
        self.speed += 10
    
    def brakes(self):
        self.speed -= 10"
Create a Python function to sort a list of strings alphabetically.,"def sort_list(list):
    list.sort()
    return list
    
sort_list(my_list)"
Design a Python script to calculate the sum of the squares of the first 100 natural numbers,"def sum_of_squares(n):
    total = 0
    for i in range(1, n+1):
        total += i ** 2
    return total
 
print(sum_of_squares(100))"
"Create a Python program to capture and store user input until the user enters ""quit"".","userInput = input('Enter your input (or ""quit"" to stop): ')

responses = []

while userInput != 'quit':
    responses.append(userInput)
    userInput = input('Enter your input (or ""quit"" to stop): ')

print(responses)"
Write a python function to count unset bits of a given number.,"def count_unset_bits(n): 
    count = 0
    x = 1
    while(x < n + 1): 
        if ((x & n) == 0): 
            count += 1
        x = x << 1
    return count  "
Improve the performance of the below algorithm written in Python.,"def algorithm(arr):
    result = []
    for i in range(len(arr)):
        for j in range(i + 1, len(arr)):
            if arr[i] + arr[j] == 0:
                result.append((arr[i], arr[j]))
    return result

def optimizedAlgorithm(arr):
    result = []
    seen = set()
    for num in arr:
        if -num in seen:
            result.append((num, -num))
        seen.add(num)
    return result"
Write a function to find nth centered hexagonal number.,"def centered_hexagonal_number(n):
  return 3 * n * (n - 1) + 1"
You need to write a Python program to print the Fibonacci series.,"def fibonacci_series(n): 
    a = 0
    b = 1
    if n < 0: 
        print(""Incorrect input"") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2, n+1): 
            c = a + b 
            a = b 
            b = c 
        return b 

for n in range(0, 10): 
    print(fibonacci_series(n))"
Design a Python program to replace all e with @ in an array of strings,"def replace_e(arr): 
    return [i.replace('e','@') for i in arr] 
  
arr = ['abc','xyz','111']
print(replace_e(arr))"
Write a Python program to flatten a list of lists into a single list.,"import itertools

# flatten a list of lists
list_of_lists = [[1,2], [3], [4,5,6]]
flattened_list = list(itertools.chain.from_iterable(list_of_lists))

# print the flattened list
print(flattened_list)  # Output: [1, 2, 3, 4, 5, 6]"
Write an algorithm in Python to find the sum of the digits in a number.,"def findSum(n): 
	Sum = 0 
	n = str(n)
	for i in n: 
		Sum = Sum + int(i) 
	return Sum

# Driver code  
n = 123
print(findSum(n))"
Write a Python function to calculate the sum of the natural numbers up to n.,"def sum_natural_numbers(n):
    if n < 1:
        return 0
    else:
        return n + sum_natural_numbers(n - 1)"
Create a script in Python that automatically generates an emial address for a given name.,"import random

def generate_email(name):
 name_words = name.split()
 first_name = name_words[0]
 last_name = name_words[1]
 random_numbers = str(random.randint(1,99))
 
 email = first_name + last_name + random_numbers + ""@example.com""
 return email
 
 print(generate_email(""John Doe""))"
Write a function to check if the given string starts with a substring using regex.,"import re 
def check_substring(string, sample) : 
  if (sample in string): 
      y = ""\A"" + sample 
      x = re.search(y, string) 
      if x : 
          return (""string starts with the given substring"") 
      else : 
          return (""string doesnt start with the given substring"") 
  else : 
      return (""entered string isnt a substring"")"
Generate a Python program that takes two lists as input and returns a new list containing only the common elements.,"def common_elements(list1, list2): 
    common_list=[]
    for element in list1: 
        if element in list2: 
            common_list.append(element) 
    return common_list
  
list1 = [1, 2, 3, 4, 8] 
list2 = [2, 6, 8, 10]

common_list = common_elements(list1, list2) 

print(common_list)"
Write a Python program to convert a given string to list of words,"def convert_to_list(s):
    return s.split()

string = 'Hello world'
result = convert_to_list(string)
print(result)"
Generate a Python function that takes in a number as a parameter and finds its Fibonacci number.,"def fibonacci(n):
    a, b = 0, 1
    for i in range(n):
        a, b = b, a + b
    
    return a

fibonacci_number = fibonacci(5)
print(fibonacci_number)"
Write a Python program to sort a list of tuples by the second item in each tuple.,"def sort_list(tuples):
    return sorted(tuples, key = lambda x: x[1])
 
tuples = [(3, 4), (5, 6), (1, 2)]
 
print(sort_list(tuples))"
Create a python program to serialize data in JSON format.,"import json

# some Python data
data = [{'name': 'John', 'age': 30, 'city': 'New York'},
        {'name': 'Max', 'age': 20, 'city': 'Berlin'}]

# convert to JSON
json_data = json.dumps(data)

# save as JSON file
with open(""data.json"", ""w"") as json_file:
 json.dump(json_data, json_file)"
Create a Python function for calculating the mode (most frequently occuring item) in a list of numbers.,"import collections

def mode(numbers):
 counts = collections.Counter(numbers)
 max_count = max(counts.values())
 return [item for item, count in counts.items() if count == max_count]

numbers = [1, 2, 3, 2, 4, 2]
mode = mode(numbers)
print(mode)
# Output: [2]"
Write a Python program that can detect emails within a given text.,"import re

text = 'Hello! My name is John and my email is john@example.com.'

# Find all occurrences of an email using regex
email_regex = r""[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}""
result = re.findall(email_regex, text)

# Print emails found
print(""Emails found: \n"")
for email in result:
 print(email)"
Create a function in Python which takes a list as input and returns the sum of the items in the list.,"def sum_list(input_list):
  sum = 0
  for i in input_list:
    sum += i
  return sum"
Construct a algorithm in Python to find the solution of linear equation.,"# import necessary modules 
import numpy as np 
  
# define coefficient and constants 
a = np.array([[2, 3], [5, -4]]) 
b = np.array([5, 7]) 
  
# solve linear equations 
ans = np.linalg.solve(a, b) 
  
# print the solutions 
print(ans[0], ans[1])"
Can you create a Python program that returns the largest number in a list of numbers?,"def largestNumber(list): 
    maximum = list[0] 
      
    for num in list: 
        if num > maximum: 
            maximum = num 
    return maximum 
  
list = [4, 8, 2, 6, 9] 
largestNumber = largestNumber(list) 
  
print(""Largest number in the given list is:"", largestNumber)"
Generate a Python code snippet to sum all numbers from a list of integers.,"sum = 0
for num in [2, 7, 8, 4, 5]:
    sum += num
print(sum)"
"Create a function in Python which takes 3 arrays as input, and returns the arrays merged together into a single array.","def merge_arrays(arr1, arr2, arr3):
    combined_arr = arr1 + arr2 + arr3
    return combined_arr

result = merge_arrays([1, 2, 3], [4, 5, 6], [7, 8, 9])
print(result)"
Generate a Python script to print the elements of a list in reverse order.,"my_list = [1, 2, 3, 4, 5]

for i in reversed(my_list):
    print(i)"
Write a python code to add two given numbers using recursive function.,"def add_recursively(num1, num2):
    if num2 == 0:
        return num1
    else:
        return add_recursively(num1 ^num2, (num1 & num2) << 1)"
Fix the bug in this Python code.,"def swap(a, b):
  temp = a
  a = b
  b = temp

x = 10
y = 20

swap(x, y)

print(x, y)"
Suggest some techniques to optimize the speed of a python program.,"Some techniques to optimize the speed of a Python program include:
- Optimal use of libraries
- Use of efficient data structures
- Using vectorization and/or NumPy arrays
- Writing efficient loops
- Enabling for in-place operations
- Avoiding unnecessary computations
- Using efficient algorithms
- Avoiding global accesses
- Profiling and memory optimization"
Suggest a way to generate a random series of characters with a given length in Python.,"import random
import string

def generate_random_string(target_length):
    chars = string.ascii_letters + string.digits
    return ''.join(random.choice(chars) for _ in range(target_length))"
Generate a code in Python to find the Kth smallest element in an array.,"def find_kth_smallest(arr, k): 
    n = len(arr) 
  
    arr.sort() 
  
    return arr[k-1]"
Create a Python program that uses a loop to produce the following output.,"for i in range(1,11):
 if i % 2 == 0:
 print('{} is even'.format(i))
 else:
 print('{} is odd'.format(i))"
Generate Python code to clean a text string by removing all punctuation marks.,"import string

def clean_string(text):
    return ''.join(c for c in text if c not in string.punctuation)"
"Create a Python program that calculates the average of 3 grades and returns a grade level using the following scale:

90-100: A
80-89: B
70-79: C
60-69: D
Below 60: F","def get_grade_level(grades):
  average = sum(grades) / len(grades)
  if average >= 90:
    grade_level = 'A'
  elif average >= 80:
    grade_level = 'B'
  elif average >= 70:
    grade_level = 'C'
  elif average >= 60:
    grade_level = 'D'
  else:
    grade_level = 'F'

  return grade_level"
Design a program in Python to reverse the words of a given string.,"def reverseWords(s): 
	# split the string 
	words = s.split(' ') 
	
	# reverse the words 
	words = words[::-1] 
	
	# join the words 
	reverseString = ' '.join(words)
	
	return reverseString 

s = ""This is an example sentence.""
print(reverseWords(s)) 
# Output: sentence. example an is This"
Write a distributed Python program which can generate the Fibonacci series using Spark.,"import findspark
findspark.init()

from pyspark import SparkContext

sc = SparkContext('local', 'fibonacci-generator')

def generate_fibonacci():
 rdd = sc.parallelize([0,1])
 for _ in range(100):
 rdd = rdd.flatMap(lambda x: [x, x + rdd.takeSample(withReplacement=True)[0]])
 return rdd.collect()

result = generate_fibonacci()
print(result)"
"Write a Python program to search through a list of dictionaries for a specific key-value pair, and return the corresponding value.","def search(lst, key, value):
 for dict in lst:
  if dict[key] == value:
   return dict[value]
return None

#search for name with id 2
search(L, 'id', 2)
#outputs 'Alice'"
"Create a basic Python script that takes a user input, filters out any characters that are not letters or numbers, and prints the input after filtering.","import re

input_string = ""This input contains \"" special characters!""
filtered_string = re.sub(r'[^a-zA-Z0-9]', '', input_string)

print(filtered_string) # Output: Thisinputcontainsspecialcharacters"
Find the most frequent element in an array in Python.,"from collections import Counter 

def most_frequent(arr): 
 c = Counter(arr) 
 return c.most_common(1)[0][0]

arr = [1, 3, 3, 3, 5, 4, 4, 6] 
print(most_frequent(arr)) 
# Output: 3"
Write a function to find the largest sum of contiguous subarray in the given array.,"def max_sub_array_sum(a, size):
  max_so_far = 0
  max_ending_here = 0
  for i in range(0, size):
    max_ending_here = max_ending_here + a[i]
    if max_ending_here < 0:
      max_ending_here = 0
    elif (max_so_far < max_ending_here):
      max_so_far = max_ending_here
  return max_so_far"
Generate a Python program to calculate the hypotenuse of a right triangle.,"import math

def hypotenuse(a, b):
    return math.sqrt(a**2 + b**2)

print(hypotenuse(3, 4))"
Construct a naive bayes classifier using python to classify emails as spam or not spam.,"from sklearn.naive_bayes import GaussianNB

# Create a Gaussian Classifier
model = GaussianNB()

# Train the model using the training sets 
model.fit(X_train, y_train)

# Predict Output 
y_pred = model.predict(X_test)"
Develop a loop in Python to generate a dictionary of all numbers below 1000 that are divisible by 7.,"d = {}

for i in range(1000):
    if i % 7 == 0:
        d[i] = i

print(d)"
Make a Python program that can generate random numbers between 1 and 1000.,"import random

def random_number():
    return random.randint(1, 1000)

print(random_number())"
Write a function in Python that given a number n prints the first n Fibonacci numbers.,"def fibonacci(number):
 a = 0
 b = 1 
 for i in range(number):
 print(a)
 temp = a
 a = b
 b = temp + b

number = int(input(""Enter a nmber: ""))
fibonacci(number)"
Convert a Python program that uses for-loops to one that uses only while-loops.,"i = 0 
while i < 3: 
    print(i) 
    i += 1"
Write a python program to optimize the given objective function.,"from scipy.optimize import minimize 

def obj_func(x):
    # objective function
    # ...

def optimize(): 
    # set up optimization problem
    x0 = [0.0, 0.0, 0.0] 
    res = minimize(obj_func, x0, method='nelder-mead', options={'xtol': 1e-8, 'disp': True}) 
    return res.x

print(optimize())"
Write a Python program that takes an integer number as an input and calculates the sum of the even factors of that number.,"def get_sum_even_factors(n):
    sum = 0
    for i in range(2, n+1):
        if (n % i == 0) and (i % 2 == 0):
            sum = sum + i
    return sum

# Test 
input_num = 50
print(get_sum_even_factors(input_num)) # returns 196"
"Given a JSON object, write a Python program to convert it into a dictionary.","import json

json_object = { ""name"": ""John"", ""age"": 30, ""City"": ""New York"" }

dict = json.loads(json.dumps(json_object))

print(dict)"
Write a python function to find the minimum sum of absolute differences of two arrays.,"def find_Min_Sum(a,b,n): 
    a.sort() 
    b.sort() 
    sum = 0  
    for i in range(n): 
        sum = sum + abs(a[i] - b[i]) 
    return sum"
Create a Python function that takes in two numbers and returns the greater one.,"def get_greater_number(x, y):
    if x > y:
        return x
    else:
        return y

x = 7
y = 10
greater_number = get_greater_number(x, y)
print(greater_number) # 10"
Modify the following Python code to print the sum of the elements in a given list (without using the sum() function).,"my_list = [1, 5, 4, -3, 10]

total = 0

for num in my_list:
 total += num

print(total) # prints 17"
Design a program in Python to produce a list of all prime numbers up to a given number.,"def find_all_primes(n):
    """"""Finds all prime numbers up to a given number n.""""""
    primes = []
    for num in range(2, n+1):
        for i in range(2, num):
            if (num % i) == 0:
                break
        else:
            primes.append(num)
    return primes"
Write a python function to format a string according to provided parameters.,"def formatString(s, upperCaseLetters, lowerCaseLetters):
    newStr = """"
    if upperCaseLetters: 
        newStr = s.upper()
    elif lowerCaseLetters: 
        newStr = s.lower()
    return newStr

print(formatString(""Hello World"", True, False)) # Output: ""HELLO WORLD"""
Write Python code to shuffle a given list.,"def shuffle_list(given_list):
    temp_list = given_list[:]
    random.shuffle(temp_list)
    return temp_list"
Optimize the performance of a function in Python that calculates the total of a list of numbers.,"def sum_list(nums):
 total = 0
 for num in nums:
 total += num
 return total

def sum_list_optimized(nums):
 total = 0
 length = len(nums)
 while length > 0:
 total += nums[length - 1]
 length -= 1
 return total

nums = [1, 2, 3, 4, 5]
print(sum_list_optimized(nums))  # Output: 15"
Develop a web scraper in Python to extract data from a web page.,"import requests
from bs4 import BeautifulSoup

url = 'example.com'
page = requests.get(url)
soup = BeautifulSoup(page.content, 'html.parser')

data = []
for item in soup.find_all('div', attrs={'class': 'data_item'}):
  data.append(item.text)

print(data)"
Write a Python program to sort a list of words in ascending order based on their length.,"words = [""I"", ""am"", ""all"", ""ears""]

#sort the words by length
words.sort(key = len)

#print the sorted words
for word in words:
 print(word)

# Output
I
am
all
ears"
Generate a code for multiple linear regression in Python,"import numpy as np

def multiple_linear_regression(x, y):
    # add ones column
    X = np.concatenate((np.ones((x.shape[0], 1)), x), axis=1)
    # calculate the parameters 
    theta = np.linalg.inv(X.T.dot(X)).dot(X.T).dot(y)
    return theta"
Create a python program that finds the number of elements between two given indices in a given list.,"def count_elements(list, start, end):
    elements_count = 0
    start_index = list.index(start)
    end_index = list.index(end)
    for i in range(start_index + 1, end_index):
        elements_count += 1
    return elements_count"
Rewrite the following Python code using vectorization techniques to reduce the computation time.,"squares = [x * x for x in range(100)] # vectorized code equivalent to the for loop, which will be faster"
Write a Python program that reads a list of strings and sorts them by the number of characters in each string.,"list_of_strings = ['foo', 'bar', 'baz', 'foobar', 'beer', 'wine']

# sort strings by length
list_of_strings.sort(key=len)

# print sorted list
print(list_of_strings)"
Create a loop structure in python code to perform the following task,"words = para.split(' ')
total = 0
for word in words:
    total += 1
print(total)"
"Generate a list of 100,000 random numbers from 0 to 1 using NumPy in Python.","import numpy as np

random_numbers = np.random.uniform(0, 1, 100000)"
Write a python function to identify non-prime numbers.,"import math
def is_not_prime(n):
    result = False
    for i in range(2,int(math.sqrt(n)) + 1):
        if n % i == 0:
            result = True
    return result"
Write a function to rearrange positive and negative numbers in a given array using lambda function.,"def rearrange_numbs(array_nums):
  result = sorted(array_nums, key = lambda i: 0 if i == 0 else -1 / i)
  return result "
"Given a list of integers with no duplicates, write a python program to determine if all elements in the list are perfect squares.","def is_perfect_square(lst):
    for num in lst:
        if (int(num ** 0.5)) ** 2 != num: 
            return False
    return True"
Generate a Python code for a web scraper to extract the current Bitcoin price from a website.,"import requests
from bs4 import BeautifulSoup

url = 'https://example.com/'

r = requests.get(url)
soup = BeautifulSoup(r.text, 'html.parser')

bitcoin_price = soup.find('span', {'class': 'btc-price'}).text

print(f'The current Bitcoin price is {bitcoin_price}')"
"Write a Python code snippet to search and print all items in the list that starts with substring ""java"".","arr = [""python"", ""c++"", ""java"", ""java-script""]

result = []
for item in arr:
    if item.startswith(""java""):
        result.append(item)
print(result)"
Create a Python program to download a website from the Internet and save it locally.,"import urllib.request

url = 'https://www.example.com'

try:
 response = urllib.request.urlopen(url)
 content = response.read()
 filename = url.split('/')[-1]
 with open(filename, 'w') as file:
 file.write(content)
except Exception as e:
 print(e)"
Generate a code snippet in Python to handle HTTP requests from a given URL.,"import requests

url = 'https://example.com/test'
 
# Make the request
response = requests.get(url)
 
# Check the response
if response.status_code == 200:
  # Success
  content = response.text
else:
  # Failure
  print(f'Request failed with status code: {response.status_code}')"
Design a Python function that outputs the sum of all multiples of 4 and 7 between 1 and a given number n.,"def sum_multiples_4_7(n): 
      
    sum = 0
    # iterate from 1 to n 
    for i in range(1, n+1): 
          
        # Sum only if it's a
        # multiple of 4 or 7 
        if(i % 4 == 0 or i % 7 == 0): 
            sum += i 
    return sum

result = sum_multiples_4_7(100)
print(result)"
Design a solution in Python for determining the frequency of characters in a given string.,"text = ""A quick brown fox jumps over the lazy dog.""

count = {} 
for character in text: 
    if character in count: 
            count[character] += 1
    else: 
            count[character] = 1
  
for key in count: 
    print('%s appears %d times' % (key, count[key]))"
Write a short Python script to compute the average temperature of a given set of temperatures.,"def average(temperatures):
    total = 0
    for temp in temperatures:
        total += temp
    return total/len(temperatures)

print(average(temperatures))"
Write a Python program to create a program to compare two lists of numbers.,"def compare_lists(list_a, list_b):
    a_not_in_b = []
    b_not_in_a = []
    
    for a in list_a:
        if a not in list_b:
            a_not_in_b.append(a)
            
    for b in list_b:
        if b not in list_a:
            b_not_in_a.append(b)
            
    return a_not_in_b, b_not_in_a"
Generate a classifier in Python using the Random Forest algorithm.,"from sklearn.ensemble import RandomForestClassifier

X = [[Weight, Size]]
y = [Type]

model = RandomForestClassifier(random_state=0)
model.fit(X, y)"
Write a Python script to measure execution time of a given operation.,"import time

def measure_time():
 start = time.time()
 # Your code here...
 end = time.time()
 return end - start 

execution_time = measure_time()
print(""Time taken:"", execution_time, ""seconds"")"
Create a python dictionary using the given lists.,"{1: 4, 2: 5, 3: 6}"
Generate a list in Python containing all numbers between 0 and 50 (inclusive) that are multiples of 3.,"my_list = [x for x in range(0, 51) if x % 3 == 0]"
Change the following python code so that the loop only iterates through the even numbers in the list.,"for num in range(16):
    if num % 2 == 0:
        print(num)"
Create a Python dictionary of students' names and their corresponding grades in a course.,"students_dict = {
 ""John"": 98,
 ""Jennifer"": 95,
 ""Noah"": 87,
 ""Frank"": 92
}"
Create a Python program to create a histogram from a given list of integers.,"def print_histogram(nums):
  for num in nums:
    output = ''
    times = num
    while(times > 0):
      output += '#'
      times = times - 1
    print(output)"
Create a python program to test if a given string is a palindrome,"def is_palindrome(str):
    for i in range(len(str) // 2):
        if str[i] != str[-i - 1]:
            return False
    return True

# Test
result = is_palindrome(""level"")
print(result) # Output: True"
Create a Python code to organize a given dictionary and sort its keys alphabetically.,"sortedDict = dict(sorted(myDict.items()))

print(sortedDict)"
"Create a class in Python that represents an employee object with three attributes - employee ID, name and salary.","class Employee:
 def __init__(self, employee_id, name, salary):
 self.employee_id = employee_id
 self.name = name
 self.salary = salary

 def __repr__(self):
 return 'Employee({}, {}, {})'.format(self.employee_id, self.name, self.salary)"
Write a Python script to generate a random username using letter and numbers.,"import string
from random import *

def generate_username():
    letters = string.ascii_letters
    numbers = string.digits
    username = """"
    for _ in range(10):
        username += choice(letters) + choice(numbers)
    return username

print(generate_username())"
Design an algorithm in Python to get the largest number in a list.,"def getMax(list):
    max = 0
    for num in list:
        if num > max:
            max = num
    return max

list = [2, 5, 3, 7]
print(getMax(list))"
Generate a 20 x 20 matrix of zeros in Python.,"import numpy as np

matrix = np.zeros((20,20))
print(matrix)"
Write a Python function for computing the Fibonacci numbers of n.,"def fibonacci(n):
    if n < 2:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)"
Write a function to substaract two lists using map and lambda function.,"def sub_list(nums1,nums2):
  result = map(lambda x, y: x - y, nums1, nums2)
  return list(result)"
Develop a function to calculate the GCD of two given numbers in Python.,"def gcd(a, b): 
    if (b == 0): 
        return a 
    return gcd(b, a % b)"
Can you provide a Python code to print the largest item in a given list?,"# Find the largest element in a list

def find_largest(lst):
    max_val = float('-inf')
    for val in lst:
        if val > max_val:
            max_val = val
    return max_val

# Test
lst = [9, 2, 6, 10, 4]
print(find_largest(lst)) # 10"
Gadgetize the following Python function to accept any number of inputs,"def sum(*args):
   total = 0
   for arg in args:
       total += arg
   return total"
Create a Python program to calculate the GC content of a DNA sequence.,"dna_sequence = 'ACTGCTAGCTACTAGC'
gc_count = 0
for base in dna_sequence:
 if base == 'G' or base == 'C':
  gc_count += 1
gc_percentage = gc_count / len(dna_sequence) * 100
print(gc_percentage)"
Create an algorithm in Python to find the largest rectangular area in a histogram.,"def maxArea(heights):
  max_area = 0
  left = 0
  right = len(heights) - 1

  while left < right:
    h = min(heights[left], heights[right])
    max_area = max(max_area, h * (right - left))
    if heights[left] < heights[right]:
      left += 1
    else: 
      right -= 1

  return max_area

print(maxArea(heights)) # 8"
"Write a Python program to remove the words containing the letter ""a"" from a sentence.","sentence = ""I am a strong girl""

without_a = ' '.join([word for word in sentence.split() if 'a' not in word])

print(without_a)
# Output: I strong girl"
Create a Python program to detect if the given number is a prime number or not.,"def is_prime(num):
    # 1 is not a prime number 
    if num == 1:
        return False
  
    for i in range(2, num):
        if num % i == 0:
            return False
    return True"
Write a function that takes a string and prints out the string in reverse.,"def reverse_string(s):
  return s[::-1]
  
print(reverse_string('Python'))  # nohtyP"
"Create a Python program that features an endless loop that repeatedly asks the user to input a number between 1 and 10. When the number is valid, the program should output the number plus one.","while True:
    num = int(input(""Please input a number between 1 and 10: ""))
    if num in range(1, 11):
        print(num + 1)
    else:
        print(""Invalid number!"")"
Construct a Python dictionary to convert Celsius temperature values to their Fahrenheit equivalents,"celsius_to_fahrenheit = {
    0 : 32,
    10 : 50,
    20 : 68,
    30 : 86,
    40 : 104,
    50 : 122,
    60 : 140,
    70 : 158,
    80 : 176,
    90 : 194,
    100 : 212
}"
Write a quicksort algorithm in python.,"def quicksort(array):
    if len(array) < 2:
        return array
    else:
        pivot = array[0]
        less = [i for i in array[1:] if i <= pivot]
        greater = [i for i in array[1:] if i > pivot]
 
        return quicksort(less) + [pivot] + quicksort(greater)"
Write a function to print n-times a list using map function.,"def ntimes_list(nums,n):
    result = map(lambda x:n*x, nums) 
    return list(result)"
"Design a class in Python for storing movie information including the name, year of release, genre and rating.","class Movie:
    def __init__(self, name, release_year, genre, rating):
        self.name = name
        self.release_year = release_year
        self.genre = genre
        self.rating = rating

movie = Movie(""Interstellar"", 2014, ""Sci-Fi"", 8.4)
print(movie.name, movie.release_year, movie.genre, movie.rating)"
Create a code that checks whether the given date is valid or not in Python.,"def validate_date(year, month, day):
    try:
        datetime.datetime(year, month, day)
        return True
    except ValueError:
        return False

validate_date(2020, 11, 40) # Output: False"
Write a function in Python to detect if a given string contains any special characters such as $ # & ! etc.,"def special_characters_check(string):
    special_characters = ['@','#','$','%','^','&','*','(',')','+',':',';','?','/']
    for character in string:
        if character in special_characters:
            return ""Yes, the string contains a special character.""
    return ""No, the string does not contain a special character."""
Can you create a program Python to find the top ten most frequent words in a text?,"import collections

#Splitting the text into words
words=text.split()

#Creating a frequency table
word_freq = collections.Counter(words)

#Printing the top 10 most frequent words
for word, frequency in word_freq.most_common(10):
    print(word, frequency)"
Write a function in Python to extract the domain name from an email address.,"def get_domain_name_from_email(email):
    return email.split('@')[-1]"
Generate Python code to connect to a SQL database.,"import mysql.connector

connection = mysql.connector.connect(  
    host = ""test.com"",
    user = ""admin"",
    password = ""pwd123"",
    database = ""testdb""
)"
Propose a solution that optimizes the following python program.,"import numpy as np

arr = np.array(arr)  # Convert to a numpy array

arr += 5  # add 5 to the array"
Develop a Python program that enables a user to select two numbers and add them together.,"# define add() function 
def add(num1, num2): 
    # Adding both the parameters and return them 
    sum = num1 + num2
    return sum

# Give the two numbers the user wants to add 
num1 = float(input(""Enter first number: ""))
num2 = float(input(""Enter second number: ""))

# Add and print the result 
print(""The sum of {} and {} is {}"".format(num1, num2, add(num1, num2)))"
Write a Python function that takes an integer n and n numbers and returns an array containing the largest n numbers.,"def largest_n_numbers(n, *nums):
    nums_sorted = sorted(nums, reverse=True)
    return nums_sorted[:n]

result = largest_n_numbers(3, 8, 5, 7, 2, 10)
print(result)"
Generate a Python program to delete a given key from a dictionary.,"dictionary = {'foo': 1, 'bar': 2, 'baz': 3}
key = 'baz'

def delete_key(dic, k):
  if k in dic:
    del dic[k]

delete_key(dictionary, key)

print(dictionary)"
Create a Python function that takes two strings as arguments and returns their concatenation with a single dash in between.,"def concatenate_strings(first_str, second_str):
    return first_str + '-' + second_str

first_str = ""Hello""
second_str = ""World""
result = concatenate_strings(first_str, second_str)
print(result)"
Refactor this piece of Python code to increase its readability.,"def maximum_sum(arr, n):
    msum = 0
    for i in range(n):
        for j in range(i, n):
            cur_sum = 0
            for k in range(i, j + 1):
                cur_sum += arr[k]
            msum = max(msum, cur_sum)
    return msum"
Create a program in Python that can generate a random password of 8 characters.,"import random
import string
 
def generate_password():
    password_length = 8
    all_characters = string.ascii_letters + string.digits + string.punctuation
    password = """".join(random.choice(all_characters) for i in range(password_length))
 
    return password"
Create a random number generator in Python.,"import random

def generate_random_number():
	# Generate a random number between 0 and 1
    return random.random()"
Is it possible to create a function in Python that takes a string as an argument and returns its length?,"def string_length(str):
    return len(str)

string = ""Hello World""
length = string_length(string)
print(""Length of the string is: %d"" % length)"
Create a program that lints and checks a given python source code for correctness.,"import lint

def check_code(source_code):
    lint.py_run(source_code, ""--report=yes"")"
Write a Python program to solve a linear equation system of the form: ax + by = c.,"def solve_linear_equation_system(a, b, c):
 x = (c - b) / a
 y = (c - a*x) / b
 return x, y

x, y = solve_linear_equation_system(a, b, c)
print(""x = {}, y = {}"".format(x, y)) # x = 2.0, y = 2.0"
Create a Flask API in Python that takes in text as input and prints out the lemmas of each word.,"from flask import Flask, request
from nltk.stem import WordNetLemmatizer

app = Flask(__name__)

@app.route(""/lemmas"", methods=['POST'])
def lemmas():
    text = request.form[""text""]
    lemmatizer = WordNetLemmatizer()
    words = text.split("" "")
    lemmas = [lemmatizer.lemmatize(word) for word in words]
    return "" "".join(lemmas)
    
app.run(debug=True)"
"Given a string, convert it to a list of words.","# Python code to convert a string 
# to a list of words 

# Split a string by a delimiter 
def string_split(string): 
    # Split the string into words 
    words = string.split(' ') 
  
    return words 
      
# Driver code 
string = ""Hello there, how are you?""
print(string_split(string))"
Create a Python class with a method to sum two numbers.,"class Sum:
 def add_two_numbers(self, x, y):
  return x + y"
Create a class in Python to store the details of mobile phone,"class MobilePhone:
    def __init__(self, brand, model, year, display_size):
        self.brand = brand
        self.model = model
        self.year = year
        self.display_size = display_size"
Can you create a python program that returns the index of an item in a given array of numbers?,"def getIndex(arr, item):
    for i in range(len(arr)):
        if arr[i] == item:
            return i
    return -1

arr = [1,2,3,4,5,6]
item = 5
index = getIndex(arr, item)
print('Index of', item, 'is', index) # index is 4"
Create a Python program to get the least common multiple (LCM) of two numbers.,"def lcm(num1, num2):
  if num1 > num2:
    greater = num1
  else:
    greater = num2

  while(True):
    if((greater % num1 == 0) and (greater % num2 == 0)):
      lcm = greater
      break 
    greater += 1

  return lcm"
Code a Python program that prints out the longest word in a given sentence.,"sentence_string = 'This is an example sentence with some words.'
word_list = sentence_string.split(' ')

longest_word = sorted(word_list, key=len)[-1]

print(longest_word)

# Output
sentence"
Generate a method in Python that takes an array of strings and selects strings that contain more than 6 characters.,"def filter_long_words(words):
    return [word for word in words if len(word) > 6]"
Write a Python class for storing student ID and name,"class Student:

    def __init__(self, student_id, name):
        self.student_id = student_id
        self.name = name
        
    def get_details(self):
        return self.student_id, self.name"
Write a Bash script to activate a python virtual environment.,"# activate the virtual environment 
source venv/bin/activate"
Create a Python program to convert weights from pounds to kilograms.,"def pounds_to_kilos(pounds):
  return pounds * 0.453592

while True:
  pounds = float(input(""Enter a weight in pounds: ""))
  print(f""{pounds} lbs = {pounds_to_kilos(pounds)} kgs"")"
Generate a valid Python program to create an alphabetically sorted list of all the words in a sentence.,"def sortSentence(sentence):
    words = sentence.split("" "")
    words.sort()
    return words

result = sortSentence(""This is a great day"")
print(result)"
Edit the existing code to use a python approach to convert the temperature from celsius to fahrenheit.,"def celsius_to_fahrenheit(celsius):
    return (celsius * 9 / 5 + 32)

temperature_in_fahrenheit = celsius_to_fahrenheit(24)
print(temperature_in_fahrenheit)"
Create a program in Python to extract the first and last names from a string of full names.,"names = input().split()

first_name = names[0]
last_name = names[-1]

print('First Name:', first_name)
print('Last Name:', last_name)"
Optimize a Python program that counts the number of words in a given sentence.,"def count_words(sentence):
    # split the sentence on whitespace
    words = sentence.split()
    
    # return the length of the resulting list
    return len(words)
    
sentence = 'This is a test sentence.'

# count the number of words
num_words = count_words(sentence)

print('Number of words:', num_words)"
Produce an actionable item for the following task.,"Create a web application using HTML, CSS, and JavaScript. Design the interface and develop the functionality of the application. Implement backend features using a server-side language such as Python or Node.js."
Generate a Python program to read a list of integers and print its elements in reversed order.,"list_of_ints = [1, 3, 6, 8, 10]

list_of_ints.reverse()

print(list_of_ints) # [10, 8, 6, 3, 1]"
"Create a python program that prints ""Hello World!"" five times.","for x in range(5):
    print(""Hello World!"")"
Develop a Python script to convert Numbers to binary,"def toBinary(num):
    if num > 1:
        toBinary(num // 2)
    print(num % 2, end = '')

toBinary(7)"
Write a Python program that parses a single URL from a given string.,"import re

def parse_url(url):
    regex = r""^(https?://[^/]+)(.*)$""
    match = re.search(regex, url)
    return match.group(1), match.group(2)

url, query = parse_url(""https://www.example.com/index.php?p=1&q=2"")
print(""URL:"", url)
print(""Query:"", query)"
Convert the following python code into a Java program (15 lines or less).,"public class Factorial {
    public static int fact(int n) {
        if (n < 0) {
            return 0;
        }

        if (n == 0) {
            return 1;
        }

        return n * fact(n - 1);
    }
}"
Write a python function to find the sum of all even natural numbers within the range l and r.,"def sum_Natural(n): 
    sum = (n * (n + 1)) 
    return int(sum) 
def sum_Even(l,r): 
    return (sum_Natural(int(r / 2)) - sum_Natural(int((l - 1) / 2))) "
Write a function to sort the given tuple list basis the total digits in tuple.,"def count_digs(tup):
  return sum([len(str(ele)) for ele in tup ]) 
def sort_list(test_list):
  test_list.sort(key = count_digs)
  return (str(test_list))"
Design a logic in Python to check if two numbers are divisible by each other.,"def isDivisible(a, b):
    return a % b == 0"
Create a function in Python to convert hours to minutes.,"def hours_to_minutes(hours):
    """"""Converts input hours to minutes.""""""
    return hours * 60"
Create an algorithm in Python to detect duplicate numbers in a given array.,"def find_duplicates(numbers):
    seen = set()
    duplicates = set()

    for number in numbers:
        if number in seen:
            duplicates.add(number)
        else:
            seen.add(number)
    
    return duplicates"
Develop an algorithm in Python to reverse a given string.,"def reverse_string(string):
    reversed_string = """"
    for char in string:
        reversed_string = char + reversed_string
    return reversed_string

result = reverse_string(""Hello World!"")
print(result)"
Write a python program to extract the title of a given website,"import requests
from bs4 import BeautifulSoup

url = 'https://www.wikipedia.org' 
page = requests.get(url)
soup = BeautifulSoup(page.content, 'html.parser')
title = soup.find('title').text
print(title)
# Output: Wikipedia"
Create a Python script to generate 10 random numbers and print their sum.,"import random

nums = random.sample(range(100), 10)
total = 0

for num in nums:
    total += num

print(total)"
Write a Python script to change all letter cases in a given string.,"def change_case(txt):
    result = """"
    for ch in txt:
        if ch.isupper():
            result += ch.lower()
        elif ch.islower():
            result += ch.upper()
    return result

txt = ""This Is A Test String""
result = change_case(txt)
print(result)"
Generate a python program to scramble a sequence of characters.,"import random 

# Initialize the string  
string = 'Hello World!'

# Convert the string to a list
char_list = list(string) 

# Shuffle the list
random.shuffle(char_list) 

# Convert back the list to a string
random_string = ''.join(char_list)

# Print the scrambled string
print(random_string)"
Write a function in Python to generate a random password of 8 characters.,"import random, string

def random_password(length):
    chars = string.ascii_letters + string.digits + '!@#$%^&*()'
    random_password = ''.join(random.choice(chars) for i in range(length))

    return random_password

print(random_password(8))"
Write a Python program to generate recurrence equation for a given sequence and initial condition.,"def generate_recurrence(sequence, initial_condition): 
 if len(sequence) <= 1: 
 return initial_condition 
 
 a_i = sequence[-1] 
 a_i_1 = sequence[-2] 
 recurrence = a_i + initial_condition - a_i_1 
 return recurrence

result = generate_recurrence([2, 4, 6, 8], 2)
print(result)"
Generate a Python script that takes an integer and calculates the factorial of that integer.,"def factorial(n): 
    if (n == 0): 
        return 1
    return n * factorial(n - 1)"
Rewrite this Python code block to use the reduce function.,"from functools import reduce

lst = [4, 1, 3, 2, 6, 5]

result = reduce(lambda a, b: a + [b * 2], lst, [])"
Generate a Python program to visualize multiple dimensions of data with matplotlib.,"import matplotlib.pyplot as plt

x = [0, 1, 2, 3, 4, 5, 6, 7]
y = [0, 1, 4, 9, 16, 25, 36, 49]

plt.plot(x, y)
plt.xlabel('X Axis')
plt.ylabel('Y Axis')
plt.title('Plot of X and Y')
plt.show()"
Write a Python function to check if a given string is an anagram or not.,"def is_anagram(str1, str2): 
    if len(str1) != len(str2): 
        return False 
    str1 = sorted(str1.lower()) 
    str2 = sorted(str2.lower()) 
    return str1 == str2"
Construct an N-ary tree to represent a directory structure.,"An N-ary tree can be constructed using programming languages such as Python, JavaScript, etc. It will contain code to create nodes and connect them in the form of a tree structure using references/pointers."
Give an algorithm and implement it in Python to sort the following array,"def sortArray(arr):
    n = len(arr)
    for i in range(n):
        min_idx = i
        for j in range(i+1, n):
            if arr[min_idx] > arr[j]:
                min_idx = j
        arr[i], arr[min_idx] = arr[min_idx], arr[i]
    return arr 
   
sortArray([9, 8, 2, 4, 5, 7, 0])"
"Write a Python program to replace a particular word in a sentence with ""XXX"".","sentence = ""It's a beautiful day""

word = ""beautiful""

result = sentence.replace (word, ""XXX"")

print(result)"
Write a Python program to merge two given dictionaries.,"def merge_dicts(dict1, dict2):
    new_dict = dict1.copy()
    new_dict.update(dict2)
    return new_dict

dict1 = {'a': 10, 'b': 20, 'c': 30}
dict2 = {'d': 40, 'e': 50, 'f': 60}

print(merge_dicts(dict1, dict2))"
Create a Python function for reversing a string.,"def reverse_string(string):
    string = string[::-1]
    return string

result = reverse_string(string)
print(result) # output -> ""!dlrow olleh"""
Implement a Python class that calculates factorial of a number.,"class Factorial:
    def __init__(self,n):
        self.n=n
    def fact(self):
        f=1
        while self.n>0:
            f*=self.n
            self.n-=1
        return f
num =int(input('Enter the number: '))
obj = Factorial(num)
print('Factorial of ',num,' is: ',obj.fact())"
Write a Python program to sort a given array in ascending order.,"def sort_ascending(array):
    n = len(array)
    for i in range(n):
        for j in range(0, n-i-1):
            if array[j] > array[j+1]:
                array[j], array[j+1] = array[j+1], array[j]
    return array

array = [3, 1, 5, 4, 2]
print(sort_ascending(array))"
Write a Python program to find the maximum number in an unsorted array without using linear search.,"def find_max_unsorted(arr):
    max_value = arr[0]
    for i in range(1, len(arr)):
        if arr[i] > max_value:
            max_value = arr[i]
    return max_value"
Convert this Python code to JavaScript code.,"let arr = [3, 4, 5, 2, 6, 8, 1];

function bubbleSort(arr) {
  let swapped;
  do {
    swapped = false;
    for (let i = 0; i < arr.length; i++) {
      if (arr[i] && arr[i + 1] && arr[i] > arr[i + 1]) {
        let temp = arr[i];
        arr[i] = arr[i + 1];
        arr[i + 1] = temp;
        swapped = true;
      }
    }
  } while (swapped);
  return arr;
}"
Write a python script to generate an array of random numbers between two specified values.,"import random

# Generate an array of random numbers between two specified values
def generate_array(min, max):
 array = []
 
 for i in range(min, max):
  array.append(random.randint(min, max))
 
 return array
 
min = 0
max = 50
print(generate_array(min, max))"
Create a Python script to generate a given number of random numbers within a particular range,"# Import library
import random

# Generate random numbers
random_nums = []

for i in range(5):
    random_nums.append(random.randint(0,100))

# Print random numbers
print(random_nums)"
Design an algorithm in Python for sorting a given array of numbers in descending order.,"def bubble_sort(arr):
 length = len(arr)
 
 for i in range(length - 1, 0, -1):
 for j in range(0, i):
 if arr[j] < arr[j + 1]:
 arr[j], arr[j + 1] = arr[j + 1], arr[j]
 
 return arr
 
a = [3, 5, 7, 2, 4, 1]
print(bubble_sort(a)) # [7, 5, 4, 3, 2, 1]"
"Write a Python function which, when given a string of text and a n number, returns a list of all n-grams within that string.","def n_grams(string, n):
  tokens = string.split()
  n_grams = []
  for i in range(len(tokens)-n+1):
    n_grams.append(tokens[i:i+n])
  return n_grams"
Write a Python program to format a given string with a coefficient of over 66%.,"def format_string(s):
 return s.upper() if (s.count("" "")+1) / len(s) > 0.66 else s

s = ""Hello World""
print(format_string(s))
# Output: HELLO WORLD"
Write a python script to generate a dictionary containing numbers from 1 to n as keys and their square as values.,"def generate_dict(n):
    d = {}
    for i in range(1, n+1):
        d[i] = i*i
    return d"
Create a Python program to take in two strings and determine if they are permutations of each other.,"def is_permutation(s1, s2):
    if len(s1) != len(s2):
        return False
    
    c1 = [0] * 256
    c2 = [0] * 256

    for i in range(len(s1)):
        c1[ord(s1[i])] += 1
        c2[ord(s2[i])] += 1

    if c1 == c2:
        return True
    else:
        return False"
Write a code in Python to evaluate the expression 3x + 5 for any given x,"def expression(x):
    return 3 * x + 5

print(expression(7))"
Build a function in Python that will calculate the area of a right angled triangle.,"def area_of_right_triangle(base, height): 
  """"""Calculate the area of a right angled triangle""""""
  return (1/2) * base * height"
Generate a program in Python to compute the maximum of two given numbers.,"num1 = 8
num2 = 4
 
if (num1 > num2):
    print(""The maximum of the given numbers is: ""+str(num1))
else:
    print(""The maximum of the given numbers is: ""+str(num2))"
Create a Python function that takes in a list of numbers and returns the first occurrence of a prime number.,"def findPrime(nums):
 for num in nums:
 if isPrime(num):
 return num

def isPrime(num):
 if num <= 1:
 return False
 for i in range(2, num):
 if (num % i == 0):
 return False
 return True"
Create a function in python that takes two integers as inputs and outputs the greatest common divisor.,"def gcd(x, y): 
  
   while(y): 
       x, y = y, x % y 
  
   return x 
  
 # driver code  
x = 105
y = 45 
print(""The gcd of"", x,  
                        ""and"", y, ""is"", gcd(x, y))"
Write a function to access dictionary key’s element by index.,"def access_key(ditionary,key):
  return list(ditionary)[key]"
Write a Python program to extract the text from the webpage.,"import requests 
def extract_text(url): 
  page = requests.get(url) 
  return page.content"
Develop a Python script to print all the permutations of a given string.,"def permutations(string):
 perms = []
 if len(string) == 1:
 perms.append(string)
 return perms
 
 for i in range(len(string)):  
 substring = string[:i] + string[i+1:]
 for permutation in permutations(substring):  
 perms.append(string[i] + permutation)
 return perms

permutations('ABC')"
Create a method in Python to find the sum of all even numbers between two integers including the first and last number.,"def even_sum(low, high):
    sum = 0
    for i in range(low, high+1):
        if i % 2 == 0:
            sum += i
    return sum

result = even_sum(10, 20)
print(result)"
Implement a Python function that takes an array of strings as the input and returns a list of distinct strings sorted lexicographically.,"def distinct_strings_sort(arr):
 result = []
 
 for s in arr:
 if s not in result:
 result.append(s)
 
 return sorted(result)

# Example:
arr = ['hello', 'world', 'hello', 'again']
distinct_sorted = distinct_strings_sort(arr)
print(distinct_sorted)  # Prints: ['again', 'hello', 'world']"
Write a Python code to calculate the sum of prime numbers between 1 and n.,"n = 20

def calculate_sum_of_primes(n):
    result = 0
    if n >= 2:
        primes = [2]
        for i in range(3, n + 1, 2):
            for j in primes:
                if i % j == 0:
                    break
            else:
                primes.append(i)
        result = sum(primes)
    return result

print(calculate_sum_of_primes(n))"
Generate a python script to convert a string to a list of single-character strings in the same order.,"def string_to_list(s):
    l = []
    for c in s:
        l.append(c)
    return l

l = string_to_list('GPT')
print(l)"
Write a function in Python to implement a search algorithm.,"def search(list, query): 
    found_indices = [] 
    for i in range(len(list)): 
        if list[i] == query: 
            found_indices.append(i) 
    return found_indices"
Create a python program that checks if a given array is sorted in ascending order,"def check_sorted(array):
    return all(array[i] <= array[i+1] for i in range(len(array)-1))"
"Write code in Python to create a dictionary with two keys, ""x"" and ""y"", and their values of 7 and 8 respectively.","dictionary = {
    ""x"" : 7,
    ""y"" : 8
}"
Edit an existing Python program that takes two numbers as input and calculates their sum. The edited program should accept the numbers as input from the user via the command line.,"# Capture two numbers from the command line
num1 = int(input(""Please enter a number: ""))
num2 = int(input(""Please enter a second number: ""))

# Calculate the sum
sum = num1 + num2

# Print the result
print(""The sum of the numbers is:"", sum)"
Generate a Python code snippet to remove all the whitespaces from a string.,"def remove_spaces(s): 
   return s.replace(' ', '') 

s = input(""Enter a string: "")
print(remove_spaces(s))"
Analyze the following data and build a linear regression model in Python.,"import numpy as np

x = np.array([1,2,3,4,5,6,7])
y = np.array([2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5])

m = ((np.mean(x)*np.mean(y)) - np.mean(x*y))/((np.mean(x)**2) - np.mean(x**2))
c = np.mean(y) - (m*np.mean(x))

print(""slope ="", m)
print(""intercept ="", c)"
Write a python program that takes a list of strings and returns a sorted copy of the list.,"def sort_list(l):
    l.sort()
    return l

sorted_list = sort_list(['cat', 'dog', 'bird', 'elephant'])

print(sorted_list) # Output: ['bird', 'cat', 'dog', 'elephant']"
Write a function to round up a number to specific digits.,"import math
def round_up(a, digits):
    n = 10**-digits
    return round(math.ceil(a / n) * n, digits)"
Design a function in Python that takes in a number n and prints the first n rows of the Pascal's Triangle.,"def print_pascal_triangle(n):
  prev_line = [1]
  print(prev_line)

  for i in range(1, n):
    line = [1]
    for j in range(1, i):
      line.append(prev_line[j-1] + prev_line[j])
    line.append(1)
    prev_line = line
    print(line)

print_pascal_triangle(10)"
Write an algorithm in Python for finding the minimum element in an array.,"def findMin(arr): 
    min = arr[0] 
    for i in range(1, len(arr)): 
        if arr[i] < min: 
            min = arr[i] 
    return min

arr = [3, 4, 12, 19, 5, 17]
print(findMin(arr))"
Create a program in Python that takes a number from the user and prints all the divisors of the number.,"divisors = []

num = int(input('Enter a number: '))
 
for i in range(1, num + 1):
    if num % i == 0:
        divisors.append(i)

print('The divisors of',num ,'are:')
print(*divisors, sep=', ')"
Create a function in Python that takes an input string and returns whether it is a palindrome.,"def isPalindrome(txt):
    i = 0
    j = len(txt) - 1
    
    while i < j:
        if txt[i] != txt[j]:
            return False
        i += 1
        j -= 1
    
    return True

print(isPalindrome(txt)) // True"
Create a web scraper using Python that collects the title and content from the homepage of a given website.,"import requests
import bs4

url = 'https://www.example.com'
r = requests.get(url)
html = bs4.BeautifulSoup(r.text,""html.parser"")

# Find title
title = html.find('title')
print(title.text)

# Find content
content = html.find('div', {'class': 'content'})
print(content.text)"
Create a Python program to compute the frequency of each element in a given array.,"def compute_frequency(arr):
    frequency_map = {}
    
    for num in arr:
        if num not in frequency_map:
            frequency_map[num] = 1
        else:
            frequency_map[num] += 1
            
    return frequency_map

result = compute_frequency([1, 2, 3, 2, 1, 3])
print(result)"
Write a function in Python to query the database and return the row value.,"def query_database(table_name, columns):
    conn = sqlite3.connect('test.db') 
    cur = conn.cursor() 

    cur.execute(f""SELECT {columns} FROM {table_name}"") 

    rows = cur.fetchall()

    conn.close()
    return rows"
Write a Python program to sort data from the largest to the smallest.,"unsorted_list = [44, 23, 11, 33, 5]
sorted_list = sorted(unsorted_list, reverse=True)

print(sorted_list)"
Write a Python program to format a specified string to limit the number of characters to 6.,"def limit_chars(string):
    # Limit the number of character to 6
    limited_string = string[:6]
    return limited_string

string = ""Hello World""
result = limit_chars(string)
print(result)"
Generate an algorithm in Python that finds the smallest positive number not present in an array.,"def findSmallestMissingPositiveInteger(arr): 
	positiveIntegers = set(i for i in range(1, len(arr) + 2)) 
	arrSet = set(arr) 
	res = positiveIntegers - arrSet 
	return res.pop() 
  
arr = [1, 10, 5, 3, 8] 
print(findSmallestMissingPositiveInteger(arr))"
"Write a function to calculate the permutation coefficient of given p(n, k).","def permutation_coefficient(n, k): 
	P = [[0 for i in range(k + 1)] 
			for j in range(n + 1)] 
	for i in range(n + 1): 
		for j in range(min(i, k) + 1): 
			if (j == 0): 
				P[i][j] = 1
			else: 
				P[i][j] = P[i - 1][j] + ( 
						j * P[i - 1][j - 1]) 
			if (j < k): 
				P[i][j + 1] = 0
	return P[n][k] "
Create an error-handling system for a Python web application.,"import logging

def handler(e):
 logging.exception(e)
 # Do any other error handling logic here.

try:
 # the code that could throw an error
except Exception as e:
 handler(e)"
Create a basic web-scrapper program in Python that downloads the entire HTML of a given website.,"import requests
response = requests.get(""https://example.com"")
html = response.text"
Write a Python program to randomly split a list into two parts.,"import random

def split_list(input_list):
    index = random.randint(0, len(input_list)-1)
    part1 = input_list[:index]
    part2 = input_list[index:]
    return part1, part2

input_list = [1, 2, 3, 4, 5, 6, 7, 8]
print(""Original list :"", input_list)
result1, result2 = split_list(input_list)
print(""\nPart 1 :"", result1)
print(""Part 2 :"", result2)"
Create a Python class for representing complex numbers and a method for performing complex number addition.,"class Complex:
    def __init__(self, real, imag):
        self.real = real
        self.imag = imag
        
    def add(self, other):
        real = self.real + other.real
        imag = self.imag + other.imag
        return Complex(real, imag)"
Create a Python script to print out the most common words in the text.,"from collections import Counter

text = ""The quick brown fox jumps over the lazy dog.""
words = text.split()

word_counts = Counter(words)
most_common_words = word_counts.most_common()

for word, count in most_common_words:
    print(word, count)
# Output:
# the 2
# quick 1
# brown 1
# fox 1
# jumps 1
# over 1
# lazy 1
# dog 1"
Develop a function in python to find the index of an element in a list.,"def find_index(a, x):
    indices = []
    if x not in a:
        return -1
    else:
        for i in range(len(a)):
            if a[i] == x:
                indices.append(i)
    return indices

indices = find_index(a, x)
print(""The index of element 2 in the list is"", indices)"
Write a Python program to create a set with the intersection of two given sets.,"def intersection(set_1, set_2):
  return set_1.intersection(set_2)"
Write a Python program to take a list of numbers and ensure that each element in the list is either the minimum or maximum value in the list.,"def normalize(nums):
  min_num = min(nums)
  max_num = max(nums)

  for i, n in enumerate(nums):
    if n > min_num and n < max_num:
      if n - min_num > max_num - n:
        nums[i] = max_num
      else:
        nums[i] = min_num

  return nums

print(normalize([5, 4, 3, 4, 8, 6, 7]))
# [5, 4, 3, 5, 8, 6, 7]"
Create a Python program to check if a number is an Armstrong number.,"def isArmstrong(number): 
	
	num = number 
	length = len(str(number)) 
	sum_of_the_power_of_digits = 0 

	while num > 0:
		rem = num % 10 
		sum_of_the_power_of_digits = sum_of_the_power_of_digits +  np.power(rem, length)
		num //= 10
		
	if (sum_of_the_power_of_digits == number) : 
		return True 
	else : 
		return False"
Design a Python program for checking if a given number is a palindrome.,"def isPalindrome(num):
    numString = str(num)
    reversedString = numString[::-1]
    if numString == reversedString:
        return True
    else:
        return False

num = 12321
if isPalindrome(num):
    print(""Number is a palindrome"")
else:
    print(""Number is not a palindrome"")"
Write a Python program that takes user input and prints it back in reverse.,"input_string = input(""Enter a string: "")

# Reverse the string
reverse_string = input_string[::-1]

# Print the reversed string
print(reverse_string)"
Create a Python program to remove all duplicate numbers from a list.,"def remove_duplicates(nums):
    new_list = []
    for num in nums:
        if num not in new_list:
            new_list.append(num)
    return new_list

if __name__ == '__main__':
	nums = [1,2,3,2,4,3,5]
	new_list = remove_duplicates(nums)
	print(new_list)"
Split the following string into words in Python,"# Split the string by '_' separator
words = string.split('_')

# Print each word separately
for word in words:
    print(word)"
"Write a Python program to convert a given string to a list, using a specified delimiter.","def string_to_list(string, delimiter):
 list = string.split(delimiter)
 return list

string = ""red, blue, green""
delimiter = "",""
print(string_to_list(string, delimiter))"
Create a function to identify a prime number in Python.,"def is_prime(n): 
    if n <= 1: 
        return False
    for i in range(2, n): 
        if n % i == 0: 
            return False
    return True"
Generate a python script to calculate the standard deviation of a given data set.,"import statistics

data_set = [2,4,4,4,5,5,7,9]
print(round(statistics.stdev(data_set),2))"
Create an asynchronous task with a callback in Python.,"import asyncio

def callback():
    print('Callback triggered')

async def async_task(callback):
    await asyncio.sleep(3)
    callback()

loop = asyncio.get_event_loop()
loop.run_until_complete(async_task(callback))"
Create a program in Python to determine all possible combinations of words from an array.,"import itertools

words = [""cat"", ""dog"", ""pizza"", ""coffee""]
combinations = list(itertools.combinations(words, 2))

for i in range(len(combinations)):
    print(combinations[i])"
Add a feature in a Python program to check if a variable is a string.,"if isinstance(variable, str):
    # variable is a string"
Write a function to find the most common elements and their counts of a specified text.,"from collections import Counter 
def most_common_elem(s,a):
  most_common_elem=Counter(s).most_common(a)
  return most_common_elem"
Write a Python program to create a function for adding two numbers.,"def add(a, b):
    return a + b"
Reorder the elements of an array in ascending order using Python.,"def sort_ascending(arr):
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if arr[i] > arr[j]:
                arr[i], arr[j] = arr[j], arr[i]
    return arr

arr = [5, 3, 6, 1, 7]
arr = sort_ascending(arr)
print(arr)"
Create a python script to reverse a given InputString.,"def reverseString(InputString):
    return InputString[::-1]"
Implement a function to merge and sort two given sorted lists in Python.,"def merge_sort(list_1, list_2):
    merged_list = list_1 + list_2
    merged_list.sort()
    return merged_list

if __name__ == '__main__':
    list_1 = [1, 3, 5, 6, 7]
    list_2 = [4, 8, 9, 10]
    print(merge_sort(list_1, list_2))"
Write a Python function to randomize a given list of integers.,"import random

def randomize(arr):
  random.shuffle(arr)
  return arr"
Create a Python application to allow users to input a string and calculate the length of the string.,"user_input = input(""Enter a string: "")
length = len(user_input)
print(""The length of the string is: "", length)"
Generate a Python program that recursively prints a string of characters in reverse.,"def reverse_string(s):
    if len(s) == 0:
        return
    else:
        print(s[-1], end="""")
        reverse_string(s[:-1])
 
# Driver program
string = ""Hello World!""
reverse_string(string)"
Create a function in Python that prints the statistics of a given numeric array.,"def print_statistics(arr):
  min_val = min(arr)
  max_val = max(arr)
  mean_val = sum(arr)/len(arr)
  std_val = np.std(arr)

  print(""Min: "" + str(min_val))
  print(""Max: "" + str(max_val))
  print(""Mean: "" + str(mean_val))
  print(""Standard Deviation: "" + str(std_val))"
Transform the following data frame in Python.,"import pandas as pd

df = pd.DataFrame(df)

#Transform the dataframe
df['age_group'] = [ ""under 20"" if a < 20
   else ""20-35"" if a < 35
   else ""over 35""
   for a in df['age']]"
"Given an input string, write a Python program to count the occurrence of each character in the string.","def char_occurrences(a_string):
 char_count = {}
 for char in a_string:
 if char in char_count:
 char_count[char] += 1
 else:
 char_count[char] = 1
 return char_count

string = ""Hello, World!""
print(char_occurrences(string))

# Output
# {'H': 1, 'e': 1, 'l': 3, 'o': 2, ', ': 1, 'W': 1, 'r': 1, 'd': 1, '!': 1}"
"Write a Python program to generate a list of the first 10 Fibonacci numbers, starting from 0.","def generate_fibonacci_list(n):
    fibonacci = [0, 1]
    for _ in range(2, n):
        fibonacci.append(fibonacci[-2] + fibonacci[-1])
    return fibonacci

fibonacci_list = generate_fibonacci_list(10)
print(fibonacci_list)"
Design a Python script that converts Miles/hour to Kilometers/hour.,"def mph_to_kph(speed):
 kph = speed * 1.609
 return kph"
Write a Python program to generate a random password,"import string
import random
 
def generate_password(length):
    chars = string.ascii_letters + string.digits
    password = """".join(random.choice(chars) for i in range(length))
    
    return password

length = int(input(""Enter the desired password length: ""))
password = generate_password(length)

print(""Generated password is:"", password)"
Create a Python program to sort a list of strings according to the length of the strings in ascending order.,"# Function to sort the list according to string length
def sort_string_list(string_list):
    return sorted(string_list, key=len)

if __name__ == '__main__':
    string_list = ['Python', 'JS', 'C++', 'Java', 'PHP']
    sorted_string_list = sort_string_list(string_list)
    print(sorted_string_list)"
Generate a program using Python that checks for duplicate values in a given list.,"def contains_duplicates(given_list):
    seen = set()
    for x in given_list:
        if x in seen:
            return True
        seen.add(x)
    return False"
Develop an automated tool that can convert Python code to C++ code.,"import ast
import sys
 
from cpp import parser, generator
 
 
def py2cpp(py_code):
    py_ast = ast.parse(py_code)
    cpp_ast = parser.convert(py_ast)
    cpp_code = generator.convert(cpp_ast)
    return cpp_code
 
if __name__ == '__main__':
    py_code = sys.stdin.read()
    cpp_code = py2cpp(py_code)
    sys.stdout.write(cpp_code)"
Edit the following python code to run in Python 3,"print(""Hello World!"")"
Construct a Python program to perform sentiment analysis on an input string and output the sentiment score.,"import nltk

sentence = ""I had a great day yesterday""

words = nltk.word_tokenize(sentence)

text = nltk.Text(words)

polarity_score = text.polarity_scores()

print(polarity_score)"
Update the given Python program to print the result in reverse order.,"numbers = [1, 2, 3, 4, 5, 6]

for x in reversed(numbers):
    print(x)"
Build a REST API endpoint in Python that takes a user's name and returns a personalized greeting message.,"from flask import Flask

app = Flask(__name__)

@app.route('/greeting', methods=['GET'])
def get_greeting(name):
 return 'Hello, ' + name + '!'

if __name__ == '__main__':
 app.run()"
Generate a python program to classify an input string as either palindrome or not.,"def is_palindrome(s):
    return s == s[::-1]"
Modify the Python code below to create a function for finding the sum of a list of numbers.,"def sum_list(nums):
    total = 0
    for num in nums:
        total += num
    return total
    
my_list = [1,2,3,4,5]

print(sum_list(my_list))"
Generate a Python program to check if a list contains a given value.,"def check_if_contains(lst, val):
    return val in lst"
Write a python function to find the sum of fifth power of first n even natural numbers.,"def even_Power_Sum(n): 
    sum = 0; 
    for i in range(1,n+1): 
        j = 2*i; 
        sum = sum + (j*j*j*j*j); 
    return sum; "
Write a python program to get all possible subset combinations of a given set.,"def subset_combinations(arr):
    result = [[]]
    for ele in arr:
        for i in range(len(result)):
            tmp = list(result[i])
            tmp.append(ele)
            result.append(tmp)

    return result

if __name__ == '__main__':
    arr = [1,2,3]
    print(""All possible combinations:"", subset_combinations(arr))"
Design a function in Python which takes two strings as input and returns a boolean value as output depending on which one is longer.,"def longer_string(string1, string2):
    if len(string1) > len(string2):
        return True
    else:
        return False"
Design a Python program that prints a sentence every 10 seconds.,"import time

sentence = ""Hello World""

while True:
    print(sentence)
    time.sleep(10)"
Generate a Python program to merge two dictionaries.,"dict1 = {'a':1, 'b':2, 'c':3}
dict2 = {'d':4, 'e':5, 'f':6}

dict3 = {**dict1, **dict2}
print(dict3)

# Output: {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}"
Create a Python program to find the most frequent item in a list.,"def most_frequent(list): 
    counter = 0
    num = list[0] 
    
    for i in list: 
        curr_frequency = list.count(i) 
        if(curr_frequency> counter): 
            counter = curr_frequency 
            num = i 
  
    return num 
  
list = [1, 3, 1, 3, 2, 1]
print(most_frequent(list))"
Create a python program to generate random colors in hexadecimal format.,"import random

def generate_hex_color():
    return '#' +  ''.join([random.choice('0123456789ABCDEF') for x in range(6)])

print(generate_hex_color()) # Ex: #C2C30F"
Write a Python code to create a program that will generate a random password.,"import string
import random

def generate_password(length):
 password = """"
 for i in range(length):
 password += random.choice(string.ascii_letters + string.digits + string.punctuation)
 return password"
Design an algorithm in Python to check whether two binary trees are the same or not.,"def is_same_tree(p, q):
 if not p and not q: 
  return True
 if not p or not q:
  return False
 if p.val != q.val:
  return False
 
 return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)"
Generate a Python program to initialize a third matrix given two existing matrices c and d.,"def initialize_matrix(c, d):
    rows = len(c)
    cols = len(c[0])
    matrix = []
    for i in range(rows):
        row = []
        for j in range(cols):
            row.append(c[i][j] + d[i][j])
        matrix.append(row)
    return matrix"
Write a Python function to convert Fahrenheit temperatures to Celcius.,"def fahrenheit_to_celcius(fahrenheit):
    celcius = (fahrenheit - 32) * (5/9)
    return celcius"
Optimize the given Python code to reduce execution time,"def calculate_sum(numbers):
    return sum(numbers)

numbers = [1, 2, 3, 4, 5]
calculate_sum(numbers)"
Create a Python program to capture the data from a web page.,"import requests
import lxml.html as lh

url = 'https://www.example.com/'
page = requests.get(url)
doc = lh.fromstring(page.content)

# parse and extract data from webpage
data = doc.xpath('//p/text()')"
Write a python function to find sum of even index binomial coefficients.,"import math  
def even_binomial_Coeff_Sum( n): 
    return (1 << (n - 1)) "
Design a function to implement a stack in Python.,"class Stack:
    def __init__(self):
        self.items = []
    
    def is_empty(self):
        return self.items == []
    
    def push(self, item):
        self.items.append(item)
    
    def pop(self):
        return self.items.pop()
    
    def peek(self):
        return self.items[len(self.items)-1]
    
    def size(self):
        return len(self.items)"
Create a Python program to sort a list of tuples in ascending order by their second element.,"def sort_tuples(tup): 
  
    # reverse = None (Sorts in Ascending order) 
    # key is set to sort using second element of  
    # sublist lambda has been used 
    tup.sort(key = lambda x: x[1])  
    return tup  
  
# Driver Code 
tuple1 = [(4, 2), (3, 7), (2, 3)]  
print(sort_tuples(tuple1))"
Create a python program to implement an algorithm to find the square root of a given number,"def sqrt(x):
    result = x
    eps = 0.000001
    while abs(result*result - x) > eps:
        result = (result + x/result) / 2
    return result"
Create a Python program that extracts the minimum value from a dictionary.,"def get_min_value(dct):
    min_value = float('inf')
    for key, val in dct.items():
        if val < min_value:
            min_value = val
    return min_value

dct = {""key1"": 3, ""key2"": 5, ""key3"": 1}
print(get_min_value(dct))"
"Given an array of strings, write a Python function to remove all duplicates and return the resulting array.","def removeDuplicates(arr):
 result = [] 
  
 # traverse for all elements 
 for i in arr: 
  
  # check if exists in result 
  if i not in result: 
   result.append(i) 
  
 # return result 
 return result"
Create a Python program that takes in a 2D array and returns the sum of all the elements.,"def sum_2D_array(arr):
    """"""Return the sum of all the elements in a 2D array.""""""
    sum_arr = 0
    for row in arr:
        for elem in row:
            sum_arr += elem
    return sum_arr"
Create a web crawler in Python that extracts titles and descriptions from web pages.,"import requests
from bs4 import BeautifulSoup

url = ""https://www.example.com/""
response = requests.get(url)
html = response.text

soup = BeautifulSoup(html, ""html.parser"")

titles = soup.find_all(""title"")
descriptions = soup.find_all(""meta"", {""name"": ""description""})

for title in titles:
 print(title.string)

for description in descriptions:
 print(description.attrs[""content""])"
Write Python code to get the difference between two lists.,"def difference(list1, list2):
    difference_list = []
    for num1 in list1:
        if num1 not in list2:
            difference_list.append(num1)
    for num2 in list2:
        if num2 not in list1:
            difference_list.append(num2)
    return difference_list"
Generate a python program to print out the following pattern of stars,"for i in range(1, 6): 
   for j in range(i): 
      print (""* "", end="""")
   print(""\n"")
  
for i in reversed(range(1, 5)): 
   for j in range(i): 
      print (""* "", end="""")
   print(""\n"")"
Write a Python program that takes a list of strings as an input and returns a dictionary containing the count of each string in the list.,"def count_strings(lst):
    result = {}
    for item in lst:
        if item in result:
            result[item] += 1
        else:
            result[item] = 1
    return result

list_of_strings = ['a', 'b', 'c', 'a', 'b']
result = count_strings(list_of_strings)
print(result)"
Write a Python script that takes two numbers as input and raises the first number to the power of the second number.,"def power_function(a, b):
    return a**b

a = int(input(""Enter the first number: ""))
b = int(input(""Enter the second number: ""))

result = power_function(a, b)
print(""The result is:"", result)"
Write a Python script to calculate the factorial of an integer.,"def factorial(n):
 if n == 0:
  return 1
 return n * factorial(n-1)

num = 6
print(""Factorial of"", num, ""is"", factorial(num))"
Generate a Python program which takes two lists and returns a list which contain only the items which are shared between the two lists,"def find_intersection(list1, list2):
    intersection = []
    for item1 in list1:
        for item2 in list2:
            if item1 == item2:
                intersection.append(item1)
    return intersection

list1 = [1, 2, 3]
list2 = [3, 4, 5]
result = find_intersection(list1, list2)
print(result)"
Design a web API in Python that adds two numbers from the query parameter.,"from flask import Flask, jsonify

app = Flask(__name__)

@app.route(""/add"", methods=[""GET""])
def add_numbers():
    a = request.args.get(""a"")
    b = request.args.get(""b"")
    result = int(a) + int(b)
    return jsonify(result)"
Rewrite the following Python code using for loop instead of list comprehensions.,"list_of_nums = [1, 2, 3, 4, 5] 
list_of_squares = []

for num in list_of_nums: 
 list_of_squares.append(num**2)"
Create a function in Python that takes a number as input and returns the random number generated.,"import random

def generate_random_number(number):
    random.seed(number)
    rand_number = random.randint(1, number**2)
    return rand_number"
Write a function to remove lowercase substrings from a given string.,"import re
def remove_lowercase(str1):
 remove_lower = lambda text: re.sub('[a-z]', '', text)
 result =  remove_lower(str1)
 return result"
Suggest an alternative solution to the problem of identifying duplicate items in Python.,"One alternative solution to the problem of identifying duplicate items in Python is to use a set to store the items. A set data structure only allows unique elements and so any duplicate items will be automatically discarded when added to the set. Thus, iterating through a list of items and adding them to a set will result in a set without any duplicate elements."
Simplify a fraction using a provided Python code.,"def simplify(numerator, denominator):
    
    # find the gcd (greatest common divisor)
    gcd = gcd(numerator, denominator)

    # divide both numerator and denominator by the gcd
    simplified_numerator = int(numerator/gcd)
    simplified_denominator = int(denominator/gcd)

    return simplified_numerator, simplified_denominator"
Generate a Python algorithm to multiply two number.,"def mul_numbers(x, y):
    return x*y"
"Write a code in Python to check whether an input string ends with ""ing"" or not.","def endswith_ing(input_string):
    return input_string.endswith('ing')

if __name__ == '__main__':
    my_string = ""Greeting""
    is_ending_with_ing = endswith_ing(my_string)
    print(""Does the string end with 'ing'? -> "" + str(is_ending_with_ing))"
Write a python function to check whether the given number is odd or not using bitwise operator.,"def is_odd(n) : 
    if (n^1 == n-1) :
        return True; 
    else :
        return False; "
Write a function in Python to convert a Celsius temperature to Fahrenheit degree.,"def celsius_to_fahrenheit(cel):
  return cel * 1.8 + 32

temp_in_fahrenheit = celsius_to_fahrenheit(20)
print(""Temperature in Fahrenheit:"", temp_in_fahrenheit)"
Create a python program that prints the same line 10 times.,"for i in range(10):
    print(""This line will be printed 10 times"")"
Add a loop structure to create a Python program that prints out the numbers 0 to 10.,"for x in range(0, 11):
 print(x)"
Write a python script,"matrix = [[1,2,3,4],
          [1,2,3,4],
          [1,2,3,4],
          [1,2,3,4]]"
Which of the following options is the best way to declare a constant variable in Python?,"The best way to declare a constant variable in Python is by using the `const` keyword. For example:

```
const MAX_VAL = 100
```"
"Write a Python code snippet that creates a dictionary with keys 1,2,3 and string ""One"",""Two"" and ""Three"" as the corresponding values","myDict = {1: ""One"", 2:""Two"", 3:""Three""}"
Write a Python script to write another program that performs the given task.,"def create_factorial_program():
    program = 'def factorial(n):\n'
    program += '    if n < 0:\n'
    program += '        return None\n'
    program += '    elif n == 0:\n'
    program += '        return 1\n'
    program += '    else:\n'
    program += '        return n * factorial(n - 1)'
    return program"
Design a program that sorts a given array of numbers.,"# Python program for implementation of Bubble Sort 
def bubbleSort(arr): 
	n = len(arr) 

	# Traverse through all array elements 
	for i in range(n): 

		# Last i elements are already in place 
		for j in range(0, n-i-1): 

			# traverse the array from 0 to n-i-1 
			# Swap if the element found is greater 
			# than the next element 
			if arr[j] > arr[j+1] : 
				arr[j], arr[j+1] = arr[j+1], arr[j]"
Design a program in Python that prints out characters of the alphabet A-Z in reverse order.,"import string

alphabet = string.ascii_uppercase

for letter in alphabet[::-1]:
    print(letter)"
Can you provide a Python program that prints the largest element in the given list?,"def get_largest(nums):
    max_num = nums[0]
    for num in nums:
        if num > max_num:
            max_num = num
    return max_num

print(get_largest([1, 3, 4, 5, 19, 13, 7]))"
Develop a Python generator to yield a Fibonacci sequence,"def fibonacci(n):
    a, b = 0, 1
    for _ in range(n):
        yield a
        a, b = b, a + b

for x in fibonacci(20):
    print(x)"
Generate an algorithm in Python which takes a matrix of integers as input and returns the position of the largest element in the matrix.,"def max_pos(mat):
 max_v = -float('inf')
 max_i = -1
 max_j = -1
 
 for i in range(len(mat)):
  for j in range(len(mat[i])):
   if mat[i][j] > max_v:
    max_i = i
    max_j = j
 
 return (max_i, max_j)
 
matrix = [[2, 8, 7], [3, 11, 5], [1, 9, 4]]
pos = max_pos(matrix)
print(pos) # (1, 1)"
Design a python class to store fruit and its quantity in a grocery store.,"class FruitGrocery:
    def __init__(self):
        self.items = {
            'Banana': 200,
            'Orange': 300,
            'Grapes': 500
        }

    def get_item_quantity(self, item):
        return self.items.get(item)"
Let's write a loop in Python to take the average of two numbers,"x = [45, 65]
total = 0
for i in range(len(x)):
  total += x[i]
  average = total / len(x)

print(""Average of the numbers is:"", average)"
Write a python function to calculate the product of all the numbers of a given tuple.,"def mutiple_tuple(nums):
    temp = list(nums)
    product = 1 
    for x in temp:
        product *= x
    return product"
Compose a python program which takes in 3 numbers and prints out the largest,"def find_max(num1, num2, num3):
    max_num = 0
    if num1 >= num2 and num1 >= num3:
        max_num = num1
    elif num2 >= num1 and num2 >= num3:
        max_num = num2
    else:
        max_num = num3
    return max_num"
Create a Python script that detects a cycle in a linked list.,"def detect_cycle(head):
 # Use two pointers, one slow and one fast, to detect a cycle
 slow = fast = head # Init with head
 while slow and fast and fast.next:
 slow = slow.next  # Move slow one node ahead
 fast = fast.next.next  # Move fast two node ahead
 if slow == fast:  # Detect cycle
 return True
 return False"
Edit a given Python program to make it bug-free.,"def foo():
   i = 0
   for x in range(10):
      i = i + x
   return i

print(foo())"
Generate Python code to print the sum of two user-defined variables.,"var1 = 3
var2 = 7

sum = var1 + var2
print('The sum of var1 and var2 is ' + str(sum)) # prints 'The sum of var1 and var2 is 10'"
Optimize the following Python program to increase its performance by three times.,"def fast_operation(n):
    result = (n * (n + 1)) // 2
    return result"
Write a Python program that counts the occurrence of each string in a dictionary.,"data = {""foo"": 1, ""bar"": 2, ""baz"": 3, ""foo"": 4, ""bar"": 5}

counts = {}
for key, value in data.items():
    if key in counts:
        counts[key] += 1
    else:
        counts[key] = 1

print(counts)"
Generate a Python function to count and print the total number of characters in a string.,"def count_characters(string):
    count = 0
    for char in string:
        count += 1
    print(""Total number of characters:"", count)"
Generate a python program to reverse any given list,"def reverseList(list): 
    list_len = len(list) 
  
    # Traverse through the list 
    for i in range(list_len // 2): 
        temp = list[i] 
        list[i] = list[list_len - i - 1] 
        list[list_len - i - 1] = temp 
  
# Driver Code 
myList = [1, 2, 3, 4, 5] 
print(""Original list:"" + str(myList))
reverseList(myList) 
print(""Reversed list:"" + str(myList))"
Edit the given Python program to return the absolute value of a given number,"def absolute_value(x):
    if x < 0:
        return -x
    else:
        return x"
Use a Python web framework to create a web service that allows users to save and view a simple text message.,"from flask import Flask

app = Flask(__name__)

@app.route('/message', methods=['POST'])
def save_message():
    message = request.data
    # save the message to database

@app.route('/message', methods=['GET'])
def retrieve_message():
    message = db.get_message()
    return message

if __name__ == '__main__':
    app.run()"
Develop a Python script to print all possible words with a given set of letters.,"import itertools 

letters = ('a', 'c', 'd', 'e', 'm') 

for words in itertools.permutations(letters): 
    print(''.join(words))"
Write a Python program to filter out all the even numbers from a list.,"def filter_even(numbers):
    return [n for n in numbers if n %2 == 0]"
Design an algorithm in Python to check if an integer is even or odd.,"def check_number(n):
    if n%2==0:
        return ""Even""
    else:
        return ""Odd""

check_number(5) 
# Output: Odd"
Write a class in Python that implements a Stack using a list to store the items.,"class Stack:
  def __init__(self):
    self.items = []

  def push(self, item):
    self.items.append(item)

  def pop(self):
    return self.items.pop()

  def is_empty(self):
    return self.items == []"
Design an algorithm using Python to select the kth largest element from a list.,"def getKthLargest(arr, k): 
    arr.sort() 
  
    # Return the k'th largest element
    return arr[len(arr)-k]"
Write a function in Python that takes a string as input and converts it to title case.,"def convertToTitleCase(s):
    return ' '.join(word[0].upper() + word[1:] for word in s.split())
 
print(convertToTitleCase(""this is a test string""))  # Output: This Is A Test String"
Write a Python program to convert a given list of numbers into their corresponding binary representation.,"def list_to_binary(nums):
    binary = []
    for num in nums:
        binary.append(bin(num))
    return binary

result = list_to_binary([3, 8, 6])
print(result)"
Create an application in Python that takes user input for an year and prints the day of the week for January 1st of that year.,"import datetime

def day_of_week(year): 
 date = datetime.datetime(year, 1, 1)
 return date.strftime(""%A"")

print(day_of_week(2018)) # Output: Monday"
Construct an implementation of a linked list in Python,"class Node: 
  
    # Function to initialise the node object 
    def __init__(self, data): 
        self.data = data # Assign data 
        self.next = None # Initialize next as null 

# Linked List class contains a Node object 
class LinkedList: 

    # Function to initialize head 
    def __init__(self): 
        self.head = None"
Create a Python program that generates an HTML page that shows a bar chart for the given data.,"import matplotlib.pyplot as plt

data = {'red': 10, 'orange': 12, 'yellow': 8}

fig, ax = plt.subplots()
ax.bar(list(data.keys()), list(data.values()))

plt.savefig('bar_chart.png')

print(f""""""
<!DOCTYPE html>
<html>
<head>
 <title>Bar Chart</title>
</head>
<body>
 <h1>Bar Chart</h1>
 <img src='bar_chart.png' />
</body>
</html>
"""""")"
Convert the following C code that takes a list and adds each number to the list to Python.,"arr = [1, 2, 3, 4]
result = 0

for i in range(len(arr)):
  result += arr[i]"
Write a Python code that generates an array of 20 random integers between 1 and 10.,"import random

random_numbers = [random.randint(1, 10) for i in range(20)]"
Write a python code to extract the phone number and email address from a provided string,"import re

txt =""John Smith-555-1234, john.s@example.com""

# Phone Number
phone = re.findall(r'\d{3}-\d{4}', txt)[0]
print(""Phone Number ="", phone) 

# Email Address
email = re.findall(r'\S+@\S+', txt)[0]
print(""Email Address ="", email)"
Write a python program that can parse a JSON string,"import json
 
def parseJSONString(string): 
    return json.loads(string)"
Write a Python program to parse the following JSON and print out the values of the type and message keys.,"import json

data = '{""type"": ""error"", ""message"": ""An error occurred""}'

json_data = json.loads(data)
print(json_data[""type""]) # prints ""error""
print(json_data[""message""]) # prints ""An error occurred"""
Write a Python program to find the most frequent item in a given list of data.,"max_count = 0
max_element = None
for element in data:
  count = data.count(element)
  if count > max_count:
    max_element = element
    max_count = count
print(max_element)"
Generate a Python program for predicting players' positions in a game of chess based on their moves.,"import chess

def predict_position(moves):
 board = chess.Board()
 for move in moves:
 board.push_san(move)
 return board.fen()
 
if name == '__main__':
 moves = ['e4', 'e5', 'Nf3', 'Nc6', 'Bb5']
 position = predict_position(moves)
 print(position)

# Output: rnbqkbnr/pppp1ppp/8/4p3/4P3/8/PPPP1PPP/RNBQKBNR w KQkq - 0 3"
"Generate a function in Python using the input argument that takes in a string, removes all the vowels from it, and returns a new string without any vowels.","def remove_vowels(text):
    no_vowels = """"
    for character in text:
        if character not in ""aeiouAEIOU"":
            no_vowels += character
    return no_vowels"
Write a Python program to print out the next day's date given today's date,"import datetime
 
def get_next_day_date():
  today_date = datetime.datetime.now().date()
  next_day_date = today_date + datetime.timedelta(days=1)
  return next_day_date"
Optimize the python code that finds the sum of the elements in a given array.,"def sum(arr): 
    s = 0
    for number in arr: 
        s += number 
    return s"
Develop an algorithm in Python for deletion of an element from an array.,"def deleteElement(arr, element):
    index = -1
    for i in range(len(arr)):
        if arr[i] == element:
            index = i
            break
    if index != -1:
        arr.pop(index)
        return arr
    else:
        return -1

arr = [1, 2, 3, 4]
element = 3
new_arr = deleteElement(arr, element)
print(new_arr)"
Write a Python function to extract the last digits of a given integer.,"def extract_last_digits(n):
  return int(str(n)[-2:])

result = extract_last_digits(12345)
print(result)"
Generate a Python program that will convert a given integer to a string.,"def int_to_string(num):
   return str(num)"
Design a Python algorithm that takes a list of numbers and returns a list of all the pairs of numbers whose sum is equal to a specified number.,"def find_pairs_with_sum(nums, target):
    result = []
    seen = set()
    
    for num in nums:
        if (target - num) in seen:
            result.append([num, target-num])
        seen.add(num)

    return result

nums = [1,2,3,4,5]
target = 4

result = find_pairs_with_sum(nums, target)
print(result)"
Write a function to compute the value of ncr%p.,"def ncr_modp(n, r, p): 
    C = [0 for i in range(r+1)]   
    C[0] = 1
    for i in range(1, n+1): 
        for j in range(min(i, r), 0, -1): 
            C[j] = (C[j] + C[j-1]) % p   
    return C[r] "
Build a web spider in Python which can read and parse a given web page.,"import requests
import re

url = ""https://www.example.com""
r  = requests.get(url)
data = r.text

# Find all the links on the page
links = re.findall(r'<a class=""linkClass"" href=""(.*?)"">', data)

# Print the links
for link in links:
    full_url = url + link
    print(full_url)"
Examine a given Python program and modify it to only print out characters which are palindromes.,"my_string = ""I like mangoes""

for char in my_string:
	if char == char[::-1]:
		print(char)"
Generate code for creating a Django web application.,"mkdir myproject
cd myproject

# Create a virtual environment to manage dependencies
python3 -m venv env
source env/bin/activate

# Install Django
pip install django

# Create a new Django project called myproject
django-admin startproject myproject 
cd myproject

# Run migrations
python manage.py migrate

#Create an app called myapp
python manage.py startapp myapp"
Write a Python program to filter a list of strings and only return the strings which follow a certain pattern.,"filtered_strings = [string for string in strings if re.match(r""^hello.*world$"", string)] 
# filtered_strings = [""hello_world""]"
Write a Python script to reduce an array of integers by their GCD.,"def gcd(a, b):
   while a != 0:
       a, b = b % a, a
   return b

def reduce_by_gcd(arr):
    gcd_val = arr[0]
    for i in range(len(arr)):
        gcd_val = gcd(gcd_val, arr[i])
    return [a // gcd_val for a in arr]

reduced_arr = reduce_by_gcd([30, 20, 45])
print(reduced_arr) # [2, 3, 5]"
Implement a Python function that will take two strings and return true if the first string contains the second.,"def check_contains(query, word): 
    if query.find(word) != -1:
        return True
    return False

result = check_contains(query, word)"
Construct a Python script to create a dictionary containing the numbers from 1 to 10 and their squares.,"numbers = dict((num, num*num) for num in range(1,11)) 
print(numbers)"
Create a Python program to generate a random list of length 10 involving integers between 0 and 10.,"import random

random_list = [random.randint(0, 10) for _ in range(10)]
print(random_list)"
Create a function in Python that will sort a list of tuples based on the second elements in the tuples.,"def sort_by_second_element(tuples):
    return sorted(tuples, key=lambda element: element[1])

// testing
tuples_list = [(2, 1), (3, 7), (6, 5)]
print(""Original list of tuples:"")
print(tuples_list)
print(""Sorted list of tuples based on the second element of tuples:"")
print(sort_by_second_element(tuples_list))"
Create a function in Python that takes an integer route x as input and returns all possible subsequences of length x.,"def subsequences(x):
 subs = []
 for i in range(1<<x):
 sub = []
 for j in range(x):
 if (i & (1 << j)) > 0:
 sub.append(j)
 subs.append(sub)
 return subs"
Write a function to find the n'th star number.,"def find_star_num(n): 
	return (6 * n * (n - 1) + 1) "
Develop a python program to remove punctuations from an input text,"import string 
  
# Remove punctuations from string 
def remove_punctuations(s): 
    s = ''.join([i for i in s if i not in frozenset(string.punctuation)]) 
    return s 
  
# Driver Code 
if __name__ == ""__main__"" : 
  
    text = ""This is a great world - let's start coding!""
    print(remove_punctuations(text))"
Write a python code to detect the palindrome words in a  given sentence.,"def detect_palindrome(sentence):
 words = sentence.split()
 palindromes = []
 for word in words:
  if word == word[::-1]:
   palindromes.append(word)
 return palindromes

print(detect_palindrome(""Was it a car or a cat I saw?""))
# Output: ['Was', 'a', 'or', 'a', 'I']"
Create a loop in Python to print every permutation of a list of strings.,"import itertools 
  
# list of strings 
list_of_strings = [""Hello"", ""World"", ""Foo"", ""Bar""] 
  
# using itertools 
# to get the permutations 
permutations = itertools.permutations(list_of_strings) 
  
# printing permutations 
for i in list(permutations): 
    print(i)"
Make a Python program to create a rolling average over a list. Rolling average means return the average of the last 3 items of the list.,"def rolling_average(arr):
    last_three = arr[-3:]
    return sum(last_three) / len(last_three)

mylist = [10, 20, 30, 40, 50]
rolling_avg = rolling_average(mylist)
print(""Rolling average:"", rolling_avg)

# Output:
# Rolling average: 33.333333333333336"
Produce a Python program which parses a given html string and extracts all text from it.,"def get_text_from_html(html_str):
    soup = BeautifulSoup(html_str, 'html.parser')
    all_text = soup.find_all(text=True)
    return ' '.join(all_text)"
"Using Regular Expressions, write a python program to check if the given string contains only alphanumeric characters.","import re

def is_alphanumeric(input_string):
    # Using Regular Expressions, check if the given string contains only alphanumeric characters.
    regex = re.compile('^[a-zA-Z0-9]+$')
    return regex.match(input_string)"
"Create a class for a basic Stack data structure in Python. This stack should be able to push and pop elements, as well as get the size of the stack.","class Stack:
  def __init__(self):
    self.stack = []
  
  def push(self, item):
    self.stack.append(item)

  def pop(self):
    return self.stack.pop()

  def get_size(self):
    return len(self.stack)"
Create a web scraper in Python to extract all data from a page with the URL: http://example.com,"import requests 
from bs4 import BeautifulSoup

r = requests.get(""http://example.com"") 
data = r.text 
soup = BeautifulSoup(data, 'html.parser') 

for item in soup.find_all(""div""): 
 print(item.text)"
Could you build a web scraper in Python that collects all the links from a website?,"# Python program to scrape a webpage
import requests as req 
from bs4 import BeautifulSoup 
  
URL = ""http://www.example.com/""
  
# GET request 
r = req.get(URL) 
  
# parse the downloaded homepage and grab all text
soup = BeautifulSoup(r.text, ""html.parser"") 
  
# find and print all links 
links = soup.find_all('a') 
for link in links: 
    print(link.get('href'))"
Create a Python program to display a Pandas dataframe sorted by its index in descending order.,"import pandas as pd
 
# Create a dataframe
dataframe = pd.DataFrame(data={'Value': [1, 2, 3, 4, 5]}, index=[5, 4, 3, 2, 1])

# Print the dataframe sorted by its index in descending order
print(dataframe.sort_index(ascending=False))"
Create a web scraper with Python to extract the hyperlinks from a given website.,"from bs4 import BeautifulSoup
import requests

def get_hyperlinks(url):
    page = requests.get(url)
    soup = BeautifulSoup(page.content, 'html.parser')
    links = []
    for a in soup.find_all('a', href=True):
        links.append(a['href'])
    return links"
Write a Python function that returns the sum of two integers.,"def sum_integers(num1, num2):
   return num1 + num2"
Create a Python program for simulating a bouncing ball with a bouncing height of 10 meters. The program should print out the time at which the ball reaches the ground.,"import math

# initial velocity
v0 = 20
# height
h = 10
# time to reach ground
t = (v0 * 2) / 9.81

print(""The ball will reach the ground in {:.2f} seconds"".format(t))"
Write a function to find all the possible subset sums of a given array.,"# Python program to find all possible subset sums

def find_subset_sums(arr):
    sums = set()
    for i in range(2**len(arr)):
        csum = 0
        for j in range(len(arr)):
            if i & (1<<j):
                csum += arr[j]
        sums.add(csum)
    return sums"
Edit the following code snippet in Python to remove the duplicates from a list.,my_list = list(dict.fromkeys(my_list))
Design an algorithm in Python to compute the intersection of two given arrays.,"def intersection(arr1,arr2):
  return set(arr1).intersection(set(arr2))"
Construct a Python function to reverse the contents of a given array in-place.,"def reverse_in_place(arr):
    start = 0
    end = len(arr)-1
    while start < end:
        arr[start], arr[end] = arr[end], arr[start]
        start += 1
        end -= 1"
Create a python function that randomly selects three numbers from a given list and sort them in descending order.,"import random

def sort_numbers(lst):
    nums = random.sample(lst, 3)
    nums.sort(reverse=True)

    return nums

nums = [4, 7, 9, 11, 33, 2]
sorted_nums = sort_numbers(nums)

print(sorted_nums) # [33, 11, 9]"
Write a Python script for displaying the current time in 12-hour format.,"import datetime 

current_time = datetime.datetime.now()

print('Current Time in 12-hour format :', current_time.strftime(""%I:%M %p""))"
Write an algorithm in Python that can detect the number of times a given keyword appears in a given text.,"def count_keyword(text, keyword):
 count = 0
 words = text.lower().split()

 for word in words:
 if word == keyword.lower():
 count += 1

 return count

text = 'Every morning I start my day with a cup of coffee.'
print(count_keyword(text, 'cup'))
# Output: 1"
Create a generic bubble sort function in Python.,"def bubbleSort(arr): 
    n = len(arr) 
  
    # Traverse through all array elements 
    for i in range(n): 
  
        # Last i elements are already in place 
        for j in range(0, n-i-1): 
  
            # traverse the array from 0 to n-i-1 
            # Swap if the element found is greater 
            # than the next element 
            if arr[j] > arr[j+1] : 
                arr[j], arr[j+1] = arr[j+1], arr[j]"
Create an object from a class in Python.,"john = Employee(""John"", 25)"
Create a function in Python that takes a string of text as an argument and returns the text with all vowels removed.,"def remove_vowels(s): 
    vowels = ('a', 'e', 'i', 'o', 'u') 
    for x in s: 
        if x in vowels: 
            s = s.replace(x, """") 
    return s"
Develop a Python program to determine the average length of words in a sentence.,"def average_length(sentence):
    words = sentence.split()
    char_count = 0
    
    for word in words:
        char_count += len(word)
    
    average_length = char_count / len(words)
    return average_length

average_length(""This is a sample sentence with 8 words."") # output: 3.5"
Write a function to find if there is a triplet in the array whose sum is equal to a given value.,"def find_triplet_array(A, arr_size, sum): 
	for i in range( 0, arr_size-2): 
		for j in range(i + 1, arr_size-1): 
			for k in range(j + 1, arr_size): 
				if A[i] + A[j] + A[k] == sum: 
					return  A[i],A[j],A[k] 
					return True
	return False"
Create a Python program to extract the domain name from a given url.,"def extract_domain_name(url):
  split_url = url.split('//')
  if len(split_url) == 2:
      domain_name = split_url[1]
  else: 
      domain_name = split_url[0]
  
  split_domain_name = domain_name.split('/')
  return split_domain_name[0]

domain_name = extract_domain_name(url)
print(domain_name)"
Write a function to find out the minimum no of swaps required for bracket balancing in the given string.,"def swap_count(s):
	chars = s
	count_left = 0
	count_right = 0
	swap = 0
	imbalance = 0; 
	for i in range(len(chars)):
		if chars[i] == '[':
			count_left += 1
			if imbalance > 0:
				swap += imbalance
				imbalance -= 1
		elif chars[i] == ']':
			count_right += 1
			imbalance = (count_right - count_left) 
	return swap"
Create a program in Python to optimize an equation using the gradient descent algorithm.,"import numpy as np

def optimize(f, x_init, lr, n_iter): 
    # initialize
    x = x_init
    
    # gradient descent algorithm 
    for i in range(n_iter): 
        # calculate gradient 
        grad = np.gradient(f(x))
        # update x with learning rate 
        x -= lr * grad 
       
    return x"
Write a function to shallow copy a python dictionary object.,"def shallow_copy_dict(original_dict):
    copies_dict = {}
    for key, value in original_dict.items():
        copies_dict[key] = value
    return copies_dict"
Create a python program to display a histogram of the list items.,"import matplotlib.pyplot as plt

list_data = [1, 2, 3, 3, 3, 4, 4, 4, 4, 5, 6, 7, 8, 9] 
plt.hist(list_data, bins=6) 
plt.title(""Histogram"") 
plt.show()"
Create a function in Python to return the maximum value in a given array.,"def findMaxValue(arr):
    max_value = None
    for element in arr:
        if max_value == None or element > max_value:
            max_value = element
    return max_value"
"Write a Python program to get a single string from two given strings, separated by a space and swap the first two characters of each string.","def strings_swap(s1, s2): 
	new_s1 = s2[:2] + s1[2:] 
	new_s2 = s1[:2] + s2[2:] 
	return new_s1 + ' ' + new_s2 
	
strings_swap('abc', 'xyz') # 'xyc abz'"
Create a Python program with a class ```Book``` that has ```title``` and ```author``` properties.,"class Book:
 def __init__(self, title, author):
 self.title = title 
 self.author = author

 def __str__(self):
 return f'{self.title} by {self.author}'"
Create a Python program that compares two strings and returns true if the first one is longer than the second,"def compare_strings(string1, string2):
  if len(string1) > len(string2):
    return True
  else:
    return False"
"Given a set X, suggest a Python program to calculate the median of X","def median(X): 
    sorted_X = sorted(X) 
    mid_index = (len(sorted_X) - 1) // 2 
    if len(sorted_X) % 2 == 0: 
        return (sorted_X[mid_index] + sorted_X[mid_index + 1]) / 2
    else: 
        return sorted_X[mid_index]"
Write a Python code to find the smallest prime number greater than a given number.,"def smallest_prime_number_greater_than(n):
    for i in range(n+1, n+100):
        if is_prime(i):
            return i

def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

print(smallest_prime_number_greater_than(10))"
Write a function to toggle characters case in a string.,"def toggle_string(string):
 string1 = string.swapcase()
 return string1"
Create a Python program to print numbers from 1 to 10 in reverse order.,"for i in range(10, 0, -1):
    print(i)"
Write a Python program to create a list containing all the possible combinations of two or more lists.,"combined_list = [[1, 'a', 7], [1, 'a', 8], [1, 'b', 7], [1, 'b', 8], [1, 'c', 7], [1, 'c', 8], [2, 'a', 7], [2, 'a', 8], [2, 'b', 7], [2, 'b', 8], [2, 'c', 7], [2, 'c', 8], [3, 'a', 7], [3, 'a', 8], [3, 'b', 7], [3, 'b', 8], [3, 'c', 7], [3, 'c', 8]]

combined_list = list(itertools.product(list1, list2, list3))"
Write a short program in Python that takes in a string as input and counts the number of distinct characters in it.,"def distinct_char_count(string):
    unique_characters = set(string)
    return len(unique_characters)"
Generate a Python script that takes a number and returns a list of its factors.,"def factors_list(n): 

    # Create an empty list for factors 
    factors = [] 
  
    # Loop over all factors 
    for i in range(1, n + 1): 
        if n % i == 0: 
            factors.append(i) 

    return factors"
Generate a Python object initialization routine for the following object.,"class InventoryItem:
  def __init__(self, name, cost, quantity):
    self.name = name
    self.cost = cost
    self.quantity = quantity"
Create a Python program to take a list of numbers and set any negative numbers to 0.,"def set_negative_to_zero(arr):
    new_arr = []
    for num in arr:
        if num < 0:
            new_arr.append(0)
        else:
            new_arr.append(num)
    return new_arr

result = set_negative_to_zero([2, 5, -8, 0, 1, -6])
print(result)"
Create a Python program to check if a given number is a power of 2.,"def is_power_of_two(num):
    if num == 0:
        return False
    while num % 2 == 0:
        num /= 2
    return num == 1

print(is_power_of_two(32))"
Write a function to find all index positions of the maximum values in a given list.,"def position_max(list1):
    max_val = max(list1)
    max_result = [i for i, j in enumerate(list1) if j == max_val]
    return max_result"
"Sort a list of strings [""Apple"", ""Banana"", ""Cherry""] alphabetically in Python.","list = [""Apple"", ""Banana"", ""Cherry""]
list.sort() 
print(list)"
Create a Python program to print out the first 20 numbers of the Fibonacci sequence.,"def Fibonacci(n): 
    if n < 0: 
        print(""Incorrect input"") 
    # First Fibonacci number is 0 
    elif n == 0: 
        return 0
    # Second Fibonacci number is 1 
    elif n == 1: 
        return 1
    else: 
        return Fibonacci(n-1) + Fibonacci(n-2) 

# Driver Program 
print(""First 20 Fibonacci numbers:"")
for i in range(20): 
    print(Fibonacci(i))"
Create a code in Python to generate a random 8-digit alphanumeric string.,"import random 
import string 

length = 8
random_str = ''.join(random.choices(string.ascii_letters + string.digits, k = length)) 
print(random_str)"
Evaluate the following Python program and determine its output.,"[20, 35, 10, 47]"
Write a Python program to accept a sentence (by user at runtime) and count the number of vowels present in it.,"def count_vowels(sentence):
    vowels = ['a', 'e', 'i', 'o', 'u']
    count = 0
    for letter in sentence.lower():
        if letter in vowels:
            count += 1
    return count


sentence = input('Enter a sentence: ')
vowel_count = count_vowels(sentence)

print('Number of vowels in the sentence:', vowel_count)"
"Write a Python function that takes two integer arguments, x and y, and returns the result of the formula (x+y)^2.","def compute_formula(x, y):
    return (x + y)**2"
Generate a program in Python to classify a series of numbers into even or odd.,"def classify_numbers(nums):
    for num in nums:
        if (num % 2) == 0:
            print(str(num) + "" is even"")
        else:
            print(str(num) + "" is odd"")

nums = [4, 7, 9, 11, 12]
classify_numbers(nums)

# Output:
# 4 is even
# 7 is odd
# 9 is odd
# 11 is odd
# 12 is even"
Optimize the Python code below so that it takes less resources and runs faster.,"n = 50000
obj = list(range(n))"
Formulate a python expression to determine the average of a given list of numbers.,sum(lst)/len(lst) # This is equivalent to (1+2+3+4)/4 = 2.5
Write a function to find the volume of a cube.,"def volume_cube(l):
  volume = l * l * l
  return volume"
Create a class in Python that represents a rectangle and has methods to calculate its area and perimeter.,"class Rectangle:
    def __init__(self, width, length):
        self.width = width
        self.length = length
        
    def area(self):
        return self.width * self.length
    
    def perimeter(self):
        return 2 * (self.width + self.length)"
Write a python function to count unequal element pairs from the given array.,"def count_Pairs(arr,n): 
    cnt = 0; 
    for i in range(n): 
        for j in range(i + 1,n): 
            if (arr[i] != arr[j]): 
                cnt += 1; 
    return cnt; "
Write a function that matches a word containing 'z'.,"import re
def text_match_wordz(text):
        patterns = '\w*z.\w*'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')"
"Write a Python script to generate a basic HTML page with a title, header, body, and footer sections.","<html>
 <head>
 <title>Sample Page</title>
 </head>
 <body>
 <h1>Sample Page</h1>

 <p>This page has a header, a body, and a footer.</p>

 <footer>
 <p>This is the footer.</p>
 </footer>
 </body>
</html>"
Generate a Python script that takes in two integers and prints out the greatest common divisor (GCD) between those two numbers.,"# define a function to calculate the GCD of two integers
def gcd(a, b):
 if a == 0: 
  return b 
 return gcd(b%a, a) 

# take input from user
num1 = int(input(""Enter the first number: ""))
num2 = int(input(""Enter the second number: ""))

# print the GCD
print(""The GCD of "" + str(num1) + "" and "" + str(num2) + "" is: "" + str(gcd(num1, num2)))"
What Python code is needed to multiply two numbers and return the result?,"def multiply(num1, num2):
    return num1 * num2"
Create a Python data structure to store customer details in a dictionary,"customers = { 
  1: {
    ""name"": ""John"",
    ""email"": ""john@example.com""
  }
}"
Create a python for loop to print the elements of a given list l.,"for element in l:
    print(element)"
Compose an algorithm in Python that accepts a phone number and formats it in the (xxx) xxx-xxxx format.,"def format_phone_number(phone_num):
    return f""({phone_num[:3]}) {phone_num[3:6]}-{phone_num[6:]}""

number = ""1234567890""
formatted_number = format_phone_number(number)
print(formatted_number)"
Create a program in Python to find the sum of all even numbers between a given range.,"#Input range
start = int(input(""Enter start of range: ""))
end = int(input(""Enter end of range: ""))

#Initialize sum to 0
sum = 0

#Loop to find the sum of even numbers
for num in range(start,end+1):
  if num % 2 == 0:
    sum += num

#Print the result
print(""Sum of even numbers between"",start,""and"",end,""="",sum)"
Create a python program to compute the volume of a cube given its edge length as an input.,"length = int(input(""Enter the edge length of the cube: ""))

volume = length * length * length

print(""The volume of the cube is"", volume)"
Create a function in Python to group data by a column and apply aggregate functions on each group.,"group_by_column = df.groupby(""B"").agg({'C': 'sum', 'D': 'mean'})"
Create a python program to convert a given number into its binary form.,"def convert_num_to_bin(num):
    '''This function will convert a given number into its binary form.'''
    bin_arr = []
    while num > 0:
        bin_arr.append(num%2)
        num //= 2
    bin_arr.reverse()
    return bin_arr"
Write a function to validate an email address in Python.,"def validate_email(email):
    """"""This function validates an email address.

    It returns True if the email address is valid, False otherwise.
    """"""

    if len(email) > 7:
        if re.match('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$', email) is not None:
            return True
    return False"
Generate a random Rubik's cube configuration in Python.,"import random

# Create a 3x3x3 cube
cube = [[[0] * 3 for _ in range(3)] for _ in range(3)]

# Fill the cube with random colors
colors = [1, 2, 3, 4, 5, 6]
for plane in cube:
 for row in plane:
 for i in range(3):
 row[i] = random.choice(colors)

# Print out the cube configuation
for plane in cube:
 print(plane)"
Create a Python function to return the maximum number of valid parentheses in a given expression.,"def max_valid_parenthesis(expression):
    max_value = 0
    # Keep a count of left parentheses
    count = 0
    for char in expression:
        if char == '(':
            count += 1
            max_value = max(max_value, count)
        else:
            count -= 1

    return max_value"
Create a class in python to store employee records.,"class Employee:
    def __init__(self, name, age, salary):
        self.name = name
        self.age = age
        self.salary = salary
    
    def set_name(self, name):
        self.name = name

    def set_age(self, age):
        self.age = age

    def set_salary(self,salary):
        self.salary = salary

employee1 = Employee(""John"", 30, 5000)"
Write a Python script that takes a list of words as input and calculates the average length of the words.,"words = [""Hello"",""World"",""Beautiful"",""Day""]

lengths = [len(word) for word in words]
avg_length = sum(lengths) / len(lengths)

print(""Average word length is {:.2f}"".format(avg_length))"
What is the best way to sort an array of integers in descending order using Python?,"def sortDesc(arr):
    arr.sort(reverse=True)
    return arr

arr = [99, 65, 43, 87, 21]
print(sortDesc(arr)) // Output: [99, 87, 65, 43, 21]"
Compose a Python script to find the longest word in a given string.,"def longest_word(str):
    words = str.split() 
    longest_word = """"
    max_length = 0
  
    for word in words: 
        if len(word) > max_length: 
            max_length = len(word) 
            longest_word = word 
  
    return longest_word
  
str = ""Hello World!""
print(longest_word(str))"
Convert the following statement into a function in Python.,"def count_divisible_by_four(num):
    """"""Prints ""True"" if the given number is divisible by 4 and greater than 1000""""""
    if num >= 1000 and num % 4 == 0:
        print(""TRUE"")"
Construct a Python code for adding two matrices.,"def add_matrix(matrix1, matrix2):
    if len(matrix1) != len(matrix2):
        return 'Matrices not compatible'
    if len(matrix1[0]) != len(matrix2[0]):
        return 'Matrices not compatible'
    
    rows = len(matrix1)
    cols = len(matrix1[0])
    result = [[sum(row) for row in zip(*size)] for size in zip(matrix1, matrix2)]
    
    return result"
Optimize the following function in Python to make it run faster,"def gcd(x, y): 
    if x == 0: 
        return y 
    if y == 0: 
        return x 
    if x == y: 
        return x 
    if x > y: 
        small = y 
    else: 
        small = x 
    for i in range(1, small+1): 
        if((x % i == 0) and (y % i == 0)): 
            gcd = i 
    return gcd"
Create a function in Python that takes two arrays as arguments and returns a new array that contains the elements of both arguments.,"def merge_arrays(arr_1, arr_2):
  return arr_1 + arr_2
  
result = merge_arrays(arr_1, arr_2)
print(result) #[1, 2, 3, 4, 5, 6]"
Create a class to represent an employee's details in Python.,"class Employee:
    """"""Class to represent an employee""""""
    def __init__(self, name, age, salary):
        """"""Initialize the employee""""""
        self.name = name
        self.age = age
        self.salary = salary
    
    def get_details(self):
        """"""Print the details of the employee""""""
        print('Name:', self.name)
        print('Age:', self.age)
        print('Salary:', self.salary)"
Write a Python script to implement a linear search algorithm.,"def linearSearch(lst, target):
 for i in range(len(lst)):
 if lst[i] == target:
 return i
 return -1

lst = [1, 2, 3, 4, 5, 6]
target = 4
result = linearSearch(lst, target)

if result == -1:
 print(""Element is not present in the list"")
else:
 print(""Element is present at index"", result)"
Construct a Python program that verifies if the given input number is even or odd.,"# Program checking if the input number is even or odd
num = int(input(""Please enter a number: ""))

# Check if the number is even or odd
if num % 2 == 0:
    print(str(num) + "" is an even number."")
else:
    print(str(num) + "" is an odd number."")"
Create a Python program which takes two parameters and outputs the difference between them.,"def diff(a, b): 
   return abs(a - b) 
  
a = 21
b = 49
  
print(diff(a, b)) # Output 28"
Rewrite this C++ program into a Python program,"a = 10
b = 20

print(""sum is"", a+b)"
"Write an object-oriented code in Python to create a class named Student, which has two instance variables, name and age.","class Student:
    def __init__(self, name, age):
        self.name = name
        self.age = age"
Write a Python program to print all unique values in a dictionary.,"def printUniqueValues(dictionary):
    unique_values = set()

    for key in dictionary:
        if dictionary[key] not in unique_values:
            unique_values.add(dictionary[key])

    print(unique_values)

printUniqueValues(sample_dict)"
Write a Python program to generate the Fibonacci sequence up to a given number and store it in a list.,"def generateFibonacciSequence(num):
    a = 0
    b = 1
    fib = []
    for i in range(num):
        fib.append(a)
        c = a + b
        a = b
        b = c
    return fib

num = 10
print(generateFibonacciSequence(num))"
Calculate the number of days between two dates in Python.,"from datetime import date 
  
# Function to calculate number of days between two dates 
def getNumberOfDays(date1, date2): 
    return (date2 - date1).days 
  
# Driver program 
date1 = date(2020, 8, 18) 
date2 = date(2020, 9, 1) 
print(getNumberOfDays(date1, date2))"
Generate a Python program to print all odd numbers from an array of integers.,"def printOddNumbers(array):
  for number in array:
    if number % 2 != 0:
      print(number)

array = [3, 5, 7, 10, 15]
printOddNumbers(array)"
"Create a class in Python that makes a connection to an active database, and closes the connection when the class is deleted.","class DatabaseConnection:
    def __init__(self):
        self.conn = psycopg2.connect(host=""localhost"", database=""mydb"")

    def __del__(self):
        self.conn.close()"
Create a function in Python to improve the readability of a text by converting it into title case.,"def to_title_case(text):
    words = text.split()
    title_case_words = [word.capitalize() for word in words]

    return "" "".join(title_case_words)"
Develop a Python program to print the following pattern.,"for i in range(1, 6):
    for j in range(5-i):
        print("" "", end="""")
    for j in range(2*i-1):
        print(""*"", end="""")
    print()"
Write a Python program to scrape data from website www.example.com and store the data in a pandas data frame.,"import requests
import pandas as pd

# Get website content
url = 'http://www.example.com'
content = requests.get(url).content

# Create pandas data frame
df = pd.read_html(content)[0]"
Create an algorithm in Python for the selection sort algorithm.,"def selection_sort(arr):
    # Iterate through array indices
    for i in range(len(arr) - 1):
        smallest_index = i
        # Iterate through unsorted elements
        for j in range(i + 1, len(arr)):
            if arr[j] < arr[smallest_index]:
                smallest_index = j
        # Swaps elements
        arr[i], arr[smallest_index] = arr[smallest_index], arr[i]"
Compute the sum of squares of all the numbers in a given range using a loop in Python.,"def sum_squares_in_range(start, end):
    sum = 0
    for i in range(start, end+1):
        sum += i*i
    return sum

result = sum_squares_in_range(2, 8)
print(result)"
Produce a regular expression pattern in Python that validates emails.,"import re

def validate_email(email):
  email_regex = r'^[\w\.-]+@[\w\.-]+\.\w{2,4}$'
  return re.match(email_regex, email) != None"
"Translate English sentence ""Choose a random number"" into Python code.","import random

random_number = random.randint(1,100)
print(""Random number:"", random_number)"
Design python code to optimize the following function: ⅇ͏^(−𝐱^2),"import math
from scipy.optimize import minimize

def objective(x):
    return math.exp(-x**2)

x0 = 5
print('Initial objective: ' + str(objective(x0)))

solution = minimize(objective, x0)
print('Optimized objective: ' + str(objective(solution.x)))"
"Design a class in Python for representing a student enrollment at a school given the student's name, age, and the school they are enrolled in.","class StudentEnrollment:
    def __init__(self, name, age, school):
        self.name = name
        self.age = age
        self.school = school

# Example
student1 = StudentEnrollment(""John Doe"", 10, ""ABC School"")"
Develop a function in Python to detect palindromes.,"def is_palindrome(s):
  #reverse string and compare 
  rev = s[::-1]
  if (s == rev): 
    return True
  else: 
    return False"
Write a Python script to print the Fibonacci series from 0 to n.,"def Fibonacci(n): 
   a = 0
   b = 1
   if n < 0: 
      print(""Incorrect input"") 
   elif n == 0: 
      return a 
   elif n == 1: 
      return b 
   else: 
      for i in range(2,n+1): 
          c = a + b 
          a = b 
          b = c 
      return b 
  
print(Fibonacci(10))"
Edit the following python code such that it can take a list of elements and return the distinct elements in the list,"def unique_elements(lst): 
    elements = []  
    for num in lst: 
        if num not in elements: 
            elements.append(num) 
    return list(set(elements))"
Write a python function to count the number of rectangles in a circle of radius r.,"def count_Rectangles(radius):  
    rectangles = 0 
    diameter = 2 * radius 
    diameterSquare = diameter * diameter 
    for a in range(1, 2 * radius):  
        for b in range(1, 2 * radius): 
            diagnalLengthSquare = (a * a +  b * b)  
            if (diagnalLengthSquare <= diameterSquare) : 
                rectangles += 1
    return rectangles "
Generate an artificial dataset containing 10 random numbers in Python.,"import numpy as np 
np.random.seed(0)

data = np.random.randint(1,101,10)
print(data)"
Write a Python program to sort a dictionary by values.,"sorted_d = dict(sorted(d.items(), key=lambda x: x[1]))
print(sorted_d)

    # Output: {0: 0, 2: 1, 1: 2, 4: 3, 3: 4}"
Write a python program to submit the following operation,"def max_contiguous_sum(arr):
    max_sum = 0
    current_sum = 0
    for i in range(len(arr)):
        current_sum += arr[i]
        if current_sum > max_sum:
            max_sum = current_sum
        if current_sum < 0:
            current_sum = 0
    return max_sum"
Create a Python script that transforms a customer's address from one format to another.,"inputString = ""123 Main Street, Orlando, FL, 32801""

words = inputString.split("","")
if len(words) > 3:
    outputString = words[1] + "", "" + words[2] + "" "" + words[3]
    print(outputString)"
Edit the following Python program to make it more efficient and concise.,"def calculate_sum(lst): 
 return sum(lst)"
Create an algorithm in Python that takes in a string and returns the number of words in the string.,"def word_count(s):
	words = s.split()
	return len(words)

s = ""Hello world""

print(word_count(s)) # 2"
"Rewrite the following Python code that takes a list of strings and capitalizes each word, in the same Python syntax but more optimized code.","words = ['these', 'are', 'some', 'words']
words = [word.capitalize() for word in words]"
Write a Python program to read and display user input until 'q' is entered.,"while True:
    user_input = input(""Please enter your input, or 'q' to quit: "")
    if user_input == 'q':
        break
    print(user_input)"
Write an algorithm in Python that takes an input of positive integers and for each element in the list multiplies it by 2 if it is even and divide it by 3 if it is odd.,"def multiplyOddDivideEven(lst):
  new_list = []
  for element in lst:
    if element % 2 == 0:
      new_list.append(element / 3)
    else:
      new_list.append(element * 2)
  return new_list

print(multiplyOddDivideEven([2, 3, 4, 6, 8, 10])) # prints [1.0, 6, 2.0, 4.0, 4.0, 5.0]"
Define a sorting algorithm to efficiently sort an array using Python.,"def sort(A):
 for i in range(len(A)):
 for j in range(i+1, len(A)):
 if A[i] > A[j]:
 A[i], A[j] = A[j],A[i]
 return A"
"Given an array and a number, write a Python function that will determine if the number is present in the array.","def is_present(arr, number):
    for i in range(len(arr)):
        if arr[i] == number:
            return True
    return False"
"Create a simple class in Python to represent a point in 2D space with x, y coordinates.","class Point2D:
    def __init__(self, x, y):
        self.x = x
        self.y = y"
Create a Python program to calculate the Fibonacci sequence upto the nth term.,"def fibonacci(n):  
    a = 0
    b = 1
    if n < 0: 
        print(""Incorrect input"") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2,n): 
            c = a + b 
            a = b 
            b = c 
        return b"
Write a function to remove specific words from a given list.,"def remove_words(list1, removewords):
    for word in list(list1):
        if word in removewords:
            list1.remove(word)
    return list1  "
Create a class in Python to represent a 2D point on a Cartesian plane.,"class Point2D:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    
    def get_distance(self, other):
        dx = self.x - other.x
        dy = self.y - other.y
        return (dx ** 2 + dy ** 2) ** 0.5"
Create a Python function to label the data correctly,"def label_data(dataset):
    labeled_data = []
    for data in dataset:
        label = ''
        for value in data:
            if value % 2 == 0:
                label += 'E'
            else:
                label += 'O'
        labeled_data.append(label)
    return labeled_data"
Edit the following python code such that the functions provide the stated output,"def func1(a):
    return a**2

def func2(a):
    return a**2 + 1"
Generate a program in Python that prints all prime numbers from 1 to 100.,"for num in range(2, 101):
   for i in range(2, num):
      if (num % i == 0):
         break
   else:
      print(num)"
Design an automated system in Python to remove all even numbers from a list.,"def remove_even(list):
    return [i for i in list if i%2 != 0]"
Write a Python program to process a dataset of words and count how many times each unique word appears.,"from collections import Counter

words = ['apple', 'apple', 'banana', 'apple', 'orange', 'banana', 'pear', 'orange', 'orange']

word_counts = Counter(words)

for word, count in word_counts.items():
    print(f'{word}: {count}')"
Write a Python script to calculate the sum of two numbers.,"num1 = 5
num2 = 10
total = num1 + num2

print(total)"
Create a Python program to implement the Naive Bayes classifier for a binary classification problem.,"from sklearn.naive_bayes import GaussianNB
import numpy as np

# Input data
X = np.array([[0, 0], [1, 1], [1, 0], [1, 1]])
y = np.array([0, 0, 1, 1])

# Train the model
model = GaussianNB()
model.fit(X, y)

# Make predictions
predictions = model.predict([[0, 1], [1, 1]])
print(predictions) # [1, 0]"
Write a Python program to sort the list using the bubble sort algorithm,"def bubble_sort(arr):
    n = len(arr)
    for i in range(n - 1):
        for j in range(0, n - i - 1):
            if arr[j] > arr[j + 1]: 
                arr[j], arr[j + 1] = arr[j + 1], arr[j]

# Driver code to test above
numbers = [5, 4, 3, 2, 1]
bubble_sort(numbers)"
Write an algorithm in Python to calculate the sum of even numbers in an array between a given range.,"def sumEvensInRange(arr, lower, upper):
    evens_sum = 0
    for num in arr:
        if num >= lower and num <= upper and num % 2 == 0:
            evens_sum += num
    return evens_sum"
Create a Python program to print out the version of the currently installed OS.,"import platform

print(platform.platform())"
Write a Python program to remove all duplicates from a given list.,"def remove_duplicates(lst):
    seen = set()
    result = []
    for item in lst:
        if item not in seen:
            seen.add(item)
            result.append(item)
    return result"
Create a Python function to calculate the cost of a pizza. The function should take in the size of the pizza in inches and return the total cost.,"def pizzaCost(size):
 cost = 0
 
 if size == 14:
 cost = 10.00
 elif size == 16:
 cost = 12.50
 elif size == 18:
 cost = 15.00
 else:
 cost = ""Unknown size""
 
 return cost

print(pizzaCost(14))

// Output: 10.00"
Construct a python program to capture a user’s input and print the input back out to the console.,"# Accepting user input
name = input(""Please enter your name: "")

# Printing out the user input
print(""Hello, "",  name, ""!"")"
Develop a Python program which takes an English sentence as input and prints its length.,"def sentenceLength(sentence):
    return len(sentence)

sentence = 'Hello, World!'
print(sentenceLength(sentence))"
Write an algorithm in Python to remove duplicates from an unsorted linked list.,"def remove_duplicates(head):
    if head is None: 
        return None 
    current = head 
    while current.next: 
        if current.data == current.next.data: 
            current.next = current.next.next 
        else: 
            current = current.next
    return head"
Suggest a completion for the following python code to randomly select an element from a given list.,"import random

def random_element(lst):
 return random.choice(lst)"
Create a Python program that calculates the total cost of a shopping cart with the given items and quantity.,"# Input values
items = [
 ['Item 1', 2, 3.00],
 ['Item 2', 5, 1.50]
]

# Calculate total cost
total_cost = 0
for item in items:
 cost = item[1] * item[2]
 total_cost += cost

# Print cost
print('Total cost: $' + str(total_cost))"
Create a Python program to add all the items in a list.,"# define a list
my_list = [1,2,3,4,5]

# define the sum variable
sum = 0

# loop through all values in list
for i in my_list:
    # add each value to the sum
    sum += i

# print the result
print(""The sum of all values in my_list is:"", sum)"
Create a Python script to convert JSON data to CSV format.,"import csv
import json

data = {
    “name”: “John”,
    “age”: 30,
    “city”: “New York”
}

with open('data.csv', 'w') as csvfile:
 writer = csv.writer(csvfile)
 writer.writerow([""Name"", ""Age"", ""City""])
 writer.writerow([data[""name""], data[""age""], data[""city""]])"
"Build a student grade calculator using Python, given the following grades and weights: Exam 1: 95%, Exam 2: 80%, Homework: 100%, weighting: Exam 1: 0.5, Exam 2: 0.3, Homework: 0.2","def grade_calculator(exam1, exam2, hw):
    grade = (exam1 * 0.5) + (exam2 * 0.3) + (hw * 0.2)
    return grade

grade = grade_calculator(95, 80, 100)
print(grade) # 91.0"
Write a Python program to modify a given list such that each element is equal to the square of the original element minus 2.,"modified_list = [7, 15, 23, 31]

# Python code
sample_list = [3, 5, 7, 9]

modified_list = [x**2 - 2 for x in sample_list]"
Write a Python program that extracts the domain name from a given URL.,"def get_domain(url):
  from urllib.parse import urlparse
  parsed_uri = urlparse(url)
  domain = '{uri.netloc}'.format(uri=parsed_uri)
  return domain

domain = get_domain(""https://www.google.com"")
print(domain)"
Generate a Python program that extracts all the words in a sentence and sorts it in descending order by length.,"def sort_words_by_length(sentence):
    words = sentence.split()
    words.sort(key=len, reverse=True)
    return words

sentence = ""This is a test sentence""
result = sort_words_by_length(sentence)
print(result)"
Construct an algorithm to solve the Towers of Hanoi problem using three stacks in Python.,"def hanoi(n,src,dst,tmp):
    if n > 0:
        # Move n - 1 disks from source to temp
        hanoi(n - 1, src, tmp, dst)
        # Move nth disk from source to destination
        dst.append(src.pop())
        # Move n - 1 disks from temp to destination
        hanoi(n - 1, tmp, dst, src)"
Generate a python code for an algorithmic solution for the following problem:,"def is_sum_possible(A, X): 
    n = len(A) 
    # create an empty hash set
    s = set() 
  
    for i in range(n): 
        temp = X - A[i]  
        if temp >= 0 and temp in s: 
            return True 
        s.add(A[i])  
  
    return False"
Create a Python function to strip a given string of its whitespace.,"def strip_whitespace(string):
  return string.replace("" "", """")

print(strip_whitespace('Hello World')) # HelloWorld"
Write a Python script to generate a random number between 0 and 9.,"import random

random_num = random.randint(0,9)
print(random_num)"
Write a function to find the similar elements from the given two tuple lists.,"def similar_elements(test_tup1, test_tup2):
  res = tuple(set(test_tup1) & set(test_tup2))
  return (res) "
Create a web service in Python which accepts a URL as input and prints the HTML of the page.,"import requests

def get_html(url):
    response = requests.get(url)   
    if response.status_code == 200:
        return response.text
    else:
        return None

html = get_html(""www.example.com"")
if html:
    print(html)"
Implement a Python program that takes a positive integer as its input and returns its factorial.,"def factorial(n):
    if n < 0:
        raise ValueError(""Input must be a positive integer"")
    if n == 0:
        return 1
    res = 1
    for i in range(2,n+1):
        res *= i
    return res"
Construct a Python program to find the difference between the maximum and minimum values in a given array of integers.,"def diffMaxMin(arr):
    maxVal = arr[0]
    minVal = arr[0]
    
    for num in arr:
        if num > maxVal:
            maxVal = num
        elif num < minVal:
            minVal = num
            
    return maxVal - minVal

arr = [1, 8, 4, 5, 9]
result = diffMaxMin(arr)
print(result)"
Create a Python program to generate a random password. Specify a minimum length of 8 characters and it should contain at least one number and one special character.,"import string
import random

def generate_password():
 length = 8
 chars = string.ascii_letters + string.digits + string.punctuation
 password = """".join(random.choice(chars) for i in range(length))
 
 return password

password = generate_password()
print(password)"
Create a Python program to generate N random numbers between 0 and 1,"import random

def gen_random_numbers(n):
    rand_nums = []    
    for i in range(n):
        rand_nums.append(random.uniform(0.0, 1.0))
    return rand_nums

rand_nums = gen_random_numbers(N)
print(rand_nums)"
Write a Python function to generate an array of numbers from 1 to n in random order.,"import random

def generate_random_array(n):
    array = [i for i in range(1, n + 1)]
    random.shuffle(array)
    return array

result = generate_random_array(7)
print(result)"
Create a relational mapping between two arrays using python.,"# Create a relational mapping between two arrays using python

arr1 = [1, 2, 3] 
arr2 = ['a', 'b', 'c'] 
  
# Create a final dictionary 
result = dict(zip(arr1,arr2)) 
  
# Print the created mapping  
print(result)"
Write a python function to find the first non-repeated character in a given string.,"def first_non_repeating_character(str1):
  char_order = []
  ctr = {}
  for c in str1:
    if c in ctr:
      ctr[c] += 1
    else:
      ctr[c] = 1 
      char_order.append(c)
  for c in char_order:
    if ctr[c] == 1:
      return c
  return None"
Create a Python program to open the user's default web browser with the given URL as an argument.,"import webbrowser

url = 'www.example.com'
webbrowser.open_new(url)"
Write a function to find kth element from the given two sorted arrays.,"def find_kth(arr1, arr2, m, n, k):
	sorted1 = [0] * (m + n)
	i = 0
	j = 0
	d = 0
	while (i < m and j < n):
		if (arr1[i] < arr2[j]):
			sorted1[d] = arr1[i]
			i += 1
		else:
			sorted1[d] = arr2[j]
			j += 1
		d += 1
	while (i < m):
		sorted1[d] = arr1[i]
		d += 1
		i += 1
	while (j < n):
		sorted1[d] = arr2[j]
		d += 1
		j += 1
	return sorted1[k - 1]"
Write a Python program that implements a search algorithm on a given list of numbers.,"def linearSearch(numbers, key):
    for i in range(len(numbers)):
        if numbers[i] == key: 
            return i
    return -1

numbers = [2, 8, 9, 5, 15, 12, 4]
key = 12
index = linearSearch(numbers, key)
if index == -1:
    print(""Element not found"")
else:
    print(""Element found at index"", index) # output: Element found at index 5"
"Write a Python program to generate a random list of length n containing integers within range (0, n-1).","import random 
  
def random_list(n): 
    # Generating a random list of length n
    random_list = [] 
    for i in range(n): 
        random_list.append(random.randint(0,n-1)) 
      
    return random_list 
  
# Driver Code 
n = 6
print(random_list(n))"
Create a Python function to print the Fibonacci series up to a given range.,"def Fibonacci(n): 
    if n<0: 
        print(""Incorrect input"") 
    # First Fibonacci number is 0 
    elif n==1: 
        return 0
    # Second Fibonacci number is 1 
    elif n==2: 
        return 1
    else: 
        return Fibonacci(n-1)+Fibonacci(n-2) 
   
# Driver Program 
result = []
for i in range(1,10): 
    result.append(Fibonacci(i))
    
print(result)"
Implement a function to find the greatest common divisor of two numbers in Python.,"def gcd(a, b): 
    if(a == 0): 
        return b 
    if(b == 0): 
        return a 
  
    if(a == b): 
        return a 
  
    if(a > b): 
        return gcd(a-b, b) 
    return gcd(a, b-a)"
Generate a Python note to query a database and display 5 records.,"import sqlite3

conn = sqlite3.connect('database.db')
c = conn.cursor()

# query the database
c.execute('SELECT * FROM users LIMIT 5')

# fetch all records
records = c.fetchall()

# print all records
for record in records:
  print(record)

# close the connection
conn.close()"
Write a function to delete the smallest element from the given heap and then insert a new item.,"import heapq as hq
def heap_replace(heap,a):
  hq.heapify(heap)
  hq.heapreplace(heap, a)
  return heap"
Write a Python program to automatically format a given source code in standardized way.,"import ast
import autopep8

# astunparse: https://docs.python.org/3/library/ast.html#ast.unparse
def format_source_code(code):
    root = ast.parse(code)
    code_ast = ast.unparse(root)
    code_formatted = autopep8.fix_code(code_ast, options={'aggressive': 1})
    return code_formatted"
Construct a python program which will receive a string and output the same string in reverse.,"def reverse_string(string):
    return string[::-1]"
Suggest a program to run a Python script from the command line.,"def run_script(script):
    '''This function will run a Python script from the command line.'''
    import subprocess
    subprocess.call(['python', script])

if __name__ == '__main__':
    run_script('script.py')"
"Given a list of integers, write a Python program to calculate the average of all the numbers.","def average(lst):
 sum = 0
 for num in lst:
  sum += num

 return sum/len(lst)

nums = [2, 4, 6, 8, 10]
result = average(nums)
print(result) # 6.0"
Write a Python program to insert an element at the beginning of a given list.,"def insert_at_beginning(list, element):
    list.insert(0, element)
    return list"
Create a Python class which represents a 3D Vector,"class Vector3D:
    def __init__(self, x, y, z):
        self.x = x
        self.y = y
        self.z = z
    
    def __str__(self):
        return ""("" + str(self.x) + "", "" + str(self.y) + "", "" + str(self.z) + "")"""
Create a class in Python that can be used to store the details of an employee.,"class Employee:
    def __init__(self, name, age , department):
        self.name = name
        self.age = age
        self.department = department
    
    def display(self):
        print(""Name:"", self.name)
        print(""Age:"", self.gender)
        print(""Department:"", self.department)"
Generate a valid python program according to the input:,"def reverse_list(list):
    for i in range(int(len(list) / 2)):
        temp = list[i]
        list[i] = list[len(list) - i - 1]
        list[len(list) - i - 1] = temp
    return list"
Build a web server to handle GET requests in Python.,"import http.server
import socketserver

PORT = 80

Handler = http.server.SimpleHTTPRequestHandler

with socketserver.TCPServer(("""", PORT), Handler) as httpd:
    print(""serving at port"", PORT)
    httpd.serve_forever()"
Develop a code generator that can generate a specified code given a language and a set of instructions.,"def code_generator(language, instructions): 
    if language == 'Python': 
        code_string = 'print(""Hello World!"")' 
    elif language == 'Java': 
        code_string = 'System.out.println(""Hello World!"");' 
 
    return code_string"
Create a python program to detect whether a string contains any duplicate characters.,"def foundDuplicates(string):
    '''This function will detect if a string contains any duplicate characters.'''
    seen = set()
    for char in string:
        if char in seen:
            return True
        seen.add(char)
    return False"
Write a Python program to print out a histogram for a list of numbers.,"numbers = [1, 2, 3, 4, 5, 3, 2, 1, 3, 2, 5, 6, 7, 5, 4]

for i in numbers:
    print('*' * i)

# Output should be
# *
# **
# ***
# ****
# *****
# ***
# **
# *
# ***
# **
# *****
# ******
# *******
# *****
# ****"
Debug a piece of code written in Python.,"def say_hello(name):
    message = ""Hello %s!"" % name
    print(message)

# checking for input
if name != '':
    say_hello(name)
else:
    print('Error: No name provided')"
Write Python code to check if a string is composed of only unique characters.,"def are_all_characters_unique(string): 
    return len(set(string)) == len(string) 

# Driver code 
print(are_all_characters_unique(""Hello"")) # Output: false
print(are_all_characters_unique(""abcdef"")) # Output: true"
Write a Python script to find the unique elements of a given list.,"list_x = [1, 1, 2, 3, 4, 5, 5]
unique_elements = set(list_x)
print(unique_elements) #output: {1, 2, 3, 4, 5}"
Generate a program using Python to calculate the factorial of a positive number.,"#Calculate the Factorial of a Positive Number

#Get input
factNum = 4

#Calculate and print result
factNum = factNum*(factNum - 1)
factNum = factNum*(factNum - 1)
factNum = factNum*(factNum - 1)

print(""The factorial of 4 is:"", factNum)"
Write a Python program that checks two given strings to see if they are anagrams of each other.,"def is_anagram(s1, s2):
    # Sort the strings 
    s1 = sorted(s1) 
    s2 = sorted(s2) 
  
    # If sorted strings are equal 
    return s1 == s2 
  
# Driver code 
s1 = ""listen""
s2 = ""silent""
if (is_anagram(s1, s2)): 
    print(""The strings are anagrams."") 
else: 
    print(""The strings aren't anagrams."")"
Create a Monte Carlo simulation in Python to estimate the value of Pi.,"import random
import math

def monte_carlo_pi(n):
 inside = 0
 for i in range(n):
 x = random.random()
 y = random.random()
 if (x*x + y*y) <= 1:
 inside += 1
 pi = (inside/n)*4
 return pi

# Test with 10000 simulations
n = 10000
result = monte_carlo_pi(n)
print(f""Pi is approximately {result} with {n} trials."")"
"Create a python function that takes two integers as parameters, and return the greater of the two numbers.","def greater_of_two_numbers(int1, int2):
    if int1 > int2:
        return int1
    else:
        return int2"
Construct an algorithm in Python that sorts an array using quick sort.,"def quick_sort(input_list):
    if len(input_list) <= 1:
        return input_list
    pivot = input_list[0]
    left = [x for x in input_list[1:] if x < pivot]
    right = [x for x in input_list[1:] if x >= pivot]
    return quick_sort(left) + [pivot] + quick_sort(right)

myList = [3, 8, 10, 2, 4]

sortedList = quick_sort(myList)
print(sortedList)"
Create a distance calculator program in Python that takes in two coordinates and returns the distance between them.,"import math

def distance_calc(coord1, coord2):
    """"""Returns the distance between two coordinates.""""""
    x1, y1 = coord1
    x2, y2 = coord2
    dist = math.sqrt((x2-x1)**2 + (y2-y1)**2)
    return dist

print(distance_calc(coordinates1, coordinates2))"
Design a Python class to store customer purchase histories.,"class CustomerHistory:
  def __init__(self, customer_id):
    self.customer_id = customer_id
    self.purchase_history = []

  def add_purchase(self, product):
    self.purchase_history.append(product)

  def get_purchase_history(self):
    return self.purchase_history"
Develop an algorithm in Python to classify an animal based on its weight and size.,"def classify_animal(weight, size):
    if weight < 10 and size < 50:
        return 'small'
    elif weight >= 10 and size >= 50:
        return 'large'
    else:
        return 'medium'

classify_animal(5, 40)"
Write a Python function to find the maximum product of three integers from a given list.,"def max_product_three(numbers):
 numbers.sort()
 return max(
  numbers[0] * numbers[1] * numbers[-1], 
  numbers[-1] * numbers[-2] * numbers[-3]
 )"
Develop a program in Python that sums up all the numbers of a list.,"# define the list
my_list = [1, 2, 3, 4, 5]

# compute the total
total = 0
for num in my_list:
 total += num

# print the result
print(""The sum of all numbers in the list is: "" + str(total))"
Create a function in Python to create a wordcount of a given text.,"def wordcount(text):
    counts = dict()
    words = text.split()

    for word in words:
        if word in counts:
            counts[word] += 1
        else:
            counts[word] = 1

    return counts

print(wordcount(text))"
"Create a function in Python that takes in a number, n, and prints out the nth term of the Fibonacci sequence.","def fibonacci(n):
  a = 0
  b = 1
  if n < 0:
    print(""Incorrect input"")
  elif n == 0:
    return a
  elif n == 1:
    return b
  else:
    for i in range(2,n):
      c = a + b
      a = b
      b = c
    return b
  
print(fibonacci(10))"
Write Python code to list the contents of a directory.,"# get the list of contents
import os
directory_contents = os.listdir()

# print the contents
for content in directory_contents:
    print(content)"
Write a function in Python to remove all numbers from an array.,"def remove_numbers(arr):
  new_arr = []
  for el in arr:
    if not isinstance(el, int):
      new_arr.append(el)
  return new_arr

a = [3, 1, 4, 5, 6, 2]

print(remove_numbers(a))"
Generate a unique identifier in Python,"import uuid

def generateUniqueId():
 return str(uuid.uuid4())

uniqueId = generateUniqueId()
print(uniqueId)"
Write a function to check if the given tuple contains only k elements.,"def check_tuples(test_tuple, K):
  res = all(ele in K for ele in test_tuple)
  return (res) "
Create an algorithm in Python that computes a Fibonacci sequence up to a given index.,"def fibonacci_seq(n):
    if n < 0:
        raise ValueError(""Index must be a positive integer."")
    elif n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        a = 0
        b = 1
        for i in range(2, n + 1):
            c = a + b
            a = b
            b = c
        return c

fib_7 = fibonacci_seq(7)
print(fib_7)"
Create a python program to sort list elements in ascending order using the selection sort method.,"unsortedList = [4,3,2,1]
 
for i in range(len(unsortedList)): 
    min_idx = i
    for j in range(i+1, len(unsortedList)):
        if unsortedList[min_idx] > unsortedList[j]: 
            min_idx = j 
    unsortedList[i], unsortedList[min_idx] = unsortedList[min_idx], unsortedList[i]
    
print(""Sorted list:"", unsortedList)"
Create a Python function to encrypt data using the Caesar cipher algorithm.,"def encrypt_caesar_cipher(message, key):
    encrypted_message = """"
    for text in message:
        if text.isupper():
            encrypted_message += chr((ord(text) + key - 65) % 26 + 65) 
        elif text.islower():
            encrypted_message += chr((ord(text) + key - 97) % 26 + 97) 
    return encrypted_message"
"Given a string containing words separated by spaces, write a Python function to remove any duplicates.","def remove_duplicates(string):
words = string.split("" "")
unique_words = set(words)
return "" "".join(unique_words)

remove_duplicates(""I have to go go shopping shopping"") # ""I have to go shopping"""
Create a Python program to generate a random number between 1 and 10.,"import random

def generate_random_number():
 return random.randint(1, 10)
 
print(generate_random_number())"
Construct a code in Python to count the number of alphabets in an user-entered string.,"def countAlpha(str): 
	count = 0
	for char in str:
		if char.isalpha():
			count += 1
	return count 

str = ""Hello World""
result = countAlpha(str)
print(""Number of alphabets:"", result)"
Modify the following Python program to replace each number with its square.,"my_list = [1, 16, 81, 256, 625]"
Execute the following SQL query in a Python environment and return the result.,"import sqlite3 
conn = sqlite3.connect('Order.db')
c = conn.cursor()
c.execute(""SELECT * FROM Orders WHERE OrderDate > '2018-12-31'"")
result = c.fetchall()
print(result)"
Create an application in Python that performs sentiment analysis on a sentence. The application should take in a sentence and return a score representing the sentiment of the sentence.,"import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer

def sentiment_score(sentence):
 nltk.download('vader_lexicon')
 analyser = SentimentIntensityAnalyzer()
 score = analyser.polarity_scores(sentence)
 return score
 
sentiment_score('This is an example sentence.')"
Write a Python program to calculate the roots of a quadratic equation with given coefficients.,"def calculate_roots(a, b, c): 
  # calculate the discriminant
  d = (b**2) - (4*a*c)

  # find two solutions
  sol1 = (-b-cmath.sqrt(d))/(2*a)
  sol2 = (-b+cmath.sqrt(d))/(2*a)

  return sol1, sol2"
Write a Python code snippet to convert a string to a dictionary.,"my_dict = dict(item.split(""="") for item in s.split(""&""))

print(my_dict) # prints {'student': 'John', 'grade': 'A'}"
Write a Python script to calculate the distance between two points.,"import math

def calculate_distance(x1, y1, x2, y2):
  x_diff = x2 - x1
  y_diff = y2 - y1
  distance = math.sqrt(x_diff**2 + y_diff**2)
  return distance

result = calculate_distance(x1, y1, x2, y2)
print(result)"
Create a python program to combine two lists into a dictionary,"def combine_lists_to_dict(keys, values):
    my_dict = dict(zip(keys, values))
    return my_dict"
"Create a Python program to generate a random string of length 5, containing only lowercase letters.","import random 
  
def generateString(string_length): 
    letters = string.ascii_lowercase
    return ''.join(random.choice(letters) for i in range(string_length))

print(generateString(5))"
Create a Python program that prints out a random id number containing 6 digits.,"import random

def generateId():
  return ''.join(str(random.randint(0,9)) for i in range(6))

print(generateId())"
Implement a code in Python for reversing a string.,"def reverse_string(string):
  reversed_string = """"
  
  for char in string:
    reversed_string = char + reversed_string
  
  return reversed_string"
Complete the following python code to make it comply with the given logic,"def largest_element(list1): 
    max = list1[0] 
    for item in list1: 
        if item > max: 
            max = item
    return max"
Create a REPL (read-eval-print loop) program in Python for performing basic calculations.,"def repl():
    while True:
        # read user input
        user_input = input(""> "")
        # evaluate user input
        result = eval(user_input)
        # print the result
        print(result)

repl()"
Write an algorithm in Python that finds the minimal number in an array.,"def find_min(arr):
    min_num = arr[0]
    for num in arr:
        if num < min_num:
            min_num = num
    return min_num

min_num = find_min(arr)
print(min_num)"
Propose a Pythonic solution to the following code,"# List of non-empty strings
items = ['apple', 'banana', 'cat', 'dog', 'elephant']
for i, item in enumerate(items):
    print('item ' + str(i) + ' is ' + item)"
Develop a Python program to print the second-largest element of an array.,"def second_largest(arr):
    largest = float(""-inf"")
    second_largest = float(""-inf"") 
    for i in arr:
        if i > largest:
            second_largest = largest
            largest = i
        elif i > second_largest and i != largest:
            second_largest = i
    return second_largest

arr = [10, 3, 5, 22, 4]
print(second_largest(arr))"
Create a Python program that fetches the user's current time and sets a reminder after 30 minutes.,"import time

def set_reminder_in_minutes(minutes):
    """""" Fetches the user's current time and sets a reminder after the given minutes """"""
    current_time = time.time() 
    reminder_time = current_time + minutes * 60

    # Set the reminder
    # ... 
    
if __name__ == ""__main__"":
    set_reminder_in_minutes(30)"
Create a class in Python to define a circle object.,"class Circle:
    def __init__(self, radius):
        self.radius = radius

    def get_area(self):
        return 3.14 * (self.radius ** 2)"
Design a function in Python to search for a given number in a list.,"def search_list(lst, num):
    for i in range(len(lst)):
        if lst[i] == num:
            return i
    return -1"
Write a Python function to return the greatest common divisor among two numbers.,"def gcd(num1, num2): 
    if(num2 == 0): 
        return num1 
    return gcd(num2, num1%num2)"
Write a Python program to generate a table of values for sin and cos functions between 0 and 10.,"import math          

def generate_table(): 
 
 # headers 
 print (""angle (in degrees) sin(angle) cos(angle)"") 
 
 # values 
 for angle in range(0, 370, 10): 
  print(""{:7} {:15.4f} {:15.4f}"".format(angle,math.sin(math.radians(angle)),math.cos(math.radians(angle)))) 

if __name__ == ""__main__"": 
 generate_table()"
Create an array of the first 10 whole numbers using python.,"arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
Write a function to find the lateral surface area of a cone.,"import math
def lateralsurface_cone(r,h):
  l = math.sqrt(r * r + h * h)
  LSA = math.pi * r  * l
  return LSA"
Create a python module to edit a dataframe,"import pandas as pd

def edit_dataframe(df):

    # Adding the column 'new_value'
    df['new_value'] = df['value'] + 1

    # Replacing values in the 'id' column
    df['new_id'] = df['id'].map(lambda x: 'id_' + str(x))

    # Updating the value in the 'value' column
    df.value = df.value * 2

    return df"
Write a Python code to sort a dictionary by a specific key.,"numbers = {
 '1': 50,
 '2': 60,
 '3': 20,
 '4': 70
}

sorted_dictionary = sorted(numbers.items(), key=lambda x: x[1])
print(sorted_dictionary)"
Write a Python function that takes in a 2D array of integers and return the sum of all elements in the array.,"def sumArray(arr):
  sum = 0
  for i in range(len(arr)):
    for j in range(len(arr[i])):
      sum += arr[i][j]
      
  return sum

sumArray([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) # returns 45"
Write a Python program to search for a specific value in a list.,"def search_list(search_term, my_list):
 for item in my_list:
 if item == search_term:
 return True
return False

my_list = [2, 4, 6, 8, 10]
search_term = 8

if search_list(search_term, my_list):
 print(""Value found"")
else:
 print(""Value not found"")"
Optimize a Python algorithm to find the greatest 2 numbers from a 10000 integers list.,"def get_greatest_2(items):
 max1 = max2 = float('-inf')
 for item in items:
 if item > max1:
 max1, max2 = item, max1
 elif item > max2:
 max2 = item
 return max1, max2

myList = [1, 5, 3, 7, 4, 7, 8, 9, 2, 10, 6, 8]
print('The greatest 2 numbers from the array:', get_greatest_2(myList))

Output:
The greatest 2 numbers from the array: (9, 8)"
Build a Python program to sort a list of strings by the length of the string in descending order.,"def sort_list(list):
    return sorted(list, key=lambda x: len(x), reverse=True)

list = [""cat"", ""dog"", ""elephant"", ""tiger""]
print(sort_list(list))

# Output: [""elephant"", ""tiger"", ""dog"", ""cat""]"
Design an algorithm in Python which takes an array as an input and sorts them in ascending order using selection sort.,"def selection_sort(arr): 
	for i in range(len(arr)):   
		min_idx = i 
		for j in range(i+1, len(arr)): 
			if arr[min_idx] > arr[j]: 
				min_idx = j 
		arr[i], arr[min_idx] = arr[min_idx], arr[i]

arr = [76, 25, 16, 15, 88]
selection_sort(arr)
print(""Sorted array:"", arr) # [15, 16, 25, 76, 88]"
Write a class in Python to initalize an empty list.,"class ListInitializer:
    def __init__(self):
        self.list = []"
Create a program in Python which takes a string input from the user and prints it in the reverse order,"# Take input from the user
string = input(""Enter string : "")

# Reverse the string 
rev_str = string[::-1]

# Print the reversed string
print(""Reverse string :"", rev_str)"
Edit an existing Python script to search for and delete duplicated words in a string.,"my_string = 'this string contains duplicate words' 

my_string = my_string.split() 
res = [] 
for i in my_string: 
    if i not in res: 
        res.append(i) 

my_string = ' '.join(res) 
print(my_string)"
Create a function in Python which takes in two numbers and calculates the sum,"def sumTwoNumbers(a, b):
    return a + b"
Develop a Python script to generate a Fibonacci series,"def fibonacci(n):
    a = 0
    b = 1
    if n < 0:
        print(""Incorrect input"")
    elif n == 0:
        return a
    elif n == 1:
        return b
    else:
        for i in range(2,n):
            c = a + b
            a = b
            b = c
        return b"
Create a Python program to find the deepest node in a tree.,"def deepest_node(root):
    if not root:
        return 0
    elif not root.left and not root.right:
        return 1
    else:
        left_depth = deepest_node(root.left)
        right_depth = deepest_node(root.right)

        if left_depth > right_depth:
            return 1 + left_depth
        else:
            return 1 + right_depth"
"Create a date class in Python with two init functions which will get and set a date, respectively.","class Date:
    def __init__(self):
        self.day = 0
        self.month = 0
        self.year = 0
 
    # function to set the date
    def set_date(self, day, month, year):
        self.day = day
        self.month = month
        self.year = year
 
    # function to get the date
    def get_date(self):
        return self.day, self.month, self.year"
Edit the following Python program to compute the square root of a given number.,"def square_root(number):
    return number ** 0.5"
Build a Python generator that yields the next power of 2 for a given number.,"def nextPowerOf2Generator(n): 
    power = 1
    while True: 
        pow_val = power * 2
        yield pow_val 
        power = pow_val 
  
n = 4

for i in nextPowerOf2Generator(n):
    if i > n:
        print(i)
        break"
Use Python to generate a script to calculate the sum of natural n numbers,"n = 6
sum = 0

for i in range(1, n+1):
   sum = sum + i
print(""The sum is"", sum)"
"Using the random module of Python, create a program that prints 10 random numbers between 1 and 100.","import random

for i in range(10):
    x = random.randint(1, 100)
    print(x)"
Describe the steps to run a python program from the command line.,"1. Open Command Prompt in Windows or Terminal in macOS.
2. Navigate to the directory containing the Python file.
3. Type the command: python <filename>
4. Press enter. This will execute the Python file."
"Create a Python 3 program that takes as input a list of numbers (num1, num2,...,numN) and transforms it into the string “num1 + num2 + ... + numN = sum”, where sum is the sum of the numbers.","nums = [5, 3, 2, 6, 8]
sum = 0
out_string = """"

for num in nums:
 sum += num
 out_string += str(num)
 
 if num != nums[-1]:
  out_string += "" + ""
 else:
  out_string += "" = ""
  
out_string += str(sum)

print(out_string)"
Write a function to check the given decimal with a precision of 2 by using regex.,"import re
def is_decimal(num):
  num_fetch = re.compile(r""""""^[0-9]+(\.[0-9]{1,2})?$"""""")
  result = num_fetch.search(num)
  return bool(result)"
"Generate a simple Python script to compute basic statistics (mean, median and mode) for a given list of numbers.","def compute_statistics(nums):
 mean = sum(nums)/len(nums)
 median = sorted(nums)[len(nums)//2]
 mode = max([(nums.count(i), i) for i in set(nums)], key=lambda x:x[0])[1]
 print('Mean:', mean)
 print('Median:', median)
 print('Mode:', mode)

compute_statistics([7, 10, 16, 1, 18])"
Develop a Python program to generate all possible strings of length 'n' using characters from a given array.,"def generate_strings(characters, length):
    if length == 0:
        return [""""]

    result = []
    for char in characters:
        for string in generate_strings(characters, length-1):
            result.append(char + string)

    return result

strings = generate_strings([""A"", ""B"", ""C""], 3)
print(""Strings:"", strings)"
Create a function to find the mean of a given array in Python.,"def mean(arr): 
  return sum(arr)/len(arr)

arr = [2, 4, 5, 7]
mean_val = mean(arr)
print(""Mean of the array is"", mean_val)
# Output: Mean of the array is 4.5"
Write a function to sort a list of lists by length and value.,"def sort_sublists(list1):
      list1.sort()  
      list1.sort(key=len)
      return  list1"
Create a Python function to detect if a string contains a duplicate character.,"def contains_duplicate(s):
    counts = dict()
    for ch in s:
        if ch in counts:
            return True
        counts[ch] = 1
    return False"
Provide a Python function that takes a phrase as input and converts all words in the phrase to title case.,"def title_case(phrase):
    words = phrase.split()
    result = []
    for word in words:
        result.append(word[0].upper() + word[1:].lower())
    
    return ' '.join(result)"
"Given a Python list of numbers (max 10 elements) transform the list to a dictionary with the following rules: if the element is even, the key is 'even' and the value is the list of even numbers; if the element is odd, the key is 'odd' and the value is the list of odd numbers.","{
 'even': [4, 8, 12],
 'odd': [3, 15, 7]    
}"
Write a Python program to convert the input array of strings into a dictionary with keys as the string and the values as the index of the string in the array.,"my_dict = dict(zip(['foo', 'bar', 'baz', 'qux'], 
                  range(len(['foo', 'bar', 'baz', 'qux']))))

print(my_dict) # {'foo': 0, 'bar': 1, 'baz': 2, 'qux': 3}"
Write a python program to generate a random list of numbers within a specified range.,"import random

def rand_list(start, end, n):
    rand_list = []
    for i in range(n):
        rand_list.append(random.randint(start, end))
    return rand_list

nums = rand_list(1, 10, 5)
print(nums)"
Create a Python script which uses the BeautifulSoup library to parse the data of a given webpage.,"import requests
from bs4 import BeautifulSoup

page = requests.get(url)
soup = BeautifulSoup(page.content, 'html.parser')"
Write a python program to create a data structure composed of random values with a total of n elements.,"import random

def create_random_structure(n):
    structure = []
    for i in range(n):
        structure.append(random.randint(0, n))
    return structure"
Create a Python program to search a list for a particular value and return its index.,"def search_list(list, value): 
    i = 0
    while(i < len(list)): 
        if list[i] == value: 
            return i 
        i = i + 1
  
    return -1
  
list = [2, 3, 5, 9] 
value = 5
result = search_list(list, value) 
  
if result != -1: 
    print(""Element is present at index"", result) 
else: 
    print(""Element is not present in list"")"
Write a python program to check if a given string contains any numbers,"def string_contains_number(string):
    pattern = re.compile(""[0-9]"") 
    return pattern.search(string) != None"
Write a Python program to perform linear search on a given array of numbers.,"def linearSearch(arr, x): 
  
    for i in range (len(arr)): 
  
        if arr[i] == x: 
            return i 
  
    return -1
  
arr = [2, 3, 4, 6, 1] 
x = 4
  
result = linearSearch(arr, x) 
  
if(result == -1): 
    print(""Element is not present in array"") 
else: 
    print(""Element is present at index"", result)"
Reverse a sequence of numbers with Python.,"[75, 93, 6, 25, 13]"
Create a program in Python that finds the index of the first occurrence of a target number in a given array.,"arr = [1, 3, 5, 3, 7, 3, 6]
target = 3

def findIndex(arr, target): 
    for i in range(len(arr)): 
        if arr[i] == target: 
            return i 
  
    return -1
  
# Driver Code 
index = findIndex(arr, target) 
print(""Index of"", target, ""is"", index) 

// Output: Index of 3 is 1"
"Write a Python program to generate an HTML page containing a table with 3 rows and 2 columns, where the data in the cells are randomly generated.","import random

HTML = '<html>\n<head>\n<title>Random Table</title>\n</head>\n<body>\n<table>\n'

for row_num in range(0,3):
    HTML += ' <tr>\n'
    for column_num in range(0,2):
        HTML += '  <td>{}</td>\n'.format(random.randint(0, 10))
    HTML += ' </tr>\n'

HTML += '</table>\n</body>\n</html>'

print(HTML)"
Write a function to perform index wise addition of tuple elements in the given two nested tuples.,"def add_nested_tuples(test_tup1, test_tup2):
  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) "
Generate a Python program that takes an input of a number and checks if it is prime.,"def is_prime(num):
    if num == 2:
        return True
    elif num < 2 or not all(num % i for i in range(2, num)):
        return False
    return True

num = 7
result = is_prime(num)
print(result)"
"Classify the following objects using a decision tree in Python:

* A basketball
* A tennis ball","from sklearn.tree import DecisionTreeClassifier

X = [['basketball'],[‘tennis ball']]
y = ['ball', 'ball']

clf = DecisionTreeClassifier()
clf.fit(X,y)

prediction = clf.predict([['basketball']])
print(prediction)
# Output: ['ball']"
"Write a Python program to create a JSON object for a student's marks database. The database should contain the student's name, id, subject name and the marks obtained.","student_data = [
    {
        'name': 'John',
        'id': 105, 
        'subjects': {
            'Science': 90
        }
    }
]"
Generate a python program to find the minimum element of a list.,"def find_min(input_list):
    min_ele = input_list[0]
    for ele in input_list:
        if ele < min_ele:
            min_ele = ele
    return min_ele"
Create a GUI application in Python to display a simple message.,"# importing tkinter module 
from tkinter import *
  
# creating a GUI window 
root = Tk() 
  
# setting a geometry to the GUI window 
root.geometry(""300x200"") 
  
# creating a label widget to display a message 
# this label is child of root window 
Label(root, text=""Hello, World!"").pack() 
  
# looping the GUI window using an infinite loop 
root.mainloop()"
Create a Python program to compare two lists and return their intersection,"def intersection(list1, list2):
    intersection = [value for value in list1 if value in list2]
    return intersection

list1 = [1,2,3,4,5]
list2 = [4,5,6,7,8]
result = intersection(list1, list2)
print(result) # prints [4,5]"
Create a Python program to sort a dictionary by value in descending order.,"# Sort the given dictionary by value 
import operator
 
d = {'a':3, 'b':1, 'c':5, 'd':4, 'e':2}
sorted_d = sorted(d.items(), key=operator.itemgetter(1),reverse=True)
 
print(sorted_d)

// Output: [('c', 5), ('d', 4), ('a', 3), ('e', 2), ('b', 1)]"
Write a Python program to find the closest match of a given list of integers in another.,"def closest_match(arr1, arr2):
    
    closest_match = None
    min_diff = float('inf')
    
    for x in arr1:
        for y in arr2:
            diff = abs(x - y)
            if diff < min_diff:
                min_diff = diff
                closest_match = y
    
    return closest_match"
"Given a list of integer values, write a Python program to find the number of consecutive values that are increasing.","count = 0

for i in range(len(numbers) - 1):
    if numbers[i] < numbers[i + 1]:
        count += 1

print(count)"
Create and configure a basic web server using Python's http.server.,"import http.server

PORT = 8000

Handler = http.server.SimpleHTTPRequestHandler

httpd = http.server.HTTPServer(("""", PORT), Handler)

print(""serving at port"", PORT)
httpd.serve_forever()"
Generate a python program to take in 3 user inputs,"a = input(""Enter the first input: "")
b = input(""Enter the second input: "")
c = input(""Enter the third input: "")"
Create python code to print the first n numbers of the Fibonacci sequence,"def print_fibonacci_sequence(n):
    # Initialize the first two numbers of the sequence
    num1 = 0
    num2 = 1
    # Use a for loop to print the the sequence in the right order
    for i in range(n):
        print(num1, end=' ')
        num3 = num1 + num2
        num1 = num2
        num2 = num3

# Test
print_fibonacci_sequence(10)"
Find the intersection of two given sets using Python,"Set1 = [1, 2, 3, 4, 5]
Set2 = [3, 4, 5, 6, 7]

# intersection
intersection_set = set(Set1) & set(Set2)

# Printing intersection
print(""Intersection is :"", intersection_set)

# output
Intersection is : {3, 4, 5}"
Create an algorithm in Python to find the median value in a given list of numbers.,"def find_median(numbers):
    numbers.sort()
    length = len(numbers)
    if length % 2 == 0:
        median = (numbers[int((length/2)-1)] + numbers[int(length/2)])/2
    else:
        median = numbers[int((length-1) / 2)]
    return median"
Write a function in Python to find the sum of all elements of a given list.,"def sum_list(inputList): 
    sum_list = 0
    for num in inputList: 
        sum_list += num 
    return sum_list"
Optimize a Python program to convert all lowercase letters in a string to uppercase in the most efficient way.,"# Open the input file
with open('lowercase.txt') as file:
    content = file.read()

# Convert the string to uppercase using a list comprehension
uppercase = ''.join([c.upper() for c in content])

print('Converted string to uppercase:', uppercase)"
Generate a Python program to read an integer from the user and display a right-angled triangle with the given integer as the base.,"num = int(input(""Enter a number: ""))
 
for i in range(1, num + 1):
  for j in range(1, i + 1):
      print(""*"", end="" "")
  print(""\r"")"
Compose a Python program to solve an equation using the Bisection method.,"def f(x): 
    return x**2 - 3

def bisection(f,a,b,tol):
  c = (a+b)/2
  if f(c)==0 or (b-a)/2 < tol:
    return c
  elif f(c)*f(a) > 0:
    return bisection(f,c,b,tol)
  else:
    return bisection(f,a,c,tol)"
You are given a Python program that prints random numbers. Improve the program to print a random number between 0 and 10.,"import random

for i in range(5):
    print(random.randint(0, 10))"
Write a Python program to use Regular Expressions to search and replace a given string.,"import re

text = ""He is an excellent programmer""

def find_and_replace(text, pattern, replacement):
    return re.sub(pattern, replacement, text)

result = find_and_replace(text, r""excellent"", ""brilliant"")
print(result)"
Name different Python string methods.,"String methods include capitalize(), count(), endswith(), find(), format(), index(), isalnum(), join(), lower(), replace(), split(), startswith(), strip(), title(), upper(), and zfill()."
"Write an algorithm in Python to compute the total number of distinct pairs (x, y) such that ax + by = c.","def countPairs(a, b, c):
    count = 0
    for x in range(0, c + 1):
        for y in range(0, c + 1):
            if a * x + b * y == c:
                count += 1
    return count

a = 2
b = 2
c = 4
print(countPairs(a, b, c))"
Create a python function to classify a given dataset based on the numeric value of a given feature.,"def classify_data(feature, value, outcome):
    if feature == ""Income"" and float(value) <= 50:
        return outcome
    else:
        return ""No Classification"""
Generate a loop in Python using a list of words and print out the length of each word.,"words = [""apple"", ""pie"", ""is"", ""delicious""]

for word in words:
 print(len(word))"
Write a python script to print a table of squares and cubes of natural numbers upto 10.,"def print_squares_and_cubes_table():
  # Print top of the table
  print(""n\tSquare\tCube"")

  # Print the squares and cubes of natural numbers from 1 to 10
  for n in range(1, 11):
    print(n,""\t"", n*n,""\t"",n*n*n)

# Driver code
print_squares_and_cubes_table()"
Write an efficient function in Python to check if a number is Armstrong number or not.,"def isArmstrongNumber(n):
    length = len(str(n))
    total = 0

    temp = n
    while temp > 0:
        digit = temp % 10
        total += digit ** length
        temp //= 10
    return n == total"
"Create a function in Python that receives a word as input, searches for synonyms in a dictionary and returns a list of synonyms.","import json

def get_synonyms(word):
 synonyms = []
 with open('dictionary.json') as dictionary_file:
 dictionary = json.load(dictionary_file)
 if word in dictionary.keys():
 for syn in dictionary[word]:
 synonyms.append(syn)
 return synonyms

print(get_synonyms('happy'))"
Create a function in Python to perform linear regression looking for the best correlation for a set of data.,"import numpy as np

def linear_regression(x, y):
    x_mean = np.mean(x)
    y_mean = np.mean(y)
    
    num = 0
    den = 0
    for i in range(len(x)):
        num += (x[i] - x_mean)*(y[i] - y_mean)
        den += (x[i] - x_mean)**2
    m = num / den
    c = y_mean - m*x_mean
    return m, c"
Write a Python program that parses a web page and extracts all the hyperlinks.,"import re
import requests

url = 'https://www.example.com/'

html = requests.get(url).text

links = re.findall(""<a href=\""(.*?)\"""", html)

for link in links:
    print(link)"
Optimize the following Python program to calculate the sum of two numbers.,"a = 100
b = 200
sum = a + b

# Optimized code
sum = sum(100, 200)"
Create a class in Python that takes a string of characters as its argument and stores it.,"class StringClass:
  
  def __init__(self, string):
    self.string = string
    
  def printString(self):
    print(self.string)"
Write a Python script to find all common elements between two sets.,"def find_common_elements(set1, set2):
    common_elements = []
    for item in set1:
        if item in set2 and item not in common_elements:
            common_elements.append(item)
    return common_elements"
Create a Python program to identify anagrams in a given list of strings.,"def anagrams(words):
    anagram_list = []
    for word1 in words:
        for word2 in words:
            if word1 != word2 and sorted(word1) == sorted(word2):
                anagram_list.append([word1,word2])
    return anagram_list

list_of_words = [""ab"",""ba"",""dog"",""god""]
print(anagrams(list_of_words))"
Craft a Python code for sorting a list of strings by character length,"def sort_by_char_length(strings):
    return sorted(strings, key = len)"
"Create a Python program that takes a list of strings as input, removes any duplicate strings, and prints out the resulting unique list.","input_list = [""a"", ""b"", ""c"", ""d"", ""a"", ""e""]
unique_list = set(input_list)

print(unique_list)
# Output: {'a', 'c', 'b', 'e', 'd'}"
Optimize the following python code to search for a substring in a given string.,"def containsSubstring(str, sub):
    for i in range(len(str)-len(sub)+1):
        j = 0
        while j < len(sub) and sub[j] == str[i+j]:
            j += 1
        if j == len(sub):
            return True
    return False"
Create a Python script that finds the longest word in a given sentence.,"def find_longest_word(sentence):
    words = sentence.split("" "")
    longest_word = """"
    for word in words:
        if len(word) > len(longest_word):
            longest_word = word
    return longest_word

result = find_longest_word(""This is a sample sentence"")
print(result)"
Convert the given string to all capital letters using an algorithm and Python.,"def convert_to_upper(string):
    """"""Function to convert the given string to all capital letters using an algorithm. 'Input should be a string.""""""
    result = ''
    for char in string:
        result += chr(ord(char) - 32)
    return result

print(convert_to_upper('Hello world!'))"
Create a Python script to print out the number of days between two dates.,"import datetime 

def date_difference(date1, date2): 
	return (date2-date1).days 

date1 = datetime.date(year1, month1, day1)
date2 = datetime.date(year2, month2, day2)
print(date_difference(date1, date2))"
Write a Python program to calculate the total number of bits required to store an integer.,"def bits_required(num):
    num_bits = 0
    if num == 0:
        num_bits = 1
    else:
        while num > 0:
            num_bits += 1
            num >>= 1
    return num_bits"
Rewrite the following Python code in Node.js:,"let evenNumbers = [2, 4, 6, 8];
let sum = 0;
for (let item of evenNumbers) {
 sum += item;
}
console.log(sum);"
Create a Python program to calculate the square root of a number without using the square root function.,"def my_sqrt(x): 
    guess = x
    i = 0
    while guess * guess != x and i < 20:
        guess = (guess + x/guess) / 2.0
        i += 1
    return guess 

result = my_sqrt(36) 
print(""Square root of 36 is = "", result)"
Write a function to find the diameter of a circle.,"def diameter_circle(r):
  diameter=2*r
  return diameter"
Create a Python script to store and manipulate contact information.,"# Create a dictionary to store contact info
contacts = {}
 
# Ask user to enter contact name
name = input('Enter contact name: ')
 
# Ask user to enter contact number
number = input('Enter contact number: ')
 
# Store contact in contacts dictionary
contacts[name] = number
 
# Print out contact info
for contact, number in contacts.items():
    print(f'{contact}: {number}')"
Write a python program that takes in a given list of string and then prints out a list of all the anagrams of those strings.,"def find_anagrams(strings):
    anagrams = []

    for string in strings:
        temp = [string]
        for s in strings:
            if sorted(string) == sorted(s) and string != s:
                temp.append(s)
        anagrams.append(temp)
 
    return anagrams"
Construct a Python script that deletes all the characters in a given string except for the vowels.,"# Get the input string
string = ""Hello World!""

# Modify the string
vowels = ""aeiou""
new_string = """"
for char in string:
    if char in vowels:
        new_string += char

# Print the string
print(new_string)
# prints ""eoo"""
"Create a class in Python that will take two parameters (a, b) and return a * b.","class Multiplier:
    def __init__(self, a, b):
        self.a = a
        self.b = b

    def calculate(self):
        return self.a * self.b

multiplier = Multiplier(8, 11)
print(multiplier.calculate())"
Develop a Python program that takes a list of words in variable ‘words’ and creates a new variable with the length of each word.,"word_lengths = [len(word) for word in words]

print(word_lengths) # [5, 5, 1, 4, 3]"
Create a library in Python to generate Fibonacci numbers.,We can create a library in Python to generate Fibonacci numbers. We can define a function that takes in the numbers of Fibonacci numbers to generate as an argument and returns a list of Fibonacci numbers. The function can maintain a cache of previously generated Fibonacci numbers to reduce computation time.
Develop a Python function to remove the last n characters from a given string.,"def remove_last_n_characters(str, n):
  return str[:len(str)-n]"
Use Python to generate a random number between 5 and 20 (inclusively).,"import random
x = random.randint(5, 20)
print(x)"
Develop a function in Python that takes a string and an integer as input and returns the string with the length of the integer.,"def truncateString(inputString, length):
    return inputString[:length]

print(truncateString('Hello World', 5))"
Implement a web scraper in Python that downloads the contents of a given URL.,"import requests
from bs4 import BeautifulSoup

url = 'https://en.wikipedia.org/wiki/Web_scraping'

r = requests.get(url)
soup = BeautifulSoup(r.text, 'html.parser')

html = str(soup)

with open(""output.html"", ""w"") as file:
    file.write(html)"
Create a python program to merge the two given lists.,"def merge_lists(list_1, list_2):
    """"""Merge the two given lists.""""""
    list_1.extend(list_2)
    return list_1

# Usage Example
list_1 = [1, 2, 3] 
list_2 = [4, 5, 6]
merged_list = merge_lists(list_1, list_2)
print(merged_list)  # [1, 2, 3, 4, 5, 6]"
Create a Python program to encrypt a given text,"def encrypt(text, key): 
    cipher = """" 
    for c in text: 
        cipher += chr(ord(c) + key) 
    return cipher

#Driver code 
if __name__ == '__main__': 
    plaintext = ""This is a secret message""
    key = 3
    ciphertext = encrypt(plaintext, key) 
    print(ciphertext)"
Edit this Python code to raise an error if the length of the list less than 3,"def check_list_length(lists):
    if len(lists) > 3:
        return True
    else:
        raise ValueError(""list length should be more than 3"")"
Write a Python program which accepts a sequence of comma-separated numbers from console and generates a list.,"numbers = input(""Please enter a sequence of comma-separated numbers:"")

num_list = numbers.split(',')

num_list = list(map(int, num_list))

print(num_list)"
Create a python program to take as input a list of strings and concatenate them into a single string.,"def concatenate_list(list):
    result = """"
    for item in list:
        result += item
    return result"
Suggest some improvements to the following Python program.,"def is_prime(x):
    if x < 2:
        return False
    elif x == 2:
        return True
    elif x % 2 == 0:
        return False
    else:
        for i in range(2, x):
            if x % i == 0:
                return False
        return True"
Generate a Python script which takes an integer as an argument and prints out the Fibonacci sequence upto the given integer.,"def fibonacci(n):
 a, b = 0, 1
 for _ in range(n):
   a, b = b, a+b
 return a
 
for i in range(1, 11):
 fib = fibonacci(i)
 print(fib)"
Write a Python program to optimize the given array such that its elements are in the range of 0 to 100.,"def optimize_array(arr):
    for i in range(len(arr)):
        # If the element is less than 0
        if arr[i] < 0:
            arr[i] = 0
        # If the element is greater than 100
        if arr[i] > 100:
            arr[i] = 100
    return arr

arr = [3, 105, -10, 35, 120]
print(optimize_array(arr))"
Create a REST API endpoint in Python to return a list of employees with their name and salary.,"import json

employees = [
 {'name': 'John', 'salary': 1000}, 
 {'name': 'Alice', 'salary': 2000},
 {'name': 'Bob', 'salary': 1500}
]

def get_employees():
 return json.dumps(employees)"
Create a Python program to compare two strings and determine which one is longer.,"def compare_string_length(str1, str2):
    if len(str1) > len(str2):
        return str1
    else:
        return str2"
Write a function in Python to check whether a given string is in lower case or not.,"def is_lowercase(string):
    for character in string:
        if character != character.lower():
            return False
    return True"
Generate a list of the first 10 Fibonacci numbers in Python.,"def fibonacci(n): 
    a = 0
    b = 1
    if n < 0: 
        print(""Incorrect input"") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2,n+1): 
            c = a + b 
            a = b 
            b = c 
        return b 
  
# Driver Program 
fib_list = [] 
for i in range(10):
   fib_list.append(fibonacci(i)) 

print(fib_list)"
Write a Python program that takes in a list of integerNums and returns a new list with elements which are divisible by 3.,"def divisible_by_3(intNums):
    result = []
    for i in intNums:
        if i % 3 == 0:
            result.append(i)
    return result

intNums = [3,4,6,9,10]
print(divisible_by_3(intNums)) # Output: [3, 6, 9]"
Write a Python program that takes a string and prints the frequency of each character in the string.,"# Frequency of each character in the string

string = ""Code Generation Task""

for i in string:
    print(""Number of Occurrence of"", i, ""is"", string.count(i))"
Create a Python script for replacing all the vowels in a string with underscores.,"def replace_vowels(string): 
    vowels = ('a', 'e', 'i', 'o', 'u') 
    for x in string.lower(): 
        if x in vowels: 
            string = string.replace(x, ""_"") 
    return string"
Write a function that gives profit amount if the given amount has profit else return none.,"def profit_amount(actual_cost,sale_amount): 
 if(actual_cost > sale_amount):
    amount = actual_cost - sale_amount
    return amount
 else:
    return None"
Construct a class in Python to represent a 2D point.,"class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    def get_x(self):
        return self.x
    def get_y(self):
        return self.y
    def is_origin(self):
        return self.x == 0 and self.y == 0
    def __str__(self):
        return 'Point(x = {}, y = {})'.format(self.x, self.y)"
Reverse a string via a Python function.,"def reverse_string(string):
    return string[::-1]

result = reverse_string(""Hello"")
print(result)"
Generate a Python program that uses the requests library to make a GET request to an API endpoint.,"import requests

# Make a get request to get the latest users
response = requests.get('https://jsonplaceholder.typicode.com/users')

# Get the response data as a JSON
data = response.json()

# Print the data
print(data)"
"Write a Python script that takes two string inputs, a first name and a last name and returns the full name.","def get_full_name(first, last):
  full_name = f""{first} {last}""
  return full_name

name = get_full_name(""John"", ""Smith"")
print(name)"
Create a Python program to make a web request to www.google.com and print the response body.,"import requests

response = requests.get('https://www.google.com')
print(response.text)"
Construct a Python list comprehension to generate a 3x3 matrix filled with integers from 1 to 9.,"matrix = [[i+(3*j) for i in range(1,4)] for j in range(3)]"
Write a Python program that takes a string as input and returns a list of words.,"def get_words(input_str):
    return input_str.split()

result = get_words(""The quick brown fox jumps over the lazy dog"")
print(result)"
Write a Python program to convert a list of numbers into a comma-separated string.,"def listToString(numbers):
 return ','.join(str(num) for num in numbers)

list = [7, 8, 9, 10]
result = listToString(list)

print(result)

# Output: '7,8,9,10'"
Write a function to find m number of multiples of n.,"def multiples_of_num(m,n): 
    multiples_of_num= list(range(n,(m+1)*n, n)) 
    return list(multiples_of_num)"
Construct a for loop in Python to generate a list containing the numbers from 0 to 9.,"my_list = []
for i in range(10):
 my_list.append(i)
print(my_list)
// Output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
Generate a code that will print out all substrings of a given string.,"def substrings(s):
    sub_str_list = []
    for i in range(len(s)):
        for j in range(i + 1, len(s)+1):
            sub_str = s[i:j]
            sub_str_list.append(sub_str)
    return sub_str_list

result = substrings(""python"")
print(result)"
Produce a program in Python to search for an element in a list,"# function to search an element  
# in a list 
def linear_search(list, x): 
    for index, element in enumerate(list): 
        if element == x: 
            return index 
    return -1"
Create a Python program which takes a list of integers and prints a list containing only those integers which have more than 2 occurrences in the input list.,"list = [1, 2, 3, 4, 5, 2, 3, 1, 6, 3]

def findDuplicates(list):
 result = []
 seen = set()
 
 for num in list:
 if num not in seen:
 seen.add(num)
 else:
 result.append(num)
 
 return result

print(findDuplicates(list))"
Generate a Python class called Circle that stores the radius of a circle and calculates the area.,"class Circle:

    def __init__(self, radius):
        self.radius = radius

    def calculateArea(self):
        return 3.14159 * self.radius * self.radius"
Create a Python program to calculate the sum of the following series: 1/3 + 3/5 + 5/7 + 7/9 + 9/11 +... + 95/97 + 97/99,"sum = 0

for num in range(1, 98, 2):
 n1 = num / (num + 2)
 sum += n1

print(sum)"
Design a program using Python that capitalizes the first letter of every word in a given string.,"def capitalize(string):
    words = string.split() 
    capitalized_words = [word[0].upper() + word[1:] for word in words]
    return "" "".join(capitalized_words)

print(capitalize(""this is a sentence""))"
Generate a code to convert Celsius to Fahrenheit in Python,"def celsius_to_fahrenheit(celsius):
    """"""
    Convert Celsius Temperature to Fahrenheit.

    Parameters:
        celsius (float): Temperature in Celsius
        
    Returns:
        Temperature in Fahrenheit
    """"""
    return celsius * 9/5 + 32"
Compose a python program to carry out the following purpose,"def is_palindrome(s):
	rev_s = s[::-1]
	
	if s == rev_s:
		return True
	else:
		return False"
Create a program in Python which takes in a user's name and prints out a customized greeting message.,"def greeting(name):
    '''This program will take in a user's name and prints out a customized greeting message.'''
    print('Hello, %s! Welcome!' % (name))

name = input('What is your name? ')
greeting(name)"
"Using Python, create a command line program to print out the frequency of a given string in a given text.","def countSubstring(text, string):
 count = 0
 for i in range(len(text)):
 if text[i:i+len(string)] == string:
 count += 1
 return count

print(countSubstring(text, string))"
Write a Python program to create a new list with only odd numbers.,"def get_odd_numbers(nums):
    odd_nums = []
    for num in nums:
        if num % 2 == 1:
            odd_nums.append(num)
    return odd_nums

nums = [1,2,3,4,5,6,7,8,9]
print(get_odd_numbers(nums))"
How would you construct a loop in Python to iterate over a list?,"In Python, you can use a ""for"" loop to iterate over a list. For example:
 
my_list = [1, 2, 3, 4, 5]
for x in my_list:
    print(x)

This will print each of the elements in the list on a new line."
Code a Python program that takes an array of integers and forms them into subarrays of length k.,"def form_subarrays(array, k):
    subarrays = []
    start = 0
    end = k
   
    # loop until all of the elements are placed in 
    # subarrays
    while start < len(array):
        subarrays.append(array[start:end])
        start += k
        end += k
    
    return subarrays"
"Create a function to lexicographically compare two strings in
Python.","def stringCompare(str1, str2):
    if str1 < str2: 
        return -1
    elif str1 > str2: 
        return 1
    else: 
        return 0

str1 = ""Hello""
str2 = ""World""

result = stringCompare(str1, str2)
if result == -1:
    print (""str1 is less than str2"")
elif result == 1:
    print (""str2 is less than str1"")
else:
    print (""str1 is equal to str2"")"
Create a Python script which inputs a sentence and performs POS tagging and letter count for the text using NLTK library.,"import nltk

sentence = 'This is an example sentence.'
words = nltk.word_tokenize(sentence)
tagged_words = nltk.pos_tag(words)

letter_count = 0
for word in words:
 letter_count += len(word)

print('POS Tags: ', tagged_words)
print('Letter Count: ', letter_count)"
Create a Caesar Cipher encryption method in Python.,"def caesar_cipher_encrypt(plain_text, shift): 
    cipher_text = """" 

    for char in plain_text: 
        if char == ' ': 
            cipher_text += char 
        elif  char.isupper(): 
            cipher_text += chr((ord(char) + shift - 65) % 26 + 65) 
        else: 
            cipher_text += chr((ord(char) + shift - 97) % 26 + 97) 
  
    return cipher_text"
Write a Python program to find the length of the longest increasing subsequence in a given array.,"def longest_increasing_subsequence(arr):
    length = len(arr)
    lis = [1] * length
    for i in range(1, length):
        for j in range(0, i):
            if arr[i] > arr[j] and lis[i] < lis[j] + 1:
                lis[i] = lis[j] + 1
    return max(lis)

result = longest_increasing_subsequence([3, 4, 2, 1, 7])
print(result)"
Develop a function to calculate the area of a circle using Python.,"def circle_area(radius):
    """""" 
    This function will calculate the area of a circle using the radius provided.
    """"""
    return math.pi * radius**2"
Generate code in Python to identify the type of an input number.,"if(type(100) == int):
    print(""It is an integer"")
elif(type(100) == float):
    print(""It is a float"")"
Generate a correct python code for implementing a stack,"class Stack: 
  
    def __init__(self): 
        self.items = [] 
  
    def isEmpty(self): 
        return self.items == [] 
  
    def push(self, item): 
        self.items.append(item) 
  
    def pop(self): 
        return self.items.pop() 
  
    def peek(self): 
        return self.items[len(self.items)-1] 
  
    def size(self): 
        return len(self.items)"
Create a python function that takes two inputs as a string and returns their concatenated output.,"def concat(a,b):
    return a+b"
Implement a function in Python to check if an element is in a given array.,"def element_in_array(arr, el):
    for item in arr:
        if item == el:
            return True
    return False"
Write a function to maximize the given two tuples.,"def maximize_elements(test_tup1, test_tup2):
  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) "
Create a base class in Python which serves as a parent class to other classes,"class BaseClass:
    def __init__(self):
        self.var1 = None
    
    def method1(self, var1):
        raise NotImplementedError"
Create a confidence-based voting system in Python.,"def confidence_voting(predictions):
 classifier_sum = 0
 total_confidence = 0
 for classifier, prediction in predictions.items(): 
     classifier_sum += prediction 
     total_confidence += (classifier_sum * prediction)
 return total_confidence/classifier_sum"
Create a function in Python to remove all the occurences of a given letter in a string.,"def remove_occurences(letter, string):
	return string.replace(letter, '')"
Write a python function to find the last position of an element in a sorted array.,"def last(arr,x,n):
    low = 0
    high = n - 1
    res = -1  
    while (low <= high):
        mid = (low + high) // 2 
        if arr[mid] > x:
            high = mid - 1
        elif arr[mid] < x:
            low = mid + 1
        else:
            res = mid
            low = mid + 1
    return res"
Write a Python program to filter strings linked by commas and return only strings longer than three characters in length.,"def filter_strings(string):
    strings = string.split(',')
    filtered = []
    for s in strings:
        if len(s) > 3:
            filtered.append(s)
    return filtered

filtered_strings = filter_strings(""Code,Generation,Task,Instructions"")
print(filtered_strings)"
Develop a Python generator to generate all prime numbers in range of 0 - 100.,"def generate_prime_numbers(n):
    for num in range(2, n):
        prime = True
        for i in range(2, num):
            if num % i == 0:
                prime = False
                break
        if prime:
            yield num

for prime_number in generate_prime_numbers(100):
    print(prime_number)"
Implement a Python script to flatten a list of lists.,"def flatten_list(list_of_lists):
    flattened = []
    for sub_list in list_of_lists:
        for item in sub_list:
            flattened.append(item)
    return flattened"
"In Python, write a code to validate an IPv4 address.","import re

def validate_ipv4_address(ip):
  """"""Validates an IPv4 address.""""""
  pattern = re.compile(r""^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"")
  return True if pattern.match(ip) else False

if __name__ == ""__main__"":
  ip = '1.2.3.4'
  valid = validate_ipv4_address(ip)
  print(valid)"
Write a function to remove all the words with k length in the given string.,"def remove_length(test_str, K):
  temp = test_str.split()
  res = [ele for ele in temp if len(ele) != K]
  res = ' '.join(res)
  return (res) "
Create a custom function in python to compute the total cost of an item.,"def compute_total_cost(price, quantity, shipping, tax):
    return price * quantity + shipping + tax"
Write a function to generate a 3x3 matrix in Python filled with random integers,"import random 
  
def generate_matrix():
    matrix = [[random.randint(1, 9) 
                for x in range(3)] 
                    for y in range(3)] 
  
    return matrix

result = generate_matrix()
print(result)"
Write a Python function to pass a number as a parameter and generate a table of the given size.,"def generate_table(n):
    # Generates a table with n columns and rows 
    for i in range(1, n+1):
        for j in range(1, n+1):
            print(i * j, end=""\t"")
        print()
 
generate_table(3)"
Generate an array in Python of size 25 containing only prime numbers.,"primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]"
Design a program in Python that deletes every third character from a given string.,"def delete_third_characters(str): 
  
    str_mod = """" 
    for i in range(0, len(str)): 
        if (i+1) % 3 != 0: 
            str_mod += str[i] 
    return str_mod"
Create a Python program for generating the nth Fibonacci number.,"def fibonacci(n): 
 if n == 0: 
 return 0
 elif n == 1: 
 return 1
 else:
 return fibonacci(n - 1) + fibonacci(n - 2)"
Create a Flask application for a blog in Python.,"# Import Flask Library
from flask import Flask

# Create Flask App
app = Flask(__name__)

# Routes
@app.route('/')
def index():
    return 'Welcome to my blog!'

@app.route('/posts')
def posts():
    return 'These are my posts!'

# Run Flask App
if __name__ == '__main__':
    app.run()"
Write a code to compare two complex numbers in Python.,"def compare_complex_numbers(z1, z2):
    if z1.real == z2.real and z1.imag == z2.imag:
        return 'z1 and z2 are equal'
    else:
        return 'z1 and z2 are not equal'"
Use the Python script below to generate a random sequence of 0s and 1s.,"def is_balanced(sequence):
 count = {0: 0, 1: 0}
 for bit in sequence:
 count[bit] += 1
 
 return count[0] == count[1]
 
sequence = generate_sequence(20)
balanced = is_balanced(sequence)

print(""Sequence:"", sequence)
print(""Balanced:"", balanced)"
Generate a Python program that will take two lists of integers as input and return a new list with the pairwise sums of the two inputs.,"def pairwise_sum(l1, l2):
    result = []
    for x, y in zip(l1, l2):
        result.append(x + y)
    return result

#Example Usage
list_1 = [1,2,3,4]
list_2 = [4,5,6,7]

sums = pairwise_sum(list_1, list_2)
print(sums) # [5,7,9,11]"
Write a Python function to split a given string into equal parts in a loop.,"def split_string(string):
    result = []
    for i in range(0, len(string), int(len(string) / 2)):
        result.append(string[i: i + int(len(string) / 2)])
    return result"
Write a python program that computes the sum of squares of all the elements of a list.,"def sum_sq_list(lst): 
    sum = 0  
    for i in lst: 
        sum += i * i 
    return sum"
Generate a program in python to capitalize the first letter of each word in a string.,"def capitalize(string):
    words = string.split()
    capitalized_words = [word.capitalize() for word in words]
    return "" "".join(capitalized_words)"
Write a function to remove lowercase substrings from a given string by using regex.,"import re
def remove_lowercase(str1):
  remove_lower = lambda text: re.sub('[a-z]', '', text)
  result =  remove_lower(str1)
  return (result)"
Implement a function in Python to determine the number of each character in a string.,"def count_characters(my_string):
    my_dict = dict()
    for character in my_string:
        if character in my_dict:
            my_dict[character] += 1
        else:
            my_dict[character] = 1
    return my_dict

String = ""Hello, World!""
print(count_characters(String)) # Output: {'H': 1, 'e': 1, 'l': 3, 'o': 2, ', ': 1, 'W': 1, 'r': 1, 'd': 1, '!': 1}"
"Using regular expression in Python, write a program to extract any birthday dates from a text.","import re

text = 'This is a text where I am talking about my birthday 4th October 2020'

pattern = r'\d{1,2}\s[A-Z][a-z]{2,8}\s\d{4}'

match = re.search(pattern, text)
if match:
    print(match.group())"
Modify the following python program to create a new list whose elements are a tuple with the values of both lists?,"list1 = [1, 2, 3, 4] 
list2 = [5, 6, 7, 8] 

#create an empty list
list3 = []

#iterate through each item in the two lists
for x, y in zip(list1, list2):
    #append each tuple as a single element in the new list
    list3.append((x, y))

print(list3)"
"Create a function in Python to calculate the average of a given list [9, 8, 7].","def calculate_average(lst): 
 sum = 0
 for el in lst: 
  sum += el
 return sum / len(lst) 
 
 avg = calculate_average([9, 8, 7]) 
 print(avg) 
# Output: 8.0"
Add a try-catch block to the given Python code,"try:
  x = 10
  y = 0
  z = x/y
except ZeroDivisionError:
  print(""ZeroDivisionError occurred: Cannot divide a number by 0"")"
Write a function to extract all the pairs which are symmetric in the given tuple list.,"def extract_symmetric(test_list):
  temp = set(test_list) & {(b, a) for a, b in test_list}
  res = {(a, b) for a, b in temp if a < b}
  return (res) "
Create a python program to find the sum of all non-negative integers less than a given number.,"def sum_non_negative_integers(n):
    total = 0
    for i in range(n): 
        if i > 0:
            total += i
    return total"
Write a Python program that takes two strings and returns their combined length.,"def combine_string_lengths(word1, word2): 
  return len(word1) + len(word2)"
Create a class in Python to model a circle.,"class Circle:
    def __init__(self, radius):
        self.radius = radius
    
    def area(self):
        return 3.14 * self.radius**2
    
    def circumference(self):
        return 2 * 3.14 * self.radius"
Create a program in Python that take two strings as input and determines if the two strings are anagrams.,"def is_anagram(s1, s2):
    s1_list = list(s1)
    s1_list.sort()
    s2_list = list(s2)
    s2_list.sort()

    if(s1_list == s2_list):
        return True
    else:
        return False"
Generate a random string using Python.,"import string
import random

def random_string(stringLength):
    letters = string.ascii_lowercase
    return ''.join(random.choice(letters) for i in range(stringLength))

print(random_string(10))"
Generate a Python code snippet for sorting an array of strings in ascending alphabetical order.,"def sort_words(words):
    # Sort the list in ascending alphabetical order.
    sorted_words = sorted(words)
    # Return the sorted list.
    return sorted_words
    
words = [""apple"", ""banana"", ""orange"", ""kiwi""]

sorted_words = sort_words(words)

print(sorted_words)"
"Given an integer input, write a Python program to find the maximum value of the input and print out the result.","input_list = [3, 5, 7]
 
max_value = max(input_list)
 
print(max_value) # prints 7"
Write a function to reverse strings in a given list of string values.,"def reverse_string_list(stringlist):
    result = [x[::-1] for x in stringlist]
    return result"
Create a Python program that extrapolates the most frequent word from a given text.,"from collections import Counter

def most_frequent_word(string):
    split_string = string.split("" "")
    counter = Counter(split_string)
    return counter.most_common(1)[0][0]

print(most_frequent_word(""This is an example of a text with some words""))"
"Define a class in Python that creates a person object with the name, age, and gender.","class Person:
    def __init__(self, name, age, gender):
        self.name = name
        self.age = age
        self.gender = gender

    def describe(self):
        print(f""Name: {self.name}, Age: {self.age}, Gender: {self.gender}"")

p = Person(""John"", 25, ""Male"")
p.describe()"
Compute the prime factors of a given number using Python.,"def primeFactors(num):
	for div in range(2, num // 2 + 1):
		while num % div == 0:
			print(div)
			num //= div
	if num > 1:
		print(num)

num = 24
primeFactors(num) // 2, 2, 2, 3"
Suggest an implementation for the following class declaration in Python.,"class Profile:
    def __init__(self, first_name, last_name, occupation):
        self.first_name = first_name 
        self.last_name = last_name 
        self.occupation = occupation 
        
    def full_name(self): 
        return self.first_name + "" "" + self.last_name"
"Create a function in Python that takes in a string and a character, and returns the number of occurrances of the character in the string.","def count_characters(string, char):
    count = 0
    for c in string:
        if c == char:
            count += 1
    return count"
Develop a solution in Python for combining two sorted arrays into a third sorted array.,"def combine_sorted_arrays(arr1, arr2):
    arr3 = arr1 + arr2
    arr3.sort()
    return arr3

arr1 = [1, 2, 5]
arr2 = [2, 4, 6]

arr3 = combine_sorted_arrays(arr1, arr2)
print(arr3)"
Create a Python program to generate the powers of two up to a given number.,"def powersOfTwo(n):
    powers = []
    for i in range(n + 1):
        powers.append(2**i)
    return powers

n = 8
print(powersOfTwo(n))"
Create a Python script that compares two lists and prints their differences.,"list1 = [1, 2, 3, 4] 
list2 = [2, 4, 6, 8]

list_diff = []

for i in list1:
    if i not in list2:
        list_diff.append(i)
        
for j in list2:
    if j not in list1:
        list_diff.append(j)
        
print(list_diff) # output: [1, 3, 6, 8]"
Create a Python program that uses a dictionary to convert Fahrenheit temperatures to Celsius temperatures.,"def fahrenheit_to_celsius(fahrenheit: float):
 """"""Converts Fahrenheit temperatures to Celsius""""""
 return (fahrenheit - 32) * 5/9

temperatures_in_celsius = {
 'Steven' : fahrenheit_to_celsius(98.6),
 'Thomas' : fahrenheit_to_celsius(99.8),
 'Nicole' : fahrenheit_to_celsius(100.4)
}

print(temperatures_in_celsius)"
Write a queue data structure from scratch using Python.,"class Queue:
    def __init__(self):
        self.items = []
    
    def isEmpty(self):
        return self.items == []
    
    def enqueue(self, item):
        self.items.insert(0,item)
    
    def dequeue(self):
        return self.items.pop()
    
    def size(self):
        return len(self.items)"
Implement a hash algorithm according to these specifications in Python.,"import hashlib

def generate_hash(string):
    hashed_string = hashlib.sha1(string.encode())
    return hashed_string.hexdigest()[:6]

hashed_string = generate_hash(""Code Generation Task Instructions"")
print(hashed_string)"
Generate a code in Python to extract the capital letters from a given string.,"def extract_capitals(string):
    capitals = """"
    for character in string:
        if character.isupper():
            capitals += character
    return capitals

# Main program
input_string = ""Hello World!""
capitals = extract_capitals(input_string)
print(capitals)"
Create a class that describes a robot in Python.,"class Robot:
    """"""This class describes a robot""""""
    def __init__(self, name, characteristics):
        self.name = name
        self.characteristics = characteristics

    def move(self):
        return ""Robot is moving.""

    def speak(self):
        return ""Robot is speaking."""
Generate a Python program to calculate the absolute difference between two given numbers.,"def absolute_difference(num1, num2):
 return abs(num1 - num2)"
Design a function in python to generate random numbers.,"import random

def generate_random():
    my_list = [random.randint(0,100) for i in range(5)]
    return my_list"
Create a program in Python to flatten a given array of arrays.,"def flatten_list(arr):
  result = []
  for element in arr:
    if type(element) == list:
      result += flatten_list(element)
    else:
      result.append(element)
  return result

arr = [[1,2,[3]],4]

print(flatten_list(arr)) # [1, 2, 3, 4]"
Suggest the python code for detecting the position of a character in a string.,"def position_of_char(string, char):
    '''This function will detect the position of a character in a string.'''
    return string.index(char)"
Write a Python program that prints a table of contents from a given list of headings.,"headings = [""Introduction"", ""Fundamentals"", ""Algorithms"", ""Design Patterns"", ""Conclusion""]

print(""Table of Contents"")
for i, heading in enumerate(headings):
  print(f""{i+1}.{heading}"")"
Convert a given string to an array of characters using Python.,"""""""
Convert a given string to an array of characters using Python
""""""

str = ""Hello World!""

list = []

for character in str:
    list.append(character)
    
print(list) #['H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd', '!']"
Write a Python program to remove all duplicate elements in a given list.,"def remove_duplicates(given_list):
    output = []
    for num in given_list:
        if num not in output:
            output.append(num)
    return output"
Create a Python program to check if a given string is an anagram or not. An anagram is a word that can be rearranged to form another word.,"def is_anagram(word1, word2):
    list_word1 = sorted(list(word1))
    list_word2 = sorted(list(word2))
    
    return list_word1 == list_word2"
Create a function in Python to check if a given list of numbers is in ascending or descending order.,"def check_order(lst):
  ascending = all(lst[i] < lst[i+1] for i in range(len(lst)-1))
  descending = all(lst[i] > lst[i+1] for i in range(len(lst)-1))
  if ascending:
    return 'ascending'
  elif descending:
    return 'descending'
  else:
    return 'not ordered'"
Create a simple web crawler in Python to count the number of words in a given website.,"# Imports
import requests
from bs4 import BeautifulSoup

# Function to crawl the website
def crawl_website(url):
	# Make a request to the website
	r = requests.get(url)

	# Parse the html
	soup = BeautifulSoup(r.content)

	# Retrieve all the text
	text = soup.get_text()

	# Count the number of words
	word_count = len(text.split())
	
	return word_count"
Create a REST API endpoint in Python that returns the user with the highest score.,"@app.route(""/get_top_user"", methods=[""GET""])
def get_top_user():
    user_list = Users.query.order_by(desc(Users.score)).first()
    return jsonify(user_list.serialize())"
"Design an algorithm in Python, that takes an array and sort it in ascending order.","def sort_ascending(array):
  array.sort()
  return array

sort_ascending([10, 3, 9, 1, 15, 2])  # [1, 2, 3, 9, 10, 15]"
Create a function in Python that returns the fibonacci series until the 10th index.,"def fibonacci_series(n): 
    # Creating an array to store fibonacci numbers till 10th index 
    fibonacci = [0, 1] 
      
    # Append the next number in the series till 10th index 
    while(len(fibonacci) < n + 1): 
        fibonacci.append(fibonacci[-1] + fibonacci[-2]) 
      
    # return the value at 10th index 
    return fibonacci[n]"
Create a function in Python to generate a multiplication table with numbers in a range given start and end parameters.,"def multiplication_table(start, end):
	for x in range(start, end + 1):
		for y in range(start, end + 1):
			print(x * y, end = ""  "")
		print(""\n"")
		
multiplication_table(start, end)"
Write a function to print the following pattern in Python.,"def print_pattern(n): 
  
    # outer loop to handle number of rows 
    for i in range(1,n+1): 
      
        # inner loop to handle number of columns 
        for j in range(1,i+1): 
          
            # printing stars 
            print('* ', end="""") 
       
        # ending line after each row 
        print(""\r"") 
  
# Driver Code 
n = 3
print_pattern(n)

Output:
* 
* * 
* * *"
Create a basic REST API using Python and Flask to list all the countries in the world.,"import flask
from flask import Flask, request, jsonify
import json

app = Flask(name)

@app.route('/countries', methods=['GET'])
def get_countries():
with open('data.json', 'r') as f:
 countries = json.load(f)
 return jsonify(countries)

if name == 'main':
 app.run()"
Write a python program to calculate the maximum of 3-d array and return the value.,"def calc_max(arr):
    max_val = arr[0][0][0]
    for i in range(len(arr)):
        for j in range(len(arr[i])):
            for k in range(len(arr[i][j])):
                if arr[i][j][k] > max_val:
                    max_val = arr[i][j][k]
    return max_val

print(calc_max(arr))"
"Create a Python dictionary named ``my_dict`` that associates the string ""John"" with the age 20 and the string ""Maria"" with the age 25.","my_dict = {
    'John': 20,
    'Maria': 25
}"
Compose a Python program to classify data,"def classify_number_data(data):
    numbers_below_15 = []
    numbers_above_15 = []

    for number in data:
        if number <= 15:
            numbers_below_15.append(number)
        else:
            numbers_above_15.append(number)
    
    return numbers_below_15, numbers_above_15"
Create a Python Flask application that takes a user input and generates a new text from the input.,"from flask import Flask

app = Flask(__name__)

@app.route('/', methods=['POST'])
def generate_newtext():
 input_text = request.form.get('input_text')
 
 new_text = input_text + "" She had wonderful adventures exploring the world around her and filled her days with joy.""
 
 return new_text
 
if __name__ == '__main__':
 app.run()"
Edit an existing Python program to remove a specific element from the list.,"my_list = ['abc', '123', '345']

if element in my_list:
    my_list.remove(element)"
Write a Python code snippet for encrypting a given string using secret key.,"import base64

def encrypt(key, string):
    enc = []
    for i in range(len(string)):
        key_c = key[i % len(key)]
        enc_c = chr((ord(string[i]) + ord(key_c)) % 256)
        enc.append(enc_c)
    return base64.urlsafe_b64encode("""".join(enc).encode()).decode()

encrypted_string = encrypt(secret_key, string)
print(encrypted_string)"
Generate a Python program to group a given list of strings into a dictionary based on the length of the string.,"words = [""apple"", ""cat"", ""robot"", ""fly"", ""revolution""]

words_by_length = {}

for word in words:
 length = len(word)
 if length not in words_by_length:
 words_by_length[length] = []
 words_by_length[length].append(word)"
Write a python function to count the pairs with xor as an even number.,"def find_even_Pair(A,N): 
    evenPair = 0
    for i in range(0,N): 
        for j in range(i+1,N): 
            if ((A[i] ^ A[j]) % 2 == 0): 
                evenPair+=1
    return evenPair; "
Construct a for-loop in Python to print the numbers from 1 to 10 (including 1 and 10).,"for i in range(1,11):
    print(i)"
Create a function in Python that counts the occurrence of a given character in a string.,"def count_occurrence(string, character):
    count = 0
    for c in string:
        if c == character:
            count += 1
    return count"
Modify the following Python program to make it run faster by optimizing the code.,"def find_2nd_largest(l):
  biggest = max(l)
  l.remove(biggest)
  2nd_biggest = max(l)
  return 2nd_biggest"
Construct a Regex expression in Python for matching two words in a sentence.,"import re

pattern = re.compile(r""\b(word1)\s(word2)\b"")"
Generate a Python list comprehension that creates a new list containing all the odd numbers between 0 and 10.,"odd_numbers = [x for x in range(0, 11) if x % 2 != 0]"
Suggest five different ways to optimize the following Python code.,"1. Use max() instead of looping through each item of array
2. Preallocate memory for max_value
3. Using in-built iterator 
4. Remove redundant statements from code
5. Use list comprehension instead of looping through each item of array"
Write a function to find the size of the given tuple.,"import sys 
def tuple_size(tuple_list):
  return (sys.getsizeof(tuple_list)) "
Write a python script to estimate the value of Pi to a specific degree of accuracy.,"def estimate_value_of_Pi_to_degree(n):
    use_below_formula = (22/7)*(10**n)
    return round(use_below_formula, n)

print (estimate_value_of_Pi_to_degree(7))"
Write a Python program that takes in a list of values and returns the maximum value.,"def get_maximum_value(lst):
    return max(lst)

print(get_maximum_value([1, 5, 2, 9, -2]))"
Create an algorithm in Python that receives an array of integers and returns an array with the unique values of the input array.,"def unique(arr): 
    uniq_arr = []
    for x in arr:
        if x not in uniq_arr: 
            uniq_arr.append(x) 
    return uniq_arr"
Design a solution in Python to identify all the words containing the given letter.,"def find_words_containing_letter(givenString, letter):
    words = givenString.split(' ')
    words_containing_letter = []

    for word in words:
        if letter in word:
            words_containing_letter.append(word)
    
    return words_containing_letter

print(find_words_containing_letter('Hello World', 'H'))"
Create a code snippet in Python to sort the following array in ascending order.,"def sort_ascending(arr):
    arr.sort()
    return arr

result = sort_ascending([5, 8, 2, 6])
print(result)"
Create a Python program that can turn a regular text phrase into a hex encoded form.,"def text_to_hex(text):
    hex_encoded = """"
    for i in text:
        hex_encoded += ((hex(ord(i)))[2:]).zfill(2) 
    return hex_encoded

print(text_to_hex(""Hello World""))"
Create a Python code snippet for querying a database and converting the data into a Pandas DataFrame.,"import pandas as pd
import sqlite3

conn = sqlite3.connect('example.db')

df = pd.read_sql_query(""SELECT name, age, gender, location FROM table_name"", conn)

conn.close()"
Write a function in Python to remove the last element from a given array.,"def remove_last_element(arr):
  return arr[:-1]"
Create a Python algorithm to identify the longest word in a sentence.,"def find_longest_word(sentence):
    words = sentence.split()
    # initialise longest_word variable with 0
    longest_word = 0
    for word in words:
        if len(word) > longest_word:
            longest_word = len(word)
            longest_word_str = word
    return longest_word_str"
Create a Python module that evaluates a given expression and returns the result,"def evaluate(expr):
    return eval(expr)"
Write a python program to calculate the Mean Squared Error (MSE) loss between the predicted output and the actual output.,"mse_loss = ((1-2)**2 + (2-3)**2 + (3-4)**2 + (4-5)**2 + (5-6)**2)/5
print(mse_loss)
# Output: 1.2"
Develop a Python class that represents a Date object.,"class Date:
    def __init__(self, day, month, year):
        self.day = day
        self.month = month
        self.year = year
    
    def get_date(self):
        return ""{}/{}/{}"".format(self.day, self.month, self.year)
    
    def set_date(self, day, month, year):
        self.day = day
        self.month = month
        self.year = year
        return self.get_date()"
Write a Python function to convert an Celsius temperature to Fahrenheit.,"def celsius_to_fahrenheit(celsius): 
    fahrenheit = celsius * 9/5 + 32
    return fahrenheit"
Write a Python code to implement a recursive binary search algorithm on a predefined sorted list.,"def binarySearch(arr, start, end, x): 
    if end >= start:  
        mid = start + (end - start) // 2 
        if arr[mid] == x: 
            return mid  
        elif arr[mid] > x: 
            return binarySearch(arr, start, mid - 1, x)  
        else: 
            return binarySearch(arr, mid + 1, end, x)  
    else: 
        return -1"
Write a function that takes two strings and returns a new string of the longest length.,"def longest_string(string1, string2):
    if len(string1) > len(string2):
        return string1
    else:
        return string2

longest_str = longest_string(""Python"", ""programming"")
print(longest_str)"
"Edit the following Python script to randomly select 10 numbers between 10 and 20, store them in the list lst, and print them out.","import random
lst = random.sample(range(10, 21), 10)
print(lst)"
Create a Python dictionary with key-value pair and print out the third value.,"my_dict = {""A"":1, ""B"":2, ""C"":3, ""D"":4}
print(my_dict[""C""])"
Write a Python program to automatically generate the HTML for a table from a dictionary of data.,"html_str = '<table><tr>'

for key in d:
 html_str += '<th>{}</th>'.format(key)
html_str += '</tr>'

for i in range(len(d['col1'])):
 html_str += '<tr>'
 for key in d:
 html_str += '<td>{}</td>'.format(d[key][i])
 html_str += '</tr>'

html_str += '</table>'

print(html_str)"
Generate a python program that takes an array as input and prints its elements in reverse order,"def reverse_array(lst):
  for i in reversed(lst):
    print(i)"
Create a vector of 10 random numbers in Python.,"import numpy as np

random_vector = np.random.random(10)
print(""Random Vector of size 10: \n"", random_vector)"
Develop a method in Python that takes a string as an input and outputs the number of vowels in the string.,"def vowel_count(string):
  count = 0
  vowels = 'aeiou'
  for char in string.lower():
    if char in vowels:
      count += 1
  
  return count

print(vowel_count(""Hello World""))"
Generate a python program to modify all the characters in a string to lowercase,"def to_lowercase(string):
    lowercase_string = """"
    for char in string:
        lowercase_string += char.lower()
    return lowercase_string

if __name__ == '__main__':
    string = ""HELLO WORLD""
    print(to_lowercase(string))"
Write a python program to add two matrices.,"def add_matrices(X, Y): 
  
    result = [[0, 0, 0], 
            [0, 0, 0], 
            [0, 0, 0]] 
  
    # iterate through rows 
    for i in range(len(X)): 
      
        # iterate through columns 
        for j in range(len(X[0])): 
            result[i][j] = X[i][j] + Y[i][j] 
  
    for r in result: 
        print(r)"
Write a Python program that processes a given list and returns a new list with all its duplicate elements removed.,"def remove_duplicates(a):
    new_list = []
    for i in a:
        if i not in new_list:
            new_list.append(i)
    return new_list

a = [1, 1, 2, 3, 3, 5]
b = remove_duplicates(a)
print(b) 

# Output: [1, 2, 3, 5]"
Create a Python code to switch the positions of two items in a given list.,"def switch_position(list, pos1, pos2):
    list[pos1], list[pos2] = list[pos2], list[pos1]
    return list"
Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.,"def is_Sum_Of_Powers_Of_Two(n): 
    if (n % 2 == 1): 
        return False
    else: 
        return True"
Create a python function that takes a list of numbers and returns their median.,"def get_median(lst):
    sorted_list = sorted(lst)
    len_list = len(lst)
    if len_list % 2 == 0:
        return (sorted_list[len_list//2 - 1] + sorted_list[len_list//2])/2
    else:
        return sorted_list[len_list//2]"
Create a command line calculator using Python,"import sys

def calculator():
    while True:
        try:
            expression = input('> ')
            result = eval(expression)
            print(result)
        except (SyntaxError, NameError):
            pass
        except (KeyboardInterrupt, EOFError):
            print('\nBye!')
            sys.exit()

if __name__ == '__main__':
    calculator()"
Rewrite the following code in a different programming language.,"# Python code
arr = [1, 2, 3, 4, 5]

for item in arr:
 print(item * 2)"
Write a python code to extract the year from a string.,"import re

string = ""This movie was released in 1980""

# search for substring of 4 digits
result = re.search(r'\d{4}', string)

# print the year
if result:
    print(result.group())"
Create a block of code for a Python program to generate a multiplication table for a given number.,"# Create a multiplication table for a given number
num = 6

# Loop to generate the table
for i in range(1, 11):
  print(f'{num} x {i} = {num * i}')"
Write a function in Python to find the first non-repeating character in a given string.,"def non_repeating_char(s):
    char_freq = {}
    for c in s:
        if c in char_freq:
            char_freq[c] += 1
        else:
            char_freq[c] = 1
    
    for c in s:
        if char_freq[c] == 1:
            return c

if __name__ == '__main__':
    print(non_repeating_char(""the quick brown fox jumps over the lazy dog""))"
Write a Python function to convert a list of characters to their corresponding ASCII codes.,"def to_ascii(arr):
    res = []
    for c in arr:
        res.append(ord(c))
    return res

print(to_ascii(['a', 'b', 'c', 'd']))"
"Using the input, generate a python program to count the number of times a specific word appears in a sentence or a paragraph.","def count_word(sentence, word):
    words = sentence.split(' ')
    return words.count(word)"
Generate a Python script to shuffle the elements in a list.,"import random

list = [5, 2, 7, 1, 8]
random.shuffle(list)

print(list) # Output -> [1, 8, 5, 2, 7]"
Write a Python function to insert an element in a given list after a given index.,"def insert_element(list, index, element):
    list.insert(index + 1, element)
    return list"
Write a Python script to generate a random linear sequence.,"import random

# generate the sequence
sequence_length = 10
sequence = [] 
for i in range(sequence_length):
  sequence.append(random.randint(1, 10))

print(sequence)"
Create a web application in Python that displays a directory structure tree for a given path.,"import os

def make_tree(path): 
 files = os.listdir(path) 
 for f in files: 
     full_path = os.path.join(path, f) 
     if os.path.isdir(full_path): 
         print(f) 
         make_tree(full_path) 
     else: 
         print("" -"" + f) 
  
path = '/home/myUser/myFolder' 
make_tree(path)"
Generate a python script to perform this action.,"def remove_duplicates(string): 
    result = """" 
    prev = '' 

    for char in string:
        if char != prev: 
            result += char
            prev = char
    return result

result = remove_duplicates(""AAABBCCCD"")
print(result)"
Create a Python program to print out the powers of 2 up to the input number n.,"def print_powers_of_2(n):
    result = []
    for i in range(n+1):
        result.append(2**i)
    return result"
Implement an optimization algorithm in Python to find the local minima of a given function f(x).,"def objective_function(x):
 return x**2 + 6*x - 4

def find_local_minima(func):
 x = 0
 delta = 0.01

while True:
 x_new = x + delta
 if objective_function(x_new) < objective_function(x):
 x = x_new
 else:
 return x

print('The local minima is', find_local_minima(objective_function))"
Generate a function that can be used to sort a given Python list in ascending order,"def sort_asc(lis):
    for i in range(len(lis)):
        for j in range(i + 1, len(lis)):
            if lis[i] > lis[j]:
                lis[i], lis[j] = lis[j], lis[i] 
    return lis"
"Given a list of numbers, write a Python program to check if any two numbers in the list add up to a given target number.","def find_two_add_up_to_target(nums, target): 
    for num1 in nums:
        for num2 in nums:
            if num1 + num2 == target:
                return True
    return False"
Identify any errors in the following Python code.,"The code is incorrect because it is missing the colon at the end of the loop statement. 
It should be 'for num in numbers:' instead of 'for num in numbers'."
Generate a Python code to implement the classic Tower of Hanoi problem.,"def tower_of_hanoi(n, from_rod, to_rod, aux_rod): 
    if n == 1: 
        print(""Move disk 1 from rod"",from_rod,""to rod"",to_rod) 
        return
    tower_of_hanoi(n-1, from_rod, aux_rod, to_rod) 
    print(""Move disk"",n,""from rod"",from_rod,""to rod"",to_rod) 
    tower_of_hanoi(n-1, aux_rod, to_rod, from_rod)"
Write a Python program to compare two strings to determine which string would appear first in alphabetical order.,"string1 = ""hello""
string2 = ""world""

if string1 < string2:
    print(string1 + "" comes before "" + string2 + "" alphabetically"")
else:
    print(string2 + "" comes before "" + string1 + "" alphabetically"")"
Write a python function to find a pair with highest product from a given array of integers.,"def max_Product(arr): 
    arr_len = len(arr) 
    if (arr_len < 2): 
        return (""No pairs exists"")           
    x = arr[0]; y = arr[1]      
    for i in range(0,arr_len): 
        for j in range(i + 1,arr_len): 
            if (arr[i] * arr[j] > x * y): 
                x = arr[i]; y = arr[j] 
    return x,y    "
"Write a Python program to generate a random password consisting of lowercase alphabets, numerical digits and special characters.","import string
import random

def generate_password(length):
 password_characters = string.ascii_lowercase + string.digits + string.punctuation
 password = ''.join(random.choice(password_characters) for i in range(length))
 return password"
Develop a method in Python for removing all duplicate elements from an array.,"def removeDuplicates(arr): 
    newArr = []
    for i in arr: 
        if i not in newArr: 
            newArr.append(i) 
    return newArr

arr = [1, 3, 5, 4, 6, 3, 5, 4]
result = removeDuplicates(arr)
print(result)"
Create a web scraper in Python to get the price of a given product from an e-commerce website.,"import requests
from bs4 import BeautifulSoup 

# Request page
 URL = 'https://example.com/product' 
 page = requests.get(URL)

# Parse page 
soup = BeautifulSoup(page.content, 'html.parser')

# Extract the price 
price = soup.find(""span"", class_=""price"").get_text()
print(""Price of the product is: "",price)"
Create a Python program to calculate the average of all the ratings in the given list of tuple.,"def avg_rating(ratings):
    total = 0
    for rating in ratings:
        total += rating[0] + rating[1]
    return total / (len(ratings)*2)"
Write a Python loop to print the numbers between 2 and 10 (inclusive).,"for i in range(2, 11):
    print(i)"
"Write a Python code snippet to generate a random number in the range of 1 to 10, inclusive.","import random

random_number = random.randint(1, 10)
print(f""Random number between 1 and 10: {random_number}"")"
Develop a function in Python that takes in a list and sorts the elements alphabetically.,"def sort_list(my_list):
  my_list.sort()
  return my_list 

print(sort_list(my_list))"
Write a function in Python that takes a list of words and returns a list of numbers corresponding to the length of each word.,"def get_word_lengths(words):
    # initialize empty list 
    lengths = [] 
  
    # iterate over the list of words
    for word in words: 
        # append the length of each word to lengths              
        lengths.append(len(word)) 
  
    # return the list of lengths
    return lengths"
Take the following Python code and refactor it using list comprehensions.,"arr = [1, 2, 3, 4, 5, 6] 
new_arr = [i**2 for i in arr if i % 2 == 0]"
Generate a Python program to edit a given list of strings and remove the duplicates in-place.,"list = [""AB"", ""AC"", ""AB"", ""CD"", ""AC""]

seen = set()
res = []

for item in list:
    if item in seen:
        continue
    seen.add(item)
    res.append(item)

list[:] = res

print(list)"
Create a python program to include a web-page rendering feature.,"import webbrowser

url = ""www.example.com""
webbrowser.open(url)"
Generate a correct Python program that implements a depth-first search algorithm.,"def dfs(graph, node, visited):
    if node not in visited:
        visited.append(node)
        for n in graph[node]:
            dfs(graph, n, visited)
    return visited"
"In Python, create a function to find the difference in number of a's and b's in a string.","def countDifference(s): 
   a_count = 0
   b_count = 0
   for i in range(len(s)):  
       if (s[i] == 'a'): 
           a_count = a_count + 1
       elif (s[i] == 'b'): 
           b_count = b_count + 1
   diff = a_count - b_count
   return diff

print(countDifference('abcdba'))"
Analyze a given text to extract the entities(with their type) in the text using a Python script.,"import spacy

text = ""The President Barack Obama was born in Hawaii.""

nlp = spacy.load(""en_core_web_sm"")
doc = nlp(text)

for entity in doc.ents:
    print(f""{entity.text} ({entity.label_})"")

Output: 
The President (ORG)
Barack Obama (PERSON)
Hawaii (GPE)"
"Use regex in a Python program to find all instances of the word ""the"".","import re

string = 'The quick brown fox jumps over the lazy dog'

# Prints matches
matches = re.findall('the', string, re.IGNORECASE)
print(matches)"
"Create a Python script that given a list of numbers, multiplies each number by two and prints out the resulting list.","def multiply_by_two(numbers):
result = []
for num in numbers:
 result.append(num * 2)
return result

numbers = [1, 5, 8, 10]
print(multiply_by_two(numbers))
# Outputs: [2, 10, 16, 20]"
Create a Python script that takes a list of strings as an input and prints the length of each string in the list.,"words = ['dog', 'cat', 'spring', 'summer']
for word in words:
    print(len(word))"
Design an algorithm in Python that takes in a list of numbers and prints out the first and last element in the list.,"def first_last(lst):
    first_element = lst[0]
    last_element = lst[-1]
    return [first_element, last_element]

print(first_last([5,3,1,7,9]))"
Rewrite the following Python code to improve readability and to simplify the code,"for start in range(10):
  print(start)"
Generate a Python list containing the first 10 odd numbers.,"odd_nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]"
Replicate an existing 3D plotting library in Python.,"def Plot3D(x, y, z): 
    fig = plt.figure() 
    ax = plt.axes(projection =""3d"") 
    ax.plot3D(x, y, z) 

def MeshGrid(x, y, z): 
    fig = plt.figure() 
    ax = plt.axes(projection =""3d"") 
    ax.plot_surface(X, Y, Z) 

def Show(): 
    plt.show()"
Create a Python script for calculating the Fibonacci sequence for the given number.,"def fibonacci_sequence(n):
 a, b = 0, 1
 for i in range(n):
 a, b = b, a + b
 return a"
Generate two for loops that would execute concurrently in Python.,"for i in range(0, n):
    for j in range(i + 1, n):
        # Do some processing"
Create a Python program that takes a list of strings and filters out strings that do not contain the letter 'a'.,"# Filtering out strings without letter 'a'
filtered_words = [word for word in words if 'a' in word]

# Print the filtered list
print(filtered_words)
# Output: ['apple', 'banana', 'grape']"
Create a program in Python to find the total number of words in a text,"def word_total(text):
    words = text.split("" "")
    word_count = len(words)
    return word_count"
Write a Python program that takes in a string and returns the reverse of it.,"def reverse_string(string):
    return string[::-1]"
Write a Python code to determine if the user has enough money in the account for a given transaction.,"def enough_balance(balance, amount):
    if amount > balance:
        return False
    return True

if __name__ == '__main__':
    print(enough_balance(balance, amount))"
Write a function to check whether all items of a list are equal to a given string.,"def check_element(list,element):
  check_element=all(v== element for v in list)
  return check_element"
Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.,"def sample_nam(sample_names):
  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))
  return len(''.join(sample_names))"
Optimize this Python code to make it more efficient.,"def count_numbers(lst):
    count = sum(map(str.isdigit, lst))
    return count"
Write a function to find the sequences of one upper case letter followed by lower case letters.,"import re
def text_uppercase_lowercase(text):
        patterns = '[A-Z]+[a-z]+$'
        if re.search(patterns, text):
                return 'Found a match!'
        else:
                return ('Not matched!')"
Generate code in Python to find all unique elements in a list.,"original_list = [1, 2, 5, 2, 4, 1]
unique_list = []

for item in original_list:
    if item not in unique_list:
        unique_list.append(item)

print(unique_list)"
Write a Python program to calculate the compound interest.,"def compoundInterest(investment_amount, rate_of_interest, time):
    compound_interest = investment_amount * (pow((1 + rate_of_interest / 100), time))
    return compound_interest

ci = compoundInterest(1000, 5, 5)
print(ci)"
Optimize the following python code to make it run faster.,"def sum_of_squares(n):
    # Use summation formula to optimize the code
    return (n * (n + 1) * (2 * n + 1)) // 6"
Generate a python program to extract all the words starting with a given letter,"def extract_words(word_list, given_letter):
    extracted_words=[]
    for word in word_list:
        if word[0]==given_letter:
            extracted_words.append(word)
    return extracted_words"
Create a class in Python that extends the built-in list object.,"class MyList(list):
  def __init__(self):
    super().__init__()
  def some_method(self):
    pass"
Write a python function to find the product of non-repeated elements in a given array.,"def find_Product(arr,n): 
    arr.sort() 
    prod = 1
    for i in range(0,n,1): 
        if (arr[i - 1] != arr[i]): 
            prod = prod * arr[i] 
    return prod; "
Generate a function in Python to count the number of words in a given sentence.,"def count_words(sentence):
    words = sentence.split(' ')
    return len(words)

print(count_words(""Hello there"")) # Output: 2"
Design a web service in Python that takes two parameters: a list and an operation.,"def web_service(list, operation):
  if operation == ‘sum':
    sum = 0
    for i in list:
      sum += i
    return sum
  elif operation == 'mean':
    return sum(list) / len(list)"
Create a code in Python to check if the number provided is a prime number,"def is_prime(num): 
    if num <= 1: 
           return False
    for i in range(2, num): 
           if num % i == 0: 
               return False
    return True"
Improve the performance of this Python function by adding caching or other techniques.,"import functools

@functools.lru_cache(maxsize=None)
def add_two_numbers(n1, n2):
 return n1 + n2"
Create a Python program that searches a list of words for a given pattern.,"pattern = ""ca*""

found_words = []

for word in words:
    if fnmatch.fnmatch(word, pattern):
        found_words.append(word)

print(found_words)

# Output: [""cat"", ""camel""]"
Create a function in Python to print the first n numbers of the Fibonacci series.,"def Fibonacci(n): 
 a = 0
 b = 1
if n<0: 
 print(""Incorrect input"") 
elif n==0: 
 print(a) 
elif n==1: 
 print(b) 
else: 
 print(a)
 print(b)
 for i in range(2,n): 
 c = a + b 
 a = b 
 b = c 
 print(b)"
Write a function to check if a year is a leap year using Python.,"def isLeapYear(year):
""""""
Returns True if year is a leap year and False othwerwise.
""""""

if (year % 400 == 0):
    return True
elif (year % 100 == 0):
    return False
elif (year % 4 == 0):
    return True
else:
    return False"
Create an endpoint in a Python Flask application to retrieve a list of users from a database.,"from flask import Flask, jsonify
import sqlite3

app = Flask(__name__)

@app.route('/users')
def get_users():
 conn = sqlite3.connect('example.db')
 c = conn.cursor()

 c.execute('SELECT * FROM users')
 users = c.fetchall()

 return jsonify(users)

if __name__ == '__main__':
 app.run()"
Optimize the python code below for memory efficiency.,my_list = [i**2 for i in range(20)]
Create a Python program to generate a table with 20 rows and 10 columns.,"import pandas as pd

table = pd.DataFrame(columns=[str(i) for i in range(10)], index=range(20))
print(table)"
Write a python program to iterate over two lists and print only the common items.,"list1 = [1, 2, 3, 4, 5]
list2 = [4, 5, 6, 7, 8]

for i in list1:
  if i in list2: 
    print(i)"
Generate a Python program that can take any type of input and return 'Valid' or 'Invalid'.,"def check_input(data):
    if type(data) in [int, str, list, dict, set]:
        return 'Valid'
    else:
        return 'Invalid'"
Write a Python program to convert ratings in a list of strings to a float.,"def str_to_float(ratings):
    return [float(x) for x in ratings]"
Create a Python script for cleaning up text and removing non-alphabetic characters.,"import re

text = ""This text contains some non-alphabetic characters, like “%.”""

clean_text = re.sub(r'[^a-zA-Z ]', '', text)

print(clean_text)

# Output: This text contains some alphabetic characters"
Develop a program in Python to calculate the Fibonacci sequence.,"def fibonacci(n): 
    a = 0
    b = 1
    if n < 0: 
        print(""Incorrect input"") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2,n): 
            c = a + b 
            a = b 
            b = c 
        return b 

# Driver Code 
print(fibonacci(9))"
Write a Python program to fetch the current weather data from OpenWeatherMap API using GET request.,"import requests

# API Key and location Id
apiKey = 'your_api_key'
locationId = 'your_location_id'

# Make the request to the API
r = requests.get('http://api.openweathermap.org/data/2.5/weather?id='+locationId+'&appid='+apiKey)

# Get the data
data = r.json()

# Print the data
print(data)"
Define a sorting algorithm in Python that sorts numbers in ascending order.,"def sort(A):
    A_len = len(A)

    for i in range(A_len):
        for j in range(A_len - i - 1):
            if A[j] > A[j+1]:
                A[j], A[j+1] = A[j+1], A[j]

    return A

sort([3, 7, 5, 4, 1]) # Outputs [1, 3, 4, 5, 7]"
"Create a class in Python to represent a real-world employee object. This class should contain attributes like name, ID, and salary.","class Employee:
 def __init__(self, name, ID, salary):
 self.name = name
 self.ID = ID
 self.salary = salary

employee = Employee('John', '123456', 50000)"
Create a Python class that takes a string and reverses it.,"class ReverseString:
    def __init__(self, s):
        self.s = s 

    def reverse(self):
        return self.s[::-1]

my_string = ReverseString('Hello World!')
print(my_string.reverse())"
Generate a Python code to print the frequencies of the characters of a given string.,"freq={}
for ch in ""Hello World!"":
 if ch in freq:
 freq[ch] +=1
 else:
 freq[ch] = 1

for key, value in freq.items():
 print(""{}:{}"".format(key,value))"
Write a Python code to prompt the user for a word and then search for it in a  dictionary,"word = input(""Please enter a word: "")
dictionary = [""apple"", ""banana"", ""orange"", ""grapes""]

if word in dictionary:
    print(""The word is found in the dictionary."")
else:
    print(""The word is not found in the dictionary."")"
Write a Python program to detect duplicate values in a list.,"seen = set()
duplicates = []
for item in my_list:
 if item in seen:
 duplicates.append(item)
 else:
 seen.add(item)

print(duplicates)
# Output: [3, 5]"
Can you construct a python program to generate the Fibonacci series of size 10?,"def generateFibonacciSeries(n): 
  
    # Create an array with 0 and 1
    fibArray =[0, 1] 
  
    counter = 2
    while counter < n: 
        fibArray.append(fibArray[counter-1] + fibArray[counter-2]) 
        counter+=1
  
    return fibArray

n = 10
print(generateFibonacciSeries(n))"
Write a function in Python to select the 3rd character from each string in the given list.,"def third_char(lst):
 third_chars = """"
 for word in lst:
 third_chars += word[2]
 return third_chars

third_char(['IronMan', 'Hulk', 'Thor', 'Captain America'])"
Write a Python function to detect if a given string contains any vowels.,"def contains_vowels(string):
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    for char in string:
        if char in vowels:
            return True
    return False

print(contains_vowels("" hello, how are you""))"
Rewrite the following python code to be more concise while still producing the same output.,"for i in range(10):
 print(""------------\n""*10)"
Find the smallest number in the given list without using any built-in Python functions or sorting.,"def find_smallest(arr):
    smallest = None
    for n in arr:
        if smallest is None or n < smallest:
            smallest = n
    return smallest
    
arr = [8, 3, 9, 5, 1]
smallest = find_smallest(arr)
print(smallest)"
Develop a function in Python which takes an input array of strings and returns a dictionary with the strings stored in their reverse order.,"def reverseStrings(arr):
  revDict = {};
  for str in arr:
    revDict[str[::-1]] = str;
  return revDict;

reverseStrings([""Hello"", ""World""]); // Outputs: {'olleH': 'Hello', 'dlroW': 'World'}"
Write a Python program to optimize an equation to find the minimum value.,"import numpy as np
from scipy.optimize import minimize

def equation(x):
    return x**5 + 5*x**4 - 10*x**3 - 40*x**2 + 81*x 

results = minimize(equation, [0])
minx = results.x
miny = results.fun

print('The minimum value of f(x) is {:.2f} when x={:.2f}.'.format(miny, minx))"
Write a Python class to represent a rectangle with length and width variables and a method to calculate the area.,"class Rectangle:
  def __init__(self, length, width):
    self.length = length
    self.width = width

  def calculate_area(self):
    return self.length * self.width

rect = Rectangle(3, 4)
print(rect.calculate_area())"
Generate a stack class in Python,"class Stack(object):

    def __init__(self):
        self.items = []

    def isEmpty(self):
        return self.items == []

    def push(self, item):
        self.items.append(item)

    def pop(self):
        return self.items.pop()

    def peek(self):
        return self.items[len(self.items)-1]

    def size(self):
        return len(self.items)"
Write an invitation program in Python for a birthday party.,"def invite_guests(guests):
    for guest in guests:
        print(""Dear ""+ guest + "", You are invited to my birthday party!"")"
Create a basic scoring engine in Python that takes two numbers and returns the higher of the two.,"def higher_number(num1, num2):
 if num1 > num2:
 return num1
 else:
 return num2

print(higher_number(5, 6)) # 6"
Generate Python code to filter a given list of numbers such that only the odd numbers are removed.,"def filter_odd(list):
    return [num for num in list if num % 2 == 0]"
"Write a Python program to convert the list of characters ['a', 'b', 'c', 'd'] into a string of the form ""a-b-c-d"".","def list_to_string(lst):
  return '-'.join(lst)
  
result = list_to_string(['a', 'b', 'c', 'd'])
print(result) # 'a-b-c-d'"
"Write a function in Python that takes a single argument, a list of numbers, and returns a single number - the sum of all the numbers in the list.","def add_list(numbers):
  total = 0
  for number in numbers:
      total += number
  return total"
"Create a function in Python to convert a hexadecimal string (e.g. ""0xBA"") to a binary string (e.g. ""10111010"").","def hex_to_binary(hex_str):
    # convert hex to int 
    num = int(hex_str, 16)
    # convert int to binary string
    bin_str = bin(num)[2:]
    
    return bin_str

print(hex_to_binary(""0xA2""))
# Output: ""10100010"""
Create a Python script that finds the longest word in a given array of words.,"#  find the longest word
def findLongestWord(arr):
  
 longestWord = """"
 
 for word in arr:
 if(len(word) > len(longestWord)):
 longestWord = word
 
 return longestWord

# Driver code
words = ['Python', 'JavaScript', 'C++', 'Java', 'Kotlin']
print(""Longest word in the array is ""+ findLongestWord(words))"
Write a Python function to check whether a year is leap year or not.,"def is_leap_year(year):
  if (year % 4 == 0):
  if (year % 100 == 0):
      if (year % 400 == 0):
          return True
      else:
          return False
  else:
      return True
  else:
      return False

year = int(input(""Enter a year: ""))

if is_leap_year(year):
  print(year, ""is a leap year"")
else:
  print(year, ""is not a leap year"")"
"Use the inputs provided, write Python code to check if two integers are equal.","if int(10) == int(10):
    print(""The two integers are equal"")
else:
    print(""The two integers are not equal"")"
Categorize each code snippet into the appropriate programming language.,"Code snippet 1: Python
Code snippet 2: C/C++"
Write a Python program to flatten a nested list.,"def flatten_list(lst):
    return [item for sublist in lst for item in sublist]"
Create a python loop to reduce a list of data points to their averages.,"def averageList(arr):
    '''This function takes in an array and returns the average of all elements'''
    # initialize sum
    s = 0
    # traverse the array
    for i in arr:
        s += i
    # calculate average
    avg = s / len(arr)
    # return the average
    return avg

# Test
arr = [1, 2, 3, 4]
print(averageList(arr))
# Output 2.5"
Develop an algorithm to remove the duplicate words in a given string.,"def remove_duplicates(string): 
    words = string.split("" "") 
    res = [] 
    for word in words: 
        if word not in res: 
            res.append(word) 
    return ("" "".join(res)) 

string = ""I love coding love coding Python""
res = remove_duplicates(string) 
print(""String after removing duplicates:"")
print(res)"
Write a Python script to compare two strings and print the longer string.,"def get_longer_string(string1, string2):
    if len(string1) > len(string2):
        return string1
    else:
        return string2

longer_string = get_longer_string(""Hello"", ""World"")
print(longer_string)"
Implement a basic sorting algorithm for an array of strings in Python.,"def sort_array(arr):
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if arr[j] < arr[i]:
                arr[i], arr[j] = arr[j], arr[i]
    return arr"
Build a python program that reads in two strings and combines them into a single string.,"def combine_strings(string1, string2):
    combined_string = string1 + string2
    return combined_string"
Create a Bash script to run a python program in the background.,"#!/bin/bash

# Run the python program in the background
python myscript.py &

# Print the process id
echo ""Process id: $!""

# Wait for a keypress
read -p ""Press any key to exit""

# Kill the process
kill $!"
Develop a function in Python that converts Celsius to Fahrenheit.,"def celsiusToFahrenheit(celsius): 
    return (celsius * 1.8) + 32"
Create a Python script to sort a list of integers from lowest to highest.,"def sort_list(list):
  # loop through the list
  for i in range(len(list)):
    # find the smallest number in the list
    lowest = min(list[i:])
    # find its index
    lowest_index = list.index(lowest)
    # swap the numbers
    list[i], list[lowest_index] = list[lowest_index], list[i]
  # return the sorted list  
  return list

print(sort_list([3, 5, 1, 7, 4, 2]))"
"Design a function in Python that takes in two parameters, x and y, and returns the sum of squares of those parameters (x^2 + y^2).","def sum_of_squares(x, y):
  return x**2 + y**2"
Suggest a Python solution to convert a number in base-2 to a string.,"def bin_to_string(bin_num):
    bin_string = bin(bin_num)[2:]
    return bin_string"
Generate an array of random integers between 10-20 with a length of 50 using Python.,"import random

random_array = random.sample(range(10,20), 50)
print(random_array)"
Write a Python program to print the following output pattern,"for i in range(1,6):
    for j in range(1,i+1):
        print(j, end="""")
    print()"
Write a Python program to search for a specific word in a given string and return the number of times the string appears.,"string = ""Hello, world! This is a sample message.""
word = ""hello""

count = string.lower().split().count(word.lower())
print(f""The word {word} appears {count} times in the given string."")"
Create a Python script to generate a random list of integers of the specified length.,"import random

def generate_list(length):
    lst = []
    for i in range(length):
        lst.append(random.randint(0, 100))
    return lst"
Generate a Python program that can verify if a given sentence is correct or misspelled.,"import re

def spell_check(sentence):
  words = re.findall(r'\w+', sentence)
  for word in words:
    if not word.lower() in dict:
        return False
  return True

sentence = ""This is my new computer""
result = spell_check(sentence)
if result:
    print('Correct spelling')
else:
    print('Incorrect spelling')"
Create a user-defined function in Python for finding the sum of squares of three numbers.,"def sumOfSquares(a, b, c):
     return a*a + b*b + c*c"
Create a function in Python that takes two integers and returns the larger with the smaller one as its divisor.,"def get_larger_number_divisible_by_smaller(num1, num2):
  max_num = max(num1, num2)
  min_num = min(num1, num2)

  return max_num if max_num % min_num == 0 else None

result = get_larger_number_divisible_by_smaller(10, 20)
print(result) # 20"
Write a python script to print the nth Fibonacci number.,"""""""
Python script to print the nth Fibonacci number
""""""

def fibonacci(num):
    a, b = 0, 1
    for _ in range(num):
        a, b = b, a+b
    return a

num = int(input(""Enter a number: ""))
print(""The Fibonacci number at position {0} is {1}"".format(num, fibonacci(num)))"
Create an AI anomaly detection tool in Python,"import numpy as np
import matplotlib.pyplot as plt

from sklearn.covariance import EllipticEnvelope


def outlier_detection(x):
    '''Detect outliers using EllipticEnvelope'''

    clf = EllipticEnvelope(contamination=0.45) # Set contamination param
    clf.fit(x) # Fit algorithm
    pred = clf.predict(x) # Predict labels

    outliers = x[pred == -1] # outliers

    return outliers"
Generate code to calculate the factorial of a given number using Python,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)"
Create a Python script to remove all punctuation from a string.,"import string

# Define the input string
inp_str = ""A text containing punctuation marks.""

# Remove all punctuation
out_str = inp_str.translate(str.maketrans('', '', string.punctuation))

print(out_str) # Output: A text containing punctuation marks"
Create a web API in Python to get records from a database table.,"from flask import Flask, request, jsonify
import sqlite3

app = Flask(name)

@app.route('/api/v1/employees', methods=['GET'])
def get_employees():
 conn = sqlite3.connect('employees.db')
 cur = conn.cursor()
 data = cur.execute('SELECT * from employee').fetchall()
 conn.close()
 return jsonify(data)

if name == 'main':
 app.run(debug=True)"
Which python library can be used to access the Twitter API?,"The most popular Python library to access the Twitter API is the ""tweepy"" library. It provides a convenient way to access the Twitter API and provides features such as searching, streaming, and user authentication."
Write a function to find the difference of first even and odd number of a given list.,"def diff_even_odd(list1):
    first_even = next((el for el in list1 if el%2==0),-1)
    first_odd = next((el for el in list1 if el%2!=0),-1)
    return (first_even-first_odd)"
"Create an algorithm in Python that given a number, returns whether the number is prime or not.","def is_prime(n):
 if n == 1:
 return False

 for i in range(2,n):
 if n % i == 0:
 return False

 return True

n = 11
print(is_prime(n)) # Output: True"
Create an algorithm in Python to merge multiple dictionaries,"def merge_dicts(dicts):
    results = {}
    for d in dicts:
        results.update(d)
    return results"
Write a function to find if the given number is abundant or not.,"import math 
def get_sum(n): 
	sum = 0
	i = 1
	while i <= (math.sqrt(n)): 
		if n%i == 0: 
			if n/i == i : 
				sum = sum + i 
			else: 
				sum = sum + i 
				sum = sum + (n / i ) 
		i = i + 1
	sum = sum - n 
	return sum
def check_abundant(n): 
	if (get_sum(n) > n): 
		return True
	else: 
		return False"
"Implement a function in Python to extract all the words from the given string with their keyboard shifted character. For example, a letter ""a"" should be replaced by ""b"".","def shift_words(s):
    shifted_s = """"
    for c in s:
        if c.isalpha():
            shifted_s += chr(ord(c)+1)
        else:
            shifted_s += c
    return shifted_s

print(shift_words(""hello world""))
# Output: ifmmp xpsme"
"Write a Python program to assign every character in a given string a unique number (e.g. a=1, b=2, c=3 and so on).","char_dictionary = {}

counter = 1

for char in string:
 if char in char_dictionary.keys():
 continue
 else:
 char_dictionary[char] = counter
 counter += 1

print(char_dictionary)
# Output: {'H': 1, 'e': 2, 'l': 3, 'o': 4, ', ': 5, 'W': 6, 'r': 7, 'd': 8, '!': 9}"
Design a function to reverse a linked list in python.,"def reverse_linked_list(head):

    prev = None
    curr = head
    next = None
    
    while curr is not None:
        next = curr.next
        curr.next = prev
        prev = curr
        curr = next

    head = prev
    return head"
Create a hashmap data structure in Python that stores keys and values.,"my_dict = {}

# Adding key-value pairs
my_dict['a'] = 'apple'
my_dict['b'] = 'banana'
my_dict['c'] = 'cat'

# Retrieving values
apple = my_dict['a']
banana = my_dict['b']
cat = my_dict['c']

print(apple, banana, cat)"
Create a Python program that takes an array of numbers and returns the index of the first number that is the duplicate of an earlier encountered number.,"def find_first_duplicate(arr):
    seen = dict()

    for i, n in enumerate(arr):
        if n in seen:
            return i
        else:
            seen[n] = True

    return -1

arr = [5, 7, 9, 3, 1, 3]
print(find_first_duplicate(arr))
# Output: 4"
Rewrite the code snippet to Python 3.,"def my_list(list):
  new_list = []
  for item in list:
    new_list.append(item * 2)
  return new_list"
Design a function in Python that takes two strings and returns a single string which is the concatenation of both strings.,"def concatenate(str1, str2):
    return str1 + str2

# example 
str1 = ""Hello""
str2 = "" World""
result = concatenate(str1, str2)
print(result) # Hello World"
Create a python class Trainer to enable an AI agent to learn.,"class Trainer:
    def __init__(self):
        self.data = []
        self.model = None
    
    def add_data(self, new_data):
        self.data.append(new_data)
    
    def train(self):
        self.model = Model(self.data)
        self.model.train()
    
    def predict(self, input_data):
        preds = self.model.predict(input_data)
        return preds"
"Generate a class in Python to represent a Person with the following attributes: name, age, gender.","class Person:
    def __init__(self, name, age, gender):
        self.name = name
        self.age = age
        self.gender = gender
 
    def get_name(self):
        return self.name
 
    def get_age(self):
        return self.age
 
    def get_gender(self):
        return self.gender"
"Write a Python code to generate a random string of fixed length consisting of characters from ""a"" to ""z""","import random

def generate_random_string(length):
    letters = 'abcdefghijklmnopqrstuvwxyz'
    random_string = ''.join(random.choice(letters) for i in range(length))
    return random_string

if __name__ == '__main__':
    print(generate_random_string(10))"
Write a code in Python to print out all prime numbers from 0 to 100.,"for num in range(2,101):
   for i in range(2,num):
       if (num % i ) == 0:
           break
   else:
       print(num, end = ' ')"
Generate a python program to delete duplicate elements from the given array.,"def delete_duplicates(array):
    seen = set()
    non_duplicates = []
    for val in array:
        if val not in seen:
            non_duplicates.append(val)
            seen.add(val)
    return non_duplicates"
Write an Algorithm in Python that takes in a comma-separated string of numbers and returns the sum of the numbers.,"def sumString(s):
 nums = s.split(',')
 total = 0
 for num in nums:
 total += int(num)
 return total"
Create a Python program to detect cycles in a given array.,"def is_cycle_detected(array):
    # create a set to store visited indices
    visited = set()
    for i, num in enumerate(array):
        # check if num has been visited
        if i in visited or num not in visited:
            return False
        # mark the index as visited
        visited.add(i)
    return True"
Write a Python program to print a given number with commas separating the thousands.,"n = 12345678
# method 1
 print(""{:,}"".format(n))
# method 2 
print(f""{n:,}"")"
"Using input string, write a Python program to sort the string in ascending order.","def sort_string(string):
    lst = list(string)
    lst.sort()
    return ''.join(lst)

sorted_str = sort_string('hello')
print(sorted_str) # expected output: ehllo"
Write a Python class that will generate an output in JSON format from a provided input.,"class JSONGenerator:
    def __init__(self, input):
        self.input = input
 
    def generate(self):
        return json.dumps(self.input)"
Create a function in Python to print a number pyramid given a height.,"def pyramid(h): 
    
    for i in range(0, h): 
        for j in range(0, h-i-1): 
            print(end="" "") 
        for j in range(0, i+1): 
            print(""* "", end="""") 
        print(""\r"") 

pyramid(3)"
Create a python script to convert a string to a list containing the ASCII values of each character in the string.,"def string_to_ascii_list(string):
    ascii_list = []
    for char in string:
        ascii_list.append(ord(char))
    return ascii_list

print(string_to_ascii_list(""Hello World!""))"
Compose a Python program to change all `a` characters to `A` in a string.,"def change_a_to_A(s):
  return s.replace('a','A')"
Build a class in Python 3 to represent a triangle.,"class Triangle:
    def __init__(self, side1, side2, side3):
        self.side1 = side1
        self.side2 = side2
        self.side3 = side3

    def perimeter(self):
        return (self.side1 + self.side2 + self.side3)

    def area(self):
        # Using Heron's formula
        s = self.perimeter() / 2
        return (s*(s-self.side1)*(s-self.side2)*(s-self.side3))**0.5"
Generate a function in Python to check if a given number is a palindrome (a number which remains the same on reversing its digits).,"def isPalindrome(n):
    temp = n
    rev = 0
    while(temp > 0): 
        rev = (rev * 10) + (temp % 10) 
        temp = temp // 10
    if n == rev:
        return True
    else:
        return False"
Write a function to generate all sublists of a given list.,"from itertools import combinations
def sub_lists(my_list):
	subs = []
	for i in range(0, len(my_list)+1):
	  temp = [list(x) for x in combinations(my_list, i)]
	  if len(temp)>0:
	    subs.extend(temp)
	return subs"
Implement the popular depth-first search (DFS) algorithm with Python.,"def dfs(graph, start):
    visited, stack = set(), [start]
    while stack:
        vertex = stack.pop()
        if vertex not in visited:
            visited.add(vertex)
            stack.extend(graph[vertex] - visited)
    return visited"
Edit the following Python code pasted and return the output.,"def print_message(name):
    print(""Hello ""+name)

name = ""Matthew""
print_message(name)"
Develop a Python script to sort a given list of names alphabetically.,"def sort_names(names):
    names.sort()
    return names

names = [""John"", ""Harry"", ""Robert""]
result = sort_names(names)
print(result)"
Create a regex pattern in Python to check if a given string contains only lowercase letters.,"import re

def check_lowercase(text):
    pattern = r""^[a-z]*$""
    if re.fullmatch(pattern, text):
        return True
    else:
        return False"
Edit a given Python program such that it returns the optimal solution of a given problem.,"def solve_problem(input):
    solution = 0
    for i in range(input):
        if input < 0:
            break
        solution += input
        input -= 1
    return solution"
Create a machine learning model in Python that predicts the species of a flower using data about the sepal length and width.,"import pandas as pd
from sklearn.cluster import KMeans

dataset = pd.read_csv('data.csv')

X = dataset[['sepal_length', 'sepal_width']]

kmeans = KMeans(n_clusters=3, random_state=0).fit(X)

predictions = kmeans.predict(X)

dataset['species'] = predictions

print(dataset)"
Suggest an optimization technique to reduce the run time of this Python program.,"def time_function(n):
    a = [i for i in range(n)]
    return a

This will reduce the run time of the program as it eliminates the need for iterating over the range and appending to the list. Using list comprehension is faster and more memory efficient than regular looping."
Generate Python code to remove all punctuation in a given string.,"import string

def remove_all_punctuation(string):
    """"""
    Remove all punctuation from a given string.
    string: string to be modified 
    """"""
    punctuations = string.maketrans('', '', string.punctuation)
    no_punct = string.translate(punctuations) 
    return no_punct"
Create an Python program that takes a list of words as input and prints out the longest word.,"words = [""cat"", ""dog"", ""elephant"", ""rhinoceros""]

def longest_word(words):
 longest_word = """"
 
 for word in words:
 if len(longest_word) < len(word):
 longest_word = word

 print(longest_word)

longest_word(words)"
Generate a random 10-letter string using Python,"import string
import random

def generateRandomString():
    letters = string.ascii_lowercase
    return ''.join(random.choice(letters) for _ in range(10))
    
if __name__ == '__main__':
    print(generateRandomString())"
Write a python program to sort a list of dictionaries based on a particular key.,"def sort_list_of_dicts(list_of_dicts, key):
    sorted_list = sorted(list_of_dicts, key=lambda i: i[key])
    return sorted_list"
Write a Python code to implement quick sort.,"def quick_sort(arr):
 if len(arr) == 0:
 return arr
 
 pivot = arr[len(arr) // 2]
 left_arr, right_arr = [], []
 
 for i in range(len(arr)):
 if arr[i] < pivot:
 left_arr.append(arr[i])
 elif arr[i] > pivot:
 right_arr.append(arr[i])
 
 return quick_sort(left_arr) + [pivot] + quick_sort(right_arr)"
Develop a function in Python to convert a given list to a dictionary.,"def convert_list_to_dict(list):
    final_dict = {}

    for index, value in enumerate(list):
        final_dict.update({index: value})

    return final_dict

list = [1,2,3,4,5,6]
list_dict = convert_list_to_dict(list)
print(list_dict)"
"Create a program in Python to optimize a function f(x) with x = 0, 1, 2, ..., n.","def f(x): 
 return x**2 - 3 * x + 5

def optimize(f, n):
 best_x = 0
 best_y = f(0)
 for x in range(n+1): 
 y = f(x) 
 if y > best_y: 
 best_x = x
 best_y = y
 return best_x

print(optimize(f, 5))"
"Given a string, determine if it's a palindrome in Python.","def is_palindrome(input_string):
 reversed_string = input_string[::-1]
 if input_string == reversed_string:
  return True
 else:
  return False"
Modify the given program to print the output in reverse order,"def print_list_reverse(lst):
    for i in reversed(lst):
        print(i)

word_list = [""Python"", ""is"", ""fun""]

print_list_reverse(word_list)"
Create a python program to print out all combinations of elements from two lists.,"for i in list1:
    for j in list2:
        print(i, j)"
Write a function to calculate electricity bill.,"def cal_electbill(units):
 if(units < 50):
    amount = units * 2.60
    surcharge = 25
 elif(units <= 100):
    amount = 130 + ((units - 50) * 3.25)
    surcharge = 35
 elif(units <= 200):
    amount = 130 + 162.50 + ((units - 100) * 5.26)
    surcharge = 45
 else:
    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)
    surcharge = 75
 total = amount + surcharge
 return total"
Write a function to find the surface area of a cuboid.,"def surfacearea_cuboid(l,w,h):
  SA = 2*(l*w + l * h + w * h)
  return SA"
Write a Python function that converts a given number from one numeric base to another.,"def convert_number(number, from_base, to_base): 
    # convert number to base 10 
    result = int(str(number), from_base) 
  
    # convert base 10 to new base 
    res = """"
    while result > 0:
        res += str(result % to_base)
        result //= to_base
    res = res[::-1] 
  
    return res"
Write a Python program to calculate the sum of all words in a sentence.,"def sum_of_words(sentence):
 words = sentence.split() 
 total = 0 
 for word in words: 
 total += len(word) 
 return total

result = sum_of_words(""This is a sentence"")
print(result)"
Convert the following array of Python objects into a JSON string.,"import json

data = [{'name': 'John', 'age': '22'}, {'name': 'Bob', 'age': '33'}]

json_str = json.dumps(data)
print(json_str)"
"Using Python, find the mean of a randomly generated array of integers of size 10.","import numpy as np

def get_mean(array):
    '''This function returns the mean of the given array of integers.'''
    array = np.array(array)
    return np.mean(array)

if __name__ == '__main__':
    array = [61, 28, 79, 75, 73, 89, 81, 92, 83, 10]
    mean = get_mean(array)
    print(mean) # 63.2"
Generate a sequence of numbers in Python from 1 to 10 where each number is five times the previous number.,"def generate_sequence(n):
    num = 1
    for i in range(n):
        yield num
        num *= 5
        
list(generate_sequence(10))
#[1, 5, 25, 125, 625, 3125, 15625, 78125, 390625, 1953125]"
"Using the data structure provided below, create a Python program to sort a list of numbers in descending order.","def sort_descending(numbers): 
    numbers.sort(reverse=True) 
    return numbers 

print(sort_descending(numbers))"
Can you construct a class in Python which will allow users to assign attributes and values like a dictionary?,"class MyDict(dict):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)

    def __getattr__(self, attr):
        if attr in self:
            return self[attr]
        else:
            raise AttributeError(""Attribute '{}' not found"".format(attr))

    def __setattr__(self, attr, value):
        self[attr] = value"
Create a custom context class in Python that stores shared data between functions.,"class Context:
 def __init__(self):
 self.data = {}

 def set(self, key, value):
 self.data[key] = value

 def get(self, key):
 return self.data.get(key)
 
 def clear(self):
 self.data = {}
 
 
context = Context()
 
def foo():
 context.set('name', 'John')
 
def bar():
 print(context.get('name'))
 
 foo()
 bar() # prints 'John'"
Write an efficient Python program to find the second largest element in an array.,"def secondLargestElement(arr):
  # Sort the array in ascending order 
  arr.sort() 
    
  # Return the second last element 
  return arr[-2] 

# Driver code 
arr = [14, 46, 47, 86, 92, 52, 48, 36, 66, 85] 

print(secondLargestElement(arr))"
Create a script to encode and decode Base64 strings using Python.,"# encode
import base64

string = ""Hello World!""

#Encode to Base64
encodedBytes = base64.b64encode(string.encode(""utf-8""))
encodedString = str(encodedBytes, ""utf-8"")

print(encodedString)

# decode
encodedString = 'SGVsbG8gV29ybGQh'

#Decode from Base64
decodedBytes = base64.b64decode(encodedString)
decodedString = str(decodedBytes, ""utf-8"")

print(decodedString)"
Design a Python procedure to remove vowels from a string.,"def removeVowels(inputString):
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]

    outputString = """"
    for char in inputString:
        if char not in vowels:
            outputString += char
    
    return outputString"
Generate a Python program to reverse the order of words in a given string.,"def reverse_words(str):
    return "" "".join(str.split()[::-1])"
Translate the following algebraic expression into a Python program: 𝑧=(𝑥+𝑦)2+2𝑥−3𝑦,"x = int(input('Enter the value of x: '))
y = int(input('Enter the value of y: '))

z = (x + y)**2 + (2 * x) - (3 * y)

print(""The value of z is:"", z)"
Create a Python script that adds two numbers together and prints the result.,"def add(a, b):
    sum = a + b
    print(sum)

add(5,7)"
Can you develop a Python script to merge two given lists?,"list1 = ['a', 'b', 'c']
list2 = ['1', '2', '3']

def merge_lists(list1, list2):
    merged_list = list1 + list2
    return merged_list

merged_list = merge_lists(list1, list2)
print(merged_list) # Output: ['a', 'b', 'c', '1', '2', '3']"
"Given a sentence, tokenize it in Python, separating each of the words using the NLTK library.","import nltk

tokenized = nltk.word_tokenize(""The cat sat on the mat."")
print(tokenized)
# Output: ['The', 'cat', 'sat', 'on', 'the', 'mat', '.']"
Design a class in Python that can store student information such as name and marks.,"class Student:
    def __init__(self, name, marks):
        self.name = name
        self.marks = marks
    
    def getName(self):
        return self.name
    
    def getMarks(self):
        return self.marks"
Create a function in Python for calculating the maximum value in an array.,"def get_max(arr):
 m = arr[0]
 for val in arr:
 if val > m:
 m = val
 return m

# example
arr = [1, 2, 3, 4]
print(get_max(arr)) # 4"
Use the following data to create a graphical representation in Python.,"import matplotlib.pyplot as plt

x = [1,2,3,4,5]
y = [2,4,6,8,10]

plt.plot(x,y)
plt.title('Graph title')
plt.xlabel('X-axis Label')
plt.ylabel('Y-axis Label')

plt.show()"
Design a Python 3 program that takes as input from the user two comma-separated lists of integers and then finds the union of the two lists.,"list1 = [1,2,3,4]
list2 = [6,5,4,3]

def findUnion(list1, list2):
 unionList = list1
 for item in list2:
  if item not in unionList:
   unionList.append(item)
 return unionList

union = findUnion(list1, list2)
print(union) # prints [1, 2, 3, 4, 6, 5]"
Design a program in Python that prints out the binary equivalent of a given decimal number.,"def dec_to_bin(num):
    binary = """"
    while num > 0:
        remainder = num % 2
        binary = str(remainder) + binary
        num = num // 2
    return binary"
"Generate a Python dictionary to store the user preferences like language, font size and background color.","user_preferences = {
    'language': 'english',
    'font_size': 12,
    'background_color': '#FFFFFF'
}"
Create a Python program that takes a string as input and returns the longest word in it.,"def find_longest_word(sentence):
    words = sentence.split()
    longest_word = words[0]
    for word in words:
        if len(word) > len(longest_word):
            longest_word = word
    return longest_word

sentence = ""This is an example sentence.""
longest_word = find_longest_word(sentence)
print(longest_word)"
Write a Python program to transform user input from lowercase to uppercase.,"input_string = input('Enter a string: ')

output_string = input_string.upper()

print(f'Your input in uppercase is: {output_string}')"
Create a Python script to download a zip archive from a URL and extract it in the current directory.,"import requests
import shutil
import zipfile

url = 'https://example.com/myzip.zip'

response = requests.get(url, stream=True)

with open('myzip.zip', 'wb') as f:
 shutil.copyfileobj(response.raw, f)

with zipfile.ZipFile('myzip.zip', 'r') as f:
 f.extractall()"
Create a Python dictionary where the keys are student IDs and the values are the corresponding student names.,"def create_dict(id_lst, name_lst): 
    dic = {}
    
    for i in range(len(id_lst)): 
        dic[id_lst[i]] = name_lst[i]
    
    return dic

result = create_dict(id_lst, name_lst) 
print(result)"
Generate a function in Python to determine the largest element in an array.,"def find_max(arr):
 max_val = arr[0]
 for num in arr:
 if num > max_val:
 max_val = num
 return max_val

array = [3, 2, 1, 4, 5]
print(find_max(array))"
Write a Python code to implement a linear search algorithm in a list of integers.,"def linear_search(list, x):
    for item in list:
        if item == x:
            return True
    return False

list = [10,20,30,40,50]
x = 20
 
if linear_search(list, x):
    print(""Element is present in the list"")
else:
    print(""Element is not present in the list"")"
Develop a Python program that uses a series of if-elif-else statements to act on the input data,"def convert_to_uppercase(data):
    if type(data)==str:
        return data.upper()
    else:
        print(""Input must be a string"")"
Write a Python function to generate a random string of length 10.,"import random
import string

def generate_string():
    chars = string.ascii_uppercase + string.ascii_lowercase + string.digits
    random_string = ''.join(random.choice(chars) for i in range(10))
    return random_string

# Example test
random_string = generate_string()
print(random_string) # 5BZFz5S2Sd"
Classify a snippet of code according to programming language.,Python
Create a Python script that finds the median value in an unsorted list of numbers.,"def median(nums):
 sorted_list = sorted(nums)
 if len(sorted_list) % 2 == 0:
 mid = int(len(sorted_list) / 2)
 return (sorted_list[mid] + sorted_list[mid-1]) / 2
 else:
 return sorted_list[int(len(sorted_list)/2)]

median([3, 4, 1, 2, 5]) # Output: 3.0"
Create Python code to sum all the values in a list?,"def sum_list(l):
    '''This function returns the sum of all the values in a list'''
    sum = 0
    for val in l:
        sum = sum + val
    return sum"
"Create a class in Python with two methods, one to calculate the area of a circle and one to calculate the circumference.","class Circle:
    def __init__(self, radius):
        self.radius = radius

    def area(self):
        return 3.14 * self.radius**2

    def circumference(self):
        return 2 * 3.14 * self.radius"
Generate code that implements a Fibonacci sequence generator in Python.,"def fibonacci(n): 
  a = 0
  b = 1
  if n < 0: 
    print(""Incorrect input"") 
  elif n == 0: 
    return a 
  elif n == 1: 
    return b 
  else: 
    for i in range (2,n): 
      c = a + b 
      a = b 
      b = c 
    return b 

# Test the code
fibonacci(9)
# Output: 34"
Create a Python program to generate 10 random numbers between 0 and 10.,"import random

random_numbers = []

for i in range(10):
    random_numbers.append(random.randint(0,10))

print(random_numbers)"
Classify the following Python statement.,Statement Type: Print Statement.
Create a Python class that constructor prints “Hello World”.,"class HelloWorld:
    def __init__(self):
        print(“Hello World”)"
Improve the performance of the following code using Python's in-built functions.,"s = 'Google'
# improved code
# use of built-in functions to count the number of occurrences of 'o' in a string
count = s.count('o')

print('Number of occurrences of ""o"": {}'.format(count))"
Create a Python program that prints out all the odd numbers between 1 and 30.,"for i in range(1, 31):
 if(i%2 != 0):
  print(i)"
Create a web-scraping program in Python to scrape movie reviews from IMDb.,"import requests
import bs4
 
url = ""https://www.imdb.com/title/tt0816692/reviews?ref_=tt_urv""
page = requests.get(url).text
soup = bs4.BeautifulSoup(page, 'html.parser')

reviews = soup.find_all(class_=""text show-more__control"")
for review in reviews:
    print(review.get_text())"
Create a Python program to find the longest element in the list.,"def find_longest(arr): 
    longest = 0
    for item in arr: 
        longest = max(len(str(item)), longest) 
    return longest
    
if __name__ == ""__main__"": 
    list = [1, 5, 4, 3, 9, 8]
    print(find_longest(list))"
Generate a Python program for converting temperatures from Celsius to Fahrenheit.,"# Take input from user
c = float(input('Enter temperature in Celsius: '))

# Compute temperature in Fahrenheit
f = (c * 1.8) + 32

# Print the result
print('{} degree Celsius is equal to {} degree Fahrenheit.'.format(c, f))"
Write a Python program to find the sum of all values in a nested dictionary.,"def get_sum(data):
    """"""get the sum of all values in a nested dictionary""""""
    sum = 0
    for key, value in data.items():
        if type(value) is int:
            sum += value
        else:
            sum += get_sum(value)
    return sum

d = {""a"":1, ""b"":2, ""c"":{""d"":3, ""e"": 4}}
print(get_sum(d))
# Output: 10"
"Create a script in Python that displays ""Hello World!"" in your console.",print('Hello World!')
Produce a unit test report in Python for a program to find the mean of an array.,"import unittest

def calculate_mean(numbers):
    return sum(numbers)/len(numbers)

class MeanCalculationTest(unittest.TestCase):
    def setUp(self):
        self.sample_array = [1, 2, 3, 4, 5]

    def test_mean_calculation(self):
        self.assertEqual(calculate_mean(self.sample_array), 3)

if __name__ == '__main__':
    unittest.main()"
Write a Python program to optimize the given code to make it more operationally efficient.,"def add_two_numbers(a, b):
    return a + b"
"Given an array of integers, sort the array in ascending order using a Python program.","def sort_asc(arr):
    for i in range(len(arr)):
        for j in range(i+1,len(arr)):
            if arr[i] > arr[j]:
                arr[i], arr[j] = arr[j], arr[i]
    return arr

print(sort_asc([5,3,7,1,9]))"
Create a python program to return the difference between two sets x and y.,"def set_difference(x, y): 
    return x.difference(y)"
Generate a program in Python to print all prime numbers between 1 and 50.,"# print all prime numbers between 1 and 50
for num in range(1,51): 
      
   # prime numbers are greater than 1 
   if num > 1: 
       for i in range(2,num): 
           if (num % i) == 0: 
               break
       else: 
           print(num)"
Develop a BFS algorithm in Python.,"def BFS(graph, start):
    visited = set()
    queue = [start]
    while queue:
        vertex = queue.pop(0)
        if vertex not in visited:
            visited.add(vertex)
            queue.extend(graph[vertex] - visited)
    return visited"
"Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.","def maximum_segments(n, a, b, c) : 
	dp = [-1] * (n + 10) 
	dp[0] = 0
	for i in range(0, n) : 
		if (dp[i] != -1) : 
			if(i + a <= n ): 
				dp[i + a] = max(dp[i] + 1, 
							dp[i + a]) 
			if(i + b <= n ): 
				dp[i + b] = max(dp[i] + 1, 
							dp[i + b]) 
			if(i + c <= n ): 
				dp[i + c] = max(dp[i] + 1, 
							dp[i + c]) 
	return dp[n]"
Generate the following output in Python,"def generate(lst):
    res = []
    for i in range(1, len(lst) + 1):
        for j in range(len(lst) - i + 1):
            res.append(lst[j: j + i])
    return res"
Write a Python program to find the maximum number in a list of numbers.,"def find_max(nums):
  max_num = nums[0]
  for x in nums:
    if x > max_num:
      max_num = x
  return max_num

print(find_max([1,9,5,18,21,2]))"
Create a Python function to convert a given temperature in Fahrenheit to Celsius.,"def fahrenheit_to_celsius(temp_fahr):
  temp_celsius = (temp_fahr - 32.0) * (5.0/9.0)
  return temp_celsius

# example
temp_fahr = 98
temp_celsius = fahrenheit_to_celsius(temp_fahr)
print(""{0}°F is equal to {1}°C"".format(temp_fahr,temp_celsius))"
Generate Python code to calculate the largest number that is divisible by both 8 and 6.,"def find_largest_divisible_number(m, n):
 num = 0
 while True:
 num += max(m, n)
 if num % m == 0 and num % n == 0:
 return num

print(find_largest_divisible_number(8, 6))"
Write a Python program that generates a random string of 10 characters.,"import string
import random

def generate_string(length):
    letters = string.ascii_letters
    result_str = ''.join(random.choice(letters) for i in range(length))
   
    return result_str

random_string = generate_string(10)

print(random_string)"
Write an algorithm in Python to generate a random non-repeating integer array of size N,"import random 

def random_array(N): 
 
    result = [] 
  
    for i in range(N): 
  
        # Stores the number in result after checking for its presence. 
        data = random.randint(1, 100) 
  
        if data not in result: 
            result.append(data) 
          
    return result 

# Driver Code 
N = 10
res = random_array(N) 
print(res)"
Create a function in Python that takes an array of strings and returns an array with the strings sorted in reverse-alphabetical order.,"def reverse_sort(arr): 
    return sorted(arr, reverse=True) 
  
# driver code 
arr = [""tomato"", ""apple"", ""mango""] 
sorted_arr = reverse_sort(arr) 
  
print(sorted_arr)"
Create a class in Python that implements the Comparable interface.,"class Comparable:
    def __init__(self, value):
        self.value = value
        
    def compareTo(self, b):
        if self.value > b.value:
            return 1
        elif self.value < b.value:
            return -1
        else:
            return 0"
Generate a random number in Python between 10 and 20 excluding 14.,"import random

number = random.randint(10, 20)
while (number == 14):
  number = random.randint(10, 20)

print(number)"
Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.,"MAX = 1000000
def breakSum(n): 
	dp = [0]*(n+1) 
	dp[0] = 0
	dp[1] = 1
	for i in range(2, n+1): 
		dp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); 
	return dp[n]"
Write a python program that finds a maximum subarray from a given list of integers.,"def max_subarray(numbers): 
    max_so_far = max_ending_here = numbers[0] 
    for i in range(1,len(numbers)): 
        max_ending_here = max(numbers[i], max_ending_here + numbers[i]) 
        max_so_far = max(max_so_far, max_ending_here) 
    return max_so_far"
Sort a given array of integers in Python.,"arr.sort() 
# arr is now [1, 5, 7, 8, 10]"
Write a python program to check if a given array A is a subset of another array B,"def is_subset(A, B):
    # Iterate through A
    for elem in A:
        # Check if the element is in B 
        if elem not in B:
            # If not, return False
            return False

    # If we reach here, all the elements of A
    # were present in B, so return True 
    return True"
Create a Python script to look up the IMDB rating of a movie by its title.,"import imdb

ia = imdb.IMDb()
movie = ia.search_movie('The Prestige')[0]
ia.update(movie)

print(movie['rating'])
// Output: 8.5"
Develop a program in python to generate a matrix,"def generate_matrix(rows, cols):
   matrix = [] 
   for i in range(rows): 
       row = []
       for j in range(cols): 
           row.append(0)
       matrix.append(row)
   return matrix

# Example
m = generate_matrix(3, 4)
print(m)  # Output: [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]"
Create an algorithm to detect duplicate objects in an array.,"# Python program to detect duplicate objects in an array

def detectDuplicates(arr):
  seen = set()
  for item in arr:
    if item in seen:
      return True
    else:
      seen.add(item)
  return False"
Create a program in JavaScript to reverse a sentence.,"let sentence = ""I love coding in Python"";
let reversed = sentence.split("""").reverse().join("""");
console.log(reversed);"
Write a Python program to extract all the words starting with a specific letter,"""""""
Extract all the words starting with a specific letter
""""""

def extract_words(word, letter):
    words_list = []
    for w in word.split():
        if w[0] == letter:
            words_list.append(w)
    return words_list

if __name__ == '__main__':
    words = 'This is a sample sentence to test the program'
    letter = 's'
    print(extract_words(words, letter))"
Generate a python function that computes the standard deviation of an array of numbers.,"def compute_std_dev(values):
  n = len(values)
  mean = 0
  for i in range(n):
    mean += values[i]
  mean /= n
  std_dev = 0
  for i in range(n):
    std_dev += (values[i] - mean)**2
  std_dev /= n
  return std_dev**(1/2)
#Example:
compute_std_dev([12,14,11,20,13])
#Output: 3.067"
Translate the following Java code to Python,"for i in range(n):
 print(""Hello World"")"
Write a function to find the sum of arithmetic progression.,"def ap_sum(a,n,d):
  total = (n * (2 * a + (n - 1) * d)) / 2
  return total"
Write a function in Python that takes a sentence as an argument and returns the same sentence but with all the words reversed.,"def reverse_sentence(sentence):
 reversed_sentence = "" "".join(sentence.split()[::-1])
 return reversed_sentence

print(reverse_sentence(sentence))
# Output: sentence test a is This"
Generate a valid Python program that finds all the odd numbers in a given list of integers.,"def find_odds(nums):
  result = []
  for num in nums:
    if num % 2 == 1:
      result.append(num)
  return result

odd_nums = find_odds([1, 2, 3, 4, 5, 6])
print(odd_nums)"
"Develop a Python program to generate a dictionary with the keys being the words in a given text, and the values being the corresponding frequencies.","words = ""A few words, some more words!""

words_list = words.split()

frequency_dict = {word:words_list.count(word) for word in words_list}

print(frequency_dict)
# Output: {'A': 1, 'few': 1, 'words,': 1, 'some': 1, 'more': 1, 'words!': 1}"
Create a method in Python to format a date from the format dd-mm-yyyy to yyyy-mm-dd.,"def format_date(date):
    splitted_date = date.split(""-"")
    reformatted_date = splitted_date[::-1]
    return ""-"".join(reformatted_date)

format_date(""10-05-2020"")"
Write a python function to find the maximum of two numbers.,"def maximum(a,b):   
    if a >= b: 
        return a 
    else: 
        return b "
Write a python function to convert the given string to upper case.,"def is_upper(string):
  return (string.upper())"
Create a Python function that takes two strings as input and returns the total of the lengths of the two strings.,"def string_length_sum(string1, string2):
    return len(string1) + len(string2)

result = string_length_sum(string1, string2)"
"Using the input provided, make a program to sort a given array in ascending order in Python.","def insertionSort(arr): 
    for i in range(1, len(arr)): 
        key = arr[i] 
        j = i-1
        while j >=0 and key < arr[j] : 
                arr[j+1] = arr[j] 
                j -= 1
        arr[j+1] = key 

arr = [9, 4, 7, 2, 3]
insertionSort(arr) 
print (""Sorted array is:"") 
for i in range(len(arr)): 
    print (""%d"" %arr[i]),"
Write a Python program to display all prime numbers between a given range.,"def prime_range(n):
  result = []
  
  for i in range(2, n):
    flag = 0
    
    for j in range(2, i):
      if (i % j) == 0:
        flag = 1
        break
    if (flag == 0): 
      result.append(i)
  return result

result = prime_range(20)
print(result)"
"Create a class in Python to represent a user, where a user is composed of a name and an email address.","class User:
    def __init__(self, name, email):
        self.name = name
        self.email = email
        
    def printDetails(self):
        print(""Name:"", self.name)
        print(""Email:"", self.email)
        
user1 = User(""John Smith"", ""john@example.com"")
user1.printDetails()"
Design a Python algorithm to detect the presence of a target word in a text.,"# This is a python program to detect the presence of a target word in a text
def detect_word(target, text):
    return target in text.split()

# Example
target = 'apple'
text = 'I like apples, they are sweet and juicy.'

if detect_word(target, text):
    print('Target word found in the text.')
else:
    print('Target word not found in the text.')"
Write a Python program to take a given list of strings and return a dictionary of words mapped to the frequency of their occurrence.,"def create_word_dict(words):
 word_dict = {}
 for word in words:
  if word in word_dict:
   word_dict[word] += 1
  else:
   word_dict[word] = 1
 return word_dict"
Write a function to caluclate area of a parallelogram.,"def parallelogram_area(b,h):
  area=b*h
  return area"
Generate a Python script to randomly select k elements from a list.,"import random

# Initialize the array
array = [11, 22, 7, 12, 3, 8]
k = 3

# Randomly select k elements from array
selected = random.sample(array, k)

# Output the result
print(f'Randomly selected {k} elements: {selected}')"
Write a Python script to organize a given list of data of students alphabetically.,"def sort_alphabetically(students):
   return sorted(students)"
Write a Python program to convert a list of numbers into a single number by subtracting the sum of all numbers in the list from the first element.,"def list_to_number(list1):
    result = list1[0]
    for i in range(1, len(list1)):
        result -= list1[i]
    return result"
"Write a python program to create an array of length n, where each element is a random number between 0 and 10.","import random

array_length = 10

my_array = [random.randint(0, 10) for _ in range(array_length)]

print(my_array)"
Write a Python program to optimize a given mathematical expression.,"def optimize_expression(expr):
    expr_tree = ast.parse(expr, mode='eval')
    
    # transform expression
    expr_tree = ast.fix_missing_locations(ast.optimize_expression(expr_tree)) 
    ast.increment_lineno(expr_tree, 1)

    # compile ast to python code
    compiled_expr = compile(expr_tree, '', 'eval') 
     
 return eval(compiled_expr)"
Create a program in Python that uses a machine learning approach to classify a type of data.,"import numpy as np
from sklearn.svm import SVC

# Intialize dataset and labels
dataset = [[1,2,3], [4,5,6], [7,8,9]]
labels = [""a"", ""b"", ""c""]

# Fit the model
clf = SVC(gamma='auto')
clf.fit(dataset, labels)

# Make predictions 
x = [2, 3, 4]
prediction = clf.predict([x])
print(""The prediction is"", prediction[0])"
Write a python function to check whether the given string is a binary string or not.,"def check(string) :
    p = set(string) 
    s = {'0', '1'} 
    if s == p or p == {'0'} or p == {'1'}: 
        return (""Yes"") 
    else : 
        return (""No"") "
"Create a program in Python which takes a list of tuples as an input, and prints true if it contains two elements that sum to 10.","def checkSum(arr):
    for (a, b) in arr:
        if a + b == 10:
            return True
    return False

arr = [(2, 8), (4, 6), (7, 3)]

print(checkSum(arr)) # True"
"Generate a Python class for a person object, with the name, age, and gender as fields.","class Person:
  def __init__(self, name, age, gender):
    self.name = name
    self.age = age
    self.gender = gender

  def get_name(self):
    return self.name

  def get_age(self):
    return self.age

  def get_gender(self):
    return self.gender"
Create a Python program to compare two given lists and return the common elements.,"def commonElements(listOne, listTwo):
 commonList = []
 for element in listOne:
  if element in listTwo:
   commonList.append(element)
 return commonList

print(commonElements(listOne, listTwo))"
Reverse engineer the following Java code to create a Python program.,"def main():
 i = 0
 while i < 10:
  print(i)
  i += 1
 
main()"
Generate a Python script for replacing a substring in a given string.,"new_str = str.replace(""Hello"",""Goodbye"")
print(new_str)"
Write a Python program that carries out the following tasks. The program should take two strings as parameters and return a new string that contains the two inputs merged together.,"def mergeStrings(str1, str2):
   return str1 + str2

print(mergeStrings('Hello', 'World'))"
Write a python program to print the current date in ISO format,"import datetime

date_iso = datetime.datetime.now().isoformat()
print(date_iso)"
Create a random number generator function in Python.,"import random

def random_number_generator(start, end):
    return random.randint(start, end)"
Write a Python program to remove consecutive sequences of duplicates from the given list,"def remove_duplicates(list):
    new_list = []
    previous_item = None
    for item in list:
        if item != previous_item:
            new_list.append(item)
        previous_item = item
    return new_list

new_list = remove_duplicates(list)
print(new_list)"
"Create a Python function that computes the distance between two points (x1, y1) and (x2, y2).","def compute_distance(x1, y1, x2, y2):
    return ((x2-x1)**2 + (y2-y1)**2)**0.5

distance = compute_distance(5, 4, 9, 2)
print(""The distance between two points is:"", distance)"
Write a procedure in Python to rectify misspelled words in a paragraph.,"import re

def fix_spelling(paragraph):
    words = paragraph.split()
    corrected_words = []
    for word in words:
        corrected_words.append(re.sub(r'[aeiou]',r'[aeiou]', word))
 
    return "" "".join(corrected_words)

print(fix_spelling(""My favarite flowers are rose and tulples""))"
Write a python function to count lower case letters in a given string.,"def lower_ctr(str):
      lower_ctr= 0
      for i in range(len(str)):
          if str[i] >= 'a' and str[i] <= 'z': lower_ctr += 1     
      return  lower_ctr"
"Given an email list, write a python program to sort the list alphabetically","def sort_list(list_of_emails):
    list_of_emails.sort()
    return list_of_emails

print(sort_list(['bob@example.com', 'alice@example.com', 'jane@google.com', 'mary@example.com']))"
Build a Python code to convert a list to a dictionary using the list values as the keys.,"my_dict = {}
for item in my_list:
    my_dict[item] = None

print(my_dict)"
Write a Python program that returns the index of a given item in a given list.,"def find_index(item, array):
    for i in range(len(array)):
        if array[i] == item:
            return i"
Write a function to remove an empty tuple from a list of tuples.,"def remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]
   tuple1 = [t for t in tuple1 if t]
   return tuple1"
Write a function to return true if the given number is even else return false.,"def even_num(x):
  if x%2==0:
     return True
  else:
    return False"
Write a Python function to print the times tables from 1 to 10.,"def print_times_tables():
    for i in range(1, 11):
        print(f'{i:>2} times table:')
        for j in range(1, 11):
            res = i*j
            print(f'{i} * {j} = {res}')
        print('\n')

print_times_tables()"
Use a recursive algorithm in Python to calculate the sum of a given array.,"def array_sum(arr):
  if len(arr) == 1:
    return arr[0]
  else:
    return arr[0] + array_sum(arr[1:])

#Driver code
print(array_sum(array1)) #prints 15"
Write a Python function to fetch the data from this API https://coronavirus-19-api.herokuapp.com/,"import requests

def fetch_data():
    url = 'https://coronavirus-19-api.herokuapp.com/'
    response = requests.get(url)
    data = response.json()
    return data

if __name__ == '__main__':
    print(fetch_data())"
Create a python script to calculate the average of 10 numbers.,"def calculate_avg(nums):
 sum = 0
 for num in nums:
 sum += num
 avg = sum/len(nums)
 return avg

numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(calculate_avg(numbers))"
Generate a Python program which takes two strings as input and returns true if they are anagrams of each other.,"def is_anagram(a, b):
  return sorted(a) == sorted(b)

result = is_anagram(""listen"", ""silent"")
print(result)"
Write a Python program to round a number to a given number of decimal places.,"number_rounded = round(number, round_places)
print(number_rounded)
# Output: 2.68"
Write a python function to remove all occurrences of a character in a given string.,"def remove_Char(s,c) :  
    counts = s.count(c) 
    s = list(s) 
    while counts :  
        s.remove(c) 
        counts -= 1 
    s = '' . join(s)   
    return (s) "
Write a python script that calculate the sum of an array,"def array_sum(arr):
  sum_arr = 0
  for _ in range(len(arr)):
    sum_arr += arr[_]
  return sum_arr

print(array_sum([-3,9,2,1]))"
"In Python, write a script for generating one million random passwords.","import random

for x in range(1000000):
  password = '' 
  for i in range(12):
    password += random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#!')
  print(password)"
Write a python function to multiply all items in the list.,"def multiply_list(items):
    tot = 1
    for x in items:
        tot *= x
    return tot"
Rewrite the following Python code by introducing list comprehensions.,"even_numbers = [i for i in range(1, 21) if i % 2 == 0]"
Create a function in python that takes a string and adds a prefix to each word in the string.,"def add_prefix(input_string, prefix):
    """"""Takes a string and adds a prefix to each word in the string.""""""
    output_string = []
    words = input_string.split()
    for word in words:
        output_string.append(prefix + word)
    return ' '.join(output_string)"
Write a function in Python to sum all the positive integers of n numbers.,"def sum_numbers(arr):
    total = 0
    for num in arr:
        if num > 0:
            total += num
    return total

print(sum_numbers([1,2,3,4,5])) # 15"
Find all possible substrings in a given string.,"def find_substrings(string):
    substrings = []
    length = len(string) 
    for i in range(length): 
        for j in range(i + 1, length + 1): 
            substrings.append(string[i: j]) 
    return substrings

substrings = find_substrings(my_string)
print (substrings) # ['P', 'Py', 'Pyth', 'Pytho', 'Python', 'y', 'yt', 'yth', 'ythe', 'yhon', 't', 'th', 'tho', 'thon', 'h', 'ho', 'hon', 'o', 'on', 'n']"
Write a Python program that takes a list of numbers as an argument and prints the count of all even and odd numbers.,"def countNumbers(nums):
 evenCount = 0
 oddCount = 0
 
 for num in nums:
 if num % 2 == 0:
 evenCount += 1
 else:
 oddCount += 1
 
 return (evenCount, oddCount)

nums = [2, 9, 4, 8, 0, 7, 1]
evenCount, oddCount = countNumbers(nums)

print(""Even numbers:"", evenCount)
print(""Odd numbers:"", oddCount) 
# Even numbers: 4
# Odd numbers: 3"
"Edit the following Python program to print all the numbers in a given list, one number per line.","list = [1, 2, 3, 4, 5]

for num in list:
    print(num)"
Write a python program to print out the contents of a email message.,"import email
from email.Parser import Parser

# parse email
parser = Parser()
message = parser.parse(open('sample_email.eml'))

# print out the message
print(message.as_string())"
"Given a 2D array of integers, write a Python code snippet to rotate the array by 90 degrees.","def rotate90(arr):
    N = len(arr[0])
    rotate_matrix = [[0 for x in range(N)] for y in range(N)]

    for x in range(N):
        for y in range(N):
            rotate_matrix[y][N-1-x] = arr[x][y]
    return rotate_matrix"
Design a Python script to print the first 10 even numbers.,"for num in range(0, 20, 2):
    if num < 10:
        print(num, end=' ') 
# Output: 0 2 4 6 8"
Design an algorithm in Python to count the number of occurrences of each character in a given string.,"def count_chars(string):
 chars = {}
 
 for c in string:
 if c not in chars:
 chars[c] = 0
 chars[c] += 1
 
 return chars
 
str = ""Hello World""
print(count_chars(str))
# {'H': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'W': 1, 'r': 1, 'd': 1}"
Write an efficient algorithm in Python to find the second smallest number in an array.,"def find_second_smallest(arr):
    smallest = arr[0]
    second_smallest = None
    for i in range(1, len(arr)):
        if arr[i] < smallest:
            second_smallest = smallest
            smallest = arr[i]
    return second_smallest

arr = [9, 7, 4, 8, 2]

second_smallest = find_second_smallest(arr)

print(""Second smallest number is:"", second_smallest) # Output is 7"
Write a python program to filter a list of numbers by removing duplicate items.,"# Create an empty set
result = set()
nums = [1,2,3,4,5,2,3]

# Iterate over the list
for num in nums:
 # Add each item to the set if it is not already present
 if num not in result:
  result.add(num)

# Print the resulting list
print(list(result)) #[1, 2, 3, 4, 5]"
Write a function to find all words starting with 'a' or 'e' in a given string.,"import re
def words_ae(text):
 list = re.findall(""[ae]\w+"", text)
 return list"
"Write a Python program to create a Fibonacci sequence with the start of 0 and 1, up to max number n.","def fibonacci(n): 
    a,b = 0,1
    fib_list = []
    while a < n:
        fib_list.append(a)
        a,b = b,a+b
    return fib_list

fib_sequence = fibonacci(20)
print(fib_sequence)"
Convert the following function call from Python to JavaScript.,"function myFunction(a, b) {
 return a + b;
}

myFunction(3, 4);"
Write a Python program to find the number of divisors of an integer.,"def count_number_divisors(x): 
    count = 0
    for i in range(1, x+1): 
        if x % i == 0: 
            count = count + 1
    return count"
Write a Python program to query a provided API and return the result in JSON format.,"import requests

url = 'https://example.com/api'

response = requests.get(url)

if response.status_code == 200:
 data = response.json()
 print(data)
else:
 print('Error:', response.status_code)"
Design a program in Python to sort a list of tuples based on the value the tuples contain.,"def sort_tuples(tuples):
    return sorted(tuples, key=lambda x: x[1])

sorted_tuples = sort_tuples(tuples)
print(sorted_tuples) # Outputs [('c', 2), ('b', 3), ('a', 4)]"
Generate a function in Python that combines two string variables and returns the combined string?,"def combine_strings(string1, string2): 
    return string1 + ' ' + string2 

string1 = ""Hello"" 
string2 = ""World""

result = combine_strings(string1, string2) 
print(result)"
Create a Python script which takes a keyword as an input and searches wikipedia for articles related to the keyword.,"import wikipedia

def search_wikipedia(keyword):
    results = wikipedia.search(keyword)
    for result in results:
        print(wikipedia.summary(result, sentences=2))

search_wikipedia(""machine learning"")"
Write a function in Python to split a string into a list containing each word from the string.,"def split_string_into_list(string):
    return string.split(' ')"
Create a Python function to check whether a number is divisible by another number or not.,"def is_divisible(number1, number2):
   return number1 % number2 == 0"
Write a function in Python to compute the sum of the given list of numbers.,"def sum_list(nums):
 sum = 0
 for n in nums:
  sum += n
 return sum

result = sum_list([1, 24, 47, 98, 22, 45])
print(""Sum of the list is"", result)"
Construct a Python program that computes the maximum of a given list of numbers.,"def max_number(num_list):
 max = num_list[0]
 for num in num_list:
 if num > max:
   max = num
 return max

print(max_number([5, 6, 7, -2, 3]))"
Rewrite the following snippet of code so it can run in modern python versions.,"def foo(my_list):
    result = []
    for element in my_list:
        if 'foo' in element:
            result.append('foo')
    return result"
Write a Python code snippet for comparing two strings regardless of their case. You should use regular expressions.,"import re

string1 = ""Hello""
string2 = ""heLLo""

if re.search(string1.lower(), string2.lower()):
 print(""Strings are equal regardless of case."")"
Create a function in Python to print a sorted list of the given input string.,"def sortString(inputString): 
  
    words = inputString.split() 
    words.sort() 
  
    for i in words: 
        print(i) 
          
sortString(inputString)"
Write a python program for calculating the average of two numbers.,"def average(a, b):
    return (a+b)/2
    
a = 10
b = 15

avg = average(a, b)

print(avg)"
Create an array in Python containing 10 evenly spaced numbers between 0 and 10.,"arr = np.linspace(0, 10, 10)"
"Create a Python module that implements a simple Stack. The module should have functions for push, pop, peek, size, and empty operations.","class Stack:
 
 def __init__(self):
  self.items = []
 
 def push(self, item):
  self.items.append(item)
 
 def pop(self):
  return self.items.pop()
 
 def peek(self):
  return self.items[len(self.items)-1]
 
 def size(self):
  return len(self.items)
 
 def empty(self):
  return self.size() == 0"
Generate a python function that takes a list of strings and returns the string concatenation of them.,"def concatenateString(list):
    result = """"
    for item in list:
        result += item
    return result
 
print(concatenateString([""Hello"", ""World"", ""How"", ""are"", ""you""]))"
Can you implement a sorting algorithm in Python?,"def sort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(0, n-i-1): 
            if arr[j] > arr[j+1] : 
                arr[j], arr[j+1] = arr[j+1], arr[j] 

arr = [64, 34, 25, 12, 22, 11, 90]
 
sort(arr) 
 
print (""Sorted array is:"") 
for i in range(len(arr)): 
    print (""%d"" %arr[i]),"
Make a POST request using Python to the specified URL.,"import requests

url = 'http://example.com/'
response = requests.post(url)"
"Write a Python program that simulates a coin flip game. The program should randomize a value between 0 and 1 and return ""Heads"" for values less than .5 and ""Tails"" for values greather than .5","import random

def coin_flip():
	if random.random() < 0.5:
		return ""Heads""
	else:
		return ""Tails""

print(coin_flip())"
Write a python program that computes the average of 5 numbers.,"def average(a, b, c, d, e):
    """"""This program computes the average of 5 numbers""""""
    return (a+b+c+d+e)/5"
Design an algorithm in python to solve the Towers of Hanoi puzzle.,"def hanoi(discs, start, temp, end):
    if discs > 0:
        hanoi(discs - 1, start, end, temp)
        end.append(start.pop())
        hanoi(discs - 1, temp, start, end)"
Construct a python program to create a unique list from a given one,"result = [] 
for x in list: 
    if x not in result: 
        result.append(x) 
print(result)"
Generate a program in Python that takes as input an array of numbers and returns the sum of all numbers in the array.,"def sum_elements(nums):
    """"""Given an array of number, return the sum of all elements in the array """"""
    result = 0
    for num in nums:
        result += num
    return result

print(sum_elements([2,3,4]))"
Code an algorithm in Python to check if two given sets are equal.,"def is_equal(A, B):
    if len(A) != len(B):
        return False
    for el in A:
        if el not in B:
            return False
    return True"
Generate a Python code to count assign the occurrence of an element in a list to a dictionary.,"def get_occurrence_dict(list):
    result_dict = {}
    for element in list:
        if element in result_dict:
            result_dict[element] += 1
        else:
            result_dict[element] = 1
    return result_dict"
Develop a Python program to calculate the area of a triangle using the side lengths.,"# Calculates the area of a triangle given the three side lengths
def area_triangle(a, b, c): 
    # Calculate the semi-perimeter 
    s = (a + b + c) / 2  
  
    # calculate the area 
    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5 
    return area 
  
# Driver Code 
a = 5
b = 9
c = 11
print(""Area of triangle is : "", area_triangle(a, b, c))"
Create a recursive function in Python to find out if a number is a prime,"def is_prime(num):
    if num == 1:
        return False
    if num == 2 and num % 2 == 0:
        return True
    else:
        for x in range(2, num):
            if num % x == 0:
                return False
        return True"
"Given two strings s and t, create a new Python function to check if s is an anagram of t.","def is_anagram(s, t):
 s_list = list(s)
 t_list = list(t)
 s_list.sort()
 t_list.sort()
 if s_list == t_list:
 return True
 else:
 return False"
Write a function in Python which takes one string as input and checks if the string starts with a vowel.,"def start_vowel(input_string):
    vowel_list = [""a"", ""e"", ""i"", ""o"", ""u""] 
    if input_string[0] in vowel_list: 
      print(""String starts with a vowel"") 
    else:
      print(""String does not start with a vowel"")

start_vowel(""abc"")"
"edit an existing Python program so that it prints ""Hello, World!""","print('Hello, World!')"
Create a function in Python that takes a list of numbers as input and returns a list with the negative numbers from the given list.,"def get_negative_numbers(numbers):
  return [num for num in numbers if num < 0]"
Generate a bar chart using the given data in Python.,"import matplotlib.pyplot as plt

data = [10, 5, 20, 25, 15]

plt.bar(range(len(data)), data, color='blue')
plt.show()"
Create a Python program to calculate the median value of an array.,"def median(nums): 
    if len(nums)%2 == 0: 
        median1 = nums[int((len(nums)-1)/2)] 
        median2 = nums[int((len(nums))/2)] 
        median = (median1 + median2)/2
    else: 
        median = nums[int((len(nums))/2)]
    return median 
  
nums = [1, 5, 9, 11, 16, 21]
 print(median(nums))"
Write a Python function to convert USD to Euro and print the new value to the console.,"def usd_to_euro(amount):
  euro = amount * 0.9
  print(amount, ""USD is equal to"", euro, ""Euros."")
  
usd_to_euro(12.5)"
Write a Python script to generate 10 random numbers between 0 and 1 and store them in a list.,"import random

random_list = []

for i in range(10):
    random_list.append(random.random())

print(random_list)

Output:
[0.32233077981905054, 0.08449088355109318, 0.26706425230031013, 0.276595698659202, 0.5024115881862439, 0.7038010994199326, 0.4978053082374824, 0.954865052905624, 0.0981980238128365, 0.9497282414948095]"
Write a function in Python that chooses a random element from a list.,"import random 
  
def randomElement(list): 
    return random.choice(list) 

print(randomElement([1,2,3,4,5]))"
Generate a definition for a neural network layer using the Keras framework in Python.,"from keras.layers import Dense

# Define a Layer
model.add(Dense(units=64, activation='relu', input_dim=100))"
Develop a Python function that performs bubble sort to sort an array of numbers,"def bubble_sort(array):
    n = len(array)
    for i in range(n):
        for j in range(0, n - i - 1):
            if array[j] > array[j + 1]:
                array[j], array[j + 1] = array[j + 1], array[j]
    return array"
Develop a Python program to remove duplicates from a list of integers.,"def remove_duplicates(arr):
    seen = set()
    for elem in arr:
        if elem not in seen:
            seen.add(elem)
    return list(seen)"
Write a function to find the dissimilar elements in the given two tuples.,"def find_dissimilar(test_tup1, test_tup2):
  res = tuple(set(test_tup1) ^ set(test_tup2))
  return (res) "
Optimize a Python program that displays prime numbers up to a given number to make the program run faster.,"import math

def prime_sieve(n):
 sieve = [True] * (n+1)
 sieve[0] = False
 sieve[1] = False
 
 for i in range(2, int(math.sqrt(n)) + 1):
 if sieve[i]:
 for j in range(i*i, n+1, i):
 sieve[j] = False
 
 primes = [i for i in range(n+1) if sieve[i]]
 
 return primes

# Example usage
primes = prime_sieve(100)
print(primes)"
Write a Python program to print out all possible sums of two digits.,"def two_sum_digits():
 for i in range(0, 10):
  for j in range(0, 10):
   print(i + j)"
Create a function in Python to produce a list of all combinations of given elements from two different lists.,"def get_combos(list1, list2):
    combo_list = []
    for i in list1:
        for j in list2:
            combo_list.append([i, j]) 
    return combo_list

list1 = [1, 2, 3] 
list2 = [4, 5]

combos = get_combos(list1, list2)  
print(combos)

# Output: [[1, 4], [1, 5], [2, 4], [2, 5], [3, 4], [3, 5]]"
"Create a function in Python which takes a name as an argument and returns a message “Hello, <name>”","def hello(name):
    return ""Hello, ""+ name"
Write a Python program to optimize a given solution.,"def optimize_solution(solution):
 optimized_solution = solution.replace(""*"", ""
 times"")
 optimized_solution = optimized_solution.replace("" c ="", ""return a times b"")
 return optimized_solution"
Construct a Python program that checks if a string is a palindrome or not.,"def is_palindrome(string):
    left_pos = 0
    right_pos = len(string) - 1

    while right_pos >= left_pos:
        if string[left_pos] != string[right_pos]:
            return False
        left_pos += 1
        right_pos -= 1
    return True"
Create a Python code snippet that uses a try-except statement to capture an IndexError.,"try:
 my_list = [1, 2, 3]
 print(my_list[4])
except IndexError as e:
 print('Index not found!')"
Write a Python script to find the average of numbers stored in an array.,"def calculate_mean(numbers):
    total_sum = 0
    for num in numbers:
        total_sum += num
    mean = total_sum / len(numbers)
    return mean

print(calculate_mean([10, 20, 30]))"
Create a Python code to generate a Fibonacci sequence up to a given number..,"def generate_fibonacci_sequence(n):
 a, b = 0, 1
 fibonacci_sequence = []
 while a <= n:
  fibonacci_sequence.append(a)
  a, b = b, a + b
 return fibonacci_sequence


print(generate_fibonacci_sequence(12))  # Output: [0, 1, 1, 2, 3, 5, 8, 13]"
Generate a program to compare the lengths of two strings using Python.,"def compare_string_lengths(s1, s2):
 if len(s1) == len(s2):
 return 0
 elif len(s1) < len(s2):
 return -1
 else:
 return 1"
"Create a Python program to calculate the surface area of a triangle with sides of length 3, 4, and 5.","import math 

def area(a, b, c): 
	s = (a + b + c) / 2
	return (s*(s-a)*(s-b)*(s-c)) ** 0.5

a = 3
b = 4
c = 5

print('Surface Area of triangle is: {:.2f}'.format(area(a, b, c)))"
Develop an API in Python to convert between different units of measurement.,"# Dictionary with conversion factors
FACTORS = {
 'in': 2.54,
 'cm': 0.39,
 'ft': 30.48,
 'm': 1
}

def convert(from_unit, to_unit, value):
 """"""
 Convert between measurement units.
 """"""
 factor = FACTORS[from_unit]/FACTORS[to_unit]
 return factor * value

# Test the function
print(convert('in', 'cm', 10))    # Output: 25.4
print(convert('ft', 'm', 15))     # Output: 4.572"
"Update the Python program to calculate average of given numbers so that it takes an optional parameter. If set to True, the program should print the maximum among the given numbers instead of the average.","def calc_average(numbers, maximum=False):
 if maximum:
 return max(numbers)
 else:
 return sum(numbers) / len(numbers)"
Write a function to filter even numbers using lambda function.,"def filter_evennumbers(nums):
 even_nums = list(filter(lambda x: x%2 == 0, nums))
 return even_nums"
Categorize the following text into distinct classes using natural language processing techniques in Python.,"from sklearn.feature_extraction.text import CountVectorizer 
  
# create the transform 
vectorizer = CountVectorizer(token_pattern=r""(?u)\b\w+\b"") 
  
# tokenize and build vocab 
vectorizer.fit([text]) 
  
# summarize 
print(vectorizer.vocabulary_) 

# output {'apple': 0, 'banana': 1, 'cherry': 2}"
Generate a function in Python to sort a given list of strings by their length.,"def sortByLength(strings):
    return sorted(strings, key=len)

strings = ['cat', 'dog', 'goat', 'tiger', 'bird']

print(sortByLength(strings)) # Output: ['cat', 'dog', 'goat', 'bird', 'tiger']"
Generate a Python script to detect the number of capitalized words in a sentence.,"def count_capitals(s):
    count = 0
    arr = s.split(' ')
    for word in arr:
        if word[0].isupper():
            count += 1
    return count"
Optimize this Python code to run faster.,"def find_largest_number(numbers):
    largest = numbers[0] 
    for n in numbers[1:]:
        if n > largest:
            largest = n
    return largest"
Code a python function to combine two lists into a single list of tuples.,"def combine_lists(list1, list2):
    combined_list = [(list1[i], list2[i]) for i in range(len(list1))]
    return combined_list"
Create a python program which calculate gcd of two numbers,"def gcd(a, b): 
    if a == 0: 
        return b 
    return gcd(b % a, a) 
  
# Function to return gcd of a and b 
def compute_gcd(x, y): 
  
   while(y): 
       x, y = y, x % y 
  
   return x"
Create an algorithm in Python that replaces substrings in a given string,"# Define function
def replace_substring(string, substring, replacement):
    return string.replace(substring, replacement)
	
# Call function
print(replace_substring(""hello world"", ""world"", ""Earth"")) 
# Output hello Earth"
Create a Python program to calculate the Factorial of a positive integer.,"def Factorial(n): 
    if (n == 0): 
        return 1
    else: 
        return n * Factorial(n - 1) 
  
# Compute and print result 
result = Factorial(n) 
print(f""Factorial of {n} is {result}"")"
Create a Python program to create a dictionary with three items and add a fourth item.,"# create a dictionary
my_dict = {""fruit"": ""apple"", ""color"": ""red"", ""size"": ""medium""}

# add a fourth item
my_dict[""shape""] = ""round""

print(my_dict)"
Write a function to find the perimeter of a triangle.,"def perimeter_triangle(a,b,c):
  perimeter=a+b+c
  return perimeter"
Write a Python program to insert a given string at the beginning of all items in a list.,"def add_string_beginning(list_string, add_string):
    new_list = [add_string + str(item) for item in list(list_string)]
    return  new_list

list_string = ['Red', 'Green', 'Black']
add_string = 'White'

print(add_string_beginning(list_string, add_string)) # ['WhiteRed', 'WhiteGreen', 'WhiteBlack']"
Generate Python code that uses a list comprehension to take a given list of numbers and multiple each by 10.,"[x * 10 for x in [1,2,3,4]]"
Write a Python class to create objects that represent a movie and its properties.,"class Movie:
  def __init__(self, title, description, rating):
    self.title = title
    self.description = description
    self.rating = rating
 
  def print_info(self):
    print('Title: {}'.format(self.title))
    print('Description: {}'.format(self.description))
    print('Rating: {}'.format(self.rating))"
Write a Python function to find the maximum depth of a given binary search tree.,"def find_maximum_depth(tree):
    if tree is None: 
        return 0 
    else : 
        left_depth = find_maximum_depth(tree.left) 
        right_depth = find_maximum_depth(tree.right) 
        
        if (left_depth > right_depth): 
            return left_depth+1
        else: 
            return right_depth+1"
Write a Python program to classify the given dataset using k-means clustering.,"from sklearn.cluster import KMeans

def cluster_data(x_points, y_points):
 X = list(zip(x_points, y_points))
 clustering_model = KMeans(n_clusters=3)
 clustering_model.fit(X)
 labels = clustering_model.labels_
 return labels"
Construct a function in Python that takes in a number as an argument and prints out the double of the input.,"def double_num(n):
    return n*2

print(double_num(5))
# Outputs: 10"
Convert this Python list to a JSON object.,"import json

inputList = ['Apple', 'Banana', 'Coconut']
jsonObj = json.dumps(inputList)
print(jsonObj)"
Transform the following code to be in Python 3 syntax.,"x = input(""Enter a number: "")
x = int(x)"
Create a Python script that takes a number and prints the multiplication table for that number.,"num = 4 # Take input
  
# To take input from the user 
# num = int(input(""Display multiplication table of? "")) 
  
# Iterate 10 times from i = 1 to 10 
for i in range(1, 11): 
   print(num, 'x', i, '=', num*i)"
Create a Python program to find the root of a quadratic equation.,"def roots(a, b, c):
    disc = b*b - 4*a*c 
    root1 = (-b + math.sqrt(disc))/(2*a)
    root2 = (-b - math.sqrt(disc))/(2*a)
    return root1, root2"
Compute the dot product of two 1-d vectors using Python.,"def dot_product(x, y):
    result = 0
    for i in range(len(x)):
        result += x[i] * y[i]
    return result"
Implement an insertion sort algorithm in Python.,"def insertion_sort(list):
    for i in range(1,len(list)):
        key = list[i]
        j = i - 1
        while j>=0 and key < list[j]:
            list[j+1] = list[j]
            j-=1
        list[j+1] = key
    return list"
Write a python program to receive user input and calculate the sum of every number entered.,"numbers = []
while True:
    userInput = input(""Enter a number: "") 
    if userInput == 'done':
        break
    try:
        userInput = int(userInput)
        numbers.append(userInput)
    except ValueError:
        print(""Invalid input, please enter a valid number"")

print(""Sum of entered numbers : "" + str(sum(numbers)))"
Write a function to check if the given tuple contains all valid values or not.,"def check_valid(test_tup):
  res = not any(map(lambda ele: not ele, test_tup))
  return (res) "
Develop a Python program to create a frequency table for an array of integer elements.,"from collections import Counter

def frequency(arr):
    """"""
    Develop a Python program to create a frequency table for an array of integer elements
    """"""
    return Counter(arr)

if __name__ == '__main__':
    arr = [1,1,3,5,3,3,5] 
    print(frequency(arr))"
Write a Python program that takes in two sets and prints out the elements that are common to both sets.,"def common_elements(set1, set2):
 set_common = set1.intersection(set2)
 return set_common"
Design a Python program which takes a list of strings and prints the elements in reversed order.,"def list_reverse(sequence):
    if len(sequence) == 0:
        return []
    else:
        return list_reverse(sequence[1:]) + [sequence[0]]"
Build a Python program that finds the smallest number divisible by all the numbers in a given list,"def smallest_multiple(arr):
  min_num = min(arr)
  multiple = min_num

  while True:
    for x in arr:
      if multiple % x != 0:
        break
    else:
      return multiple
    multiple += min_num"
Create a Python function which takes a numerical list as an input and returns the list with each item multiplied by two.,"def multiply_by_two(mylist):
    new_list = []
    for item in mylist:
        new_list.append(item * 2)
    return new_list"
Create an algorithm in Python that takes an array of strings and removes all duplicates,"input_array = ['Apple', 'Orange', 'Apple', 'Mango', 'Banana', 'Mango']

unique_array = []
for item in input_array:
 if item not in unique_array:
 unique_array.append(item)

print(unique_array) #['Apple', 'Orange', 'Mango', 'Banana']"
Write a Python program to generate a 4-digit random number.,"import random

def generate_4_digit_random_number():
    return random.randint(1000, 9999)

if __name__ == '__main__':
    print(generate_4_digit_random_number())"
Define a function in Python to check if a number is even.,"def is_even(num): 
    if num % 2 == 0: 
        return True 
    else: 
        return False"
Make a Python program that finds the sum of the series from 0 to 50.,"sum = 0
for i in range(0,51):
	sum += i

print(""The sum of the series is:"", sum)"
Write a Python program to split a list into different variables,"value1, value2, value3 = my_list
print(value1)
print(value2)
print(value3)"
Convert the following imperative statement into a Python function.,"def add_numbers(a, b):
    '''This function will return the sum of two numbers'''
    return a + b"
Write a Python program to convert a given list to a dictionary with each item as a key-value pair.,"list = [(""a"", 1), (""b"", 2), (""c"", 3), (""d"", 4)]

d = dict(list)

print(d)
# Output: {'a': 1, 'b': 2, 'c': 3, 'd': 4}"
Build a linear regression model using python.,"import pandas as pd 
from sklearn.linear_model import LinearRegression 
from sklearn.metrics import mean_squared_error

# Read data
data = pd.read_csv('data.csv')
X = data[['x']]
y = data['y']

# Create a linear regression model
model = LinearRegression()
model.fit(X,y)

# Make predictions
predictions = model.predict(X)

# Calculate the mean squared error
mse = mean_squared_error(y, predictions)
print(mse)"
Convert a given Python function to a JavaScript function.,"function showMessage(message) {
 console.log(message);
}"
Write a Python program to sort a list of tuples by their second element.,"def sortBySecondElement(lst):
    # Sort the list of tuples by their second elements
    return sorted(lst, key=lambda x : x[1])

# Testing
lst = [(1, 3), (3, 2), (4, 1), (2, 4)]

sortedLst = sortBySecondElement(lst)

print(sortedLst)

# Output
# [(4, 1), (3, 2), (1, 3), (2, 4)]"
Write a Python program to create a list of tuples from two lists of equal length with each element in the tuple being the sum of the two corresponding elements in the lists.,"tuple_list = list(zip(list1, list2)) 
sum_list = [(x + y) for (x, y) in tuple_list]"
Create a function in Python to print out the names of the weekdays.,"def week_days():
  week_days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
  for day in week_days:
    print(day)
 
week_days()"
Create a Python script to detect any missing numbers in a given sorted array and return the missing numbers.,"def missingNumbers(arr):
        start = arr[0]
        end = arr[len(arr)-1]
        
        result = []
        
        for i in range(start, end+1):
            if i not in arr:
                result.append(i)
                
        return result

# Test Case
arr = [2, 3, 5, 6, 7, 8, 10]
print(missingNumbers(arr))

# Output:
# [4, 9]"
Design a Python program that asks a user to enter three numbers and prints out the largest one.,"def largest_of_three():
 num1 = int(input(""Enter the first number: ""))
 num2 = int(input(""Enter the second number: ""))
 num3 = int(input(""Enter the third number: ""))

 largest = max(num1, num2, num3)

 print(""The largest number is: "", largest)"
Develop a function to make an HTTP request using python and store the response into a variable.,"import requests

def http_request(url):
    response = requests.get(url)
    return response"
Write a Python function to detect geographical coordinates of a given address.,"(40.7588972, -73.9787129)"
Design an algorithm in Python that takes an array of integers and returns an array with no repeating integers.,"def removeDuplicates(arr):
 result = []
 for num in arr:
  if num not in result:
   result.append(num)
 return result
 
arr = [1, 2, 3, 2, 5, 4, 3, 1]
print(removeDuplicates(arr)) # should print [1, 2, 3, 5, 4]"
Create a Python script to extract all emails from a given list of web urls.,"import re
import requests

urls = [""http://example.com"", ""http://example.org""]

for url in urls:
 r = requests.get(url)
 emails = re.findall(r'[\w\.-]+@[\w\.-]+', r.text)
 print(emails)"
"Generate a Python class to represent a customer object with the following properties: name, email, and phone number.","class Customer:

def __init__(self, name, email, phone_number):
 self.name = name
 self.email = email
 self.phone_number = phone_number

def getName(self):
 return self.name

def getEmail(self):
 return self.email

def getPhoneNumber(self):
 return self.phone_number"
Write a python program to calculate the sum of consecutive numbers starting from 0 to a given number.,"#Calculate sum of consecutive numbers starting at 0

#Get input
num = 10

#Calculate and print result
sumNum = sum(range(0, num+1))

print(""The sum of consecutive numbers from 0 to 10 is :"", sumNum)"
Create a Python script which takes a list containing items and their prices and calculates the total cost.,"total = 0
items_with_price = [('Bread', 5.99), ('Cheese', 4.99), ('Milk', 2.99)]

for item, price in items_with_price:
 total += price

print(f'The total cost is ${total}')"
Write a Python program which includes a feature which can calculate the sum of all the numbers from 1 to user's given number.,"def sum(n): 
    sum = 0
    for i in range(1,n+1): 
        sum = sum + i 
    return sum"
"Write a Python class that stores the employee details such as name, age, salary etc.","class Employee:
   def __init__(self, name, age, salary):
      self.name = name
      self.age = age
      self.salary = salary"
Write a Python script to implement the quick sort algorithm on a list.,"def quick_sort(array):
    if len(array) < 2:
        return array
    pivot = array[0]
    less = [i for i in array[1:] if i <= pivot]
    greater = [i for i in array[1:] if i > pivot]
    return quick_sort(less) + [pivot] + quick_sort(greater)"
Edit the given Python program to print 'Happy Holidays' 10 times.,"for i in range(10):
    print('Happy Holidays')"
Create a python script to take in a number as input and output its binary equivalent.,"# Input number
n = int(input(""Enter a number: ""))

# Using format() 
print(""The binary equivalent of {} is:"".format(n), format(n, 'b'))"
Construct a Python class to represent a rectangle.,"class Rectangle:
    def __init__(self, width, height):
        self.width = width
        self.height = height

    def get_area(self):
        return self.width * self.height"
Write a function to find the item with maximum frequency in a given list.,"from collections import defaultdict
def max_occurrences(nums):
    dict = defaultdict(int)
    for i in nums:
        dict[i] += 1
    result = max(dict.items(), key=lambda x: x[1]) 
    return result"
Write a Python program that takes three strings as input and returns a new string that contains the sums of the first two strings.,"def combine_strings(str1, str2, str3):
    return str1 + str2 + str3

result = combine_strings(""Hello,"", "" World!"", "" Goodbye"")
print(result)"
Write a Python function that computes the area of a square using the side length as a parameter.,"def calArea(side):
	return side * side

if __name__ == '__main__':
	side = 5
	area = calArea(side)
	print('Area of Square = ', area)"
Write a function to find the next smallest palindrome of a specified number.,"import sys
def next_smallest_palindrome(num):
    numstr = str(num)
    for i in range(num+1,sys.maxsize):
        if str(i) == str(i)[::-1]:
            return i"
Create a python program to calculate the compound interest for a given principal amount and a given interest rate.,"# Python program to calculate the compound interest  
  
def compound_interest(principal, rate, time): 
  
    # Calculates compound interest  
    CI = principal * (pow((1 + rate / 100), time)) 
    print(""Compound interest is"", CI) 
  
# Driver Code  
compound_interest(1000, 9, 2)"
Write a Python program that uses a while loop to calculate a Fibonacci sequence up to the given upper limit.,"upper_limit = 10

fibonacci_sequence = [0, 1]

a = 0
b = 1

while b <= upper_limit:
 c = a + b
 a = b
 b = c
 fibonacci_sequence.append(b)

print(fibonacci_sequence) # Output: [0, 1, 1, 2, 3, 5, 8, 13]"
Create a python class that generates random numbers between a given range (inclusive).,"import random

class RandomNumberGenerator:
    def __init__(self, min_value, max_value):
        self.min_value = min_value
        self.max_value = max_value

    def generate_random_number(self):
        return random.randint(self.min_value, self.max_value)"
Develop a script in Python to find the longest common subsequence of two given strings.,"def lcs(X, Y, m, n):
    if m == 0 or n == 0:
        return 0
    elif X[m-1] == Y[n-1]:
        return 1 + lcs(X, Y, m-1, n-1)
    else:
        return max(lcs(X, Y, m, n-1), lcs(X, Y, m-1, n))

X = ""AGGTAB""
Y = ""GXTXAYB""
m = len(X)
n = len(Y)
print(""The length of LCS is "" + lcs(X, Y, m, n))"
"Implement a function for displaying integers from 1 to 10, using Python.","def print_numbers():
    for i in range(1, 11):
        print(i)

print_numbers()"
Develop a Python program that finds the maximum value in a given array.,"def findMax(arr):
  max = arr[0]
  for i in range(1, len(arr)):
    if max < arr[i]:
      max = arr[i]
  return max

max_num = findMax([1,2,7,4,5])
print(max_num)"
Create a class in Python for representing a simple counter.,"class Counter:
    def __init__(self):
        self.counter = 0

    def increase(self):
        self.counter += 1

    def decrease(self):
        self.counter -= 1

    def getter(self):
        return self.counter"
Create a Python program to generate strings of random alphabets.,"import random

def generator(length):
    alphabets = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
    return ''.join(random.choice(alphabets) for i in range(length))

print(generator(10))"
Write a Python script to calculate the sum of all the element of a given list.,"def my_function(my_list):
    #code
    return sum(my_list)"
Take a given Python program and refactor it using method chaining and higher order functions.,"def divisible_by_three_and_five(number):
 return (number % 3 == 0 and number % 5 == 0)"
Write a python script to compute the average value in an array.,"# Funciton to compute the average value in an array
def computeAverage(values):
 # Initialize sum
 sum = 0
 
 # Iterate through values
 for value in values:
 sum+=value
 
 # Compute average
 average = sum / len(values)
 
 # Return average
 return average
 
# Call function
computeAverage(values); // Returns 6.0"
"Create a class in Python to store employee details like name, age and salary.","class Employee:
    def __init__(self, name, age, salary):
        self.name = name
        self.age = age
        self.salary = salary
    
    def get_details(self):
        print(f""Name: {self.name}"")
        print(f""Age: {self.age}"")
        print(f""Salary: {self.salary}"")"
Write a function to find the frequency of each element in the given list.,"from collections import defaultdict 
def freq_element(test_tup):
  res = defaultdict(int)
  for ele in test_tup:
    res[ele] += 1
  return (str(dict(res))) "
Create a program using Python that adds two numbers entered by the user.,"# The function to add two numbers
def add(num1, num2):
  # Adding the two numbers
  result = num1 + num2
 
  # Printing the result
  print(f'The result of the addition is {result}')

# Taking the input from the user
num1 = int(input('Enter the first number: '))
num2 = int(input('Enter the second number: '))

# Calling the add function
add(num1, num2)"
Write a function to convert tuple into list by adding the given string after every element.,"def add_str(test_tup, K):
  res = [ele for sub in test_tup for ele in (sub, K)]
  return (res) "
Create a web service endpoint in Python to register a user's name by passing it as a parameter.,"from flask import Flask, request

app = Flask(__name__)

@app.route('/register', methods=['POST'])
def register_name():
    name = request.args.get('name')
    # Add code to register name
    return ""Name registered""


if __name__ == '__main__':
    app.run()"
Develop a python program to calculate the sum of all the odd numbers in a given range.,"def oddSumInRange(start, end):
    sum = 0
    for i in range(start, end+1):
        if i % 2 != 0:
            sum += i
    return sum

result = oddSumInRange(2, 10)
print(result)"
Write a Python program to remove the characters which have odd index values of a given string.,"def remove_odd_index_characters(string):
    result = """"
    for i in range(len(string)):
        if i % 2 == 0:
            result += string[i]
    return result

print(remove_odd_index_characters(""Hello World""))"
Create a Python function to check if two strings are anagrams of each other or not. An anagram is a String that contains the same characters as another String but in a different order,"def is_anagram(str1, str2):
    list_str1 = list(str1)
    list_str1.sort()
    list_str2 = list(str2)
    list_str2.sort()

    return (list_str1 == list_str2)"
Edit the following python class so that it is a singly linked list.,"class Node:
    def __init__(self, data):
        self.data = data
        self.next = None"
Write a Python program to calculate the area of a triangle given 3 sides.,"def area(side1, side2, side3):
    # calculate the semi-perimeter
    s = (side1 + side2 + side3)/2
    # calculate the area
    area = (s*(s-side1)*(s-side2)*(s-side3)) ** 0.5
    return area"
Write a Python program that takes a list of words and returns a dictionary where the keys are the words and the values are the lengths of the words.,"def word_lengths(words):
    lengths = {}
    for word in words:
        lengths[word] = len(word)
    return lengths

result = word_lengths(['cat', 'dog', 'kangaroo', 'tiger'])
print(result)"
"Generate a Python program to print a numbers pyramid of size n, with the first line of the pyramid containing n consecutive numbers.","n = int(input())
 
for i in range(1, n + 1):
 for j in range(1, i + 1):
  print(j, end="""")
 print("""")
 
for i in range(n - 1, 0, -1):
 for j in range(1, i + 1):
  print(j, end="""")
 print("""")"
"Create a class for the 'customer' entity in Python, providing  the following functionalities: get customer name and get customer phone number.","class Customer: 
   
    def __init__(self, name, phone_number): 
        self.name = name 
        self.phone_number = phone_number 
   
    def get_name(self): 
        return self.name 
  
    def get_phone_number(self): 
        return self.phone_number"
Use a Python library to visualize a Gaussian normal distribution with the mean set to 5 and the standard deviation set to 1.,"import matplotlib.pyplot as plt 
import numpy as np

mean = 5 
std = 1 
x = np.linspace(mean - 3*std, mean+3*std, 100)
plt.plot(x, 1/(np.sqrt(2*np.pi*std**2)) *np.exp(-(x-mean)**2/(2*std**2))) 
plt.show()"
Write a function to flatten the tuple list to a string.,"def flatten_tuple(test_list):
  res = ' '.join([idx for tup in test_list for idx in tup])
  return (res) "
Write a function to check if all values are same in a dictionary.,"def check_value(dict, n):
    result = all(x == n for x in dict.values()) 
    return result"
Write a Python program to print a multiplication table up to 10.,"def print_multiplication_table(n):
 for i in range(1, 11):
 print(""{} * {} = {}"".format(n, i, n*i))"
Create a Python program to find the the largest and smallest in a list,"def find_limits(numbers):
    largest = numbers[0]
    smallest = numbers[0]
    for num in numbers:
        if num > largest:
            largest = num
        if num < smallest:
            smallest = num
    
    return largest, smallest"
Write a Python code to calculate the root mean square error (RMSE) between two given lists of numbers.,"def rmse(A, B):
   """""" 
   Calculates the root mean square error between two given lists of numbers. 
   """"""
   RMSE = 0
   for i,j in zip(A,B):
       RMSE += (i-j)**2
   return (RMSE/len(A))**(1/2)


if __name__ == '__main__':
   A = [2.2, 3.07, 3.68, 1.33] 
   B = [1.17, 2.47, 2.57, 0.0]
   print(rmse(A, B))"
"Create a Python class for a car with three fields: make, model and color.","class Car:
 def __init__(self, make, model, color):
 self.make = make
 self.model = model
 self.color = color"
Compile this Python code into an executable.,"import py_compile

py_compile.compile('sample.py', cfile='sample.pyc')"
Implement a regression algorithm in Python to predict housing prices.,"import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression

# Load the data
data = pd.read_csv('data.csv')

# Define the inputs and labels
X = data[['square_feet', 'beds', 'baths']]
y = data['price']

# Create and train the model
model = LinearRegression()
model.fit(X, y)

# Test the model
predictions = model.predict(X)"
Create an API in Python to list out all directories and subdirectories from a given path.,"import os

def listDirectories(path):
    dirs = os.listdir(path)
    for dir in dirs:
        print(os.path.join(path, dir))
        if os.path.isdir(os.path.join(path, dir)):
            listDirectories(os.path.join(path, dir))"
Generate a function in Python that joins all the strings in a given list with a provided separator.,"def join_strings(strings, separator): 
    result = """" 
    for s in strings: 
        result += s + separator 
    return result[:-1]
  
# Example 
list_of_strings = [""Python"", ""is"", ""a"", ""programming"", ""language""] 
result = join_strings(list_of_strings, "" "") 
print(result) # Output: Python is a programming language"
Write a Python program to create a Caesar Cipher encryption for a given string.,"def encrypt(text,s): 
    result = """" 
  
    # traverse text 
    for i in range(len(text)): 
        char = text[i] 
  
        # Encrypt uppercase characters 
        if (char.isupper()): 
            result += chr((ord(char) + s-65) % 26 + 65) 
  
        # Encrypt lowercase characters 
        else: 
            result += chr((ord(char) + s - 97) % 26 + 97) 
  
    return result"
Write a Python program to present a web UI to the user.,"from flask import Flask, render_template

# Create app
app = Flask(__name__)

# Homepage
@app.route('/')
def homepage():
  return render_template('homepage.html')

# Run app
if __name__ == '__main__':
  app.run(debug=True)"
Write a function to iterate over all pairs of consecutive items in a given list.,"def pair_wise(l1):
    temp = []
    for i in range(len(l1) - 1):
        current_element, next_element = l1[i], l1[i + 1]
        x = (current_element, next_element)
        temp.append(x)
    return temp"
Generate a random number between 1 and 10 using Python.,"import random

# Generate a random number between 1 and 10
random_number = random.randint(1, 10)
print(random_number)"
Write a function to search an element in the given array by using binary search.,"def binary_search(item_list,item):
	first = 0
	last = len(item_list)-1
	found = False
	while( first<=last and not found):
		mid = (first + last)//2
		if item_list[mid] == item :
			found = True
		else:
			if item < item_list[mid]:
				last = mid - 1
			else:
				first = mid + 1	
	return found"
Generate a python code to concatenate two strings.,"def concat(s1, s2):
    return s1 + s2"
Create a Python program that randomly generates a 4x8 two-dimensional array with each cell containing a float number between 0 and 1.,"import random
 
# Generate random 4x8 two-dimensional array with each cell containing a float number between 0 and 1
def random_array():
    a_array = [[random.uniform(0, 1) for x in range(8)] for y in range(4)]
    return a_array
 
print(random_array())"
Create a Python program that takes in a list of numbers and finds the closest number to a given number.,"def find_closest(nums, target):
 closest_num = float('inf')
 for num in nums:
  if abs(target - num) < abs(target - closest_num):
   closest_num = num
 return closest_num

nums = [2, 4, 7, 8]
target = 5

print(find_closest(nums, target))"
Write a python function to find element at a given index after number of rotations.,"def find_Element(arr,ranges,rotations,index) :  
    for i in range(rotations - 1,-1,-1 ) : 
        left = ranges[i][0] 
        right = ranges[i][1] 
        if (left <= index and right >= index) : 
            if (index == left) : 
                index = right 
            else : 
                index = index - 1 
    return arr[index] "
"Given a list of words, construct a python dictionary of all the words with their length as the value.","word_lengths = {
    ""apple"": 5,
    ""strawberry"": 10,
    ""coffee"": 6
}"
Generate an optimized Python program to multiply two given matrices.,"def matrix_multiply(mat1, mat2):  
    result = [[0] * len(mat2[0]) for i in range(len(mat1))] 
    for i in range(len(mat1)): 
        for j in range(len(mat2[0])): 
            for k in range(len(mat2)): 
                result[i][j] += mat1[i][k] * mat2[k][j] 
  
    return result"
Write a function in Python which takes in a list of numbers and returns the most common element in the list.,"def most_common(mylist):
    return max(set(mylist), key = mylist.count)"
Generate Python code to print all Armstrong numbers between 1 and 1000.,"for num in range(1,1001):
    sum = 0
    temp = num
    while temp > 0:
        digit = temp % 10
        sum += digit ** 3
        temp //= 10
    if num == sum:
        print(num)"
Write a function to extract the index minimum value record from the given tuples.,"from operator import itemgetter 
def index_minimum(test_list):
  res = min(test_list, key = itemgetter(1))[0]
  return (res) "
Create a Python script to print out only the even numbers from a list of numbers.,"for num in list: 
    if (num % 2 == 0):
        print(num, end = ' ')"
Write a Python program to find the second highest number in the given list.,"def find_second_highest_num(nums):
    first_max = nums[0]
    second_max = float('-inf')
    for num in nums:
        if num > first_max:
            second_max = first_max
            first_max = num 
        if num < first_max and num > second_max:
            second_max = num
    return second_max

nums = [8,9,1,5,7]

print(find_second_highest_num(nums))"
Compose a Python program to insert an element at a given position in an array.,"def insert_element(arr, position, element):
    arr.insert(position, element)

print(insert_element([1, 4, 5, 7], 2, 6)) # Output: [1, 4, 6, 5, 7]"
Write a Python function to retrieve the frequency of elements in a given list.,"from collections import Counter

def get_frequencies(lst):
  return Counter(lst)

input_list = [1, 1, 2, 3, 4, 4]
frequencies = get_frequencies(input_list)

print(""Frequency of elements:"", frequencies)"
Design an algorithm in Python to read in a matrix of integers and print the sum of each row.,"def rowSum(matrix):
    row_sums = []
    for row in matrix:
        row_sum = 0
        for num in row:
            row_sum += num
        row_sums.append(row_sum)
    return row_sums

matrix = [[1, 2, 3],
          [4, 5, 6],
          [7, 8, 9]]

print(rowSum(matrix)) # [6, 15, 24]"
Create a function in Python to perform a binary search on a sorted array.,"def binary_search(arr, target):
  start = 0
  end = len(arr) -1
  while start <= end:
    mid = (start + end) // 2
    if arr[mid] == target:
      return mid
    elif arr[mid] > target:
      end = mid - 1
    else:
      start = mid + 1
  return -1"
Rewrite the following Python code using list comprehensions.,"def divisible(x):
    return [i for i in range(1, x) if (i % 3 == 0) or (i % 5 == 0)]"
Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.,"import re 
regex = '[a-zA-z0-9]$'
def check_alphanumeric(string): 
	if(re.search(regex, string)): 
		return (""Accept"") 
	else: 
		return (""Discard"") "
Generate a Python program-method to perform left rotation of an array,"def left_rotate_array(arr, d):
    n = len(arr)
    if d % n == 0: 
        return
    for _ in range(d):
        i = 0
        temp = arr[0]
        for i in range(n - 1):
            arr[i] = arr[i + 1]
        arr[n - 1] = temp

if __name__ == '__main__':
    arr = [1, 2, 3, 4, 5]
    d = 2
    left_rotate_array(arr, d)
    print(arr)"
Generate a random integer between 1 and 100 using python.,"import random

random_int = random.randint(1, 100)"
Classify the following code as either a python function or code section.,Code section.
Take this Python Code and optimize it.,"def count_items(items):
    item_counter = {}
    for item in items:
        item_counter[item] = item_counter.get(item, 0) + 1
    return item_counter"
Write a Python program to split a string into list such that each word is a seperate item in the list,"def split_string(string):
    return string.split(' ')"
Write a Python program to count the number of occurrences of each word in a given string.,"def count_words(string):
    lst = string.split()
    count_dict = {i: lst.count(i) for i in lst}
    return count_dict

string = ""Writing is one of the most difficult activities in the world""

word_count = count_words(string)

print(word_count)"
"Given a dictionary, write a Python code snippet to find all values that are greater than 5.","dictionary = {'a': 1, 'b': 3, 'c': 5, 'd': 7}

result = [item for item in dictionary.values() if item > 5]

print(result)

# Output:
[7]"
Generate a random password with 8 characters in Python.,"import string
import random

def generate_password():
    return ''.join(random.choice(string.ascii_letters + string.digits) for i in range(8))"
Write a Python program to generate all pairs of numbers whose sum is equal to a given number.,"def generate_pairs(n):
    lst = []
    for i in range(n+1):
        for j in range(i+1,n+1):
            if i + j == n:
                lst.append((i,j))
    return lst"
Create a bash script that runs an application on startup.,"#!/bin/bash
sudo echo ""@python3 my_app.py"" >> /etc/rc.local
sudo chmod +x /etc/rc.local"
Write a Python script that generates a histogram given a list of numbers.,"import matplotlib.pyplot as plt 
  
# x-axis values 
x = [1,2,3,4,5,4,3,2,1] 
  
# Y-axis values 
y = [1,2,3,4,5,4,3,2,1] 
  
# Function to plot the histogram 
plt.hist(x, y, histtype = 'bar', rwidth = 0.8) 
  
# Deifne labels and titles 
plt.xlabel('x') 
plt.ylabel('y') 
plt.title('Histogram') 
  
# Function to show the plot 
plt.show()"
Create a web-scraping script with Python to extract information from a website with 20 thousand pages.,"import requests
import bs4

url = 'https://example.com'

while True:
 response = requests.get(url)
 soup = bs4.BeautifulSoup(response.text, 'html.parser')

 # Extract information here

 next_page_url = soup.find('a', {'class': 'next-page'})
 if next_page_url:
 url = next_page_url['href']
 else:
 break"
Create a Python script to format a string into a list,"string = ""Hello, World, I am here""

list = string.split("", "")
print(list)

# Output
['Hello', 'World', 'I am here']"
Write a script in Python that can determine if a year is a leap year or not.,"def is_leap(year):
    if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:
        return True
    else:
        return False"
Build a web scraping script in Python that stores the HTML content of a website in a variable.,"import urllib.request

url = 'https://www.example.com'

html_content = urllib.request.urlopen(url).read()"
Build a linear search algorithm with Python.,"def linear_search(arr, value):
    for i in range(len(arr)):
        if arr[i] == value:
            return i
    return -1

arr = [3, 4, 10, 15, 23, 42]
value = 10

index = linear_search(arr, value)
if index == -1:
    print('Value not found in array.')
else:
    print('Value found at index ' + str(index) + '.')"
Construct a Python function to convert a string of text to uppercase.,"def upper_string(str1):
    upper_str = ''
    for i in range(len(str1)):
        if ord(str1[i]) in range(97, 123):
            upper_str += chr(ord(str1[i]) - 32)
        else:
            upper_str += str1[i]
    return upper_str"
Create an application in Python to convert temperatures from Celsius to Fahrenheit,"def celsius_to_fahrenheit(celsius):
    return celsius * 9/5 + 32

celsius = float(input(""Enter the temperature in Celsius: ""))
fahrenheit = celsius_to_fahrenheit(celsius)
print(""The temperature in Fahrenheit is: "", fahrenheit)"
Write a Python program to optimize a given set of rules specified by the user.,"def optimize_rules(rules):
    optimized_rules = []

    # Add your code here

    return optimized_rules"
Design a function in Python that takes a decimal number and returns its binary equivalent.,"def dec_to_bin(number):
  # Convert decimal to binary
  binary = bin(number)
  # Remove prefix ""0b""
  binary = binary[2:]
  # Return binary
  return binary
  
decimal = 10
binary = dec_to_bin(decimal)
print(binary)"
Write a Python program to print the numbers from 1 to 10 using a 'for' loop,"for i in range(1, 11):
    print(i)"
Create a Python function that takes two lists and returns a list of all elements in common between them.,"def find_common_elements(list1, list2):
  common_elements = []
  for i in list1: 
    if i in list2: 
        common_elements.append(i) 
  return common_elements"
Create a function that takes in a string and evaluates it according to Python's syntax rules.,"def evaluate_string(str):
 try:
 result = eval(str)
 return result
 except SyntaxError:
 return ""Syntax Error"""
Develop an algorithm in Python that takes a list of strings as an input and sorts them alphabetically.,"def sortAlphabetically(strings): 
    strings.sort() 
    return strings 

#Test 
strings = [""hello"", ""world"", ""good"", ""morning"", ""programming""]
sorted_strings = sortAlphabetically(strings) 
print(*sorted_strings)"
Write a Python code snippet that takes a list of numbers as argument and prints the average.,"def average(numbers: list):
    if numbers:
        return sum(numbers) / len(numbers)
    else:
        return 0
    
numbers = [2, 3, 4, 5, 6]
print(f""Average of {numbers} is {average(numbers)}"")"
Create a code snippet in Python to find the missing number in an array of length n-1 when all numbers from 1 to n are present.,"def missing_number(nums): 
     
    full_list = list(range(1,len(nums)+1))
    return (set(full_list) - set(nums)).pop()

nums = [7, 5, 6, 4, 2]
result = missing_number(nums) 
print('Missing number is', result)"
Write an API endpoint in Python which takes a JSON object as an input and returns a modified version of the same object.,"@app.route('/api', methods=['POST'])
def api():
 data = request.get_json()
 data['age'] = data['age'] + 2
 return jsonify(data)"
Generate a random string that consists only of letters and digits using python,"import string
import random

def generate_string():
    letters_and_digits = string.ascii_letters + string.digits
    result = """".join(random.choice(letters_and_digits) for i in range(8))
    return result"
Write a Python function to implement Quicksort.,"def quick_sort(arr):
    if len(arr) <= 1:
        return arr
    else:
        pivot = arr[len(arr) // 2]
        left = [x for x in arr if x < pivot]
        middle = [x for x in arr if x == pivot]
        right = [x for x in arr if x > pivot]
        return quick_sort(left) + middle + quick_sort(right)

print(quick_sort([3,6,8,10,1,2,1]))"
Generate a reverse string of each word present in the list.,"def reverseStringOfList(list):
    revList = []
    for string in list:
        revList.append(string[::-1])
    return revList

result = reverseStringOfList([""Python"", ""Java"", ""C++""])
print(result)"
Generate a piece of code for raising an exception in Python.,"raise Exception(""This is an exception"")"
Write a Python program that will create a histogram of a given set of data.,"import matplotlib.pyplot as plt 

# Data to plot
data = [0, 4, 5, 10, 11, 15]

# Create a histogram 
plt.hist(data, bins = [0,5,10,15,20])

# Label the x and y axis 
plt.xlabel(""Value"") 
plt.ylabel(""Number of Occurrences"") 

# Show the plot 
plt.show()"
"Create a Python program that will take a list of integers and output the sum, average, largest value, and smallest value of the list.","list_input = [-2, -4, 0, 5, 10]

list_sum = sum(list_input)
print(""Sum: "" + str(list_sum))

list_average = sum(list_input) / len(list_input)
print(""Average: "" + str(list_average))

list_max = max(list_input)
print(""Largest value: "" + str(list_max))

list_min = min(list_input)
print(""Smallest value: "" + str(list_min))"
Create a Python program to remove the given item from a list.,"def remove_item(lst, item):
    while item in lst:
        lst.remove(item)
    return lst

result = remove_item([1, 2, 3, 4], 2)
print(result)"
Write Python code to classify a lead email.,"# Detect the intent of the email
intent = ""lead""

# Label the email
label = ""Lead"""
"Using the library Requests, write a Python code to download a webpage.","import requests

def download_webpage(url):
    '''
    Function to download a webpage using Requests library
    '''
    response = requests.get(url)
    #response.raise_for_status()
    return response.text

url = 'http://example.com'
webpage = download_webpage(url)
print(webpage)"
Construct a Python program to check if a given array of numbers is sorted in ascending order or not.,"def is_sorted(arr):
    return arr == sorted(arr)

print(is_sorted([1, 2, 3, 4]))"
Create an algorithm in Python to print all the prime numbers between two given numbers.,"def printPrimeNumbers(start, end):
 
 for num in range(start, end + 1):
   if num > 1:
      for i in range(2, num):
          if (num % i) == 0:
              break
      else:
          print(num)
          
start = 2
end = 10
print(""Prime numbers between"", start, ""and"", end, ""are:"")
printPrimeNumbers(start, end)"
Create a python function to extract the intersection of two lists.,"def intersection(listOne, listTwo):
    return list(set(listOne).intersection(set(listTwo)))"
Create a set of python functions and classes to build a shell command processor.,"class Command():
    def __init__(self, command_name, params):
        self.command_name = command_name
        self.params = params

    def is_valid_command(self):
        # Your code here
        pass

def process_command(command):
    # Your code here
    pass"
Create a Python script that scrapes a website for all the external links present in the page.,"import requests 
from bs4 import BeautifulSoup 
  
def extract_links_from_url(url): 
  
    # make a request to the URL  
    r = requests.get(url) 
  
    # create a beautiful soup object  
    soup = BeautifulSoup(r.content,'html5lib') 
  
    # find and return hyperlinks(a tags)  
    return [link['href'] for link in soup.find_all('a', href=True)]"
Can you find the smallest number in a given list using Python?,"def smallest_num(lst):
   min_num = lst[0]
   
   for num in lst:
       if num < min_num:
           min_num = num
           
   return min_num

lst = [4, 5, 6, 7, 8, 1, 2]

print(smallest_num(lst))"
Devise an algorithm in Python that takes an array and returns a histogram of the occurrences of each element in the array.,"def histogram(arr):
    hist = {}
    for num in arr:
        if num in hist:
            hist[num] += 1
        else:
            hist[num] = 1
    return hist"
Create a basic HTTP endpoint in Python that returns multiple parameters as a dictionary.,"@app.route('/multiple_params', methods=['GET'])
def multiple_params(): 
    name = request.args.get('name') 
    age = request.args.get('age') 
    city = request.args.get('city') 
    response = { 
        'name': name, 
        'age' : age, 
        'city': city 
    } 
    return jsonify(response)"
create a function in Python that takes an array of integers and returns a string of the array in reverse order.,"def reverse_list(arr):
    rev_arr = []
    for i in range(len(arr)-1,-1,-1):
        rev_arr.append(arr[i])
    return ''.join(map(str,rev_arr))

arr = [1, 3, 5, 7]
output_string = reverse_list(arr) 
print(output_string)"
"Construct a program, in Python code, to identify all the anagrams of a given word","def find_anagrams(word):
    word_list = list(word)
    anagrams = []
    for i in range(len(word_list)):
        for j in range(i+1,len(word_list)+1):
            anagram = ''.join(word_list[i:j])
            if anagram != '' and anagram != word and anagram not in anagrams:
                anagrams.append(anagram)
    return anagrams"
Write a python function to check whether the value exists in a sequence or not.,"def overlapping(list1,list2):  
    c=0
    d=0
    for i in list1: 
        c+=1
    for i in list2: 
        d+=1
    for i in range(0,c): 
        for j in range(0,d): 
            if(list1[i]==list2[j]): 
                return 1
    return 0"
Create an algorithm in Python to count the number of unique elements in a list.,"def countUnique(arr):
    # create a lookup to keep track of elements
    lookup = set()
    # loop over list to add elements to set
    for elem  in arr:
        if elem not in lookup:
            lookup.add(elem)
    # return the length of the lookup set
    return len(lookup)

# test program
arr = [1, 2, 3, 1, 2]
print(countUnique(arr))"
"Given the following JSON input, write a Python program to calculate the average age of all the users.","import json

users = json.loads(input)
total_age = 0
for user in users:
 total_age += user[""age""]

average_age = total_age / len(users)

print(f""Average age of users is {average_age}"")"
Relace a for loop with appropriate list comprehension in a Python program.,"list = [x**2 for x in [1, 2, 3, 4, 5, 6]]"
Write a Python program to print food items along with their prices from a given dictionary of food items and prices.,"for item, price in food_items.items():
 print(f'{item}: ${price}')"
"In Python, create a function that takes a character as input and returns its ASCII value.","def getAsciiValue(char): 
    return ord(char)"
Create a basic REST API in Python using Flask that responds to a GET request with a list of strings.,"from flask import Flask, request, jsonify

app = Flask(name)

@app.route('/request', methods=['GET'])
def getRequest():
    myList = ['string1', 'string2', 'string3']
    return jsonify(myList)

if name == 'main':
 app.run(debug=True)"
Construct an algorithm in Python to sort the elements of an array in decreasing order.,"def sortDecreasing(arr):
    for i in range(len(arr)): 
        for j in range(i+1, len(arr)): 
            if arr[i] < arr[j]: 
                arr[i], arr[j] = arr[j], arr[i] 
    return arr
arr = [4, 7, 1, 3, 5, 2]
print(sortDecreasing(arr))

# Output: [7, 5, 4, 3, 2, 1]"
"Using recursion, write a Python program to find the Nth Fibonacci number.","def Fibonacci(n): 
    if n<0: 
        print(""Incorrect input"") 
    elif n==0: 
        return 0
    elif n==1: 
        return 1
    else: 
        return Fibonacci(n-1)+Fibonacci(n-2)"
Create a Python web application using the Flask framework that returns the sum of two numbers.,"from flask import Flask, request


app = Flask(__name__)

@app.route('/get_sum', methods=['GET'])
def get_sum():
num1 = request.args.get('num1', type=int)
num2 = request.args.get('num2', type=int)
sum = num1 + num2
return str(sum)

if __name__ == ""__main__"":
 app.run(debug=True)"
Compile the following Python code using Python 3.,"python3 hello.py
# output: Hello, World!"
Create a Python program to linear search a given list of elements.,"#Linear search function 
def linear_search(list, x): 
	for i in range(len(list)): 
		if list[i] == x: 
			return i 
	return -1"
"Write a Python program to compute the sum of values of a given dictionary, where each item in the dictionary has a key and a value associated with it.","def get_dict_sum(d): 
    summ = 0
    for key, val in d.items(): 
        summ += val
    return summ
print(get_dict_sum(d))"
Write a Python 3 script that reads input from stdin line by line and prints the number of occurrences of each word.,"import sys

dictionary={}

for line in sys.stdin:
 words_in_line = line.split()
 for word in words_in_line:
 word=word.lower()
 if word in dictionary:
 dictionary[word]+=1
 else:
 dictionary[word]=1

for word in dictionary:
 print(word +"":""+ str(dictionary[word]))"
"Generate a Python program that take a list y and a number n, and rotate y by n.","def rotate(y , n):
    temp = y[0:n]
    for i in range (len(y) - n):
        y[i] = y[n + i]
    for i in range (n):
        y[i + len(y) - n] = temp[i]
    return y"
Write an efficient Python program to search for an element in a list of integers.,"def search_element(l, x):
    for i in range(len(l)):
        if l[i] == x:
            return i
    return -1"
Create a program in Python to find the maximum value in a given sequence.,"def findMaxValue(arr):
    max_val = arr[0]

    for i in range(1, len(arr)):
        if arr[i] > max_val:
            max_val = arr[i]

    return max_val

arr = [3, 4, 6, 2, 8, 9, 5]
maxValue = findMaxValue(arr)
print('Max value in given array is: {}'.format(maxValue))"
Generate Python code to remove all punctuation from the given string.,"import string

str = ""This, is a test-string.""
str = str.translate(str.maketrans('', '', string.punctuation))
print(str)"
Write a Python script to fetch the current stock price of a given company,"from yahoo_fin import stock_info as si

def get_stock_price(name):
    data = si.get_live_price(name)
    return data

if __name__ == '__main__':
    name = 'ABC'
    print(get_stock_price(name))"
Perform classification on the given dataset using Support Vector Machines in Python.,"from sklearn.svm import SVC

model = SVC(kernel = 'linear', probability=True) 
model.fit(X, y)"
Write a Python program that calculates the largest prime factor of a given number.,"def is_prime(num):
 for i in range(2, int(num**0.5) + 1):
  if num % i == 0:
   return False
 return True

def largest_prime_factor(n):
 for i in range(2, n + 1):
  if n % i == 0 and is_prime(i):
   lpf = i
 return lpf

print(largest_prime_factor(60))
# Output: 5"
Use a machine learning algorithm to classify emails into two categories: junk and non-junk using Python.,"from sklearn.naive_bayes import MultinomialNB

# Load training data
X_train = ...
y_train = ...

# Create classifier
clf = MultinomialNB()   

# Train the classifier
clf.fit(X_train, y_train)   

# Make predictions
y_predicted = clf.predict(X_test)"
Create a Python program to calculate the factorial of a given integer.,"def factorial(n):
    if n == 0:
        return 1

    return n * factorial(n-1)

result = factorial(5)
print(result)"
Create a Python script for generating a random password of length 8.,"import string
import random
 
def generatePassword(length):
 
 chars = string.ascii_lowercase + string.ascii_uppercase + string.digits
 password = ''.join(random.choice(chars) for i in range(length))
  
 return password
 
randomPassword = generatePassword(8)
print(randomPassword)"
"Convert the following linear programming problem into a standard form and write a Python program to solve it. 

Maximize: 2x + 3y

Subject to the constraints:

x + 2y ≤ 10
3x - y ≥ 6","import numpy as np
from scipy.optimize import linprog

# Transform the problem to standard form
c = np.array([2, 3])
A_ub = np.array([[1,2],[-3,1]])
b_ub = np.array([10, -6])

# Solve the problem
res = linprog(-c, A_ub, b_ub)

# Print the solution
print(res)"
Convert a given Python function to a JavaScript function.,"function factorial(n) {
    if (n == 1) {
        return 1;
    }
    else {
        return n * factorial(n-1);
    }
}"
Write a python code that takes a string as a parameter and returns the number of different words present in that string.,"def word_count(string):
    words = string.split()
    return len(set(words))

if __name__ == '__main__':
    output = word_count(""The quick brown fox jumped over the lazy dog"")
    print(output)"
Design a program in Python to take two numbers as input and return their product.,"def multiply(num1, num2):
    product = num1 * num2
    return product

num1 = 5
num2 = 7

product = multiply(num1, num2)
print('Product of', num1, 'and', num2, 'is', product) # prints 'Product of 5 and 7 is 35'"
"Generate a Python script that takes two arguements, a filename and a number, and prints out all the lines from the filename whose length is less than the number.","import sys

file_name = sys.argv[1]
number = int(sys.argv[2])

with open(file_name, 'r') as f:
 for line in f:
 if len(line) < number:
 print(line, end='')"
Automate the following task to be completed on Python,"def is_prime(num):
    if num <= 1:
        return False
    for i in range(2, num):
        if num % i == 0:
            return False
        return True"
Create a Python function which takes a list of strings as an input and determines if the list contains palindrome strings (i.e. strings that are the same forward and backwards).,"def is_palindrome(list_of_strings):
  palindrome_list = [string for string in list_of_strings if string == string[::-1]]
  if palindrome_list:
    return True
  return False"
Construct a Python program to combine the elements of two lists into a list of tuples.,"def combine_list(array1, array2):
    return list(zip(array1, array2))"
Write a Python program to convert a string to a list of characters.,"def str_to_list(str):
    char_list = []
    for c in str:
        char_list.append(c)
    return char_list

print(str_to_list(""Hello"")) #prints ['H', 'e', 'l', 'l', 'o']"
"Write a Python function that takes a string, checks if it is a palindrome and returns true or false.","def is_palindrome(string):
    rev_string = string[::-1]
    if string == rev_string:
        return True
    else:
        return False 

print(is_palindrome(""level""))"
"Write a Python script to generate a random 3 X 3 matrix of integers in the range [1, 9].","import random

# Generate a random 3 X 3 matrix of integers in the range [1, 9].
matrix = [[random.randint(1, 9) for _ in range(3)] for _ in range(3)]

for row in matrix:
 print(row)"
Write a Python program to insert a given string at the beginning of all items in a list.,"_list = ['digger', 'dog', 'deer']
string = 'The'

# Create an empty list to store the modified elements
new_list = []

# Iterate through the old list and create the modified list
for item in _list:
    new_list.append(string + ' ' + item)

# Print the modified list
print(new_list) # Output: ['The digger', 'The dog', 'The deer']"
Edit a python method to assign a grade based on a given exam marks.,"def assign_grade(marks):
    if marks >= 90:
        return 'A'
    elif marks >= 80 and marks < 90:
        return 'B'
    elif marks >= 70 and marks < 80:
        return 'C'
    elif marks >= 60 and marks < 70:
        return 'D'
    else:
        return 'F'"
Translate a given program written in Python to Java.,"public static double calculateMean(int[] numbers) {
    int total = 0;
    for (int i : numbers) {
        total += i;
    }
    double mean = total / numbers.length;
    return mean;
}"
Build a Python function that takes in two integers and returns the greatest common divisor.,"def gcd(a, b):
    if b == 0:
        return a
    return gcd(b, a % b)

print(gcd(4, 8)) # Output: 4"
"Construct a Python class named “Car” that has 3 fields: top_speed, make, and color.","class Car:
    def __init__(self, top_speed, make, color):
        self.top_speed = top_speed
        self.make = make
        self.color = color"
Generate a python program to print out all the factors of a number n.,"def factor_of(n):
    result = []
    for i in range(1, n + 1):
        if n % i == 0:
            result.append(i)
    return result"
Generate a valid python program to calculate the frequency of occurrence of a character in a given string.,"def char_frequency(string):
    frequencies = {}
    for char in string:
        if char in frequencies:
            frequencies[char] += 1
        else:
            frequencies[char] = 1
    return frequencies

freq = char_frequency(""Hello World!"")
print(freq)"
Write a Python function to multiply all the numbers in a list.,"def multiplyList(numbers):
  result = 1
  for x in numbers:
    result = result * x
  return result"
Write a python function to check whether the given strings are rotations of each other or not.,"def are_Rotations(string1,string2): 
    size1 = len(string1) 
    size2 = len(string2) 
    temp = '' 
    if size1 != size2: 
        return False
    temp = string1 + string1 
    if (temp.count(string2)> 0): 
        return True
    else: 
        return False"
Generate a correct python program to initialize a dictionary of user-defined size.,"def initialize_dict(size):
    my_dict = {}
    for i in range(size):
        my_dict[i] = None
    return my_dict"
"Using Python, create a program to convert the string 'Hello, world!' to titlecase.","import string

def toTitlecase(inputString):
    return inputString.title()

print(toTitlecase(""Hello, world!""))"
Edit the following code to make it compatible with python 3 syntax,"def divide(x, y):
    return x / y"
Create a function to create a NxN matrix in Python with all elements equal to a given number.,"def mat_gen(N, num):
    matrix = [[num for col in range(N)] for row in range(N)]
    return matrix

mat_gen(5, 7)"
Write a function in Python that takes a list of strings and a string as input and adds the string as the last item in the list.,"def add_string_to_list(string_list, string):
 string_list.append(string)
 
 return string_list
 
# sample call
list = ['apple', 'orange', 'banana']
string = 'kiwi'
new_list = add_string_to_list(list, string)

print(new_list)
# ['apple','orange','banana','kiwi']"
Write a Python program to create a dictionary from a given list of integers that contains elements from 1 to the given number.,"def create_dict(number):
    dict_N = dict()
    for i in range(1, number+1):
        dict_N[i] = i

    return dict_N

dict_N = create_dict(5)
print(dict_N)"
Write a function to find the depth of a dictionary.,"def dict_depth(d):
    if isinstance(d, dict):
        return 1 + (max(map(dict_depth, d.values())) if d else 0)
    return 0"
Write a Python program to generate a dictionary of numbers from 1 to 4 (both included) and their squares.,"myDict = {}

for i in range(1,5):
 myDict[i] = i**2

print(myDict)"
Write a Python program to remove the nth index character from a nonempty string.,"def remove_nth_index(text, n):
    return text[:n] + text[n + 1:]"
Modify the given Python function to print out the reversed list first and then find the sum of the numbers.,"def reverse_list(numbers):
 reversed_list = numbers[::-1]
 print(reversed_list)
 return sum(reversed_list)"
Create a Python function to encode a given sentence into base64.,"import base64

def encodeInBase64(msg):
    msg_bytes = msg.encode('ascii')
    base64_bytes = base64.b64encode(msg_bytes)
    base64_message = base64_bytes.decode('ascii')

    return base64_message"
Write a Python program that prints all pairs of numbers between 0 and 5 (inclusive).,"for i in range(0,6):
    for j in range(0,6):
        if i != j:
            print(i,j)"
Modify a python program so that it can sort the list of numbers in ascending order.,"numbers = [3, 5, 9, 1, 2] 

numbers.sort() 

print(numbers)"
Create a list of all prime numbers from 1 to 1000 using Python.,"# Create an empty list 
prime_list = []

# loop 1 to 1000
for num in range(2,1001):
    prime = True
    for i in range(2,num):
        if (num % i == 0):
           prime = False
    if prime:
       prime_list.append(num)

print(""Prime numbers from 1 to 1000 are:"")
print(prime_list)"
Write a function to round the given number to the nearest multiple of a specific number.,"def round_num(n,m):
    a = (n //m) * m
    b = a + m
    return (b if n - a > b - n else a)"
Write a python script which reformats the json string below,"import json

def reformat_json(data):
    data = json.loads(data)
    return json.dumps(data, indent=4)

data = '{""name"":""Jason"",""age"":42,""favorite_food"":""Lasagna""}'
updated_data = reformat_json(data)

print(updated_data)
# {""name"": ""Jason"",
#  ""age"": 42,
#  ""favorite_food"": ""Lasagna""}"
"Create a Python program that reads in a CSV, parse the data, and generates a JSON report.","import csv
import json
 
csv_file = open('data.csv', 'r')
json_file = open('data.json', 'w')
 
fieldnames = (""Name"",""Age"",""Profession"")
reader = csv.DictReader(csv_file, fieldnames)
out = json.dumps([r for r in reader])
json_file.write(out)"
"Design and implement a Python program to print out the numbers from 1 to 100, but replace any number divisible by 3 with ""Fizz"" and any number divisible by 5 with ""Buzz"".","for i in range(1,101):
    if (i % 15 == 0):
        print(""FizzBuzz"")
    elif (i % 3 == 0):
        print(""Fizz"")
    elif (i % 5 == 0):
        print(""Buzz"")
    else:
        print(i)"
Write a Python script to fold a given array of integers into two halves.,"def foldArray(arr): 
    n = len(arr) 
    if n % 2 != 0: 
        mid = int(n / 2) + 1
    else: 
        mid = int(n / 2)
    left = arr[:mid] 
    right = arr[mid:] 
    newarr = list(map(lambda x,y:(x+y),left,right[::-1])) 
    return newarr 

arr = [1, 7, 3, 4, 9] 
print(foldArray(arr))"
Develop a python program to create an XML document.,"from xml.etree.ElementTree import Element, SubElement, tostring

def create_xml_document():
    root = Element('root')
    child1 = SubElement(root, 'child1')
    child2 = SubElement(root, 'child2')
    return tostring(root).decode()"
Create an algorithm in Python to group the numbers of an array in such a way that the total sum of each group is equal.,"def group_equal_sum(arr):
    result = []
    arr.sort()

    while len(arr) > 0:
        group = [arr[0]]
        arr.remove(arr[0])

        sum_ = group[0]
        while sum_ in arr:
            group.append(sum_)
            arr.remove(sum_)
            sum_ += 1

        result.append(group)
    return result"
Generate a function for converting JSON data to a Python object.,"""""""
Generate a function for converting JSON data to a Python object
""""""

import json

def json_to_object(json_data):
    return json.loads(json_data)"
Write a Python script that filters a list of integers and returns only even numbers.,"def filter_even_numbers(lst):
    # Filter out even numbers from the given list 
    even_numbers = [num for num in lst if num % 2 == 0]
    return even_numbers

list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
result = filter_even_numbers(list)
print(result)"
"Construct a Python program to read in a sequence of numbers, find the largest number and its position in the sequence.","sequence = [3, 2, 5, 1, 9]

# finding the largest number
max_num = max(sequence)

# finding the index of the largest number in the sequence
index = sequence.index(max_num)

print(""The largest number in the sequence is:"", max_num)
print(""The position of the largest number in the sequence is:"", index)"
Create a Python 3 program that prints out the numbers from 1 to 10 in reverse order.,"for i in range(10, 0, -1):
    print(i)"
Write a Python program to sort a list of tuples by the second item in each tuple.,"# sort a list of tuples by the second item in each tuple
def sort_tuple(tuples):
    # sort in ascending order
    tuples.sort(key=lambda x: x[1])
    # return the list
    return tuples"
Optimize this code snippet in Python.,"data = [1, 2, 3, 4, 5, 6]
sum = 0

sum = sum + sum(data) # This is more efficient than iterating through the whole list with a `for` loop."
Write a Python program to print the Fibonacci series up to given number,"def fibonacci(num): 
  x, y = 0, 1
  while x < num:
    print(x)
    x, y = y, x + y

fibonacci(20)"
Implement a function in Python that takes an array of strings and returns a list of all strings that have length greater than 6,"def getStringsWithLength(array):
    output = []
    for x in array:
        if len(x) > 6:
            output.append(x)
    return output

print(getStringsWithLength([""testing"", ""this"",""array""]))"
Improve the efficiency of a Python program by using functions.,"arr = [1, 2, 3, 4, 5]

def calculate(arr):
    return sum(arr)

def main():
    print(calculate(arr))

if __name__ == '__main__':
    main()"
"Create a Python program to simulate a vending machine with two coins, a quarter and a dime.","class VendingMachine:
    def __init__(self):
        self.coins_inserted = 0

    def insert_coins(self, quarters, dimes):
        self.coins_inserted += quarters * 25 + dimes * 10

    def get_coins_inserted(self):
        return self.coins_inserted"
Write a Python function to generate the Fibonacci series up to the nth term.,"def fibonacci(n):
    fib = [0, 1]
    for i in range(2, n):
        fib.append(fib[i-1] + fib[i-2])
    return fib"
Write a python function to parse a list of strings and extract the date that appears at the end of the strings?,"def parse_list_of_strings(list_of_strings):
    date_list = []
    for string in list_of_strings:
        date_to_add = datetime.strptime(string, '%B %dth, %Y')
        date_list.append(date_to_add)
    return date_list"
Write a Python program to check if a number is prime by eliminating the multiples of all numbers from 2 to the square root of the number.,"import math

def is_prime(n):
    for i in range(2, int(math.sqrt(n))+1):
        if n % i == 0:
            return False
    return True

print(is_prime(n))"
Create a Python program to generate a 3x3 random pattern of circles and squares.,"import numpy as np
import random

# Generates a random pattern of circles and squares
def generatePattern():
 pattern = np.zeros((3,3))
 for i in range(9):
  pattern[i//3, i%3] = random.choice([0, 1])
 
 return pattern

pattern = generatePattern()
print(pattern)"
Create an logging utility in Python that prints the timestamp along with the logged content for each log entry.,"import datetime

def log(content):
 timestamp = datetime.datetime.now().strftime(""%Y-%m-%d %H:%M:%S"")
 message = f""{timestamp}: {content}""
 print(message)
 
log('Logging Message')"
Create a function in Python that finds the common elements two arrays.,"def find_common_elements(arr1, arr2):
  common = []
  for element in arr1:
    if element in arr2:
      common.append(element)
  return common

arr1 = [1, 2, 3, 4, 5]
arr2 = [2, 3, 6, 7, 8]

print(find_common_elements(arr1, arr2))"
Write a function to check if a string represents an integer or not.,"def check_integer(text):
 text = text.strip()
 if len(text) < 1:
    return None
 else:
     if all(text[i] in ""0123456789"" for i in range(len(text))):
          return True
     elif (text[0] in ""+-"") and \
         all(text[i] in ""0123456789"" for i in range(1,len(text))):
         return True
     else:
        return False"
Create a Python script to calculate the sum of the numbers in a list given as input.,"def sum_list(list):
    total = 0
    for i in list:
        total += i
    return total

print sum_list(list)"
Create a Python web crawler to collect data from web page.,"import requests
import bs4 

def web_crawler(url):
  # make request to the specified url and retrieve the response
  response = requests.get(url) 
  # since this page is regular HTML page, we need to use the html parser
  soup = bs4.BeautifulSoup(response.text, 'html.parser')
  # extract the data from the parsed web page 
  results = soup.select(""body"") 
  # return collected data
  return results"
Create Python code that will insert a new item at the end of a list.,"def insert_at_end(list, item):
    """"""Inserts an item at the end of a list""""""
    list.append(item)"
Create a program in Python that takes a collection of numbers as input and calculates their mean.,"def calculate_mean(nums):
    mean = 0
    for num in nums:
        mean += num
    mean /= len(nums)
    return mean"
Create a Python program for filtering a given list of numbers and returning the even numbers.,"def filter_even_numbers(numbers):
  even_numbers = []
  for number in numbers:
    if number % 2 == 0:
      even_numbers.append(number)
  return even_numbers

numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
print(filter_even_numbers(numbers))"
Write a Python function to check whether a number is in a given range.,"def check_range(num, lower, upper):
        return (num >= lower and num <= upper)
 
print(check_range(10, 10, 20)) # prints True"
"Given a function that takes a string as an argument, write a Python code snippet to capitalize the first letter of every word in the string.","def capitalize_string(str):
    words = str.split(' ')
    capitalized_words = [word.capitalize() for word in words]
    capitalized_string = ' '.join(capitalized_words)
    return capitalized_string"
Create a program in Python that will filter a list of numbers by removing any number divisible by 3.,"def filter_by_three(numbers):
    filtered_numbers = []
    for num in numbers:
        if num % 3 != 0:
            filtered_numbers.append(num)
    return filtered_numbers

print(filter_by_three([2, 4, 7, 8, 10, 12, 15, 20]))"
Write a function to find the maximum sum of subsequences of given array with no adjacent elements.,"def max_sum_subseq(A):
    n = len(A)
    if n == 1:
        return A[0]
    look_up = [None] * n
    look_up[0] = A[0]
    look_up[1] = max(A[0], A[1])
    for i in range(2, n):
        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])
        look_up[i] = max(look_up[i], A[i])
    return look_up[n - 1]"
Optimize this while loop in the given Python code.,"i = 0
while i < 5:
    print(i)
    i += 1"
"Create a Python program to calculate the total cost of a trip, given the cost of the flight, hotel, and other expenses.","# Calculate the total cost

flight_cost = 500
hotel_cost = 350
other_expenses = 200
total_cost = flight_cost+hotel_cost+other_expenses

print(f""The total cost of the trip is ${total_cost}"")"
Write a Python algorithm that finds the factorial of a given number.,"def factorial(n):
    if n == 0:
        return 1
    
    return n * factorial(n-1)"
Develop a logic in Python to encode a sentence into pig latin.,"def latin_encode(string): 
    encoded_string = """" 
    for word in string.split(): 
  
        if word[0] not in ""aeiou"": 
            word = word[1:]+word[0] 
        word+=""ay"" 
  
        encoded_string += word+"" ""
    return encoded_string"
Create a python program to convert a list of strings to a dictionary.,"def list_to_dict(lst):
    res = {}
    for item in lst:
        res[item] = True
    return res"
Generate a program in any language to check if a given array is sorted or not.,"# Python

def is_sorted(array):
    n = len(array)
    # Array of length 0 or 1 is considered sorted
    if n == 0 or n == 1:
        return True
    for i in range(n-1):
        # Without the equals it will return false even when the array was sorted
        if array[i] > array[i+1]:
            return False
    return True

arr = [2, 3, 4]
print(is_sorted(arr)) # True"
Write a Python program to get the index of the largest item in a given list.,"# get the index of the largest item in a list
def get_max_index(arr):
    max_index = 0
    for i in range(1, len(arr)):
        if arr[i] > arr[max_index]:
            max_index = i
    return max_index

result = get_max_index([4, 3, 5, 7, 6])
print(result) # 3"
Can you write a code snippet to flatten a 2D array in Python?,"def flatten_2d_array(arr):
    flattened_arr = []
    for row in arr:
        for item in row:
            flattened_arr.append(item)
    return flattened_arr

arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
flattened_arr = flatten_2d_array(arr)
print(flattened_arr)"
Compute the median of a sequence of numbers in Python.,"import statistics 
sequence = [3, -2, 4, 7, 10, 12, 11, -4, 8]
median = statistics.median(sequence) 
print(median) # Output: 7"
"Create a class in Python for a game character with attributes for health, strength, and defense.","class GameCharacter:
 def __init__(self, health, strength, defense):
 self.health = health
 self.strength = strength
 self.defense = defense
 
 def take_damage(self, damage):
 self.health -= damage
 
 def get_status(self):
 return f'Health: {self.health}, Strength: {self.strength}, Defense: {self.defense}'"
Write a python program to convert a number into a list of its digits,"def number_to_digits(number):
  digits = []
  while (number>0):
    digits.append(number % 10)
    number = number // 10
  
  digits.reverse()
  return digits"
Construct a decision tree in Python using the given data set.,"from sklearn import tree

features = ['Skewness']
X = df[features]
y = df['Target']

clf = tree.DecisionTreeClassifier(random_state=0)
clf = clf.fit(X, y)"
Write a Python code snippet to search for a given number in the given array.,"def search(arr, number): 
    for i in range(len(arr)): 
        if arr[i] == number: 
            return True
    return False
  
arr = [5, 8, 2, 10, 48, 41] 
number = 8
if search(arr, number): 
    print(""Number found"") 
else: 
    print(""Number not found"")"
Create a Python program to compare two strings.,"def compare_strings(s1, s2):
    if len(s1) != len(s2):
        return False
    for i in range(len(s1)):
        if s1[i] != s2[i]:
            return False
    return True"
Find and fix the errors in the following Python code snippet.,"def multiplying(x, y): 
    return x * y"
Create a python class to track frequency of words.,"class FrequencyTracker:
    def __init__(self):
        self.dictionary = {}
    
    def add_word(self,word):
        if word in self.dictionary:
            self.dictionary[word] += 1
        else:
            self.dictionary[word] = 1
    
    def get_frequency(self,word):
        if word in self.dictionary:
            return self.dictionary[word]
        else:
            return 0"
Modify the following code in Python to check if a number is prime or not.,"def checkPrime(n):
    if n <= 1:
        return False

    for i in range(2,n):
        if n % i == 0:
            return False
    
    return True"
Create a Python class to represent a person and its details.,"class Person:
 def __init__(self, name, age):
  self.name = name
  self.age = age

def describe_person(self): 
 print(f""Name: {self.name}, Age: {self.age}"")"
Program a Python class for handling employee data.,"class Employee:
    def __init__(self, name, age, salary, company):
        self.name = name
        self.age = age
        self.salary = salary
        self.company = company
    def get_details(self):
        return ""{}, {}, {}, {}"".format(self.name, self.age, self.salary, self.company)"
Create a Python script to find the Fibonacci series which is a sequence of numbers where every number is the addition of the previous two numbers.,"def fibonacci(n): 
    if n == 0: return 0
    if n == 1 or n == 2: return 1

    fib_n_2 = 1
    fib_n_1 = 1
    fib_n = 0

    for i in range(3, n + 1): 
        fib_n = fib_n_1 + fib_n_2
        fib_n_2 = fib_n_1  
        fib_n_1 = fib_n 
    return fib_n 

print(fibonacci(n))"
Create a web scraper in Python to extract all links from a website.,"import requests
from bs4 import BeautifulSoup

def get_all_links(url):
  
  # make a GET request to fetch the raw HTML content
  html_content = requests.get(url).text
  
  # parse the html content
  soup = BeautifulSoup(html_content, ""lxml"")
  
  # extract all links from web page 
  links = soup.find_all(""a"")
  return links"
Generate a Python algorithm to convert an integer to a given base.,"def conv_to_base(number, base):
 # Base case
 if number == 0:
 return """"
 
 # Convert the given number
 remainder = number % base
 
 return conv_to_base(number // base, base) + str(remainder)"
"Create a program in Python which will take in a list of strings, and print out the longest string in the list.","def longest_string(str_list): 
    longest_str = '' 
    for str in str_list: 
        if len(str) > len(longest_str): 
            longest_str = str 
  
    return longest_str 

string_list = ['foo', 'test', 'longstring', 'bar'] 
long_string = longest_string(string_list) 

print(long_string)"
Construct a python program to create a dictionary containing a list of student grades,"grades_dict = {
  ""James"": 95,
  ""Alice"": 80,
  ""John"": 75
}"
Create a Python script to generate random numbers between 1 and 100.,"import random

# Generate 10 random numbers between 1 and 100
for _ in range(10):
    print(random.randint(1, 100))"
Write a function to add two numbers and print number of digits of sum.,"def count_digits(num1,num2):
    number=num1+num2
    count = 0
    while(number > 0):
        number = number // 10
        count = count + 1
    return count"
Write a python function to check whether the count of divisors is even or odd.,"import math 
def count_Divisors(n) : 
    count = 0
    for i in range(1, (int)(math.sqrt(n)) + 2) : 
        if (n % i == 0) : 
            if( n // i == i) : 
                count = count + 1
            else : 
                count = count + 2
    if (count % 2 == 0) : 
        return (""Even"") 
    else : 
        return (""Odd"") "
Calculate the sum of the numbers in this list in Python.,"# Calculate the sum of the numbers in the list
total = sum(lst)

# Print the result
print(total) # prints 25"
Create a function in Python to find all unique combinations of numbers from a given list.,"def find_unique_combos(lst):
    combos = []
    for i in range(len(lst)):
        for j in range(i+1, len(lst)+1):
            combos.append(lst[i:j])
    return list(set(tuple(x) for x in combos))

print(find_unique_combos([1,2,3,4]))"
Write a python code snippet to take a parameter n and return the sum of the natural numbers up to that parameter.,"def sum_natural_numbers(n):
    return (n * (n + 1)) / 2"
Create a Python class that stores student information and an instance method for retrieving it.,"class Student:
  def __init__(self, name, age, college):
    self.name = name
    self.age = age
    self.college = college

  def getStudentInformation(self):
    return 'Name: %s | Age: %s | College: %s' % (self.name, self.age, self.college)

student = Student('John', 20, 'ABCD University')
print(student.getStudentInformation())"
Create a function in Python that takes a string as an argument and replace all vowels with underscores.,"def replace_vowels(input_string):
    vowels = [""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", ""I"", ""O"", ""U""]
    output_string = ''
    for s in input_string:
        if s in vowels:
            output_string += '_'
        else:
            output_string += s
    return output_string

result = replace_vowels('teststring')
print(result)"
"Write code in Python to define a class to represent a linked list node. The class should have a data property, a pointer to the next node, and a 'add' method to append a node to the list.","class Node:
  def __init__(self, data):
   self.data = data
   self.next = None

  def add(self, new_node):
   self.next = new_node"
Generate a Python program to find the index of an item in the given list.,"def find_index(arr, item):
    for i, value in enumerate(arr):
        if item == value:
            return i
    return -1"
Create a Python program that pulls data from a GitHub repository and prints it to the console.,"import requests

# Get the GitHub user data from the repo
url = 'https://api.github.com/repos/user/example-repo/contents/data.json'

r = requests.get(url)
data = r.json()

# Print data to console
for d in data:
 print(d)"
Design a Python code to detect and remove duplicate elements from a given array.,"def remove_duplicates(arr): 
    result = [] 
    for i in arr: 
        if i not in result: 
            result.append(i) 
    return result

arr = [12, 34, 11, 12, 23, 11]
result = remove_duplicates(arr)
print(result) // Prints [12, 34, 11, 23]"
Create a matrix in Python using lists that is 3x3.,"X = [[0, 0, 0], 
     [0, 0, 0], 
     [0, 0, 0]]"
How can you improve the following python function to make it run more quickly?,"def find_target(numbers, target):
    """"""This function returns True if the target is present in the given list of numbers.""""""
    # Use set to improve the lookup performance
    num_set = set(numbers)
    if target in num_set:
        return True
    return False"
Create a Python program that takes a varchar input and encodes it using the Base 64 algorithm.,"import base64

string = ""Hello World!""

data_bytes = string.encode('ascii')
encoded_string = base64.b64encode(data_bytes)

print(encoded_string)"
Create a Python code to delete the last element in a list.,"def delete_last(lst):
    return lst[:-1]

result = delete_last([1, 2, 2, 4, 4])
print(result)"
"Create a function in Python that takes a string, removes all non-alphanumeric characters, and prints the result to console.","def clean_string(s):
 clean_s = ''.join(c for c in s if c.isalnum())
 print(clean_s)"
Generate a Python program to convert a string of text into a list where each word is lowercased and each punctuation character is removed.,"def textToList(string):
 words = []

 for char in string:
  if char.isalpha():
   words[-1] += char
  else:
   words.append('')
 
 words = [word.lower() for word in words if word]
 return words

print(textToList('Hi there, how are you?')) # returns ['hi', 'there', 'how', 'are', 'you']"
Create a Python script to generate a random 4-digit number (from 1000-9999) and display it on the screen.,"import random

print(random.randint(1000,9999))"
Generate a Python program to find all numbers between 2000 and 2500 (inclusive) that are divisible by 7 and not divisible by 5.,"# List comprehension approach
res = [i for i in range(2000, 2501) if i % 7 == 0 and i % 5 != 0] 
  
# Iterative approach
res = [] 
for i in range(2000, 2501): 
    if (i % 7 == 0) and (i % 5 != 0): 
        res.append(i) 
  
# Print the result 
print(""\nNumbers divisible by 7 and not divisible by 5 are"", res)"
Create an algorithm in Python to check if a given string is a valid IP address.,"def is_valid_ip(ip_address):
    parts = ip_address.split('.')
    if len(parts) != 4:
        return False
    for part in parts:
        try:
            if not 0 <= int(part) <= 255:
                return False
        except ValueError:
            return False
    return True"
Build an algorithm in Python for classification task.,"def classify(x):
  if (x > 0):
    return 'positive'
  else:
    return 'negative'"
Write a Python function to calculate the mean absolute error between two datasets.,"def mean_absolute_error(y_true, y_pred):
    return np.mean(np.abs(y_true - y_pred))"
Implement a function in Python to reverse a given list of numbers.,"def reverseList(list):
    start = 0
    end = len(list) - 1
  
    while start < end:
        list[start], list[end] = list[end], list[start]
        start += 1
        end -= 1
  
    return list

list = [1, 2, 4, 7, 9]

reverseList(list)
# Output: [9, 7, 4, 2, 1]"
"Using TinyDB, create a Python program for storing and searching values in a database.","from tinydb import TinyDB, Query

# Initialize database
db = TinyDB('my_db.json')

# Insert data
db.insert({'name': 'John', 'age': 30, 'city': 'New York'})
db.insert({'name': 'Adam', 'age': 25, 'city': 'London'})

# Fetch data
search_results = db.search(Query().name == 'John')
print(search_results)  # [{'name': 'John', 'age': 30, 'city': 'New York'}]"
"Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.","import re
def fill_spaces(text):
  return (re.sub(""[ ,.]"", "":"", text))"
Write a Python code to compare two list and print the elements which are common between them.,"list1 = [2, 3, 5, 8]
list2 = [1, 4, 5, 9]

common_elements =  [element for element in list1 if element in list2]

print(common_elements)"
Write a Python script that takes a list of integers and checks if any two numbers sum up to a given target.,"def checkSum(arr, target): 
 for i in range(len(arr)): 
 for j in range(i + 1, len(arr)): 
 if arr[i] + arr[j] == target: 
 return True

 return False

nums = [3, 2, 5, 7]
target = 9

print(checkSum(nums, target)) # output: True"
Write a python code to check if an input string is a palindrome.,"def is_palindrome(input_str):
 reversed_str = input_str[::-1]
 return input_str == reversed_str"
Write a Python program to count the number of vowels within a string.,"def count_vowels(string):
    count = 0
    for char in string:
        if char in ""aeiouAEIOU"":
            count += 1
    return count

string = 'This is a test string for counting vowels.'
vowel_count = count_vowels(string)
print('Number of vowels in the string :', vowel_count)"
Write a Python program to check whether a number is divisible by 7 or not.,"number = 92

if (number % 7) == 0:
    print(""The number is divisible by 7"")
else:
    print(""The number is not divisible by 7"")"
Design a recursive function in Python that computes the $n^{th}$ Fibonacci number.,"def Fibonacci(n): 
   if n<0: 
      print(""Incorrect input"") 
   elif n==1: 
      return 0
   elif n==2: 
      return 1
   else: 
      return Fibonacci(n-1)+Fibonacci(n-2)"
Construct a Python class that can represent Rectangles.,"class Rectangle:
    def __init__(self, width, height):
        self.width = width
        self.height = height

    def area(self):
        return self.width * self.height
    
    def perimeter(self):
        return 2*self.width + 2*self.height"
Generate Python code for generating a random password of length 8.,"import random, string 

def randomPassword(length): 
  
    # Generate a list of random characters 
    gen_pass = ''.join(random.choice(string.ascii_letters 
                        + string.digits) 
                   for _ in range(length)) 
  
    return gen_pass 
  
random_password = randomPassword(8) 
print(random_password)"
"Edit the following Python code to implement case-insensitivity and replace ""word"" with a user-defined variable.","word = input('Enter word: ')

if word.lower() == 'super':
 print('Object found')"
Modify this Python program to print the greatest common divisor of two numbers.,"def gcd(x, y):
    while y != 0:
        (x, y) = (y, x % y)
    return x

num1 = 5
num2 = 6

print(""GCD is:"", gcd(num1, num2))"
Generate a program in Python which takes a list of integers as an argument and prints the odd numbers in ascending order.,"def print_odd_numbers(numbers):
    for num in sorted(numbers):
        if num % 2 != 0:
            print(num)

print_odd_numbers([1, 2, 3, 4, 5, 6, 7])
# Output: 1, 3, 5, 7"
Write a Python function to calculate the average grade for a given list of student grades.,"def average_grade(grades):
 total = 0
 for grade in grades:
 total += grade
 return total / len(grades)

>>> average_grade([90, 99, 75, 72, 85])
84.2"
"Using Python, create a class with a static method to generate a Fibonnaci sequence up to a given limit.","class Fibonacci:
    @staticmethod
    def generateFibonacci(limit):
        result = []
        first = 0
        second =1
        while first <=limit:
            result.append(first)
            temp=first + second
            first=second
            second=temp
        return result"
Create a function in Python that takes two strings as arguments and returns the first string repeated as many times as specified by the second argument.,"def repeat_string (string, repeat):
    """"""Return the supplied string repeated as many times as specified.""""""
    
    repeated_string = string * repeat
    
    return repeated_string
    
print(repeat_string(""Abstract"", 3)) # Output: AbstractAbstractAbstract"
Create a Flask Python service that serves an array of strings as JSON using a GET request.,"import json
from flask import Flask, request, jsonify 

app = Flask(__name__)

data = ['Apple', 'Banana', 'Carrot']

@app.route('/data', methods=['GET'])
def serve_data():
 return jsonify(data)

if __name__ == '__main__':
 app.run()"
"Given a sample data set, write a Python program to remove all rows that have missing values.","import pandas as pd

data = {
   'name': ['John', 'Steve', 'Harry'],
   'age': [22, None, 25],
   'nationality': ['Nigerian', 'American', 'British']
}

df = pd.DataFrame(data)
df = df.dropna()

print(df)"
Create a Python function to print out all the words in a given string with the letter e.,"def print_words_with_e(str): 
    words = str.split() 
    for word in words: 
        if 'e' in word: 
            print(word) 

print_words_with_e(str)"
Write a python program to sort a list of tuples based on their second element.,"list = [('dog', 6), ('cat', 4), ('rabbit', 2)]

list.sort(key=lambda x: x[1])

print(list)"
Write a code in Python that takes a given string and removes all spaces from the string.,"def remove_spaces(str): 
    new_str = """"
	
    # loop through each character in the string
    for letter in str: 
        if letter != "" "":
            new_str = new_str + letter 
		
    return new_str 

# main program
str = ""Hello World""
new_str = remove_spaces(str)

#print the new string
print(""String without spaces:"", new_str)"
Develop a Python program to generate the first 10 Fibonacci numbers.,"def Fibonacci(n): 
    a = 0
    b = 1
    if n < 0: 
        print(""Incorrect input"") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2,n+1): 
            c = a + b 
            a = b 
            b = c 
        return b 
  
print(Fibonacci(10))"
Set up conditions for a for-loop for iterating over a dictionary in Python.,"keys = dict.keys()
for i in keys:
    value = dict[i]
    print(i, "":"", value)"
Write a python code snippet to reverse each word of the given sentence.,"def reverse_string(string): 
    words = string.split() 
      
    reversed_string = [word[::-1] for word in words]
    return ' '.join(reversed_string)

reverse_string(sentence) //Returns 'olleH dlrow'"
Please provide a python code snippet that counts the number of words in a given sentence.,"my_string = ""This is a sentence with five words.""
words = my_string.split("" "")
print(len(words))"
Write a Python code snippet to display all the items stored in a list given below.,"for item in list_items:
    print(item)"
Write a function in Python to find the number of prime numbers up to a given number.,"def countPrimes(num): 
    if num <= 1:  
        return 0
 
    primes = [2] 
    x = 3
    
    while x <= num: 
        for y in primes: 
            if x % y == 0: 
                x += 2
                continue
        primes.append(x) 
        x += 2
    
    return len(primes) 

num_primes = countPrimes(100)
print(""Number of primes between 1 and 100:"", num_primes)"
"In Python, create a function that takes an list of numbers and returns the list with any duplicate values removed.","def remove_duplicates(list_num):
    return list(dict.fromkeys(list_num))

list_num = [1,2,3,3,2,1,4,5]
list_num = remove_duplicates(list_num)
print(list_num)  // [1, 2, 3, 4, 5]"
Optimize the following Python program to print numbers from 1 to 100 without using a loop.,"def print_numbers():
    if num <= 100:
        print(num)
        print_numbers(num + 1)

print_numbers(1)"
"Using Python, create a program to print a random element from a list.","import random

# list of fruits
fruits = [""apple"", ""banana"", ""mango"", ""pear"", ""grape""]

# generate a random index
randomIndex = random.randint(0, len(fruits)-1)

# select and print the random fruit
randomFruit = fruits[randomIndex]
print(""Random fruit: "" + randomFruit)"
Generate a Python program to scrape the headlines from a given news article.,"import requests
from bs4 import BeautifulSoup

url = ""https://www.bbc.com/news/uk-england-london-53741405""

page = requests.get(url)
soup = BeautifulSoup(page.content, 'html.parser')

headlines = soup.find_all('h1', class_='story-body__h1')
for headline in headlines:
 print(headline.text)"
Generate a Python program to filter out any words containing a given letter from a list.,"def filter_words(words, letter):
    filtered_words = []
    
    for word in words:
        if letter not in word:
            filtered_words.append(word)
    
    return filtered_words"
"Given the following data, generate a Python program that sorts the data in ascending order.","def sort_list(list_input):
    sorted_list = sorted(list_input)
    return sorted_list"
Generate a unique ID in Python for a given string.,"import uuid
unique_id = uuid.uuid3(uuid.NAMESPACE_DNS, string)"
Write a Python program to add a prefix and suffix to all strings in a list.,"pre = ""PRE-""
suf = ""-SUF""

enriched_list = [ pre + s + suf for s in list]

print(enriched_list)"
Edit the given code segment in Python and make it a valid program:,"x = 5
def add_two_numbers(x, y):
    z = x + y
    return z

result = add_two_numbers(x, 5)
print(result)"
Create a Python script to convert an input JSON string into a Python dictionary.,"import json

input_string = '{""name"": ""John"", ""age"": 30, ""country"": ""USA""}'

python_dict = json.loads(input_string)
print(python_dict) # Output: {'name': 'John', 'age': 30, 'country': 'USA'}"
Create a Python function that takes a list of strings as an argument and returns a new sorted list with no duplicates.,"def remove_duplicates(strings):
  new_list = []
  for s in strings:
    if s not in new_list:
      new_list.append(s)
  new_list.sort()
  return new_list

strings = [""cat"", ""dog"", ""cat"", ""mouse"", ""lion"", ""dog""]
unique_list = remove_duplicates(strings)

print(unique_list)"
Find the minimum element in a Python list called 'nums',"""""""
Find the minimum element in a Python list called 'nums'
""""""

def find_min(nums):
    min = nums[0]
    for num in nums:
        if num < min:
            min = num
    return min
    
if __name__ == '__main__':
    nums = [2, 3, 4, 1, 7, 8, 5]
    print(find_min(nums))"
Write a function to find the inversions of tuple elements in the given tuple list.,"def inversion_elements(test_tup):
  res = tuple(list(map(lambda x: ~x, list(test_tup))))
  return (res) "
Write a Python program to multiply two given numbers and print their product,"product = num1 * num2
print(product)"
Write a Python function that takes a date as input and prints out the weekday for that date.,"import datetime

def get_weekday(date):
    day = datetime.datetime.strptime(date, ""%Y-%m-%d"").weekday()
    weekdays = [""Monday"", ""Tuesday"", ""Wednesday"", ""Thursday"", ""Friday"", ""Saturday"", ""Sunday""]
    return weekdays[day]

result = get_weekday('2020-01-01')
print(result)"
Translate the following pseudocode into Python.,"# Read two numbers
n1 = int(input()) 
n2 = int(input()) 

# Add the two numbers
result = n1 + n2

# Output the result
print(result)"
Can you generate a function in Python that shuffles a given list?,"import random

def shuffle_list(list): 
    # Initialize the random number generator
    random.seed()

    # Shuffle the list
    random.shuffle(list) 

    # Return the list
    return list"
Create a function in Python to filter out elements in a list that share the same value.,"def filter_same_value_elements(mylist):
 seen = set()
 for item in mylist:
 if item not in seen:
 yield item
 seen.add(item)

filtered_list = list(filter_same_value_elements(mylist))
print(filtered_list) # [1, 2, 3]"
Modify the following code to make it more Pythonic.,"list1 = [1, 2, 3, 4]
list2 = [5, 6, 7, 8]

result = [x * y for x, y in zip(list1, list2)]"
Generate a list of five import statements for three different Python libraries.,"import numpy as np 
import pandas as pd 
import matplotlib.pyplot as plt 
import scipy.stats as st
import scikit-learn as sklearn"
Design a program in Python that takes 4 numbers as input and prints out the product of the first three numbers.,"def product(nums):
    product = 1
    for i in range(3):
        product *= nums[i]
    return product

nums = [int(x) for x in input().split("","")]
print(product(nums))"
Generate a python program to read 10 numbers and store their sum in a variable.,"sum = 0

for i in range(10):
    num = int(input(""Input number: ""))
    sum += num

print(""Sum:"", sum)"
Write a function to split the given string at uppercase letters by using regex.,"import re
def split_list(text):
  return (re.findall('[A-Z][^A-Z]*', text))"
Generate a Python program to calculate the sum of all numbers in a list and print it out.,"def sum_list(l):
    result = 0
    for num in l:
        result += num
    return result

list = [1, 2, 3, 4, 5]
print(sum_list(list))"
Generate a function in Python that finds the most frequent element in a list.,"def most_frequent(lst): 
  
    counter = 0
    num = lst[0] 
      
    for i in lst: 
        curr_frequency = lst.count(i) 
        if(curr_frequency> counter): 
            counter = curr_frequency 
            num = i 
  
    return num"
Create a python code to print the frequency of each character in a string.,"for char in ""Hello World"":
    print(char, "":"", ""Hello World"".count(char))"
Suggest a correction for the following python code to return the average of a given list of numbers.,"def avg(numbers):
 sum = 0
 for n in numbers:
 sum = sum + n
 return sum / len(numbers)"
Generate a string of random characters in Python. The length of the string should be determined by a parameter.,"import string 
import random
 
def generate_random_string(length):
 return ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(length))
 
length = 20
print(generate_random_string(length))"
How would you parse the following JSON string in Python?,"import json

json_string = '{""name"": ""John Doe"", ""age"": 34, ""email"": ""john@example.com""}'
data = json.loads(json_string)

name = data['name']
age = data['age']
email = data['email']"
Create a function in Python to check whether an input character is a digit or not.,"def is_digit(x):
  return x.isdigit()"
Write a Python function that gets a list of numbers and returns the sum of the elements.,"def get_sum(list):
    total = 0
    for num in list:
        total += num
    return total"
Construct an algorithm in Python to compute the sum of a array of numbers.,"def compute_sum(arr):
    
    # Initialize sum
    sum = 0
    
    # Compute sum
    for num in arr:
        sum += num
    
    # Return the sum
    return sum

# Testing
arr = [3,5,1,2]

print(compute_sum(arr))"
Create an efficient sorting algorithm in Python to sort a given array.,"def sort_arr(arr):
    n = len(arr)
    for i in range(n): 
        for j in range(0, n-i-1): 
            if arr[j] > arr[j+1] : 
                arr[j], arr[j+1] = arr[j+1], arr[j]  
    return arr

result = sort_arr([9, 4, 6, 1, 3, 7])
print(result)"
Create a hash table in Python.,"table = dict()

table['one'] = 1
table['two'] = 2
table['three'] = 3"
Create a Python program that takes a given list of numbers and remove any duplicate numbers.,"def remove_duplicates(arr):
 result = []
 
 for num in arr:
 if num not in result:
 result.append(num)
 
 return result

# testing 
arr = [1, 2, 2, 3, 3, 4]
print(remove_duplicates(arr)) # Output: [1, 2, 3, 4]"
Design a program in Python to filter the elements from a list which are not divisible by 3.,"def filter_list(arr):
    filtered_list = []
    for num in arr:
        if num % 3 != 0:
            filtered_list.append(num)
    return filtered_list

print(filter_list([2, 3, 4, 5, 6, 7, 8, 9]))"
Optimize the following Python program to run faster.,"def remove_duplicates(lst):
  return list(set(lst))

lst = [1, 2, 4, 2, 5, 6, 3, 3]
new_list = remove_duplicates(lst)
print(new_list)"
Implement a sorting algorithm in Python to sort letters of an alphabet.,"def alphabet_sort(string):
    # Split the string into a list of chars
    chars = list(string)
    
    # Sort the list alphabetically
    chars.sort()
    
    # Join the list of chars
    return """".join(chars)"
Generate an XOR function in Python that takes two integers as parameters and returns a boolean.,"def xor(a, b):
return (a or b) and not (a and b)"
Design a Python program to generate Fibonacci series up to the given number.,"def FibonacciSeries(num):
    a = 0
    b = 1
    print(""Fibonacci Series: "")
    for i in range(0, num):
        print(a, end="" "")
        temp = a
        a = b
        b = temp + b

num = int(input(""Enter a number: ""))
FibonacciSeries(num)"
Write a Python program that removes duplicates from a list.,"def remove_duplicates(my_list):
 return list(dict.fromkeys(my_list))

my_list = [1, 2, 3, 4, 3, 2, 1]

print(remove_duplicates(my_list)) # output [1, 2, 3, 4]"
Convert the following Ruby code snippet to Python,"name = ""Jared""
print(f""Hello {name}"")"
Automate a Python program to check the length of each word in a given string.,"def lengthWord(inp):
    result = []
    for word in inp.split(' '):
        result.append(len(word))
    return result

# Driver Code
inp = ""Generating a code generation task instructions""
print(lengthWord(inp))"
"Using a while loop, create a Python program that prints the Fibonacci sequence from 0 to 100.","a, b = 0, 1
while b <= 100:
    print(b)
    a, b = b, a+b"
Create a Python program that creates a three dimensional array.,"import numpy as np 
  
# Creating a 3-D array 
x = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]) 
  
# Displaying the 3-D array 
print(x)"
Create a Python program to transform text into pig latin.,"def pig_latin(word):
  first_letter = word[0]
  # check if vowel
  if first_letter in 'aeiou':
    pig_word = word+'ay'
  else:
    pig_word = word[1:]+first_letter+'ay'
   
  return pig_word

if __name__=='__main__':
  word = 'apple'
  print(pig_latin(word))  # prints 'appleay'"
You are given a 2D list that needs to be flattened into a single dimensional list. Write some python code to achieve this transformation.,"def flatten_list(input_list): 
    flattened_list = [] 
      
    # traversing the 2d list  
    for row in input_list: 
        # traversing the row 
        for column in row: 
            flattened_list.append(column) 
    return flattened_list"
Create a program in Python to generate all prime numbers between 2 and n.,"def generate_primes(n):
    primes = []

    for num in range(2, n+1):
        is_prime = True
        for i in range(2, num):
            if num % i == 0:
                is_prime = False
        if is_prime:
            primes.append(num)
    return primes

n = 10
print(generate_primes(n)) # [2, 3, 5, 7]"
"Using Python, generate a program to count the number of words in a given sentence.","def count_words(given_sentence):
    return(len(given_sentence.split()))

given_sentence = ""This is a given sentence""
word_count = count_words(given_sentence)
print(""Number of words in given sentence is: "", word_count)"
"Implement bubble sort, an efficient sorting algorithm, in Python.","def bubbleSort(arr):
 n = len(arr)
 for i in range(n - 1):
 for j in range(0, n - i - 1):
 if arr[j] > arr[j + 1]:
 arr[j], arr[j + 1] = arr[j + 1], arr[j]
 
 # Driver code to test above
arr = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
bubbleSort(arr)

print (""Sorted array is:"")
for i in range(len(arr)):
print (""%d"" %arr[i])"
"Write a Python program to generate a random string of length 20 characters with equal proportions of upper and lowercase letters, digits and special symbols.","import string
import random

length = 20
all_chars = string.ascii_letters + string.digits + string.punctuation

random_str = ''.join(random.choice(all_chars) for _ in range(length))

print('Random string of length {}: {}'.format(length, random_str))"
Generate a Python class to construct a linked list.,"class Node:
 def __init__(self, data):
 self.data = data
 self.next = None

class LinkedList:
 def __init__(self):
 self.head = None

def append(self, new_data):
 new_node = Node(new_data)
 if self.head == None:
 self.head = new_node
 return
 last = self.head
 while last.next:
 last = last.next
 last.next = new_node"
Edit the given Python code to improve its runtime complexity.,"def func(arr):
  s = set()
  # Store all the elements in a set
  for item in arr:
    s.add(item)
  # Traverse the list and search for the element 
  # in set. It will take O(1) time
  for item in arr:
    if item in s:
      print(item)"
Create a python application which randomly selects a movie from a given list of movies.,"import random

movies = [""Guardians of the Galaxy"",
          ""The Godfather"",
          ""The Shawshank Redemption"",
          ""Pulp Fiction"",
          ""Inception"",
          ""The Dark Knight""]

def random_movie_selector(movies):
    return random.choice(movies)
  
# Driver Code 
print(random_movie_selector(movies)) 

# Output (Example): 
# The Shawshank Redemption"
Rewrite this function in Python.,"def multiply(x, y): 
    product = 0
    while (x > 0): 
        if x % 2 != 0: 
            product += y 
        x >>= 1
        y <<= 1
    return product 

print(multiply(10, 5)) # Output: 50"
Write a function that matches a word at the beginning of a string.,"import re
def text_match_string(text):
        patterns = '^\w+'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return 'Not matched!'"
Suggest a way to detect whether a given number is a multiple of a given divisor in Python.,"def is_multiple(number, div):
    '''This function takes two numbers, ``number`` and ``div``, and returns ``True`` if number is a multiple of div, and ``False`` otherwise.'''
    return number % div == 0"
Create a Python class for a basic calculator with an add and subtract function.,"class Calculator:
 def __init__(self):
 self.values = []

 def add(self, x, y):
 self.values.append(x + y)

 def subtract(self, x, y):
 self.values.append(x - y)
 
calc = Calculator()
calc.add(2, 3)
calc.subtract(3, 4)
print(calc.values[-1])"
"Generate a Python program that given a list of numbers, finds the largest pair sum.","def max_pair_sum(arr):
    if len(arr) == 0:
        return 0

    max_sum = 0

    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            max_sum = max(max_sum, arr[i] + arr[j])
    
    return max_sum"
"Design a class in Python to represent a car using attributes like `year`, `make` and `model`.","class Car:
    def __init__(self, year, make, model):
        self.year = year
        self.make = make
        self.model = model
    
    def get_details(self):
        print(f""{self.year} {self.make} {self.model}"")"
Write a Python program to sort a given list in ascending order without using built-in functions.,"def sort_list(lst):
    for i in range(0, len(lst)):
        for j in range(i+1, len(lst)):
            if lst[i] > lst[j]:
                lst[i], lst[j] = lst[j], lst[i]
    
    return lst

print(sort_list([3, 7, 4, 1, 9])) # prints [1, 3, 4, 7, 9]"
Fix the following python code.,"def remove_vowel(string):
    vowels = ('a', 'e', 'o', 'u')
    for x in vowels: 
        string = string.replace(x, """")
    return string"
Write a Python program to print Hello World ten times.,"for i in range(10):
  print(""Hello World"")"
Generate an optimized Python program that sorts a list of integers using bubble sort.,"def bubble_sort(nums):
    n = len(nums)
    for i in range(n):
        swaped = False
        for j in range(0, n-i-1):
            if nums[j] > nums[j+1]:
                nums[j], nums[j+1] = nums[j+1], nums[j]
                swaped = True
 
        if swaped == False:
            break

# Driver code
nums = [3, 5, 1, 4, 7]
bubble_sort(nums)
print(nums)"
Create a random number generator in Python that generates a number between 1 and 100.,"import random

def random_number():
    return random.randint(1,100)

# Testing
print(random_number())"
Construct a Python class that determines the area and circumference of a circle.,"class Circle:
    def __init__(self, radius):
        self.radius = radius
    
    def area(self):
        return 3.14 * (self.radius ** 2)
    
    def circumference(self):
        return 2 * 3.14 * self.radius

circle1 = Circle(7)
print(""Area of circle1:"", circle1.area())
print(""Circumference of circle1:"", circle1.circumference())"
Develop a Python program to print a value based on a comparison between two numbers,"if a < b:
    print(""A is less than B"")
else:
    print(""A is not less than B"")"
Implement a Python function to encode a URL.,"def encode_url(url):
    return urllib.parse.quote_plus(url)"
Write Python code to print the fibonnaci sequence up to the given number.,"""""""
Print the Fibonacci sequence up to the given number
""""""

def fibonacci(n):
    # Base case
    if n == 0 or n == 1:
        return n
 
    # Recursive case
    return fibonacci(n-1) + fibonacci(n-2)
 
# Print the Fibonacci sequence up to the given number
n = 10
for i in range(n + 1):
    print(fibonacci(i))"
Design an algorithm in Python to convert a temperature in Fahrenheit to Celsius.,"def convert_f_to_c(temperature):
    return (temperature - 32) * 5.0/9.0

result = convert_f_to_c(64)
print(result)"
Design a Python class to represent a point in a 3D space.,"class Point3D:
    # constructor to define a point
    def __init__(self, x, y, z):
        self.x = x
        self.y = y
        self.z = z
    
    # method to calculate the distance from origin
    def distance_from_origin(self):
        return (self.x**2 + self.y**2 + self.z**2)**(1/2)"
Generate code that will use the AWS SDK for Python to create an S3 bucket.,"import boto3

# Create an S3 client
s3 = boto3.client('s3')

# Create an S3 bucket
response = s3.create_bucket(
    Bucket='mybucket',
    CreateBucketConfiguration={
    'LocationConstraint': 'us-east-1'
    }
)

print(response)"
Develop an algorithm in Python to find the median of a list of numbers.,"def get_median(nums): 
    nums.sort()
    if len(nums) % 2 == 0:
        return (nums[int(len(nums)/2)] + nums[int(len(nums)/2-1)])/2
    else:
        return nums[int((len(nums)-1)/2)]
    
result = get_median([1, 4, 6, 12, 24, 36])
print(result)"
Write a function to convert a given tuple of positive integers into an integer.,"def tuple_to_int(nums):
    result = int(''.join(map(str,nums)))
    return result"
"Given a string, write a Python program to remove all leading and trailing whitespace characters.",text = text.strip()
"Write a class definition in Python for a custom object called “Employee”, which has two data members: “name”, a String, and “salary”, an integer.","class Employee: 
    def __init__(self, name, salary): 
        self.name = name 
        self.salary = salary 
  
# Driver Code  
e1 = Employee(""John"", 15000) 
e2 = Employee(""Mary"", 12000) 
  
print(e1.name) 
print(e1.salary)"
Suggest a completion for the following python code to merge two given dictionaries into one.,"def merge_dict(dict1, dict2):
 result = dict1.copy()
 result.update(dict2)
 return result"
Write a Python function to identify the longest word in a given list of strings.,"def longest_word(word_list):
 longest_word = word_list[0]
 for word in word_list:
 if len(word) > len(longest_word):
 longest_word = word
 return longest_word"
Write a Python script to compute the Fibonacci sequence.,"def Fibonacci(n): 
    a = 0
    b = 1
    if n < 0: 
        print(""Incorrect input"") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2,n+1): 
            c = a + b 
            a = b 
            b = c 
        return b 

# Driver Program 
print(Fibonacci(9))"
Compose a regular expression in Python for validating email addresses.,"import re

def validate_email(email):
    regex = r""^[a-z0-9]+[\._]?[a-z0-9]+[@]\w+[.]\w{2,3}$""
    if re.search(regex, email):
        print(""Valid Email"")
    else:
        print(""Invalid Email"")"
Create a function in Python that takes an array of integers as input and outputs the number of unique values in the array.,"def get_unique_values(arr):
    # convert to set 
    unique_arr = set(arr) 
  
    # return length 
    return len(unique_arr) 
  
# driver code 
arr = [1, 5, 5, 4, 4, 6, 7, 7] 
  
# function call 
unique_values = get_unique_values(arr) 
  
# print unique values 
print(unique_values)"
Write a python function to find the last digit when factorial of a divides factorial of b.,"def compute_Last_Digit(A,B): 
    variable = 1
    if (A == B): 
        return 1
    elif ((B - A) >= 5):  
        return 0
    else:   
        for i in range(A + 1,B + 1): 
            variable = (variable * (i % 10)) % 10
        return variable % 10"
Write an algorithm in Python to optimize a given linear programming problem.,"def optimize_lp(c, A, b): 
    result = scipy.optimize.linprog(
        c, A_ub=A, b_ub=b, options={""disp"": False}
    )
 
    if result.status != 0:
        raise Exception(""Linear programming failed."")
 
    x = result.x
    z = result.fun
    return (x, z)"
Design a python program that takes in input from the command line and populates a dictionary with the data.,"import sys

data_dict = {}

# Parse command line args
for i in range(len(sys.argv)):
    if i == 0:
        continue
    args = sys.argv[i].split("":"")
    key = args[0]
    value = args[1]
    data_dict[key] = value

print(data_dict)"
Write a Python program to retrieve the name of the user from a given input.,"ID = input('User ID: ')

user_name = ID.split('che')[0]
print('User Name: ' + user_name)"
Create a python program to create a dictionary with key as student name and its value as their grade in a class.,"student_grades = {
   ""Adam"": ""A"",
   ""Amy"": ""B"",
   ""Aaron"": ""A"",
   ""Bella"": ""C""
}"
Append a number to each element of a list in Python.,"def append_nums(lst):
    new_list = [x + 10 for x in lst]
    return new_list

print(append_nums([1, 2, 3]))"
Design a Python algorithm to perform a Prefix Sum operation on an array.,"def prefix_sum(arr):
result = []
s = 0
for x in arr:
    s += x
    result.append(s)
return result

arr = [1, 2, 3, 4]
prefix_sum(arr)"
Rewrite a given JavaScript function as a Python function. Make sure the output is the same.,"def powerOfTwo(num):
 return 2 ** num"
Design a program in Python that takes two positive integers and returns their greatest common divisor.,"def gcd(a, b): 
    while(b): 
        a, b = b, a % b 
  
    return a 

result = gcd(25, 15) 
print(result)"
Rewrite the following bash script to Python.,"print(""Enter a number: "")
num = int(input())

fact = 1
for i in range(num, 0, -1):
    fact *= i

print(""Factorial is"", fact)"
Create a function in Python that takes two lists of integers and return a list which contains elements present in both the lists.,"def intersection(list1, list2):
    return [value for value in list1 if value in list2]

list1 = [1, 2, 3 ,4 ,5]
list2 = [3, 4, 5, 6 ,7]

print (intersection(list1, list2))"
Create a python function to compute the area of a triangle with given sides.,"def calculateTriangleArea(a, b, c): 
    s = (a + b + c) / 2
    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5
    return area
  
area = calculateTriangleArea(a, b, c) 
print(""Area of triangle is %.2f"" % area)"
Generate a Python program to generate an encrypted hash of a given string using SHA-256.,"import hashlib
 
original_string = '<insert string here>'

# Generate the encrypted hash
encrypted_string = hashlib.sha256(original_string.encode()).hexdigest()

print('Encrypted hash: ' + encrypted_string)"
Improve the performance of the following Python code.,"def find_max(a, b):
 return max(a, b)"
Generate an algorithm in Python that takes an array of strings and returns all strings which are palindromes.,"def palindrome_checker(string_list):
    result = []
    for string in string_list:
        rev_string = string[::-1]
        if rev_string == string:
            result.append(string)
    return result

palindromes = palindrome_checker(['racecar', 'level', 'toronto', 'bob', 'noon'])
print(palindromes)"
Optimize a given Python function to make it more efficient.,"def my_function(n):
  sum = 1
  for j in range(1, n+1):
    sum *= j
  return sum"
Write a Python class that takes 2 strings as arguments and prints them out in a concatenated form.,"class ConcatStrings:
    def __init__(self, string1, string2):
        self.string1 = string1
        self.string2 = string2

    def print_concat(self):
        print(self.string1 + self.string2)"
Edit the following Python program to use a dictionary instead of a list.,"items = {1: 'one', 2: 'two', 3: 'three', 4: 'four'}

for key, value in items.items():
 print(value)"
Write a Python program to generate a random string with the given length.,"import string
import random

def generate_random_string(length):
  characters = string.ascii_letters + string.digits 
  return ''.join(random.choice(characters) for i in range(length))"
Generate a 20 Hz sine wave sample using Python.,"import matplotlib.pyplot as plt 
import numpy as np

sampling_rate = 100
sine_frequency = 20
time_period = 1.0/sampling_rate
x_values = np.arange(0, 1, time_period)
y_values = np.sin(2 * np.pi * sine_frequency * x_values)

plt.plot(x_values, y_values)
plt.xlabel('Time')
plt.ylabel('Amplitude')
plt.show()"
Develop a function in Python that takes in two strings and returns a boolean value indicating if the two strings are anagrams of each other.,"def is_anagram(str1, str2):
 if sorted(str1) == sorted(str2):
 return True
 else:
 return False

if __name__ == '__main__':
 assert is_anagram('abcd', 'dcba') == True
 assert is_anagram('abcd', 'abdc') == False"
Create a Python function for padding a string with a given character upto a specific length.,"def pad_string(string, character, length):
    padded_string = string 
    while len(padded_string) < length:
        padded_string = character + padded_string
    return padded_string"
Correct the syntax errors in this piece of Python code.,"def greet(name):
    print(""Hello"", name)"
Write a Python program to evaluate a simple expression and print the output.,"def evaluate_expression(exp):
  return eval(exp) 

expression = ""7*6+20""
output = evaluate_expression(expression)
print(output)"
Generate a Python code which takes a list of strings as input and return a string which contain the first letter of each string concatenated.,"def first_letter_concat(l):
    '''This function takes a list of strings as input and return a string which contain the first letter of each string concatenated.'''
    result = ''
    for s in l:
        result += s[0]
    return result"
Generate a web scraper using a Python library.,"import requests
import bs4

def webscraper(url):
    page = requests.get(url)
    soup = bs4.BeautifulSoup(page.text, ""html.parser"")
    return soup"
Create a Python program to simulate a dice roller.,"import random

def rollDice():
  dice1 = random.randint(1,6)
  dice2 = random.randint(1,6)

  return dice1 + dice2

print(rollDice())"
Write a python function to find the difference between largest and smallest value in a given array.,"def big_diff(nums):
     diff= max(nums)-min(nums)
     return diff"
Create a program in Python to remove the duplicates from a given array.,"def remove_duplicates(arr):
  res = []
  for i in arr: 
    if i not in res: 
      res.append(i)
  return res"
Use a while loop to print the numbers from 0 to 10 in Python.,"# Initialise the counter
i = 0

# Use a while loop to print numbers from 0 to 10
while i <= 10:
    print(i)
    i += 1"
Create a program in Python to find the minimum value in a list.,"def findMinValue(list):
    minValue = list[0]
    for i in range(1, len(list)):
        if list[i] < minValue:
            minValue = list[i]
    return minValue

list1 = [30, 10, 40, 20]
minValue = findMinValue(list1)
print(minValue)"
Create a web scraper using Python and the requests library to scrape data from a specific website.,"import requests

# Specify your website URL
url = 'https://www.example.com'

# Send a request to the website
response = requests.get(url)

# Check the status of the response
if response.status_code == 200:
 # Parse the HTML of the response
 response_html = response.content

 # Do something with the HTML
 print(response_html)"
Generate a class in Python that will check for prime number given as an input.,"class PrimeNumberChecker:
    def __init__(self):
        pass
    
    def is_prime(self, n):
        if n <= 1:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True"
Design an algorithm in Python to replace all occurrences of blank spaces in a given string with a string.,"def replace_spaces(s,replace_with):
    return s.replace("" "",replace_with)

s = ""This is a test string""
replace_with = ""X""

print(replace_spaces(s,replace_with))"
Develop a Python function to calculate the summed weighted average from a given set of values and weight.,"def weightedAverage(values, weights):
    sum = 0.0
    for i in range(len(values)):
        sum += values[i] * weights[i]
    return sum/len(values)

values = [90, 50, 70]
weights = [0.4, 0.2, 0.4]

print(weightedAverage(values, weights))"
Write a function in Python to check if a string contains all unique characters.,"def is_unique(string):
  characters = set()
  for char in string:
    if char in characters:
      return False
    characters.add(char)
  return True"
Create a python script to identify if a given string is a valid IPv4 address or not.,"def is_valid_ipv4(ip):
    parts = ip.split('.')
    if len(parts) != 4:
        return False
    for part in parts:
        if not part.isdigit():
            return False
        if int(part) < 0 or int(part) > 255:
            return False
    return True

print(is_valid_ipv4('192.168.25.688'))

Output: False"
Write a code to generate a random 6 digit number in Python.,"import random

def generate_6_digit_number():
    return random.randint(100000, 999999)

num = generate_6_digit_number()
print(num)"
Generate a Python script to find the top 5 most popular items in a given list.,"from collections import Counter

# Get the input list
list = [1, 3, 5, 3, 6, 2, 4, 6, 8, 4]

# Use Counter library to get a dictionary of the top 5 items
top_five = Counter(list).most_common(5)

# Print the top five items
print(""Top five items in the list:"")
for key, val in top_five:
    print(key, "":"", val, ""occurrences"")"
Cut at current position in a string by 1 letter in Python.,mystring = mystring[:-1]
Write a Python program to calculate the average of a list of positive integers and output the result.,"list_of_positive_integers = [1, 5, 6, 7, 8]
total = sum(list_of_positive_integers)

avg = total/len(list_of_positive_integers)

print(""The average of the list of positive integers is {}"".format(avg))"
Write a Python program to find the longest common prefix among all strings in the list.,"def find_longest_common_prefix(strings):
 first_str = strings[0]
 longest_prefix = """"
 for i in range(len(first_str)):
  current_prefix = first_str[:i]
  flag = True
  for string in strings[1:]:
   if not string.startswith(current_prefix):
    flag = False
    break
  if flag:
   longest_prefix = current_prefix
 return longest_prefix"
Create a Python program that removes duplicate elements from a list.,"def remove_duplicates(nums): 
  
    # A list for storing final output 
    new_list = [] 
  
    # Looping over the elements 
    for num in nums: 
        # If num is not in new_list, then add it 
        if num not in new_list: 
            new_list.append(num) 
  
    return new_list 

# Main code 
input_list = [1,2,3,4,4,2,7,8,8,1]
print(remove_duplicates(input_list))"
Develop a function in Python to identify the courses in a list of courses that need prerequisites.,"def prerequisitesCourses(courses):
    requiredCourses = []
    for course in courses:
        if course[1] != ""none"":
            requiredCourses.append(course[1])
    return requiredCourses"
Create an algorithm in Python for sorting an array of integers with the bubble sort method.,"def bubble_sort(arr):
    for i in range(len(arr)):
        for j in range(len(arr) - 1):
            if arr[j] > arr[j+1]:
                temp = arr[j]
                arr[j] = arr[j+1]
                arr[j+1] = temp
    return arr

result = bubble_sort([12, 3, 10, 7, 5, 11])
print(result)"
Write a function in Python that takes two strings as input and return true if one is a rotation of the other.,"def is_rotation(s1, s2):
  # edge case check
  if len(s1) != len(s2):
    return False

  # concatenate s2 to itself
  concat_s2 = s2 + s2

  #search s1 in concat_s2
  return s1 in concat_s2"
Design a Python script to remove all numerical elements from a list.,"lst = [1, 2, 3, ""a"", ""b"", ""c"", 4, 5]

new_lst = []

for item in lst:
    if not isinstance(item, int):
        new_lst.append(item)

print(new_lst)"
Generate a Python function to check if a number is prime or not.,"def is_prime(num):
    if num <= 1:
        return False
    for i in range(2,num):
        if num % i == 0:
            return False
    return True"
Explain the difference between a ``list`` and a ``tuple`` in Python.,"The difference between a list and a tuple in Python is that a list is mutable, meaning its contents can be changed, while a tuple is immutable, meaning its contents cannot be changed. A list has square brackets around it, while a tuple has parentheses around it. Lists are used when the data needs to be changed, while tuples are used when the data is fixed and cannot be changed."
Create a function in Python that returns the average of three numbers given as its arguments.,"def average_three(num1, num2, num3):
    return (num1 + num2 + num3) / 3"
Write a Python program to find the maximum sum of any continous subarray.,"def maxSubarrySum(arr):
  cur_max = 0
  global_max = 0
  
  for i in arr:
    cur_max = max(cur_max + i, 0)
    global_max = max(global_max, cur_max)
    
  return global_max
  
# test
arr = [1, -2, 3, 4, -5]
print(maxSubarrySum(arr))

# output: 7"
Generate a Python dictionary from a given list of strings.,"# Create a dictionary from a list
my_dict = {key: value for key, value in enumerate([""Apple"", ""Banana"", ""Carrot""])}

# Print dictionary
print(my_dict)"
Optimize an existing Python sorting algorithm to minimize its runtime.,"def sort(arr):
 swapped = True
 while swapped:
 swapped = False
 for i in range(len(arr) - 1):
 if arr[i] > arr[i + 1]:
 arr[i], arr[i + 1] = arr[i + 1], arr[i]
 swapped = True"
Write a python function to check whether the length of the word is odd or not.,"def word_len(s): 
    s = s.split(' ')   
    for word in s:    
        if len(word)%2!=0: 
            return True  
        else:
          return False"
Come up with a solution in Python to replace all the words in a sentence with the same character.,"def replaceWordsWithCharacter(sentence, character):
    sentenceList = sentence.split(' ')
    newSentence = ''
    
    for word in sentenceList:
        newSentence += character
    
    return newSentence

sentence = ""I am bored""
character = ""*""
print(replaceWordsWithCharacter(sentence,character))"
Write a Python program to find all the common elements between two lists.,"def intersection(list1, list2): 
    return list(set(list1) & set(list2))"
Write a short python script to get the average of numbers stored in the list.,"# Compute the average of the numbers
numbers = [1, 2, 3, 4, 5]
total = 0
for number in numbers:
    total += number

# Divide the total by the number of elements in the list
average = total / len(numbers)

# Print the average
print(average)"
Find the minimum of two numbers using Python.,"def find_min(a, b):
    return min(a, b)

result = find_min(5, 3)
print(result) # 3"
Create a Python function for computing the Factorial of a number.,"def factorial(n):
   if n == 0:
      return 1
   else:
      return n * factorial(n-1)

print(factorial(6))"
"Design a Python function that generates a password string from random alphabets, numbers and special characters.","import random
import string

def generate_password(length):
    ''' 
    Generate a password string of specified length 
    containing random alphabets, numbers and special characters. 
    '''
    password = ''.join(random.choice(string.ascii_letters + string.digits + string.punctuation) for i in range(length))
    return password"
Write a Python program to identify which elements in a list are unique,"def find_unique_elements(lst):
    unique_list = []
    for item in lst:
        if item not in unique_list:
            unique_list.append(item)
    return unique_list"
Create a Python function that takes in a text string and returns a dictionary of words and the number of times each word appears in the text string.,"def words_count(text):
 words_dict = {}
 for word in text.split(' '):
 if word in words_dict:
 words_dict[word] += 1
 else:
 words_dict[word] = 1
 return words_dict

words_dict = words_count(""A quick brown fox jumps over the lazy dog"")
print(words_dict)"
Design a function that returns the least common multiple (LCM) of two numbers,"# Python3 program to find LCM of two numbers 

# method to return gcd of a and b 
def gcd(a, b): 
    if a == 0 : 
        return b 
          
    return gcd(b % a, a) 
      
# method to return LCM of two numbers 
def lcm(a, b): 
    return (a*b) // gcd(a, b)"
Write a Python program to calculate the letter grade of a given numerical grade.,"def calculate_grade(score):
    if score >= 90:
        return ""A""
    elif score >= 80:
        return ""B""
    elif score >= 70:
        return ""C""
    elif score >= 60:
        return ""D""
    else:
        return ""F""

result = calculate_grade(90)
print(result)"
Develop a Python class for a student to be stored in a database.,"class Student:
    def __init__(self, name, age, grade, courses):
        self.name = name
        self.age = age
        self.grade = grade
        self.courses = courses

    def enroll_in_course(self, course):
        self.courses.append(course)

    def get_grade(self):
        return self.grade"
Create a function in Python that finds all prime numbers up to a given number,"def is_prime(num):
    for i in range(2,num):
        if (num % i) == 0:
            return False
    return True

def generate_prime_numbers(num):
    for n in range(2, num+1):
        if is_prime(n):
            print(n, end="" "")

generate_prime_numbers(50)"
"Create a python data structure to store customer data, including customer name, address, email and phone number.","customer = {
    'name': ""John Doe"",
    'address': ""1234 Anystreet Anytown, ST 12345"",
    'email': ""johnd@example.com"",
    'phone': ""123-456-7890""
}"
Write a Python program that creates a dictionary with a list as a key,"def make_dict_from_list(list_key): 
    dictionary = {}
    for element in list_key:
        dictionary[element] = []
    return dictionary"
Write a function to find the nth tetrahedral number.,"def tetrahedral_number(n): 
	return (n * (n + 1) * (n + 2)) / 6"
Write a Python program to sort a list of numbers from lowest to highest.,"[3, 4, 5, 7, 8]"
Implement a function in Python to take a string of comma separated numbers and return the average of the numbers.,"def calculate_average(nums):
 nums_list = nums.split("","")
 total = 0
 for num in nums_list:
 total += float(num)
 return total / len(nums_list)
 
# test code
print(calculate_average(""3, 4, 5, 6, 7"")) # should print 5.0"
Create a Python dictionary with keys based on the given list of data and assign a default value to them.,"dictionary = {1: 'default', 2: 'default', 3: 'default'}"
Create a Python program that can generate a dictionary of the frequency of words in a given phrase.,"def word_count(phrase):
    word_dict = {} 
    words = phrase.split() 
    
    for word in words: 
        if word in word_dict: 
            word_dict[word] += 1
        else: 
            word_dict[word] = 1
  
    return word_dict"
Create a class in Python that has one method for adding two numbers and another method for subtracting two numbers.,"class Numbers:
   
    def __init__(self):
        pass
   
    def add(self, a, b):
        return a + b
   
    def subtract(self, a, b):
        return a - b"
Create a Python script to print out all the numbers in a given range that are divisible by a given number.,"def printDivisible(lower, upper, divisible):
    for i in range(lower, upper + 1):
        if i % divisible == 0:
            print(i)

printDivisible(lower, upper, divisible)"
Create a Python function to verify a given user input.,"def verify_input(user_input):
    # Define the accepted characters
    allowed_chars = ""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0987654321_""
    for char in user_input:
        if char not in allowed_chars:
            return False
    return True"
Optimize this Python code to achieve better performance.,"def functionA(x):
    answer = 0
    for i in range(x):
        answer += x-i
    return answer"
Generate a Python class that defines the properties and methods of a circle,"class Circle:
    def __init__(self, radius):
        self.radius = radius
        
    def get_area(self):
        return 3.14 * self.radius ** 2
        
    def get_circumference(self):
        return 2 * 3.14 * self.radius"
Write a Python function to compute the length of each element in the given list.,"def list_length(list):
  for element in list:
    print(len(element))

list_length(list)"
Suggest  a web scraper API to extract tabular data from a website.,"A popular API for web scraping and extracting tabular data from websites is Scrapy. It provides an easy-to-use API for programming web crawlers in Python. It is also extensible, so it can be easily modified and extended to focus on more specific tasks."
Generate a complete python code to print the output shown.,"print(""I love Python"")"
Generate a Python program to sort a given list of integers in descending order.,"def descending_order_sort(arr): 
    n = len(arr)  
    for i in range(n): 
        for j in range(0, n-i-1): 
            if arr[j] < arr[j+1] : 
                arr[j], arr[j+1] = arr[j+1], arr[j] 

arr = [6, 4, 7, 2, 1, 3] 
descending_order_sort(arr)
print(arr)"
Code a Python program to calculate the permutation of a given string.,"def permutations(string):
 if len(string) == 0:
  return []

 if len(string) == 1:
  return [string]

 perm_list = []
 for c in string:
  for perm in permutations(string.replace(c, '')):
   perm_list.append(c + perm)
 return perm_list

string = ""ABC""
print(permutations(string))"
Write a web scraper in Python to extract all the links from a given webpage and print them.,"from bs4 import BeautifulSoup
import requests

# Get html of desired webpage
url = ""https://www.example.com/""
r = requests.get(url)
html = r.text

# Parse html using BeautifulSoup
soup = BeautifulSoup(html, 'html.parser')

# Extract all links
links = []
for link in soup.find_all('a'):
    links.append(link.get('href'))

# Print all links
print(links)"
Create a function in Python which finds the minimum of the list of given numbers.,"def min_list(list1): 
    min_value = min(list1) 
  
    return min_value"
Convert the following Matlab code into Python.,"import numpy as np
a = np.arange(0, 101, 10)
b = np.zeros(101)
for i in range(1, 101):
    b[i] = 5 * i"
Create a Python program to return the nth Fibonacci number that is divisible by 3,"def nthFibDivisibleBy3(n): 
    
    prev, curr = 0, 1
    i = 2
  
    while(i < n + 1):
 
        prev, curr = curr, prev + curr
  
        if curr % 3 == 0:
            nth = curr
        i+=1
  
    return nth"
"Generate a Python program to classify integers between -5 and 5 into ""negative"", ""zero"", and ""positive"".","def classify_int(x):
    if x < 0:
        return 'negative'
    elif x == 0: 
        return 'zero'
    elif x > 0:
        return 'positive'"
"Create a program that defines a Python class named 'Car' with the following attributes: name, brand, color, max_speed, and is_running.","class Car:
    def __init__(self, name, brand, color, max_speed):
        self.name = name
        self.brand = brand
        self.color = color
        self.max_speed = max_speed
        self.is_running = False

    def start(self):
        self.is_running = True

    def stop(self):
        self.is_running = False"
Create a basic Natural Language Processing (NLP) system using Python to analyze sentences.,"import nltk

def process_sentence(sentence):
 """"""
 A basic NLP pipeline for analyzing a given sentence.
 """"""
 tokens = nltk.word_tokenize(sentence) # Tokenize the sentence
 tagged = nltk.pos_tag(tokens) # Assign part-of-speech labels
 parsed = nltk.parse.stanford.StanfordParser().raw_parse(sentence) # Parse the sentence
 return tokens, tagged, parsed"
Write a Python program to get the two smallest numbers in a list of numbers.,"list = [1, 3, 7, 4, 5]
small1 = min(list)
list.remove(small1)
small2 = min(list)

print(small1, small2) # 1, 3"
EDIT this Python function to print the number of characters in its argument.,"def print_length(text):
    print(""Length of text is "" + str(len(text)))"
Write a Python script to calculate the prime factorization of a number.,"def prime_factorization(number):
    i = 2
    factors = []
    while i * i <= number:
        if number % i:
            i += 1
        else:
            number //= i
            factors.append(i)
    if number > 1:
        factors.append(number)
    return factors

prime_factorization(number)"
Write a Python program to clean a given text from unwanted words and punctuations.,"import string

def clean_text(text):
 # remove punctuation 
 translator = str.maketrans('', '', string.punctuation)
 text = text.translate(translator)
 
 # remove unwanted words
 unwanted_words = {'the', 'and', 'a'}
 words = text.split(' ')
 words = [word for word in words if word not in unwanted_words]
 
 return ' '.join(words)"
Create a Python program that takes a string of text and returns a list of all words in it.,"def get_words(sentence):
    words = sentence.split(' ')
    return words

words = get_words('This is a sentence.')
print(words)"
Generate code in Python to print out the common elements of two sorted lists in linear time.,"def find_common_elements(list1, list2):
    common_elements = []
    i = 0
    j = 0
    while i < len(list1) and j < len(list2):
        if list1[i] == list2[j]:
            common_elements.append(list1[i])
            i += 1
            j += 1
        elif list1[i] > list2[j]:
            j += 1
        else:
            i += 1
    return common_elements"
Design a class in Python to describe a 3-dimensional vector.,"class Vector:
    def __init__(self, x, y, z):
        self.x = x
        self.y = y
        self.z = z
    
    def magnitude(self):
        return (self.x**2 + self.y**2 + self.z**2)**0.5
    
    def dot_product(self, other):
        return self.x*other.x + self.y*other.y + self.z*other.z"
Create a function in Java that encodes a string using base64.,"import java.util.Base64;

public String encode(String message) {
 byte[] messageBytes = message.getBytes();
 String encodedMessage = Base64.getEncoder().encodeToString(messageBytes);
 return encodedMessage;
}

String message = ""Python"";
String encodedMessage  = encode(message);
System.out.println(encodedMessage); // Output: UHl0aG9u"
Write a Python program to optimize an existing array using Bubble sort.,"def bubble_sort(arr):
    for i in range(len(arr)):
        for j in range(len(arr) - 1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
    return arr

if __name__ == '__main__':
    arr = [2,3,1,4,5]
    print(""Optimized array:"", bubble_sort(arr))"
Create an AI program in Python that determines whether a given sentence is a statement or a question.,"import re

def is_question(sentence):
 sentence = sentence.strip()
 if sentence.endswith('?'):
 return True
 else:
 return False

sentence = ""The weather is cold today""
print(is_question(sentence)) # False

sentence = ""Is it raining outside?""
print(is_question(sentence)) # True"
Optimize an existing sorting algorithm to be as efficient as possible using Python.,"def sort(arr):
 n = len(arr)
 for i in range(n): 
 min_index = i 
 for j in range(min(i+1, n)): 
 if arr[min_index] > arr[j]: 
 arr[i], arr[min_index] = arr[j], arr[i] 
min_index = j"
Write a function to find the lateral surface area of a cube.,"def lateralsurface_cube(l):
  LSA = 4 * (l * l)
  return LSA"
Create an algorithm in Python for searching for an element in an array.,"def linearSearch(arr, target):
  for i in range(len(arr)):
    if arr[i] == target:
      return i
  return -1 # target not found"
What code will create a directory in Python?,"import os
os.mkdir(""directory_name"")"
Create a program in Python to compute the cosine similarity between two given vectors.,"import numpy

def cos_sim(vec1, vec2):
    sim = numpy.dot(vec1, vec2)/(numpy.linalg.norm(vec1)* numpy.linalg.norm(vec2)) 
    return sim

vec1 = [2, 5]
vec2 = [1, 3]
print(""Cosine Similarity:"", cos_sim(vec1, vec2))"
"Using the ""range"" function, write a Python program to find the sum of all numbers in a given range.","def sum_in_range(n1, n2):
    return sum(range(n1, n2+1))

print(sum_in_range(3, 7))

# Outputs:
# 25"
Create a function in Python that takes a string as input and converts all the vowels to capital letters.,"def convert_to_upper(str):
    res = """"
    for ch in str:
        if ch in ""aeiou"":
            res += ch.upper()
        else:
            res += ch
    return res

input = ""This is a sample string""
output = convert_to_upper(input)
print(""Converted string: ""+ output)"
Create an algorithm in Python to convert a binary number to its decimal equivalent.,"def binaryToDecimal(binary):
    binary = str(binary)
    length = len(binary)
    decimal = 0
    j = 0
    for i in range(length-1, -1, -1):
        decimal += (2**j)*int(binary[i])
        j += 1
    return decimal

binary_number = 1010101
decimal_number = binaryToDecimal(binary_number)
print(decimal_number) # Output: 85"
Optimize this python code to reduce the number of lines and make it more efficient,"def calculate_sum(numbers):
    return sum(numbers)"
Create a Python function that uses a given dictionary to calculate the sum of all the values for each key.,"def sum_dict_values(dict):
  result = 0
  for key in dict:
    result += dict[key]

  return result

dict = {'a': 4, 'b': 2, 'c': 1}
sum = sum_dict_values(dict)
print(sum) # 7"
Generate a four-line Python program that uses a loop to add all the integers from 1 to 10 and print the result.,"n = 0
for i in range(1,11):
 n = n + i
print(""The sum of all the numbers between 1 and 10 is:"", n)"
Create a function which reverses the characters in a string.,"""""""
Create a function which reverses the characters in a string
""""""

def reverse_string(string):
    reversed_string = """"
    for i in range(len(string) -1, -1, -1):
        reversed_string += string[i]
    return reversed_string

string = ""Python""
reversed_string = reverse_string(string)

print(""The original string is:"", string)
print(""The reversed string is:"", reversed_string)"
Use the given data structure to create a python class.,"class Person:
    def __init__(self, data):
        self.name = data['name']
        self.age = data['age']
        self.city = data['city']"
Develop an algorithm in Python to find the number of combinations for selecting a team of 8 members out of 20 people.,"def combination_of_team(n, k):
    return math.factorial(n)//(math.factorial(k)*math.factorial(n-k))

team_members = 8
total_members = 20

print(combination_of_team(total_members, team_members))"
Design an algorithm to check if a number is a perfect square in Python.,"import math 
  
def isPerfectSquare(n): 
    # Find floating point value of 
    # square root of x. 
    sqr = math.sqrt(n) 
   
    # If square root is an integer 
    return (sqr - math.floor(sqr) == 0) 
  
# Driver program 
x = 25
if(isPerfectSquare(x)): 
    print(x, ""is a perfect square"") 
else: 
    print(x, ""is not a perfect square"")"
Design an algorithm in Python for finding the longest string in an input.,"def longest_string(strings):
    longest_len = 0
    longest_str = ''
    for s in strings:
        str_len = len(s)
        if str_len > longest_len:
            longest_str = s
            longest_len = str_len
    return longest_str

strings = ['cat', 'dog', 'elephant']
longest_str = longest_string(strings)
print(longest_str)"
Write a function to reverse each list in a given list of lists.,"def reverse_list_lists(lists):
    for l in lists:
        l.sort(reverse = True)
    return lists "
"Create a class in Python named ""Employee"" with 3 instance variables ""name"", ""salary"", and ""age"".","class Employee():
    def __init__(self, name, salary, age):
        self.name = name
        self.salary = salary
        self.age = age"
Write a function in Python to determine the largest number in a given array.,"def get_largest_number(numbers):
    largest_number = numbers[0]
    for number in numbers:
        if number > largest_number:
            largest_number = number
    return largest_number"
Write a Python program to sort a list of tuples using a lambda expression,"sorted_list = sorted(tuple_list, key=lambda x: (x[1], x[0]))
print(sorted_list)

# Output: [(3, 1), (2, 2), (1, 3), (2, 3)]"
"Using the given Python data, create dictionaries of all students and all courses with the corresponding IDs as keys.","student_dict = {'john': {'grade': 'A', 'age': 15},
 'jane': {'grade': 'B', 'age': 12},
 'dave': {'grade': 'B', 'age': 10}}

courses_dict = {'math': {'grade': 'B', 'duration': 18},
 'science': {'grade': 'A', 'duration': 20}}"
Write a Python program to print the top 5 most frequent words in a given sentence.,"import collections
 
sentence = ""Python is an interpreted, high-level, general-purpose programming language.""
 
# Split sentence into words
words = sentence.split()
 
# Set the counter for words
counter = collections.Counter(words)
 
# Find top 5 most frequent words
result = counter.most_common(5)
print(result)"
Create a Python function to generate an array of random numbers that follows a binomial distribution.,"import numpy as np

def binomial(n, p):
  return np.random.binomial(n, p)

dist = binomial(n, p)"
Write a Python program that takes a list as input and returns a list that contains only the unique elements.,"list_items = [2, 3, 3, 4, 4, 5, 6, 7, 7]

def find_unique_items(input_list):
    result = []
    for elem in input_list:
        if elem not in result:
            result.append(elem)
    return result

print(find_unique_items(list_items))"
Create a Python script to print the sum of all numbers divisible by 3 or 7 in a list.,"nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]

total = 0

for num in nums:
    if (num % 3 == 0) or (num % 7 == 0):
        total += num

print(total)   # Output: 42"
Print the first 10 Fibonacci numbers.,"# Python program to print the first 10 Fibonacci numbers
    
def Fibonacci(n): 
  f1 = 0
  f2 = 1
  if (n < 1): 
    return
  for x in range(0, n): 
    print(f2, end = "" "") 
    next = f1 + f2 
    f1 = f2 
    f2 = next
    
Fibonacci(10)"
Generate a programming code with Python to count the frequency of each character in a given string.,"def count_frequency(text):
  char_frequency = {}
  for i in text:
    if i in char_frequency:
      char_frequency[i] += 1
    else:
      char_frequency[i] = 1
  return char_frequency

str1 = 'hello'
res = count_frequency(str1) 

print (""Per character frequency is : \n"" +  str(res))"
Write a Python function to find the intersection between two given sets.,"def intersection(set1, set2):
  return set1.intersection(set2)"
Write a Python script to calculate the sum of the elements of a list.,"nums = [1, 2, 3, 4, 5]

sum_val = 0
for n in nums:
    sum_val += n

print(f""Sum of the elements in the list: {sum_val}"")"
Implement a search algorithm in Python that finds a given element in an array.,"def search(array, target):
  for i in range(len(array)):
    if array[i] == target:
      return i
   
  return -1

array = [2, 4, 6, 3, 1]
target = 4

result = search(array, target)

if result != -1:
  print(""Element found at index "" + str(result))
else:
  print(""Element not found"")"
Write a python program to compute the total cost of an item given a price and the quantity.,"def calculate_total_price(price, quantity):
  total_cost = price * quantity
  return total_cost

price = 5
quantity = 10
total_cost = calculate_total_price(price, quantity)
print(""The total cost is:"", total_cost)"
Write a function to find the area of a trapezium.,"def area_trapezium(base1,base2,height):
 area = 0.5 * (base1 + base2) * height
 return area"
Can you create a program in Python to display the first 10 elements of the Fibonacci Sequence?,"def Fibonacci(n): 
    a = 0
    b = 1
    if n < 0: 
        print(""Incorrect input"") 
    elif n == 0: 
        return 0
    elif n == 1: 
        return 1
    else: 
        for i in range(2,n+1): 
            c = a + b 
            a = b 
            b = c 
        return b 
for i in range(0, 10):
    print(Fibonacci(i))"
You need to write a program in Python that checks if a given number is a perfect square or not.,"def isPerfectSquare(n):
    root =  n ** 0.5
    return root == int(root)

result = isPerfectSquare(36)
print(result)"
Create a sorting algorithm in Python that sorts a list of numbers from smallest to largest.,"def sort_nums(nums):
    for i in range(len(nums)):
        for j in range(len(nums)-i-1):
            if nums[j] > nums[j+1]:
                nums[j], nums[j+1] = nums[j+1], nums[j]
    return nums"
Generate a Python program that implements a class for calculating the area of a circle.,"class Circle:
 
    def __init__(self, radius):
        self.radius = radius 
 
    def area(self):
        """"""Returns the area of a circle given the radius""""""
        return (self.radius**2) * 3.14159
 
 
# Usage example:
 
my_circle = Circle(2)
print(my_circle.area()) # 12.56636"
Create a list of codes to store product data in Python.,"product_data = [
    ('code', 'str'),
    ('name', 'str'),
    ('quantity', 'int')
]"
Create a Bash script to run a Python program in the background.,"#!/bin/bash

# Run a Python Program in Background

# Store the current directory
CURRENT_DIR=$(pwd)

# Execute the python script
python $CURRENT_DIR/<your_python_script>.py &"
Create a Python program that generates a factorial for a given number n.,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)"
Create a Python script to print the multiples of 4 up to 200.,"for i in range(0, 201, 4):
    print(i)"
Is it possible to create a neural network in Python?,"Yes, it is possible to create a neural network in Python. In fact, Python has many machine learning libraries such as Keras, TensorFlow, and PyTorch which allow the user to create neural networks. These libraries provide various layers, optimizers, and activation functions used to create neural networks with Python."
"Generate a random password in Python. It should include digits, symbols and upper and lowercase letters.","import random
import string

def generate_password():
    lettersAndDigits = string.ascii_letters + string.digits
    password = ''.join(random.choice(lettersAndDigits) for i in range(12))
    return password"
Create a Python script to evaluate an expression given as a string.,"# input expression as a string
expr = ""2 * (3 + 1)""

# Evaluate the expression using eval()
result = eval(expr)

# print the result
print(""Result:"", result)"
Classify the given words using a Python classification program.,"import nltk
from nltk.tokenize import word_tokenize

words = ['horse', 'dog', 'cat']

tokens = [word_tokenize(word) for word in words]

for token in tokens:
    print(nltk.pos_tag([token])[0][1])

# prints NN, NN, NN"
Generate a Python program to generate multiplication table of a given number.,"def multiplication_table(num): 
    for i in range(1, 11): 
        print(num, 'x', i, '=', num*i) 
        
num = int(input(""Enter a number: ""))

multiplication_table(num)"
"Write a Python program to clean a given string. The given string should be stripped of special characters, converted to lowercase and only words with more than three characters should be returned.","s= ""This is, MY string!?""
 
output=""""
 
for i in s:
 if i.isalnum():
  output+=i.lower()
 
output = ' '.join(w for w in output.split() if len(w)>3)
 
print(""Cleaned String: ""+output)"
"Create a Python program to calculate the area of a circle, given the radius.","import math

def area_circumference(radius):
    area = math.pi * radius ** 2
    return area"
Transform the following piece of code from C to Python,"a = 3
b = 2
c = a + b"
Develop a class in Python to represent a Bank Account and implement functions to perform transactions.,"class BankAccount:
 def __init__(self, name, balance):
  self.name = name
  self.balance = balance
 
 def deposit(self, amount):
  self.balance += amount
 
 def withdraw(self, amount):
  self.balance -= amount
 
 def check_balance(self):
  return self.balance"
Write a Python program to solve the following mathematical equation.,"def solve_equation(equation):
    x = float(x)
    solution = (2*x**2 - x + 1)
    return solution"
Write a Python program to query data from a PostgreSQL database.,"import psycopg2

# Connect to the PostgreSQL database
db_conn = psycopg2.connect(
    user=""<USER>"",
    password=""<PASSWORD>"",
    host=""localhost"",
    port=""5432""
    )

# Create a cursor object
cur = db_conn.cursor()

# Execute a query
cur.execute(""SELECT * FROM table_name"")

# Fetch the results
rows = cur.fetchall()

# Iterate through the results
for row in rows:
    print(row)"
Propose and implement a method to sort a list of varied size nested lists in Python.,"def sortList(lists):
 sortedList = [sorted(lst) for lst in lists]
 sortedList.sort(key = len)
 return sortedList

lists = [[2,6],[1],[3,4,5]]
print(sortList(lists)) // prints [[1],[2,6],[3,4,5]]"
Design a code generation program in Python to generate a HTML page with text content.,"def generate_html(text):
    html = ""<html>\n""
    html += ""<body>\n""
    html += ""<p>"" + text + ""</p>\n""
    html += ""</body>\n""
    html += ""</html>\n""
    
    return html

if __name__ == ""__main__"":
    text = ""Hello World!""
    html = generate_html(text)
    print(html)"
Write a Python program to replace all the occurrences of one character with another in a given string.,"def replace_char(string, char_rep, char_rep_with):
    new_string = string.replace(char_rep, char_rep_with)
    return new_string

result = replace_char('Hello World!', 'l', 't')
print(result)"
Generate a python program to swap the first and last element of a list,"def swap(list_of_numbers):
    list_of_numbers[0], list_of_numbers[-1] = list_of_numbers[-1], list_of_numbers[0]
    return list_of_numbers"
Write a Python program to capitalize the first letter of each word in a sentence.,"# Capitalize the first letter of each word in a sentence

sentence = ""python is a popular programming language""

# split the sentence into words 
words = sentence.split("" "") 
# capitalize the first letter of each word 
words = [word.capitalize() for word in words] 
# join the edited words 
sentence = "" "".join(words) 

print(sentence) # Output: Python Is A Popular Programming Language"
Generate a correct Python program to copy a list.,"def copy_list(list_x):
	list_y = list_x [:]
	return list_y"
Design a web scraper using Python that gathers all the phone numbers from a set of webpages?,"import requests
import re

def scrape_phone_numbers(urls):
    phone_numbers = []
    for url in urls:
        response = requests.get(url)
        numbers = re.findall(""([+]\d{2}\s?0?\d{10})"", response.text)
        phone_numbers.extend(numbers)
    return phone_numbers"
Improve the design of the following Python code.,"def count_vowels(string):
    vowel_count = 0
    vowels = 'aeiou'
    for letter in string:
        if letter in vowels:
            vowel_count += 1
    return vowel_count"
Generate a Python program to convert all characters to lowercase,"def convert_to_lowercase(string):
    return string.lower()"
Create a basic Python program to list all the odd numbers from 0 to a user-specified number,"def odd_numbers(num):
 for n in range(num+1):
 if n % 2 != 0:
 print(n)

odd_numbers(user_number)
# Output: 1, 3, 5, 7, 9"
Generate a Python program that computes and prints the sum of the even numbers in a given list.,"def get_even_sum(nums):
    even_sum = 0
    for num in nums:
        if num % 2 == 0:
            even_sum += num
    return even_sum

nums = [2, 3, 6, 7, 13, 14]  
even_sum = get_even_sum(nums)
print(even_sum)"
Rewrite the following program to use Python's filter function,"numbers = [12, 15, 20, 9, 5]

filtered = list(filter(lambda x: x > 10, numbers))
print(filtered)"
Create a RESTful API endpoint in python that will accept an input string and return a list of palindrome words.,"@app.route('/find_palindromes', methods=[""GET""])
def find_palindromes():
    text = request.args.get('text', '')
    words = text.split(' ')
    result = []
    for word in words:
        if word == word[::-1]:
            result.append(word)
    return jsonify(result)"
Write a Python script to get the nth Fibonacci number,"def get_fibonacci_number(n):
 if n == 0:
 return 0
 elif n == 1:
 return 1
 else:
 return get_fibonacci_number(n-1) + get_fibonacci_number(n-2)"
Create a Python program to convert paragraphs into sentences.,"def convert_paragraphs_to_sentences(paragraph): 
    sentences = paragraph.split('. ') 
    return sentences

sentences = convert_paragraphs_to_sentences(""This is the first sentence. This is the second sentence. This is the third sentence."")
for x in sentences:
    print(x)"
Design an algorithm in Python to find all unique combinations of three numbers that sum to a given value.,"def findUniqueCombos(targetSum): 
  result = []
  for i in range(targetSum+1): 
    for j in range(i+1): 
      for k in range(j+1): 
        if i + j + k == targetSum: 
          uniqueCombo = [i, j, k] 
          result.append(uniqueCombo) 
  
  return result"
Construct a while loop that executes 20 times in Python.,"i = 0

while i < 20:
    # do something useful
    i += 1"
Write a python code snippet to append a new item to a given list.,list.append(16)
Create a function in Python that takes a sorted list of random integers and returns only the unique values in the list (no duplicates).,"def get_unique_values(list_of_integers):
    unique_values = []
    for value in list_of_integers:
        if value not in unique_values:
            unique_values.append(value)
    return unique_values

# Testing
list_integers = [2, 3, 4, 4, 5, 6, 7, 7, 8, 8]
print(get_unique_values(list_integers))  # [2, 3, 4, 5, 6, 7, 8]"
Develop a Python program to compare two given strings and display the number of matches,"def compareStrings(string1, string2):
    count = 0
    for ch in string1:
        if ch in string2:
            count +=1
    return count

print(compareStrings(""Python"", ""Program""))
// Output: 3"
Suggest a program to calculate the dot product of two vectors,"# Python program to calculate the dot product of two vectors

# vector A 
A = [1, 2, 3] 

# vector B 
B = [2, 3, 4] 

# dot product of two vectors 
dot_product = 0

# iterating over vector elements 
for i in range(len(A)): 
    dot_product += A[i] * B[i] 
# print the dot product 
print(dot_product) 

# Output: 20"
Can you write a segment of code in Python that sets a variable equal to a random integer between 1 and 10?,"import random

my_random_number = random.randint(1,10)"
Write a Python program to detect if a string contains any special characters.,"def has_special_characters(string):
    import re
    return bool(re.search('[^a-zA-Z0-9]', string))"
Create a function in Python to remove all vowels in a given string.,"def remove_vowels(string): 
    vowels = ('a', 'e', 'i', 'o', 'u')  
    for x in string.lower(): 
        if x in vowels: 
            string = string.replace(x, """") 
    return string

print(remove_vowels(""Hello, World!""))"
Design a Python script to print the characters in a string in reverse order.,"def reverseString(string):
    reversed = """" 
    for character in string:
        reversed = character + reversed
    return reversed"
"Implement a 'closest to zero' algorithm in Python, which returns the closest to 0 value from a given array.","def closest_to_zero(arr):
    closest_val = 0
    closest_diff = float('inf')
    
    for val in arr:
        if abs(val) < abs(closest_diff):
            closest_diff = val
            closest_val = val

    return closest_val

arr1 = [-2, 4, -5, -1]
result = closest_to_zero(arr1)
print(result)"
Create a Python program that takes two strings as parameters and prints out all of the common letters in the two strings.,"def printCommonChars(str1, str2):
    commonChars = ''
    for char in str1:
        if char in str2:
            commonChars += char
    
    print(commonChars)

printCommonChars('Hello','World')"
Create a simple webscraper using Python and Beautiful Soup.,"import requests
from bs4 import BeautifulSoup
 
url = 'https://example.com'
content = requests.get(url).content
soup = BeautifulSoup(content, 'html.parser')
 
for element in soup.find_all('h2'):
    print(element.text)"
Generate a correct python program to fetch the price of a given stock ticker symbol.,"import requests

def get_stock_price(symbol):
 url = ""https://finance.yahoo.com/quote/"" + symbol
 req = requests.get(url)
 data = req.json()
 return data['regularMarketPrice']"
"Implement a solution in Python using loops, to determine the maximum number of consecutive 1's in a binary number.","def max_consecutive_ones(n):
    max_ones = 0
    count = 0
    while n > 0:
        if n %2 == 1:
            count+=1
            max_ones = max(max_ones, count)
        else:
            count = 0
        n>>=1
    return max_ones"
Generate a Python function that takes two matrices (2-dimensional lists) as inputs and returns the result of matrix multiplication.,"def multiply_matrix(A,B):
result = [[0,0], [0,0]]
for i in range(len(A)):
 for j in range(len(B[0])):
 for k in range(len(B)):
 result[i][j] += A[i][k] * B[k][j]
return result

# example
A = [[1, 2], [3, 4]]
B = [[5, 6], [7, 8]]
print(multiply_matrix(A, B)) 
# [[19, 22], [43, 50]]"
Write a Python code snippet to generate two random numbers and display the larger one.,"import random

rand1 = random.randint(1, 100)
rand2 = random.randint(1, 100)

if rand1 > rand2:
    print(rand1)
else:
    Print(rand2)"
Analyze a Python program to remove all global variables and replace them with local variables.,"def foo():
 a = 1
 print(a)

def bar():
 a = 2

foo()
bar()"
Create a Python program to implement a linear search algorithm to find an element in a list.,"def linear_search(x, n):
    found = False
    for i in range(len(x)):
        if x[i] == n:
            found = True
            break

    if found == True:
        print('Element', n, 'found at position', i)
    else:
        print('Element', n, 'not found')

x = [1, 5, 8, 3]
n = 8

linear_search(x, n)"
"Create a Python program that reads two integer values from standard input, stores them in two variables, and then swaps their values?","# Read two integer values
a = int(input())
b = int(input())

# Swap their values
temp = a
a = b
b = temp

# Print the variables
print(""a ="", a)
print(""b ="", b)"
Improve this Python function to double the input array.,"def double_array(arr):
    return [element * 2 for element in arr]"
"Rewrite the following function in Python: 
function add(x, y) {
 return x + y;
}","def add(x, y):
  return x + y"
"Generate a stack class in python that implements the push, pop and peek methods","class Stack:
 
    def __init__(self):
        self.stack = []
 
    def push(self, data):
        self.stack.append(data)
 
    def pop(self):
        if self.is_empty():
            return None
        else:
            return self.stack.pop()
 
    def peek(self):
        return self.stack[-1]
 
    def is_empty(self):
        return len(self.stack) == 0"
Create a program in Python that takes a list as input and returns a new list with every element doubled.,"def double_list(numbers):
    doubled_list = []
    for num in numbers:
        doubled_list.append(num*2)
    return doubled_list"
Write a Python program to remove a given element from a list.,"def remove_item(items, target):
    return [i for i in items if i != target]"
Write a Python program to print the multiplication table for a given number.,"def printMultiplicationTable(num):

 for i in range(1, 11):
 print(""{} x {} = {}"".format(num, i, num * i))

printMultiplicationTable(8) 
# Output:
# 8 x 1 = 8
# 8 x 2 = 16
# 8 x 3 = 24
# 8 x 4 = 32
# 8 x 5 = 40
# 8 x 6 = 48
# 8 x 7 = 56
# 8 x 8 = 64
# 8 x 9 = 72
# 8 x 10 = 80"
Compose a python list comprehension that derive the squares of the integers from 0 to 9,result = [x**2 for x in range(10)]
Create a Python program to split a string in the match of a regular expression and return a list of the split strings.,"import re

string = ""102030-abc-5060"" 
pattern = r'-\w+-' 
result = re.split(pattern, string)
print(result)

# Output -> ['102030', '5060']"
Create a Python program to search for a given item in a list of strings.,"def search_for_item(strings, item):
    for string in strings:
        if string == item:
            return True
    return False"
Reverse a string in Python without using any built-in string functions,"def reverse_string(input_string):
    output_string = """"
    for char in input_string:
        output_string = char + output_string
    return output_string"
Write a python function to split a string into characters.,"def split(word): 
    return [char for char in word] "
Create a function in Python to convert a list of strings to a single long string,"def list_to_string(list_str):
    long_str = ''
    for i in list_str:
        long_str += i
    
    return long_str

list_str = ['Hello', 'World', '!']
string = list_to_string(list_str)
print(string) # prints 'HelloWorld!'"
Construct a recursive Python program that computes the factorial of an integer.,"def factorial(n): 
    if n == 0: 
        return 1 
    else: 
        return n * factorial(n-1)"
Create a program in Python to strip all white spaces from a given string.,"def strip_whitespace(string):
  return string.replace(' ', '')"
Create a list in Python to store the first 10 numbers that are divisible by 4.,"divisible_by_four = [i for i in range(1,11) if i%4 == 0]"
"Using a dictionary, write a program in Python to categorize each list item into a group of the same type.","def categorize(items):
    groups = {
        'numbers': [],
        'strings': []
    }
    for item in items:
        if type(item) == int or type(item) == float:
            groups['numbers'].append(item)
        else:
            groups['strings'].append(item)
    return groups"
Design a Python program to reverse a string in-place.,"def reverse_string(string):
    left_pointer, right_pointer = 0, len(string) - 1

    while left_pointer < right_pointer:
        string[left_pointer], string[right_pointer] = string[right_pointer], string[left_pointer]
        left_pointer += 1
        right_pointer -= 1
    return string"
Create a sorting algorithm in Python to sort an unsorted set of names.,"def sort_names(names):
    # sorted() returns an alphabetically sorted list
    return sorted(names)

unsorted_names = [""John"", ""Jack"", ""Joan"", ""Adam"", ""Elena"", ""Mia""]

print(sort_names(unsorted_names)) # ['Adam', 'Elena', 'Jack', 'Joan', 'John', 'Mia']"
Write a Python program to find all matches of a given string in another string while ignoring case sensitivity.,"import re 

def find_match(string1, string2):
 return re.findall(r'(?i)'+re.escape(string2), string1)

string1 = ""Hello world"" 
string2 = ""World""

print(find_match(string1, string2))"
Estimate the power demand of a computer system using the given time and CPU utilization information using Python.,"def calculatePowerDemand(util, time, power):
    return util * time * power

PowerDemand = calculatePowerDemand(0.1, 10, 100)
print(PowerDemand)"
Create an AWS Lambda function in Python that calculates the summation of two given numbers.,"import json

def lambda_handler(event, context):
 # Get the input numbers
 num1 = event['Input-1']
 num2 = event['Input-2']

 # Calculate the sum
 result = num1 + num2

 # Return the output
 return {
 'Result': result
 }"
Create a Python function to break a string into its component words.,"def break_string(string):
 string = string.lower()
 words = string.split("" "")
 return words"
"Using the complex library in Python, generate the complex number whose real part is 2 and imaginary part is 3.","complex_number = complex(2,3)"
"Write a python program to parse and print out the name, email, and phone number from a given string.","def parse_contact_info(string):
    name = string.split("", "")[0]
    email = string.split("", "")[1]
    phone_number = string.split("", "")[2]
    print(f""Name: {name} \nEmail: {email} \nPhone Number: {phone_number}"")"
Create an algorithm in Python for calculating the standard deviation of a given set of numbers.,"import numpy as np

def calculate_std_dev(nums):
    n = len(nums) 
    std_dev = np.std(nums, axis=0) 
    return std_dev

nums = [3, 7, 12, 22, 35]
print(""Standard Deviation: {:.3f}"".format(calculate_std_dev(nums)))
# Output: Standard Deviation: 11.106"
Create a list comprehension in Python that takes a list of numbers and squares each number in the list.,"[x**2 for x in [1, 2, 3, 4, 5]]"
Generate a program in Python to convert a list of strings to a dictionary where all the values are 1.,"def to_dict(words):
    result = {}
    for word in words:
        result[word] = 1
    return result

result = to_dict([""Hello"", ""World"", ""Welcome""])
print(result)"
Generate a Python program to detect whether a given integer is a prime number.,"def is_prime(n):
    if n <= 1: 
        return False
    for i in range(2, int(n**0.5) + 1): 
        if n % i == 0: 
            return False
    return True"
"Generate a Python program which can produce the sum of all even numbers between 0 and n, including zero.","def sum_even_nums(n):
    sum = 0
    for i in range(0, n+1):
        if i%2 == 0:
            sum += i
    return sum"
Rewrite the following python code so that it can be run as a script.,"def my_function():
    print(""Hello, World!"")

if __name__ == '__main__':
    my_function()

if __name__ == '__main__':
    my_function()"
Make a program to search for a given string in a list of strings.,"def search_string(search_string, list_of_strings):
    for string in list_of_strings:
        if string == search_string:
            return True
    return False

result = search_string('python', ['java', 'javascript', 'python', 'ruby']) 
print(result)"
What is the code to shuffle an array in Python?,"import random

array = [1,2,3,4,5]

random.shuffle(array)"
Optimize the following Python program to ensure performance,"def find_first_occurrence(arr, x):
    for i in range(len(arr)):
        if arr[i] == x:
            return i"
Create a Python program for splitting a given string by every nth character.,"#Function for splitting a given string by every nth character
def splitStringByN(string, n): 
    res = [string[i:i+n] for i in range(0, len(string), n)] 
    return res

# Driver code
string = ""Hello World!""
n = 3
splitString = splitStringByN(string, n)
print(splitString)"
Write a function to display a given number of random items from a list in Python.,"import random

def display_random_items(lst, num):
 random.shuffle(lst)
 return lst[:num]

lst = [""dog"", ""cat"", ""bird"", ""fish""]
num = 3

random_items = display_random_items(lst, num)
print(random_items)"
Generate Python code to find the pair of numbers from an array whose sum is closest to a given number.,"def closest_sum(array, target):
  diff = float('inf')
  for i in range(len(array) - 1):
    for j in range(i + 1, len(array)):
      pair_sum = array[i] + array[j]
      if abs(target - pair_sum) < diff:
        diff = abs(target - pair_sum)
        result = [array[i], array[j]]
  return result"
Write a Python script to convert a given temperature from Fahrenheit to Celsius.,"def fahrenheit_to_celsius(fahrenheit):
 return (fahrenheit - 32) * 5/9"
Write a python function to remove the k'th element from a given list.,"def remove_kth_element(list1, L):
    return  list1[:L-1] + list1[L:]"
"Create a Python program to calculate the average value of an array and store the result in the variable ""average"".","input_array = [1, 2, 3, 4, 5]

# calculate the average value
average = sum(input_array) / len(input_array)

# print result
print(""Average:"", average)

# Output:
Average: 3.0"
"Create a Python class for a library book with fields for title, author, and ISBN.","class Book:
 def __init__(self, title, author, isbn):
  self.title = title
  self.author = author
  self.isbn = isbn

b1 = Book(""Great Expectations"", ""Charles Dickens"", ""123-456-789"")
b2 = Book(""Brave New World"", ""Aldous Huxley, ""987-654-321"")"
Edit the Python code to store the maximum value of a list in a variable called max_value,"list_values = [21, 15, 11, 17, 12, 29]
max_value = max(list_values)"
Develop an algorithm in Python for parsing a given text and counting the number of occurrences of a given word.,"def parse_text(text, word):
  word_count = 0
  words = text.split()
  for w in words:
    if w == word:
      word_count += 1
  return word_count
  
text = 'This is an example text.'
word = 'example'
word_count = parse_text(text, word)
print('The word ""{}"" appears {} times in the text.'.format(word, word_count))"
Create a Python script to print an nxn matrix containing all the numbers from 1 to n²,"def print_matrix(n):  
    matrix = [[0 for x in range(n)] for y in range(n)] 
    k = 1
  
    for i in range(0, n): 
  
        for j in range(0, n): 
  
            matrix[i][j] = k
            k = k + 1
  
    for i in range(0, n): 
  
        for j in range(0, n): 
            print(matrix[i][j], end = "" "")
    
        print("""")"
Create a Python class that sums up the results of a given array of numbers.,"class SumArray:
    def __init__(self, numbers):
        self.numbers = numbers
    
    def get_sum(self):
        sum = 0 
        for number in self.numbers:
            sum += number
        return sum"
Design a classification model in Python that can predict the probability of a customer churning.,"import numpy as np
from sklearn.linear_model import LogisticRegression 

X = np.array([[1, 20, 0], [1, 24, 0], [0, 30, 1], [1, 35, 0], [1, 32, 0]])
y = np.array([0, 0, 1, 0, 0])

model = LogisticRegression()
model.fit(X, y)

prediction = model.predict_proba([[1, 33, 0]])"
Create a Python function that validates a given string is a valid email address.,"def validate_email(email):
    # check if the email address is valid or not

    if '@' not in email:
        return False
    if '.' not in email:
        return False
    username = email.split('@')[0]
    domain = email.split('@')[1]
    if username == """" or domain == """":
        return False
    return True"
Write a Python function to get the nth number in the Fibonacci sequence.,"def Fibonacci(n): 
 a = 0
 b = 1
 if n < 0: 
  print(""Incorrect input"") 
 elif n == 0: 
  return a 
 elif n == 1:
   return b 
else: 
  for i in range(2,n): 
   c = a + b 
   a = b 
   b = c 
 return b"
"Given a list of directions, create a Python program to find the maximum cumulative sum of the list.","def max_sum(arr):
 max_sum = 0
 sum = 0
 for num in arr:
 sum += num
 max_sum = max(max_sum, sum)
 return max_sum

max_sum([3, 8, -2, 10, -6])  # 17"
"Create a program in Python that takes an integer n as input and prints out n lines of ""Hello World!""","def hello_world_lines(n):
    for i in range(n):
        print(""Hello World!"")"
"Create a class in Python called ""Person"" and add properties ""name"", ""age"", ""area"".","class Person:
  def __init__(self, name, age, area):
    self.name = name
    self.age = age
    self.area = area"
Create a Python program to generate multiplication tables from 1 to 10.,"for i in range(1, 11):
    for j in range(1, 11):
        print(i*j, end = "" "")
    print()"
Create a Python program to generate a 4x4 matrix with each element equal to the sum of elements in corresponding row and column.,"def generate_matrix():
 matrix = [[0 for _ in range(4)] for _ in range(4)]

 for i in range(4):
  for j in range(4):
   matrix[i][j] = i + j

 return matrix

print(generate_matrix()) 
# Output: [[0, 1, 2, 3], [1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6]]"
Optimize a function in Python that calculates the sum of numbers from 0 to n.,"def fast_sum(n):
    return ((n+1)*n)/2"
Turn the Python dictionary below into a data table.,"Name | Age | Gender | Hobby
-----|-----|--------|-------
John | 24  | Male   | Football"
Generate a linear regression program for Python,"import numpy as np

def calculateR2(x, y):
    # Calculate the mean of x and y vectors
    x_mean = np.mean(x)
    y_mean = np.mean(y)
    
    # Calculate the sums
    SS_tot = np.sum((y - y_mean)**2)
    SS_res = np.sum((y - x)**2)
    
    # Calculate R2
    r2 = 1 - (SS_res / SS_tot)
    
    return r2"
Write a python function to check whether a sequence of numbers has an increasing trend or not.,"def increasing_trend(nums):
    if (sorted(nums)== nums):
        return True
    else:
        return False"
Write a python program to generate a random 8-character alphanumeric password.,"import string 
import random 

def generate_password():
  chars = string.ascii_uppercase + string.ascii_lowercase + string.digits 
  size = 8
  return ''.join(random.choice(chars) for x in range(size,15)) 
    
password = generate_password()

print(""The generated random 8-character alphanumeric password is: "" + password)"
Write a Python program to generate a bar chart representing the monthly sales data for a small business.,"import matplotlib.pyplot as plt

month = [""Jan"", ""Feb"", ""Mar"", ""Apr"", ""May"", ""Jun""]
sales = [312, 443, 235, 564, 234, 431]

plt.bar(month, sales)

plt.xlabel(""Month"")
plt.ylabel(""Sales"")

plt.title(""Monthly Sales"")

plt.show()"
Rewrite the following Python script as an SQL query.,"SELECT * FROM (SELECT @curRow := @curRow + 1 AS row_number FROM
(SELECT 0 UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 ) AS t1
CROSS JOIN
(SELECT 0 UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 ) AS t2
CROSS JOIN 
(SELECT @curRow := 0) AS t3 ) AS numbers 
WHERE row_number < 6;"
Construct a correct python program to evaluate the expression y = (1/x) + x^2.,"x = 5

def evaluate_expression(x):
    y = (1 / x) + (x ** 2)
    return y"
Write a function in Python that returns the longest word from a list.,"def longest_word(word_list):
    longest = word_list[0]
    for word in word_list[1:]:
        if len(word) > len(longest):
            longest = word
    return longest

words = [""Hello"", ""how"", ""are"", ""you""]

longest_word = longest_word(words)
print(longest_word)"
Write a function to find the volume of a cone.,"import math
def volume_cone(r,h):
  volume = (1.0/3) * math.pi * r * r * h
  return volume"
Write a Python function to generate all permutations of a given list.,"def permutations(input_list):
 if len(input_list) == 0:
 yield []
 else:
 for i in range(len(input_list)):
 first_el = [input_list[i]]
 remainder_list = input_list[:i] + input_list[i+1:]
 for perm in permutations(remainder_list):
 yield first_el + perm"
Write a Python code to generate a random color code (RGB).,"# Generate a random color code (RGB) 
import random

def get_random_color():
    r = random.randint(0, 255)
    g = random.randint(0, 255)
    b = random.randint(0, 255)
    return (r, g, b)

if __name__ == '__main__':
    print(get_random_color())"
Create a simple Python program that takes in two strings and prints the one with the longer length.,"string1 = 'Inception'
string2 = 'Interstellar'

if len(string1) > len(string2):
    print(string1)
else:
    print(string2)"
Write a python function to find remainder of array multiplication divided by n.,"def find_remainder(arr, lens, n): 
    mul = 1
    for i in range(lens):  
        mul = (mul * (arr[i] % n)) % n 
    return mul % n "
Develop a Python program that prints an alphabetically sorted list of unique words from a given sentence.,"sentence = ""This sentence contains a handful of words""
word_list = sentence.split()
unique_words = set(word_list)
sorted_words = sorted(unique_words)

print(sorted_words)

# Output: ['This', 'a', 'contains', 'handful', 'of', 'sentence', 'words']"
Write a Python program to generate a random string of length n from a set of characters consisting of lowercase (a-z) and uppercase (A-Z).,"import string
import random

length = 7
chars = string.ascii_letters

random_string = ''.join(random.choice(chars) for x in range(length))

print(random_string)"
"Using an HTTP library in Python (e.g. Requests), make a POST request and send a JSON payload to a web service.","import requests

url = 'https://example.com/api/submit'
data = {'message': 'Hello!', 'name': 'John' }

r = requests.post(url, json=data)
print(r.text)"
Construct a for loop in Python that iterates over the numbers from 0 to 10 and prints the square of each number.,"for i in range(0, 11):
  print(i**2)"
"Design a Python program to calculate Fibonacci sequence for n number of terms, with n given by user.","def fibonacci(n):
  if n == 0:
    return 0
  elif n == 1:
    return 1
  else:
    return fibonacci(n-1) + fibonacci(n-2)

n = int(input(""Enter number of terms for Fibonacci sequence: ""))

print(""Fibonacci sequence:"")
for i in range(n):
  print(fibonacci(i))"
Create a sorting algorithm in Python that takes a list of numbers as an input and prints the sorted output.,"def sort(numbers):
    for i in range(len(numbers)):
        for j in range(i + 1, len(numbers)):
            if numbers[i] > numbers[j]:
                numbers[i], numbers[j] = numbers[j], numbers[i]
    return numbers"
Generate an HTML <select> element that displays a list of 3 programming languages,"<select>
  <option value=""c"">C</option>
  <option value=""java"">Java</option>
  <option value=""python"">Python</option>
</select>"
"Create a Python code snippet that prints the same output as ""Hello, world!""","print(""Hello, world!"")"
"Write a Python program that web-scrapes data from a website and stores it in a structured format (e.g. JSON, CSV).","import requests
import json

# Make a get request to get the data
response = requests.get('https://example.com')

# Store the data in a structured format
data = json.loads(response.text)

# Save the data to a json file
with open('example.json', 'w') as f:
 json.dump(data, f)"
Develop a Python program to decrypt the given messages using a key?,"def decrypt(message, key):
    decrypted_message = """"
    
    for char in message:
        ascii_value = ord(char)
        decrypted_char = chr(ascii_value - key)
        decrypted_message += decrypted_char
    
    return decrypted_message

message = ""AB cDE@5sfg90~!""
key = 6

decrypted_message = decrypt(message, key)
print(decrypted_message)"
Write a Python program which takes a string and returns the first non-repeated character.,"def first_non_repeated_char(input): 
    counts = {} 
    chars = [] 
    for char in input: 
        if char in counts: 
            counts[char] += 1
        else: 
            counts[char] = 1
            chars.append(char) 
  
    for char in chars: 
        if counts[char] == 1: 
            return char 
  
    return None"
Create a Python program to generate an ISO8601-compliant string from a given date,"from datetime import datetime

date_str = '2020-07-15'
date = datetime.strptime(date_str, '%Y-%m-%d')
iso8601_str = date.isoformat()

print(iso8601_str)
# Output: 2020-07-15T00:00:00"
Create a program in Python that checks if a number is prime or not.,"def is_prime(n):
    '''
    Function to check if the given number is a prime
    '''
    if n < 2:
        return False

    for i in range(2, n):
        if n % i == 0:
            return False

    return True"
Generate a class for representing a 2D point in Python.,"class Point2D:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    
    def distance(self, other):
        return ((self.x - other.x)**2 + (self.y - other.y)**2)**0.5

# usage example        
p1 = Point2D(1, 1)
p2 = Point2D(5, 5)
print(p1.distance(p2)) # 4.242640687119285"
Create a Python program to calculate the dot product of two vectors.,"def dot_product(v1, v2):
    total  = 0
    for (x1, x2) in zip(v1, v2):
        total += x1*x2
    return total"
Create a function in Python to get the sum of two given integers.,"def add_ints(a, b): 
  return a + b"
Construct a Python program to determine the sum of all positive integers between 1 and N that are divisible by 3,"""""""
Construct a Python program to determine the sum of all positive integers between 1 and N that are divisible by 3

def sum_div_3(N):
    total = 0
    for i in range(1, N+1):
        if i % 3 == 0:
            total += i
    return total

print(sum_div_3(15))
"""""""
Develop a Python program that counts the number of vowels in a string.,"def count_vowels(s):
  count = 0
  vowels = ""aeiou""
  
  for char in s:
    if char in vowels: 
      count += 1
  
  return count"
Write a Python program to create two separate lists containing the even and odd elements of the given list.,"# Program to create two separate lists containing the even and odd elements of the given list 
given_list = [1, 2, 3, 4, 5, 6, 7, 8] 

even_list = [] 
odd_list = [] 

for element in given_list: 
    if element % 2 == 0 : 
        even_list.append(element) 
    else: 
        odd_list.append(element) 

print(even_list)
print(odd_list)"
Write a code snippet for a search algorithm in Python with linear time complexity.,"def linear_search(arr, x): 
    
    for i in range(len(arr)): 
  
        if arr[i] == x: 
            return i 
  
    return -1"
Generate a Python program to remove vowels from a string.,"def removeVowels(string):
    vowels = ('a', 'e', 'i', 'o', 'u')
    stringWithoutVowels = """"
    for char in string:
        if char not in vowels:
            stringWithoutVowels += char
    return stringWithoutVowels

string = input(""Enter a string: "")
result = removeVowels(string)
print(result)"
Write a function in Python to convert a dictionary into a list and then sort the list alphabetically.,"def dict_to_sorted_list(d):
 # Convert Dictionary to List
 lst = list(d.items())
 
 # Sort List Alphabetically
 lst.sort(key=lambda x: x[0])
 
 return lst
 
example_dict = {'a':1, 'b':2, 'c':3}
sorted_list = dict_to_sorted_list(example_dict)
print(sorted_list)

# Output:
# [('a', 1), ('b', 2), ('c', 3)]"
Design a Python script to remove the given word from a sentence.,"sentence = ""He is working on it""
word = ""working""

sentence = sentence.replace(word, """")

print(sentence)"
Create a script in Python to determine the largest number in a sequence of numbers.,"nums = [11, 9, 12, 8, 5]
max_num = max(nums)

print(max_num) # 12"
Create a list of strings in Python based on the following conditions:,"[”Pear”, ”Watermelon”]"
Create a game in Python that involves a user guessing a number between 1 and 10.,"import random

print(""Let's play a guessing game!"")
number = random.randint(1, 10)

guess = 0
while guess != number:
 guess = int(input(""Guess a number between 1 and 10: ""))
 
 if guess == number:
 print(""You got it!"")
 else:
 print(""Try again."")"
Implement an algorithm in Python that finds the Nth Fibonacci Number.,"def Fibonacci(n): 
    if n<0: 
        print(""Incorrect input"") 
    # First Fibonacci number is 0 
    elif n==1: 
        return 0
    # Second Fibonacci number is 1 
    elif n==2: 
        return 1
    else: 
        return Fibonacci(n-1)+Fibonacci(n-2)"
Convert the following C++ code to Python.,"def foo(a, b, c):
    result = a + b + c
    return result"
Write a code snippet in Python to print a table of the perfect squares ranging from 1 to 100.,"for i in range(1,101):
    square = i * i
    print(f""{i}:{square}"")"
Create a program in Python to predict the sentiment of a phrase using a provided pretrained model.,"import numpy as np
from keras.models import load_model

# Load the model
model = load_model(model_path)

# Encode the phrase
phrase_encoded = np.array([phrase])

# Make the prediction
prediction = model.predict(phrase_encoded)

# Print the result
print(""The sentiment of the phrase is: {}"".format(prediction))"
Write a python program to sort words in alphabetical order.,"def sort_words(words): 
    words.sort() 
    return words 

words = [""software"", ""engineering"", ""programming""]
print(sort_words(words))"
Write a Python program to find the greatest common divisor of two numbers.,"def gcd(a, b): 
  
    # base case 
    if a == 0 :  
        return b 
       
    return gcd(b % a, a) 
  
a = 24
b = 60
  
print (""GCD of"", a , ""and"", b ,""is"", gcd(a, b)) 
# GCD of 24 and 60 is 12"
Generate a Python script that prints out the first 15 odd numbers,"for i in range(1, 30, 2):
    print(i)"
Write a Python program to select all the Sundays of a specified year.,"import datetime

def select_all_sundays(year):
    sunday_list = []
    for n in range(1,13):
        sundays = [d for d in [datetime.date(year, n, d) for d in range(1, 32)]
                if d.weekday() == 6]
        sunday_list.extend(sundays)
    return sunday_list

if __name__ == '__main__':
    year = 2020
    sunday_list = select_all_sundays(year)
    print(sunday_list)"
Generate a Python program to detect the key phrases in a given text.,"def detect_key_phrases(text):
    # use some NLP model to detect the key phrases
    key_phrases = model.predict(text)
    return key_phrases"
"Create a Python program to print the numbers from 1 to 100, except for multiples of three, where the program should print ""Fizz"" instead.","for num in range(1, 101):
    if num % 3 == 0:
        print('Fizz')
    else:
        print(num)"
"Write a Python program to determine the sum of the elements of an array, after applying a given function to each array element.","def element_wise_sum(func, arr):
    sum = 0 
    for elem in arr:
        sum += func(elem)
    return sum

sum = element_wise_sum(func, arr)"
Create a class in Python called Employee that includes the following attributes.,"class Employee:
    def __init__(self, name, age, salary):
        self.name = name
        self.age = age
        self.salary = salary

    def get_info(self):
        return 'Employee({}, {}, {})'.format(self.name, self.age, self.salary)"
Develop a Python program to print the first 20 Armstrong numbers,"for num in range(1,21):
   sum = 0
   temp = num
   while temp > 0:
       digit = temp % 10
       sum += digit ** 3
       temp //= 10
   if num == sum:
       print(num)"
Simplify and optimize the following Python code for computing the mean of a list of numbers.,"def mean(numbers):
    return sum(numbers) / len(numbers)"
Write a Python program to find the largest three numbers in a list.,"my_list = [1, 6, 3, 8, 7, 4]
largest_three = sorted(my_list)[-3:]
print(largest_three)"
Generate a deterministic random number generator in Python.,"import random

def random_number(seed):
    random.seed(seed)
    return random.random()

print(random_number(99))"
Write a function to remove uppercase substrings from a given string by using regex.,"import re
def remove_uppercase(str1):
  remove_upper = lambda text: re.sub('[A-Z]', '', text)
  result =  remove_upper(str1)
  return (result)"
Construct a ML pipeline for text classification in Python,"from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.pipeline import Pipeline
from sklearn.linear_model import LogisticRegression

model = Pipeline([('tfidf', TfidfVectorizer()),
                  ('clf', LogisticRegression())])"
Create a python program to encrypt a message using RSA encryption.,"from Crypto.PublicKey import RSA
def encrypt(message):
    #Generate public and private keys
    key = RSA.generate(1024)
    public_key = key.publickey()
  
    #Encrypt the message with the public key
    encrypted_message = public_key.encrypt(message, 32)
    return encrypted_message"
Create a command line tool for generating a random strong password.,"#!/usr/bin/env python

import string
import random

length = int(input(""Enter the desired password length: ""))
characters = string.ascii_letters + string.digits + string.punctuation

password = ''.join(random.choice(characters) for i in range(length))

print(f""Generated password: {password}"")"
Write a function in Python 3 which takes an input integer n and returns an array of n random numbers.,"import random

def generate_random_nums(n):
  nums = []
  for _ in range(n):
    nums.append(random.randint(0,n))
  return nums"
Create a Python program to sort a list of numbers using the quicksort algorithm.,"def quicksort(arr):
 if len(arr) <= 1:
  return arr
 pivot = arr[len(arr) // 2]
 left = [x for x in arr if x < pivot]
 middle = [x for x in arr if x == pivot]
 right = [x for x in arr if x > pivot]
 return quicksort(left) + middle + quicksort(right)

arr = [10, 5, 6, 3, 2, 8, 9, 4, 7, 1]
result = quicksort(arr)
print(result)"
Can you produce a Python script that outputs all possible permutations of a given string?,"from itertools import permutations

def print_permutations(input):
    perms = [''.join(p) for p in permutations(input)]
    for perm in perms:
        print(perm)

if __name__ == ""__main__"":
    print_permutations(""ABC"")"
Generate a valid SQL query in Python that can find all entries from a given table.,sql_query = 'SELECT * FROM table_name'
Write a function to find the perimeter of a square.,"def square_perimeter(a):
  perimeter=4*a
  return perimeter"
Design a python class for representing a student object which has name and grade as its instance variables.,"class Student():
    
    def __init__(self, name, grade):
        self.name = name 
        self.grade = grade
    
    def get_name(self):
        return self.name
    
    def get_grade(self):
        return self.grade
    
    def set_grade(self, grade):
        self.grade = grade"
Write a Python script that can convert degrees Fahrenheit to degrees Celsius.,"def FahrenheitToCelsius(temp_fahrenheit):
    temp_celsius = (temp_fahrenheit - 32) * 5/9
    return temp_celsius"
Design a Python program that prints “Hello World” when the program is run.,"if __name__ == '__main__':
    print('Hello World')"
Write a Python program to predict the class label for a given data sample.,"from sklearn.linear_model import LogisticRegression

model = LogisticRegression()

model.fit(X, y)

def predict_class(X):
    pred = model.predict([X])
    return pred"
Write a Python function that finds the maximum element in an array.,"def find_max(nums):
    max_val = nums[0]
    for num in nums:
        if num > max_val:
            max_val = num
    return max_val

nums = [3, 4, 6, 5, 9, 1, 2]
max_val = find_max(nums)
print(max_val)"
Can you write a Python code to print numbers from 1 to 10?,"for num in range(1, 11):
    print(num)"
Write a python program to determine if a string is a palindrome.,"def is_palindrome(s):
    return s == s[::-1]"
Create a script to list the content of a given directory in Linux.,"#!/usr/bin/env python

import os

path = ""/usr""

for root, dirs, files in os.walk(path):
 for file in files:
 print(os.path.join(root, file))"
Express the following SQL query in a pythonic way.,"def select_users_male_age_above_20(users):
    output = []
    for user in users:
        if user['gender'] == 'M' and user['age'] >= 20:
            output.append({'id':user['id'], 'name':user['name']})
    return output"
Write a function to find the sum of first even and odd number of a given list.,"def sum_even_odd(list1):
    first_even = next((el for el in list1 if el%2==0),-1)
    first_odd = next((el for el in list1 if el%2!=0),-1)
    return (first_even+first_odd)"
"Given two integers, write a Python function to compare them.","def compare_ints(num1, num2):
  if num1 > num2:
    return ""Integer1 is greater than Integer2""
  elif num1 < num2:
    return ""Integer1 is lesser than Integer2""
  else:
    return ""The integers are equal""

result = compare_ints(6, 4)
print(result)"
Revise a given Python code snippet to make it more efficient and performant.,"def calculate_sum(arr):
 return sum(arr)"
Train a Logistic Regression model in Python on a dataset containing 5000 samples and 5 features.,"from sklearn.linear_model import LogisticRegression

# Load the dataset
X = ...
y = ...

# Initialize model
model = LogisticRegression()

# Fit the model
model.fit(X, y)

# Evaluate the model
model.score(X, y)"
Write a Python program to find the index of an element in an array.,"def findIndex(array, element): 
  for i in range(len(array)): 
    if(array[i] == element): 
      return i 
  return -1
  
# Driver code 
print(findIndex([3, 7, 9, 10], 7))"
"Use Python to check whether a given string is a palindrome (e.g. ""abccba"" is a palindrome).","def isPalindrome(string):
 if string == string[::-1]: # Check if string is the same backwards
return True
 else:
 return False

isPalindrome('abcba') # Output: True"
Create a function in Python to calculate the area of a triangle using its three sides.,"def triangleArea(a, b, c):
 # Calculate the semi-perimeter of the triangle
 s = (a + b + c) / 2
 
 # Calculate the area using Heron's formula
 area = (s*(s - a)*(s - b)*(s - c))**0.5
 
 return area

triangleArea(3,4,5) # 6.0"
Create a function to replace substring 'old' with 'new' in the given string.,"def replace_substring(string, old, new):
  new_string = """"
  l = len(old)
  for i in range(len(string)-l+1):
    if string[i:i+l] == old:
      new_string += new
    else:
      new_string += string[i]
  return new_string

print(replace_substring('Python is very old', 'old', 'new'))

# Output: Python is very new"
Create a function to invert the keys and values of a dictionary in Python.,"def invert_dictionary(input_dict):
    output_dict = {}
    for key, value in input_dict.items():
        output_dict[value] = key
    return output_dict

inverted_dict = invert_dictionary({
    ""apple"": 3,
    ""banana"": 4,
    ""carrot"": 2
})

print(inverted_dict) # {3: 'apple', 4: 'banana', 2: 'carrot'}"
Create a function in Python that takes a list as an argument and returns the list in reverse order.,"def reverse_list(lst):
  return lst[::-1]"
Create a Python program to select high temperature days based on a given dataset.,"import pandas as pd

# Load data
df = pd.read_csv('Oregon_OregonState_97_02.csv', sep=',', index_col=0)

# Select days with high temperature
high_temp_days = df.query('T_MAX > 25')

# Display results
print(high_temp_days)"
You are given a data set. Compute the mean of the data set using Python.,"def compute_mean(data):
    total = 0
    for num in data:
        total += num
    return total/len(data)

data = [1, 2, 5, 10, 20, 50]

result = compute_mean(data)
print(result)"
"Given a dictionary and a string, write a Python program to compute the number of times each character appears in the string.","def freq_char_dict(dict, str): 
    for char in str: 
        dict[char] += 1
    return dict
  
dict = {'a': 0, 'b': 0, 'c': 0} 
str = 'abacab'
print(freq_char_dict(dict, str))"
Create a Python program to sort a list of tuples based on the second elements of the tuples.,"def sortTuples(l): 
    l.sort(key = lambda x: x[1]) 
    return l
 
# Sample Output 
# [(4, 1), (1, 3), (6, 4), (2, 5)] 
print(sortTuples(l))"
Generate a python program that inputs a temperature in celsius and outputs the temperature in Fahrenheit,"def celsius_to_fahrenheit(temp):
    return temp * (9/5) + 32"
Write a python function to find the sum of fifth power of first n odd natural numbers.,"def odd_Num_Sum(n) : 
    j = 0
    sm = 0
    for i in range(1,n+1) : 
        j = (2*i-1) 
        sm = sm + (j*j*j*j*j)     
    return sm "
Implement the factorial function in Python.,"def factorial(n): 
    if n == 0: 
        return 1
    return n*factorial(n-1)"
Create a Python script for a sorting algorithm that can efficiently sort an array of integers.,"def bubble_sort(lst):
 for i in range(len(lst)):
  for j in range(0, len(lst) - i - 1): 
   if lst[j] > lst[j + 1] : 
    lst[j], lst[j + 1] = lst[j + 1], lst[j]
 return lst
 
lst = [8, 3, 5, 1, 4, 6]
sorted_list = bubble_sort(lst)

print(""Sorted Array:"", sorted_list)"
Develop a Python script to extract some text from a website.,"import requests
from bs4 import BeautifulSoup
 
response = requests.get(""http://example.com"")
 
soup = BeautifulSoup(response.content, ""html.parser"")
 
text = soup.get_text()
print(text)"
Optimize the following Python program to find the given number in a list.,"def find_number(lst, num):
  for i, v in enumerate(lst):
    if v == num:
      return i
  
  return -1

list_of_numbers = [2, 4, 9, 8, 10]
number_to_find = 8

# Find the given number in the list
index = find_number(list_of_numbers, number_to_find)
if index != -1:
  print(f'Number {number_to_find} found at index {index}.')
else:
  print('Number not found.')"
Write a python function to find the frequency of the largest value in a given array.,"def frequency_Of_Largest(n,arr): 
    mn = arr[0] 
    freq = 1
    for i in range(1,n): 
        if (arr[i] >mn): 
            mn = arr[i] 
            freq = 1
        elif (arr[i] == mn): 
            freq += 1
    return freq "
Write a Python function to classify a dataset into its different categories.,"def classify_data(data):
    labels = []
    for d in data:
        labels.append(d[-1])
    unique_labels = set(labels)
    classification = {label: [] for label in unique_labels}
    for d in data:
        classification[d[-1]].append(d[:-1])
    return classification"
Write a function in Python to find the maximum two numbers in a list.,"def max_two(list):
    #sort the list in ascending order
    list.sort()
    #return the last two elements
    return list[-2:]

#example
number_list = [2, 4, 5, 9, 10, 11]
result = max_two(number_list)

print(result)
# Output: [10, 11]"
Write a function to calculate the harmonic sum of n-1.,"def harmonic_sum(n):
  if n < 2:
    return 1
  else:
    return 1 / n + (harmonic_sum(n - 1)) "
Compose a program in Python to iterate through a list of integers and creates a new list which contains the square of each number of the first list,"def squared_list(input_list): 
    output_list = [x ** 2 for x in input_list] 
    return output_list 

input_list = [1, 2, 3, 4]
output_list = squared_list(input_list) 
print(output_list)"
Create a function to convert JSON objects to Python dictionaries.,"import json

def convert_json_to_dict(input_json):
    """"""
    Convert JSON object to Python dictionary 
    Args: 
        input_json (json): JSON object to be converted 
    Returns: 
        output_dict (dict): Python dictionary with keys and values from input_json
    """"""

    output_dict = json.loads(input_json)
    return output_dict"
"Optimize a basic application written in Python. The program should accept two arguments, an integer and a string, and should print the sum of the two arguments.","def main(a, b): 
    try: 
        a = int(a) 
        b = int(b) 
    except ValueError: 
        print('Input arguments must be integers') 
        return
    
    print('Sum: {}'.format(a + b)) 

if __name__ == '__main__': 
    import sys 
    main(sys.argv[1], sys.argv[2])"
Create a Python code that sorts the given data in descending order.,"def descending_sort(data):
    for j in range(len(data)-1):
        for i in range(len(data)-1):
            if data[i] < data[i+1]:
                temp = data[i]
                data[i] = data[i+1]
                data[i+1] = temp
    return data

print(descending_sort([2, 4, 3, 6, 1, 7]))"
Write a Python function to check if a given substring is contained in a string.,"def check_substring(String, SubString):
    if SubString in String : 
        return True
    else: 
        return False"
Create a Python program to scale the values of an array by adding a scalar value and then dividing each element of the new array by a scalar value.,"def scaleArray(arr, s1, s2):
  scaledArr = []
  for x in arr:
    scaledArr.append((x + s1) / s2)
  return scaledArr

arr = [1,2,3] 
scaledArr = scaleArray(arr, 2, 2)
print(scaledArr)"
"Given two lists of integers, write a python function that returns a list of all common elements shared between them.","def common_elements(list1, list2):
    return list(set(list1) & set(list2))"
Design a Python program which takes two arrays of strings as input and sorts them alphabetically.,"def sort_str_arr(arr1, arr2):
    arr1.sort()
    arr2.sort()

    return arr1 + arr2

arr1 = [""zebra"", ""apple"", ""carrot""]
arr2 = [""banana"", ""elephant"", ""cat""]

sorted_arrs = sort_str_arr(arr1, arr2)

print(sorted_arrs) # ['apple', 'banana', 'carrot', 'cat', 'elephant', 'zebra']"
Generate a Python program which takes in a string and returns each of its characters in reverse order.,"def reverse_string(string):
    reversed_string = """"
    for i in range(len(string) - 1, -1 , -1):
        reversed_string += string[i]
    return reversed_string

result = reverse_string('Hello')
print(result)"
Create a python program to find all possible combination of arrangements of a list of words.,"import itertools 
words = ['dog', 'cat', 'fish'] 
result = list(itertools.permutations(words)) 

for word in result: 
    print(word)"
Write a Python script to simulate an alarm clock that sets off an alarm every day at 9am.,"from datetime import datetime
from datetime import timedelta
import time
 
def alarm_clock():
    while True:
        currentTime = datetime.now().time()
        if (currentTime.hour == 9 and currentTime.minute == 0):
            print(""Time to get up!"")
        time.sleep(10)
 
alarm_clock()"
Sort this list of numbers in ascending order using Python.,"list = [3, 1, 6, 9, 10, 5]
list.sort()
print(list)  # prints [1, 3, 5, 6, 9, 10]"
Develop a Python program to calculate the sum of natural numbers up to a given number.,"def natural_sum(n):
    if n < 0:
        return 0
    s = 0
    for i in range(n+1):
        s += i
    return s
 
number = 7
result = natural_sum(number)
print(result) # 28"
Edit the following Python program to optimize its speed.,"# This program to calculate sum of first n numbers
def sumN(n): 
    sum = n * (n + 1) // 2
    return sum

print(sumN(100))"
Create a class to store the details of a person in Python.,"class Person:
    def __init__(self, name, age, address):
        self.name = name
        self.age = age
        self.address = address"
Use Python to create a program that takes in a user input string and outputs the reverse of the string.,"def reverse_string(input_string):
  reversed_string = """"
  for char in input_string:
    reversed_string = char + reversed_string
  return reversed_string"
Write a Python program to detect cycle in a linked list using Floyd's Cycle Detection Algorithm.,"def detect_cycle(head): 
    slow_p = head 
    fast_p = head 
    while(slow_p and fast_p and fast_p.next) : 
        slow_p = slow_p.next
        fast_p = fast_p.next.next
        if slow_p == fast_p : 
            return True
    return False"
Create a class in Python to represent a complex number.,"class ComplexNumber:
    def __init__(self, real, imaginary):
        self.real = real
        self.imaginary = imaginary

    def __str__(self):
        return ""({0} + {1}i)"".format(self.real, self.imaginary)"
Create a python program to wrap a given text at a maximum of 80 characters.,"import textwrap

def wrap(text):
  return textwrap.fill(text, 80)"
"Create a class in Python that takes two values, a and b, and adds them.","class Sum():
    def __init__(self, a, b):
        self.a = a
        self.b = b
    
    def total(self):
        return self.a + self.b

s = Sum(2, 3)
print(s.total())"
Write a function in Python to print the Fibonacci series.,"def printFibonacciSeries(n): 
  
    # Taking 1st two fibonacci nubers as 0 and 1 
    f1 = 0
    f2 = 1
    print(f1, f2, end = "" "") 
  
    for i in range(2, n): 
        next = f1 + f2 
        print(next, end = "" "") 
  
        # update values 
        f1 = f2 
        f2 = next"
Generate a function to create a Python dictionary from two lists.,"def create_dict(a, b):
    dictionary = {}
    for i in range(len(a)):
        dictionary[a[i]] = b[i]
    return dictionary"
Compute the factorial of n using python code,"def factorial(n):
    if n == 0:
        return 1
    else:
        return (n*factorial(n-1))"
Generate a Python script to evaluate the expression (5 - 22 ) +18,"# Evaluate the expression (5 - 22 ) +18  
result = (5 - 22) + 18  
 
print(""The result is:"", result)"
Write a Python program to search a list of box ids for duplicates and return a list of all duplicated items.,"duplicates = []
 
for box_id in box_ids:
    if box_ids.count(box_id) > 1 and box_id not in duplicates:
        duplicates.append(box_id)
 
print(duplicates)"
"Create a program in Python that asks the user for a number, multiplies the number by 7, and then prints the result.","num = int(input(""Please enter a number: ""))
print(""The result of multiplying your number by 7 is "" + str(num * 7))"
Implement an SVM learner in Python to classify feature vectors,"# Import the necessary libraries
import numpy as np
from sklearn.svm import SVC

# Load data
X = np.load('X.npy')
y = np.load('y.npy')

# Create and fit an SVM learner
svm_learner = SVC(gamma='auto') # Initialize SVM learner
svm_learner.fit(X, y) # Fit SVM learner to data

# Predict labels based on feature vectors
preds = svm_learner.predict(X)"
Design a structure in Python to store the ratings of different movies.,"class MovieRatings:
    def __init__(self):
        self.movie_ratings = {}

    def add_rating(self, movie_name, rating):
        self.movie_ratings[movie_name] = rating

    def get_rating(self, movie_name):
        if movie_name in self.movie_ratings:
            return self.movie_ratings[movie_name]
        else:
            return 'Movie not found.'"
Create a Python script to apply a log transformation to every element of a NumPy array.,"import numpy as np

arr = np.array([0.1, 0.4, 0.9, 2.2])
# Applying log transformation
arr = np.log(arr)

print('After applying log transformation to every element of the array:')
print(arr)"
Create a program in Python to classify an input string as either palindrome or not.,"def is_palindrome(string):
    # reverse the string and compare
    reversed_string = ''.join(reversed(string)) 
    if string == reversed_string:
        print(""Input string is a palindrome"")
    else:
        print(""Input string is not a palindrome"")
        
is_palindrome(""racecar"")  # Outputs: ""Input string is a palindrome"""
Write a function to extract every specified element from a given two dimensional list.,"def specified_element(nums, N):
    result = [i[N] for i in nums]
    return result"
Generate a program using Python that takes a user-defined dictionary with string values and returns the reversed key-value mappings.,"myDict = {""one"": ""apple"",""two"": ""banana"",""three"": ""pear"" }

reverseMyDict = {}

for key, value in myDict.items():
 reverseMyDict[value] = key

print(reverseMyDict) # Output: {'apple': 'one', 'banana': 'two', 'pear': 'three'}"
Implement bubble sort in Python code.,"def bubbleSort(arr): 

# Traverse through all array elements 
for i in range(len(arr)): 

# Last i elements are already in place 
for j in range(0, len(arr)-i-1): 

# traverse the array from 0 to n-i-1 
# Swap if the element found is greater 
# than the next element 
if arr[j] > arr[j+1] : 
arr[j], arr[j+1] = arr[j+1], arr[j] 

# Driver code to test above 
arr = [64, 34, 25, 12, 22, 11, 90] 
bubbleSort(arr)"
Write a Python function to get the maximum and minimum values in a given list.,"def get_max_min(lst):
 min_value = lst[0]
 max_value = lst[0]
 
 for i in range(1, len(lst)):
  if lst[i] > max_value:
   max_value = lst[i]
  if lst[i] < min_value:
   min_value = lst[i]
 
 return (min_value, max_value)"
Create a function in Python to generate random passwords of length n.,"import string
import random

def generate_password(length):
    chars = string.ascii_lowercase + string.ascii_uppercase + string.digits
    generated_password = ''.join(random.choice(chars) for i in range(length))

    return generated_password"
Write a Python program to find the longest common substring between two strings.,"def longest_common_substring(s1, s2):
 m = len(s1)
 n = len(s2)
 lengths = [[0 for x in range(n+1)] for y in range(m+1)]
 longest = """"
 for i in range(1, m+1):
 for j in range(1, n+1):
 if s1[i-1] == s2[j-1]:
 lengths[i][j] = lengths[i-1][j-1] + 1
 if lengths[i][j] > len(longest):
 longest = s1[i-1-lengths[i][j]+1:i]
 return longest"
Write a Python method to find the area of a triangle using Heron's formula.,"import math

def heron(a, b, c):
    s = (a + b + c) / 2
    area = math.sqrt(s * (s - a) * (s - b) * (s - c))
    return area

print('The area of the triangle is ', heron(6, 8, 10))"
Design a basic addition function in Python.,"def add(a, b):
    return a + b"
Convert a string of comma-separated values into a list in Python.,"str = ""apple, banana, orange""

# split the string
string_list = str.split(', ')

# print result
print(string_list)  # ['apple', 'banana', 'orange']"
Create a program in Python to remove all the occurrences of an item from a list.,"def removeItem(list, item):
    # loop through the list
    for i in list:
        # check if the element is the item to remove
        if i == item:
            # remove the item
            list.remove(i)
    # return the list
    return list

#example
list = [1, 2, 3, 4, 2, 5, 2]
result = removeItem(list, 2)

print(result)
# Output: [1, 3, 4, 5]"
"Generate a Python program to solve the following problem: given an array of integers, find the number of pairs of integers whose sum is equal to zero.","def pairs_sum_to_zero(array):
  pairs = []
  for i in range(len(array)):
    for j in range(i+1, len(array)):
      if array[i] + array[j] == 0:
        pairs.append([array[i], array[j]])
  return len(pairs)"
Write code to reverse the elements of an array in Python.,"def reverseArray(list): 
    start = 0
    end = len(list) - 1
    while start < end:
        list[start], list[end] = list[end], list[start]
        start += 1
        end -= 1
    return list"
Write a Python program to create a program that computes the area of a triangle given three sides.,"def area_triangle(side1, side2, side3):
    # calculate the semi-perimeter
    s = (side1 + side2 + side3) / 2
    # calculate the area
    area = (s*(s-side1)*(s-side2)*(s-side3)) ** 0.5
    
    return area"
"Write a code snippet in Python to randomly generate a string of length 20 comprised of characters ""0"" - ""9"".","import string
import random

def generate_random_string(string_length):
    random_string = ''.join(random.choices(string.digits, k=string_length))
    return random_string

print(generate_random_string(20))"
Write a Python function to add 5 to each of the numbers in a list.,"def add_five(nums):
    return [num + 5 for num in nums]

result = add_five([1, 2, 3, 4, 5])
print(result)"
Construct a Python program to remove duplicate values from a list.,"def remove_duplicates(list):
    new_list = []
    for item in list:
        if item not in new_list:
            new_list.append(item)
    return new_list"
Write a function to find all adverbs and their positions in a given sentence.,"import re
def find_adverb_position(text):
 for m in re.finditer(r""\w+ly"", text):
    return (m.start(), m.end(), m.group(0))"
Develop a Python program to calculate the sum of all the elements in a given 2D array.,"def sum_2d_array(array):
  # Initialize sum
  _sum = 0
  # Iterate over array and add each element
  for row in array:
    for element in row:
      _sum += element
  # Return sum
  return _sum

arr = [[1, 2], [3, 4], [5, 6]]
print(sum_2d_array(arr))"
Develop a Python function to check if a given string contains a palindrome.,"def is_palindrome(s):
  return s == s[::-1]

print(is_palindrome(""moon""))"
Write a python code that sorts the values of the given list.,"unsorted_list = [52, 34, 12, 33, 16]

sorted_list = sorted(unsorted_list)

print(sorted_list) # prints [12, 16, 33, 34, 52]"
Generate a Python script to sort a list of strings in ascending alphabetical order.,"list = ['cat', 'apple', 'elephant', 'dog']

list.sort()

print(list) # Output: ['apple', 'cat', 'dog', 'elephant']"
Write a Python program to get the squares of the numbers up to a given number n.,"def get_squares(n):
    squares = []
    for i in range(1, n + 1):
        squares.append(i**2)
    return squares

result = get_squares(10)
print(result)"
Write a Python Program to print out the first n prime numbers.,"def sieve_of_eratosthenes(n):
    primes = [True] * (n+1)
    primes[0] = primes[1] = False
    for i in range(2, int(n**0.5)+1):
        if primes[i]:
            for j in range(i*i, n+1, i):
                primes[j] = False

    prime_numbers = []
    for i in range(len(primes)):
        if primes[i]:
            prime_numbers.append(i) 
    return prime_numbers"
Create a program in Python that takes in an integer and returns its factorial.,"def factorial(n): 
    fact = 1
    # multiply the current value of fact by all the numbers from 1 to n
    for i in range(1, n+1): 
        fact = fact * i
    return fact 
 
num = 5
factorial = factorial(num) 
print(""Factorial of"", num, ""is"",  factorial)"
Write a Python program to remove duplication of characters in a string.,"def remove_duplicates_from_string(string):
    '''This function will remove duplicates of characters in a given string'''
    result = ''
    for char in string:
        if char not in result:
            result += char
    return result

# Example
print(remove_duplicates_from_string('hello world!'))

# Output:
# helo wrd!"
Create a function in Python to calculate the cost of an online shopping order given the cost of the items and the shipping charges.,"def calculate_cost(item1, item2, shipping_charges):
    total_cost = item1 + item2 + shipping_charges
    return total_cost

calculate_cost(item1, item2, shipping_charges) 
# returns 45"
Design a python method that takes in two numbers and returns their first common divisor.,"def gcd(a, b): 
    if a == 0: 
        return b 
    return gcd(b % a, a)"
Create a program in Python that will calculate the mean of a given set of numbers.,"nums = [1, 2, 3, 4, 5]

def mean(nums):
 total = 0
 for i in nums:
  total += i
 mean = total/len(nums)
 return mean

print(mean(nums)) # 3.0"
Create a function in Python that accepts 3 numbers and finds the largest of the 3.,"def get_max(num1, num2, num3):
    """"""
    Finds the largest number among three provided numbers
    """"""
    max_num = num1
    if num2 > max_num:
        max_num = num2
    if num3 > max_num:
        max_num = num3
    return max_num

num1 = 2
num2 = 5
num3 = -1

maximum = get_max(num1, num2, num3)
print(maximum) # 5"
Write a Python program to generate the powerset of a given set.,"def powerset(s):
    x = len(s)
    powerset = []
    for i in range(1 << x):
        subset = [s[j] for j in range(x) if (i & (1 << j))]
        powerset.append(subset)
    return powerset"
"Write a basic Python web server that outputs ""Hello, World!"" when GET request to '/' path is sent.","import http.server
 
class HelloHandler(http.server.BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header('Content-type','text/html')
        self.end_headers()
        self.wfile.write(b""Hello, World!"")
 
httpd = http.server.HTTPServer(('localhost', 8000), HelloHandler)
httpd.serve_forever()"
Write a function to find the maximum product from the pairs of tuples within a given list.,"def max_product_tuple(list1):
    result_max = max([abs(x * y) for x, y in list1] )
    return result_max"
Write a Python function to compute the frequency of unique words from a given string.,"def unique_words_freq(string): 
 words = string.split() 
 words_freq = {}
 for word in words: 
 if word not in words_freq.keys(): 
 words_freq[word] = 1 
 else: 
 words_freq[word] += 1 
 
 return words_freq

result = unique_words_freq(""Hello world, hello world"")
print(result)"
Construct a program in Python to encrypt the entered text using a simple substitution cipher.,"def encrypt(plainText, key):
    cipherText = """"
    for char in plainText:
        if char.isalpha():
            cipherChar = chr(((ord(char) - ord('a')) + key) % 26 + ord('a'))
        else:
            cipherChar = char
        cipherText += cipherChar
    return cipherText"
Convert a set of Python functions to JavaScript.,"function say_hello(name) {
 return `Hello, ${name}!`;
}

function add_two(num) {
 return num + 2;
}"
Generate a Python program to compare two strings.,"def compare_strings(str1, str2):
  if len(str1) == len(str2):
    for char in str1:
      if not char in str2:
        return False
    return True
  else: 
    return False
  
str1 = ""foo""
str2 = ""bar""
print(compare_strings(str1, str2))"
"Write a function that matches a word at the end of a string, with optional punctuation.","import re
def text_match_word(text):
        patterns = '\w+\S*$'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return 'Not matched!'"
Write a Python program to select a random element from a given list.,"import random 
def random_element(lst): 
    return random.choice(lst)"
"Produce a python code to implement a classic stack having push, pop, and peep operations","class Stack: 
    def __init__(self): 
        self.stack = []
  
    def push(self, data): 
        self.stack.append(data)
  
    def pop(self):
        if len(self.stack) == 0:
            return -1
        return self.stack.pop()
  
    def peek(self):
        if len(self.stack) == 0:
            return -1
        return self.stack[-1]"
Develop a web scraper in Python to get all emails from a web page.,"import requests 
from bs4 import BeautifulSoup

# Get request to the URL
page = requests.get(""http://example.com"")

# Create a BeautifulSoup object from the response
soup = BeautifulSoup(page.content, 'html.parser') 

# Get all emails from the page
emails = soup.find_all('a', {'href': 'mailto'})

for email in emails:
    print(email.get('href').replace(""mailto:"", """"))"
Create a function in Python which gathers the maximum and minimum values from a list of numbers.,"def min_max(nums):
  min_val = min(nums)
  max_val = max(nums)
  return min_val, max_val

nums = [1, 4, 8, 3, 5, 9, 7]
min_val, max_val = min_max(nums)
print('Minimum value:', min_val)
print('Maximum value:', max_val)"
Create a python function for calculating the total cost of an item after tax and discounts are applied.,"def calculate_cost(price, discount, tax_rate):
    discount_amount = price * (discount / 100.0)
    total = price - discount_amount
    tax = total * (tax_rate / 100.0)
    final_cost = total + tax
    return final_cost

price = 150
discount = 20
tax_rate = 0.1
final_cost = calculate_cost(price, discount, tax_rate)
print(final_cost)"
Create a Python program to generate Fibonacci sequence of a given length.,"def generateFibo(length):
    fibo = [0, 1]
    for i in range(2, length):
        fibo.append(fibo[i-2] + fibo[i-1])
    return fibo

if __name__ == '__main__':
    print(generateFibo(10)) # [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]"
Create an algorithm in Python for removing all duplicates from an array.,"def removeDuplicates(arr): 
    res = [] 
    seen = set() 
    for e in arr:
        if e not in seen: 
            res.append(e) 
            seen.add(e) 
      
    return res 
  
print(removeDuplicates([1, 2, 4, 4, 1, 5, 2]))"
Create a Python script to transform every item from a list into a string.,"# Transform each item to a string 
list_ = [1, 2, 3]

# Transform the list
string_list = [str(item) for item in list_]

# Print the transformed list
print(string_list)

# Output
['1', '2', '3']"
Create a Python program to find the sum of all numbers in a given string that can represent a mathematical expression.,"import re

def sum_expression(expression):
 sum = 0
 
 # Extract all numbers from the expression
 numbers = re.findall(r""\d+"", expression)
 
 # Calculate the sum
 for num in numbers:
 sum += int(num)
 
 return sum

# Driver code
expression = ""2 + 4 - 7 + 3 + 4 - 8""
result = sum_expression(expression)

print(""Sum of the expression:"", result)"
Write a Python script to pad a matrix to a given size.,"def pad_matrix(matrix, pad_size):
    rows = len(matrix)
    cols = len(matrix[0])

    new_matrix = [[0 for j in range(pad_size)] for i in range(pad_size)] 
    
    for i in range(rows):
        for j in range(cols):
            new_matrix[i][j] = matrix[i][j]

    return new_matrix

print(pad_matrix(matrix, pad_size))"
Write a Python program that automatically converts Celsius to Fahrenheit.,"def celsius_to_fahrenheit(temp_celsius):
    temp_fahrenheit = (temp_celsius * 9/5) + 32
    return temp_fahrenheit
 
celsius_to_fahrenheit(20) # Output: 68.0"
Create a machine learning model in Python to classify a given dataset into 5 different classes.,"from sklearn.neighbors import KNeighborsClassifier

# Initialize KNN model
knn_model = KNeighborsClassifier(n_neighbors=5)

# Fit the model
knn_model.fit(X, y)

# Predict the classes
y_pred = knn_model.predict(X)"
Can you modify the program from above to print the two numbers in ascending order instead?,"# Python program
def main():
    num1 = int(input(""Enter the first number: ""))
    num2 = int(input(""Enter the second number: ""))
    
    # use max and min functions to output the numbers in ascending order
    print(min(num1, num2))
    print(max(num1, num2))

if __name__ == ""__main__"":
    main()"
Create a Python list comprehension to generate a list of the squares of first five positive integers,"lst=[x**2 for x in range(1,6)]"
Write a function to extract a specified column from a given nested list.,"def extract_column(list1, n):
   result = [i.pop(n) for i in list1]
   return result "
Implement the Quicksort algorithm in Python.,"def quicksort(arr):
  if len(arr) <= 1:
    return arr
  pivot = arr[len(arr) // 2]
  left = [x for x in arr if x < pivot]
  middle = [x for x in arr if x == pivot]
  right = [x for x in arr if x > pivot]
  return quicksort(left) + middle + quicksort(right)

print(quicksort([3,6,8,10,1,2,1]))"
Convert the following Python List into a Dictionary.,"dict_data = { lst[i][0] : lst[i][1] for i in range(len(lst)) }
 
print(dict_data)"
"Create a Python program that takes a string input from the user, sorts all the letters of the string in alphabetical order, and prints the new sorted string.","def sort_string():
    # get the string from the user
    string = input('Enter a string: ')

    # convert the string to a list and sort
    sorted_string = sorted(list(string))

    # print the sorted string
    print(''.join(sorted_string))

sort_string()"
"Create a Python program to print the nth Fibonacci number in the sequence, where n is provided as an input.","def Fibonacci(n): 
	a = 0
	b = 1
	if n < 0: 
		print(""Incorrect input"") 
	elif n == 0: 
		return a 
	elif n == 1: 
		return b 
	else: 
		for i in range(2,n+1): 
			c = a + b 
			a = b 
			b = c 
		return b 

print(Fibonacci(10))"
Construct a function in Python to reverse the order of the words in a given string.,"def reverse_words(str):
    words = str.split()
    reversed_words = words[::-1]
    reversed_str = ' '.join(reversed_words)
    return reversed_str

result = reverse_words('hello world')
print(result)"
Write a function to find the maximum difference between available pairs in the given tuple list.,"def max_difference(test_list):
  temp = [abs(b - a) for a, b in test_list]
  res = max(temp)
  return (res) "
Write a function to select the nth items of a list.,"def nth_items(list,n):
 return list[::n]"
Design an algorithm in Python to calculate the sum of individual digits in a given number.,"def digitSum(n): 
	sum = 0
 
	# loop until we have no digits left 
	while (n != 0): 
		# extract the last digit 
		dig = n % 10
 
		# add the digit to the total sum 
		sum += dig
 
		# remove the last digit from n 
		n = n // 10
 
	return sum
 
# Driver Code 
n = 12345
sum = digitSum(n) 
 
# Print the result 
print(sum)"
Create a Python script to parse a list of IP addresses into readable fields.,"import re

IPs = [""123.235.123.245"", ""54.72.56.14"", ""182.193.146.172""]
for ip in IPs:
 ip_parts = ip.split('.')
 octet1 = ip_parts[0]
 octet2 = ip_parts[1]
 octet3 = ip_parts[2]
 octet4 = ip_parts[3]

 print(f'The first octet is {octet1}, the second is {octet2}, the third is {octet3}, and the fourth is {octet4}.')"
Create a loop using Python to print the numbers 1 to 10.,"for i in range(1,11):
    print(i)"
Create a function in Python that takes in a string and returns the characters in reverse order.,"def reverse_string(s): 
    return s[::-1]

result = reverse_string(""Hello"") 
print(result)"
Write a Python function to add two given numbers stored in two dictionaries with the same keys.,"def add_dict_nums(nums1, nums2):
    result = dict()
    for key in nums1.keys():
        result[key] = nums1[key] + nums2[key]
    return result

print(add_dict_nums(nums1, nums2))"
Generate a function in Python that takes a list and returns an ordered list,"def order_list(mylist):
    mylist.sort()
    return mylist

print(""Ordered list: "", order_list(mylist))"
"Construct a Python dictionary that has the value ""hello"" assigned to the key ""word"".","my_dict = {
    ""word"": ""hello""
}"
Compose a Python function that sorts a list using insertion sort.,"def insertion_sort(arr):
    for i in range(1, len(arr)):
        current_value = arr[i]
        j = i - 1
        while j >= 0 and arr[j] > current_value:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = current_value
    return arr

arr = [4, 1, 3, 6, 2, 5]
print(insertion_sort(arr))"
Generate a Python script to create a list of numbers in the range 0-n (inclusive) and print it.,"n = 10

list_numbers = []
for i in range(0,n+1):
    list_numbers.append(i)

print(list_numbers)"
Write a Python script to compare two lists of numbers. The output should be the elements in the first list that are not in the second list.,"listC = [x for x in listA if x not in listB]
print(listC) # prints [1, 3, 5]"
Find the value of x in the following equation using a numerical calculation method in Python.,"# define variables
a = 5
b = 7
x = 3
y = 4

# calculate x
x = (0 - (b*y))/a

print(x)"
Optimize this Python function to improve its running time.,"def find_duplicates(a):
    seen = set()
    result = []
    for num in a:
        if num in seen:
            result.append(num)
        else:
            seen.add(num)
    return result"
Create an API route in Python that allows users to retrieve the top 5 most recent posts from a blog.,"import datetime

@app.route('/posts')
def get_posts():
 posts = Post.query \
 .order_by(Post.created_at.desc()) \
 .limit(5)
 return jsonify([{
 'title': post.title,
 'date': post.created_at.strftime('%Y-%m-%d'),
 'body': post.body
 } for post in posts])"
"Generate a structure to store customer data, such as Name, Address, Email, Phone, etc., in Python","class Customer:
 def __init__(self, name, address, email, phone):
    self.name = name
    self.address = address
    self.email = email
    self.phone = phone

customer1 = Customer('John Doe', '123 Main Street', 'john@example.com', '555-555-5555')"
Write a function to multiply the adjacent elements of the given tuple.,"def multiply_elements(test_tup):
  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))
  return (res) "
Write Python code to generate random colors using the 'matplotlib color' module.,"""""""
Generate random colors using the 'matplotlib color' module
""""""

import matplotlib.colors as colors

# Generate 10 random colors
colors = [colors.to_hex(colors.rgb2hex(np.random.rand(3)))
          for i in range(10)]
print(colors)"
Code a Python script to connect to a MySQL database and execute a query.,"import mysql.connector

# Connect to the database 
mydb = mysql.connector.connect(
    host=""localhost"",
    user=""yourusername"",
    passwd=""yourpassword"",
    database=""mydatabase""
)
# Create a cursor 
mycursor = mydb.cursor()

# Execute a query
mycursor.execute(""SELECT * FROM customers"")

# Fetch all records 
records = mycursor.fetchall()

# Print records 
for record in records:
    print(record)"
Implement a web scraper in Python to capture some information from a web page. The data to be scraped should be 3000 words from the website https://www.example.com.,"import requests
from bs4 import BeautifulSoup

url = 'https://www.example.com/'

r = requests.get(url)
html_content = r.text
soup = BeautifulSoup(html_content, 'lxml')
data = soup.find_all('div', limit=3000)

words = []
for div in data:
 words.append(div.text)

print(words)"
Create a code to print the nth Fibonacci number in Python.,"def fibonacci_n(n): 
    a = 0
    b = 1
    if n < 0: 
        print(""Incorrect input"") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2,n): 
            c = a + b 
            a = b 
            b = c 
        return b 

n = 9
print(fibonacci_n(n))"
"Given a string, write a Python program to count the number of words in it.","def count_words(sentence):
    words = sentence.split(' ')
    count = 0
    for word in words:
        if word != '':
            count+=1
    return count

sentence = ""This is an example string.""
print(count_words(sentence))"
Can you design an algorithm in Python for finding the largest element in a list?,"def max_element(lst):
    max_element = lst[0]
    for element in lst:
        if element > max_element:
            max_element = element
    return max_element"
"Write a Python program to generate a dictionary that contains a number (between 1 and n) in the form (x, x*x).","def generate_dict(n):
    my_dict = {}
    for num in range(1, n+1):
        my_dict[num] = num * num
    return my_dict

print(generate_dict(8)) # {1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64}"
Create a Python program to find the shortest string in a given list of strings.,"def shortest_string(strings):
    shortest_string = strings[0]
   
    for string in strings:
        if len(string) < len(shortest_string):
            shortest_string = string
    
    return shortest_string"
Implement a solutions for the Tower of Hanoi problem using Python.,"def hanoi(n, source, aux, dest):
 if n == 1:
  print('Move disk 1 from {0} to {1}'.format(source, dest))
 else:
  hanoi(n-1, source, dest, aux)
  print('Move disk {0} from {1} to {2}'.format(n, source, dest))
  hanoi(n-1, aux, source, dest)

# Driver program
n = 4
hanoi(n, 'a', 'b', 'c')"
Write a Python program to create a Fibonacci series until nth term using recursion.,"def fibonacci_series(n): 
    if n<0: 
        print(""Incorrect input"") 
    elif n==1: 
        return 0
    elif n==2: 
        return 1
    else: 
        return fibonacci_series(n-1)+fibonacci_series(n-2) 

print(fibonacci_series(10))"
Create a class in Python that implements the count() method to count the number of elements in a given array.,"class ArrayCounter:
 def __init__(self, array):
 self.array = array
 
 def count(self):
 return len(self.array)

arr_counter = ArrayCounter([1, 2, 3, 4])
print(arr_counter.count())"
Generate a python class which has two methods to convert a number to string and vice-versa.,"class NumStringConverter:
    def int_to_str(self, number):
        return str(number)
    
    def str_to_int(self, string):
        return int(string)"
Write a Python program to fliter a list of strings and return a new list containing only the strings containing the letter 'a'.,"list_strings = ['ant', 'bar', 'cat', 'dog', 'eel']

# using list comprehension
filtered_list = [x for x in list_strings if 'a' in x]
 
print(filtered_list)
# output: ['ant', 'bar', 'cat']"
Use a Python library to find sequences of similar strings in a given text.,"import difflib

# Define input text
text = ""this is a string with a few similar words""

# Find sequences of similar strings
matcher = difflib.SequenceMatcher(None, a=text.split(), b=text.split())
for tag, i1, i2, j1, j2 in matcher.get_opcodes():
 if tag == 'equal':
    print(text[i1:i2])"
"Given an array of numbers, write a Python program to calculate the sum of the integers in the array.","def sum_integer(arr):
    """"""
    Args :
        arr (list): List of integer
    
    Returns :
        int : Sum of integers
    """"""
    
    res = 0
    
    for num in arr:
        res += num
    
    return res

sum_integer([5, 2, 8, 4, 23])
# output: 42"
Write a recursive python function to generate a Fibonacci sequence up to n number of elements,"def fibonacci(n):
    if n == 1:
        return [1]
    elif n == 2:
        return [1, 1]
    else:
        fib_list = fibonacci(n - 1)
        fib_list.append(fib_list[-1] + fib_list[-2])
        return fib_list"
"Create a Python function that searches a given list of strings for a match. The function should return true if any of the strings match, and false if none of the strings match.","def search_list(lst, s):
 for item in lst:
  if item == s:
   return True
 return False"
Create a Python function that takes a Python dictionary and returns the unique values contained in the dictionary.,"def unique_values(example_dict):
return list(set(example_dict.values()))"
Define a function in Python that takes three numbers as input and return the largest number,"def largestNumber(x, y, z):
    if x > y and x > z:
        return x
    elif y > x and y > z:
        return y
    else:
        return z"
Create a web scraping application in Python that downloads the source code of a website given its URL.,"import urllib.request

url = ""https://www.example.com/""

response = urllib.request.urlopen(url) 
webContent = response.read()

f = open(""example.html"", ""w"")
f.write(webContent.decode('utf-8'))
f.close()"
Can you create a function in python code to flatten a nested dictionary?,"def flatten_dict(d):
    def items():
        for key, value in d.items():
            if isinstance(value, dict):
                for subkey, subvalue in flatten_dict(value).items():
                    yield key + '.' + subkey, subvalue
            else:
                yield key, value

    return dict(items())"
Create a Python script that takes in two lists as inputs and generates a list containing all possible pairings between elements from both lists.,"list1 = [1,2,3]
list2 = ['a', 'b', 'c']

pairs = []

for x in list1:
    for y in list2:
        pairs.append((x,y))

print(pairs) // Output: [(1, 'a'), (1, 'b'), (1, 'c'), (2, 'a'), (2, 'b'), (2, 'c'), (3, 'a'), (3, 'b'), (3, 'c')]"
Generate a Python program to calculate the most common value in a list,"def most_common(list):
    dict = {}
    for item in list:
        dict[item] = dict.get(item,0) + 1
    max_count = 0
    max_item = list[0]
    for k,v in dict.items():
        if v > max_count:
            max_count = v
            max_item = k
    return max_item

list = ['a', 'a', 'b', 'd', 'e', 'a']
result = most_common(list)
print(result)"
Convert the given equation in Python to a mathematical expression.,x = y + 2*z - 7
Write a Python program to generate a table of HTML with data from the specified dictionary.,"html_str = """"
html_str += ""<table>\n""
html_str += ""<tr><th>Name</th><th>Age</th><th>City</th></tr>\n""

data = {
    'name': 'James',
    'age': 25,
    'city': 'New York'
}

html_str += ""<tr><td>{}</td><td>{}</td><td>{}</td></tr>\n"".format(data['name'], data['age'], data['city'])

html_str += ""</table>\n""

print(html_str)"
Write a Python program to remove the nth index character from a non-empty string.,"def remove_character(string, index):
    return string[:index] + string[index+1:]

input_string =  'Hello World!'
index = 5

print(remove_character(input_string, index))"
Create a loop to print out the following pattern in Python.,"for i in range(1, 6):
    print(""*"" * i)
    for j in range(1, i+1):
        print(j, end="""")
    print()"
Create a Python program to filter a list of words and keep only those words that are longer than 8 characters.,"# Filter list 
words = ['hello', 'world', 'this', 'is', 'a', 'test', 'foobar']

# Keep only words longer than 8 characters
filtered_words = [word for word in words if len(word) > 8]

print(filtered_words)
# Output: ['foobar']"
Write a Python program to print out the larger number from two input numbers.,"def find_larger_number(num1, num2):
 if num1 > num2:
 return num1
 else:
 return num2"
Generate a Python program to create a histogram from a data set.,"import matplotlib.pyplot as plt
 
data = [2, 4, 5, 3, 5, 6, 8, 2]
plt.hist(data, bins = 5) 
 
plt.title(""Histogram"") 
plt.xlabel(""Values"")
plt.ylabel(""Frequency"")
plt.show()"
Write a Python program to test if the inputs are equal and return a boolean value.,"def equals(a, b):
    return a == b

equal = equals(28, 48)
print(equal)"
Generate a list of zeros of length m using Python,"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"
Create a Python class that provides an interface for a Stack data structure.,"class Stack:
 def __init__(self):
  self.stack = []

 def push(self, item):
  self.stack.append(item)

 def pop(self):
  if self.stack:
   return self.stack.pop()
  else: 
   return None

 def is_empty(self):
  return len(self.stack) == 0"
Classify the following as a Python class,This is not a Python class. It is a Python function.
Create a python program that generates a random integer between two numbers.,"import random

def random_int(x, y):
    return random.randint(x, y)"
"Generate a Python class to represent a Person object with the attributes of 'firstName', 'lastName', and 'age'.","class Person:
    def __init__(self, firstName, lastName, age):
        self.firstName = firstName
        self.lastName = lastName
        self.age = age"
Determine the type of the given expression in Python.,int
Generate a function in Python to capitalize the first letter of every word in a given sentence.,"def capitalize(sentence):
    words = sentence.split() 
    new_sentence = [] 
    for word in words:
        new_sentence.append(word.capitalize()) 
    return "" "".join(new_sentence)

sentence = ""newton theory of gravitation""
print(capitalize(sentence))"
Optimize a Python program to sort numeric data in ascending order.,"def sort_list(nums):
  for i in range(len(nums)):
    min_value = min(nums[i:])
    min_index = nums[i:].index(min_value)
    nums[i], nums[i + min_index] = min_value, nums[i] 
  return nums

unsorted_list = [3, 5, 2, 1, 4]
sorted_list = sort_list(unsorted_list)
print(sorted_list) # [1, 2, 3, 4, 5]"
Write a function to remove all elements from a Python list that are divisible by a given number.,"def remove_divisible(lst, n):
    new_list = []
    for item in lst:
        if item % n != 0:
            new_list.append(item)
    return new_list

mylist = [7, 8, 15, 21, 24]
num = 3

print(remove_divisible(mylist, num)) # [7, 8, 21]"
Create a class in Python to represent a 2D circle.,"class Circle2D:
    def __init__(self, x, y, radius):
        self.x = x
        self.y = y
        self.radius = radius

    def get_area(self):
        """"""Calculates the area of the circle""""""
        return 3.14 * (self.radius ** 2)"
Write a Python program to create a dictionary where the keys are numbers between 1 and 15 (both included) and the values are square of keys.,"d = {}

for i in range(1, 16):
    d[i] = i**2

print(d)"
Normalize a string in Python.,"def normalize(string):
    return string.lower().strip()"
Design a python function to filter out the fields from a JSON data.,"def filter_json_data(input, fields):
    output = {}
    for field in fields:
        if field in input:
            output[field] = input[field]
    return output"
"In Python, build a function that takes in two arguments (x,y) and returns the product of the two numbers.","def product(x, y):
    return x * y"
Create a Python function to check whether or not a string is palindrome or not.,"def is_palindrome(string):
 
    i = 0
    j = len(string)-1
 
    while j > i:
        if string[i] != string[j]:
            return False
        i += 1
        j -= 1
 
    return True

# Driver code
string = ""malayalam""
print(is_palindrome(string))"
Design a program in Python to detect if a given number is a perfect square?,"# function to check if  
# given number is perfect square 
def isPerfectSquare(n): 
  
    if n < 0: 
        return False
    
    # Base case 
    if n == 1: 
        return True
  
    i = 1
    x = n // 2
      
    while x >= i: 
        if (x == i) and (n % x == 0): 
            return True
        x -= 1
    return False"
Create a class in Python that can generate a new instance of itself given a list of arguments,"class Student():
    def __init__(self, name, age, gender):
        self.name=name
        self.age=age
        self.gender=gender
    def generate(self, args):
        return Student(*args)"
Generate a Python program that accepts an integer as an input and then outputs a string composed of stars,"# Get the number from the user
num = int(input(""Enter a number: ""))

# Generate a string of stars
star_string = '*' * num

print(star_string)"
Generate a Python code snippet to check if all the values of a dictionary are True.,all(dict_values) # This statement will return a boolean indicating whether all values in the dictionary are True.
Develop a Python program to compute the n-th Fibonacci number with recursion.,"def Fibonacci(n):
    if n<0:
        print(""Incorrect input"")
    # First Fibonacci number is 0
    elif n==1:
        return 0
    # Second Fibonacci number is 1
    elif n==2:
        return 1
    else:
        return Fibonacci(n-1)+Fibonacci(n-2)

# Driver Program
print(Fibonacci(9))"
Create a Python program to generate the n-th item in the Fibonacci sequence.,"def Fibonacci(n): 
    if n<0: 
        print(""Incorrect input"") 
    # First Fibonacci number is 0 
    elif n==1: 
        return 0
    # Second Fibonacci number is 1 
    elif n==2: 
        return 1
    else: 
        return Fibonacci(n-1)+Fibonacci(n-2) 

# Driver Code 
n = 5
print(Fibonacci(n))"
Modify the following Python code to add a try/except block to catch any errors.,"def add_numbers(a, b):
 try:
  sum = a + b
 except:
  print(""Error: Could not compute the sum of the numbers"")
  return None
 else:
  return sum"
Write a Python program to check if an element exists within a list.,"def find_elm(lst, elm):
  return elm in lst

print(find_elm(my_list, 7)) # True"
Create a method in Python that receives a list of strings and prints out the longest string.,"def longest_string(strings):
  longest = """"
  for s in strings:
    if len(s) > len(longest):
        longest = s
  print(longest)

longest_string(strings)
# Output: ABCDE"
Develop a Python function that takes in two lists and compares their elements,"def compare_lists(list1, list2):
    
    if len(list1) != len(list2):
        return False
    for i in range(len(list1)):
        if list1[i] != list2[i]:
            return False

    return True"
Generate a python code to evaluate a given polynomial at a given x-value.,"def evaluate_polynomial(polynomial, x):
    result = 0
 
    for i in range(len(polynomial)):
        result += polynomial[i] * x**i
 
    return result
 
print(evaluate_polynomial(polynomial, x))"
Generate an optimized code in Python to search an array and find the most frequent number.,"from collections import Counter

def find_most_frequent(array):
  c = Counter(array)
  return c.most_common(1)[0][0]

array = [3, 4, 6, 3, 2, 8, 6, 7, 3]

print(find_most_frequent(array)) # 3"
Write a function to calculate the sum of perrin numbers.,"def cal_sum(n): 
	a = 3
	b = 0
	c = 2
	if (n == 0): 
		return 3
	if (n == 1): 
		return 3
	if (n == 2): 
		return 5
	sum = 5
	while (n > 2): 
		d = a + b 
		sum = sum + d 
		a = b 
		b = c 
		c = d 
		n = n-1
	return sum"
Optimize an existing Python code snippet that sorts a list of integers in ascending order. The code should be optimized for speed and should not use any libraries.,"def bubble_sort(lst):
 n = len(lst)
    
 for i in range(n-1):
 for j in range(0, n-i-1):
 if lst[j] > lst[j+1]:
 lst[j], lst[j+1] = lst[j], lst[j+1]
 
 sorted_list = bubble_sort(unsorted_list)"
Convert the following pseudocode into Python code to check if a number is even or odd:,"def is_even(num):
 return num % 2 == 0"
Create a Python program to generate a random list of numbers between 1 to 20 and print out the largest and second largest ones.,"import random

myList = []
for i in range(20):
 myList.append(random.randint(1,20))

print(""List of random numbers:"", myList)

myList.sort()

largest_num = myList[len(myList)-1]
second_largest_num = myList[len(myList)-2]

print('Largest number:', largest_num)
print('Second-largest number:', second_largest_num)"
Generate a random string of 8 characters using Python.,"import random 

length = 8
string = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
rand_str = ''.join(random.sample(string,length))

print(rand_str)"
Create a python script to remove all the vowels from the given string.,"import re

def remove_vowels(string):
    """"""Remove all the vowels from the given string.""""""
    return re.sub(r'[aeiouAEIOU]', '', string)

# Usage Example
string = ""Hello World!""
removed_vowels = remove_vowels(string)
print(removed_vowels)  # Hll Wrld!"
Generate a function in Python to clear the screen.,"import os
def clear_screen():
    os.system(""cls"")"
Write a Python script to generate random passwords with a desired length.,"import random
import string

def generate_random_password(length):
    alphanumeric = string.ascii_letters + string.digits
    password = """".join(random.choice(alphanumeric) for i in range(length))
    return password

pwd = generate_random_password(10)
print(pwd)"
Write a Python program to sort the given list of lists by their third elements.,"def sort_by_third_elements(list_of_lists):
    return sorted(list_of_lists, key=lambda x: x[2])

my_list = [[1, 2, 5], [3, 4, 1], [7, 8, 9]]
print(sort_by_third_elements(my_list))
# Output: [[3, 4, 1], [1, 2, 5], [7, 8, 9]]"
Can you provide a Python script to automatically generate a 5 character long random alphanumeric string?,"import string
import random

def generate_random_string(length=5):
  letters = string.ascii_letters + string.digits
  return ''.join(random.choice(letters) for _ in range(length))"
Create a Python program to send an email with a custom message.,"import smtplib 
# creates SMTP session 
s = smtplib.SMTP('smtp.gmail.com', 587) 
# start TLS for security 
s.starttls() 
# Authentication 
s.login(""Your Email"", ""Your Password"") 
# message to be sent 
message = ""Segment your emails according to their purpose.""
# sending the mail 
s.sendmail(""SenderMail"", ""ReceiverMail"", message) 
# terminating the session 
s.quit()"
Create a Python script to print out the multiplication table for the given number.,"def printMultTable(n):
    for i in range(1, 11):
        print(n, 'x', i, '=', n*i)

printMultTable(4)"
Write a python function to count the upper case characters in a given string.,"def upper_ctr(str):
    upper_ctr = 0
    for i in range(len(str)):
          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1
          return upper_ctr"
Create a python program to calculate the mean of the given list.,"def mean(list):
    """"""Calculate the mean of the given list.""""""
    total = 0
    for i in list:
        total += i
    return total / len(list)

# Usage Example
list = [1, 2, 3, 4, 5]
mean = mean(list)
print(mean)  # 3.0"
Convert the following Python loop into a list comprehension.,"# Solution
[x for x in range(0,5) if (x%2 == 0)]"
Write a Python program to provide a login interface.,"def login():
    username = input(""Username:"")
    password = input(""Password:"")
    if username == ""admin"" and password == ""admin"":
        return True
    else: 
        return False"
Write a Python program to calculate the sum of the first 10 prime numbers.,"# Calculate the sum of the first 10 prime numbers
 
# Variable to store the sum
sum = 0
 
# Iterate over the first 10 prime numbers and add them to the sum 
for i in range(2,37):
   # Check for Prime number
   if all(i % j != 0 for j in range(2, i)):
      sum += i
 
# Output the result 
print(""Sum of the first 10 prime numbers is"",sum)"
Create a Python script to take a natural input number and convert it to binary.,"#!/usr/bin/python

# Get the input number
input_num = int(input(""Enter a number: ""))

# Convert to binary 
binary_num = bin(input_num)

# Print the result
print(""The binary of {} is {}"".format(input_num, binary_num))"
Write a Python program to search for a given number in a sorted list using binary search,"def binary_search(lst, num): 
    start = 0
    end = len(lst) - 1
    while start <= end: 
        mid = (start + end)//2
        if lst[mid] == num: 
            return mid 
        elif lst[mid] > num: 
            end = mid - 1
        else: 
            start = mid + 1
    return -1"
Generate a program in Python for a simple chatbot. The program should accept a user input and output a response using the input provided.,"user_input = input(""User: "")

if user_input == ""Hello"":
 print(""Chatbot: Hi there!"")
else:
 print(""Chatbot: I'm not sure what you mean, please try again."")"
Write a Python function to find the GCD of two numbers.,"def gcd(a, b):
    if a == 0:
        return b
    return gcd(b % a, a)"
Write a function to print check if the triangle is scalene or not.,"def check_isosceles(x,y,z):
  if x!=y & y!=z & z!=x:
	   return True
  else:
     return False"
Write a Python program to calculate the difference between the lowest and highest value for an array of integers.,"def diffHighestLowest(arr):
    lowest = min(arr)
    highest = max(arr)
    return highest - lowest

arr = [12, 24, 3, 8, -1]
difference = diffHighestLowest(arr)
print(difference)  # 25"
Write a Python script to predict the sentiment of a given sentence using the TextBlob library.,"import textblob

sentence = ""Life is full of surprises.""
sentiment = textblob.TextBlob(sentence).sentiment.polarity

if sentiment == 0:
 # neutral sentiment
 print(""Neutral Sentiment"")
elif sentiment > 0:
 # positive sentiment
 print(""Positive Sentiment"")
else:
 # negative sentiment
 print(""Negative Sentiment"")"
"Analyze a given Python code snippet and determine its type - a documentation, a code snippet, or a comment.",Documentation
Create an API endpoint with Python and Flask that allows users to add posts to a blog.,"from flask import Flask, request, jsonify

app = Flask(__name__)

# Create a post
@app.route('/post', methods=['POST'])
def create_post():
 data = request.get_json()
 post = {
 'title': data['title'],
 'content': data['content'],
 'author': data['author'],
 }
 # store post in database
 return jsonify(post)

if __name__ == '__main__':
 app.run(debug=True)"
Create an optimization algorithm in Python which finds the smallest number in an array of integers.,"def find_smallest_int(arr):
    smallest_num = arr[0]
    for num in arr:
        if num < smallest_num:
            smallest_num = num
    return smallest_num
 
arr = [20, 8, 7, 22, 32]
smallest_num = find_smallest_int(arr)
 
print(""The smallest number is"", smallest_num)"
Create a sentiment classifier using a linear regression algorithm in Python.,"import numpy as np

X = np.array([[1, 0], [0, 1]])
y = np.array([1, 0])

from sklearn.linear_model import LinearRegression 

model = LinearRegression().fit(X, y) 
  
predictions = model.predict(X) 
  
print(""Sentiment:"", predictions)"
Implement a singleton Python class.,"class Singleton:
    _instance = None

    def __new__(cls):
        if not cls._instance:
            cls._instance = super(Singleton, cls).__new__(cls)
        return cls._instance"
Create a Python program to print out a listed dictionary.,"for key, value in my_dict.items(): 
  print(f""{key}: {value}"")"
Debug a Python program which calculates the sum of two given numbers.,"x = 5
y = 7
sum = x + y

# Add the correct operator here
sum = x + y

print(""Sum="", sum)"
Generate a Python script that extracts text from a given PDF and converts it to CSV.,"import os
import pdfplumber
import csv

# Open the pdf
with pdfplumber.open(file_path) as pdf:
 # Extract text
 text = pdf.extract_text()
 
 # Convert to list
 lines = text.splitlines()
 
 # Save as csv
 with open('file.csv', 'w') as csvfile:
 wr = csv.writer(csvfile)
 for line in lines:
 wr.writerow(line.split())"
Create a function in Python that rounds a number to two decimal places.,"def round_to_two_decimals(number):
    return round(number, 2)"
Write a function to multiply consecutive numbers of a given list.,"def mul_consecutive_nums(nums):
    result = [b*a for a, b in zip(nums[:-1], nums[1:])]
    return result"
Rewrite the following Python function without using loop.,"def multiply_list(l): 
	from functools import reduce
	return reduce((lambda x, y: x * y), l)"
Estimate the time it takes to execute a given Python function.,"# TODO: Estimate time
import time

def estimate_time(func):
    start_time = time.time()
    func()
    end_time = time.time()
    return end_time - start_time

time_taken = estimate_time(foo)
print(f'Time taken to execute the function is {time_taken} seconds')"
Write a for-loop in python which prints the first 10 perfect squares.,"for i in range(10): 
    print(i*i, end = "" "")"
Generate a function to calculate the greatest common factor (GCF) of two numbers in Python.,"def gcf(a, b):
    if (a == 0):
        return b
    if (b == 0):
        return a

    if (a == b):
        return a

    if (a > b):
        return gcf(a-b, b)
    return gcf(a, b-a)"
Generate a Python script for sorting a list of items alphabetically.,"def sort_items(items):
  items.sort()
  return items

print(sort_items(items))

# Output
['Apple', 'Avocado', 'Banana', 'Cherry']"
"Write a Python program to predict the grade of a student, based on the past exam results.","import numpy as np

# Input data
math = 84
english = 89
biology = 82

# Define weights
math_weight = 0.3
english_weight = 0.4
biology_weight = 0.3

# Compute weighted sum
grade = math * math_weight + english * english_weight + biology * biology_weight

# Print the grade
print('Mia\'s grade is: {:.2f}'.format(grade))"
Create a python function that takes a list as an argument and returns a list with all the values doubled.,"def double_list(lst):
    return [x*2 for x in lst]"
"Create a python script that takes a list of numbers, shuffles them and prints the list.","import random

mylist = [1, 2, 3, 4, 5]
random.shuffle(mylist)

print(mylist)"
You need to optimize a given Python code for improving speed.,"def find_corresponding_nums(nums1, nums2):
    result = []
    seen = set(nums2) 
    for num1 in nums1:
        if num1 in seen:
            result.append(num1)
    return result"
"Analyse the given Python code and identify the errors, if any.","Error 1: The function definition is missing the closing parenthesis.
Error 2: The variable ""variable_name"" is not defined.
Error 3: The function does not return the value of ""variable""."
"Create a Python program that given an array of strings, returns an array with all the strings that have a length of more than 10 characters.","def getLongStrings(arr):
 return [s for s in arr if len(s) > 10]
 
long_strings = getLongStrings([""example"", ""string"", ""webapp"", ""happiness"", ""testcase"", ""application""]) 
print(long_strings)"
Write a Python program to normalize a list of words that contains upper and lowercase letters.,"def normalize(lst):
 return [word.lower() for word in lst]"
Write a Python program that takes an integer input and prints the Fibonacci series up to the input,"def fibonacci(n): 
 a = 0
 b = 1
 if n < 0:
 print(""Incorrect input"")
 elif n == 0:
 return a 
 elif n == 1:
 return b
 else:
 for i in range(2,n+1): 
 c = a + b 
 a = b 
 b = c 
 return b 

n = 10
print(fibonacci(n))

# Output: 55"
"Given a list of numbers, write a function in Python that returns the average of the numbers.","def average_list(list):
 total = 0
 for item in list:
  total += item
 return total / len(list)

list = [4,2,6,8,10]
print(average_list(list)) # Output: 6.0"
Write Python program to convert a temperature (in Fahrenheit) into Celsius.,"temp_in_fahrenheit = 98
temp_in_celsius = (temp_in_fahrenheit - 32) * 5/9
print(f'{temp_in_fahrenheit} Fahrenheit = {temp_in_celsius:.2f} Celsius')"
Create a script in any language to pass two arrays of different lengths and return a new array that is a combination of the two.,"# Python
def combine_arrays(arr1, arr2):
  combined_arr = [x for x in arr1]
  for i in arr2:
    combined_arr.append(i)
  return combined_arr

# JavaScript 
function combineArrays(arr1, arr2) {
  let combinedArr = [...arr1];
  for (let i of arr2) {
    combinedArr.push(i);
  }
  return combinedArr;
}"
Write a Python program to generate a random 5-letter string.,"import string 
import random 
  
def random_string(): 
  
 # using choice() to generate a 
 # random character from a string 
 letters = string.ascii_lowercase
 output = """" 
  
 # generating a string of 5 characters 
 for i in range(5):
  output += random.choice(letters) 
  
return output

print(random_string())"
Generate a batch of X random numbers in Python using a for loop.,"import random
numbers = []

for i in range(10):
 number = random.randint(1, 100)
 numbers.append(number)
 
print(numbers)"
Write a Python program to generate random numbers in a specified range.,"import random 
  
# Generates a random integer between 0 and 1000 
x = random.randint(0,1000) 
  
print(x)"
Optimize this Python code for speed.,"lst = list(range(100))
 
for i in lst:
    print(i)"
Create an algorithm in Python to check whether an array has even or odd number of elements.,"def is_array_even(arr): 
  if len(arr)%2 == 0:
    return True
  else:
    return False"
Develop a system that finds similarities between given strings.,"def get_jaccard_similarity(str1, str2):
    a = set(str1.split()) 
    b = set(str2.split())
    c = a.intersection(b)
    return float(len(c)) / (len(a) + len(b) - len(c))

# Driver code 
str1 = ""python programming""
str2 = ""java programming""
print(get_jaccard_similarity(str1, str2))"
Create a function in Python that takes a list as an argument and removes any duplicate values in the list.,"def remove_duplicates(my_list):
  new_list = []
  for num in my_list:
    if num not in new_list:
      new_list.append(num)
  return new_list"
Optimize the given Python function to reduce its run time and memory usage.,"def func1(n, lookup): 
    if n == 0 or n == 1 : 
        lookup[n] = n 
    if lookup[n] is None:  
        lookup[n] = func1(n-1, lookup) + func1(n-2, lookup)  
    return lookup[n] 
  
def optimizedFibo(n): 
    lookup = [None]*(n+1)  
    return func1(n, lookup)"
Design a python program that prints out alternating strings from two lists,"words1 = [""Hello"",""World"",""My"",""Name"",""Is""]
words2 = [""John"", ""Smith"", ""Where"", ""Are"", ""You""]

for i in range(len(words1)):
    print(words1[i], words2[i])"
"In Python, parse the following XML document and extract the book title and author.","# import the necessary libraries
import xml.etree.ElementTree as ET

# Parse the XML document
root = ET.fromstring(xml_doc)

for book in root:
    if book.tag == 'title':
        title = book.text
    elif book.tag == 'author':
        author = book.text

print(f""Book Title: {title}, Author: {author}"")"
Write a python function to find the sum of repeated elements in a given array.,"def find_Sum(arr,n): 
    return sum([x for x in arr if arr.count(x) > 1])"
Write a Python program to create multiple directories from the given list.,"import os

dirs_list = [""dir1"", ""dir2"", ""dir3""]

for d in dirs_list:
    os.makedirs(d)"
"Write a Python script to print the current date in the following format: ""Monday, October 5th, 2020"".","import datetime

date_info = datetime.datetime.today()

day_name = date_info.strftime(""%A"")
month_name = date_info.strftime(""%B"")
date_num = date_info.strftime(""%-d"")
year_num = date_info.strftime(""%Y"")

print(f""{day_name}, {month_name} {date_num}th, {year_num}"")"
Create a Python function to convert centimeter to inches.,"def centimeter_to_inches(cm):
    inches = cm * 0.39
    return inches

cm = 10
inches = centimeter_to_inches(cm)
print(inches)"
Optimize the following Python code by using list comprehensions:,"string_list = [""Hello"", ""world"", ""how"", ""are"", ""you""] 

# Optimized version 
string_list = [s.upper() for s in string_list]"
Generate a correct python program to return the second biggest element in a given list.,"def second_biggest(lst):
 max1 = 0
 max2 = 0
 for num in lst:
 if num > max1:
 max1 = num
 elif num > max2:
 max2 = num
 return max2

second_largest_num = second_biggest([1, 5, 9, 4, 16, 11])
print(second_largest_num)"
Write a Big O notation for the following python code.,O(2^n)
"Create a class in Python named ""MyCalculator"" with a method ""sum"" that calculates the sum of two numbers.","class MyCalculator:
    def __init__(self):
        pass
    
    def sum(self, a, b):
        return a + b"
Write a Python program to calculate the tax for an item given a set of tax rates.,"def calculate_tax(brackets, price):
 taxamount = 0
 for i in range(len(brackets)):
 if price>=100*(i+1):
 taxamount += 100*brackets[i]
  else:
 taxamount += (price%100)*brackets[i]
  break
 return taxamount

tax_brackets = [0.01, 0.05, 0.1, 0.15, 0.2]
item_price = 110 

tax = calculate_tax(tax_brackets, item_price)
print(tax)"
Write a class in Python that checks if a number is prime.,"class PrimeNumberChecker(object):

    def is_prime(self, number):
        if number < 2:
            return False
        for i in range(2, number):
            if number % i == 0:
                return False
        return True"
Create a Python program that will take an array of integers as input and output a reversed version of the array.,"def reverseArray(arr): 
    return arr[::-1] 
  
arr = [1,2,3,4,5] 
reverseArr = reverseArray(arr) 
  
print(""Reversed array is"", reverseArr)"
Write a python function to find the length of the shortest word.,"def len_log(list1):
    min=len(list1[0])
    for i in list1:
        if len(i)<min:
            min=len(i)
    return min"
Write a Python class myDict that implements a dictionary with two methods - get() and set().,"class myDict:
    def __init__(self):
        self.data = {}
 
    def get(self, key):
        return self.data[key]
 
    def set(self, key, value):
        self.data[key] = value
 
    def __repr__(self):
        return str(self.data)"
Design a web scraper using Python's BeautifulSoup library that extracts data from HTML sites.,"#Import libraries 
import requests 
from bs4 import BeautifulSoup 

#Make a request to the url 
url = 'http://www.example.com'

r = requests.get(url)
soup = BeautifulSoup(r.content, 'html.parser') 

#Extract data 
data = [] 

for x in soup.find_all('div', class_=""data-cell""): 
 data.append(x.text.strip()) 

#Print the data 
print(data)"
"Write a for loop in Python to iterate through the list [4, 7, 11, 13] and print each number.","for num in [4,7,11,13]:
    print(num)"
Develop a function in Python to delete punctuation from a string.,"import string

def rm_punctuation(text): 
    translator = text.maketrans("""", """", string.punctuation) 
    return text.translate(translator) 
  
text = ""This, is a string.""
print(rm_punctuation(text))"
Write a Python expression that returns the element at index 2 of a list.,"list[2] # returns ""Cherry"""
Create a Python class named 'Dog' that has a method which returns the name of a given dog.,"class Dog:
    def __init__(self, name):
        self.name = name

    def get_name(self):
        return self.name"
"Develop a program in Python that generates random passwords with characters, numbers, and special characters.","import random
import string

def generate_password():
  password_length = 12
  char_list = list(string.ascii_letters) + list(string.digits) + list(string.punctuation)
  random.shuffle(char_list)
  return ''.join(char_list[:password_length])

print(generate_password())"
Critique the given code for best coding practices.,"The code could improve by using the built-in sum() from the Python library. Also, you should use a more meaningful variable name instead of list_num to better explain the intent of the code. Lastly, you could use type hinting to specify the type of variables passed into the function."
"Edit the following Python code to print out ""Hello World"" 5 times.","for i in range(5):
    print(""Hello World"")"
Create a Python class that has the following functionality.,"class StringChecker:
    def containsVowels(self, s):
        vowels = set('aeiouAEIOU')
        for letter in s:
            if letter in vowels:
                return True
        return False"
Create a python class that stores a name and address.,"class Person:
    def __init__(self, name, address):
        self.name = name
        self.address = address

    def get_name(self):
        return self.name
    
    def get_address(self):
        return self.address
    
    def set_name(self, name):
        self.name = name
    
    def set_address(self, address):
        self.address = address"
Create a Python script to extract emails from a given string.,"import re

input_str = ""Alice lives at alice@example.com and Bob lives at bob@example.com.""

# use regular expression to extract emails
pattern = r'[\w\.-]+@[\w\.-]+'

emails = re.findall(pattern, input_str)

print(emails) # ['alice@example.com', 'bob@example.com']"
Write a Python script to convert a list of words into a dictionary that details the frequencies of each word.,"word_dict = {}

# Count frequency of each word
for word in input_list:
 if word in word_dict.keys():
 word_dict[word] += 1
 else:
 word_dict[word] = 1

print(word_dict)
# Output: {'word': 2, 'words': 1, 'python': 1}"
Write a function in Python that uses an exponential function to calculate the number of steps needed for a particular sorting algorithm for a given array,"def merge_complexity(arr, sort):
    n = len(arr)

    # base case
    if (n <= 1): 
        return 0

    # Merge sort complexity calculation
    if (sort == ""Merge Sort""): 
        return (n * log(n, 2))

# Driver code 
A = [1, 2, 3, 4]
print(merge_complexity(A, 'Merge Sort'))"
Optimize the following Python function to calculate the sum of natural numbers up to a given number.,"def sum_natural_numbers(n):
    total = 0
    for i in range(1, n + 1):
        total += i
    
    return total

def sum_natural_numbers(n):
    return n * (n + 1) // 2

print(sum_natural_numbers(10))"
Write a function in Python to merge two sorted arrays.,"def merge_arrays(arr1, arr2):
    merged_array = arr1 + arr2
    return sorted(merged_array)

merged_array = merge_arrays(arr1, arr2)
print(merged_array)"
Design a program to calculate the sum of two integers in Python.,"def sum_two_ints(a, b):
    return a + b"
Write a Python program to optimize the given code for speed and reduce memory usage.,"def func(a):
    result = [x + 5 for x in a]
    return result"
Convert the following python class to XML format.,"<?xml version=""1.0"" ?>
<person>
    <name>{self.name}</name>
    <age>{self.age}</age>
</person>"
Write a Python script to calculate the total marks by adding the marks of two subjects.,"total = subject1 + subject2
print(""Total Marks:"", total)"
Generate code for a function in Python for finding the sum of a given list of numbers.,"def add_numbers(numbers):
    """"""
    Find the sum of a given list of numbers.
    Args:
        numbers: a list of numbers.
    Returns:
        The sum of the numbers.
    """"""
    sum = 0

    # Iterate over numbers
    for num in numbers:
        # Add number to total
        sum += num

    return sum

total = add_numbers([4, 7, 6, 2])

print(total)"
Build a class in Python that creates a Point in a two dimensional space.,"class Point:
 def __init__(self, x, y):
     self.x = x
     self.y = y

# create a Point object
p = Point(2, 4)

print(p.x)
print(p.y)"
Implement a Principal Component Analysis algorithm in Python.,"from sklearn.decomposition import PCA
pca = PCA()
pca.fit(X)
X_pca = pca.transform(X)"
"Improve the following Python code:

def even_odd(x):
if x % 2 == 0:
    print (""even"")
else:
    print (""odd"")","def even_odd(x):
  if isinstance(x, int):
    if x % 2 == 0:
      print(""even"")
    else:
      print(""odd"")
  else:
    print(""x must be an integer"")"
"Create a Python class for representing a student's grades with methods for adding, deleting and updating the grades.","class StudentGrades:
    def __init__(self, grades=[]):
        self.grades = grades
    
    def add_grade(self, grade):
        self.grades.append(grade)

    def delete_grade(self, index):
        del self.grades[index]

    def update_grade(self, index, new_grade):
        self.grades[index] = new_grade"
Generate a program in Python to calculate the area of a circle given its radius.,"import math

def calculate_area_of_circle(radius):
    area = math.pi * radius ** 2
    return area

result = calculate_area_of_circle(5.5)
print('The area of the circle is: ', result)"
Write a function in Python that takes three string arguments and returns a list where the elements are the concatenation of each pair of strings.,"def strJoin(str1, str2, str3):
    return [str1 + str2, str2 + str3, str1 + str3]"
"Create a Python script that given a list of strings and a target string, returns the strings from the list that contain the target string.","target = 'hello'
list_strings = ['hello world', 'good bye', 'hello', 'hello planet']

results = [string for string in list_strings if target in string]

print(results)
# Output: ['hello world', 'hello', 'hello planet']"
Write a Python script to make an HTTP request using the Requests library.,"import requests

resp = requests.get(url)

if resp.status_code == 200:
 print('Success!')
 print(resp.text)
 else:
 print('An error occurred.')"
Create a python program to perform a linear search,"def linear_search(lst, target):
    for i, val in enumerate(lst):
        if val == target:
            return i
    return -1

# Sample Test
lst = [1, 2, 3, 4, 5]
target = 3
print(linear_search(lst, target)) # 2"
Design a computer program to sort the list according to alphabetical order.,"def alphabetical_sort(words):
    return sorted(words)

list_of_words = [""python"", ""javascript"", ""java"", ""ruby""]
sorted_list = alphabetical_sort(list_of_words)
print(sorted_list)"
"Generate a Python class to represent a car. The class should include attributes for make, model, year, and color.","class Car:
 def __init__(self, make, model, year, color):
  self.make = make
  self.model = model
  self.year = year
  self.color = color
  
 def get_info(self):
  return f'This car is a {self.color} {self.year} {self.make} {self.model}.'"
Write a python script to print out every possible combination of letters given a list of characters,"from itertools import product

# Create a function to generate every possible combination
def generate_combinations(chars):
    for combination in product(*chars):
        combination = """".join(combination)
        print(combination)
        
# Input list of characters
chars = [""a"",""b"",""c""]

# Generate all combinations
generate_combinations(chars)"
Write a python function to find lcm of two positive integers.,"def lcm(x, y):
   if x > y:
       z = x
   else:
       z = y
   while(True):
       if((z % x == 0) and (z % y == 0)):
           lcm = z
           break
       z += 1
   return lcm"
"Generate a Python function to reverse the order of each word in a string, leaving the absolute order of each word unchanged.","def reverser(string):
    reversed_string = []
    words = string.split()
    for word in words:
        reversed_string.append(word[::-1])
    return "" "".join(reversed_string)"
Classify different programming languages based on their features.,"C++:   Object-oriented, compiled language
Java:  Object-oriented, compiled language
Python: Object-oriented, interpreted language
JavaScript: Object-oriented, interpreted language"
Develop a Python program that calculates the average hours of sunlight in a given city during a month. Assume the city name and month are provided as user input.,"# Get user input
city = input(""City Name: "")
month = input(""Month: "")

# Calculate the average hours of sunlight in a given city during a month
def average_sunlight(city, month):
    # Your code goes here
    ...

# Print the result
print(average_sunlight(city, month))"
Write a python function to count the number of squares in a rectangle.,"def count_Squares(m,n): 
    if (n < m): 
        temp = m 
        m = n 
        n = temp 
    return n * (n + 1) * (3 * m - n + 1) // 6"
Resolve the given merge conflict using Python.,x = 10
Create a Python program to remove all whitespaces from a string.,"def remove_whitespace(s):
    return s.replace("" "", """")

print(remove_whitespace(""This is a string with whitespaces""))"
Construct a Python program that calculates average of numbers stored in a list.,"def list_average(nums):
    return float(sum(nums)) / float(len(nums))"
"Using the provided Python code, optimize the code to be as efficient as possible.","x = 0
y = 0

def func():
global x, y
x, y = x+1, y+2

func()
x += 9999
y += 19998"
Generate an equation in Python that works with given input.,y = x**2 + 7*x + 3
Write a Python program to compute the sum of items in a given list and multiply it by a given number.,"#initialize variables
list = [1, 3, 5, 7]
num = 3

# compute sum
sum = 0
for i in list:
    sum = sum + i

# compute product
result = sum * num

# Print result
print(""Result: "", result)"
Write a python function for calculating the factorial of a given number.,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)"
Develop a program in Python for counting the occurrences of a given character in a string.,"def countOccurences(str, char):
    count = 0
    for ch in str:
        if ch == char:
            count += 1
    return count

print(countOccurences('abcdefg', 'a'))"
Create an Python function that takes a string containing a numerical expression and returns the result.,"def eval_expr(expr):
   return eval(expr)"
Generate a list of combinations of three numbers from a given array in Python.,"combinations = []
for i in range(len(arr)):
    for j in range(i+1, len(arr)):
        for k in range(j+1, len(arr)):
            combinations.append([arr[i], arr[j], arr[k]])"
Implement a code in Python to print out the sum of the first six numbers.,"# Initialize sum
sum = 0

# Use a for loop to iterate over numbers
for num in range(1, 7):
    sum = sum + num

# Print result
print(""The sum of the first six numbers is:"", sum)"
"Implement a function in Python that takes a number as an argument and returns true if the number is even, false otherwise.","def is_even(number):
    if (number % 2 == 0):
        return True
    else:
        return False"
Create a Python program to normalize a given data set.,"def normalize(nums):
    min_Num = min(nums)
    max_num = max(nums)
    
    for i in range(len(nums)):
        nums[i] = (nums[i] - min_Num)/ (max_num - min_Num)
    
    return nums"
"Generate a Python class to represent Course objects with fields such as course title, description and rating.","class Course:
    def __init__(self, title, description, rating):
        self.title = title
        self.description = description
        self.rating = rating
    
    def get_title(self):
        return self.title
    
    def get_description(self):
        return self.description
    
    def get_rating(self):
        return self.rating"
Create a Python script to return the first two elements of a list.,"def get_first_two(list):
    return list[:2]

list = [1,2,3,4,5] 
print(get_first_two(list)) # returns [1,2]"
Optimize the following Python code for counting the number of vowels in a string.,"def count_vowels(str):
 count = 0
 vowels = set(""aeiou"")
 for i in str:
  if i in vowels:
   count += 1
 return count"
Create a Python script to convert a given list of integers to a new list of strings.,"def to_string_list(lst):
    return [str(x) for x in lst]

int_list = [1, 2, 3]
string_list = to_string_list(int_list)
print(string_list)

## Output
['1', '2', '3']"
Create a web application in Python using Flask that prints out the number of unique visitors for the site.,"from flask import Flask, session, render_template

app = Flask(name)
app.secret_key = 'secret_key'

@app.route('/')
def index():
 if 'visits' not in session:
  session['visits'] = 0
 session['visits'] += 1
 return render_template('index.html', visits=session['visits'])

if name == 'main':
 app.run(debug=True)"
Design an algorithm in Python that takes an array of integers and prints the numbers between 1 and 100 that are not present in the array,"def missing_numbers(arr):
    arr_set = set(arr)
    for i in range(1, 101):
        if i not in arr_set:
            print(i)

missing_numbers([4,5,1,9, 8,5])"
Write a code to generate a UUID using Python,"import uuid

def generate_uuid():
    return str(uuid.uuid4())

if __name__ == '__main__':
    print(generate_uuid())"
Generate a Python function for counting the number of digits in a given number,"def count_digits(num):
    """"""
    Counts the number of digits in a given number.
    """"""
    count = 0
    while num > 0:
        num //= 10
        count += 1
    return count

if __name__ == '__main__':
    num = int(input('Enter number: '))
    print(count_digits(num))"
Write a Python function to convert a given list to a dictionary where the elements of the list are the keys and the values are square of the keys.,"def list_to_dictionary(numbers): 
 d = {} 
 for number in numbers: 
 d[number] = number**2 
 return d

result = list_to_dictionary([1, 2, 3, 4])
print(result)"
Create a program in Python that visualizes the data given.,"import matplotlib.pyplot as plt

data_set = [
    [1,2,3,4,5],
    [6,7,8,9,10],
    [11,12,13,14,15]
]

fig, ax = plt.subplots()
ax.plot(data_set)
ax.legend([""Group 1"", ""Group 2"", ""Group 3""])
plt.show()"
Write a Python script to generate a list of random numbers with specified length.,"import random
length = 5

rand_nums = [random.randint(0,100) for i in range(length)]
print(rand_nums)"
Write a function to remove all whitespaces from a string.,"import re
def remove_all_spaces(text):
 return (re.sub(r'\s+', '',text))"
Edit the following Python code to include a while loop:,"a = 0
b = 0

while a < 10:
    a += 1
    b = b + a

print(b)"
Play a game of Tic-Tac-Toe in Python.,"# Define a 3x3 board
board = [['_','_','_'],
         ['_','_','_'], ['_','_','_']]

# Function to display the board
def print_board(board):
  for i in range(3):
    for j in range(3):
      print(board[i][j] + "" "", end="""")
    print()

# Define a player A, who plays a piece 'X' at location (0,0)
board[0][0] = 'X'

# Print the board
print_board(board)"
Implement this algorithms in Python.,"def dfs(graph, start):
    visited = []
    stack = [start]
    while stack:
        vertex = stack.pop()
        if vertex not in visited:
            visited.append(vertex)
            for node in graph[vertex]:
                stack.append(node)
    return visited"
Convert the following SQL query to Python.,"import sqlite3

db = sqlite3.connect(""employee_table.db"") # Assumes the table is in a file named employee_table.db
cur = db.cursor()

# Execute the SQL command
cur.execute(""SELECT * FROM employee_table WHERE salary < 10000"")

# Commit your changes
db.commit()

# Get the results
results = cur.fetchall()

# Print the results
for row in results:
    print(row)"
Write a Python program to create a dictionary from two lists.,"def create_dict(keys, values):
    return dict(zip(keys, values))
    
dictionary = create_dict(keys, values)
print(dictionary)"
Develop a Python program to flatten a 2-D list.,"def flatten_2d_list(list_2d):
 # Initialize an empty list 
 flat_list = []
 
 # Loop through the list 
 for row in list_2d:
	 for item in row: 
		 # Add the item to the flat list 
		 flat_list.append(item) 

# Return the flattened list 
return flat_list"
"Write a python program that takes a list of strings, checks if any of them are palindromes, and returns 'True' if at least one of them is a palindrome.","def is_palindrome(strings):
    for string in strings:
        reversed_string = string[::-1]
        if string == reversed_string:
            return True
    return False

strings = ['abc', 'bob', 'kayak']
out = is_palindrome(strings)
print(out)"
Design an efficient algorithm to sort a list of integers in Python.,"def sort_integers(arr):
 n = len(arr)
 for i in range(n):
  for j in range(0, n - i - 1):
   if arr[j] > arr[j + 1]:
    arr[j], arr[j + 1] = arr[j + 1], arr[j]
 return arr

unsorted_list = [4, 2, 7, 1, 3, 8]
print(sort_integers(unsorted_list))
# Output: [1,2,3,4,7,8]"
Write a python function to find the first position of an element in a sorted array.,"def first(arr,x,n): 
    low = 0
    high = n - 1
    res = -1  
    while (low <= high):
        mid = (low + high) // 2 
        if arr[mid] > x:
            high = mid - 1
        elif arr[mid] < x:
            low = mid + 1
        else:
            res = mid
            high = mid - 1
    return res"
Write a Python program to find the sum of the three given numbers where the three numbers are given as input.,"# Function to calculate the sum 
# of three numbers 
def SumOfThree (x, y, z): 
    sum = x + y + z 
    return sum

# Print the sum 
print(""Sum of 3 numbers is: "", SumOfThree(4, 5, 6))"
Suggest a code snippet to generate a histogram in Python.,"""""""
Suggest a code snippet to generate a histogram in Python
""""""

# import the required libraries
import matplotlib.pyplot as plt

# set the data to plot
data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# generate the histogram
plt.hist(data, bins=7, color='blue', edgecolor='black')
plt.title('A Histogram')
plt.xlabel('Values')
plt.ylabel('Frequency')

# show the plot
plt.show()"
Design a Python program to filter out the odd numbers from a list.,"def filter_odd_numbers(numbers):
    filtered_list = []
    for num in numbers:
        if num % 2 != 0:
            filtered_list.append(num)
    return filtered_list

list1 = [1,2,3,4,5,6]
filtered_list = filter_odd_numbers(list1)
print(filtered_list)  # [1, 3, 5]"
Generate a list of prime numbers from 0 to 100 in Python.,"def generate_prime_numbers(start, end):
    prime_numbers = []
    for num in range(start, end + 1):
        if num > 1:
            for i in range(2, num):
                if (num % i) == 0:
                    break
            else:
                prime_numbers.append(num)
    return prime_numbers

print(generate_prime_numbers(0, 100))"
Construct a new Python program for converting a given hashmap to a list.,"d = { 'name': 'John', 'age': 44, 'job': 'Engineer' }
l = list(d.items())
print(l)  // [('name', 'John'), ('age', 44), ('job', 'Engineer')]"
"With Python, create a web scraper that collects text from a blog.","import requests
from bs4 import BeautifulSoup
 
def scrape_blog(url):
 r = requests.get(url)
 content = r.content
 soup = BeautifulSoup(content)
 
 text_blocks = soup.find_all('p')
 text = ''
 
 for block in text_blocks:
 text += block.text
 
 return text"
Write a Python program to calculate the sum of the elements in a given matrix. Assume the matrix is a list of lists.,"def matrix_sum(matrix):
sum = 0
for row in matrix:
 for elem in row:
  sum += elem
return sum"
Write a function in Python to convert following input into a dictionary,"def list_to_dict(input_list):
  output_dict = {}
  for key, value in input_list:
    output_dict[key] = value 
  return output_dict"
Can you design a function in Python to print the first 20 even numbers in ascending order?,"def print_even_numbers():
    even_nums = [num for num in range(0, 40) if num % 2 == 0]
    for num in even_nums[:20]:
        print(num)

print_even_numbers()"
Write a Python program to generate a random password of 8 characters.,"import string
import random

def generate_password():
    chars = string.ascii_letters 
    size = 8
    return ''.join(random.choice(chars) for x in range(size))

print(generate_password())"
Write a Python script to implement the bubble sort algorithm.,"def bubble_sort(arr):
    for i in range(len(arr)-1):
        for j in range(len(arr)-i-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
    return arr"
Examine a Python function and refactor it to make it more efficient and optimized.,"def foo(n):
    return n * (n + 1) // 2"
Write a Python program to convert a string of lower case characters to upper case characters.,"string = ""Hello World""

# convert to upper case
string = string.upper()

# print result
print(string) # prints ""HELLO WORLD"""
Write a function to check whether the given number is undulating or not.,"def is_undulating(n): 
	if (len(n) <= 2): 
		return False
	for i in range(2, len(n)): 
		if (n[i - 2] != n[i]): 
			return False
	return True"
Create a Python script to find the area of a circle when given its radius.,"import math
 
def area_circle(radius):
 return math.pi * (radius ** 2)
 
print(area_circle(radius))"
Write a Python script to retrieve a title from a given URL.,"import requests

url = 'https://www.nytimes.com/2020/11/19/us/denver-police-protest.html'
response = requests.get(url)

if response.status_code == 200:
 title = response.text.split(""<title>"")[1].split(""</title>"")[0]
 print(title)"
Maximize a given function subject to the given constraints.,"We can maximize the given function by solving the given constraints as a linear programming problem. We can use an optimization library in Python to solve this problem. We can also use the Simplex algorithm to solve this problem. The optimal solution is (1,1), which gives a maximum value of 2."
Create a Python program to generate a 2D array of a defined size and fill it with random numbers.,"import random

# define the size of the array
x, y = 10, 10

# create an empty array of the given size
arr = [[0 for j in range(x)] for i in range(y)]

# fill the array with random numbers
for i in range(x):
 for j in range(y):
 arr[i][j] = random.randint(0, 9)

# print the array
for i in range(x):
 print(arr[i])"
Create a Python program that uses natural language processing and machine learning to analyze sentiment in a given sentence.,"import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer

sentences = [""The food was absolutely delicious.""]
sid = SentimentIntensityAnalyzer()

for sentence in sentences:
 print(sentence)
 ss = sid.polarity_scores(sentence)
 for k in ss:
 print('{0}: {1}'.format(k, ss[k]), end='\n')"
Write a Python script to loop through a list of numbers and print out only the even numbers.,"my_list = [3, 7, 10, 15, 17, 20]

for number in my_list: 
  if (number % 2 == 0): 
    print(number)"
Write a Python program to find the lowest common ancestor of two given nodes in a binary tree.,"def find_lca(root, node1, node2):
    if root is None:
        return None

    if root == node1 or root == node2:
        return root
    
    left_lca = find_lca(root.left, node1, node2)
    right_lca = find_lca(root.right, node1, node2) 
 
    if left_lca and right_lca:
        return root

    return left_lca if left_lca is not None else right_lca"
Generate a program in Python which takes an input array and outputs the unique elements in the array.,"def uniqueValues(arr):
    uniqueVal = []
    for i in arr:
        if i not in uniqueVal:
            uniqueVal.append(i)
    return uniqueVal

arr = [1, 2, 5, 2, 6, 6, 1]
uniqueVal = uniqueValues(arr) 
print(uniqueVal)"
Develop a program in Python that generates the Fibonacci Series.,"def fib(n):
 a, b = 0, 1
 while a < n:
 print(a, end="" "")
 a, b = b, a+b
 print()

n = int(input(""Enter the number of terms: ""))
fib(n)"
Rewrite the following code in Python.,"x = 5
y = 10
z = x + y"
Transform this JSON into a Python Dictionary.,"import json

# Load the JSON data into a Python Dictionary
data = json.loads('{""name"": ""John"", ""age"": 28, ""location"": ""New York""}')"
Generate a Python program that scrambles the input string by randomly switching the positions of the characters.,"import random

input_string = ""Hello World""

#Split the given string
string_list = list(input_string)
random.shuffle(string_list)

#Form the scrambled string
scrambled_string = """".join(string_list) 

print(""Scrambled string:"",scrambled_string)"
Write a Python program that counts the number of even and odd numbers in a list.,"def count_odd_even(lst):
 even_count = 0
 odd_count = 0
 for num in lst:
 if num % 2 == 0:
 even_count += 1
 else:
 odd_count += 1
 return [even_count, odd_count]"
Write a Python script to generate a new random number between 0 to 50,"import random

def get_rand():
    return random.randint(0, 50)"
Write a python program to find the largest of three given numbers.,"num1 = 14
num2 = 25
num3 = 6

largest = max(num1, num2, num3)

print(""The largest number is"", largest)"
Develop an algorithm in Python to compute the intersection of two lists.,"def findIntersection(list_a, list_b):
  intersection_list = []

  for element in list_a:
    if element in list_b:
      intersection_list.append(element)
  
  return intersection_list
  
# Main
list_a = [3, 5, 6, 9]
list_b = [4, 5, 8, 9]
intersection_list = findIntersection(list_a, list_b)

print('Intersection of list_a and list_b:', intersection_list)"
Create a serverless function in Python that converts a filename to a corresponding filetype.,"import os

def get_filetype(filename):
 _, file_extension = os.path.splitext(filename)
 return(file_extension.lower()[1:])

filetype = get_filetype(""example.jpg"")
print(filetype)

# Output: jpg"
Edit the following Python program to find the maximum number in a given list of numbers.,"numbers = [25, 12, 15, 32, 7]

# initialize maximum number
max = numbers[0]

# loop through list
for num in numbers:
    # compare each number to find the max
    if num > max:
        max = num

# print maximum number
print(max)"
"Using the input data as a guide, implement a Fibonacci sequence in Python.","# Fibonacci sequence
def fibonacci(n): 
    if n<0: 
        print(""Incorrect input"")
    elif n==1: 
        return 0
    elif n==2: 
        return 1
    else: 
        return fibonacci(n-1)+fibonacci(n-2)
  
# Driver Program 
print(fibonacci(9))"
Create a Python program to generate Fibonacci sequence upto n terms,"def fibonacci(n):
    a, b = 0, 1
    fibs = []
    
    while len(fibs) < n:
        fibs.append(a)
        a, b = b, a + b
        
    return fibs

#get the Fibonacci sequence upto n terms
print(fibonacci(n))"
"Create a Python class called ""Circle"" which takes its radius as an argument. This class should have a method called ""area"" which calculates the area of the circle and a method called ""circumference"" which calculates the circumference","class Circle:
 def __init__(self, radius):
 self.radius = radius
 
 def area(self):
 return 3.14 * (self.radius ** 2)
 
 def circumference(self):
 return 2 * 3.14 * self.radius"
Implement a Python program that returns the sum of the elements in an array.,"def arraySum(arr):
    if len(arr) == 0:
        return 0
    else: 
        return arr[0] + arraySum(arr[1:])

print(arraySum([4, 8, 12, 16])) # 40"
Analyze a given list of numbers and print out the mean and variance using Python.,"def analyze_list(numbers):
 mean = 0
 for num in numbers:
 mean += num
 mean /= len(numbers)
 
 variance = 0
 for num in numbers:
 variance += (num - mean)**2
 variance /= len(numbers)
 
 print(""Mean:"", mean)
 print(""Variance:"", variance)"
Write a python program that takes in two integers and prints the largest number.,"num1 = 10
 num2 = 8

if num1 > num2:
    print(num1)
else:
    print(num2)"
Write a Python program to print the factorial of a number.,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)

num = 5
print(""The factorial of"", num, ""is"", factorial(num))"
Rewrite a provided Python function to a more Pythonic version.,"def add_numbers(x, y):
 return sum(range(x, y))"
Create an automated security system using Python and Raspberry Pi.,"#import necessary modules
import os
import RPi.GPIO as GPIO
import time

#Set up Raspberry pi hardware
GPIO.setmode(GPIO.BCM)
pirPin = 16
GPIO.setup(pirPin, GPIO.IN)

#Define Motion detection task
def detectMotion():
    if GPIO.input(pirPin):
        print('Motion Detected!')
        #Do some action if motion is detected
    time.sleep(1)

#Run task
while True:
    detectMotion()"
Create a program in Python that generates a random sequence of 1s and 0s of length 10.,"import random

# Generate a random sequence of 0s and 1s
n = 10
random_sequence = """".join([str(random.randint(0, 1)) for x in range(n)])
print (random_sequence)"
Generate a program to reverse a string in python.,"def reverse_string(string): 
    return string[::-1]"
"Using Python, write a program that finds the most common word in a given set of text.","from collections import Counter

def most_common_word(text):
    words = text.split()
    cnt = Counter()
    for word in words:
        cnt[word] += 1
    return cnt.most_common(1)[0][0]

text = ""This is an example sentence. The quick brown fox jumps over the lazy dog""
print(most_common_word(text))"
Write a Python function to shift every element in a given array by k.,"def shift(arr, k):
    for i in range(len(arr)):
        arr[i] = arr[i] + k
    return arr

arr = [1, 2, 3, 4, 5]
shift(arr, 10)
print(arr)"
"Write a function in Python to create a dictionary from two lists, one of keys and the other one of values.","def createDict(keys, values):
  dict = {}
  for i in range(len(keys)):
    dict[keys[i]] = values[i]
  return dict"
Write Python code to generate a report of the total price of the items stored in a list?,"total_price = 0
for item in items:
    total_price += item[1]

print(""The total price of the items is {:.2f}"".format(total_price))"
How do I create a random password in Python?,"import random
import string

def generate_pass(stringLength=8):
    letters = string.ascii_lowercase
    return ''.join(random.choice(letters) for i in range(stringLength))

password = generate_pass()
print(password)"
Write a Python program to create a list that represents the frequency of each word in a given sentence.,"sentence = ""This is a sentence""
sentence_list = sentence.split()
frequency_list = []

for word in sentence_list:
    frequency_list.append(sentence_list.count(word))
    
frequency_dict = dict(zip(sentence_list, frequency_list))

print(frequency_dict)"
Create a python function that stores the elements of a list in a dictionary.,"def list_to_dict(list):
    dictionary = {}
    for item in list:
        dictionary[item] = 0

    return dictionary"
Write a Python script to decode a base64 encoded string.,"import base64

encoded_string = 'aGVsbG8='
decoded_string = base64.b64decode(encoded_string)
print(decoded_string) # prints b'hello'"
Write a python function to find the sum of xor of all pairs of numbers in the given array.,"def pair_OR_Sum(arr,n) : 
    ans = 0 
    for i in range(0,n) :    
        for j in range(i + 1,n) :   
            ans = ans + (arr[i] ^ arr[j])          
    return ans "
Develop a Python program that calculates the median of an array of numbers.,"def median(numbers):
    numbers.sort()
    if len(numbers) % 2 == 0:
        return (numbers[len(numbers)//2] + numbers[(len(numbers)//2)-1]) / 2.0
    else:
        return numbers[len(numbers)//2]"
"Write a function in Python that takes in a string and returns true if it is a palindrome, and false otherwise.","def is_palindrome(text):
    return text == text[::-1]"
Generate Python code to print the smallest number in a given list of numbers.,"list_of_numbers = [24, 14, 67, 89, 34, 52]
print(min(list_of_numbers))"
Develop a loop that prints a python array from the end to the beginning.,"def printArrayReverse(arr): 
    for i in range(len(arr) - 1, -1, -1): 
        print(arr[i], end = "" "")

printArrayReverse(arr)"
Create a function in Python to read two strings and return the concatenation of them.,"def concatenate_strings(str1, str2):
    return str1 + str2

print(concatenate_strings(""Hello"", ""world!""))"
Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.,"def sum_negativenum(nums):
  sum_negativenum = list(filter(lambda nums:nums<0,nums))
  return sum(sum_negativenum)"
Design a function in Python to get the largest number in an array of numbers.,"def get_largest_number(arr):
    largest = arr[0]
    for num in arr:
       if num > largest:
           largest = num
    return largest

largest_num = get_largest_number([2, 11, 15, 9, 5])
print(largest_num)"
"Given a list of numbers, write a python program that finds an index of an array element and its corresponding value.","def find_index_and_value(my_list):
    for i, num in enumerate(my_list):
        print(""Element with index %d has value %d"" % (i, num))

my_list = [2,4,6,8,10]
find_index_and_value(my_list)"
Write an algorithm in Python to find the average value in an array of integers.,"def avg(arr): 
  
    # calculating length of array 
    n = len(arr) 
    total_sum = 0

    for i in range(0, n): 
        total_sum += arr[i] 
  
    return total_sum / n 

# Driver code 
arr = [4, 10, 6, 8] 
assert avg(arr) == 7.0"
Write a function in Python that takes two strings and returns the length of the longest string.,"def longest_string_length(string1, string2):
    if len(string1) > len(string2):
        return len(string1)
    return len(string2)

string1 = “hello”
string2 = “goodbye”

result = longest_string_length(string1, string2)
print(result)"
Optimize the given Python code by removing any redundant or unnecessary operations.,"s = """"
for i in range(0, 10):
    for x in range(0, 10):
        s += str(i) + str(x) + ''.join([str(y) for y in range(0, 10)])"
Create a method in Python to sum up all the elements of a given list.,"# sum_list function takes in a list and 
# returns the sum of the elements of the list
def sum_list(input_list):
  # Set sum to 0
  sum = 0
  
  # Iterate through the list and 
  # add each element to the sum
  for element in input_list:
    sum = sum + element
  
  # Return the sum
  return sum"
Generate a function for adding two numbers in Python.,"def add_two_numbers(a, b):
 return a + b"
Generate a method to remove all duplicates from a Python list.,"def removeDuplicates(in_list):
    out_list = []
    for item in in_list:
        if item not in out_list:
            out_list.append(item)
    return out_list

my_list = [4, 4, 5, 7, 8, 8, 1] 
print(removeDuplicates(my_list))"
Generate a python code to sort an array of numbers in descending order.,"def sort_array(arr): 
    arr.sort(reverse = True) 
    return arr"
Create a JSON object using Python that contains the following data:,"data = {
    'name': 'John',
    'age': 56,
    'city': 'New York'
    }"
Write a Python code to encode a given string using the Caesar cipher.,"def caesar_encrypt(string, shift_amount):
 encrypted_string = """"
 for i in range(len(string)):
  char = string[i]
  x = ord(char) + shift_amount
  encrypted_string += chr(x)
 
 return encrypted_string

encoded_string = caesar_encrypt(string, 3)
print(encoded_string) // Output: Khoor Zruog"
Create a class in Python to store student details with the name and age data.,"class Student:
    def __init__(self, name, age):
        self.name = name
        self.age = age"
Create a web scraper in Python using Selenium to extract the contents of a webpage.,"from selenium import webdriver

url = 'https://en.wikipedia.org/wiki/Python'

driver = webdriver.Chrome()
driver.get(url)

page_content = driver.page_source
 
driver.close()

# Process page_content"
Create a class in Python to represent a circle containing methods to calculate the area and circumference.,"class Circle:
    def __init__(self, radius):
        self.radius = radius

    def area(self):
        return 3.14 * self.radius * self.radius

    def circumference(self):
        return 2 * 3.14 * self.radius"
Generate an algorithm in Python that can classify any dataset having 3 classes.,"from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
 
def classify_dataset(X, y):
 X_train, X_test, y_train, y_test = train_test_split(X, y, random_state = 0)
 svm = SVC(kernel = 'linear', C = 0.1).fit(X_train, y_train)
 y_pred = svm.predict(X_test)
 return y_pred"
Design a data structure in python to store customer details with fast insert and search operations.,"class CustomerData:
  def __init__(self):
    self.customers = {}
    
  def insert(self, name, customer_details):
    self.customers[name] = customer_details
    
  def search(self, name):
    return self.customers.get(name)"
Rewrite the following Python program using recursion.,"def fib(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n-1) + fib(n-2)

print(fib(5))"
Create a basic function in Python to extract the first digit from a number.,"def firstDigit(num):
	return int(str(num)[0])

num = 2458
print(firstDigit(num)) # 2"
Write a Python program to count and print the occurrences of a character in a string.,"def count_char(string, char): 
  
    count = 0
    for i in string: 
        if(i == char): 
            count = count + 1
  
    return count"
Make a Python function that takes in three parameters and returns a boolean value.,"# This function checks if the sum of three numbers is even or odd
def is_sum_even(x, y, z): 
    sum = x + y + z 
    if (sum % 2 == 0): 
        return True
    else: 
        return False"
Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.,"import heapq
def expensive_items(items,n):
  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])
  return expensive_items"
Create a program in Python 3 which prints out a multiplication table of a given number.,"def create_multiplication_table(n):
 for i in range(1,11):
 print(f'{n} * {i} = {n * i}')

create_multiplication_table(9)

# Outputs:
# 9 * 1 = 9
# 9 * 2 = 18
# 9 * 3 = 27
# 9 * 4 = 36
# 9 * 5 = 45
# 9 * 6 = 54
# 9 * 7 = 63
# 9 * 8 = 72 
# 9 * 9 = 81 
# 9 * 10 = 90"
Write a python function to find the sum of fourth power of first n even natural numbers.,"def even_Power_Sum(n): 
    sum = 0; 
    for i in range(1,n + 1): 
        j = 2*i; 
        sum = sum + (j*j*j*j); 
    return sum; "
Create a Python program to convert a string to its equivalent unicode value.,"import unicodedata
 
#example string
s = ""hello""
 
#printing string to unicode
print(""The unicode value of '"" + s + ""' is: "" + str(ord(unicodedata.normalize('NFKD', s)[0])))
 
#output
#The unicode value of 'hello' is: 104"
Create a code in Python that takes two lists and returns a new list that contains the elements of both.,"def merge_lists(list1, list2):
  merged_list = list1 + list2
  return merged_list

merged_list = merge_lists(list1, list2)
print(merged_list)"
Design a rule-based system in Python to generate natural language questions.,"import re

def generate_question(sentence):
 tokens = re.findall('\w+', sentence)
 if tokens[0] == 'The':
  question = 'What is' + ' ' + ' '.join(tokens[1:]) + '?'
 else:
  question = 'What is the' + ' ' + ' '.join(tokens) + '?'
  
 return question"
Create a for-loop in Python to loop through the items in a list and print their elements.,"for name in names:
    print(name)"
Write a Python function to get the n-th number in the Fibonacci sequence.,"def fibonacci(n): 
    a = 0
    b = 1
    if n < 0: 
        print(""Incorrect input"") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2,n): 
            c = a + b 
            a = b 
            b = c 
        return b"
"Describe the algorithm to find the height of a binary tree in Python, using recursion.","def getHeight(root):
    if not root:
        return 0
    else:
        # Compute using recurssion
        leftHeight = getHeight(root.left)
        rightHeight = getHeight(root.right)

        # Return the overall height
        return max(leftHeight, rightHeight) + 1"
Create a function in Python to tokenize an English sentence.,"""""""
Tokenize an English sentence
""""""

import nltk

def tokenize(sentence):
    tokens = nltk.word_tokenize(sentence)
    return tokens

if __name__ == '__main__':
    sentence = ""This is a sentence.""
    print(tokenize(sentence))"
Create a Python list in which each element is a dictionary containing customer data.,"customers = [
    {
        'name': 'John',
        'age': 21
    },
    {
        'name': 'Minh',
        'age': 24
    },
    {
        'name': 'Linda',
        'age': 18
    }
]"
Create a data visualization in Python using Matplotlib.,"import matplotlib.pyplot as plt

x_values = [1, 2, 3, 4, 5]
y_values = [1, 8, 27, 64, 125]

# Plot x and y values
plt.plot(x_values, y_values)

# Give the plot a title
plt.title(""Plot of x*x"")

# Label the x and y axes
plt.xlabel('x')
plt.ylabel('x*x')

# Show the plot
plt.show()"
Develop an API call in Python to fech data from a website.,"import requests 

URL = ""www.example.com"" 
  
# defining a params dict for the parameters to be sent to the API 
PARAMS = { } 
  
# sending get request and saving the response as response object 
r = requests.get(url = URL, params = PARAMS) 
  
# extracting data in json format 
data = r.json() 
print(data)"
Create a function in Python that builds an object with the following properties.,"def build_object():
    obj = {
        ""firstName"": ""John"",
        ""lastName"": ""Smith"",
        ""age"": 40,
        ""address"": {
            ""street"": ""123 Main Street"",
            ""city"": ""San Francisco"",
            ""state"": ""CA"",
            ""zipCode"": ""94105""
        }
    }
    return obj
 
obj = build_object()
print(obj)"
Generate a python script to make HTTP request.,"import requests

url = 'https://www.example.com/'

response = requests.get(url)

if response.status_code == 200:
    print('Success!')
else:
    print('An error has occurred.')"
Develop a random number guessing game in Python,"import random 
 
num = random.randint(1,10)
guess = 0
attempts = 0
 
while guess != num and attempts < 3:
    guess = int(input(""Guess a number between 1 and 10: ""))
    attempts += 1
    if guess == num:
        print(""You guessed correctly in"", attempts, ""attempts"")
    elif guess > num:
        print(""Too High"")
    else:
        print(""Too Low"")
if guess != num:    
    print(""You failed to guess the number"")"
Develop a function to convert a string to an integer in Python.,"def str_to_int(input_str):
    num = 0
    for char in input_str:
        num = num * 10 + ord(char) - ord('0')
    return num"
Use the given data structure to create a Python dictionary that represents a contact list.,"dictionary = { 
""John Smith"": { 
    ""phone"": ""123-456-7890"", 
    ""address"": ""123 Main St."", 
    ""city"": ""Seattle"", 
    ""state"": ""WA""
} 
}"
Create a Python script to perform the following transformation on a given string?,"inp_str = ""HELLO WORLD""

result_str = ''

for c in inp_str:
    if c.isupper():
        result_str += c.lower()
    else:
        result_str += c.upper()
        
print(result_str)"
Create a Python script to download a web page from a URL.,"import requests

# Get the webpage
url = 'https://example.com'
r = requests.get(url)

# Save the webpage to a file 
with open('webpage.html', 'wb') as f:
 f.write(r.content)"
Compose a program to take in a string as an input and output only the unique characters in it.,"def unique_chars(string):
    unique_characters = set()
    for char in string:
        unique_characters.add(char)
    return unique_characters

print(unique_chars(""python""))"
Generate a code in Python that takes a string as input and removes duplicate characters from it,"st = ""DaSSmmoonnd""
st_list = list(st)
st_set = set(st_list)
st_nodupes = ''.join(st_set)
print(st_nodupes)"
Create a program in Python to print the following pattern,"def print_pattern(n):
    for i in range(1, n+1):
        for j in range(1, i+1):
            print(j, end="""")
        print("""")

print_pattern(5)"
Optimize the following Python code to make it run faster.,"def is_prime(num):
    if num < 2:
        return False
    if num == 2 or num == 3: 
        return True

    i = 2
    while i*i <= num: 
        if (num % i) == 0: 
            return False
        i += 1

    return True"
Implement a web scraping script in Python to extract the headers of a given HTML page.,"import requests
from bs4 import BeautifulSoup

url = 'https://www.example.com/' # example page

# Get the HTML page
response = requests.get(url)
data = response.text

# Parse the HTML page
soup = BeautifulSoup(data, 'html.parser')

# Extract the headers
headers = [header.text for header in soup.find_all(['h1', 'h2', 'h3', 'h4', 'h5', 'h6'])]

print(headers)"
"Develop a Python class to represent an employee with name, position and salary.","class Employee:
    def __init__(self, name, position, salary):
        self.name = name
        self.position = position
        self.salary = salary

john = Employee('John', 'Software Engineer', 6000)"
Generate a Python script that plots the relationship between two variables.,"import matplotlib.pyplot as plt

x = [1, 2, 3, 4, 5]
y = [2, 4, 6, 8, 10]

plt.plot(x, y)
plt.xlabel(""x"")
plt.ylabel(""y"")
plt.title(""Relationship between x and y"")
plt.show()"
Create a program in Python to count the number of elements of a given list.,"def element_count(list):
    return len(list)

list = ['This', 'is', 'a', 'list']
print(element_count(list))"
Define an iterator using a Python class.,"class MyIterator:
  def __init__(self, data):
    self.data = data
    self.index = 0
  
  def __iter__(self):
    return self
  
  def __next__(self):
    if self.index >= len(self.data):
      raise StopIteration
    item = self.data[self.index]
    self.index += 1
    return item

  def __len__(self):
    return len(self.data)"
Rewrite the following pseudocode in Python,"def Multiply(a, b):
    product = 0
    i = 0 
    while i < b:
        product = product + a
        i = i + 1
    return product"
Create a class in Python that implements both the Comparator and Iterable interfaces.,"class SortedList(object): 
    def __init__(self, data): 
        self.data = data   
        self.data.sort() # Sort the data when initializing 
   
    def __iter__(self): 
        for item in self.data: 
            yield item 
   
    def __lt__(self, other): 
        return self.data < other"
Design a Python program to extract the duplicate elements from an integer array.,"def extractDuplicates(nums): 
    result = [] 

    for i in range(len(nums)): 
        k = i + 1 
        for j in range(k, len(nums)): 
            if nums[i] == nums[j] and nums[i] not in result: 
                result.append(nums[i]) 
  
    return result"
Create a program in Python that removes duplicates from a given array.,"def remove_duplicates(array):
    new_array = []
    for element in array:
        if element not in new_array:
            new_array.append(element)
    return new_array"
Design a Python Class for a Student and provide a constructor for creating objects of that class.,"class Student:
    def __init__(self, firstName, lastName, age):
        self.firstName = firstName
        self.lastName = lastName
        self.age = age"
Construct a URL routing program in Python using basic variables and lists.,"# Define a list of routes
routes = [
    ('/', 'homepage'), 
    ('/about', 'aboutpage'), 
    ('/contact', 'contactpage')
]

# Define a function to match the route and 
# get the name of the page
def match_route(route):
    for url, page in routes:
        if url == route:
            return page

# Test the function
result = match_route('/')
print(result)"
Write a Python program to translate a string into pig latin.,"def toPigLatin(word):
    vowels = [""a"",""e"",""i"",""o"",""u""]
    first_letter = word[0]
    if first_letter in vowels:
        modified_word = word + ""way""
    else:
        modified_word = word[1:] + first_letter + ""ay""
    return modified_word

result = toPigLatin(""Hello"")
print(result)"
Generate a Python script to visualize a dataset of four columns.,"import matplotlib.pyplot as plt
 
# Create the data
x = [1, 2, 3, 4]
y1 = [2, 4, 6, 8]
y2 = [3, 6, 9, 12]
 
# Plot the data
plt.plot(x, y1)
plt.plot(x, y2)
 
# Add a title
plt.title(""Two Lines on One Graph"")
 
# Add X and y Label
plt.xlabel('X Axis')
plt.ylabel('Y Axis')
 
# Add a legend
plt.legend(['Line1', 'Line2'])
 
# Show the plot
plt.show()"
Create a function in Python to return the length of the longest word in a list of words.,"def findLongestWordLength(words):
  longest_length = 0
  for word in words:
    if len(word) > longest_length:
      longest_length = len(word)
  return longest_length

longest_word_length = findLongestWordLength([""cat"", ""longestword"", ""dog"", ""night""])
print(longest_word_length)"
Create a program in Python to compare the elements of two given arrays and return the number of matches.,"def count_matches(arr1, arr2):
    count = 0
    for i in arr1:
        if i in arr2:
            count += 1
    return count

print(count_matches(arr1, arr2))"
Can you make a Python program to sort an array of integers from highest to lowest?,"def sort_highest_to_lowest(arr):
    sorted_arr = sorted(arr, reverse = True)
    return sorted_arr

arr = [6, 2, 8, 3, 9]
sorted_arr = sort_highest_to_lowest(arr)
print(sorted_arr)"
Enhance the following python function to rank elements of the given list in descending order.,"def my_sort(items):
    items.sort(reverse=True)"
Create a Python program to retrieve the list of elements in a given set.,"def get_set_elements(s):
    return list(s)

my_set = {1, 2, 3, 4}
result = get_set_elements(my_set)
print(result) # Outputs: [1, 2, 3, 4]"
Develop a Python program to test a condition,"def test_gt_5(num):
    return num > 5"
Create a sorting algorithm in Python that sorts a random list of integers in ascending order.,"def sort(lst): 
    for i in range(len(lst)): 
        min_index = i 
        for j in range(i+1, len(lst)): 
            if lst[min_index] > lst[j]: 
                min_index = j 
  
        lst[i], lst[min_index] = lst[min_index], lst[i] 
  
list = [45, 33, 38, 10, 49] 

sort(list) 

print(list)"
Design a Fibonacci sequence calculator in Python.,"def fibonacci(n):
 if n == 0:
 return 0
 elif n == 1:
 return 1
 else:
 return fibonacci(n-1) + fibonacci(n-2)

# Main Program
n = int(input(""Enter number of terms: ""))

for i in range(n):
 print(fibonacci(i), end="" "")"
Design a class in Python to represent a collection of data points.,"class DataPointCollection:
    def __init__(self, data_points=[]):
        self.data_points = data_points

    def add_data_point(self, data_point):
        self.data_points.append(data_point)

    def get_data_points(self):
        return self.data_points"
What is the size of the memory required by a given string in Python?,"The size of the memory required for the string ""Hello World!"" is 12 bytes."
Fill the given syntax tree to generate a valid python code,"def initial_value():
    return 0"
Create an algorithm in Python to find the index of an element in an array.,"def indexFinder(arr, target): 
    for i in range(len(arr)):
        if arr[i] == target:
            return i
    return -1

arr = [1, 2, 3, 4]
target = 3

print(""Index of % d is % d"" %(target, indexFinder(arr, target)))"
Generate a function in Python that displays the Fibonacci sequence for a given value.,"def fibonacci(n):
 a, b = 0, 1
 result = []
 
 while a < n:
 result.append(a)
 a, b = b, a + b

 return result

print(fibonacci(n))"
Create a command line tool that takes a string argument and prints the reversed version of that string.,"import sys

def reverse_string(string):
 return string[::-1]

def main():
 if len(sys.argv) != 2:
 print(""Usage: python reverse_string.py <string>"")
 return

 print(reverse_string(sys.argv[1]))

if __name__ == ""__main__"":
 main()"
Build an algorithm in Python for finding the sum of all the odd numbers in a given array.,"def sumOddNumbers(arr):
    sum = 0
    for num in arr:
        if num % 2 != 0:
            sum += num
    return sum

arr = [1, 2, 3, 4, 5, 6]
print(sumOddNumbers(arr))"
Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.,"import re 
def match(text): 
		pattern = '[A-Z]+[a-z]+$'
		if re.search(pattern, text): 
				return('Yes') 
		else: 
				return('No') "
Write a function to implement binary search in Python.,"def binary_search(sorted_list, item):
    low = 0 
    high = len(sorted_list) - 1

    while low <= high:
        mid = (low + high) // 2
        guess = sorted_list[mid]
        if guess == item:
            return mid
        if guess > item:
            high = mid - 1
        else:
            low = mid + 1
    return None"
Generate a python list of all prime numbers between m and n.,"def prime_range(m, n):
    primes = []
    for num in range(m, n+1):
        for i in range(2, num):
            if (num % i) == 0:
                break
        else:
            primes.append(num)
    return primes

prime_range(10, 20) # [11, 13, 17, 19]"
Convert the following Python program to a JavaScript program.,"function factorial(n) {
   if (n === 0) {
      return 1;
   } else {
      return n * factorial(n - 1);
   }
}"
Create a python script that evaluates a binary expression.,"def evalBinaryExpr(expr): 
    return eval(expr) 
  
print(evalBinaryExpr(""1 + 0""))"
"Given a list of integers and Boolean values, write a classifier program in Python to predict whether the input is an integer or a Boolean value.","def classifyValue(value):
    if isinstance(value, bool):
        return ""Boolean""
    elif isinstance(value, int):
        return ""Integer""
    else:
        return ""Other"""
Write a python program to print the Fibonacci series upto n terms.,"def fibonacci_series(n):
    if n==0:
        return 0
    elif n==1:
        return 1
    else: 
        return fibonacci_series(n-1) + fibonacci_series(n-2)

for i in range(6):
    print(fibonacci_series(i), end=', ')"
Create a program in Python that will find the smallest number in a list of numbers.,"def find_smallest_number(numbers):
    smallest = numbers[0] 
    for num in numbers:
        if num < smallest:
            smallest = num
    return smallest

print(find_smallest_number([5, 4, 12, 17, 9]))"
"Write a Python program to generate a n -by- n matrix of ones and zeros, with the ones in the diagonal and the rest set to zero.","def generate_matrix(n):
    matrix = []
    for i in range(n):
        row = [0] * n
        for j in range(n):
            if i == j:
                row[j] = 1
        matrix.append(row)
    return matrix"
Write a function to convert a string to a list.,"def string_to_list(string): 
    lst = list(string.split("" "")) 
    return lst"
Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.,"def difference(n) :  
    S = (n*(n + 1))//2;  
    res = S*(S-1);  
    return res;  "
Design a Python function which takes in a list of integers as an input and returns a tuple containing the number of positive and negative entries in the list.,"def countPosAndNeg(lst):
 positive = 0
 negative = 0
 for num in lst:
  if num >= 0:
   positive += 1
  else:
   negative += 1
 return (positive, negative)"
Write a Python program to fetch the contents of a web page.,"import urllib.request

# Pass in the URL of the web page
url = 'http://example.com/index.html' 

# Fetch the web page
response = urllib.request.urlopen(url)

# Read and print the contents of the web page
contents = response.read()
print(contents)"
Write a function to find n-th rencontres number.,"def binomial_coeffi(n, k): 
	if (k == 0 or k == n): 
		return 1
	return (binomial_coeffi(n - 1, k - 1) 
		+ binomial_coeffi(n - 1, k)) 
def rencontres_number(n, m): 
	if (n == 0 and m == 0): 
		return 1
	if (n == 1 and m == 0): 
		return 0
	if (m == 0): 
		return ((n - 1) * (rencontres_number(n - 1, 0)+ rencontres_number(n - 2, 0))) 
	return (binomial_coeffi(n, m) * rencontres_number(n - m, 0))"
Design a web-crawler in Python to collect all the URLs in a given website.,"import requests
from bs4 import BeautifulSoup

def webcrawler(url):
    page = requests.get(url)
    soup = BeautifulSoup(page.content, 'html.parser')

    for url in soup.find_all('a'):
        url = url.get('href')
        if url is not None and url not in visited:
            visited.add(url)
            print(url)
            webcrawler(url)
            
webcrawler('https://www.example.com')"
"Design a python database schema to store data describing a person's name, age, and address.","import sqlite3

# Create database
db = sqlite3.connect('test.db')

c = db.cursor() 
    
# Create table
c.execute('DROP TABLE IF EXISTS person')

c.execute('''
        CREATE TABLE person(
        name TEXT,
        age INTEGER,
        address TEXT
        )
        ''')"
Create a machine learning model in Python to predict the age of a person from their height and weight.,"import numpy as np
from sklearn.linear_model import LinearRegression

# Creating the X and Y datasets 
x = []
y = []

# Adding the data
x.append([59, 140])
y.append(30)

x = np.array(x)
y = np.array(y)

# Creating and fitting the model 
model = LinearRegression().fit(x, y)"
Create an algorithm in Python that takes a number n as its input and returns the nth fibonacci number.,"def Fibonacci(n): 
	if n<0: 
		print(""Incorrect input"") 
	# First Fibonacci number is 0 
	elif n==1: 
		return 0
	# Second Fibonacci number is 1 
	elif n==2: 
		return 1
	else: 
		return Fibonacci(n-1)+Fibonacci(n-2) 
		
# Driver Program 
 
print(Fibonacci(9))"
Write a Python program to simulate a dice roll and print the result.,"import random

def roll_dice():
    dice_roll = random.randint(1, 6)
    print(""You rolled a"", dice_roll)

roll_dice()"
Write a function to sort a given list of elements in ascending order using heap queue algorithm.,"import heapq as hq
def heap_assending(nums):
  hq.heapify(nums)
  s_result = [hq.heappop(nums) for i in range(len(nums))]
  return s_result"
Design a program in python to find all three digit Armstrong numbers in the range of 0 to 999.,"def find_armstrong_numbers():
    armstrong_nums = []
    for num in range (0, 1000):
        digits_sum = 0
        temp = num
        
        while temp > 0:
            digit = temp % 10
            digits_sum += digit ** 3
            temp //= 10

        if num == digits_sum:
            armstrong_nums.append(num)
    return armstrong_nums"
Write a Python program to check how many times a given element occurs in a list.,"def count_element_occurrence(lst, target):
 count = 0
 for element in lst:
     if element == target:
         count += 1
 return count"
Design an algorithm to solve the Towers of Hanoi puzzle with n-disks using Python.,"def move_towers(n, source, target, middle):
  if n == 1:
    print('move disk from {} to {}'.format(source, target))
  else:
    move_towers(n - 1, source, middle, target)
    move_towers(1, source, target, middle)
    move_towers(n - 1, middle, target, source)"
Create a class in Python that generates and prints a random string of 10 characters.,"import random

class RandomString:
    def __init__(self):
        self.random_string = """"

    def generate_string(self):
        for i in range (10):
            self.random_string += chr(random.randint(65, 122))
        return self.random_string

    def print_string(self):
        print(self.random_string)

str1 = RandomString()
str1.generate_string()
str1.print_string()"
Generate a Python program that takes one string and returns the most frequently used character from the string.,"def most_frequent_character(string): 
    counts = dict() 
    max = -1
    character = '' 

    for char in string: 
        if char in counts: 
            counts[char] += 1
        else: 
            counts[char] = 1

        if counts[char] > max: 
            max = counts[char] 
            character = char 
    return character"
Write a function to find the occurrences of n most common words in a given text.,"from collections import Counter
import re
def n_common_words(text,n):
  words = re.findall('\w+',text)
  n_common_words= Counter(words).most_common(n)
  return list(n_common_words)"
Create a Python program to find the sum of the first n numbers.,"def calculate_sum(n):
    """"""Function to calculate the sum of the first n numbers.""""""
    sum = 0
    while n > 0:
        sum = sum + n
        n = n - 1
    return sum

if __name__ == ""__main__"":
    n = 5 
    result = calculate_sum(n)
    print(""The sum is"", result)"
Generate a Python class with a constructor that initializes two variables - a list and a dictionary.,"class MyClass:
    def __init__(self):
        self.list = []
        self.dictionary = {}"
Create a python 3 function to encode the input string.,"def encode_string(s):
    # Function to encode a string
    encoded_string = ''
    for c in s:
        encoded_string += hex(ord(c)).upper()[2:]
    return encoded_string"
Create a Python program to generate a list from two given lists using a list comprehension.,"list1 = [1, 2, 3]
list2 = [4, 5, 6]

result = [x + y for x in list1 for y in list2]
print(result)"
Generate an algorithm in Python that can take in a list of integers and sort them in ascending order.,"def sort_ascending(nums):
    n = len(nums)
    for i in range(n):
        for j in range(0, n-i-1):
            if nums[j] > nums[j+1] :
                nums[j], nums[j+1] = nums[j+1], nums[j] 
    return nums"
Write an algorithm in Python to merge two sorted lists.,"def merge_list(list_1, list_2):
  merged_list =[]
  while list_1 and list_2:
    if list_1[0] < list_2[0]:
      merged_list.append(list_1.pop(0))
    else:
      merged_list.append(list_2.pop(0))
  merged_list.extend(list_1 if list_1 else list_2)
  return merged_list"
Create a Python program that can print out a sentence in reverse using recursion.,"def reverse_sentence(sentence): 
  
    # base condition for recursion
    if len(sentence) == 0: 
        return """" 
  
    # calling reverse_sentence recursively
    return reverse_sentence(sentence[1:]) + sentence[0] 
  
# driver code 
sentence = ""Geeks For Geeks""
print(reverse_sentence(sentence)) 

# Output: skeeG roF skeeG"
Write a Python program to evaluate a mathematical expression given as string.,"expression = ""2 + 3 * 5""
result = eval(expression)
print(result)"
Compose a piece of code to print the length of a given string.,"string = ""Python""
print(""Length of the given string is:"", len(string))"
"Create a command line tool in Python that takes input from the user and prints a message. The message should be ""You entered <input>.""","import sys

def main():
 args = sys.argv[1:]

 if args and len(args) == 1:
 print('You entered {}.'.format(args[0]))
 else:
 print('Please provide a single argument.')

if __name__ == ""__main__"":
 main()"
Create a Python function to find the maximum number from a list of non-negative integers.,"def find_max(list): 
  max_num = 0
  for i in list: 
    if i > max_num: 
      max_num = i
  
  return max_num

list = [1, 3, 12, 5, 8, 10]
max_num = find_max(list)
print(""Maximum number is:"", max_num)"
Create a program in Python which can classify whether an animal is a bird or a mammal.,"def classify(animal):
    if animal == ""hummingbird"":
        return ""Bird"" 
    else:
        return ""Mammal"""
Generate a Python script that takes a number and calculates its factorial.,"def factorial(n): 
    fact = 1
    for i in range(1,n+1): 
        fact *= i
    return fact
  
num = 4
print(""Factorial of"",num,""is"",factorial(num))"
Create a Python program to convert a given date string to a datetime object and return the week number.,"import datetime
def get_week_number(date_string):
    d = datetime.datetime.strptime(date_string, '%Y-%m-%d')
    return d.isocalendar()[1]  # isocalendar() is used to get the ISO week number"
Compress the following string using the gzip library in Python.,"import gzip

string = ""This is a sample string to compress.""
compressed_string = gzip.compress(string.encode('utf-8'))
print(compressed_string)"
Construct a program in Python that computes the sum of 3rd and 7th elements of a list.,"def sum_elements(list):
    Sum = list[2] + list[6]
    return Sum
print(sum_elements(list))"
Create a Python program that takes a list of words given by the user and prints out a sentence constructed from these words.,"words = ['The', 'quick', 'brown', 'fox']

sentence = "" "".join(words)
print(sentence)
# Output: The quick brown fox"
Write a python program to calculate the discount rate based on a given purchase price and discount amount.,"discount_rate = 10/100
discount = purchase_price * discount_rate

purchase_price = 100
discount_rate = 10/100
discount = purchase_price * discount_rate

print(""The discount is: ${}"".format(discount))"
"Using the list and additional libraries, write a python program to calculate the sum of all elements in the list.","#Importing the libraries
import numpy as np

#Defining the list
list = [2, 3, 5, 8, 9]

#Calculating the sum
sum = np.sum(list)

#Printing the result
print(sum)"
Write a Python program to format a given string with a desired length.,"def format_string(string, length):
  format_string = string.ljust(length)
  return format_string

string = ""GPT-3""
length = 10
result = format_string(string, length)
print(result)  # -> GPT-3    (9 spaces added after GPT-3)"
Create a function in Python to find the maximum and minimum of a list of numbers.,"def find_max_min(numbers):
    max_num = float(""-inf"")
    min_num = float(""inf"")
    for num in numbers:
        if num > max_num:
            max_num = num
        elif num < min_num:
            min_num = num
    return (max_num, min_num)"
Construct a Python program to calculate the age in years of a person given their birthdate.,"import datetime

def calculate_age(birthdate):

    today = datetime.date.today()
    current_year = today.year

    age = current_year - birthdate.year

    if ((birthdate.month, birthdate.day) > (today.month, today.day)):
        age -= 1
    
    return age

birthdate = datetime.date(1996, 6, 11)
age = calculate_age(birthdate)
print(age) # 24"
Write a Python program that prints the time in a given timezone.,"from datetime import datetime
import pytz

def print_time(tz):
  timezone = pytz.timezone(tz)
  print(datetime.now(timezone).strftime(""%H:%M:%S""))

print_time(""UTC+11:00"")"
Create a Python program to sort an array of strings alphabetically.,"def alphabetical_sort(arr):
 arr.sort()
 return arr

arrOfStrings = [""cat"", ""elephant"", ""dog"", ""bird""]
sorted_arr = alphabetical_sort(arrOfStrings)
print(sorted_arr)  # Output: [""bird"", ""cat"", ""dog"", ""elephant""]"
Create a Python class called Rectangle that stores the length and width.,"class Rectangle:
    def __init__(self, length, width):
        self.length = length
        self.width = width

    def area(self):
        return self.length * self.width"
Write a function in Python to print the top n elements of an array.,"def max_n_elements(arr, n):
    res = []
    for i in range(n):
        max_val = max(arr)
        res.append(max_val)
        arr.remove(max_val)
        
    return res
    
arr = [2, 3, 4, 5, 1] 
top_n = 3
print(max_n_elements(arr, top_n))"
Write a Python program to generate a random password with length x.,"import string
import random

def generate_password(length):
    characters = string.ascii_letters + string.digits
    password = """"
    for i in range(length):
        password += random.choice(characters)
    return password

result = generate_password(8)
print(result)"
Design a function in Python to classify all the numbers in a list as even or odd.,"def classify_odd_even(nums):
    output = []
    for n in nums:
        if n%2 == 0:
            output.append('even')
        else:
            output.append('odd')
    return output

if __name__ == '__main__':
    print(classify_odd_even(my_list))"
Develop a web crawler to fetch data for a given keyword.,"A web crawler can be developed using programming languages such as Python, JavaScript, etc. It will contain code to crawl the web based on the given keyword, parse the data and store it."
Write an optimized function in Python to check if a given number is a prime number.,"def is_prime(n):
    if n <= 1:
        return False
    if n == 2:
        return True
    if n > 2 and n % 2 == 0:
        return False

    i = 3
    while i * i <= n:
        if n % i == 0:
            return False
        i += 2

    return True"
Write a function to check whether the given month name contains 30 days or not.,"def check_monthnumber(monthname3):
  if monthname3 ==""April"" or monthname3== ""June"" or monthname3== ""September"" or monthname3== ""November"":
    return True
  else:
    return False"
"Given a Python script,rewrite it in Java.","public int add(int x, int y) {
    int z = x + y;
    return z;
}"
Debug the following Python program to print the given output.,"a = [3,4,6,2,1]
for x in a:
 print(x)
a.sort() 
for x in a:
 print(x) 

Output:
1
2
3
4
6"
Create a web server using Python.,"import http.server
import socketserver

PORT = 8000

Handler = http.server.SimpleHTTPRequestHandler

with socketserver.TCPServer(("""", PORT), Handler) as httpd:
    print(""serving at port"", PORT)
    httpd.serve_forever()"
Write a python program to compute the Gini index for a given data set.,"def gini_index(data):
    data_set_size = len(data)
    data_sum = sum(data)

    gini = 0.0
    for val in data:
        gini += (val/data_sum)**2
    
    return 1 - gini

print(gini_index([10, 3, 5, 7]))"
Create a Python program to print the numbers from 1 to 10 using a for loop.,"for i in range(1,11):
    print(i)"
Generate a Python function which takes two strings as arguments and returns the number of letters they have in common.,"def number_of_common_letters(s1, s2):
    common_letters = 0
    for c in s1:
        if c in s2:
            common_letters += 1
    return common_letters"
Create a python script to pass command line arguments to a function.,"# Pass command line arguments to a function

import sys
 
def command_line_args():
    args = []
    # Loop over the command line arguments
    for arg in sys.argv[1:]:
        args.append(arg)
    return args
 
args = command_line_args()
print(args)"
Write a function to replace blank spaces with any character in a string.,"def replace_blank(str1,char):
 str2 = str1.replace(' ', char)
 return str2"
Optimize a Python program to reverse an array in place.,"def reverse_in_place(arr):
    low = 0
    high = len(arr) - 1
    while low < high:
        arr[low], arr[high] = arr[high], arr[low]
        low += 1
        high -= 1
    return arr

arr = [1, 2, 3, 4]
print(reverse_in_place(arr))"
Create a python script to sort the numbers in an array,"def sort_array(arr):
    for i in range(0, len(arr)-1):
        for j in range(0, len(arr)-i-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
    return arr"
Write a Python closure that prints the sum of two numbers when called.,"def create_add_closure():
    def adder(a, b):
        return a + b
    return adder

add_func = create_add_closure()
print(add_func(2, 3)) # Output: 5"
"Using the given data, write a Python function to calculate the median of the numbers.","def calculate_median(data):
    data.sort()
    if len(data) % 2 == 0:
        first_num = data[int(len(data) / 2) - 1]
        second_num = data[int(len(data) / 2)]
        median = (first_num + second_num) / 2
    else:
        median = data[int((len(data) - 1) / 2)]
    return median

result = calculate_median(data)
print(result)"
Devise a Python program to output the multiples of 7 up to a given number.,"def multiplesOf7(number): 
    for i in range(1,number+1): 
        if(i % 7 == 0): 
            print(i, end ="" "")"
Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.,"def matrix_to_list(test_list):
  temp = [ele for sub in test_list for ele in sub]
  res = list(zip(*temp))
  return (str(res))"
Design an algorithm in Python to perform binary search.,"def binary_search(arr, target):
    start = 0
    end = len(arr) - 1
    while start <= end:
        mid = (start + end) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] > target:
            end = mid - 1
        else:
            start = mid + 1
    return -1"
Write a function in Python for detecting outliers on a given data set.,"import numpy as np

def detect_outliers(data):
 q75, q25 = np.percentile(data, [75 ,25])
 iqr = q75 - q25
 
 cut_off = iqr * 1.5
 lower, upper = q25 - cut_off, q75 + cut_off
 
 outliers = [x for x in data if x < lower or x > upper]
 return outliers"
Generate an algorithm in Python to return the common elements in two unsorted arrays.,"def commonElements(A, B):
    commonElements = []
    for i in A: 
        if i in B and i not in commonElements:
            commonElements.append(i) 
    return commonElements

A = [2, 3, 5, 7, 8]
B = [3, 5, 7, 9, 10]
print(commonElements(A, B))
# Output: [3, 5, 7]"
Generate a program in Python to convert all characters of a string in lowercase.,"def to_lower(string):
    return string.lower()"
Formulate a regular expression in Python that matches words that starts with any two letters followed by two digits.,"regex = r""^[a-zA-Z]{2}\d{2}"""
Build a Python script for deleting all characters from a string,"newString = string.replace("""", """")
print(newString)"
Convert the following code from python 2.x to python 3.x.,"import csv

with open(""filename.csv"", 'r', newline='') as f:
    csvReader = csv.reader(f)"
Create a Python program to identify words of length k in a given string.,"def find_words_of_length_k(sentence, k):
    words = sentence.split(' ')
    words_of_length_k = []
    for word in words:
        if len(word) == k:
            words_of_length_k.append(word)
    return words_of_length_k

sentence = ""This is a program to identify words of length 3""
k = 3
print(find_words_of_length_k(sentence, k))"
Develop a function to replicate strings in Python.,"def replicate_string(string, n):
    """"""This function takes in a string and an integer value n, 
    and returns a string with n replications of the input string.
    """"""
    return string * n"
Write a Python program to set the difference between two sets.,"def set_difference(Set1, Set2):
    return set(Set1) - set(Set2)

result = set_difference({1, 2, 3, 4, 5}, {3, 4, 5, 6, 7})
print(result)"
Create a Python program to find and print all pairs of numbers from a given array of integers whose sum is equal to a given number.,"array = [3, 4, 2, 8, 5, 6]
sum = 10

def find_pair(array,sum):
 for i in range (len(array)-1):
  for j in range (i+1, len(array)):
   if array[i] + array[j] == sum:
    print(""Pair found:"",array[i], array[j])

find_pair(array,sum)"
Write a Python function to generate a random string of length 8 containing alphanumeric characters.,"import string
import random

def generate_random_string(length):
 chars = string.ascii_letters + string.digits
 return ''.join(random.choice(chars) for _ in range(length))"
Write a Python function for converting a Fahrenheit temperature to Celsius.,"def fahrenheit_to_celsius(temperature):
    celsius = (temperature - 32) * 5/9
    return celsius"
Evaluate the following Python code and suggest how to improve it.,"def cumulative_sum(numbers):
  result = 0
  for number in numbers:
    result += number
  return result
  
# Improvements:
# Calculate the sum using a list comprehension to increase readability
result = sum([number for number in numbers])
return result"
Arrange the given Python code in the correct order so that it prints the square of the numbers from 0 to 10.,"for n in range(11):
 n = n * n
 print(n)"
Create a function in Python to convert a binary string to a decimal number.,"def binary_to_decimal(binary):
    decimal = 0
    for digit in binary:
        decimal = decimal*2 + int(digit)
    return decimal"
Implement a Python function that will take a dictionary as the argument and return a new dictionary with the key and its value reversed.,"def reverse_dict(d):
 new_dict = {}
 for key, value in d.items():
 new_dict[value] = key
 return new_dict

d = {'a':1, 'b':2, 'c':3}
print(reverse_dict(d))
# {1:'a', 2:'b', 3:'c'}"
Convert a given Python program to a C# program.,"public int Power(int x, int y)
{
    if (y == 0)
    {
        return 1;
    }
    else
    {
        return x * Power(x, y - 1);
    }
}"
"Implement a function in Python that takes a 2D Numpy array and returns a dictionary whose keys are the unique values in the array, and the values are the number of occurrences for each of the unique values.","import numpy as np

def count_occurrences(arr):
    result = {}
    for value in np.unique(arr):
        result[value] = np.sum(arr == value)
    return result

arr = [[1,2,3], [2,3,4], [2,1,3]]
print(count_occurrences(arr))"
Generate a Python code to multiply all the items of a given list.,"product = 1
for value in [2, 3, 4]:
 product *= value
print(product)"
Write a code block in Python that checks if an input is an integer or not.,"def is_int(n):
  try:
    int(n)
    return True
  except ValueError:
    return False"
Develop a python function to locate a specific element in an array,"def find_element(arr, target): 
    for i in range(len(arr)): 
        if arr[i] == target: 
            return i 
    return -1"
Implement a real-time chat application in Python using websockets.,"import websockets

users = []

async def consumer(websocket):
 while True:
 message = await websocket.recv()
 
 for user in users:
 await user.send(message)

async def producer(websocket, path):
 users.append(websocket)
 await consumer(websocket)

start_server = websockets.serve(producer, 'localhost', 8000)

asyncio.get_event_loop().run_until_complete(start_server)
asyncio.get_event_loop().run_forever()"
Write a function in Python for encrypting a given string with a given key.,"import base64
from Crypto.Cipher import AES

def encrypt(key, message):
 cipher = AES.new(key.encode(), AES.MODE_ECB)
 padded_msg = message.encode() + ((16 - len(message) % 16) * '{'.encode())
 encrypted = cipher.encrypt(padded_msg)
 encoded = base64.b64encode(encrypted)
 return encoded.decode()

encrypt('mykey123', 'My secret message')"
"Write a Python function that takes two integers, n and base, as parameters and returns a string representation of the base-n number.","def base_n(n, base):
    result = """"
    while n != 0:
        result += str(n % base)
        n //= base
    return result[::-1]  # Reverse the string"
Write a function in Python that takes in two strings and returns true if both strings have the same letter counts.,"def isPermutation(s1, s2):
 s1_dict = {}
 s2_dict = {}
 for c in s1:
  if c in s1_dict:
   s1_dict[c] += 1
  else:
   s1_dict[c] = 1
 for c in s2:
  if c in s2_dict:
   s2_dict[c] += 1
  else:
   s2_dict[c] = 1
 
 return s1_dict == s2_dict"
Write a function to replace characters in a string.,"def replace_char(str1,ch,newch):
 str2 = str1.replace(ch, newch)
 return str2"
Write a function in Python Web scripting to update the value of a given list.,"def update_list(my_list, new_value):
    my_list[-1] = new_value
    return my_list

my_list = [1,2,3]
new_value = 5

updated_list = update_list(my_list, new_value)
print(updated_list)"
Edit the existing Python code to output two separate lines.,"print(""Hello"")
print(""World"")"
Create a Python script to check if a given word or phrase is a palindrome.,"def is_palindrome(word):
    word_list = list(word)
    if word_list == word_list[::-1]:
        return True
    else:
        return False

result = is_palindrome('madam')
print(result)"
Extend the previous Python function to flip the order of the elements in the array.,"def reverse_list(numbers):
 return numbers[::-1]

def flip_array_order(numbers):
 new_list = []
 for i in range(0, len(numbers)):
  new_list.append(numbers[len(numbers) - i - 1])
 return new_list"
Write a python function to calculate an exponential series,"def exponential_series(x,n):
    sum = 0
    for i in range(n+1):
        sum += x ** i
    return sum"
"Write a function in Python that takes two lists of strings as input, and returns a list of all strings that are common to both lists.","def common_words(list_1, list_2):
 result = [word for word in list_1 if word in list_2]

 return result

# sample usage
common_words(list_1, list_2) # would return ['John', 'George', 'Ringo']"
Suggest a completion for the following python funtion which calculates the sum of two numbers.,"def sum_of_nums(num1, num2):
    return num1 + num2

example_sum = sum_of_nums(2, 3)
print(""Sum of two numbers is:"", example_sum)"
Write a Python script to parse a JSON object.,"import json

json_data = '{""name"":""John"", ""age"":30, ""city"":""New York""}'

obj = json.loads(json_data)

print(""Name:"", obj[""name""])
print(""Age:"", obj[""age""])
print(""City:"", obj[""city""])"
Write a Python program to count the number of elements which are greater than the given number?,"list1 = [1, 2, 3, 4, 5] 
number = 3

#initialize a count
count = 0

#iterate through the list and count the elements that are greater than the given number
for num in list1:
    if num > number:
        count += 1

print(""Number of elements greater than the given number:"", count)"
Design a Python program to return the largest and smallest elements from a given list.,"def largest_smallest(array):
    smallest = array[0]
    largest = array[0]

    for element in array:
        if element > largest:
            largest = element
        elif element < smallest: 
            smallest = element

    return (smallest, largest)

largest_smallest([7, 9, 5, 4, 8, 1]) => (1, 9)"
Compute the mean squared error (MSE) of a linear regression model in Python.,"def mean_squared_error(y_true, y_pred):
    squared_errors = (y_true - y_pred)**2 # calculation of squared errors 
    mse = sum(squared_errors) / len(y_true) # mean of squared errors  
    return mse"
Write a Python code snippet to print Hello multipe times as per a given number.,"for i in range(number):
    print(""Hello"")"
Generate a python code to create a list containing tuples of two elements each.,"my_list = [(x, y) for x in range(5) for y in range(5)]
print(my_list)"
Write a code to fetch the contents of a website using Python,"# Import the necessary packages 
import requests 
  
# Make an API call and store the response 
url = 'https://example.com/'
r = requests.get(url) 
  
# Extract the content of the response 
html_content = r.content 
  
# Print the response 
print(html_content)"
Design an algorithm in Python to print out binary numbers between 1 and N.,"def print_binary(n):
 if n == 0:
  return
 
 print_binary(n-1)
 print(bin(n))
 
print_binary(3)
 
# Output: 
# 0b1
# 0b10
# 0b11"
Write a function to get the length of a complex number.,"import cmath
def len_complex(a,b):
  cn=complex(a,b)
  length=abs(cn)
  return length"
Write a function to convert a list to a tuple.,"def list_tuple(listx):
  tuplex = tuple(listx)
  return tuplex"
Use the provided data set to generate a bar chart in Python.,"import matplotlib.pyplot as plt

x_values = [1, 2, 3, 4]
y_values = [10, 12, 7, 5]

plt.bar(x_values, y_values)
plt.title('Bar Chart')
plt.xlabel('X-axis')
plt.ylabel('Y-axis')
plt.show()"
Create an algorithm in Python to determine if a set of numbers are all unique.,"def is_unique(num_list):
    return len(num_list) == len(set(num_list))"
Develop a python program to print allPrime Numbers between 1 and 50.,"# Function to check prime or not
def isPrime(n): 
    result = True
  
    # check if number is divisible from 2 to n-1 or not
    for i in range(2, n): 
        if n%i == 0: 
            result = False
            break
          
    return result 
  
# printing prime numbers between 1 to 50
for n in range(1, 51):
    if isPrime(n): 
        print(n)"
Generate a Python function to calculate the absolute value of a number.,"def absolute_value(num):
    if num < 0:
        return -num
    else:
        return num"
Develop a Python program to filter out duplicate words in a given string.,"def filter_duplicate_words(original_string):
  words = original_string.split("" "")
  filtered_words = []
  for word in words:
    if word not in filtered_words:
      filtered_words.append(word)
  return ' '.join(filtered_words)"
Create a Python program to parse a list of strings and print the words with odd length.,"list = ['abc', 'hello', 'world']

for word in list:
    if (len(word) % 2 != 0):
        print(word)"
Can you generate a Python program to calculate the length of the hypotenuse of a right triangle?,"import math

def hypotenuse_length(a, b):
    """""" Calculates the hypotenuse of a right triangle given its side lengths """"""
    
    return math.sqrt(a**2 + b**2)
  
length = hypotenuse_length(3, 4)
print(length)"
"Create a function in Python that takes an array of integers as input, checks if the array is sorted,  and, if not, sorts it.","def is_sorted(arr):
  sorted_arr = sorted(arr)
  if arr == sorted_arr:
    return True
  else:
    arr.sort()
    return arr"
Develop a code in Python to get the day name for any given date using the standard libraries.,"import datetime
 
def get_day_name(date):
    day_name = datetime.datetime.strptime(date, '%Y-%m-%d').strftime('%A')
    return day_name
  
if __name__ == '__main__':
    date = '2021-04-19'
    print(get_day_name(date))"
Write a function in Python to find the top k words in a given document.,"from collections import Counter    

def topKWords(doc, k):
    words = doc.split()
    counts = Counter(words).most_common(k)
    return [word for word,_ in counts]

doc = ""This is a document it contains some words and a lot of phrases.""
k = 2
print(topKWords(doc, k))"
Create a base-2 binary addition calculator in Python.,"def binary_addition(a, b):
    a_bin = bin(int(a,2))[2:]
    b_bin = bin(int(b,2))[2:]
    c_bin = bin(int(a_bin, 2) + int(b_bin, 2))[2:]
    c = c_bin.zfill(max(len(a), len(b)))
    return c

result = binary_addition('010', '101')
print(result)"
Write a Python program to filter out values from a given list based on a certain condition.,"def filter_values(lst, condition):
    filtered_list = []
    for x in lst:
        if eval(condition):
            filtered_list.append(x)
    return filtered_list"
"Can you create a class in Python that takes two parameters, a string (name) and an integer (age), and prints both out.","class User:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def __str__(self):
        return f""Name is {self.name} and age is {self.age}"""
Generate a regular expression pattern in Python that matches a 10 digit phone number.,r'\d{10}'
Design a Python class to hold a given array of objects.,"class ArrayContainer:
  def __init__(self, arr):
    self.arr = arr

  def get_array(self):
    return self.arr"
Compose Python code to remove all elements from a list by value.,"def remove_by_val(mylist, val):
     return [i for i in mylist if i != val]

mylist = [1,2,3,4,2]
result = remove_by_val(mylist, 2)
print(""Updated list after removing elements are: "", result)"
Write a Python method that takes a string and returns its reverse.,"def reverse(text):
 return text[::-1]"
Compare two lists and extract the common elements of both the lists in Python.,"def commonElements(l1, l2):
    return set(l1).intersection(l2)"
Write a function to find the nth hexagonal number.,"def hexagonal_num(n): 
	return n*(2*n - 1) "
Write a Python program to access an item of a list.,"list1 = [1, 2, 3, 4, 5]
item_index = 3

def access_list_item(my_list, index):
    return my_list[index]

result = access_list_item(list1, item_index)
print(result)"
"Create a Python program to print out the lyrics of the song ""Happy Birthday"".","print(""Happy birthday to you"")
print(""Happy birthday to you"")
print(""Happy birthday dear ____"")
print(""Happy birthday to you"")"
Generate code to print each element of a list of strings in Python.,"for item in [""apple"", ""banana"", ""cherry""]:
    print(item)"
Write a function to remove empty lists from a given list of lists.,"def remove_empty(list1):
  remove_empty = [x for x in list1 if x]
  return remove_empty"
Design an algorithm in Python that takes a list of strings and returns the list of strings in decreasing order of length.,"def order_by_length(input_list):
  return sorted(input_list, key=len, reverse=True)
  
input_list = [""Hello"", ""World"", ""This"", ""is"", ""a"", ""test""]
print(order_by_length(input_list))"
Rewrite this Java program in Python3.,"print(""Hello, World!"")"
Implement a priority queue data structure in Python.,"import heapq


class PriorityQueue:
 
 def __init__(self):
 self.heap = []
 
 def push(self, item, priority):
 heapq.heappush(self.heap, (priority, item))
   
 def pop(self):
 return heapq.heappop(self.heap)[1]

pq = PriorityQueue()
pq.push('A',1)
pq.push('B',5)
pq.push('C',2)

while not pq.isEmpty():
 print(pq.pop())"
"Using Python, create a sentence out of all the words entered in an array.","sentence = "" "".join([""hello"", ""world"", ""!""])
print(sentence)"
Write a Python program to optimize a given function using gradient descent.,"import numpy as np
def optimize(f, lr, num_iterations):
    x = 0.0
    
    for i in range(num_iterations):
        grad = numerical_diff(f, x)
        x -= lr * grad

    return x

def numerical_diff(f, x):
    h = 1e-4#0.0001
    return (f(x+h) - f(x-h)) / (2*h)"
Write a Python program to calculate the mean and standard deviation of an array of numbers.,"mean = 4.4
std = 1.6

import numpy as np

arr = np.array([2, 3, 4, 5, 7])

mean = np.mean(arr)
std = np.std(arr)

print('mean =', mean)
print('std =', std)"
Write a python function to left rotate the bits of a given number.,"INT_BITS = 32
def left_Rotate(n,d):   
    return (n << d)|(n >> (INT_BITS - d))  "
Write a function in Python to check if an element is present in an array.,"arr = [1, 2, 3, 5, 7]
element = 4

def contains(arr, element):
  for e in arr:
    if e == element:
      return True
  return False

result = contains(arr, element)
print(result)"
Optimize a Python program to copy and append an array of integers.,"def array_copy(arr):
    return arr[:]

def array_append(arr, value):
    arr.append(value)

arr = [2, 4, 6]
arr_copy = array_copy(arr)
array_append(arr_copy, 8)

print(arr_copy)"
Write a python function to print negative numbers in a list.,"def neg_nos(list1):
  for num in list1: 
    if num < 0: 
       return num "
Write a Python program to organize the words of a sentence into alphabetical order.,"sorted_words = sorted(input_string.split(), key=str.lower)

print('Sorted words are:')

for word in sorted_words:
 print(word)"
Create a Pie Chart in Python with the following data,"import matplotlib.pyplot as plt

items = ['Pen', 'Pencil', 'Eraser']
frequencies = [4, 9, 3]

plt.pie(frequencies, labels=items, autopct='%1.1f%%', shadow=True, startangle=90)
plt.axis('equal')
plt.show()"
Create a python script that takes in a string and prints the string reversed,"def reverse_str(str):
    return str[::-1]

# Example
print(reverse_str(""Hello World!""))  # Prints !dlroW olleH"
Edit the following python function so that it prints its parameters in reversed order.,"def print_params(a, b):
  print(b + ' ' + a)"
Re-write the following Java program in Python.,"def main():
 print(""Hello World"")
 
if __name__ == ""__main__"":
 main()"
Implement an algorithm in Python to check for palindromes.,"def isPalindrome(text):
    n = len(text)
    for i in range(n // 2):
        if text[i] != text[n - i - 1]:
            return False
    return True

print(isPalindrome('noon'))"
Write a Python program to generate a Python Class using the given description.,"class Person:
 def __init__(self, name, age, height):
 self.name = name
 self.age = age
 self.height = height
 
 def get_name(self):
 return self.name
 
 def get_age(self):
 return self.age
 
 def get_height(self):
return self.height"
Generate a python program to sort a list according to its second element,"def sort_list(lst):
  lst.sort(key = lambda x: x[1])
  return lst"
Edit the following Python program to accept a list of numbers as input and find the second largest number from the list.,"# Find the second largest number from a given list

numbers = [12, 23, 45, 22, 50]

# Sort the list in ascending order
numbers.sort()

# Get the second largest number
second_largest_num = numbers[-2]

print('The second largest number in the list is:', second_largest_num)"
Write a Python program to parse a JSON string and extract a specific key-value pair.,"import json
 
myJSON = '{""key"": ""value1"", 
           ""anotherKey"": ""value2"", 
           ""somekey"": ""somevalue""}'
 
# parse json
parsedJSON = json.loads(myJSON)
 
# access data
key = parsedJSON['key']
value = parsedJSON['value']
 
# print key and value
print(""key: "" + key)
print(""value: "" + value)"
Create a function in Python that takes a string and returns a new string with the characters in reverse order.,"def reverse_string(input_str):
    reversed_str = """"
    for i in range(len(input_str)-1,-1,-1):
        reversed_str += input_str[i]
    return reversed_str

print (reverse_string(""Hello World!""))"
Write a python function to find the average of a list.,"def Average(lst): 
    return sum(lst) / len(lst) "
"Write a function to find ln, m lobb number.","def binomial_coeff(n, k): 
	C = [[0 for j in range(k + 1)] 
			for i in range(n + 1)] 
	for i in range(0, n + 1): 
		for j in range(0, min(i, k) + 1): 
			if (j == 0 or j == i): 
				C[i][j] = 1
			else: 
				C[i][j] = (C[i - 1][j - 1] 
							+ C[i - 1][j]) 
	return C[n][k] 
def lobb_num(n, m): 
	return (((2 * m + 1) *
		binomial_coeff(2 * n, m + n)) 
					/ (m + n + 1))"
Generate a program in Python to prompt a user for two numbers and then display their sum.,"# Ask for the numbers
number1 = int(input(""Enter number 1: "")
number2 = int(input(""Enter number 2: "")

# Display their sum
print(""The sum of the two numbers is:"", number1 + number2)"
Optimize a given code in Python for higher efficiency.,"def power(base, exponent):
    answer = 1
    while exponent > 0:
        if exponent & 1:
            answer *= base
        base *= base
        exponent >>= 1
    return answer"
Write a function to add the k elements to each element in the tuple.,"def add_K_element(test_list, K):
  res = [tuple(j + K for j in sub ) for sub in test_list]
  return (res) "
Write a Python program which will take a list of score of five students and compute the average score for the five students.,"def compute_average(score_list):
    return sum(score_list)//len(score_list)"
"Write a Python program that categorizes a product as ""red"", ""green"" or ""blue"".","def product_category(product):
 products = {""tomatoes"": ""red"",
 ""apples"": ""green"",
 ""chocolates"": ""blue""}
 
 if product in products:
 return products[product]
 else:
 return ""Invalid product"""
Optimize the following Python code,"def sum_of_list(list):
    return sum(list)"
Write a python program to calculate the average of a list of numbers.,"def calculate_average(numbers):
    total = sum(numbers)
    length = len(numbers)
    return total / length

numbers = [1, 2, 3, 4, 5]
average = calculate_average(numbers)
print(average)"
Compose a program in Python to find the sum of an array of integers.,"# Compose a program in Python to find the sum of an array of integers

def array_sum(arr):
  """"""
  Compute the sum of an array of integers.

  Parameters
  ----------
  arr : array_like
    The array of integers.

  Returns
  -------
  int
    The sum of the array entries.
  """"""
  sum = 0
  for n in arr:
    sum += n
  return sum"
Write a Python program that takes a text string as input and returns the number of words in it.,"def count_words(text):
    words = text.split()
    return len(words)"
Can you create a program in Python that will return the nth Fibonacci number?,"def fib(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fib(n-1) + fib(n-2)

n = 8
print(fib(n))"
"Create a function in Python that takes a string and a dictionary, and returns a list of all the words in the string that match keys in the dictionary.","def get_words(string, dict):
  words = string.split()
  
  output = []
  for word in words:
    if word in dict:
      output.append(dict[word])

  return output

output = get_words(string, dictionary)
print(output) # ['that', 'not']"
Generate a Python function that will accept an array of integers and remove duplicates from the array.,"def remove_duplicates(arr):
 new_arr = [] 
 for num in arr: 
 if num not in new_arr:
 new_arr.append(num) 
 return new_arr"
Create a Python script to generate a dictionary that includes numerical data from a given list.,"def generate_dict(list1):
    my_dict = {}
    for item in list1:
        my_dict[item] = item ** 2
    return my_dict"
Implement an algorithm to find the second smallest element in an array of integers using Python.,"def secondSmallest(arr):
    m1, m2 = float('inf'), float('inf')
    for x in arr:
        if x <= m1:
            m1, m2 = x, m1
        elif x < m2:
            m2 = x
    return m2

arr = [1, 5, 3, 0, -1]
print(secondSmallest(arr)) # Outputs 0"
Generate all the permutations of a string using Python.,"def permutations(str):
	if len(str) <= 1:
		return [str]

	perms = [] 
	for i in range(len(str)):
		rest_strings = str[:i] + str[i+1:]
		for perm in permutations(rest_strings):
			perms.append(str[i:i+1] + perm)
	
	return perms

str = ""abc""
perms = permutations(str)
print(perms) # ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']"
Develop an algorithm in Python for generating the nth Fibonacci number.,"def fibonacci(n):
 # base case
 if n == 1:
  return 0
 elif n == 2:
  return 1
 # recursive case
 else:
  return fibonacci(n-1) + fibonacci(n-2)

# testing
print(fibonacci(5)) # Output: 3"
"Given a list of integers, write a program in Python to determine which is the maximum number.","# take a list 
list = [19,7,32,1,8,27] 
  
# initializinf max_val to INT_MIN so that 
# any int number would be greater that it 
max_val = float(""-inf"") 
  
# traversing through the list 
for item in list: 
    if item > max_val: 
        max_val = item 
  
# printing the maximum value 
print(""The maximum value of the list is:"", max_val)"
"Create a class in Python to store the details of a movie including title, actor, and release date.","class Movie:
    def __init__(self, title, actor, release_date):
        self.title = title
        self.actor = actor
        self.release_date = release_date"
Write a python function to check whether all the characters are same or not.,"def all_Characters_Same(s) :
    n = len(s)
    for i in range(1,n) :
        if s[i] != s[0] :
            return False
    return True"
Write a Python program to remove all instances of a word from a given sentence.,"def remove_word(sentence, word):
 new_sentence = []
 words = sentence.split()
 for w in words:
 if w != word:
 new_sentence.append(w)
 return "" "".join(new_sentence)"
Create a Python list comprehension to generate all squares of even numbers under 100.,"[i**2 for i in range(2, 101, 2)]"
Generate a Python script for searching for a pattern in a given text.,"import re
text = ""The cat jumped over the fence""
pattern = ""cat""
match = re.search(pattern, text)
if match:
    print(""Pattern found!"")"
Write a python code to find the roots of the equation: x2- 7x + 10 = 0.,"#Calculates roots of quadratic equation

a = 1
b = -7
c = 10

#Calculate root using formula
discriminant = (b**2) - (4*a*c)

if discriminant < 0:
    print(""The equation has no real solutions."")
else:
    root1 = (-b + (discriminant**.5)) / (2*a)
    root2 = (-b - (discriminant**.5)) / (2*a)

    print(""The roots of this equation are:"", root1, ""and"", root2)"
You are asked to write a Python program that computes the mean of a list of numbers.,"def mean(nums):
    total = 0
    for num in nums:
        total += num
    return total / len(nums)

mean([1, 3, 5, 8, 10])  # 6.0"
Create a program to execute a linear search in Python.,"def linear_search(numbers, key):
    for index, element in enumerate(numbers):
        if element == key:
            return index
    return -1"
Optimize the following Python code for calculating the Fibonacci numbers up to n.,"def fibonacci(n):
 # Initialize a memoization dictionary
 memo = {
 0: 0,
 1: 1
 }
 
 # If n is in the memoization dictionary, return the value
 if n in memo:
 return memo[n]
 
 # Calculate the Fibonacci number
 if n > 1:
 memo[n] = fibonacci(n-1) + fibonacci(n-2)
 
 return memo[n]

print(fibonacci(10))"
Create an API endpoint in a Python Flask application to retrieve employee data.,"@app.route('/employees', methods=['GET'])
def get_employees():
 employees = Employee.query.all()
 return {'employees': [{'id': emp.id, 'name': emp.name, 'age': emp.age} for emp in employees]}"
Generate Python code for handling HTTP requests in Flask.,"from flask import Flask
 
app = Flask(__name__)
 
@app.route('/', methods=['GET', 'POST'])
def handle_request():
 if request.method == 'POST':
 # Handles post request
 elif request.method == 'GET':
 # Handles get request
 
 if __name__ == '__main__':
 app.run(debug=True)"
Generate a Python program to retrieve the Nth smallest element from a given list.,"def nth_smallest(numbers, n): 
    numbers.sort() 
  
    return numbers[n-1]"
Rewrite a given function in Python to return the sum of the two parameters instead of multiplying them.,"def multiply(a, b):
  return a + b"
Modify a Python function to safely divide a number by another number.,"def safe_divide(x, y):
    # Check for valid arguments
    if y == 0:
        raise ValueError('Cannot divide by zero')
    # Perform the division
    return x/y"
Generate a python program to print the first n elements of a given list.,"def print_n_elements(n, list):
    for i in range(n):
        print(list[i])"
Write a Python program to find all the words with a length equal to 5 in a sentence and replace them with a placeholder.,"sentence = 'The quick brown fox jumped over the lazy dog'
words = sentence.split()

for i in range(len(words)):
 if len(words[i]) == 5:
 words[i] = '_____'

modified_sentence = ' '.join(words)
print(modified_sentence)
# Output: The _____ brown _____ jumped over the _____ _____"
Describe a function in Python which takes two integer arguments and outputs the product of them,"def product(a, b):
  return a * b"
"Create a Python class for managing a list of contacts. The class should have methods for adding a contact, deleting a contact, and listing all contacts.","class ContactManager:
 
 def __init__(self):
  self.contact_list = []
 
 def add_contact(self, contact):
  self.contact_list.append(contact)
 
 def delete_contact(self, contact):
  self.contact_list.remove(contact)
 
 def list_contacts(self):
  for contact in self.contact_list:
   print(contact)"
Generate a random number between given two numbers.,"We can generate a random number between two numbers using the random.randint() function in Python. We can call the function like this: random.randint(min, max)."
A number is said to be abundant if its proper divisors sum to more than the number itself. Create a python program to identify if a given number is abundant or not.,"def is_abundant(num):
    divisor_sum = 0
    for i in range(1, int(num/2)+1):
        if num % i == 0:
            divisor_sum += i

    return divisor_sum > num

num = 21

if is_abundant(num):
    print(f""{num} is abundant"")
else:
    print(f""{num} is not abundant"")"
Write a Python program to combine two dictionaries into one.,"dict1 = {'a': 1, 'b': 2}
dict2 = {'c': 3, 'd': 4}

# Create a new dictionary
new_dict = {}

# Add each key-value pair from dict1
for key, value in dict1.items():
    new_dict[key] = value

# Add each key-value pair from dict2
for key, value in dict2.items():
    new_dict[key] = value

print(new_dict)

# Output: {'a': 1, 'b': 2, 'c': 3, 'd': 4}"
Design a program in Python to detect the vowel in a given string.,"def vowelCheck(inputString): 
    vowels = ['a','e','i','o','u','A','E','I','O','U'] 
    for x in inputString: 
        if x in vowels: 
            return x"
Design a program in Python which will produce an output in art.,"import turtle

t = turtle.Turtle()

for i in range(20):
    t.left(90)
    t.forward(50)
    t.right(90)
    t.forward(50)"
Create a Python script that connects to a database and displays a list of table information for an SQL database.,"import sqlite3

# Connect to database
conn = sqlite3.connect('my_database.db')

# Get cursor
c = conn.cursor()

# Print information about all tables
c.execute(""SELECT name FROM sqlite_master WHERE type='table'"")

print(""List of tables:"")
tables = c.fetchall()

for table in tables:
 print('\t',table[0])

# Close connection
conn.close()"
Classify a piece of code into an appropriate language.,Python
Create a Python program to read in 15 integers and print the sum of them.,"def sum_nums(nums):
    total = 0
    for num in nums:
        total += num
    return total

lst = [1, 5, 9, 0, 2, 4, 7, 8, 6, 10, 3, 11, 12, 13, 14]
total = sum_nums(lst)
print(total)"
Write a Python code to compute the average of all numbers in a list.,"def average(numbers):
    total = 0
    for num in numbers:
        total += num
    return total / len(numbers)"
Generate a sequence of prime numbers using Python.,"def generate_prime_numbers(n):
    prime_numbers = []
    for num in range(2, n + 1):
        prime = True
        for i in range(2, num):
            if (num % i == 0):
                prime = False

        if prime:
            prime_numbers.append(num)
    return prime_numbers

print(generate_prime_numbers(100))"
"Can you define a class in Python which has 3 variables, name (string), age (int) and grade (char).","class Student: 
    def __init__(self, name, age, grade): 
        self.name = name 
        self.age = age
        self.grade = grade"
Write a function to get dictionary keys as a list.,"def get_key(dict): 
    list = [] 
    for key in dict.keys(): 
        list.append(key)           
    return list"
Create an API in Python that performs sentiment analysis on a given text.,"import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer

def sentiment_analysis(text):
 # Download language models
 nltk.download('vader_lexicon')

 # Initialize a sentiment analyzer
 sid = SentimentIntensityAnalyzer()

 # Calculate the sentiment score
 sentiment = sid.polarity_scores(text)

 # Return the sentiment score
 return sentiment"
Write a Python function to access a given key from a given dictionary.,"def access_key(key, dictionary): 
    if key not in dictionary: 
        return -1
    return dictionary[key]"
Create an if-else statement to check if a number is a multiple of 3 in Python.,"if num % 3 == 0: 
    print(""Number is multiple of 3"")
else: 
    print(""Number is not a multiple of 3"")"
Create a python script to check if a given name is valid or not.,"def is_name_valid(name):
    # Check if the name contains only alphabets
    if name.isalpha():
        return True
    return False

name = 'John'
print(is_name_valid(name))"
Write an algorithm in Python 3 that calculates the factorial of a number.,"def factorial(n):
 if n == 0:
  return 1
 else:
  return n * factorial(n-1)"
Compile a Python program to retrieve the nth Fibonacci number in the series.,"def Fibonacci(n): 
    if n<0: 
        print(""Incorrect input"") 
    elif n==1: 
        return 0
    elif n==2: 
        return 1
    else: 
        return Fibonacci(n-1)+Fibonacci(n-2) 
  
num = 5
print(Fibonacci(num))"
Write a Python program to generate a random password of length 8 that contains both upper-case and lower-case letters.,"import string
import random

def generate_password(length):
 # Get all possible characters
 characters = string.ascii_lowercase + string.ascii_uppercase + string.digits 
 
 # Generate a random password
 password = ''.join(random.choice(characters) for i in range(length))
 
 # Return the generated password
 return password


print(generate_password(8))"
Create a web scraper program in Python that can scrape a given website.,"import requests
from bs4 import BeautifulSoup

url = 'https://www.example.com/'
response = requests.get(url)
soup = BeautifulSoup(response.text, 'html.parser')

# scrape the website using soup"
Write a function to calculate the discriminant value.,"def discriminant_value(x,y,z):
    discriminant = (y**2) - (4*x*z)
    if discriminant > 0:
        return (""Two solutions"",discriminant)
    elif discriminant == 0:
        return (""one solution"",discriminant)
    elif discriminant < 0:
        return (""no real solution"",discriminant)"
Create a program in Python to return the nth-largest element from a binary search tree.,"def nth_largest(root, n):
 if root is None or n <= 0:
 return -1
 
 stack = []
 while root or stack:
 while root:
 stack.append(root)
 root = root.right
 node = stack.pop()
 n -= 1
 
 if n == 0:
 break
 root = node.left
 
 return node.data"
Write a function to add the given list to the given tuples.,"def add_lists(test_list, test_tup):
  res = tuple(list(test_tup) + test_list)
  return (res) "
Develop an algorithm in Python to find all the prime numbers from a given list.,"def isPrime(num):
    if num < 2:
        return False
    for i in range(2,num):
        if num % i == 0:
            return False
    return True

num_list = [12, 23, 7, 8, 10, 15]

prime_numbers = []
for n in num_list:
    if isPrime(n):
        prime_numbers.append(n)

print(prime_numbers) #[23, 7]"
Write a Python program to replace all occurrences of a character in a string with the provided replacement character.,"def replace_all_occurrences(str, char, replacement):
  return str.replace(char, replacement)

print(replace_all_occurrences(""Hello World!"", 'l', 'X'))"
Create a Python program to visualize Pandas DataFrame.,"import matplotlib.pyplot as plt
import pandas as pd

df = pd.DataFrame({
    'Name': ['Alice', 'Bob', 'Carol', 'Dave'],
    'Age': [18, 25, 35, 45]
})

ax = df.plot.bar(x='Name', y='Age', rot=0)

plt.show()"
Rewrite this Python code to modernize it and make it more efficient.,"def removeNegatives(nums):
    return [n for n in nums if n >= 0]"
Create a simple Python command line utility to calculate the factorial of a given number.,"import sys

def factorial(n):
 if n == 0:
 return 1
 else:
 return n * factorial(n-1)

if __name__ == '__main__':
 number = int(sys.argv[1])
 result = factorial(number)
 print('The factorial of %d is %d' % (number, result))"
Write a function to print check if the triangle is isosceles or not.,"def check_isosceles(x,y,z):
  if x==y or y==z or z==x:
	   return True
  else:
     return False"
"Using the provided data, generate a decision tree classifier in Python.","from sklearn.tree import DecisionTreeClassifier

# Create and train a Decision Tree classifier
clf = DecisionTreeClassifier().fit(X, y)

# Make predictions
predictions = clf.predict(X)

# Print the predictions
print(predictions)"
Transform the following algorithm into a functional programming style in Python.,"def add_number(x, y):
    return sum(range(x, y))"
"Generate a function in Python that takes integer numbers as input and prints out their binary, octal and hexadecimal equivalent.","def decimal_binary_octal_hexadecimal(n):
    print(""Binary ="", bin(n))
    print(""Octal ="", oct(n))
    print(""Hexadecimal ="", hex(n))"
Write a function to print check if the triangle is equilateral or not.,"def check_equilateral(x,y,z):
  if x == y == z:
	   return True
  else:
     return False"
Develop a Python script to encode and decode a string using Base64.,"import base64

def encode(s):
    encoded = base64.b64encode(s.encode('utf-8'))
    return encoded.decode('utf-8')

def decode(s):
    decoded = base64.b64decode(s.encode('utf-8'))
    return decoded.decode('utf-8')"
"Design a Python class called 'Student' with the following properties – name, age, gender.","class Student:
 
    def __init__(self, name, age, gender):
        self.name = name
        self.age = age
        self.gender = gender
 
    def get_name(self):
        return self.name
 
    def get_age(self):
        return self.age
 
    def get_gender(self):
        return self.gender"
Design a class for representing student data in Python,"class Student:
    def __init__(self, name, age):
        self.name = name
        self.age = age
    
    def get_name(self):
        return self.name
    
    def get_age(self):
        return self.age"
Create a python script that filters out all negative numbers from the given matrix,"import numpy as np

def filter_out_negative(matrix):
  # Convert matrix to numpy array
  matrix = np.array(matrix)
  # Find all negative numbers and set them to 0
  matrix[matrix < 0] = 0
  return matrix

result = filter_out_negative([[-1, 2, -3], [-4, 5, 6], [-7, 8, 9]])
print(result)"
Design a function in Python to convert a Celsius temperature to a Fahrenheit temperature.,"def convert_celsius_to_fahrenheit(celsius):
    fahrenheit = celsius * 9/5 + 32
    return fahrenheit

celsius = 32
fahrenheit = convert_celsius_to_fahrenheit(celsius)
print('{} degree Celsius is {} degree Fahrenheit.'.format(celsius, fahrenheit))"
Implement a solution in Python that finds the number of strings from the given set whose sum of ASCII values is divisible by 3,"def count_strings_by_sum_of_ascii(strings):
    count = 0
    for string in strings:
        ascii_sum = 0
        for char in string:
            ascii_sum += ord(char)
        if ascii_sum % 3 == 0:
            count += 1
    return count"
Re-write a given Python code snippet using list comprehensions.,squares = [n**2 for n in range(10)]
Generate a new Python class that is initialized with two data attributes and two methods.,"class NewClass:
  
  def __init__(self, data1, data2):
    self.data1 = data1
    self.data2 = data2
    
  def method1(self):
    # method implementation
    
  def method2(self, param1):
    # method implementation"
Write a function to convert tuple string to integer tuple.,"def tuple_str_int(test_str):
  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))
  return (res) "
Write a python function to count the number of integral co-ordinates that lie inside a square.,"def count_Intgral_Points(x1,y1,x2,y2): 
    return ((y2 - y1 - 1) * (x2 - x1 - 1)) "
Translate the following pseudocode into Python code.,"i = 0
while i < 10:
    print(i)
    i += 1"
Create objects of type Student in Python containing relevant attributes.,"class Student:
    def __init__(self, name, age, gender):
        self.name = name
        self.age = age
        self.gender = gender"
Create a program which finds the prime numbers between 1 to 100.,"# Python program to print all  
# prime number in an interval 

start = 1
end = 100

for val in range(start, end + 1): 
    if val > 1: 
        for n in range(2, val//2 + 2): 
            if (val % n) == 0: 
                break
            else: 
                if n == val//2 + 1: 
                    print(val)"
Write a Python program to parse a string of JSON data and display each entry on the command line.,"import json

data = '{""name"": ""John"", ""age"": 30, ""city"": ""New York""}'

data_dict = json.loads(data)

for key, value in data_dict.items():
    print(f'{key}: {value}')"
"Write a Python program that takes a number n and generates a dictionary that contains (i, i*i) such that n is greater than or equal to i >= 1 and","def generate_dict(n):
    d = {}
    for i in range(1, n+1):
       d[i] = i*i
    return d"
Create a python program to remove characters from a string that's not a letter or symbol.,"string = ""ABC%@#XYZ""
new_string = ''.join(c for c in string if c.isalnum())
print(new_string) # output: ABCXYZ"
"Given a string, write a Python function to lowercase all vowels.","def lower_vowels(str):
 vowels = ""aeiouAEIOU""
 new_str = """"
 
 for c in str:
  if c in vowels: 
   new_str += c.lower()
  else:
   new_str += c
 return new_str"
Write a python statement to print out the elements of the given list.,print(my_list)
Modify the below Python code to print the type of a given input.,"input_value = 4

print(type(input_value))"
Write a Python program to generate both upper and lower case random alphabets.,"import random
 
def random_alphabet():
    random_alphabet = chr(random.randint(97, 122)).upper()
    return random_alphabet
 
alphabets = []
for x in range(10):
    alphabets.append(random_alphabet())
 
print(alphabets)"
Create a python program for checking whether a number is a palindrome or not.,"def is_palindrome(num):
  rev = 0
  tmp = num
  
  while tmp > 0:
    rev = rev * 10
    rev = rev + (tmp % 10)
    tmp = tmp // 10

  return num == rev
  
num = 12321
if (is_palindrome(num)):
  print(""Number is a palindrome"")
else:
  print(""Number is not a palindrome"")"
"Given the following array of numbers, write a Python program to find the maximum element.","#import max from the built-in library
from max import max

#initialize array of numbers
numbers = [1, 43, 78, 3, 92, 42]

#find maximum element
print(max(numbers))

#output
92"
Design a sorting algorithm in Python that uses two lists.,"def sort_two_lists(list1, list2):
    """"""Function to sort two lists by the order of list2""""""
    zipped_lists = zip(list1, list2)
    zipped_lists = sorted(zipped_lists, key=lambda x: x[1])
    sorted_list1, sorted_list2 = zip(*zipped_lists)
    return list(sorted_list1), list(sorted_list2)"
"In Python, define a function that takes two arguments and returns the maximum of the two.","def max_value(a, b):
    # Return the maximum of two numbers
    if a > b:
        return a
    else:
        return b

# Example usage
a = 6
b = 8
print(max_value(a, b)) # 8"
"Generate a password of length 10, containing at least one uppercase letter and one special character, using a Python program.","import string
import random

def generate_password():
    password_characters = string.ascii_lowercase + string.ascii_uppercase + string.punctuation 
    return ''.join(random.choice(password_characters) for i in range(10)) 

print(generate_password())"
Create a python code to format a given string as an email,"""""""
This code formats a given string to an email address
""""""

def format_string(s):
    s = s.split("" "")
    name = s[0] + "" "" + s[1]
    email = s[2]
    return name + "" <"" + email + "">""

if __name__ == '__main__':
    string = ""John Doe jdoe@example.com""
    print(format_string(string))"
Create a function in Python to concatenate two strings and return the concatenated string.,"def concatenate_strings(str1, str2):
  return str1 + str2"
Create a python program to select the maximum and minimum element from a list of integers,"def get_max_min(numbers):
    max_val = numbers[0]
    min_val = numbers[0]
    for n in numbers:
        if n > max_val:
            max_val = n
        if n < min_val:
            min_val = n
    return (max_val, min_val)"
Write a function in Python to calculate the sum of all the values in a list of dictionaries using list comprehension.,"def sum_values(list_of_dicts): 
  return sum([v for d in list_of_dicts for v in d.values()])"
Compose a function in Python to delete all checkbox items in the list.,"def delete_checkbox_items(items):
    new_list = [item for item in items if item != 'Checkbox']
    return new_list

items_list = ['Apples', 'Orange', 'Bananas', 'Cherries', 'Checkbox']
result = delete_checkbox_items(items_list)
print(result)"
Generate a Python program to read in an array of integers and print out the largest two integers.,"array = [2, 10, 5, 8, 1]  
array.sort()

print(""The largest two integers are:"")
print(array[-1], array[-2])"
Generate a function in Python that takes in an array and returns an array of the same length with each element multiplied by 2.,"def double_array(arr):
    return [element * 2 for element in arr]"
Generate a python program to convert a given Celsius temperature to Fahrenheit,"def celsius_to_fahrenheit(temperature):
    fahrenheit = (temperature*9/5)+32
    return fahrenheit"
How can you generate a random number between 1 to 10 using Python?,"import random

random.seed()

print(random.randint(1, 10))"
Create a Python program that takes a list of strings as input and prints them in alphabetical order.,"def sort_strings(strings):
    strings.sort()
    for string in strings:
        print(string)

sort_strings(['apple', 'mango', 'banana'])"
Write a Python program using the SciPy library to solve the given equation.,"from scipy.optimize import fsolve

#define the equation
def equation(p):
    x, y, z = p
    return (3*x - 2*y + z - 5)

#solve the equation
result =  fsolve(equation, (1, 1, 1)) 

#Print the result 
print(result)"
Create a function in Python to find all the indices of a given item in a list.,"def find_all_indices(list, item):
    result = []
    for index, i in enumerate(list):
        if i == item: result.append(index)
    return result

list = [1,2,3,4,5,2]
item = 2

#find all indices of the item
indices = find_all_indices(list, item)

#print the indices
print(indices) # [1, 5]"
Create a Python function that takes a list of names as input and returns a list of numbers representing the length of the names.,"def nameLengths(names):
 lengths = []
 for name in names:
 lengths.append(len(name))
 return lengths

# Example
nameLengths([""Alice"", ""John"", ""Steve""]) # [5, 4, 5]"
Create a function in Python that takes 2 numbers as parameters and returns their sum.,"def add(a, b):
    return a + b"
Write a python function to split the array and add the first part to the end.,"def split_Arr(a,n,k):  
   b = a[:k] 
   return (a[k::]+b[::]) "
Generate a visualization of a dataset using Python?,"import matplotlib.pyplot as plt 

# Data 
x = [1, 2, 3, 4] 
y = [10, 20, 25, 30] 

# Plot 
plt.plot(x, y) 

# Add labels 
plt.title(""Simple Plot"") 
plt.xlabel(""X-axis"") 
plt.ylabel(""Y-axis"") 

# Show plot 
plt.show()"
Generate a solution in python that takes a string containing letters and numbers and returns the frequency of each character.,"def count_frequency(string):
    counts = {}
    for char in string:
        if char in counts:
            counts[char] += 1
        else:
            counts[char] = 1
    return counts"
Create a Python function that calculates the factorial of a given number,"def factorial(x):
    result = 1
    for num in range(1,x+1):
        result *= num
    return result"
Rewrite the following C++ function to Python.,"def multiply(a, b):
    result = a * b
    return result"
Convert the following Python code into equivalent C code.,"#include <stdio.h>
#include <stdlib.h>

float avg(int nums[], int len) {
    float sum = 0;
    for (int i = 0; i < len; i++) {
        sum += nums[i];
    }
    return sum / len;
}

int main() {
    int nums[] = {1, 2, 3};
    int len = 3;
    printf(""Average = %f\n"", avg(nums, len));
    return 0;
}"
Convert the following python code which uses sets to one which uses lists.,"l = [2, 3, 4]
for n in l:
    print(n)"
Generate an algorithm in Python to reverse a sting.,"def reverse_string(string):
  return string[::-1]"
Optimize the Python code snippet (below) for performance efficiency.,"def process_data(data):
    processed_data = []
    for item in data:
        if (item % 10) == 0:
            processed_data.append(item)
    return processed_data

def process_data_fast(data):
    return [item for item in data if item % 10 == 0]"
Code a function in Python that takes an array of strings as parameter and returns the longest string.,"def longest_string(arr):
    max_length = 0
    max_string = """"
    
    for s in arr:
        if len(s)> max_length:
            max_length = len(s)
            max_string = s
            
    return max_string"
Generate a function in Python to compute the maximum of two numbers without using any comparison operator.,"def maximum(x, y): 
  
    # subtract two numbers 
    # and return the sign of the result 
    s =  (x - y) >> 63  
  
    # return x if s = 0 
    # else return y 
    return  x - s * (x - y)"
"Given the list of numbers, create a Python program that counts the number of even numbers in the list.","def count_evens(nums):
    count = 0
    for n in nums:
        if n % 2 == 0:
            count += 1
    return count

nums = [1,2,3,4,5]
print(count_evens(nums)) # prints 2"
Translate the following code from JavaScript to Python,"# Translate the following function from JavaScript to Python
def add(a, b):
    return a + b"
Create a data structure in JavaScript to represent a directory structure.,"const directoryStructure = {
  ""root"": {
    ""Projects"": {
      ""Python"": {
        ""Scripts"": {
          ""script1.py"": null,
          ""script2.py"": null
        }
      },
      ""JavaScript"": {
        ""Scripts"": {
          ""script1.js"": null,
          ""script2.js"": null
        }
      }
    },
    ""Documents"": {
      ""paper1.pdf"": null,
      ""paper2.pdf"": null
    }
  }
};"
Write a python function to find the first repeated word in a given string.,"def first_repeated_word(str1):
  temp = set()
  for word in str1.split():
    if word in temp:
      return word;
    else:
      temp.add(word)
  return 'None'"
Write a Python script to evaluate an expression given as a string.,"def eval_expression(string): 
 return eval(string)"
Design a Python Program to convert a given DNA sequence into its RNA equivalent.,"def convert_to_rna(DNA):
    rna = """"
    # iterate through each character
    for char in DNA:
        # check character
        if char == ""A"":
            rna += ""U""
        elif char == ""T"":
            rna += ""A""
        elif char == ""C"":
            rna += ""G""
        elif char == ""G"":
            rna += ""C""
    return rna"
Create a test suite in Python to verify the correctness of a function that takes two numbers as inputs and returns their sum.,"import unittest

def add(a, b):
    return a + b

class myTests(unittest.TestCase):
    def test_add(self):
        self.assertEqual(add(2, 3), 5)
        self.assertEqual(add(-1, 7), 6)

    def test_type(self):
        self.assertRaises(TypeError, add, 'a', 'b')

if __name__ == '__main__':
    unittest.main()"
Generate code to identify the type of data stored in a given variable in Python.,"# Identify the type of data stored in given variable

def identify_data_type(val):
    for item in val:
        data_type = type(item).__name__
        print(f""Data type of {item} is {data_type}"")

val1 = [""Hello"", 10, 3.14] 
identify_data_type(val1)

# Output
# Data type of Hello is str
# Data type of 10 is int
# Data type of 3.14 is float"
Create a Python script that normalizes a given list of strings.,"""""""
Normalize a given list of strings
""""""

def normalize(lst):
    output = []
    for item in lst:
        output.append(item.lower())
    return output
    
if __name__ == '__main__':
    input_list = ['Red', 'red', 'WhITE', 'white', 'bLUE', 'blue']
    print(normalize(input_list))"
Convert this SQL query to Python.,"import pydb

def query_customer_name(name):
    query = """"""
    SELECT *
    FROM customers
    WHERE customer_name LIKE %s""""""
    name_wildcard = '%' + name + '%'
    query_result = pydb.query(query, name_wildcard)
    return query_result
    
if __name__ == '__main__':
    query_customer_name('John')"
"Given a list of numbers in an array, use the Python slice operator to return the last five elements of the array.","a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
b = a[-5:]
print(b)  # [6, 7, 8, 9, 10]"
Create a web server in Python that can handle HTTP requests and provide an appropriate response like an HTML page.,"import http.server

PORT = 8080

server_address = ('localhost', PORT)

with http.server.HTTPServer(server_address, http.server.CGIHTTPRequestHandler) as httpd:
    print('Serving HTTP on port {0} ...'.format(PORT))
    httpd.serve_forever()"
Design a class in Python to create a custom data structure.,"class CustomDataStructure:
    def __init__(self):
        self.data = []
 
    def appendData(self, val):
        self.data.append(val)
 
    def getData(self):
        return self.data
 
    def removeData(self, index):
        self.data.pop(index)"
Generate a valid Python dictionary containing student names as keys and their age as values.,"student_dict = {
    'John': 18,
    'Maria': 20,
    'Alex': 24
}"
Write a Python code that takes in data points in time-series and returns the average of the data points for the given period.,"def average_of_period(arr):
    return sum(arr) / len(arr)

result = average_of_period([1, 3, 4, 5, 3, 9, 6])
print(result)"
Build a program in Python to print out the first n prime numbers.,"def n_primes(n):
    count = 0
    number = 2

    while count < n:
        is_prime = True

        for i in range (2, number): 
            if number % i == 0:
                is_prime = False
        
        if is_prime: 
            print(number, end="" "")
            count += 1

        number += 1


n_primes(10)"
Write a Python program to find the missing number from a given list.,"def find_missing_number(list_of_numbers):
    max_number = max(list_of_numbers)
    total_sum = (max_number * (max_number + 1)) // 2
    actual_sum = 0
    
    for number in list_of_numbers:
        actual_sum += number
    return total_sum - actual_sum

list_of_numbers = [2, 3, 1, 5]
missing_number = find_missing_number(list_of_numbers)
print(""Missing number: "", missing_number)"
Write a Python program to solve a system of linear equations.,"def solve_linear_system(A, b):
    
    # Find the solution of the linear system
    x = np.linalg.solve(A, b)
    
    # Print the solution
    print('Solution: x = ' + str(x[0]) + ', y = ' + str(x[1]))
    

A = [[2, 3], [5, -1]]
b = [8, -10]
solve_linear_system(A, b)"
Create a Python program to calculate the total of integers within a given range.,"# Find the sum of numbers within a range
def sum_range(start, end):
 sum = 0
 for i in range(start, end + 1):
  sum = sum + i
 return sum

print(sum_range(2, 6))"
Write a Python program to calculate the Gini coefficient of the following data set.,"def gini(data):
    n = len(data)
    data.sort()
 
    gini_coef = 0
    for k in range(n):
        i = n - k - 1
        gini_coef += (2 * i + 1 - n) * data[i]
    gini_coef = gini_coef / (n * sum(data))
 
    return gini_coef

print(gini(data))
# Output: 0.32"
Generate a python class for a linked list.,"class LinkedList:
    def __init__(self, value=None):
        self.value = value
        self.next = None
        
    def append(self, value):
        if self.value is None:
            self.value = value
            return
        temp = self
        while temp.next is not None:
            temp = temp.next
        temp.next = LinkedList(value)"
Translate the following code written in Python to Java.,"String x = ""Hello World"";"
Write a Python function to replace all occurrences of a given substring with another substring.,"def replace_substring(string, old_substring, new_substring):
 return string.replace(old_substring, new_substring)

result = replace_substring(""Hello World, Hello"", ""Hello"", ""Hi"")
print(result)"
Create a Python function to parse an XML document and extract all the <tag> elements.,"import xml.etree.ElementTree as ET

def extract_tags(xml):
    root = ET.fromstring(xml)
    tags = root.findall('tag')

    # Create list to store tag elements
    tag_list = []
    for tag in tags:
        tag_list.append(tag.text)

    # Return list of tags
    return tag_list"
Write a function in Python to reverse the order of words in a sentence.,"def reverse_words(sentence):
    words = sentence.split(' ')
    reversed_words = words[::-1]
    return ' '.join(reversed_words)

sentence = ""hello world how are you""
print(reverse_words(sentence)) # output - you are how world hello"
"Create a function in Python that takes in a list of words and a target word, and prints out the first word that is alphabetically larger than the target.","# Function to find the first word alphabetically larger than the target
def find_next_word(words, target):
    for word in words:
        if word > target:
            return word
    return None"
Write a piece of python code to multipy each element in a list by 10.,"lst=[1,2,3,4]
for i in range(len(lst)):
    lst[i] = lst[i]*10
print(lst)"
Create a function in Python that takes in a list of numbers and returns true if the list of numbers is strictly increasing; false otherwise.,"def is_strictly_increasing(numbers):
 for i in range(len(numbers) - 1):
 if numbers[i] >= numbers[i + 1]:
 return False
 return True

numbers = [3, 4, 5, 6, 7]
result = is_strictly_increasing(numbers)
print(result) # returns True"
Write a Python code snippet to generate a random string of 10 characters.,"import string
import random

def random_string():
    letters = string.ascii_lowercase
    return ''.join(random.choice(letters) for i in range(10))

my_string = random_string()
print(my_string)"
Create a network application in Python that sends a GET request to an API and parses the JSON response.,"import requests

url = 'https://api.mydomain.com/getdata'
response = requests.get(url)

data = response.json()
print(data)"
Create a Python program using virtualenv to create a virtual environment and install a package.,"#!/usr/bin/env python

import virtualenv

# Create a virtual environment
virtualenv_dir = virtualenv.create_environment()

# Activate the virtual environment
virtualenv.activate_environment(virtualenv_dir)

# Install package
virtualenv.install_package('mypackage', virtualenv_dir)"
Construct a loop in Python to add all the elements of a given list.,"total_sum = 0
for num in mylist:
    total_sum += num
print(""The sum is"",total_sum)"
Write a Python algorithm to generate the combinations of n distinct objects taken from an array.,"import itertools

arr = [1, 2, 3]
n = 2

result = list(itertools.combinations(arr, n))

print(result)"
Use Python to solve the following equation: y = x^2 - x + 1,"def solve_equation(x):
    return x**2 - x + 1"
Create a Python program to print out the output as shown.,"list = [1, 2, 3, 4, 5]
print(""The list is: "")
for i in list:
print(i, end="" "")"
Create a Python script to find the largest Fibonacci number which is less than a provided integer.,"def largestFibonacciNumber(n):
 
 # Initialize the starting two fibonacci numbers
 a = 0
 b = 1
 
 # Iterate over every index
 while b <  n:
  temp = a
  a = b
  b = temp + b 
 
 return a
 
# Test Cases 
print(largestFibonacciNumber(10)) 
# output: 8 

print(largestFibonacciNumber(50)) 
# output: 34"
Design a Python program to convert text to Pig Latin,"def textToPigLatin(text):
    words = text.split()
    new_words = []

    for word in words:
        if word[0] in 'aeiou':
            new_word = word + 'ay'
        else:
            new_word = word[1:] + word[0] + 'ay'
        new_words.append(new_word)
 
    return "" "".join(new_words)

print(textToPigLatin(""Hello, world!""))"
Create an animation in Python that displays an expanding circle across the screen.,"import turtle
 
def drawCircle(x, y, r):
    turtle.penup()
    turtle.goto(x, y)
    turtle.pendown()
    turtle.circle(r)
 
for r in range(20, 100, 10):
    drawCircle(0, 0, r)

turtle.done()"
"Create a Python script that replaces all words containing 3 or more consecutive vowels with ""*"".","import re

def replaceConsecutiveVowels(word): 
    regex = re.compile(r'[aeiou]{3,}', re.IGNORECASE) 
    return regex.sub(""*"", word)

word = ""entertainment""

print(replaceConsecutiveVowels(word)) # Output: *"
Generate a random sequence of 5 numbers in a range of 0 to 10 using Python.,"import random

random_sequence = []
for _ in range(5):
    random_sequence.append(random.randrange(0, 11))

print(random_sequence)"
Design a program in Python to find the max three numbers in a list.,"def max_three_nums(arr):
    max_three = []

    for i in range(3):
        max_element = 0 
        for j in range(len(arr)): 
            if max_element < arr[j]:
                max_element = arr[j] 
        arr.remove(max_element) 
        max_three.append(max_element) 
    return max_three 
    
arr = [7, 9, 15, 10, 11] 
print(max_three_nums(arr))"
Create a Python program to request data from an API and find the largest value in a given field.,"import requests

url = 'https://example.com/api'
response = requests.get(url)
data = response.json()

max_value = 0
for item in data:
 if item['field'] > max_value:
 max_value = item['field']

print('The largest value is:', max_value)"
Generate a Python code snippet to sort a given list.,"list.sort()
print(list)"
Create a GPT model that takes a Python program and outputs a C# program with the same functionality.,"The GPT model could be used to convert between programming languages, such as from Python to C#. The model would be trained on pairs of programs written in two different languages with the same functionality. The model would then be used to automatically convert a Python program into the equivalent in C#."
Write a Python program to solve the quicksort algorithm.,"def quicksort(arr): 
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quicksort(left) + middle + quicksort(right)"
Write a Python program to align two given strings with equal lines.,"def align_strs(x,y):
  lines_x = x.split('\n')
  lines_y = y.split('\n')
  
  max_len = max(len(lines_x),len(lines_y))
  result = """"
  for i in range(max_len):
    if i < len(lines_x):
      result += lines_x[i] + ""\n""
    if i < len(lines_y):
      result += lines_y[i] + ""\n""
    
  return result"
Modify a Python script to log a message in the event of an error.,"import logging

try:
    # Run code
except Exception as e:
    logging.error(""An error occurred: {}"".format(e))"
Generate a python program to approximate the maximum likelihood values of weights of a linear model.,"def approximate_weights(X, y):
    # define random starting points for weights
    weights = np.random.rand(X.shape[1], 1)
    # optimize weights using gradient descent 
    weights = gradient_descent(X, y, weights)
    return weights"
Create a Python class that has a say_hello() method.,"class Hello:
    def say_hello():
        print('Hello!')"
Write an algorithm in Python to convert English words to Pig Latin.,"def pig_latin(word):
    vowels = ['a', 'e', 'i', 'o', 'u']
    # If the word starts with a consonant, move it to the end, add 'ay'
    if word[0] not in vowels:
        return word[1:] + word[0] + 'ay'
    # If the word starts with a vowel, add 'way'
    else:
        return word + 'way'
    
print(pig_latin('pig'))  # igpay"
Create a python program for searching for a word in a text document.,"import re

text = 'The quick brown fox jumped over the lazy dog'
search = 'fox'

result = re.findall(search, text)

if result:
    print('Found!');
else:
    print('Not Found!')"
Create a web scraper using Python and Beautiful Soup to extract Twitter data.,"import requests
from bs4 import BeautifulSoup

# load the Twitter page
url = 'https://twitter.com/'
response = requests.get(url)
soup = BeautifulSoup(response.text, 'html.parser')

# extract the tweets
tweets = [tweet.text for tweet in soup.find_all('p', {'class': 'TweetTextSize TweetTextSize--normal js-tweet-text tweet-text'})]

# print the tweets
for tweet in tweets:
 print(tweet)"
Create a Python program to detect whether an input string is palindrome or not.,"def is_palindrome(input_string):
 rev_string = input_string[::-1]
 return input_string == rev_string 

input_string = 'racecar'

if is_palindrome(input_string):
 print('The input string', input_string, 'is a palindrome.')
else:
 print('The input string', input_string, 'is not a palindrome.')"
"Create a Python class called 'Person' that contains a name, age, and a method get_age()","""""""
Create a Python class called 'Person' that contains a name, age, and a method get_age()
""""""

class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def get_age(self):
        return self.age

if __name__ == '__main__':
    p = Person('John', 30)
    print(p.get_age())"
Create an application in Python that calculates the Fibonacci sequence numbers up to the n-th element.,"def fibonacci(n):
 a, b = 0, 1
 for _ in range(n):
 a, b = b, a + b
 return b
 
print(fibonacci(10))"
Devise a Python program to determine whether a given number is even or odd.,"def even_or_odd(num):
    if num % 2 == 0:
        return ""Even""
    else:
        return ""Odd"""
Create a function in Python to convert integer inputs to their binary representation.,"def int_to_binary(n):
    """""" Returns the binary representation of an integer. """"""
    return ""{0:b}"".format(n)"
Write a function to filter odd numbers using lambda function.,"def filter_oddnumbers(nums):
 odd_nums = list(filter(lambda x: x%2 != 0, nums))
 return odd_nums"
Develop a Python program that merges two dictionaries together.,"def mergeDictionaries(dict1, dict2):
    res_dict = {**dict1,**dict2}
    return res_dict

dict1 = { 'a': 1, 'b': 2, 'c': 3 }
dict2 = { 'd': 4, 'e': 5, 'f': 6 }

print(mergeDictionaries(dict1, dict2)) # {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}"
Develop a Python program to generate random passwords that consist of 8 characters.,"import string
import random

def generate_password():
    chars = string.ascii_letters + string.digits
    return ''.join(random.choice(chars) for _ in range(8))

password = generate_password()
print(password)"
Translate the following Python code into Java.,"public static int multi_sum(int[] nums) {
    int result = 0;
    for (int num : nums) {
        result += num;
    }
    return result;
}"
Create a web scraper in Python that fetches news headlines from different news outlets.,"import requests
from bs4 import BeautifulSoup

url = ""http://example.com/""
# Fetch the page
r = requests.get(url)
html = r.text

# Parse the html
soup = BeautifulSoup(html, 'html.parser')

# Extract headlines
headlines = soup.find_all('h3')
for headline in headlines:
 print(headline.get_text())"
Create a basic web scraper in Python that takes a URL as input and returns the text content of that URL.,"import requests
from bs4 import BeautifulSoup

url = 'https://www.example.com'
response = requests.get(url)
soup = BeautifulSoup(response.text, 'html.parser')

text = soup.get_text()

print(text)"
Create a script in Python to print out the 5 most frequent words in a given input string.,"from collections import Counter

input = ""Python is a great programming language""
words = input.split()

counts = Counter(words)

for word, count in counts.most_common(5):
    print(word, count)"
Create a Python program to search an element in a list using Binary Search,"def binary_search(arr, x): 
    low = 0
    high = len(arr) - 1
      
    while low <= high: 
        mid = (high + low) // 2
        if arr[mid] < x: 
            low = mid + 1
        elif arr[mid] > x: 
            high = mid - 1
        else: 
            return mid 
  
arr = [2, 8, 10, 17, 19, 25, 28]
x = 19
result = binary_search(arr, x)
print(result)"
Create a function in Python that returns the unique elements in a given array.,"def unique(arr): 
  unique_arr = [] 
  for i in arr: 
    if i not in unique_arr: 
      unique_arr.append(i) 
  return unique_arr"
Write a function to find the sum of geometric progression series.,"import math
def sum_gp(a,n,r):
 total = (a * (1 - math.pow(r, n ))) / (1- r)
 return total"
Create a function that capitalizes the first letter of any given word,"def capitalize_first_letter(word):
    return word[0].upper() + word[1:]

# main
word = ""python""
capitalized = capitalize_first_letter(word)
print(capitalized)"
Write a function to count the elements in a list until an element is a tuple.,"def count_elim(num):
  count_elim = 0
  for n in num:
    if isinstance(n, tuple):
        break
    count_elim += 1
  return count_elim"
Develop an NFC reader protocol in Python to transfer data between two NFC enabled devices.,"import nfc

def on_connect(tag):
 print('Tag connected')
 # Read data
 data = tag.read()
 print(data)
 # Write data
 tag.write('Hello World!')

with nfc.ContactlessFrontend('usb') as clf:
 clf.connect(rdwr={'on-connect': on_connect})"
Write a Python program to search for a particular string in a given paragraph.,"def search_string (paragraph, search_string):
    if search_string in paragraph:
        print(""Found the string '"" + search_string + ""'"")
    else:
        print(""Sorry, string not found"")
search_string(paragraph, 'height')"
"Write a Python script that takes a list of strings, finds the longest string, and prints it out.","def find_longest_string(string_list):
    longest_string = """"
    for i in string_list:
        if len(i) > len(longest_string):
            longest_string = i
    print(longest_string)


find_longest_string(['dog', 'cat', 'zebra', 'elephant'])"
Design a program in Python that uses a dictionary to count the number of words in a given string.,"def count_words(string):
    words = {}
    for word in string.split():
        if word in words:
            words[word] += 1
        else:
            words[word] = 1
    return words"
Write a python function to count the number of pairs whose sum is equal to ‘sum’.,"def get_Pairs_Count(arr,n,sum):
    count = 0  
    for i in range(0,n):
        for j in range(i + 1,n):
            if arr[i] + arr[j] == sum:
                count += 1
    return count"
"Create a Python script to generate an animated GIF. The GIF should display 5 frames, with an increasing value of a ‘tick’ numbers in each frame.","import imageio

# Create a list of images
images = []
for i in range(5):
 # Create a blank image
 image = Image.new('RGB', (400, 400))
 draw = ImageDraw.Draw(image)
 draw.text((200, 200), str(i))
 # Add the image20 image to the list
 images.append(image)
 
# Generate the gif
imageio.mimsave('animated.gif', images)"
Write a function for reversing a string in Python.,"def reverse_string(s):
    return s[::-1]

if __name__ == '__main__':
    s = 'Hello World!'
    print(reverse_string(s))"
Create a new Python list containing the square of the values in the given list.,"new_list = [4, 16, 36]"
"Using the skeleton code provided, finish the code and make it a valid python script.","#!/usr/bin/env python
# skeleton.py

def functionA():
    pass

def functionB():
    pass

def main():
    functionA()
    functionB()

if __name__ == ""__main__"":
    main()"
Print the Fibonacci sequence in Python using an recursive approach.,"def fibonacci(n): 
    if n<0: 
        print(""Incorrect input"") 
    # First Fibonacci number is 0 
    elif n==1: 
        return 0
    # Second Fibonacci number is 1 
    elif n==2: 
        return 1
    else: 
        return fibonacci(n-1)+fibonacci(n-2) 
# Driver Program 
print(fibonacci(9))"
Write a python function to take a list of numbers as input and return the largest number.,"def find_largest_number(numbers):
  largest_number = numbers[0]
  for number in numbers:
    if number > largest_number:
      largest_number = number
  return largest_number"
Create a Python program to download and save a web page using the Requests library.,"import requests

url = 'https://www.example.com'

response = requests.get(url)

with open('example.html', 'wb') as file:
 file.write(response.content)"
Implement an algorithm in Python that finds the most frequently occuring element in a list.,"def most_frequent(list): 
	count = 0
	element = None
	for i in list: 
		curr_element = i 
		curr_count = list.count(i) 
		if curr_count > count: 
			element = curr_element 
			count = curr_count 
	
	return element, count

most_frequent_element, frequency = most_frequent([3, 5, 4, 3, 2, 1, 4, 3, 4]) 
print(most_frequent_element)  	
# Output: 4"
Create a Python program to iterate through a dictionary and print out all the values.,"my_dict = {""a"":1, ""b"":2, ""c"":3, ""d"":4}

for key, value in my_dict.items():
    print(value)"
Port a Python code snippet to Java.,"public class Add {
    public static int add(int a, int b) {
        return a + b;
    }
}"
Write a Python code to calculate the factorial of a given number using memoization.,"def factorial_memoization(n): 

	#Creating table to store result 
	factorial_table = [1] * (n+1) 

	# Calculating factorial and storing in 
	# the table 
	for i in range(1, n+1): 
		factorial_table[i] = i * factorial_table[i - 1] 

	return factorial_table[n] 

result = factorial_memoization(5)
print(result)"
Write a code snippet in Python to compute the maximum of an array of numbers.,"def find_max(nums): 
  max_num = nums[0] 
  for num in nums: 
    if num > max_num: 
      max_num = num 
  return max_num 

print(find_max([2, 4, 6, 8]))"
Convert the following code code from C# to Python,"age = 32
if age > 18 and age < 65:
    print('You are an adult!')"
Design a Python program to compute the sum of the digits of a number.,"def sum_of_digits(n):
    r = 0
    while (n > 0):
        r += n % 10
        n //= 10
    return r

print(sum_of_digits(123)) # 6"
Create an AIX application using Python that takes in user text and returns an appropriate response.,"import gpt_2_simple as gpt2

# Load the GPT-2 model
sess = gpt2.start_tf_sess()
gpt2.load_gpt2(sess, run_name='run1')

# Generate a response text
generated_text = gpt2.generate(sess,
 temperature=0.7,
 prefix=""I'm feeling sad."",
 length=30,
 return_as_list=True
)[0]

# Print the response
print(generated_text)"
Implement a function in Python to find the prime numbers between 1 and a given max value,"def find_primes_less_than(max_value):
    primes=[]
    for num in range(2, max_value + 1):
        is_prime = True
        for i in range(2, num):
            if (num % i == 0):
               is_prime = False
        if is_prime:
            primes.append(num) 
    return primes"
Create a function in Python that takes a number n and returns the sum of its digits.,"def sum_of_digits(n):
    sum = 0
    while n:
        sum += n % 10
        n //= 10
    return sum

print(sum_of_digits(378))"
Create a Python program to edit a given string by removing all space characters.,"def remove_spaces(string): 
	return """".join(string.split()) 

# Driver code 
string = ""this is a sample sentence""
print(remove_spaces(string))"
Develop an algorithm in Python to identify a sub-sequence in a larger given sequence.,"def subsequence(seq, sub):
    if sub == """":
        return True
    
    sub_index = 0
    sequence_length = len(seq)
    sub_length = len(sub)
    
    for index in range(sequence_length):
        if sub[sub_index] == seq[index]:
            sub_index +=1
            if sub_index == sub_length:
                return True
    return False"
"Generate a Python program that accepts an integer, n, and prints a right triangle made of asterisks with the base of n.","n = int(input(""Enter an integer: ""))
for i in range(n):
    for j in range(i + 1):
        print(""*"", end="""")
    print("""")"
"Write a Python program that will generate a random password of length 10 containing numbers, lowercase letters, and uppercase letters.","import random
import string

length = 10
chars = string.ascii_letters + string.digits
password = ''.join(random.choice(chars) for i in range(length))

print(password)"
Develop a computer vision system for a specific application.,Create a Python script that can recognize the presence of a person in a given frame of an image/video. The script should incorporate a trained computer vision model that can detect human faces or other characteristics that can be used to differentiate a person from other objects.
Design a program in Python to identify and delete the duplicate elements from a given list of numbers.,"def deleteDuplicateElements(arr):
    uniqueList = []
    for elem in arr:
        if elem not in uniqueList:
            uniqueList.append(elem)
    return uniqueList
  
result = deleteDuplicateElements([1, 2, 4, 2, 3, 4, 5])
print(result)"
"Beginning with a Python list of two names, edit the list code to include a third name.","names = [""John"", ""Mary"", ""Lucas""]"
Write a function in Python to check if an integer is prime or not.,"def is_prime(number):
  if number < 2:
    return False
  else:
    for x in range(2, number):
      if number % x == 0:
        return False
    return True

n = 37
print (is_prime(n)) # Output: True"
Calculate the area of a circle using a Python program,"import math

def areaOfCircle(radius):
    area = round(math.pi * (radius ** 2), 2)
    return area

area = areaOfCircle(7)
print(area)"
Upload a webpage to a web server using a Python program.,"import requests

url = 'http://<web server address>'
file = {'webpage': open('index.html', 'rb')}

response = requests.post(url, files=file)

print(response.status_code)"
Design a Python program to remove a specified element from a list.,"def remove_element(list, element):
  return [ el for el in list if el != element]
	 
list = [1, 2, 3, 4, 5]
	
list = remove_element(list, 4)
	
print(list)"
"Create a Python script to print characters from the ""abcd"" string until the total of characters printed reaches 50.","string = ""abcd""
count = 0
while count < 50:
    for ch in string:
        print(ch)
        count += 1
    if count >= 50:
        break"
"Given a list of strings, write a python program to check if all of the strings are palindromes.","def palindrome_checker(strings):
    is_palindrome = True
    for string in strings:
        if string  != string[::-1]:
            is_palindrome = False
            break
    return is_palindrome

strings = ['abba', 'bob', 'acca']

print(palindrome_checker(strings))"
Write an algorithm in Python to find the exponentiation of a given base and an exponent.,"def pow(base, exponent): 
    result = 1
    for i in range(exponent): 
        result = result * base 
    return result 

base = 2
exponent = 4
print('The result of {}^{} is {}'.format(base, exponent, pow(base, exponent)))"
Write a function to merge two dictionaries.,"def merge_dict(d1,d2):
 d = d1.copy()
 d.update(d2)
 return d"
Construct a code in Python to remove the whitespaces in a given string.,"def remove_whitespaces(s):
    return """".join(s.split())"
Create a Python class for a basic calculator that performs addition and subtraction.,"class Calculator:
    def __init__(self):
        pass
    
    def add(self, a, b):
        return a + b
    
    def subtract(self, a, b):
        return a - b
    
calc = Calculator()
print(calc.add(10, 5)) # 15
print(calc.subtract(10, 5)) # 5"
Design a Python class that can store the properties of a person.,"class Person:
    def __init__(self, name, age, gender, address):
        self.name = name
        self.age = age
        self.gender = gender
        self.address = address
    
    def get_name(self):
        return self.name
    
    def get_age(self):
        return self.age 
    
    def get_gender(self):
        return self.gender
    
    def get_address(self):
        return self.address"
Write a Python function that takes a list as an input and returns the largest element.,"def maximum(list):
    return max(list)

list = [8, 5, 2, 4, 9]
result = maximum(list)
print(result)"
How would you set up a tree structure in Python with three levels and the ability to add nodes to the structure?,"class TreeNode:
    def __init__(self, data):
        self.data = data
        self.children = []

    def add_child(self, child):
        self.children.append(child)

root = TreeNode(1)
level_one = TreeNode(2)
level_two = TreeNode(3)

root.add_child(level_one)
level_one.add_child(level_two)"
Write a python program to concatenate strings within a given list and join them using a space.,"''.join(str(x) for x in [""Hello"", ""World""])"
Write a recursive function in Python to compute the n-th Fibonacci number,"def Fibonacci(n):
    if n <= 1:
        return n
    else:
        return (Fibonacci(n-1) + Fibonacci(n-2))"
"Given the following array of strings, write a Python code snippet to remove all punctuation marks.","strings = ['hello!', 'hey,', 'where, are, you?', 'I am here']
strings = [s.replace("","", """").replace(""?"", """").replace(""!"", """") for s in strings]
print(strings)"
Build an abbreviation dictionary in Python.,"abbreviations = {
    'AD': 'advertisement',
    'ASAP': 'as soon as possible',
    'ATM': 'automated teller machine',
    'AV': 'audio-visual',
    'CEO': 'chief executive officer'
    # Add more abbreviations and meanings
}"
Create a Python script to print the first 20 elements of the Fibonacci sequence.,"# Function to print first n fibonacci numbers 
def fibonacci(n): 
    f1 = 0
    f2 = 1
    print(f1, f2, end = "" "") 
    for x in range(2, n): 
        next_el = f1 + f2 
        print(next_el, end = "" "") 
        f1 = f2 
        f2 = next_el 
  
# Driver code 
n = 20
fibonacci(n)"
Find the index of a given element from a list in Python,"def index_of(arr, ele):
    for i in range(len(arr)):
        if arr[i] == ele:
            return i
    return -1"
Write a python function to find the maximum of two number without using a maximum function.,"def find_max(a, b):
    if a > b:
        return a
    else:
        return b"
Generate a function in Python to get the most frequent element in an array.,"def most_frequent(arr):
    max_count = -1
    max_elem = -1
    count_dict = {}
    for ele in arr:
        if ele in count_dict:
            count_dict[ele] += 1
        else:
            count_dict[ele] = 1
        if count_dict[ele] > max_count:
            max_count = count_dict[ele]
            max_elem = ele
    return max_elem"
Create a Python script to find all subsets of a given set.,"def all_subsets(s):
    subsets = []
    for i in range(2**len(s)):
        bitmask = bin(i)[2:]
        subset = []
        for j in range(len(s)):
            if bitmask[j] == ""1"":
                subset.append(s[j])
        subsets.append(subset)
    return subsets"
Write a Python program to find all possible anagrams from a given set of words.,"from itertools import permutations 

def possible_anagrams(words): 
    anagrams = set() 
    for word in words: 
        perm_words = [''.join(perm) for perm in permutations(word)] 
        for perm_word in perm_words: 
            if perm_word in words: 
                anagrams.add(perm_word) 
    return anagrams 

possible_anagrams(words)"
"Create a simple Python script that takes a single command-line parameter and prints out ""Hello <parameter>"" to the console.","import sys

name = sys.argv[1]
print(""Hello {}"".format(name)) # Output: Hello John"
Construct a Python program that uses a Decision Tree to classify a given dataset.,"import pandas as pd
from sklearn import datasets
from sklearn import tree

data = pd.read_csv('data.csv')

# Split the data
X = data.drop('target', axis=1)
y = data['target']

# Train the model
clf = tree.DecisionTreeClassifier()
clf.fit(X, y)

# Test the model
y_pred = clf.predict(X)

# Evaluate accuracy
accuracy = metrics.accuracy_score(y, y_pred)
print('Accuracy:', accuracy)"
Create a Python function that takes two arrays of numbers and calculates their dot product.,"def dot_product(list1, list2):
 result = 0
 for i in range(len(list1)):
  result += list1[i] * list2[i] 
 return result

list1 = [2,4,6]
list2 = [3,4,5]
dot = dot_product(list1, list2)
print('Dot product of two lists =', dot) # Dot product of two lists = 46"
"Fix the errors in this piece of Python code to make this correctly output ""1 2 3 4 5"".","the_list = [1,2,3,4,5]

for i in range (len(the_list)):
    print(the_list[i])"
Generate code to encrypt a message using the AES algorithm in Python.,"from Crypto.Cipher import AES

key = b'0123456789ABCDEF'

def encryptAES(message):
 cipher = AES.new(key, AES.MODE_ECB)
 ciphertext = cipher.encrypt(message)
 return ciphertext
 
message = b'Encrypt this message'
encrypted_message = encryptAES(message)
print(encrypted_message)"
Write a Python function to get all possible unique subsets from a set of distinct integers.,"def get_unique_subsets(integers):
    subsets = []
    for subset in itertools.chain.from_iterable(itertools.combinations(integers, r) for r in range(len(integers) + 1)):
        subsets.append(list(subset))
    return list(set(map(tuple, subsets)))"
Write a function in Python that parses a given string and extracts the numbers from it.,"def extract_numbers(string):
    numbers = []
    for char in string:
        if char.isdigit():
            numbers.append(int(char))
    return numbers"
Develop a Python program that takes in an URL and extracts all the text content from the page.,"import requests
from bs4 import BeautifulSoup

url = 'https://www.example.com/'

page = requests.get(url)
html = BeautifulSoup(page.content, 'html.parser')

texts = []
for txt in  html.find_all('p'):
    texts.append(txt.text)

print(texts)"
Generate a Python program to convert a given number from one base to another.,"def base_conversion(n, from_base, to_base):
    # convert from base-10 to from_base
    rems = []
    while n > 0:
        rem = n % from_base
        rems.append(rem)
        n //= from_base

    # convert from from_base to to_base
    result = 0
    for rem in rems[::-1]:
        result *= from_base
        result += rem 
    return result"
Generate a code snippet in Python to reverse the order of a list.,"list = [10, 20, 30, 40, 50] 
  
# reversing the list 
list.reverse() 
  
# printing the reversed list 
print (""The reversed list is : "" +  str(list))"
Create a Python generator to generate an infinite sequence of a given number.,"def generate_infinite_sequence(num):
    while True:
        yield num

for n in generate_infinite_sequence(5):
    print(n)"
Create a lambda expression to return the square of the given number in Python.,"# Lambda expression to return the square of the given number 
square = lambda x: x * x 
  
# calling the lambda expression  
result = square(5) 
  
#Printing the result 
print(result) 

# Output: 25"
Write a Python program to compare two lists and return the differences as a new list.,"list1 = [1, 3, 4, 5] 
list2 = [2, 4, 6, 8]

diff = []

for item in list1: 
 if item not in list2: 
 diff.append(item) 

for item in list2: 
 if item not in list1: 
 diff.append(item) 

print(diff) # [1, 3, 6, 8]"
"Create an application in Python for encryption and decryption of strings. The application should take a string as input, and use a cipher text algorithm of choice to encrypt the string.","from Crypto.Cipher import AES

key = b'Sixteen byte key'

def encrypt(plaintext):
    cipher = AES.new(key, AES.MODE_ECB)
    return cipher.encrypt(plaintext)

def decrypt(ciphertext):
    cipher = AES.new(key, AES.MODE_ECB)
    return cipher.decrypt(ciphertext)"
Write a Python program to find the sum of natural numbers less than 500 that are multiples of 3 or 5.,"def sum_multiples(max_num):
    values = []
    for i in range(1, max_num):
        if i % 3 == 0 or i % 5 == 0:
            values.append(i)
    return sum(values)

result = sum_multiples(500)
print(result)"
Create a program in Python that outputs the kth smallest element in a given list of numbers.,"list = [15, 28, 12, 7, 9] # List of numbers
k = 4 # kth smallest element

sorted_list = sorted(list) # sorting the list of numbers

print(""The {}th smallest element is {}"".format(k, sorted_list[k-1])) # print the kth smallest element in the sorted_list using the index (k-1)"
Write a Python function that computes the average of 3 numbers.,"def average(a, b, c):
    return (a + b + c) / 3.0

print(average(1,2,3)) # Output: 2.0"
Write a Python script to generate a password using random characters and numbers.,"import random
import string

def generate_password():
 password = ''.join(random.choices(string.ascii_letters + string.digits, k=8))
 return password

print(generate_password())"
Write a python script to flatten a given nested list.,"def flatten_list(input_list):
    flattened_list = []
    for i in input_list:
        if isinstance(i, list):
            flattened_list.extend(flatten_list(i))
        else:
            flattened_list.append(i)
    return flattened_list

input_list = [[1,2,3], [4,[5,6]]]
flattened_list = flatten_list(input_list)
print(flattened_list)"
Calculate the factorial of a given number using a Python program.,"def factorial(n):
 if n == 0:
 return 1
 else:
 return n * factorial(n-1)"
Generate a Python program to print out the even numbers from a given list.,"list = [1,2,3,4,5,6,7,8,9] 

for num in list: 
    if num % 2 == 0: 
       print(num, end = "" "")"
Evaluate a given mathematical expression using Python.,"def eval_expr(expr):
  return eval(expr)

print(eval_expr(""2 + (3 * 5)""))

# Output
# 17"
Write a function to determine if there is a subset of the given set with sum equal to the given sum.,"def is_subset_sum(set, n, sum):
	if (sum == 0):
		return True
	if (n == 0):
		return False
	if (set[n - 1] > sum):
		return is_subset_sum(set, n - 1, sum)
	return is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])"
Create a python function that takes in a list of strings and returns a list with all the strings stripped of unwanted whitespace.,"def strip_whitespace(lst):
    return [string.strip() for string in lst]"
"Compose an editor program, in Python code, to remove all the duplicate words from a given sentence.","def remove_duplicates(sentence): 
    words = sentence.split() 
    words_without_duplicates = [] 
    for i in words: 
        if i not in words_without_duplicates: 
            words_without_duplicates.append(i) 
  
    return "" "".join(words_without_duplicates)"
Write a python program to generate the Fibonacci sequence of 'n' numbers,"def generate_fibonacci(n): 
    fib_list = [0, 1] 
    for i in range(2, n): 
        fib_list.append(fib_list[i - 2] + fib_list[i - 1]) 
    
    return fib_list[:n]"
Generate a Python function to parse a JSON data structure.,"import json

def parse_json(data):
 data = json.loads(data)
 return data['name'], data['age'], data['occupation']

name, age, occupation = parse_json(data)
print(name, age, occupation)
# Output: John 18 Software Engineer"
Construct an algorithm in Python to sort an array of integer in ascending order using the insertion sort method.,"def insertion_sort(arr):
    for i in range(len(arr)):
        cursor = arr[i]
        pos = i

        while pos > 0 and arr[pos - 1] > cursor:
            # Swap the number down the list
            arr[pos] = arr[pos - 1]
            pos = pos - 1
        # Break and do the final swap
        arr[pos] = cursor

    return arr"
Write a Python program to find all numbers divisible by sixteen from a given list of numbers.,"list_numbers = [20, 16, 5, 6, 26, 48]

divisible_numbers = []
for number in list_numbers:
    if number % 16 == 0:
        divisible_numbers.append(number)

print(divisible_numbers)"
Write a Python program to print the maximum number from a given list.,"def max_num(nums):
    max = nums[0]
    for num in nums[1:]:
        if num > max:
            max = num
    return max

nums = [5, 4, 2, 7, 12]
print(max_num(nums))"
Write a Python program to generate a dictionary that holds the count of each character present in a given string.,"def char_count(str): 
 result = {}
 for char in str: 
  if char in result:
  result[char] += 1
  else:
  result[char] = 1
 return result

result = char_count(""Programming"")
print(result)"
Write a Python program to convert an integer number to words.,"from num2words import num2words

def int_to_words(num):
    return num2words(num)"
Generate code in Python create an array of 100 random integers between 1 to 1000.,"import random

# Create an array of 100 random integers between 1 to 1000
array = [random.randint(1, 1000) for i in range(100)]
print(array)"
"Create a Python script that takes in a list of numbers and calculates the sum, mean, and median.","my_list = [1, 2, 3, 4, 5]

sum_list = sum(my_list)
mean_list = sum_list / len(my_list)

my_list.sort()
middle_index = int(len(my_list) / 2)

if len(my_list) % 2 == 0:
 median_list = (my_list[middle_index] + my_list[middle_index - 1]) / 2
else:
 median_list = my_list[middle_index+1]

print('sum', sum_list)
print('mean', mean_list)
print('median', median_list)"
Come up with a python script to retrieve the last occurrence of an element in a list,"def last_occurence(arr, x):
    last_index = -1
    for i in range(len(arr)):
        if arr[i] == x:
            last_index = i
    return last_index

print(last_occurence([3, 4, 5, 5, 9, 6, 5], 5))"
Create a Python function that takes a string and a number as arguments. The function replaces all digits in the string with the supplied number.,"def replace_digit(str, num):
    new_str = """"
    for char in str:
        if char.isnumeric():
            new_str += str(num)
        else:
            new_str += char
    
    return new_str

new_str = replace_digit(str, num)
print(new_str)"
Write a function in Python to check if a given string is a palindrome.,"def is_palindrome(input):
 s = input.lower()
 return s == s[::-1]

print(is_palindrome(""racecar"")) # True"
Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.,"from itertools import combinations_with_replacement 
def combinations_colors(l, n):
    return list(combinations_with_replacement(l,n))"
Create a Python program that prints all numbers from 1 to 10 in reverse order.,"for i in range(10, 0, -1):
    print(i)"
Create a script in Python to apply Principal Component Analysis (PCA) on a given dataset.,"from sklearn.decomposition import PCA

# define a 3x3 matrix 
matrix_data = dataset 
pca = PCA(n_components=2) 

# transform 3x3 matrix into 2x2 matrix 
transformed_data = pca.fit_transform(matrix_data) 

print(transformed_data)"
Edit the following Python program to implement try and except,"try:
 a = 10
 b = 0
 c = a/b
except ZeroDivisionError:
 print(""Error: Cannot divide by zero"")"
"Given a list of numbers in an array, write a Python program to find the sum of the elements of the array.","def sum_elements(arr):
 result = 0
 for i in arr:
 result += i
 return result

print(sum_elements([1,2,3,4,5]))"
Create a Python program that takes in a list of strings and prints out the items that appear more than once.,"from collections import Counter

def duplicates(items):
    c = Counter(items)
    for k, v in c.items():
        if v > 1:
            print(k)

items = [""red"", ""green"", ""blue"", ""red"", ""yellow""]
duplicates(items)"
Generate a random password that contains 10 digits in Python.,"import random

def generate_password():
  data = ""0123456789""
  length = 10
  password = """".join(random.sample(data, length))
  return password

print(generate_password())"
Write a function in Python to search for a character in a given string.,"def serach_char(input_str, char):
  for char in input_str:
    if char == input_char:
      return True
  return False"
Solve the given Roman numerals equation using your preferred programming language.,"Python:
romans = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}

def solve_roman(eq):
    result = 0
    for char in eq:
        result += romans[char]
    return result

print(solve_roman(""MMVII"" - ""MDCCLIV""))

Output: 823"
Develop a program using Python to replace all the non-alphanumeric characters in a given string with an asterisk ('*')?,"import re

def replaceNonAlphanum(s):
    pattern = r""[^a-zA-Z0-9]""
    return re.sub(pattern, ""*"", s)

s = ""Hello* World_$!""
print(replaceNonAlphanum(s))
// Output: Hello** World**$*"
Create a function in Python that takes a string as an input and replaced all characters in the string with the corresponding index position in the string.,"def indices_replace(string):
  string_indices = ''
  for index, value in enumerate(string):
    string_indices += str(index)
  return string_indices"
Write a Python program to take an integer n and return the nth most frequent element in a list.,"def find_nth_most_frequent(n, data):
    counts = {}
    for element in data:
        if element in counts:
            counts[element] += 1
        else:
            counts[element] = 1
    
    sorted_counts = sorted(counts.items(), key=lambda x: x[1])
    return sorted_counts[-n][0]"
Rewrite the following Python program that calculates the factorial of a given number n into Java.,"public class Factorial {
    public static int factorial(int n) {
        if (n == 0) {
            return 1;
        } else {
            return n * factorial(n-1);
        }
    }
    
    public static void main(String[] args) {
        System.out.println(factorial(5));
    }
}"
Generate a script in Python that takes in a collection of numbers and returns a collection of the same numbers sorted in ascending order.,"def sortCollection(arr):
    sortedArr = arr.sort()
    return sortedArr"
Write a Python program to find the longest string in a list of strings.,"longest_string = """"
for string in string_list:
    if len(string) > len(longest_string):
        longest_string = string

print(longest_string)"
You have a list of numbers. Write a function in Python that multiplies each number by 2.,"def multiplyBy2(nums):
 return [num * 2 for num in nums]"
Create a Python program to calculate the total cost of a shopping cart given the prices of different items and their quantity.,"prices = [12, 10, 5, 8] 
quantities = [1, 2, 3, 4]
 
total_cost = 0

for i in range(len(prices)):
    total_cost += prices[i] * quantities[i]

print(total_cost)"
Use regex in Python to extract all the words in a string and calculate the total number of words in the string.,"import re

text = ""This is an example string""
words = re.findall(r'\w+', text)
print(""Total words: "" + str(len(words)))"
Create a Python lambda expression to return all strings that longer than 5 characters long.,"words = [""hello"", ""world"", ""foobar""] 
filtered_words = list(filter(lambda x: len(x) > 5, words)) 
print(filtered_words) # ['world', 'foobar']"
Implement an algorithm to call a web service using Python.,"import requests

def call_web_service(url):
    # send a GET request
    response = requests.get(url) 
  
    # check for HTTP codes other than 200
    if response.status_code != 200: 
        raise Exception('Failed to get data:', response.status_code) 
  
    # return the data 
    return response.json()"
Develop a Python program to join two given sets.,"def union_sets(set_one, set_two):
    union_set = set_one | set_two
    return union_set"
Implement a sorting algorithm in Python to sort an array of integers.,"def sort_array(arr): 
 n = len(arr) 
  
# Traverse through all array elements 
for i in range(n): 
  
 # Last i elements are already in place 
 for j in range(0, n-i-1): 
  
  # traverse the array from 0 to n-i-1 
  # Swap if the element found is greater 
  # than the next element 
  if arr[j] > arr[j+1] : 
   arr[j], arr[j+1] = arr[j+1], arr[j]"
"Can you modify the provided code in Python to prompt the user to enter their name, and then greet the user?","name = input(""Please enter your name: "")

print(""Hello "" + name + ""!"")"
Write a python function to find the sum of fourth power of first n odd natural numbers.,"def odd_Num_Sum(n) : 
    j = 0
    sm = 0
    for i in range(1,n + 1) : 
        j = (2*i-1) 
        sm = sm + (j*j*j*j)   
    return sm "
"Create a Python program to calculate the simple interest given the principal amount, rate of interest and time.","def simple_interest(p,r,t): 
  return (p * r * t)/100"
Write a function to check whether the given ip address is valid or not using regex.,"import re 
regex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.( 
			25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.( 
			25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.( 
			25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''
def check_IP(Ip): 
	if(re.search(regex, Ip)): 
		return (""Valid IP address"") 
	else: 
		return (""Invalid IP address"") "
Write a python function to check whether the given number is co-prime or not.,"def gcd(p,q):
    while q != 0:
        p, q = q,p%q
    return p
def is_coprime(x,y):
    return gcd(x,y) == 1"
Design a program in Python to reverse a given string.,"def reverse_string(string): 
  rev_str = ''
  idx = len(string) 
  while idx > 0: 
    rev_str += string[idx-1] 
    idx -= 1
  return rev_str"
Write a small program in Python to print the total sum of first n even numbers.,"n = int(input(""Enter a number: ""))

total = 0
for i in range(2, (2*n)+1, 2):
    total += i
    
print(""The sum of first"", n, ""even numbers is"", total)"
Write a Python function to calculate the difference between two given dates.,"def date_diff(date1, date2):
    date1_stamp = time.mktime(datetime.strptime(date1, ""%d/%m/%Y"").timetuple())
    date2_stamp = time.mktime(datetime.strptime(date2, ""%d/%m/%Y"").timetuple())
    difference = abs(date1_stamp - date2_stamp)
    return int(difference/(24*60*60))"
Generate a Python function that takes an array of integers as input and returns an array of integers with the positive numbers appearing before the negative numbers.,"def sort_positives_negatives(arr):
  positives = []
  negatives = []
  for x in arr:
    if x < 0:
      negatives.append(x)
    else:
      positives.append(x)
  return positives + negatives

result = sort_positives_negatives([-5, 2, 7, -3, 4, 9])
print(result)"
Write a Python program to fill an array with random numbers and generate a random index.,"import random

# Create an empty array
array = []

# Fill the array with random numbers
for i in range(10):
    array.append(random.randrange(10))

# Generate a random index
index = random.randrange(10)

# Print the numbers and the index
print(array)
print(""Random Index:"", index)"
"Given a text string, write a Python program to count the number of words in the string.","def count_words(string):
  words = string.split()
  return len(words)

string = ""Python is a powerful programming language""
print(count_words(string))"
Write a function to count the number of sublists containing a particular element.,"def count_element_in_list(list1, x): 
    ctr = 0
    for i in range(len(list1)): 
        if x in list1[i]: 
            ctr+= 1          
    return ctr"
"In Python, create a class that can be used to store employee details such as their salary, name, and job assignment.","class Employee: 
    def __init__(self, name, salary, job_assignment): 
        self.name = name 
        self.salary = salary
        self.job_assignment = job_assignment
  
    # other methods here"
"Generate a function in Python that takes two parameters: ‘x’ and ‘y’ and prints the output as “x is greater than y” when x is greater than y, otherwise “y is greater than or equal to x”.","def print_comparison(x, y):
 if x > y:
 print(f'{x} is greater than {y}')
 else:
 print(f'{y} is greater than or equal to {x}')"
Create a list of ten random numbers in Python.,"import random

random_numbers = [random.randint(1,50) for _ in range(10)]"
Write a function in Python that takes two arguments—a string and a positive integer n—and returns a list of size n containing the string repeated n times.,"def repeat_string(string, n):
     return [string]*n
     
# example
print(repeat_string(""Hello"", 4)) 
# Output: ['Hello', 'Hello', 'Hello', 'Hello']"
Write a Python program to sort a given list in ascending order of the length of each element.,"def sortList(numbers): 
    numbers.sort(key = len) 
    return numbers 

numbers = sortList(numbers) 
print(numbers)

# Output: [4, 8, 1, 7, 9, 16]"
Modify the following Python script to prevent timing attack.,"def login(username, password):
    hashed_password = hashlib.sha256(password.encode('utf-8')).hexdigest()
    if username in users and users[username] == hashed_password:
        return True
    else:
        return False"
Write a Python program to make a deep copy a given dictionary.,"import copy 

def deep_copy_dictionary(dictionary): 
 deep_copy = copy.deepcopy(dictionary) 
 return deep_copy

data = {""name"": ""John"", ""age"": 28}

result = deep_copy_dictionary(data)
print(result)"
Write a Python program to print the given list after removing even numbers from it.,"list_odd = [] 
for num in [3, 5, 7, 4, 8, 10]:
    if num %2 != 0:
        list_odd.append(num)
        
print(list_odd)"
Create a function in Python to convert a string to a list of words.,"def convert_to_list(string):
    return string.split()

string = ""Hello, World!""
words_list = convert_to_list(string)
print(words_list)"
Write a function in Python to print out an array backwards.,"def print_reverse_array(arr):
 for i in range(len(arr)-1, -1, -1): 
  print(arr[i])"
"Create a class in Python that inherits from the given base class, and implements the given interface.","class Animal:
    def __init__(self, name):
        self.name = name

class Cat(Animal):
    def eat(self, food):
        print(""{} is eating {}!"".format(self.name, food))"
Write a Python program to filter out unique elements from an array.,"arr = [3, 6, 3, 2, 7, 5, 6]

def unique_elements(arr):
  return list(set(arr))

unique_arr = unique_elements(arr)
print(unique_arr)"
Write a script in Python to sort a given list of numbers according to their occurrence in the list.,"def sort_by_occurrence(unsorted_list):
    d = {}
    for num in unsorted_list:
        d[num] = d.get( num, 0 ) + 1
    sorted_list = sorted(d, key=d.get, reverse=True)
    return sorted_list"
Write a python function to find the minimum number of rotations required to get the same string.,"def find_Rotations(str): 
    tmp = str + str
    n = len(str) 
    for i in range(1,n + 1): 
        substring = tmp[i: i+n] 
        if (str == substring): 
            return i 
    return n "
"Write a function in Python that will take two input strings, concatenate them, and return the reversed string.","def reverseString(s1, s2):
 s = s1 + s2
 return s[::-1]

reverseString(string1, string2)
# Result: dlroW olleH"
Generate a program to sort a list of numbers using Insertion Sort algorithm in Python.,"def insertionSort(arr):
	for i in range(1, len(arr)):
		current = arr[i]
		j =i-1
		while j>=0 and arr[j]>current:
			arr[j+1] = arr[j]
			j-=1
		arr[j+1] = current
	return arr

if __name__ == '__main__':
	arr = [2, 4, 7, 3, 8, 6, 1]
	print(insertionSort(arr))"
Determine the type of the following python object.,list
Implement a function f() in Python that takes an argument n and prints the multiplication table of n,"def f(n):
    for i in range(1, 11):
        print(""{} * {} = {}"".format(n, i, n*i))"
Create a Python script to remove specific items from a given list of strings.,"strings = [""apple"", ""orange"", ""banana"", ""grape""]
words_to_remove = [""apple"", ""grape""]

# Using list comprehension
filtered_list = [word for word in strings if word not in words_to_remove] 

# Output
print(filtered_list)

# Output
['orange', 'banana']"
Generate a Python code that prints the following sequence of characters ( ABCDEFGHIJ ).,"# Create an empty string 
seq = """"

# Loop through the alphabet 
for i in range(65, 75):
    # Convert the ASCII code to a character 
    seq += chr(i)
# Print the output 
print(seq)"
Translate the following code snippet from Java to Python.,"def helloWorld():
    print(""Hello World!"")"
Write Python code to determine whether or not a given string contains a valid IP address.,"import re

def is_ip_valid(ip):
    pattern = r""^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$""
    if re.match(pattern, ip):
        return True
    else:
        return False

print(is_ip_valid(""192.168.0.1""))"
Generate a database schema for a given set of sample data.,"CREATE TABLE IF NOT EXISTS users (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  name TEXT NOT NULL,
  skills TEXT NOT NULL,
  location TEXT NOT NULL
);

INSERT INTO users (name, skills, location)
VALUES ('John', 'Python, HTML, CSS', 'Europe'),
('Jim', 'Java, Bash, Go', 'Asia');"
Create a loop in Python that executes 100 iterations.,"for i in range(100):
    # do something"
Optimize the following python program such that it reaches an O(logN) complexity,"def power(x, n): 
 if (n == 0): 
 return 1
 elif (n % 2 == 0): 
 y = power(x, n / 2) 
 return y * y
 else:
 y = power(x, (n - 1) / 2) 
 return x * y * y"
Create a function in Python to convert a given string to its corresponding ASCII code.,"def to_ascii(s): 
  ascii_list = [] 
    
  # traverse the string character 
  # by character  
  for char in s: 
      # cast each character into its corresponding ASCII code value 
      ascii_list.append(ord(char)) 
      
  return ascii_list"
Devolop a Python code to remove the duplicates from a given list and sort them in ascending order.,"my_list = [2, 8, 5, 2, 6, 3, 4]
my_list = list(dict.fromkeys(my_list))
my_list.sort()
print(my_list) # [2, 3, 4, 5, 6, 8]"
Create a python program that outputs the value of two different randomly generated numbers that added up to 25.,"from random import randint

num_1 = randint(1, 24)
num_2 = 25 - num_1

print(num_1)
print(num_2)"
Design a python program that reads a list of numbers and prints the number of even numbers,"# Get list of numbers
numbers = [1, 2, 3, 4, 5, 6, 7, 8]

# Initialize a count
count = 0

# Iterate through the list of numbers and count the even numbers
for num in numbers:
    if num % 2 == 0:
        count += 1

# Print the result
print(f""The number of even numbers is: {count}"")"
Write a Python function to return the GCD (Greatest Common Denominator) of two integers.,"def gcd(num_1, num_2):
  if num_2 == 0:
    return num_1
  return gcd(num_2, num_1 % num_2)"
Generate a Python function that takes in a string x and returns a substring of x that is the longest palindrome.,"def longest_palindrome(x):
    longest = ''
    for i in range(len(x)):
        j = i + len(longest) + 1
        while j <= len(x):
            substring = x[i:j]
            if substring == substring[::-1] and len(substring) > len(longest):
                longest = substring
            j = j + 1
    return longest"
Write a function to remove consecutive duplicates of a given list.,"from itertools import groupby
def consecutive_duplicates(nums):
    return [key for key, group in groupby(nums)] "
Take a given Python dictionary and transform it to a standardized format using JSON.,"import json

my_dict = {
 'name': 'John Doe',
 'age': 42,
 'occupation': 'Programmer'
}

# Transform to JSON
my_json = json.dumps(my_dict)

print(my_json) # Output: {""name"":""John Doe"",""age"":42,""occupation"":""Programmer""}"
Develop a sorting algorithm in Python that can sort an array of integers in ascending order.,"def sort(arr):
  for i in range(len(arr)):
    for j in range(i+1, len(arr)):
      if arr[i] > arr[j]:
        arr[i], arr[j] = arr[j], arr[i]
  return arr

sort([2, 3, 1, 7, 5, 4])
# Output: [1, 2, 3, 4, 5, 7]"
Classify whether a given number is even or odd using Python.,"def is_even(n):
    if n % 2 == 0:
        return True
    else:
        return False"
Design a Python algorithm to generate a unique six-character alphanumeric string.,"import string
import random

def get_unique_string():
    characters = string.ascii_uppercase + string.digits
    return ''.join(random.choice(characters) for _ in range(6))

unique_string = get_unique_string()
print(unique_string)"
Create a Python script to read a given PDF document.,"import PyPDF2

# open and read the pdf file
file = open('document.pdf', 'rb')
reader = PyPDF2.PdfFileReader(file)

# read complete document
for page in range(reader.numPages):
    print(reader.getPage(page).extractText())

file.close()"
Create a Python program that reads user input and prints it out.,"name = input('Please enter your name: ')
print('Hello, ' +name)"
Write a python class to represent a circle,"class Circle:
  def __init__(self, radius):
    self.radius = radius
  
  def area(self):
    return 3.14 * (self.radius ** 2)
  
  def circumference(self):
    return 2 * 3.14 * self.radius
  
circle1 = Circle(10)
print(circle1.area())
print(circle1.circumference())"
Write a Python code snippet to create a user account with the given name and password.,"import bcrypt

name = ""John""
password = ""J0hnP455w0rd""
password_hash = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())

# Create user account in the database
# with the given name and hashed password
# ----------
# Code to store username and 
# hashed password in the database 
# ----------"
Write a Python program that takes a sentence as an input and outputs a list of words in it in reverse order.,"def reverse(sentence): 
    words = sentence.split("" "")   
    rev_words = words[::-1] 
    rev_sentence =' '.join(rev_words)  
    return rev_sentence"
Develop an optimized function to sort a list of elements using algorithms in Python,"def sort_list(arr):
    # Insertion sort algorithm
    for i in range(1, len(arr)):
        key = arr[i] 
        j = i-1
        while j >=0 and key < arr[j] : 
            arr[j+1] = arr[j] 
            j -= 1
        arr[j+1] = key 
    return arr

sorted_arr = sort_list([3, 9, 1, 4, 5])"
Create a Python program that will print the current date and time in the following format:,"import datetime
date = datetime.datetime.now()
print(""{:0>2}/{:0>2}/{} {:0>2}:{:0>2}"".format(date.day, date.month, date.year, date.hour, date.minute))"
Create a list comprehension in Python to extract the last two elements of a given list.,last_two_elements = [x[-2:] for x in lst]
Write a function in Python to replace multiple consecutive `1`s with just one `1`.,"def remove_consecutive(list_of_numbers):
    result = []
    last_number = None
    for number in list_of_numbers:
        if number != last_number:
            result.append(number)
            last_number = number
    return result"
Generate a list of all permutations of the letters in a given word using Python.,"import itertools

set_ABC = set(list('ABC'))
all_permutations = list(itertools.permutations(set_ABC))

# print all obtained permutations
{print(''.join(words)) for words in all_permutations}"
Construct a Python program to find the maximum of three numbers.,"def find_max(a, b, c):
    max_num = a
    if b > max_num:
        max_num = b
    if c > max_num:
        max_num = c
    return max_num"
Create a Python script that checks whether a given string is a palindrome.,"def isPalindrome(str): 
    # Run loop from 0 to len/2 
    for i in range(0, len(str)//2): 
        if str[i] != str[len(str)-i-1]: 
            return False
    return True
  
# main
myStr = ""malayalam""

ans = isPalindrome(myStr) 
  
if ans: 
    print(""The given string is a palindrome"") 
else: 
    print(""The given string isn't a palindrome"")"
"Create a Python program to generate a random password of 8 characters with 1 upper case, 1 lower case, 1 number, and 1 special character.","import string
import random

chars = string.ascii_uppercase + string.ascii_lowercase + string.digits + string.punctuation

def generate_password(size=8, chars=chars):
 return ''.join(random.choice(chars) for _ in range(size))

print(generate_password())"
Create a function to find the number of days between two dates in Python.,"import datetime

def days_between(start_date, end_date):
    '''This function takes two date objects and returns the number of days between them.'''
    return (end_date - start_date).days

start = datetime.date(2020, 1, 1) 
end = datetime.date(2020, 1, 5) 
days = days_between(start, end)
print(days) # 4"
Generate a Python program to implement the following sorting algorithm,"def bubble_sort(arr):
    n = len(arr)
    for i in range(n - 1):
        for j in range(i + 1, n):
            if arr[j] < arr[i]:
                arr[i], arr[j] = arr[j], arr[i]
    return arr"
Optimize the following python code using best practices,"def linear_search(arr, x):
    for index, item in enumerate(arr):
        if item == x:
            return index
    return -1"
Build a Python program to print out the 3 largest odd numbers in a given list.,"list_of_nums = [4, 7, -1, 2, 8, 5]

largest_odd_numbers = []

for num in list_of_nums:
    if num % 2 != 0 and len(largest_odd_numbers) < 3:
        largest_odd_numbers.append(num)

largest_odd_numbers.sort()
print (largest_odd_numbers)"
Create a Python program to calculate the grade for a student.,"Maths = 85
English = 70
Science = 90

# Calculate the average 
average = (Maths + English + Science) / 3

# Check the grade
if average >= 80:
    grade = 'A'
elif average >= 70:
    grade = 'B'
elif average >= 60:
    grade = 'C'
elif average >= 50:
    grade = 'D'
else:
    grade = 'F'

# Print the grade
print(grade)"
Program a function in Python 3 that takes a list of integers and returns a list with only the non-duplicate values.,"def uniqueVals(arr):
  uniqueValsArr = []
  for x in arr:
    if x not in uniqueValsArr:
      uniqueValsArr.append(x)
  return uniqueValsArr

mylist = [1, 2, 4, 1, 5, 7, 8, 2]
print(uniqueVals(mylist))

# Output: [1,2,4,5,7,8]"
Generate a Python program to transform the following string 'Welcome to GPT world!' into an all upper-case string.,"my_string = ""Welcome to GPT world!""
print(my_string.upper())"
Generate a Python script to generate all combinations of a list.,"import itertools

def combinations(list):
 comb = itertools.combinations(list, 2)
 return [list(x) for x in set(comb)]

list = [1, 2, 3]

result = combinations(list)

print(f'The list of combinations is {result}')"
"Create a simple Python script that prints out verses from the poem ""Twinkle Twinkle Little Star"".","#print the verses
print(""Twinkle, twinkle, little star,"")
print(""How I wonder what you are!"")
print(""Up above the world so high,"")
print(""Like a diamond in the sky."")
print(""Twinkle, twinkle, little star,"")
print(""How I wonder what you are!"")"
Re-write the following SQL query into Python code.,"# define the parameters for the query
column1 = 'value1'
column2 = 'value2'

# execute the query
result = table.objects.filter(column1=column1, column2=column2)"
Construct a regular expression in Python to find all consecutive digits in a sentence.,"import re 

str = ""There are 3 sets of consecutive numbers in this sentence: 12, 22 and 33.""

num_list = re.findall(r'\d+', str)
print(num_list)
# Output: ['3', '12', '22', '33']"
"Complete the code to print ""Hello, World!"" using Python.","print(""Hello, World!"")"
Generate a Python program to classify the types of letters contained in a string.,"def classify_letter_types(string):
    lowercase_letters = []
    uppercase_letters = []
  
    for letter in string:
        if letter.isupper():
            uppercase_letters.append(letter)
        else:
            lowercase_letters.append(letter)
    return {
        'lowercase_letters': lowercase_letters, 
        'uppercase_letters': uppercase_letters
    }"
Write a function to count the number of unique lists within a list.,"def unique_sublists(list1):
    result ={}
    for l in list1: 
        result.setdefault(tuple(l), list()).append(1) 
    for a, b in result.items(): 
        result[a] = sum(b)
    return result"
Write a function in Python that takes two strings s1 and s2 and returns s2 repeated s1 times.,"def repeat(s1, s2):
 n = int(s1)
 return s2 * n

print(repeat('3','hello'))
# Output: hellohellohello"
"Create a Python module that takes a given number and produces an output array with the numbers 0 to the given number, excluding the given number.","def exclude_number(n):
  return [i for i in range(0,n) if i < n]"
Edit a Python program so that it calculates the sum of two integers.,"# Program to add two numbers
num1 = 3
num2 = 5
print(num1 + num2)"
Create a class in Python to store details of books in a library,"class Book:
    def __init__(self, title, author, publisher, year):
        self.title = title
        self.author = author
        self.publisher = publisher
        self.year = year

    def getDetails(self):
        print(""Title: "", self.title)
        print(""Author: "", self.author)
        print(""Publisher: "", self.publisher)
        print(""Year: "", self.year)"
Rewrite the code below to use Python data structures.,"numbers_array = [5, 9, 3, 2, 6, 10]

for current_number in numbers_array:
 print(current_number)"
"Write a Python program to create a random password generator with a length of 8 characters. The password should contain a combination of uppercase letters, lowercase letters, numbers and special characters.","import random
import string

def generate_password():
 password_characters = string.ascii_letters + string.digits + string.punctuation
 return ''.join(random.choice(password_characters) for x in range(8))

print(generate_password())"
Write a Python function to create a sequence of numbers until the number 8,"def create_sequence():
    i = 0
    while i < 8:
        yield i
        i += 1"
Strengthen the following python code to make sure the input is a valid integer.,"def input_num():
    while True:
        try:
            num = int(input(""Insert a number:""))
            break
        except ValueError:
            print(""Please enter a valid integer."")
    return num"
Construct an algorithm in Python for calculating the median of a given list of numbers.,"def calculateMedian(numbers):
    n = len(numbers)
    if n % 2 == 0:
        num1 = numbers[n//2]
        num2 = numbers[n//2 - 1]
        median = (num1 + num2)/2
    else: 
        median = numbers[n//2]
    return median
        
numbers = [2, 4, 3, 5, 7]
median = calculateMedian(numbers)
print(""Median of list is:"", median)"
Create a generator function using Python to generate random numbers from 1 to 10.,"import random

def random_number_generator():
    return random.randint(1, 10)

for _ in range (10):
    print(random_number_generator())"
Create a Python program to create a dictionary whose keys are all of the unique characters in a text and the value is the number of times each character appears.,"def character_count(text):
    char_dict = {}
    for char in text:
        if char in char_dict:
            char_dict[char] += 1
        else:
            char_dict[char] = 1
    return char_dict

result = character_count(text)
print(result)"
Generate a Python decorator to remember the result of expensive computations.,"def memodecorator(func):
    cache = {}
    def decorated_func(*args):
        if args in cache:
            return cache[args]
        result = func(*args)
        cache[args] = result
        return result
    return decorated_func"
Optimize the given code using any of the data structure available in Python.,"def add(array):
    sum = 0
    
    for element in array:
        sum = sum + element
    return sum"
Design a Python program that takes a list of numbers and prints out the number with the highest value.,"def find_max(nums):
    max_num = nums[0]
    for num in nums:
        if num > max_num:
            max_num = num

    return max_num

nums = [1, 2, 300, 4, 5]

print(find_max(nums)) # 300"
Create a python code to remove all elements from a list using a for loop?,"def remove_elements(lst):
    for element in lst:
        lst.remove(element)"
Write a python program to rotate an array of size n by d elements,"def rotateArray(arr, d):
    
    result = []
    for i in range(len(arr)-d, len(arr)): 
        result.append(arr[i])
 
    for i in range(0, len(arr)-d):  
        result.append(arr[i])
 
    return result"
Design an API in Python to fetch location information using geopoints.,"# Import relevant modules
import requests
import json

# Url for API
URL = ""https://api.example.com/geocode""

# Create function to fetche location information
def get_location_info(lat, lon):
    PARAMS = {'lat': lat, 'lon': lon}
    response = requests.get(url=URL, params=PARAMS)
    output = json.loads(response.text)
    return output

# Call the function
location_info = get_location_info(lat, lon)"
Rewrite the given Python code to use list comprehension.,"arr = [3, 1, 2, 5, 4]
new_arr = [element for element in arr if element % 2 == 0]"
Design an algorithm in Python to detect fraud transactions in a dataset,"import numpy as np
 
def detect_fraud(data):
 anomalies = []
 mean = np.mean(data, axis=0)
 std = np.std(data, axis=0)
 
 for record in data:
 diff = np.abs(record - mean)
 is_anomaly = np.any(diff > 3 * std)
 if is_anomaly:
 anomalies.append(record)
 
 return anomalies"
Write a function to concatenate all elements of the given list into a string.,"def concatenate_elements(list):
  ans = ' '
  for i in list:
    ans = ans+ ' '+i
  return (ans) "
"Create a Python script to generate random passwords. The script should take one parameter, an integer representing the length of the password, and should return a random string of the specified length.","import string
import random

def generate_password(length):
 password = ''
 for i in range(length):
 password += random.choice(string.ascii_letters + string.digits)
 return password

print(generate_password(8))"
Create a Python program that encrypts a message using a Caesar cipher.,"def caesar_encrypt(message, shift):
    encrypted_message = """"
    for c in message:
        encrypted_c = ord(c) + shift
        if encrypted_c > 126:
            encrypted_c -= 94
        encrypted_message += chr(encrypted_c)
    return encrypted_message"
Write a python function to find the surface area of the square pyramid.,"def surface_Area(b,s): 
    return 2 * b * s + pow(b,2) "
"Create a Python method which takes a String and two integers as parameters, and returns the String with the characters between the integers reversed.","def reverse_substring(sentence, start, end):
    reversed = sentence[end:start-1:-1]
    return sentence[:start] + reversed + sentence[end+1:]

result = reverse_substring(""Hello world"", 0, 5)
print(result)"
Create a Python program that prints out a message if a given number is divisible by 7.,"num = 49

if num % 7 == 0:
    print(""The number %d is divisible by 7!"" %num)"
Design a class in Python that stores information about three sides of a triangle.,"class Triangle:
def __init__(self, side1, side2, side3):
 self.side1 = side1
 self.side2 = side2
 self.side3 = side3
 
def get_area(self):
 s = (self.side1 + self.side2 + self.side3) / 2
 return (s*(s-self.side1)*(s-self.side2)*(s-self.side3)) ** 0.5
 
def is_equilateral(self):
 return self.side1 == self.side2 == self.side3"
Create a WHILE loop in Python to print the numbers starting from 5 to 1.,"i = 5
while i > 0:
 print (i)
 i -= 1"
Develop an algorithm to find the maximum depth of a binary treeand generate a Python code for it.,"def max_depth(node):
  if node is None:
    return 0
  
  leftDepth = max_depth(node.left)
  rightDepth = max_depth(node.right)
  
  if leftDepth > rightDepth:
    return leftDepth + 1
  else:
    return rightDepth + 1"
Create a Python class to represent a student's grade information.,"class GradeInfo:
    def __init__(self, name, grade):
        self.name = name
        self.grade = grade
    
    def get_name(self):
        return self.name
    
    def get_grade(self):
        return self.grade"
Create a web API in Python Flask to compare two numerical values and return the greater one.,"from flask import Flask, jsonify, request

app = Flask(__name__)

@app.route('/compare', methods=['POST'])
def compare():
    data = request.get_json()
    value1 = data['value1']
    value2 = data['value2']

    greater_value = max(value1, value2)

    return jsonify({'greater_value': greater_value})

if __name__ == '__main__':
    app.run(debug=True)"
Python code to find out if a linked list has a loop,"def hasLoop(self): 
    if self.head is None: 
        return False 
  
    slow = fast = self.head 
    while(slow and fast and fast.next): 
        slow = slow.next
        fast = fast.next.next
        if slow == fast: 
            return True  
          
    return False"
"Create a new Python script that will print out the following statement: ""Hello, World!""","print(""Hello, World!"")"
Create a python library to generate a bar chart from a given set of data points.,"import matplotlib.pyplot as plt
 
# Data points
data = [5, 8, 9, 10, 12]
 
# Create bar chart
plt.bar(range(len(data)), data)
 
# Show bar chart
plt.show()"
"Create a Python script that parses a JSON string and complete the following tasks: (1) convert the string to an object, (2) sort the object by keys, and (3) print the object in a formatted way.","import json 

# Convert the string to an object 
data = json.loads('{""a"": 3, ""b"": 1, ""c"": 2}')

# Sort the object by keys 
sorted_data = {k: data[k] for k in sorted(data.keys())}

# Print the object in a formatted way 
print(json.dumps(sorted_data, indent=4))"
Create a Python class to store the properties and methods for a calculator.,"class Calculator():
    def __init__(self):
        self.current_sum = 0

    def add(self, value):
        self.current_sum = self.current_sum + value 

    def subtract(self, value):
        self.current_sum = self.current_sum - value

    def get_total(self):
        return self.current_sum"
Write a python function to find the largest negative number from the given list.,"def largest_neg(list1): 
    max = list1[0] 
    for x in list1: 
        if x < max : 
             max = x  
    return max"
Generate a python program that takes in a list and an integer and prints the element at index in the list,"def print_element(lst, index):
    print(lst[index])"
Write a python function to remove even numbers from a given list.,"def remove_even(l):
    for i in l:
        if i % 2 == 0:
            l.remove(i)
    return l"
"Write a function that takes in two strings, compares them, and returns the longer string.","def compareLongestString(str1, str2):
 
  if len(str1) > len(str2):
   longestString = str1
  elif len(str2) > len(str1):
   longestString = str2
  else:
   longestString = ""Strings have the same length""

  return longestString

print(compareLongestString(""Python"", ""C++""))"
Convert a given dictionary in Python to a list of tuples.,"my_dict = {'a': 1, 'b': 2, 'c': 3}
my_list = list(my_dict.items())

# Test
print(my_list) # [('a', 1), ('b', 2), ('c', 3)]"
Generate a correct python program to output the number of seconds in the future and in the past,"def calculate_seconds(minutes):
    return minutes * 60

future_seconds = calculate_seconds(60)
print(""The number of seconds in the future is "" + str(future_seconds))
past_seconds = calculate_seconds(-60)
print(""The number of seconds in the past is "" + str(past_seconds))"
Generate a Python script that updates all elements of a 1D numerical array by adding 10.,"def updateArray(arr): 
    for i in range(len(arr)):
        arr[i] += 10
    return arr

arr = [1, 2, 3, 4, 5]
arr = updateArray(arr)
print(arr)"
Write a python function to check if the string is a concatenation of another string.,"def check_Concat(str1,str2):
    N = len(str1)
    M = len(str2)
    if (N % M != 0):
        return False
    for i in range(N):
        if (str1[i] != str2[i % M]):
            return False         
    return True"
Write a python function to count integers from a given list.,"def count_integer(list1):
    ctr = 0
    for i in list1:
        if isinstance(i, int):
            ctr = ctr + 1
    return ctr"
Write a Python function to check if a given list contains any duplicate elements.,"def check_duplicates(A):
    seen = set()
    for elem in A:
        if elem in seen:
            return True
        seen.add(elem)
    return False"
Generate a Python Program to generate a Bar Chart from a given list of data,"import matplotlib.pyplot as plt

def generate_bar_chart(data):
    plt.bar(list(range(len(data))), data)
    plt.xlabel('x')
    plt.ylabel('y')
    plt.title('Bar Chart')
    plt.show()

if __name__ == '__main__':
    generate_bar_chart(data)"
Write a Python program to validate a given email address. The program should ensure that the given email follows valid email syntax.,"import re

def is_valid_email(email):
 email_regex = re.compile(r""^[\w\.\+\-]+\@[\w]+\.[a-z]{2,3}$"")
 return email_regex.match(email)

email = ""example@example.com""
if is_valid_email(email):
 print(""Valid email address"")
else:
 print(""Invalid email address"")"
"Create a Python script to generate random passwords. The passwords should have at least 5 characters and should be able to contain uppercase, lowercase, numbers, and special characters.","import random
import string

def generate_password():
    length = 5
    chars = string.ascii_letters + string.digits + '!@#$%^&*()'
    random.seed = (random.SystemRandom().random() * 1000000000)

    return ''.join(random.choice(chars) for i in range(length))"
Reverse a given list using Python,"def reverse_list(arr):
    return arr[::-1]"
Create a program in Python to find the maximum value from a dictionary.,"# Get the maximum value in the dictionary
max_value = max(my_dict.values())

# Print the maximum value
print (max_value)"
Develop a class in Python to keep track of stock prices,"class Stock:
  def __init__(self, symbol):
    self.symbol = symbol
    self.prices = []
 
  def add_price(self, price):
    self.prices.append(price)
 
  def get_prices(self):
    return self.prices
      
AAPL = Stock('AAPL')
AAPL.add_price(191.43)
AAPL.add_price(193.57)
AAPL.add_price(190.08)
AAPL.get_prices()"
Convert this Python function to JavaScript.,"function stringToNumList(string) {
    let numbers = [];
    for (let letter of string) {
        numbers.push(letter.charCodeAt(0));
    }
    return numbers;
}"
Construct a python code to convert a number in base 10 to binary,"def convert_base10_to_binary(num):
    binary_num = []
    while (num > 0): 
        binary_num.append(num % 2)
        num //= 2
  
    binary_num.reverse() 
    return binary_num"
Write a code block in Python to compute the dot product of two vectors.,"def dot_product(u, v):
    if len(u) != len(v):
        raise ValueError(""Vectors u and v must be of the same length!"")

    result = 0
    for i in range(len(u)):
        result += u[i] * v[i]
    return result

u = [1, 2, 3]
v = [4, 5, 6]

print(""Dot product of u and v is:"" , dot_product(u, v))"
Create a basic chatbot using Python.,"import re #importing library for regular expressions

user_input = """" #Initializing user_input

while user_input != ""exit"": 
    user_input = input(""Type your message: "")
    if re.search(""hi|hello"", user_input): #Using regural expressions to make the chatbot response to greetings
        print(""Hello, I am a chatbot. How can I help you?"")
    else:
        print(""Sorry, I don't understand."")"
Create a Python function to edit a given string by changing the order of some of its characters.,"def edit_string(string):
 characters = list(string)
 np.random.shuffle(characters)
 edited_string = """".join(characters)
 return edited_string"
Create a Python code to expand a given integer range.,"def expand_range(value):
  return [x for x in range(int(value[0]), int(value[2]) + 1)]"
Create a function in Python that takes a dataframe as a parameter and calculates the number of values for each column.,"def countValues(dataframe):
 counts = {}
 for column in dataframe.columns:
 counts[column] = dataframe[column].count()
 return counts"
Write a function that takes two lists and returns true if they have at least one common element.,"def common_element(list1, list2):
     result = False
     for x in list1:
         for y in list2:
             if x == y:
                 result = True
                 return result"
Create a Python program that shuffles an array of integers.,"import random

def shuffle(arr):
    random.shuffle(arr)
    return arr 

my_arr = [1, 5, 9, 4, 2]

print(shuffle(my_arr))"
Write a function to calculate the average of a Python list of integers.,"def calculate_average(numbers):
  return sum(numbers)/len(numbers)

numbers = [2, 4, 5, 7, 8]
print(calculate_average(numbers)) # Output: 5.6"
Calculate the average of a list of numbers using a Python function.,"def calculateAverage(numbers):
 total = 0
 for num in numbers:
 total += num
 return total / len(numbers)

numbers = [5, 10, 15, 20]

print(calculateAverage(numbers)) // 12.5"
Design a Python program to take a list of integers and return the sum of the even numbers in the list.,"def sum_even_numbers(numbers):
 
 result = 0
 
 for number in numbers:
  if number % 2 == 0:
   result += number
 
 return result
 
print(sum_even_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
Write a Python program that takes an input string and reverses all of its words.,world hello
Generate an algorithm in Python to determine the count of each occurrence of a given character in a string,"def count_characters(string, character):
    count = 0
    for c in string:
        if c == character:
            count += 1
    return count

count_characters(""abracadabra"", 'a')  # 5"
Write a python code to complete the following.,"import numpy as np
arr = np.zeros(4, dtype=int)
 
for i in range(len(arr)):
    arr[i] = i"
Develop an algorithm using Python that determines if a number is a prime number or not.,"def is_prime(n):
    if n <= 1: 
        return False
    for i in range(2, n): 
        if n % i == 0: 
            return False
    return True"
Change the following Python program such that you can pass any number of strings in the function.,"def print_strings(*strings):
    for s in strings:
        print(s)

print_strings(""Hello"", ""World"")"
Write a function to extract the elementwise and tuples from the given two tuples.,"def and_tuples(test_tup1, test_tup2):
  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) "
Create an algorithm in Python which prints out the number of even numbers in an array.,"def count_even(arr):
  evenNumbers=0
  for x in arr:
      if x % 2 == 0:
          evenNumbers += 1
  return evenNumbers
  
print(count_even([1, 2, 3, 4, 5, 6, 7, 8]))"
Write a Python program to merge two given lists into a single list.,"def merge_two_lists(list1, list2):
 return list1 + list2"
Generate a Python script to detect duplicate characters in a given string.,"def detect_duplicate_characters(string):
    chars = set()
    for char in string:
        if char in chars:
            return True
        chars.add(char)
    return False"
Write a function in Python to evenly distribute the total number of tasks among n workers.,"def distribute_tasks(total, num_workers):
    tasks_per_worker = [total // num_workers] * num_workers
    remainder = total - sum(tasks_per_worker)
    
    # Distribute the remainder among the workers.
    for i in range(remainder):
        tasks_per_worker[i] += 1

    return tasks_per_worker"
Write a python code to check if the string has unique characters.,"def unique_string(string):
    return len(string) == len(set(string))

if __name__ == '__main__':
    string = 'abcdefg'
    print(unique_string(string))"
Generate a correct Python program for plotting bar chart for the following data.,"import matplotlib.pyplot as plt

x = [""Honda"", ""Ferrari"", ""Ford""]
y = [50, 100, 150]

plt.bar(x, y)

plt.title(""Car Comparison"")
plt.xlabel(""Cars"")
plt.ylabel(""Value"")

plt.show()"
Implement a function in Python that will take in an arbitrary list of numbers and output the average of the list.,"def average(nums):
 total = 0
 for num in nums:
 total += num
 return total/len(nums)"
Write a Python function to enumerate the number of distinct permutations of a given string.,"import math

def num_of_permutations(string):
    n = len(string)
    return math.factorial(n)"
Create a function in Python that takes an ID and returns a list of all the numbers in its range.,"def get_numbers(id):
    nums = []
    for i in range(id + 1):
        nums.append(i)
    return nums

numbers = get_numbers(5)
print(numbers)"
Write a Python program to find all pairs of numbers in a given list whose sum is equal to a given target number.,"def find_pairs_with_sum(nums, target):
    found_pairs = []
    for i in range(len(nums)):
        for j in range(i + 1, len(nums)):
            if nums[i] + nums[j] == target:
                found_pairs.append([nums[i], nums[j]])
    return found_pairs"
Write a python program to print out the character frequency of a given string.,"string = 'hello world!'

freq = {} 
for i in string: 
    if i in freq: 
        freq[i] += 1
    else: 
        freq[i] = 1

print (""count of all characters in hello world! is :\n ""
                    +  str(freq))

# Output would be 
count of all characters in hello world! is :
 {'h': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'w': 1, 'r': 1, 'd': 1, '!': 1}"
Create a function in Python to validate the syntax of the given code.,"def validate_syntax(code):
    try: 
        compile(code, '<string>', 'exec')
        return True
    except SyntaxError: 
        return False"
Create a Python program to generate a random word between 8 and 16 characters.,"import random
 
def generate_random_word(length):
  letters = ""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz""
  return ''.join(random.choice(letters) for i in range(length))
 
length = random.randint(8, 16)
word = generate_random_word(length)
print(""Random word of length"", length, ""is:"", word)"
Write a function to caluclate the area of a tetrahedron.,"import math
def area_tetrahedron(side):
  area = math.sqrt(3)*(side*side)
  return area"
Write a Python class for representing a tree node.,"class TreeNode:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None"
Write a Python script to input a string and display it in reverse.,!dlrow olleH
Develop a Python program for randomly generating a 3-D object of n cubes,"from random import random

def generate_cubed_object(n):
    objects = []
    for i in range(n):
        x = random()
        y = random()
        z = random()
        objects.append([x, y, z])
    return objects

print(generate_cubed_object(8)) # [[0.4, 0.2, 0.3], [0.5, 0.6, 0.7], ....]"
Create a python function that takes a list of integers as input and returns the list with the numbers sorted in descending order.,"def sortList(nums): 
 
    # sort the list in descending order 
    nums.sort(reverse = True) 
   
    # return the sorted list 
    return nums 
   
# driver code 
list = [5, 4, 3, 2, 1] 
print(sortList(list))"
Create logic in your Python application to handle any corner cases in the user input.,"def handle_corner_cases(input_string):
    input_string = input_string.lower()
    if 'heavy' in input_string or 'big' in input_string:
        return 'Heavy/Big objects detected!'
    elif 'light' in input_string or 'small' in input_string:
        return 'Light/Small objects detected!'
    else:
        return 'Input not recognized!'"
Create a Python program to scrape data from a webpage.,"import requests
from bs4 import BeautifulSoup

url = 'https://example.com'
response = requests.get(url)

if response.status_code == 200:
 html = response.content
 soup = BeautifulSoup(html, 'html.parser')
 data = soup.find_all('p')
 
 for paragraph in data:
 print(paragraph.text)"
Generate a code snippet to split a given string using a given delimiter in Python.,str.split(delimiter)
Optimize the following Python program as much as possible,"def func(string): 
    return [s.upper() for s in string]

list_out = func(""hello"")"
Design a program in Python that takes a list of numbers as input and returns the average.,"# Function to return average
def average(lst):
    
    # Calculate sum of list
    sum_num = 0
    for x in lst:
        sum_num += x
        
    # Return average 
    return sum_num / len(lst)

# Sample List
lst = [1, 2, 3, 4, 5, 6, 7]

# Calling average function
print(average(lst))"
Create a function in Python to make a list that contains the sum of each pair of elements in two different lists.,"def list_sums(lst1, lst2):
    pairs = list(zip(lst1, lst2))
    sums = [i1+i2 for (i1, i2) in pairs]
    return sums"
Write a Python script to generate and print a Fibonacci series.,"def fibonacci(n): 
 a = 0
 b = 1
 if n < 0: 
 print(""Incorrect input"") 
 elif n == 0: 
 return a 
 elif n == 1: 
 return b 
 else: 
 for i in range(2, n): 
 c = a + b 
 a = b 
 b = c 
 return b 

print(fibonacci(9)) 
# 21"
"Given two strings, write a Python program to find the total number of common characters present in both strings","def num_common_chars(str1, str2):
    common = 0
    for c in str1:
        if c in str2:
            common += 1
    return common"
Create a Dockerfile that will run the program you wrote in Task 4.,"FROM python:3.7
RUN mkdir -p /usr/src/app
WORKDIR /usr/src/app
EXPOSE 8080
COPY . /usr/src/app
RUN pip install -r requirements.txt
ENTRYPOINT [""python"", ""scrape.py""]"
"Convert the given code to a comprehensible, more readable form that follows PEP 8 and Python best practices.","number_list = [-5, 0, 4, 78, -3]
result = [num ** 2 for num in number_list if num >= 0]"
Generate a random 6 character string in Python,"import string
import random

characters = string.ascii_lowercase + string.digits + string.ascii_uppercase
password =  """".join(random.choice(characters) for x in range(6))
print(password)"
Generate a python program with a class that has both private and public members.,"class Foo:
    def __init__(self, private_var, public_var):
        # Private members
        self.__private_var = private_var
        # Public members
        self.public_var = public_var
        
    # Private method
    def __private_method(self):
        return self.__private_var
    
    # Public method
    def public_method(self):
        return self.public_var"
Generate a Python function to generate an equation with given coefficients and variables.,"def generate_equation(coefficients, variables):
 equation = """"
 for i, coeff in enumerate(coefficients):
  equation += str(coeff) + variables[i] + "" + ""
 equation = equation[:-3]
 return equation"
Optimize the following Python code for runtime and memory performance.,"def factorial(n):
    if n == 0:
        return 1

    res = 1
    for i in range(2, n+1):
        res *= i
    return res"
Generate a Python program that takes an array as an input and prints each element of the array in a new line.,"arr = [10, 20, 30, 40]

for num in arr:
    print(num)"
Create a basic Python program to split a given string in words and save them in an array.,"string = ""This is a sentence.""
words = string.split("" "")
print(words)
# Output: ['This', 'is', 'a', 'sentence.']"
"Using Python, write a program to tokenize a given string.","import re

def tokenize(s):
    tokens = re.findall(r'\w+|[^\w\s]', s, flags=re.UNICODE)
    return tokens

print(tokenize(""This is a sentence""))"
Can you write a python code that extracts the upper case character from a given string?,"input_string = 'Foobar'

upper_case_characters = []

for char in input_string:
    if char.isupper():
        upper_case_characters.append(char)

print(upper_case_characters)"
Rearrange this python code to make it shorter.,"a, b = 0, 1
for _ in range(10):
 a, b = b, a + b"
Generate a random 2D array in Python of size 10x7,"import numpy as np

array = np.random.randint(1, 10, size=(10, 7))
print(array)"
Create a Python function that returns the longest string from a given list.,"def longest_string(strings):
  max_length = 0
  longest_string = """"
  
  for s in strings:
    if len(s) > max_length:
      max_length = len(s)
      longest_string = s
  
  return longest_string

result = longest_string([""my"", ""cat"", ""is"", ""lazy""])
print(result)"
Optimize the following piece of code written in Python,"def add(a, b):
    return a + b  # remove unnecessary intermediate variable 'c' and return the result directly."
Create a Python script that takes in a string of text and returns the number of characters that contain a vowel.,"def count_vowels(text):
    counter = 0
    for char in text:
        if char in ""aeiouAEIOU"":
            counter += 1
    return counter"
What is the sum of all even numbers from 1 to 100 in Python?,"sum = 0
for i in range(2,101,2):
    sum += i
print(sum)"
Create a Python function to check if a given number is abundant or not. An abundant number is a number which is less than the sum of its proper divisors.,"def is_abundant(number):
    sum = 0
    for i in range(1, number):
        if number % i == 0:
            sum += i
    return sum > number"
Create a python function that given an input array of integers produces a new array that contains the unique integers of the input array.,"def unique_list(input_list):
    uniques = []
    for i in input_list:
        if i not in uniques:
            uniques.append(i)

    return uniques"
"Given a binary tree, write a Python program to determine the sum of all elements in the tree.","def sum_tree(root):
    if root is None:
        return 0

    return root.val + sum_tree(root.left) + sum_tree(root.right)"
Create a function in Python that prints out the largest value from a given list of numbers.,"def get_max_value(numbers): 
    return max(numbers)

print(get_max_value(list))  # 6"
Write a Python program to add numbers from different columns of a multi-dimensional array.,"arr = [[1, 2, 3], 
[4, 5, 6], 
[7, 8, 9]] 

# Initialize result 
result = 0

# Iterate every element in the array 
for row in arr: 
  for col in row:
    # Adding elements of each row 
    result = result + col  

# Displaying sum 
print(result)

# Output: 45"
Create a function in Python that takes two numbers as arguments and returns their average.,"def average(a, b): 
    return (a + b) / 2

print(average(2, 3))"
Generate a Python program that reads in a sentence and generates a new string with the first letter of every word capitalized.,"def capitalize_words(sentence):
    words = sentence.split()
    capitalized_words = []
    for word in words:
        capitalized_words.append(word.capitalize())
    return ' '.join(capitalized_words)

sentence = input(""Enter a sentence: "")

print(capitalize_words(sentence))"
Generate an array of unique random numbers in Python.,"import random

def random_array(arr_length):
    rnd_arr = []
    for i in range(arr_length):
        rnd_num = random.randint(0, arr_length) # picking random number
        while rnd_num in rnd_arr:               # checking if not already in array
            rnd_num = random.randint(0, arr_length)
        rnd_arr.append(rnd_num)
    return rnd_arr

arr_length = 10
random_array(arr_length)"
Produce a chart of linear equations in Python.,"import matplotlib.pyplot as plt

x = [i for i in range(-10, 10)]
y1 = [5*i + 2 for i in x]
y2 = [-3*i + 6 for i in x]

plt.plot(x, y1, label='y = 5x + 2')
plt.plot(x, y2, label='y = -3x + 6')
plt.legend()
plt.show()"
Write a Python program to sort a list according to user's desired order.,"def sort_list(lst, order):
    sorted_list = sorted(lst, reverse = order)
    return sorted_list"
"Given a list of words and a target word, write a function in Python that finds the index of target word in the list.","def find_word_index(words, target_word):
    for i, word in enumerate(words):
        if word == target_word:
            return i
    return -1

word_index = find_word_index(words, target_word)
print(word_index)"
"Using a for loop and if block, write a Python program to print numbers divisible by 5.","for num in range(1, 20): 
    if num % 5 == 0: 
        print(num)"
Generate a code in Python to check whether a number is a perfect square or not,"def is_perfect_square(num):
    if num < 0:
        return False

    x = num // 2
    seen = {x}
    while x * x != num:
        x = (x + (num // x)) // 2
        if x in seen:
            return False
        seen.add(x)
    return True"
Write a Python script to automate a scheduled task,"import schedule
import time

def executeScheduledJob():
 # Add your scheduled task code here
 print(""Executing scheduled job..."")

# Add your scheduled task
schedule.every().day.at(""10:00"").do(executeScheduledJob)

# Run the schedule
while True:
 schedule.run_pending()
 time.sleep(1)"
Create a Python program to convert a given string in a sentence case.,"CaseString = ""THIS IS A STRING.""

def sentence_case(CaseString):
    return CaseString.capitalize()

print(sentence_case(CaseString))"
"Given a string ""Hello World"", write a Python program to generate an encrypted version of the string.","encrypted_string = ''
for c in 'Hello World':
 encrypted_string += chr(ord(c) + 3)

print(encrypted_string) # Khoor Zruog"
Create a basic Python script for printing a pattern of stars.,"# Print pattern
for i in range(1, 6):
 for j in range(0, i):
 print(""* "", end="""")
 print()

# Output
# * 
# * * 
# * * * 
# * * * * 
# * * * * *"
Create a program to generate unique 5-digit IDs in Python.,"import random

def generate_id():
 # Generate a list of 5 random integers between 0-9
 digits = [random.randint(0, 9) for i in range(5)]
 
 # Convert the list of numbers to a string
 unique_id = """".join(str(digit) for digit in digits)
 
 # Return the unique ID
 return unique_id

# Generate a unique ID
unique_id = generate_id()
print(unique_id)"
Suggest a Python library to monitor the performance of this system,The Python library 'celery' can be used to monitor the performance of a distributed system. It provides scalability and concurrency capabilities to handle large amounts of data by distributing tasks across multiple nodes. It also offers task monitoring and management through custom metrics and performance logs.
Create a web scraper in Python to crawl a website and collect data about a particular topic.,"import requests
import bs4

web_url = '<input URL>' # Insert URL here

def scrape(url):
    response = requests.get(url)
    soup = bs4.BeautifulSoup(response.text, 'lxml')

    output = []

    # Scrape the web page to get the required data
    ...

    return output

if __name__ == '__main__':
    print(scrape(web_url))"
Create a program in Python for finding the greatest common divisor of two numbers.,"def gcd(a, b):
    while b != 0:
        temp = a
        a = b
        b = temp % b
    return a

print(gcd(20,45))"
"Create a Python program that takes in a list of strings, sorts them, and then prints each string in sorted order.","def sortStrings(arr):
    arr.sort()
    
    for string in arr:
        print(string)

#Test
arr = [""banana"", ""apple"", ""orange"", ""pear""]
sortStrings(arr) # Outputs: apple banana orange pear"
Develop a Python script that prints the lowest temperature in a given sequence.,"temps = [87, 97, 75, 104]

min_temp = temps[0]

for temp in temps:
    if temp < min_temp:
        min_temp = temp

print('Lowest temperature: ', min_temp)"
Write a Python program to get the current date and time,"from datetime import datetime

def current_date_time():
    now = datetime.now()
    return now

result = current_date_time()
print(result)"
"Given a value for the parameter ""numRows"" and a Python list of lists as input data, write a Python program that prints out a valid HTML table.","numRows = 3
data = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

print('<table border=""1"">')

for i in range(numRows):
    print('<tr>')
    for j in range(len(data[i])):
        print('<td>' + str(data[i][j]) + '</td>')
    print('</tr>')

print('</table>')"
Create a program to filter out words containing more than 5 characters in Python.,"def filter_words(words):
 filtered_words = []
 for word in words:
 if len(word)<=5:
 filtered_words.append(word)
 return filtered_words

words = [""hello"", ""world"", ""computer""]
print(filter_words(words))
# Output: ['hello', 'world']"
Write a Python program to predict a value for a given input.,"from sklearn import datasets 
from sklearn.linear_model import LinearRegression 
  
# load the diabetes datasets 
diabetes = datasets.load_diabetes() 
  
# fit a linear regression model to the data 
model = LinearRegression() 
model.fit(diabetes.data, diabetes.target) 
  
# make prediction 
value = model.predict([[5.1, 3.3, 1.7, 0.5]])
print(value)"
Create a data structure in Python to represent a classical play.,"class Play(object):
    def __init__(self):
        self.characters = []
        self.scenes = []
        self.title = """"
    
    def add_character(self, character):
        self.characters.append(character)
    
    def add_scene(self, scene):
        self.scenes.append(scene)
    
    def set_title(self, title):
        self.title = title"
Generate a Python program to find all pythagorean triplets up to a given limit.,"def pythagorean_triplets(limit):
    for a in range(1, limit):
        for b in range(a, limit):
            for c in range(b, limit):
                if (a**2 + b**2) == c**2:
                    yield [a, b, c]

limit = 20
triplets = pythagorean_triplets(limit)
for triplet in triplets: 
    print(triplet)"
Create a Python program to generate a report of a user's sales data.,"import csv

# A list of dictionaries containing sales data
sales_data = [
 { 'name': 'John', 'quantity': 2, 'price': 10.0 },
 { 'name': 'Jane', 'quantity': 3, 'price': 15.0 },
 { 'name': 'Mike', 'quantity': 4, 'price':"
Write a Python program to create a function that takes two strings as parameters and returns true if the first string contains the second string.,"def contains(s1, s2):
 return s2 in s1

string1 = ""Hello World!""
string2 = ""World""

print(contains(string1, string2)) # True"
Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.,"from collections import defaultdict
def grouping_dictionary(l):
    d = defaultdict(list)
    for k, v in l:
        d[k].append(v)
    return d"
Write a Python function to create a list containing the squares of numbers up to n.,"def squares(n):
    return [x*x for x in range(1,n+1)]

print(squares(10))"
Calculate the greater of two numbers using Python.,"if (5 > 7):
    greater = 5
else:
    greater = 7

print(""The greater number is: "", greater)"
Use a Python function to determine the maximum of three given numbers.,"def maxOfThree(a, b, c):
    return max(a, b, c)"
"Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.","def sort_by_dnf(arr, n):
  low=0
  mid=0
  high=n-1
  while mid <= high:
    if arr[mid] == 0:
      arr[low], arr[mid] = arr[mid], arr[low]
      low = low + 1
      mid = mid + 1
    elif arr[mid] == 1:
      mid = mid + 1
    else:
      arr[mid], arr[high] = arr[high], arr[mid]
      high = high - 1
  return arr"
Write a FOR loop to create a Pascal Triangle of size N in Python.,"def pascal_triangle(n): 
    trow = [1] 
    y = [0] 
    for x in range(max(n,0)): 
        print(trow) 
        trow=[l+r for l,r in zip(trow+y, y+trow)] 
  
# Driver program to test the above function 
n = 5
pascal_triangle(n)"
"Edit the following Python code such that the function produces output in the format ""<Name> said: '<Message>'.","def generate_message(name, message):
    print(name + ' said: ' + ""'"" + message + ""'"")"
Create a web scraper in Python to scrape the homepage of a website.,"import requests
from bs4 import BeautifulSoup

url = 'https://example.com/'
page = requests.get(url)
soup = BeautifulSoup(page.content, 'html.parser')

# Scraping code goes here
# e.g. page_title = soup.find('h1').contents"
Write a Python program to check if an element exists within a given list of integers.,"def element_exists(elem, list_int):
  return elem in list_int"
Create a correct python code to combine two lists into one.,"listA = [1, 2, 3]
listB = [4, 5, 6]

combined_list = listA + listB
print(combined_list)"
Develop a Python program to calculate the sum of all the elements in an array.,"def calculateSum(arr, n): 
	# Initialize result 
	sum = 0
	
	# using foreach loop to find sum 
	for i in arr: 
		sum += arr[i] 
	
	return sum

# Driver code 
arr = [1,2,3,4,5]
n = len(arr) 

print(""Sum is"",calculateSum(arr, n))"
Write a function to sort a list in a dictionary.,"def sorted_dict(dict1):
  sorted_dict = {x: sorted(y) for x, y in dict1.items()}
  return sorted_dict"
Create a python function for encrypting information that takes a string and a key.,"import secrets

def encrypt(string, key):
 cipher = ''
 for i in range(len(string)):
 cipher += chr(ord(string[i]) + ord(key[i % len(key)]))
 return cipher

encrypt(""This is a secret message"", ""12345678"") 
# prints ""\x18\x01\x15\x05\x1a\x12\x1b\x1f\x1f\x1e\x10\x04\x1f\x1f\x19\x0f\x02\x03\x07\x08"""
Design a function in Python that takes an array of strings as input and returns all the strings in reversed order.,"def reverseStrings(data):
 return [string[::-1] for string in data]

 reversedStrings = reverseStrings(data)
 print(reversedStrings) # [""olleH"", ""dlroW"", ""ooF"", ""raB""]"
Create a Python code to convert a given integer to binary,"def to_binary(n):
    return bin(n).replace(""0b"", """")"
Develop a script to create a class with a constructor in Python.,"class ClassName:
    def __init__(self):
        self.data = []"
Create a Python script that prints a square pattern of * characters with a given size.,"# size is the dimension of the square
size = 5

# loop through the rows
for row in range(size):

 # loop through the columns
 for col in range(size):
 print('*', end='') # end='' prevents line break

 print() # prints new line"
"Given two integers, write a Python function to find their greatest common divisor (GCD).","def find_gcd(num1, num2):
    gcd = 1
    while num2 != 0:
        temp = num2
        num2 = num1 % num2
        num1 = temp
        gcd = num1
    return gcd"
Develop a machine learning algorithm in Python to identify apples from bananas.,"import numpy as np
import matplotlib.pyplot as plt
from sklearn.svm import SVC

# Load data
X = np.array([[1,2,3], [-1,2,5], [-1,2,7], [5,5,5], [3,3,3], [5,5,7]])
y = np.array([0, 0, 0, 1, 0, 1])

# Initialize classifier
clf = SVC(kernel='linear')

# Fit data
clf.fit(X, y)

# Test classifier
x_test = np.array([[2,2,2], [4,4,4]])

prediction = clf.predict(x_test)
print(prediction)"
Create a python command line interface to search a given array.,"def search_colors():
    colors = [""red"", ""orange"", ""yellow"", ""green"", ""blue"", ""purple""]
    query = input(""What color would you like to search for? "")
    if query in colors:
        print(""The color exists in the list."")
    else:
        print(""The color does not exist in the list."")"
What code is necessary to randomly shuffle a list in Python?,"import random

def shuffle(list):
    random.shuffle(list)
    return list"
Create a Python class and functions to read data from a SQL database.,"import sqlite3

class SQLReader():

    def __init__(self, db_name):
        self.db_name = db_name
        self.connection = sqlite3.connect(dB_name)

    def execute_query(self, query):
        cursor = self.connection.cursor()
        cursor.execute(query)
        return cursor.fetchall()

    def close_connection(self):
        self.connection.close()"
Generate a Python function to check if a string contains a substring.,"def containsSubstring(string, substring):
    """"""
    Returns True if the string contains the substring, False otherwise
    """"""
    
    return substring in string"
Develop a Python program that takes in a sentence and returns a list containing all the words in the sentence converted to upper case.,"def makeUpperCase(sentence):
    words = sentence.split() 
    newWords = [word.upper() for word in words] 
  
    return newWords

print(makeUpperCase('Welcome to world of python')) #['WELCOME', 'TO', 'WORLD', 'OF', 'PYTHON']"
Write a Python program that uses while loop to print the numbers from 1 to 10.,"i = 1
while i <= 10:
  print(i)
  i += 1"
Design an algorithm in Python for linear search.,"def linear_search(arr, target):    
    for i in range(len(arr)):
        if arr[i] == target:
            return i
    return -1"
Write a python program to create a list of prime numbers between a given range.,"def find_prime_numbers(start, end):
    prime_numbers_list = []
    for num in range(start, end + 1):
        if all(num % i != 0 for i in range(2, num)):
            prime_numbers_list.append(num)
    
    return prime_numbers_list"
"Using the input as a guide, modify the following Python code to generate a new list containing integers which are divisible by 5 in the input list.","lst = [5, 10, 15, 20, 25, 30]

divisible_by_5 = [num for num in lst if num%5 == 0]
print(divisible_by_5)"
Write a loop in Python to iterate through a list and print all elements that have an even length.,"list_x = [""apples"", ""oranges"", ""bananas"", ""pineapples""]
for item in list_x:
 if(len(item) % 2 == 0):
  print(item)
#output: apples, oranges, pineapples"
Write a Python function to round a float to 2 decimal places.,"def round_to_two_decimal_places(n):
    return round(n, 2)"
Edit an existing Python program to calculate the area of a circle.,"import math
def area(radius):
    area = math.pi * radius ** 2
    return area"
Create a python script which takes two numbers as argument to calculate the LCM (Least Common Multiple),"def lcm(x, y):
    lcm = (x*y)//gcd(x,y) 
    return lcm
  
# This function implements the Euclidian algorithm to find H.C.F. of two numbers 
def gcd(x, y): 
  
    while(y): 
        x, y = y, x % y 
  
    return x 

# Driver program
num1 = 12
num2 = 15

print(""The L.C.M. is"", lcm(num1, num2))"
Write a python function to find the type of triangle from the given sides.,"def check_Type_Of_Triangle(a,b,c): 
    sqa = pow(a,2) 
    sqb = pow(b,2) 
    sqc = pow(c,2) 
    if (sqa == sqa + sqb or sqb == sqa + sqc or sqc == sqa + sqb): 
        return (""Right-angled Triangle"") 
    elif (sqa > sqc + sqb or sqb > sqa + sqc or sqc > sqa + sqb): 
        return (""Obtuse-angled Triangle"") 
    else: 
        return (""Acute-angled Triangle"") "
Design and write a Python program to extract all public email addresses from a given string,"import re

def extract_emails(text):
  emails = re.findall(r""[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+"", text)
  return emails

extracted_emails = extract_emails(""My email is john@example.com and yours is john@gmail.com"")
print(extracted_emails)"
Implement a function in Python that checks for palindrome strings.,"def isPalindrome(text):
 text = text.lower()
 return text == text[::-1]

# Testing

print(isPalindrome(""Mom"")) # Should return True
print(isPalindrome(""Apple"")) # Should return False"
Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.,"def last(n):
   return n[-1]
def sort_list_last(tuples):
  return sorted(tuples, key=last)"
Generate a code snippet in Python to split a given string into substrings based on a specific delimiter.,"str = ""1, 2, 3, 4""
list = str.split(', ') 
print(list) # Output is ['1', '2', '3', '4']"
Write a function in Python to sort a given list according to the second element of the sublists.,"def sort_by_second_element(arr):
    def get_second_element(item):
        return item[1]
    return sorted(arr, key = get_second_element)

arr = [[1,2], [2,3], [3,1]]
result = sort_by_second_element(arr)
print(result)"
Develop code for a multi-dimensional array using Python,"def get_array(n):
    a = [[0 for i in range(n)] for i in range(n)]
    return a"
Rewrite a Python script in Swift to generate random string of length n.,"import Foundation

func randomString(length: Int) -> String {
    let letters = ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789""
    return String((0..<length).map { _ in letters.randomElement()! })
}

let str = randomString(length: 8)
print(str)"
Generate a random password using the Python function provided in the input.,print(randomString())
Write a Python algorithm to find out whether a number is a palindrome or not.,"def is_palindrome(n):
    n_str = str(n)
    rev_str = n_str[::-1]
    if n_str == rev_str:
        return True
    else:
        return False"
Design a Python program to search for a substring in a given string.,"def searchSubstring(str, substr):
  for i in range(len(str)):
    if str[i:i+len(substr)] == substr:
      return i

    return -1"
"Create a Python class to manage a stack data structure. The class should include the methods push, pop, and peek.","class Stack:
   def __init__(self):
      self.items = []
 
   def isEmpty(self):
      return self.items == []
 
   def push(self, item):
      self.items.append(item)
 
   def pop(self):
      return self.items.pop()
 
   def peek(self):
      return self.items[len(self.items)-1]
 
   def size(self):
      return len(self.items)"
Create a function in Python that takes a list of numbers and returns the cumulative sum.,"def cum_sum(lst):
 result = []
 cumulative = 0
 for num in lst:
  cumulative += num
  result.append(cumulative)
 return result"
Write a python function to count set bits of a given number.,"def count_Set_Bits(n): 
    count = 0
    while (n): 
        count += n & 1
        n >>= 1
    return count "
Generate a crypto wallet address using Python.,"from web3 import Web3
from web3.personal import Personal

# Create a Web3 instance to use
w3 = Web3(Web3.EthereumTesterProvider())

# Create a Personal instance to use
personal = Personal(w3)

# Generate a new wallet address
address = personal.newAccount('my_wallet_password')

print(address)  # Output: 0x..."
Create a Python program to compare two strings to determine the number of characters which are different.,"def compareStrings(str1, str2):
 count = 0
 
 for i in range(min(len(str1), len(str2))):
 if str1[i] != str2[i]:
 count += 1
 
 # if the strings are different lengths, add the remaining characters from the longer string to the count
 if len(str1) > len(str2):
 count += len(str1) - len(str2)
 elif len(str2) > len(str1):
 count += len(str2) - len(str1)
 
 return count"
Build a decision tree classifier in Python that classfies the given data points.,"import numpy as np
from sklearn.tree import DecisionTreeClassifier

X = np.matrix('2 1 1; 2 2 0; 2 0 1; 1 1 1; 1 0 1; 1 2 0; 0 2 0; 0 1 1; 0 0 1')
Y = np.array([1, 0, 1, 1, 1, 0, 0, 1, 1])

model = DecisionTreeClassifier().fit(X,Y)"
"Given a data frame that has the following columns - 'Name', 'Phone', and 'Email', use Python to print the name and phone number of all customers in the data frame.","import pandas as pd

df = pd.read_csv(""data.csv"")
for index, row in df.iterrows():
    print(""Name:"", row['Name'], ""Phone:"", row['Phone'])"
Convert the JavaScript code snippet to Python.,"def sum(a, b):
    return a + b"
Come up with a correct approach to optimize the following python program.,"numbers = [1, 2, 3, 4, 5, 6]

print(*numbers, sep='\n')"
Create a function in Python that takes an integer argument and returns True if the argument is an even number and False if it is an odd number.,"def even_odd(n):
    if n % 2 == 0:
        return True
    else:
        return False"
Create a command line utility in Python that takes as input a search query and outputs a list of relevant webpages for the query.,"import requests

query = input('Search query: ')
url = 'https://www.google.com/search?q=' + query

r = requests.get(url)

if r.status_code == 200: 
    print('Search results:')
    for item in r.json()['items']:
        print(item['title'] + ' - ' + item['url'])
else:
    print('An error occurred!')"
"Once the user has provided a list of numbers and a target number, suggest a Python function to check if any two numbers from the list sum up to the target.","def check_sum(numbers, target):
    for i in range(len(numbers)):
        for j in range(i+1, len(numbers)):
            if numbers[i] + numbers[j] == target:
                return True
    return False"
Write a Python function to print the first n rows of Pascal's triangle.,"def pascal_triangle(rows): 
 triangle = [[1]] 
 for i in range(rows - 1): 
 last_row = triangle[-1]
 new_row = [1] 
 for j in range(len(last_row) - 1): 
 new_row.append(last_row[j] + last_row[j+1]) 
 new_row.append(1) 
 triangle.append(new_row)
 
 for row in triangle: 
 print(row)

pascal_triangle(5)"
Write a function to clear the values of the given tuples.,"def clear_tuple(test_tup):
  temp = list(test_tup)
  temp.clear()
  test_tup = tuple(temp)
  return (test_tup) "
Edit the following python code to ensure that it is free from exceptions.,"def div(x, y):
    if y == 0:
        raise ValueError(""Cannot divide by 0"")
    return x / y"
Develop a python program to feature scale an input array,"# feature scaling function
def feature_scale(arr):
    min_arr = min(arr)
    max_arr = max(arr)
    y = (arr-min_arr)+1
    scaled = y/(max_arr-min_arr)
    return scaled

# example usage
arr = [1,2,3,4,5]
scaled_arr = feature_scale(arr)
print(scaled_arr) # Output: [0.  0.2 0.4 0.6 0.8]"
Develop a Python class to represent a point on 2D-space.,"class Point:
  def __init__(self, x, y):
    self.x = x
    self.y = y

if __name__ == '__main__':
  point = Point(2, 3)
  print(point.x, point.y)"
Write a machine learning model in Python to detect the sentiment of a text document.,"def sentiment_model(text):
 pred = model.predict([text])
 
 if pred == 0:
  sentiment = 'Positive'
 elif pred == 1:
  sentiment = 'Negative'
 
 return sentiment

sentiment = sentiment_model(""This movie was horrible and I never want to watch it again."")
print(sentiment) # Output: Negative"
Write a python function to count number of non-empty substrings of a given string.,"def number_of_substrings(str): 
	str_len = len(str); 
	return int(str_len * (str_len + 1) / 2); "
Write a Python program to pad a 3D array along its first two axes.,"import numpy as np

arr = np.array([[[1, 2, 3], [4, 5, 6]],
                [[7, 8, 9], [10, 11, 12]]])

# Pad the array with 0s along its first two axes

arr_pad = np.pad(arr, ((1, 1), (1, 1), (0, 0)), 'constant', constant_values=0)"
Generate a python program to calculate the minimum and maximum values in an array,"def min_max(array):
    min = array[0]
    max = array[0]

    for val in array[1:]:
        if val > max:
            max = val
        if val < min:
            min = val
    return min, max"
Write a Python program to find the sum of all numbers divisible by 10 between 50 and 200.,"# start with a sum of 0
sum = 0

# set the minimum and maximum numbers
min = 50
max = 200

# loop from min to max 
for i in range(min, max+1):
# check if number is divisible by 10
 if i%10 == 0:
 # add the number to the sum
 sum += i

# print the sum
print(sum)"
Create a loop in Python that prints every 5th number between 1 and 100.,"for value in range(1,101,5): 
    print(value)"
Design a function in Python that accepts a string and prints the number of occurrences of each letter in the string.,"def count_letters(text):
    letters_count = dict()

    for char in text:
        if char not in letters_count:
            letters_count[char] = 1
        else:
            letters_count[char] += 1

    return letters_count

if __name__ == '__main__':
    text = 'Hello, World!'
    print(count_letters(text))"
Write a Python program to count and display the number of positive numbers from a given list of integers.,"def countPositive(nums):
    count = 0
    for num in nums:
        if num > 0:
            count += 1
    print(""Number of positive numbers:"", count)

nums = [-2, 3, 4, -7, 6]
countPositive(nums)

# Output: Number of positive numbers: 3"
Write a function in Python to find the kth smallest element in an unsorted array.,"def kth_smallest(input_array, k):
    input_array.sort()
    return input_array[k-1]"
Write a Python program to print all the numbers from the given list which are divisible by 7.,"def divisible_by_seven(number_list):
    for i in number_list:
        if i % 7 == 0:
            print(i)"
Design a Python script to access a REST API.,"import requests

url = 'https://example.com/api/v1/data'

response = requests.get(url)
data = response.json()

# process the data here
# ..."
Write a Python program to print out the first 10 numbers in the Fibonacci sequence starting from 0.,"def Fibonacci(n): 
 a = 0
 b = 1
 if n < 0: 
 print(""Incorrect input"") 
 elif n == 0: 
 return a 
 elif n == 1: 
 return b 
 else: 
 for i in range(2,n): 
 c = a + b 
 a = b 
 b = c 
 return b 

n = 10
print(Fibonacci(n))"
Generate a Python code to generate a random integer between 1 and 10.,"import random

rand_int = random.randint(1, 10)"
Develop an algorithm to generate a random integer between 0 and n in Python.,"import random

def random_number(n):
  return random.randint(0, n)

random_num = random_number(6)
print(random_num)"
Re-write the following Python code using list comprehensions.,lst=[each*each for each in range(5)]
"Create a class in Python that stores employee information such as name, salary, and years of experience.","class Employee:
  def __init__(self, name, salary, experience):
    self.name = name
    self.salary = salary
    self.experience = experience

  def display_details(self):
    print(f'Name: {self.name}\nSalary: {self.salary}\nExperience: {self.experience}')"
"Generate a list of all numbers from 0 to 50 in Python, that are divisible by both 3 and 5.","my_list = [x for x in range(0, 51) if x % 3 == 0 and x % 5 == 0]"
Write a function in Python for finding the maximum subarray sum of an array.,"def max_subarray_sum(arr):
	max_so_far = 0
	max_ending_here = 0	
	
	for i in range(0, len(arr)): 
		max_ending_here = max_ending_here + arr[i] 
		if max_ending_here < 0: 
			max_ending_here = 0	 
		if (max_so_far < max_ending_here): 
			max_so_far = max_ending_here 
			
	return max_so_far 

result = max_subarray_sum(arr)
print(result)"
Write a Python program to classify a given set of inputs into clusters using k-means algorithm,"from sklearn.cluster import KMeans 
import numpy as np 

data_points = np.array(data_points) 

kmeans = KMeans(n_clusters=2,random_state=0).fit(data_points) 
clusters = kmeans.labels_ 
  
print(clusters)"
Write a Python script to compress a directory using the gzip library.,"import gzip
import os

# Walk through the source directory
for root, dirs, files in os.walk('example_dir'):
    # Gzip each file
    for file in files:
        with open(os.path.join(root, file), 'rb') as f_in:
            with gzip.open(os.path.join(root, file + '.gz'), 'wb') as f_out:
                f_out.writelines(f_in)"
Write a function to find the nth newman–shanks–williams prime number.,"def newman_prime(n): 
	if n == 0 or n == 1: 
		return 1
	return 2 * newman_prime(n - 1) + newman_prime(n - 2)"
Write a Python program for a program that checks if two strings are palindromes.,"def is_palindrome(str1, str2):
 # Reverse str1
 reverse_str1 = str1[::-1]

 # Check if str1 is the same as the reversed version of str2
 if reverse_str1 == str2:
 return True
 else:
 return False

# Sample input
str1 = 'radar'
str2 = 'dad'

# Check if the strings are palindromes
print(is_palindrome(str1, str2)) # Output: True"
Optimize this piece of code in Python to minimize the runtime complexity.,"def find_pair(arr, target): 
    myset = set() 
    for x in range(len(arr)): 
        if target-arr[x] in myset: 
            return True 
        myset.add(arr[x]) 
          
    return False"
Write a Python program to find the maximum of a given array.,"def find_max(arr):
    max = arr[0]
    for i in arr: 
        if i > max: 
            max = i 
  
    return max
  
# Driver Code  
arr = [10, 9, 11, 12, 5]
maximum = find_max(arr) 
print(""Maximum element is:"", maximum)"
Create a python program to detect the languages of the given text,"def detect_language(txt):
    '''This function will detect the language of the given text.'''
    import langdetect
    lang = langdetect.detect(txt)
    return lang

if __name__ == ""__main__"":
    txt = ""Hello, my name is John Smith""
    print(detect_language(txt))"
Write a function to remove all whitespaces from the given string using regex.,"import re
def remove_whitespaces(text1):
  return (re.sub(r'\s+', '',text1))"
"Create a class in Python to represent a student. This class should contain fields for name, age, and a list of subjects taken.","class Student:
    def __init__(self, name, age, subjects):
        self.name = name
        self.age = age
        self.subjects = subjects
    
    def getName(self):
        return self.name
    
    def getAge(self):
        return self.age
    
    def getSubjects(self):
        return self.subjects"
Implement a Python program to print all numbers from 0 to 100 that are multiples of 3.,"for i in range(0, 101):
  if i % 3 == 0:
    print(i)

# Output
0
3
6
9
12
15
18
21
24
27
30
33
36
39
42
45
48
51
54
57
60
63
66
69
72
75
78
81
84
87
90
93
96
99"
Write a function to find the nth jacobsthal number.,"def jacobsthal_num(n): 
	dp = [0] * (n + 1) 
	dp[0] = 0
	dp[1] = 1
	for i in range(2, n+1): 
		dp[i] = dp[i - 1] + 2 * dp[i - 2] 
	return dp[n]"
Write Python code to push a list of numbers in the range of 1 to 10 into a queue.,"# Create a queue
queue = []

# Push number one to ten
for number in range(1, 11):
    # Pushing each number into the queue
    queue.append(number)

print(queue)"
Transform a given string to uppercase.,"def to_upper(string):
    return string.upper()

string = ""Python Programming""
print(to_upper(string))"
Create a class in Python to filter a string and return only the lowercase letters.,"class LowercaseFilter:
    def __init__(self, my_string):
        self.my_string = my_string

    def filter_string(self):
        return ''.join([c for c in self.my_string if c.islower()])"
"Construct a Python function that takes two integers ""a"" and ""b"" and returns the sum of their squares.","def sum_sqr(a, b):
    return a*a + b*b

print(sum_sqr(2, 3))"
Generate a shell script to install a specific version of Python and two modules.,"#!/bin/bash

# Download and install Python
wget https://www.python.org/ftp/python/${version}/Python-${version}.tgz
tar -xvzf Python-${version}
cd Python-${version}/
./configure
make
make install

# Install modules
pip install ${modules[0]}
pip install ${modules[1]}"
Convert a given Python program into pseudocode.,"// pseudocode
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
FOR num IN numbers
    IF num modulus 2 is equal to 0
        PRINT num"
"Create a serverless AWS Lambda function in Python that takes two numbers as input, multiplies them, and returns the result.","import json

def lambda_handler(event, context):
  input1 = event['input1']
  input2 = event['input2']

  result = input1 * input2
  return {
    'statusCode': 200,
    'body': json.dumps({'result': result})
  }"
Create a Node.js script for returning the longest string in an array.,"const arr = [""javascript"", ""ruby"", ""python"", ""java""];

const longestString = (arr) => {
 let longest = arr[0];
 for (let i = 1; i < arr.length; i++) {
 if (arr[i].length > longest.length) {
 longest = arr[i];
 }
 }
 return longest;
};

const longestStr = longestString(arr);

console.log(longestStr); // Output: ""javascript"""
"Using the input, write a Python code to find the armstrong number.","def is_armstrong_number(number):
    result = 0
    n = len(str(number))
    for num in str(number):
        result += int(num)**n
    return result == number

result = is_armstrong_number(153)
print(result)"
Write a function to find the gcd of the given array elements.,"def find_gcd(x, y): 
	while(y): 
		x, y = y, x % y 
	return x 
def get_gcd(l):
  num1 = l[0]
  num2 = l[1]
  gcd = find_gcd(num1, num2)
  for i in range(2, len(l)):
    gcd = find_gcd(gcd, l[i])
  return gcd"
Create a function in Python for computing the dot product of two given vectors.,"def dotProduct(vector1, vector2): 
    dotProd = 0
    for i in range(len(vector1)):
        dotProd += vector1[i] * vector2[i]
    return dotProd"
Construct a Python program that reads 10 numbers and returns the average.,"def avg_of_10_numbers():
    numbers = []
    for i in range(0, 10):
        num = float(input(""Enter number: ""))
        numbers.append(num)

    avg = sum(numbers) / len(numbers)
    return avg

print(avg_of_10_numbers())"
Write a Python program to convert a given string to all uppercase letters.,"string = ""hello world""
string_upper_characters = string.upper()
print(string_upper_characters)"
Optimize a recursive Fibonacci sequence program written in Python.,"def Fibonacci(n):
    if n <= 0:
        return 0
    elif n == 1:
        return 1
    else:
        a = 0
        b = 1
        for i in range(2,n+1):
            c = a + b
            a = b
            b = c
        return b"
Write a code snippet to generate a random number from 1 to 10 in Python.,"import random

def randNumber():
    return random.randint(1, 10)"
Create a Python function that takes a dictionary as input and returns a list containing the values sorted by the key.,"def sort_dict_by_key(dictionary):
 sorted_list = []
 for key in sorted(dictionary):
 sorted_list.append(dictionary[key])
 return sorted_list

# Example
mydict = {
 'John': 23,
 'Alice': 27,
 'Bob': 17,
 'Eve': 33
}

print(sort_dict_by_key(mydict))
# Output: [17, 23, 27,33]"
Write a Python function to check if a number is perfect or not. A perfect number is a positive integer which is equal to the sum of its positive divisors.,"def is_perfect(n):
  sum = 0
  for i in range(1, n): 
    if (n % i == 0): 
      sum += i 
  return sum == n"
Write a Python program to filter out strings from a list of strings containing specific characters.,"def filter_strings(list_of_strings):
    return list(filter(lambda x: x.isalpha(), list_of_strings))

print (filter_strings(list_of_strings)) # Output: ['Hello', 'World', 'This is a string.']"
Create a sorting algorithm in Python that takes in an array of integers and sorts it in ascending order.,"def sort_ascending(arr):
    swapped = True
    while swapped:
        swapped = False
        for i in range(len(arr)-1):
            if arr[i] > arr[i+1]:
                arr[i], arr[i+1] = arr[i+1], arr[i]
                swapped = True
    return arr

print(sort_ascending([4, 2, 7, 1, 3]))"
Create a Python script that counts the number of vowels from a given string.,"def count_vowels(string):
    count = 0
    for char in string:
        if char in ""aeiouAEIOU"":
            count += 1
    return count

string = ""This is an example string""
vowels = count_vowels(string)

print(f""Number of vowels in the given string: {vowels}"")"
Write a python program to find the sum and average of four numbers.,"nums = [5, 9, 16, 17]

sum_nums = sum(nums)
avg_nums = sum_nums / 4

print('Sum of the numbers is:', sum_nums)
print('Average of the numbers is:', avg_nums)"
Create a class in Python that takes an array as an argument and reverses the elements.,"class ReverseArray:
 def __init__(self, array):
 self.array = array
 
 def reverse(self):
 self.array.reverse()
 
 # To test with given input
 array = [1, 2, 3, 4]
 rev_array = ReverseArray(array)
 rev_array.reverse()
 print(array) # Output: [4, 3, 2, 1]"
Develop an algorithm in Python for clustering a set of data points.,"from sklearn.cluster import KMeans
import numpy as np

# Create array of the data points
data_points = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

# Calculate clusters
kmeans = KMeans(n_clusters=3).fit(data_points)

# Get labels for each point
labels = kmeans.predict(data_points)

# Print clusters
print(labels) # Output: [0, 1, 2]"
Write a Python class for a queue data structure.,"class Queue:
    def __init__(self):
        self.items = []
    
    def isEmpty(self):
        return self.items == []
    
    def enqueue(self, item):
        self.items.insert(0,item)
    
    def dequeue(self):
        return self.items.pop()
    
    def size(self):
        return len(self.items)
    
    def peek(self):
        if self.items:
	        return self.items[-1]
        else:
    	    return None"
Generate a Python program to find the nearest prime number greater than an inputted number,"#import libraries
import sympy

# define the input
num = 26

# set the flag to True
flag = True

# check for prime numbers
while flag:
    num += 1
    if sympy.isprime(num):
        flag = False

# print the output
print(num)"
Generate Python functions for updating and deleting records in a local SQLite database.,"import sqlite3

def update_record(conn, record):
 cur = conn.cursor()
 
 sql = ''' UPDATE records
    SET name = ?,
    data = ?
    WHERE id = ?'''
 cur.execute(sql, record)
 conn.commit()
 
def delete_record(conn, record):
 cur = conn.cursor()
 
 sql = ''' DELETE FROM records
    WHERE id = ?'''
 cur.execute(sql, (record[0],))
 conn.commit()"
"Write a Python script to print all prime numbers between two numbers, a and b (where a<b).","for num in range(a, b+1): 
   if num > 1: 
       for i in range(2, num): 
           if (num % i) == 0: 
               break
       else: 
           print(num)"
Make a Python program to rotate a list by n elements to the left.,"# Function to rotate a list by n elements to the left 
def rotateList(input_list, n): 
    return input_list[n:] + input_list[:n]  

# Driver Code 
if __name__ == ""__main__"": 
    input_list = [1, 2, 3, 4, 5, 6] 
    print(rotateList(input_list, 3))"
Generate a Python statement to find all prime numbers between 1 and 10.,"lst = []
for num in range(1,11):
   if all(num%i!=0 for i in range(2,num)):
       lst.append(num)"
Develop a Python function to determine the maximum possible sum of two numbers even after swapping.,"""""""
def max_sum_swap(a, b): 
    x = max(a, b) 
    y = min(a, b) 
  
    # swap the numbers 
    x = x + y 
    y = x - y 
    x = x - y 
  
    return x + y 
"""""""
Generate a python program to collect all elements of a given list that are of even length.,"def even_length_elements(my_list):
  even_length_list = list()
  for elem in my_list:
     if (len(elem) % 2 == 0):
        even_length_list.append(elem)
  return even_length_list"
Generate a Python function to check whether a given list contains a given integer.,"def check_for_int(lst, int):
    if int in lst:
        return True
    else:
        return False
    
lst = [2, 4, 6]
int = 4

is_found = check_for_int(lst, int)
print(is_found)"
Create a python program to reverse a string passed as input.,"def reverse_string(stringToReverse):
    reversedString = """"
    for i in reversed(stringToReverse):
        reversedString += i
    return reversedString
    
stringToReverse = input(""Enter string to reverse: "")
result = reverse_string(stringToReverse)
print(result)"
Create a python function that prints out the largest element in an array.,"def findLargestElement(arr):
    largest_element = arr[0]
    for element in arr:
        if element > largest_element:
            largest_element = element
    return largest_element

arr = [1,4,7,12,-1]
print(findLargestElement(arr))"
Create a Python script to read CSV data and store the data in a Pandas DataFrame.,"import pandas as pd

# Read CSV data
data = pd.read_csv(""data.csv"")

# Store data to DataFrame
df = pd.DataFrame(data)"
Produce a problem solving algorithm in Python to find the number of possible anagrams of a given word.,"def anagrams_count(word):
    if len(word) <= 1:
        return 1
    else:
        c = word[0]
        rem_let = word[1:]
        ret = anagrams_count(rem_let)
        for i in range(len(rem_let)):
            if c == rem_let[i]:
                continue
            rem_let_i = rem_let[:i] + rem_let[i+1:]
            ret += anagrams_count(rem_let_i)
        return ret"
Generate Python code to render a web page.,"import webbrowser 

url = ""http://example.com/"" 

# open url in new window, with autoraise 
# possible options are: 
# 1. open a browser window 
# 2. open a new tab 
# 3. open a background tab 

webbrowser.open_new_tab(url + 'page.html')"
Optimize the following python code array to get the maximum value from it in one pass.,"def find_max(arr):
  max_so_far = arr[0]
  current_max = arr[0]
  
  for i in range(1, len(arr)):
    current_max = max(arr[i], current_max + arr[i])
    max_so_far = max(max_so_far, current_max)
  
  return max_so_far

arr = [-5, 2, 3, 4, 6, -8]
max_val = find_max(arr)

print(max_val) # 10"
Write a Python program that takes in a string and converts it to an integer.,"def convert_string_to_int(string):
    x = 0
    for i in string:
        x = x*10 + ord(i) - ord('0')
    return x"
Create a Python program that takes in two strings and returns an integer indicating the number of common substrings between the two strings.,"def num_common_substrings(s1, s2):
    count = 0
    for i in range(len(s1)):
        for j in range(len(s2)):
            if s1[i] == s2[j]:
                count += 1
    return count

result = num_common_substrings(""abcd"", ""bae"")
print(result)"
Create a Python script to generate a random 12-digit long phone number,"import random

def generate_phone_number():
    return '{}{}{}'.format(
        random.randint(0, 9),
        random.randint(0, 9),
        ''.join( map( str, [random.randint(0, 9) for i in range(0, 9)]) )
    )

print(generate_phone_number())"
Design a program in Python to add the numbers from 0 to 10 using recursion.,"def sum_recursive(n):
    if(n == 0):
        return 0
    else:
        return n + sum_recursive(n-1)

print(sum_recursive(10))"
Write a Python program to create an array of N zeros.,"import numpy

def create_zeros_array(N):
  return numpy.zeros(N)

result = create_zeros_array(N)
print(result)"
"Create a Python program that takes a list of numbers, and finds a pair of numbers in the list whose sum equals the given number","def find_pair_with_sum(nums, target):
  seen = set()
  for num in nums:
    if target - num in seen:
      return [target - num, num]
    seen.add(num)

print(find_pair_with_sum([2, 3, 4, 5], 5))"
"Write a function in Python to convert a given time in hours, minutes and seconds, to a total number of seconds.","def time_to_seconds(hours, minutes, seconds): 
     return (hours * 3600) + (minutes * 60) + seconds
 
result = time_to_seconds(2, 3, 4) 
print(result)"
Generate a function in Python to get the nth element of a given list.,"def get_nth_item(lst, n):
  """"""
  This function returns the nth item of a given list.
  """"""
  return lst[n]"
Design a function in Python to check if a string starts with a certain substring.,"def starts_with(string, substring):
  if string[:len(substring)] == substring:
    return True
  else:
    return False"
Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.,"def check_smaller(test_tup1, test_tup2):
  res = all(x > y for x, y in zip(test_tup1, test_tup2))
  return (res) "
Design and provide a Python function to compute the nth Fibonacci number,"def Fibonacci(n):
  if n == 0:
    return 0
  elif n == 1:
    return 1
  else:
    return Fibonacci(n-1) + Fibonacci(n-2)"
Develop a program in Python to merge multiple data sets from different sources into one single data set.,"import pandas as pd 

# Load data sets 
data1 = pd.read_csv('data1.csv') 
data2 = pd.read_csv('data2.csv') 
data3 = pd.read_csv('data3.csv') 

# Merge data sets 
merged_data = pd.merge(data1, data2, on='ID')
merged_data = pd.merge(merged_data, data3, on='ID')

# Print data 
print(merged_data)"
Design a function in Python that removes any characters from a given string that appears 2 or more times.,"def remove_duplicates(string): 
    res = """" 
    for ch in string: 
        if string.count(ch) < 2: 
            res += ch 
    return res

string = ""aabcdbb""
print(remove_duplicates(string))  # prints acdb"
Write a python function to get the last element of each sublist.,"def Extract(lst): 
    return [item[-1] for item in lst] "
Write a function in Python that reads in a 2D list of size NxM and returns a list of list of size MxN.,"def transposeMatrix(list2D):
 return list(map(list, zip(*list2D)))"
Develop a python code to find out the frequent items from a given list.,"from collections import Counter
list1 = [1,2,3,4,5,6,7,2,2,2,2,8,8,8,8,9,9,9]

# Most common items in the list
data = Counter(list1) 
  
# Printing most common items 
print(data.most_common()) # Output: [(2, 4), (8, 4), (9, 3), (1, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1)]"
Generate code to programmatically generate the Fibonacci Sequence in Python.,"def fibonacci(n):
 a, b = 0, 1
 for i in range(n):
  a, b = b, a + b
 return a
 
for i in range(10):
 print(fibonacci(i))"
Modify the following python script to generate outputs in reverse chronological order.,"timetable = [""Tuesday"", ""Wednesday"", ""Thursday"", ""Friday""]

for day in reversed(timetable): 
    print(day)"
Write a Python program to convert a timestamp to a formatted date,"def timestamp_to_date(timestamp):
    return datetime.datetime.fromtimestamp(timestamp).strftime('%Y-%m-%d %H:%M:%S')"
Create a python script to sum two numbers in the command line,"import sys


def main():
    if len(sys.argv) < 3:
        print('Error: not enough arguments')
        return

    try:
        num1 = int(sys.argv[1])
        num2 = int(sys.argv[2])
    except ValueError:
        print('Error: arguments should be numbers')
        return

    print(num1 + num2)

if __name__ == '__main__':
    main()"
Write a Python function to generate a list of all prime numbers to a given maximum,"def generate_primes(max): 
    primes_list = [2] 
    for i in range(3, max + 1): 
        curr = True 
        for p in primes_list: 
            if i % p == 0: 
                curr = False 
        if curr: 
            primes_list.append(i) 
    return primes_list"
Create a python code to check if all characters are unique in a given string,"def is_unique(string):
    chars = set()
    for char in string:
        if char in chars:
            return False
        else:
            chars.add(char)
    return True

print(is_unique(string))"
Write a Python program to find the middle element of a list.,"def middle_element(list):
    mid = len(list) // 2
    return list[mid]

result = middle_element([1,3,5,7,9,11])
print(result)"
Generate a python program that creates a new list by appending an element to the last of an existing list.,"def appendElementToList(list, element):
     list.append(element)
     return list

list = [1, 2, 3]
element = 4
print(appendElementToList(list, element))"
Develop a REST API endpoint in Python to return a user's profile information from a database.,"@app.route('/api/profile', methods=['GET'])
def get_user_profile():
    user_id = request.args.get('user_id')
    user = User.query.filter_by(id=user_id).first_or_404()
    return jsonify({
        'username': user.username,
        'name': user.name,
        'email': user.email
    })"
Create a function in Python to extract all number from a comma separated string.,"def extract_numbers(s): 
    return [int(el) for el in s.split(',') if el.lstrip('-').isnumeric()]"
Design a Python algorithm to find the largest element in a list.,"def find_largest_element(lst):
   largest_element = None
   for elem in lst:
      if largest_element is None or largest_element < elem:
         largest_element = elem
  return largest_element

largest_element = find_largest_element(lst)
print(largest_element) # 45"
What code would you write to implement an efficient binary search in Python?,"def binary_search(arr, target):
  low = 0
  high = len(arr) - 1

  while low <= high:
    mid = (low + high) // 2 # floor division
    guess = arr[mid]

    if guess == target:
      return mid
    elif guess > target:
      high = mid - 1
    else:
      low = mid + 1
  return None"
Write a function to convert degrees to radians.,"import math
def radian_degree(degree):
 radian = degree*(math.pi/180)
 return radian"
Optimize a given Python program such that it runs efficiently in fewer lines of code.,"def add_two_numbers():
    return 5 + 7"
Implement a Stack in Python using the linked list data structure.,"class Stack:
 
 def __init__(self):
 self.head = None

 def is_empty(self):
 return self.head is None

 def push(self, data):
 node = Node(data)
 node.next = self.head
 self.head = node

 def pop(self):
 if self.head is None:
 return None
 data = self.head.data
 self.head = self.head.next
 return data

class Node:
 
 def __init__(self, data):
 self.data = data
 self.next = None"
Build a function in Python to calculate compound interest based on the input parameters.,"def compound_interest(principal, rate, time):
    return principal * (1 + rate/100)**time"
Rewrite this python function to make it more concise.,"def calculate_average(scores):
    return sum(scores)/len(scores)"
Write a Python loop that prints out a list of random numbers between 0 and 100.,"import random

random_numbers = []

for i in range(5):
 number = random.randint(0,100)
 random_numbers.append(number)
 print(random_numbers)"
Produce a program in python which takes a given list of numbers and creates a dictionary where each number is the key and its multiple of the given number is the value.,"def create_dictionary(my_list):
    res = {num: num * 2 for num in my_list}
    return res

# run the code
my_list = [3, 5, 7]

res = create_dictionary(my_list)
print('The dictionary is ' + str(res))"
Develop an algorithm in Python for sorting the following array in ascending order.,"def bubble_sort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(0, n - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]

array = [9, 8, 11, 5]
bubble_sort(array)
print(array)"
Create a python code snippet to count the frequencies of words in a given string,"def countFrequencies(string):
    words = string.split()
    freq_dict = {}
    for word in words:
        if word not in freq_dict:
            freq_dict[word] = 1
        else:
            freq_dict[word] += 1
    return freq_dict

# example
result = countFrequencies(""This is a test string"")"
"Using Python, write a script to detect any outliers in the given dataset.","import numpy as np 
def detect_outliers(data): 
    outliers = [] 
    data = np.array(data) 
    mean = np.mean(data) 
    std = np.std(data) 
    for i in data: 
        z_score = (i - mean) / std
        if np.abs(z_score) > 3:
            outliers.append(i) 
    return outliers"
Create a web scraping algorithm using Python to extract all the links from a webpage.,"import requests
from bs4 import BeautifulSoup

def get_links(url):
    req = requests.get(url)
    if req.status_code == 200:
        soup = BeautifulSoup(req.content, 'lxml')
        links = []
        for link in soup.find_all('a', href=True):
            links.append(link.get('href'))
        return links"
Create a Python function that takes a string and finds the longest word in it.,"def longestWord(sentence): 
    longestWord = ''
    maxLength = 0
    for word in sentence.split(' '):
        if len(word) > maxLength:
           maxLength = len(word)
           longestWord = word
    return longestWord

longest_word = longestWord(sentence)
print('The longest word is: '+ longest_word)"
Write a function to find cubes of individual elements in a list using lambda function.,"def cube_nums(nums):
 cube_nums = list(map(lambda x: x ** 3, nums))
 return cube_nums"
"Using an object-oriented approach, design a deck of cards class in Python.","class Deck:
def __init__(self, suits, ranks):
 self.suits = suits
 self.ranks = ranks
 self.cards = [(suit, rank) for suit in self.suits for rank in self.ranks]
 
def draw_card(self):
 return self.cards.pop()
 
def shuffle_deck(self):
 random.shuffle(self.cards)"
Create a Python program to remove punctuations from the given sentence,"import string

def remove_punctuations(sentence):
    translator = str.maketrans('', '', string.punctuation)
    return sentence.translate(translator)

print(remove_punctuations(""He loves to eat Italian; pizza, pasta, and gelato""))"
Generate an AI program in Python that will predict the stock prices for an asset.,"import pandas as pd

def predict_stock_prices(data):
    # Your code here
    # ...

    return prediction"
Write a function to interleave lists of the same length.,"def interleave_lists(list1,list2,list3):
    result = [el for pair in zip(list1, list2, list3) for el in pair]
    return result"
Design a code generator to convert a Python code into Javascript code.,"function helloWorld() {
 console.log(""Hello World"");
}"
Generate a Python program for extending a list with strings. The program should take a string as input and create a new list containing the string and all the strings from the input list.,"inputList = [""Hello"", ""World""]
newString = ""Hi""

outputList = []

for string in inputList:
    outputList.append(string)

outputList.append(newString)

print(outputList)"
Design a Python function to display a message if the input is a palindrome.,"def is_palindrome(string):
    # Reversing the string 
    rev = string[::-1] 
  
    # Checking if both string are equal or not 
    if (string == rev): 
        print(""The given string is a Palindrome"")
    else: 
        print(""The given string is not a Palindrome"")"
Generate a python program that calculates the area of a triangle.,"def area(b,h): 
    return (b*h)/2 

b = int(input('Please enter the base: ')) 
h = int(input('Please enter the height: ')) 

print('The area of the triangle is: ', area(b,h))"
Write a Python script that mines data from Twitter and displays the latest tweets for a keyword.,"import tweepy

consumer_key = ''
consumer_secret = ''
access_token = ''
access_token_secret = ''

auth = tweepy.OAuthHandler(consumer_key, consumer_secret)
auth.set_access_token(access_token, access_token_secret)

api = tweepy.API(auth)

public_tweets = api.search('python')
for tweet in public_tweets:
    print(tweet.text)"
Generate a Python code that prints the Fibonacci numbers up to n.,"def Fibonacci(n): 
    a = 0
    b = 1
  
    if n == 1: 
        print(a) 
    else:
        print(a) 
        print(b)
        for i in range(2,n): 
            c = a + b 
            a = b 
            b = c 
            print(b)

Fibonacci(10)"
Write a Python program to print the square root of a given number input from the user.,"import math

num = float(input(""Enter a number: ""))

# checking if the number is negative
if num < 0:
    print(""The square root of the given number cannot be computed"")
else:
    print(""The square root of the given number is:"",math.sqrt(num))"
Rewrite the following if/else statement in one line of Python code,do_this() if condition else do_that()
Write a Python program to find the maximum and minimum numbers from a non-empty list.,"# Initializing the list
list1 = [5, 6, 10, -9, 3, 21]

# Maximum and Minimum in a List

max = list1[0]
min = list1[0]

# Print all the list elements
for i in range(0, len(list1)):
    if list1[i]>max:
        max = list1[i]
    if list1[i]<min:
        min = list1[i]

print(""The max value is:"", max)
print(""The min value is:"", min)"
Generate a Python program to find the frequency of an element in a list.,"def find_frequency(lst, element):
    return lst.count(element)

lst = [1, 2, 3, 4, 1, 2, 1]
print(find_frequency(lst, 1))"
Write an algorithm to sort an array of integers in Python.,"def bubble_sort(nums):
    size = len(nums)
    for i in range(size):
        for j in range(size-1):
            if nums[j] > nums[j+1]:
                temp = nums[j]
                nums[j] = nums[j+1]
                nums[j+1] = temp
    return nums

print(bubble_sort([2,1,3,4,6,5]))"
Develop a python program that detects and corrects spelling mistakes in a given string.,"import re

def spell_check(s):
 corrected = re.sub(r'\bfoox\b', 'fox', s)
 corrected = re.sub(r'\boevr\b', 'over', corrected)
 corrected = re.sub(r'\blasy\b', 'lazy', corrected)
 return corrected

print spell_check(""The quik brown foox jumped oevr the lasy dog."")"
Write a Python script to split a string into a list based on the given delimiter.,"def split_string(string, delimiter):
    return string.split(delimiter)"
"Write a Python program to optimize the following objective function: z = x + y – 2xy, where x,y ∈ [0,1].","def optimize_func(x,y):
    return (x + y - (2 * x * y))

def optimize(upper_bound):
    best_val = 0
    for x in range(0, upper_bound + 1):
        for y in range(0, upper_bound + 1):
            cur_val = optimize_func(x,y)
            if cur_val > best_val:
                best_val = cur_val
    return best_val"
Generate a list of integers from 1 to 10 using a for loop in Python.,"nums = []
for i in range(1, 11): 
    nums.append(i)
print(nums)"
"Create a Python class for a customer that stores the customer’s first name, last name and email address.","class Customer:
    def __init__(self, first_name, last_name, email):
        self.first_name = first_name
        self.last_name = last_name
        self.email = email

customer = Customer(""John"", ""Smith"", ""john.smith@example.com"")"
Write a Python code snippet to print all numbers between 1 to 10 except 3 and 5.,"for numb in range(1, 11):
    if numb == 3 or numb == 5:
        continue
    print(numb)"
Test the following Python code and identify a bug,"This code will result in a `ValueError` because `int()` cannot convert the string 'A123' into an integer. To fix this, you can use `try/except` statements to catch the error and handle it appropriately.

try: 
 number = int(not_a_number)
except ValueError as e:
 print(f'Error converting {not_a_number} to an integer: {e}')"
Create a python script to generate a list of numbers which are less than 1000 and divisible by 7.,list_of_numbers = [x for x in range(1000) if x % 7 == 0]
Generate a python function to optimize a given function,"def optimize_function(func):
    optimizer = tf.keras.optimizers.Adam()
    for step in range(steps):
        with tf.GradientTape() as tape:
            y_pred = func()
            # compute loss
            loss = some_loss(y_true, y_pred)
        gradients = tape.gradient(loss, func.variables())
        optimizer.apply_gradients(zip(gradients, func.variables()))
    return func"
Write an efficient algorithm to optimize the given code in Python.,"def my_process(data):
    result = [] 
    for item in data: 
        processed_data = do_process(item) 
        result.append(processed_data) 
    return result

def my_optimized_process(data):
    return [do_process(item) for item in data]"
Design a class in Python that takes two numbers as parameters and returns a multiplication of them.,"class Multiplication:
    def __init__(self, num1, num2):
        self.num1 = num1
        self.num2 = num2
      
    def multiply(self):
        return self.num1 * self.num2"
"Write a Python program to randomly generate a 5x5 matrix of integers between 1 and 10, and then find the sum of each row of the matrix.","import random

# Create a 5x5 matrix of random integers between 1-10
matrix = [[ random.randint(1,10) for _ in range(5)] for _ in range(5)]

# Print the matrix
for row in matrix:
 print(row)

# Find the sum of each row
row_sums = [sum(row) for row in matrix]

# Print the row sums
print(row_sums)"
Create a Python function to calculate the sum of all numbers from 0 to the input number.,"def sum_to(num):
    sum = 0
    for i in range(num+1):
        sum += i
    return sum
 
num = 5
print(sum_to(num))   # 15"
Construct a program for measuring the execution time of a given function in Python.,"import time
 
def measure_time(func):
    t_start = time.time()
    func()
    t_end = time.time()
    t_delta = t_end - t_start
    print(f""Function execution time is {t_delta} seconds"")"
Integrate the following logic into a python program,"num = int(input(""Enter a number: ""))
if num > 10:
    print(""OK"")
else:
    print(""Not OK"")"
Create a program in Python 3 that prints out the numbers from 1 to 10 in order with a one-second delay between each number.,"import time

for i in range(1, 11):
 print(i)
 time.sleep(1) # delay for one second"
Write a Python program to print the elements of a list from the last to the first.,"_list = [1,2,3,4,5]

# Iterate through the list in reverse order
for i in range(len(_list) - 1, -1, -1): 
    print(_list[i]) 
  
# Output: 
# 5 
# 4 
# 3 
# 2 
# 1"
Create a Python function that takes two strings and returns true if the first string is a subsequence of the second.,"def is_subsequence(str1, str2):
    i = 0
    j = 0

    while(i < len(str1) and j < len(str2)):
        if str1[i] == str2[j]:
            i += 1
        j += 1

    return i == len(str1)"
Design an algorithm in Python that returns true if a given string is a palindrome.,"def is_palindrome(s): 
    # Reverse the string  
    rev = ''.join(reversed(s)) 
  
    # Check if the string is equal to its reverse 
    if (s == rev): 
        return true
    return false"
"Write a function in Python that takes a single argument, an unsigned integer, and returns the binary representation of that argument as a string.","def IntToBinString(number):
    if number == 0:
        return ""0""
    ret = """"
    while number > 0:
        if number % 2 == 1:
            ret = ""1"" + ret
        else:
            ret = ""0"" + ret
        number //= 2
    return ret"
Write a Python program to calculate the Root Mean Square Error (RMSE) error value for a given prediction.,"from sklearn.metrics import mean_squared_error

def calculate_rmse(y_predicted, y_actual):
    error = mean_squared_error(y_predicted, y_actual)
    rmse = error**0.5
    return rmse

y_predicted = [1, 2, 3]
y_actual = [2, 3, 4]
rmse = calculate_rmse(y_predicted, y_actual)
print(rmse) # Output: 1.0"
Create a program using Python to generate a random list of numbers between 1 and 100 with seven entries.,"import random 
  
# function to generate and 
# print a random list of 7 numbers  
# between 1 to 100 
def randomList(): 
    randomNumbers = random.sample(range(1, 100), 7) 
    print (""Random List is : "", end="""") 
    for num in randomNumbers: 
        print (num, end = "" "") 
       
randomList()"
Suggest a valid Python syntax to calculate the sum of two variables using lambda,"sum = lambda a, b : a + b
print(sum(3,4))"
Combine 2 strings and reverse the result in Python.,"words = ""Hello ""
words2 = ""world!""

combined = words + words2
result = combined[::-1]

print(result)"
Implement a machine learning model in Python for predicting the price of a house given some features.,"from sklearn.linear_model import LinearRegression

X = [[3, 1200, 8], [4, 1800, 8], [5, 1100, 9]]
Y = [150000, 175000, 180000]

model = LinearRegression()
model.fit(X, Y)

prediction = model.predict([[7, 2000, 10]])
print(prediction)"
"Create a function in Python that takes a number and prints the odd numbers in the range [0, n).","def printOddNumbers(n):
    ""Prints the odd numbers in the range [0, n).""
    for i in range(n):
        if i % 2 != 0:
            print(i)

#Example
printOddNumbers(10)"
Write a 50 lines of code snippet in Python that implements linear search algorithm.,"def linear_search(arr, target):
 for i in range(len(arr)):
 if arr[i] == target:
 return i
 
 return -1

# Test array 
arr = [1, 4, 3, 2, 5] 
target = 3

# Function call 
result = linear_search(arr, target) 
  
if result != -1: 
 print (""Element is present at index"", result) 
else: 
 print (""Element is not present in array"")"
Generate a code in Python to find the index of the smallest element in a given list of numbers.,"def index_min(arr):
    min_index = 0
    for i in range(1,len(arr)):
        if arr[i] < arr[min_index]:
            min_index = i
    return min_index"
Use the NumPy library to generate an array of random integers from 1 to 10 in Python.,"import numpy as np

np.random.randint(1, 11, size=10)
# Output: array([7, 4, 9, 9, 2, 2, 4, 7, 1, 5])"
Implement a customized Linear Search algorithm in Python,"#Function to implement Linear Search 
def linear_search(arr, x): 
    for i in range(len(arr)): 
        if arr[i] == x: 
            return i
    return -1
  
#Test 
arr = [1, 2, 3, 4, 5, 6] 
x = 4
  
#Function call 
result = linear_search(arr, x) 
  
if result != -1: 
    print ""Element is present at the index"", result 
else: 
    print ""Element is not present in the array"""
Create an algorithm in Python which checks if a given number is a prime number.,"def is_prime(n): 
 if n <= 1: 
  return False
  
 for i in range(2, n): 
  if n % i == 0: 
   return False
 
 return True"
Create a class in Python that represents a tennis match.,"class TennisMatch:
    def __init__(self):
        self.player_one = None
        self.player_two = None
    
    def set_players(self, player_one, player_two):
        self.player_one = player_one
        self.player_two = player_two
    
    def start_match(self):
        pass
    
    def end_match(self):
        pass"
Create a visualization in Python using Matplotlib that displays the top 5 most popular programming languages.,"import matplotlib.pyplot as plt

x_values = [""Python"", ""Java"", ""C++"", ""Javascript"", ""C#""]
y_values = [45, 25, 15, 10, 5]

plt.bar(x_values, y_values)

plt.title(""Popular Programming Languages"")
plt.ylabel(""Percentage of Use"")
plt.xlabel(""Languages"")

plt.show()"
Create a class in Python 3 that represents a process with a start() and stop() function.,"class Process:
    def start(self):
        # code to start the process 
        pass

    def stop(self):
        # code to stop the process 
        pass"
Create a Python program to search through a given dictionary and output the values of given keys.,"def search_dictionary(dictionary, keys):
    output = []
    for key in keys:
        output.append(dictionary[key])
    return output"
Generate a correct Python program to print out the sequence of numbers in ascending order from a given list.,"for i in sorted([10, 5, 2, 8, 12]):
        print(i)"
Write a function to access the initial and last data of the given tuple record.,"def front_and_rear(test_tup):
  res = (test_tup[0], test_tup[-1])
  return (res) "
Perform a linear-time search on a given list of numbers in Python.,"def linear_search(lst, x):
    for i in range(len(lst)):
        if lst[i] == x:
            return i
    return -1

print(linear_search([5,3,7,2,1], 3))"
Generate a Python code to print the common elements between two lists.,"def find_common_elements(list1, list2):
    common_elements = []
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                common_elements.append(elem1)
    return common_elements"
Build a function to sort an array of words by their length in Python.,"def sort_by_length(words):
    return sorted(words, key=len)"
Write a python class to represent a triangle object that has the attributes length of each side.,"class Triangle:
    def __init__(self, side1, side2, side3):
        self.side1 = side1
        self.side2 = side2
        self.side3 = side3

    def get_area(self):
        s = (self.side1 + self.side2 + self.side3) / 2
        area = (s*(s - self.side1)*(s - self.side2) *
                (s - self.side3)) ** 0.5
        return area"
Write a Python program to optimize the given linear objective function using the Simplex algorithm.,"import numpy as np
from scipy.optimize import minimize

def optimize_function(objective):
  bounds = ((0, None), (0, None), (0, None))
  res = minimize(objective, [1,1,1], method=""Nelder-Mead"", bounds=bounds)
  return res"
Write a function to find the smallest missing element in a sorted array.,"def smallest_missing(A, left_element, right_element):
    if left_element > right_element:
        return left_element
    mid = left_element + (right_element - left_element) // 2
    if A[mid] == mid:
        return smallest_missing(A, mid + 1, right_element)
    else:
        return smallest_missing(A, left_element, mid - 1)"
Develop a program in Python to find the largest number divisible by 3 from a given list.,"def divisibleByThree(lst):
 result = 0

 for num in lst:
 if (num % 3 == 0) and (num >= result):
 result = num
 
 return result

lst = [8, 5, 12, 15, 9]

print(divisibleByThree(lst))
# Output: 15"
Generate code to analyze sentiment of a given text using the TextBlob Python library.,"from textblob import TextBlob 
 
print('Enter your text:') 
text = input()

blob = TextBlob(text) 
sentiment = blob.sentiment 

if sentiment.polarity > 0: 
    print('Positive sentiment') 
elif sentiment.polarity == 0: 
    print('Neutral sentiment') 
else: 
    print('Negative sentiment')"
"Generate a Python script that filters a list of strings, keeping only those that have a length greater than 5 characters.","def filter_words(words): 
    filtered_words = [] 
    for word in words: 
        if len(word) > 5: 
            filtered_words.append(word) 
    return filtered_words 

words = [""hello"", ""world"", ""example"", ""test""]

filtered_words = filter_words(words) 

print(filtered_words)  # Output: ['example', 'test']"
Generate a Python program to classify emails as either spam or not given a list of words,"def classify_emails(emails):
    result = []
    for email in emails:
        words = email.split("" "")
        is_spam = False
        for word in words:
            if word in ['buy', 'now', 'save']:
                is_spam = True
                break
        result.append(is_spam)
    return result"
Develop a python program automate the process of generating a list of random numbers between 1 to 100.,"import random

def generate_random_nums(n,min_val,max_val):
    output = []
    for i in range(n):
        output.append(random.randint(min_val,max_val))
    return output

if __name__ == '__main__':
    n = 10
    min_val = 1
    max_val = 100
    print(generate_random_nums(n,min_val,max_val))"
Create a web scraper using Python and BeautifulSoup to extract the prices of a product from an online store,"import requests
from bs4 import BeautifulSoup

url = 'https://example.com/product/123'
response = requests.get(url)
soup = BeautifulSoup(response.text, 'html.parser')

price_block = soup.find('div', class_='price')
prices = [float(price.text) for price in price_block.find_all('span')]

print(f""Prices for {url} are {prices}"")"
Combine the given lists in Python and sort the result in ascending order.,"# combine the two lists
combined_list = list1 + list2

# sort the list in ascending order
combined_list.sort() 
print(combined_list)"
edit the given Python program to delete an elements at a given position,"def delete(list,N):
    first_part = list[:N] 
    last_part = list[N+1:]
    list = first_part + last_part
    return list
 
list1 = [1,2,3,4,5]
N = int(input('Enter the index of the element to be deleted: '))
list1 = delete(list1,N)
print(list1)"
Generate a Python dictionary to store the average scores for 10 different students.,"student_scores = {
    'John': 88.0, 
    'Jane': 91.2, 
    'Adam': 70.6, 
    'Josh': 75.1,
    'Paul': 95.5,
    'Abby': 87.3,
    'Brian': 67.3,
    'Kim': 80.5,
    'Mark': 93.2,
    'Sarah': 86.7
}"
Optimize a given Python function to run faster.,"def lower_string(string):
    return string.strip().lower()"
Write a Python program to identify numbers from a comma-separated string.,"mystring = ""1,2,3,4,5,6,7,8,9""

numbers = mystring.split("","")
for num in numbers:
    print(int(num))"
Generate a Python script to sort a list of integers,"def sort_list(my_list):
    my_list.sort()
    return my_list

print(sort_list([3,8,1,5,6]))"
Create a Python program that generates a random number between 5-15.,"import random

x = random.randint(5,15)
print(x)"
Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.,"import re
text = 'Python Exercises'
def replace_spaces(text):
  text =text.replace ("" "", ""_"")
  return (text)
  text =text.replace (""_"", "" "")
  return (text)"
"Design a Simple Calculator class in Python that contains methods for addition, subtraction, multiplication and division.","class Calculator:
    def __init__(self):
        # initialization code
    
    def add(self, x, y):
        return x + y
    
    def subtract(self, x, y):
        return x - y
    
    def multiply(self, x, y):
        return x * y
    
    def divide(self, x, y):
        return x / y"
Write a Python script to calculate the circumference of a circle when the radius of the circle is given.,"def calc_circle_circumference(radius):
    circumference = 2 * 3.14 * radius
    return circumference

circle_circumference = calc_circle_circumference(4)
print(circle_circumference)"
Create a function in Python that prints the first n Fibonacci numbers.,"def fibonacci(n):
  fib_list = [0, 1]
  for i in range(2, n):
    fib_list.append(fib_list[i-2] + fib_list[i-1])
  return fib_list[:n]

fibonacci_list = fibonacci(6)
print(fibonacci_list)"
Develop a Python program to find the largest palindrome number in a given range.,"def get_largest_palindrome_in_range(min, max):
    max_palindrome = 0
    # Iterate over range
    for x in range(min, max+1):
        # Check if number is a palindrome
        if str(x) == str(x)[::-1]:
            # If this palindrome is larger, update the maximum
            if x > max_palindrome:
                max_palindrome = x

    return max_palindrome"
Generate a Python program to implement basic authentication.,"import base64

def basic_auth(username, password):
    user_pass = username + ':' + password
    encoded_user_pass = base64.b64encode(user_pass.encode('UTF-8'))

    return ""Basic "" + encoded_user_pass.decode('UTF-8')

# Example usage
user = 'my_username'
pass = 'my_password'
auth_header = basic_auth(user, pass)"
"Design a python program to convert a given number of days into years, months, and days.","# convert days
def convert_days(days):
  years = days // 365
  months = (days % 365) // 30
  days = (days % 365) % 30 
  return (years, months, days)

# test
days = 900
years, months, days = convert_days(days)
print(""Number of years ="", years) 
print(""Number of months ="", months) 
print(""Number of days ="", days)"
Create a Python program to print the multiplication table of the given number n.,"def print_table(n):
 for i in range(1, n+1):
 for j in range(1, n+1):
 print(f'{i} x {j} = {i * j}')
 print()"
Create a program in Python to generate a sequence of five unique random numbers between 1 and 10,"from random import randrange

def generate_rand_seq(): 
    rand_list = []
    while len(rand_list) < 5:
        rand_num = randrange(1, 10)
        if rand_num in rand_list:
            continue
        rand_list.append(rand_num)
    return rand_list

print(generate_rand_seq())"
Write a function to combine two given sorted lists using heapq module.,"from heapq import merge
def combine_lists(num1,num2):
  combine_lists=list(merge(num1, num2))
  return combine_lists"
Create a program in Python which generates a digital ticket for a ticket reservation system.,"import uuid

# Generate a random ticket ID
ticket_id = uuid.uuid4()

# Print the ticket ID
print(""Your ticket ID is:"", ticket_id)"
Generate a python program to remove duplicate elements in a given list.,"def remove_duplicates(arr): 
    new_arr = [] 
    
    for i in arr: 
        if i not in new_arr: 
            new_arr.append(i) 
            
    return new_arr"
Write a python program to convert an integer to its binary form.,"def integer_to_binary(num):
    if num == 0:
        return 0
    elif num < 0:
        num += 2**32
    binary = ''
    while num > 0:
        binary = str(num%2) + binary
        num //= 2
    return binary"
Write a Python program to sort a list of tuples according to its second parameter in ascending order.,"def sort_tuples(list): 
    """"""Function to sort tuples according to their second parameter"""""" 
    list.sort(key = lambda x : x[1]) 
    return list

#Example:
print(sort_tuples(list))"
Create a Python program that simulates a dice roll by randomly selecting a number between 1 and 6.,"import random

# Simulate a dice roll by randomly selecting a number between 1 and 6
die_roll = random.randint(1, 6)
print(""You rolled a"", die_roll)"
Create a Python code snippet to remove all elements within a list with value 0.,"my_list = [0, 2, 3, 0, 4]
my_list[:] = [val for val in my_list if val != 0]
print(my_list)"
Write a Python program to find the maximum length of consecutive 1s in a binary array.,"def find_max_consecutive_1s(Array):
    max_count = 0
    count = 0
    for i in Array:
        if i == 1:
            count += 1
            max_count = max(max_count, count)
        else:
            count = 0
    return max_count"
"Given two integers, write a Python function to add them.","def add_integers(num1, num2):
 return num1 + num2"
Use Python to convert a single number from binary to decimal,"def binary2decimal(binary):
	dec = 0
	for i in range(len(binary)):
		digit = binary[i]
		dec += int(digit)*(2**(len(binary)-1-i))

	return dec

print(binary2decimal(""10011"")) # 19"
Create a function in Python to filter a list of numbers by a given criteria.,"# Filter a list with a given criteria
def filter_list(input_list, criteria):
    filtered_list = []
    for num in input_list:
        if num % criteria == 0:
            filtered_list.append(num)
    return filtered_list

result = filter_list([2, 3, 4, 5, 6, 7], 3)
print(result)"
Design a Python script to print out the names and ages of people in a given list.,"def print_names_and_ages(people):
    for person in people:
        print(""Name: {}\nAge: {}"".format(person['name'], person['age']))"
Generate a Python program to compute the sum of values of a given dictionary.,"def sum_values(data):
    return sum(data.values())"
Create a Python script to parse a dictionary using a list comprehension and create a new dictionary with the keys and values swapped.,"{v:k for k, v in d.items()}"
Modify the following python code to take in an argument to carry out a specific operation and print it out.,"def operation(op):
    result = eval(op)
    print(result)

operation('2*2') # prints 4"
Develop a function in Python to print out the Fibonacci sequence up to the given number n.,"def printFibonacci(n):
    if n<0:
        print('Incorrect input')
    elif n==0:
        print(0)
    elif n==1:
        print(0,1)
    else:
        a=0
        b=1
        print(a)
        print(b)
        for i in range(2,n):
            c=a+b
            a=b
            b=c
            print(c)"
Define a Node class in Python to represent a simple linked list.,"class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

def add_node(head, new_data):
    new_node = Node(new_data)
    if head is None:
        head = new_node
    else:
        last = head
        while(last.next):
            last = last.next
        last.next = new_node
    return head"
Create a Python function that determines whether a word is a palindrome.,"def is_palindrome(word):
    reverse_word = word[::-1]
    if word == reverse_word:
        return True
    else:
        return False

result = is_palindrome(""madam"")
print(result)"
Write a function to remove odd characters in a string.,"def remove_odd(str1):
 str2 = ''
 for i in range(1, len(str1) + 1):
    if(i % 2 == 0):
        str2 = str2 + str1[i - 1]
 return str2"
Create a Python class to represent a Rectangle with two properties: length and width.,"class Rectangle:
    def __init__(self, length, width):
        self.length = length
        self.width = width
        
    def area(self):
        return self.length * self.width"
Create a string manipulation program in Python that takes a user input string and outputs a version of the string with all characters in upper-case.,"userString = input(""Enter a string: "")
uppercasedString = userString.upper()
print(uppercasedString)"
"Using Python, create a function called `print_list` that prints out the elements of a list.","def print_list(L):
    for item in L:
        print(item)

L = [1,2,3,4,5]
print_list(L)"
Make a program in Python that takes a number n and returns the nth fibonacci number.,"def fibonacci(n):
  if n <= 2:
    return 1
  else:
    return fibonacci(n-1) + fibonacci(n-2)
  
print(fibonacci(5)) # 5"
Write a Python function to replace all occurrences of a pattern in a string with a specific string?,"def replace_all(orig_str, pattern, replacement):
	return orig_str.replace(pattern, replacement)

print(replace_all(orig_str=""Today is a beautiful day"", pattern=""a"", replacement=""the""))"
Write a python program to calculate a person's BMI (body mass index).,"# Calculate BMI
height = 1.75 # meters
weight = 80 # kilograms
bmi = weight / (height * height)
print(""BMI: "", bmi)"
Analyze the sentiment of a given text using Python,"from nltk.sentiment.vader import SentimentIntensityAnalyzer

#init sentiment analyzer
analyzer = SentimentIntensityAnalyzer()

#analyze sentiment
sentiment_scores = analyzer.polarity_scores(""I love writing code!"")

if sentiment_scores['pos'] > sentiment_scores['neg']:
    print (""The sentiment of the text is positive"")
else:
    print (""The sentiment of the text is negative"")"
Write code to determine the type of a given variable in Python.,"def get_type(var):
    return type(var).__name__"
Write a valid python expression to print string n times,print(str * n)
Develop a program in Python to classify the elements in an array as even or odd.,"evenArray = []
oddArray = []
for i in array:
  if i % 2 == 0:
    evenArray.append(i)
  else:
    oddArray.append(i)"
Manipulate a python dictionary to print the duplicate keys in a key-value pair.,"for key, value in dictionary.items():
    if dictionary.count(key) > 1:
        print(key)"
Create a python class to generate a sequence of integers,"class sequenceGenerator:
    def __init__(self, n):
        self.n = n
    
    def genSequence(self):
        sequence = []
        for i in range(self.n+1):
            sequence.append(i)
        return sequence"
Create a regex pattern that matches two different words and prints out the second word if found.,"pattern = r""learn (Python|Java) (\w+)"" 
match = re.search(pattern, text) 
if match: 
    print(match.group(2)) # Prints ""now"" or ""later"""
Create a program in Python to solve this equation: X^2 - 6X + 9.,"import numpy as np

# Define the function
def function(x):
    return x**2 - 6*x + 9

# Calculate the roots
roots = np.roots([1, -6, 9])

print(""The solutions for the equation are: x={} and x={}"".format(roots[0], roots[1]))"
Design a web scraper in python to get the latest news.,"import requests
from bs4 import BeautifulSoup

url = 'http://www.example.com/latest-news'

# get the html content
content = requests.get(url)

# create a soup object
soup = BeautifulSoup(content.text, 'html.parser')

# get all the news title and links
news = soup.findAll('a', attrs = {'class': 'news-link'})

# loop over all the news
for n in news:
    print(n.text, n['href'])"
"Create a Python class called ""Foo"" and give it three properties: name, num, and array.","class Foo:
    def __init__(self, name, num, array):
        self.name = name
        self.num = num
        self.array = array"
"Create a Python program to reformat a JSON string, preserving indentation and enforcing the order in which members appear.","import json
 
def reformat_json(json_string):
    return json.dumps(json.loads(json_string), indent=4, sort_keys=True)"
Write a function in Python to convert a string of hexadecimal characters to their corresponding ASCII value.,"def hexToASCII(hexStr):
 num = int(hexStr, 16)
 return chr(num)"
Create a Python program to increase a number by 5.,"def increase_number(number):
    return number + 5"
Write a Python code that takes a string as input and removes all punctuation and non-alphabetic characters.,"def remove_non_alphabetic(string):
    new_string = """"
    for char in string:
        if char.isalpha():
            new_string += char
    return new_string

print(remove_non_alphabetic(string)) # prints Thisisstring"
Create a Python script to generate a list of prime numbers less than 1000.,"# list of prime numbers
primes = []

# loop over numbers 0 - 1000
for num in range(2,1000):
  # if current number is prime add to list
  if all(num % i != 0 for i in range(2,num)):
    primes.append(num)

print(primes)"
Create a simple Python program to sum the values of two variables.,"x = 5
y = 4

total = x + y

print(total) # Output: 9"
Write a function that matches a string that has an a followed by zero or one 'b'.,"import re
def text_match_zero_one(text):
        patterns = 'ab?'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')"
Please transform this Python list comprehension into a for loop.,"list_1 = []
for x in range(1, 10):
    if x % 2 == 0:
        list_1.append(x)"
"Write a Python program to print out the numbers from 0 to 20, but only print out 3, 5, and 8.","for i in range(0,21):
 if i == 3 or i == 5 or i == 8:
  print(i)"
Modify an existing Python list to remove any elements that occur more than once and keep just the unique elements.,"def unique_list(list):
    unique_list = []
    for item in list:
        if item not in unique_list:
            unique_list.append(item)
    return unique_list"
"Create a GUI application in Python that displays ""Welcome to our application"".","import tkinter
window = tkinter.Tk()
window.title('My Application')
window.geometry('200x200')
lbl = tkinter.Label(window,text=""Welcome to our application!"")
lbl.pack()
window.mainloop()"
Generate a list of 100 random numbers between 1 and 10 within python.,"import random

random_list = []

for i in range(100):
    random_list.append(random.randint(1,10))
    
print(random_list)"
Write a Python program to apply a k-NN algorithm for classification tasks.,"import numpy as np
from sklearn.neighbors import KNeighborsClassifier

def knn_classify(X, y, k):
	model = KNeighborsClassifier(n_neighbors=k, weights='distance')
	model.fit(X, y)
	return model"
Build an algorithm to find the maximum and the minimum element of an array in Python.,"def findmaxmin(array):
	maximum = array[0]
	minimum = array[0]
	for i in range(1,len(array)):
		if array[i] > maximum:
			maximum = array[i]
		if array[i] < minimum:
			minimum = array[i]
	return (maximum, minimum)

array = [1,2,3,4,5]

print(findmaxmin(array))"
Write a Python function that takes two dimensional array and transposes it.,"def transpose_matrix(matrix):
    transposed_matrix = []
    for i in range(len(matrix[0])):
        row = []
        for j in range(len(matrix)):
            row.append(matrix[j][i])
        transposed_matrix.append(row)
    return transposed_matrix

my_matrix =[[1,2,3],[4,5,6]]
transposed_matrix = transpose_matrix(my_matrix)
print(transposed_matrix)"
Create a Python script to format a JSON string.,"# import json library
import json

# parse input string as JSON
json_data = json.loads(json_str)

# format the json string
formatted_json = json.dumps(json_data, indent=4)

# print the formatted json string
print(formatted_json)"
Create a program in Python to solve the Tower of Hanoi problem.,"def moveTower(height,fromPole, toPole, withPole):
    if height >= 1:
        moveTower(height-1,fromPole,withPole,toPole)
        moveDisk(fromPole,toPole)
        moveTower(height-1,withPole,toPole,fromPole)

def moveDisk(fp,tp):
    print(""Moving disk from"",fp,""to"",tp)

moveTower(3,""A"",""B"",""C"")"
What is a Python list?,"A Python list is an ordered collection of objects, stored in memory and indexed by number that can contain items of different types such as numbers, strings, and other lists."
"Create a Python program to generate a random password that is 8 characters in length and includes a combination of letters, numbers, and special characters.","import random
import string

def generate_password():
 password_length = 8
 password_chars = string.ascii_letters + string.digits + string.punctuation

 password = ''.join(random.choice(password_chars) for _ in range(password_length))
 return password

password = generate_password()
print(password)"
Create a Python program that sorts the given list in ascending order.,"unsorted_list = [5, 8, 2, 1, 3, 10]

sorted_list = sorted(unsorted_list)

print(sorted_list)"
Create a Python script which takes in a list of integers and outputs a list of odd numbers in descending order.,"def odd_descending(lst):
    lst = [x for x in lst if x % 2 != 0]
    return sorted(lst, reverse=True)

list = [14, 21, 8, 5, 46]
print(odd_descending(list))"
Design a compiler to identify the language and the keywords used in a given source code.,"def isPython(code):
    keywords = ['for', 'in', 'range', 'print']

    # check for each keyword
    for keyword in keywords:
        if keyword not in code:
            return False

    return True

code = '''
for i in range(10):
	print(i)
'''

print(isPython(code))
# Output: True"
"Generate a Bash script that runs a Python program. The Python program should receive a string as input, print its size, and then sort the string in alphabetical order.","#!/bin/bash
# Script to run Python program

input_string=""Hello, world""

python <<END

input_string=""$input_string""

print(""Input string:"", input_string)
print(""Size of string:"", len(input_string))
print(""Sorted string:"", ''.join(sorted(input_string)))

END"
Write a function to split the given string with multiple delimiters by using regex.,"import re
def multiple_split(text):
  return (re.split('; |, |\*|\n',text))"
Create a algorithm in Python that will predict the outcome of a dice roll.,"import random

def dice_predict(sides):
    '''Returns a random outcome of dice roll between 1 and specified number of sides.'''
    return random.randint(1, sides)"
Create a Python class to represent a rectangle.,"class Rectangle:
    def __init__(self, length, width):
        self.length = length
        self.width = width
    
    def get_area(self):
        return self.length * self.width"
Generate a python code to print out all prime numbers between 1 to 100.,"for num in range(2, 101):
  
    for i in range(2,num):
        if (num % i) == 0:
            break
    else:
        print(num, end=' ')
# Output : 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97"
Develop a Python program that prints the maximum and minimum numbers from a given list.,"list_num = [1, 3, 7, 4, 9, 0]

min_num = min(list_num)
 max_num = max(list_num)

print('Minimum is:', min_num) 
 print('Maximum is:', max_num)"
Modify an existing Python program to make it more efficient.,"# Program to find the sum of all elements in an array

def sum_arr(arr):
    # faster sum using numpy
    return np.sum(arr)"
"Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).","def get_max_sum (n):
	res = list()
	res.append(0)
	res.append(1)
	i = 2
	while i<n + 1:
		res.append(max(i, (res[int(i / 2)] 
						+ res[int(i / 3)] +
							res[int(i / 4)]
						+ res[int(i / 5)])))
		i = i + 1
	return res[n]"
Reverse a Python list without using any in-built functions,"def reverse_list_without_function(list_):
    result = []
    for i in range(len(list_)-1,-1,-1):
        result.append(list_[i])
    return result

list_ = [1,2,3,4]
print(reverse_list_without_function(list_)) # => [4, 3, 2, 1]"
Generate an XOR neural network in Python that has two input nodes and one output layer.,"import numpy as np

def generate_xor_nn(): 
    model = tf.keras.models.Sequential()
    model.add(tf.keras.layers.Dense(2, activation=""relu"", input_dim=2))
    model.add(tf.keras.layers.Dense(1, activation=""sigmoid""))
    model.compile(optimizer='rmsprop', loss='binary_crossentropy',
                      metrics=['accuracy'])
    return model"
Create a script in Python that prints a matrix of size n x m containing random numbers.,"import random

def random_matrix(n, m):
    matrix = []
    for i in range(n):
        row = []
        for j in range(m):
            row.append(random.randint(1,100))
        matrix.append(row)
    return matrix

res = random_matrix(3, 2)
print(res)"
Create a way to encrypt a message using a key in Python.,"import hashlib

def encrypt(message, key):
    encrypted_msg = """"
    for char in message:
        encrypted_msg += chr(ord(char) + ord(key[0]))
    return encrypted_msg

encrypted_msg = encrypt(message, key)
print(encrypted_msg)"
Create a Python program to generate passwords of length 8 containing at least one uppercase character and one number.,"import random

uppercase_letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
numbers = '1234567890'

def generate_password():
    password = ''
    for _ in range(4):
        password += random.choice(uppercase_letters)
        password += random.choice(numbers)
    return password

password = generate_password()
print(password)"
Create a function in Python that takes an array of integers and returns an array of their squares.,"def square_array(nums): 
    return [n**2 for n in nums] 

result = square_array([1, 2, 3])
print(result)"
Create an API endpoint in Python Flask to add two numbers. This API should accept two numbers as Formula Parameters and should return the addition of those two numbers.,"from flask import Flask, request
app = Flask(__name__)

@app.route('/add', methods=['GET'])
def add():
 num1 = float(request.args.get('num1'))
 num2 = float(request.args.get('num2'))

 sum = num1 + num2

 return str(sum)

if __name__ == '__main__':
 app.run(debug=True)"
Write a Python program to simulate a random walk and calculate the position of the walker after N steps.,"import random

def random_walk(n_steps):
    x = 0
    y = 0

    for _ in range(n_steps):
        direction = random.choice([-1, 1])
        x += direction * random.randint(1, 10)
        y += direction * random.randint(1, 10)

    return x, y"
Utilize array sorting to sort an array in Python.,"arr.sort() 
print(arr)"
Design a Python program to find the minimum difference between any two elements in a given collection.,"def minimumAbsDifference(arr):
    arr.sort()
    min_diff = float('inf')
    
    for i in range(1, len(arr)): 
        diff = arr[i] - arr[i - 1]
        min_diff = min(min_diff, diff)
    
    return min_diff 

arr = [2, 9, 6, 5, 4, 9, 8]
min_diff = minimumAbsDifference(arr)
print(min_diff)"
"Using Python, can you create a function that sorts a list of strings into alphabetical order?","def sort_strings(s):
    return sorted(s)

print(sort_strings(['apple', 'banana', 'pear', 'mango']))"
Generate a python program to check if the string is a palindrome or not.,"def is_palindrom(string):
    reverse_string = string[::-1]
    if string == reverse_string:
        return True
    else:
        return False"
Generate a list of prime numbers using Python.,"primes = []

for num in range(2, 100):
   # all prime numbers are greater than 1
   if num > 1:
       for i in range(2, num):
           if (num % i) == 0:
               break
       else:
           primes.append(num)"
Create a Python program to compare two given list variables and create a third list variable containing all the common elements between the two lists.,"list1 = [2, 3, 4, 5, 6]
list2 = [5, 6, 7, 8, 9]

common_elements = []

for ele in list1:
    if ele in list2:
        common_elements.append(ele)

print(common_elements)"
Create a Python algorithm that finds the maximum value of an array,"def maxValue(array):
    max = array[0]
    for num in array:
        if num > max:
            max = num
    return max

a = [5, 9 ,8, 2, 1, 3]
print(maxValue(a))"
Design a Python class for implementing a stack data structure.,"class Stack:

def __init__(self):
    self.items = []

def push(self, item):
    self.items.append(item)

def pop(self):
    return self.items.pop()

def is_empty(self):
    return self.items == []

def peek(self):
    if not self.is_empty():
        return self.items[-1]

def get_stack(self):
    return self.items"
Develop an algorithm in Python to separate odd and even number from a given list of integers.,"def separate_odd_even(numbers):
  even = []
  odd = []

  for number in numbers:
    if number % 2 == 0:
      even.append(number)
    else:
      odd.append(number)

  return even, odd

numbers = [2, 4, 7, 8, 11, 9]

even, odd = separate_odd_even(numbers)

print(""Even numbers: "", even)
print(""Odd numbers: "", odd)"
Develop a Python script to sort a collection of numbers in descending order.,"def sort_numbers(nums):
  # sort the numbers in descending order
  sorted_nums = sorted(nums, reverse=True)
  
  # print the sorted list
  print(sorted_nums)
  
  # return the sorted list
  return sorted_nums

nums = [1, 9, 4, 6, 3, 7]
sort_numbers(nums) # output: [9, 7, 6, 4, 3, 1]"
Create a Python program to generate random numbers within a given interval.,"import random

# Function to generate random numbers 
def random_number(start, end): 
	return random.randint(start, end) 

# Driver code
start = 1
end = 10
print(random_number(start, end))"
Write a python function to get the first element of each sublist.,"def Extract(lst): 
    return [item[0] for item in lst] "
Write a function to delete the last item from a list in Python.,"def delete_last_item(lst):
  lst.pop()
  return lst

print(delete_last_item([1,2,3,4,5]))"
Design a Python function to encode a given string using the base64 encoding scheme.,"import base64 
def base64_encode(string):
    encodedBytes = base64.b64encode(string.encode(""utf-8""))
    return str(encodedBytes, ""utf-8"")"
Create a Python script which automates the process of making API requests to a given URL.,"import requests

url = 'https://example.com'

# Make get request
r = requests.get(url)

# Check the response status
if r.status_code == 200:
 print('success')

# Make post request
r = requests.post(url, data = {'key':'value'})

# Check the response status
if r.status_code == 200:
 print('success')"
Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.,"def check_greater(test_tup1, test_tup2):
  res = all(x < y for x, y in zip(test_tup1, test_tup2))
  return (res) "
Write a function to check whether the given string starts and ends with the same character or not using regex.,"import re  
regex = r'^[a-z]$|^([a-z]).*\1$'
def check_char(string): 
	if(re.search(regex, string)): 
		return ""Valid"" 
	else: 
		return ""Invalid"" "
Generate a Python dictionary which records country names and their respective capitals.,"country_capitals = {'USA': 'Washington DC', 
  'Canada': 'Ottawa', 
  'Germany': 'Berlin', 
  'France': 'Paris', 
  'UK': 'London', 
  'India': 'New Delhi' 
  }"
Design a class to represent a book in Python.,"class Book:
    # Attributes
    title = """"
    author = """"
    pages = 0

    # Constructor
    def __init__(self, title, author, pages):
        self.title = title
        self.author = author
        self.pages = pages

# Create a book object
book = Book(""The Catcher in the Rye"", ""JD Salinger"", 277)"
Write a sorting algorithm in Python to sort a set of strings based on the length of each string.,"def sort_strings(string_list):
  return sorted(string_list, key=len)

# Usage example
string_list = ['banana', 'apple', 'mango', 'pear']
print(sort_strings(string_list))  # Outputs ['apple', 'pear', 'mango', 'banana']"
Create an array from the following list in Python.,"arr = [""a"", ""b"", ""c"", ""d""]"
"Write a Python program that takes a string and a number as input, and returns the string repeated the given number of times.","def repeatString(string, num):
    return string * num

result = repeatString(""xyz"", 3)
print(result)"
Create a function to optimize a given python code using the Numba library.,"import numba

@numba.jit
def calculate_pi():
    c = 0.0
    for k in range(1000):
        for j in range(1000):
            c += k ** -2 + j ** -3
    return c"
Write a web scraper in Python that downloads a list of email addresses from the following website: https://example.com/page,"import requests
from bs4 import BeautifulSoup

url = 'https://example.com/page'
response = requests.get(url)
soup = BeautifulSoup(response.text, 'html.parser')

emails = [a.text for a in soup.find_all('a') if a.has_attr('href') and a['href'].startswith('mailto:') ]

print(emails)"
"Concatenate two strings in Python using the ""+"" operator.","string1 = ""Hello""
string2 = ""World""
concatenated_string = string1 + string2"
Create a program that sorts a list of strings in alphabetical order.,"""""""
Create a program that sorts a list of strings in alphabetical order.
""""""

def sort_list(lst):
    """"""
    This function sorts a list of strings in alphabetical order.
    """"""
    lst.sort()
    return lst
 
if __name__ == '__main__':
    lst = ['python', 'javascript', 'java', 'go']
    print(sort_list(lst))"
Create a Python web scraper to scrape a list of business email addresses from a web page.,"import requests 
from bs4 import BeautifulSoup

# make a request to the website
r = requests.get('www.example.com')

# parse the content
soup = BeautifulSoup(r.content, 'html.parser')

# find all elements with the class ""business-email""
emails = soup.find_all(class_=""business-email"")

# extract the email from each element
emails = [e.text for e in emails]"
Generate code to find the sum of all numbers in an array using Python.,"def sum_of_array(arr):
    # Initialize result 
    res = 0 
  
    # Iterate through all elements 
    # and add them to result 
    for i in range(0, len(arr)): 
        res = res + arr[i] 
  
    # return final result 
    return res"
Implement class inheritance in Python,"class Vehicle:
    def __init__(self, name, wheels):
        self.name = name
        self.wheels = wheels
        
class Car(Vehicle):
    def __init__(self, name, wheels, engine):
        super().__init__(name, wheels)
        self.engine = engine"
"Write a Python program to read in two numbers from the user, and print out their multiplication result.","def multiply_numbers():
    num1 = float(input(""Enter first number: ""))
    num2 = float(input(""Enter second number: ""))
    result = num1 * num2
    print(""The result is "" + str(result))

multiply_numbers()"
"Write a python program which reads a given temperature in Celcius, and converts it to Fahrenheit.","celcius = 25
fahrenheit = 77
print (""{0}° celcius is {1}° fahrenheit"".format(celcius, fahrenheit))"
Create a Python program to implement the Tower of Hanoi problem.,"def tower_of_hanoi(source, dest, aux, n):
    if n == 1:
        print('Move Disk 1 from %s to %s' %(source, dest))
        return

    tower_of_hanoi(source, aux, dest, n-1)
    print('Move Disk %d from %s to %s' %(n, source, dest))
    tower_of_hanoi(aux, dest, source, n-1)    

n = 4   
tower_of_hanoi('A', 'C', 'B', n)"
"Generate a Python program to calculate the probability of choosing two cards, one red and one black, from a standard deck of 52 cards","def calculate_probability(num_cards, num_red, num_black):
    return (num_red/num_cards)*(num_black/(num_cards-1))"
You need to optimize a Python program for faster performance.,"def sort_number(arr):
    arr.sort()"
Write a function to find all index positions of the minimum values in a given list.,"def position_min(list1):
    min_val = min(list1)
    min_result = [i for i, j in enumerate(list1) if j == min_val]
    return min_result"
Develop a program in Python to compute the median of three numbers.,"def median(a, b, c): 
    if (a <= b <= c) or (c <= b <= a): 
        median = b 
    elif (b <= a <= c) or (c <= a <= b): 
        median = a 
    else: 
        median = c 
  
    return median"
Generate a program in any language to remove the duplicates from an array.,"#Python

def remove_duplicates(arr):
    new_arr = []
    for i in arr:
        if i not in new_arr:
            new_arr.append(i)
    return new_arr

arr = [1, 2, 3, 1, 4, 2, 3]
print(""The array without duplicates is:"", remove_duplicates(arr))"
Create a decision tree classifier in Python with scikit-learn to classify a dataset with four features.,"from sklearn import tree
from sklearn.model_selection import train_test_split

# Create the Decision Tree classifier 
clf = tree.DecisionTreeClassifier()

# Train the classifier
clf = clf.fit(X_train, y_train)

# Make predictions
y_pred = clf.predict(X_test)

# Evaluate model
accuracy = clf.score(X_test, y_test)"
Write a Python script that takes a long string and prints each word on a new line.,"#!/usr/bin/env python

text = ""Hello World this is a Test""
words = text.split()

for word in words:
 print(word)"
Generate a python program to encode a given string into the Base64 representation.,"import base64

def encode_string(string):
    # Encode the bytes of the given string
    encoded_bytes = base64.b64encode(string.encode(""utf-8""))

    # Get the string representation of the encoded bytes
    encoded_string = str(encoded_bytes, ""utf-8"")

    return encoded_string"
Create a function in Python to determine if a number is divisible by another number.,"def isDivisible(num1, num2):
    # check if num1 is divisible by num2
    if (num1 % num2) == 0:
        return True
    else:
        return False

num1 = 6
num2 = 3

result = isDivisible(num1, num2)
print(result)"
Write a function to check if given tuple is distinct or not.,"def check_distinct(test_tup):
  res = True
  temp = set()
  for ele in test_tup:
    if ele in temp:
      res = False
      break
    temp.add(ele)
  return (res) "
Write a Python program to generate random numbers from 1 to 5 using the random library.,"import random

for _ in range(10):
 print(random.randint(1, 5))"
"In Python, create a function that takes a list of strings and capitalizes the first letter of each word.","def capitalize_each_word(string_list):
  """"""Capitalizes the first letter of each word in a list of strings.""""""
  capitalized_strings = []
  for s in string_list:
    capitalized_strings.append(s.title())

  return capitalized_strings

if __name__ == ""__main__"":
  string_list = ['hello', 'world']
  print(capitalize_each_word(string_list))"
Develop an algorithm in Python to find the numbers that are divisible by 3 and 5 from a given array.,"def divisible_by_3_5(array):
    result = []
    for num in array:
        if (num % 3 == 0) and (num % 5 == 0):
            result.append(num)
    return result

print(divisible_by_3_5([5, 15, 20, 7, 10])) # [15]"
Find a way to write an entire program without using any looping constructs or if-else statements.,"// In C
#include <stdio.h>

int main()
{
    int x = 0;
    // Recurse to infinity
    x = main();
    printf(""Infinite Recursion Complete"");
    return 0;
}

// In Python
def recursive_call():
  recursive_call()

recursive_call()"
"Provide a Python program that takes a number as input, and calculates the factorial of that number.","def factorial(num):
    if num == 0:
        return 1
    else:
        return num * factorial(num-1)
 
num = int(input(""Enter a number:""))
print(factorial(num))"
Explain how to segment a sentence into words with Python.,"The easiest way to segment a sentence into words with Python is to use the split() method of the str class. This takes a string as an argument, which is the sentence you want to segment, and returns a list of each word in the sentence. For example:

sentence  = ""This is a sentence.""
words = sentence.split()
print(words)
# Output: [""This"", ""is"", ""a"", ""sentence.""]"
Write a Python function to calculate the sum of all numbers in a list.,"def sum_nums(nums):
  sum = 0
  for num in nums:
    sum += num
  return sum

sum_nums([1, 2, 3, 4, 5, 6, 7, 8, 9]) # returns 45"
Create a function to analyze the sentiment of a given sentence in Python.,"import textblob
def sentiment_analysis(sentence):
 sentiment = textblob.TextBlob(sentence).sentiment.polarity
 if sentiment > 0.0: 
  return ""positive""
 elif sentiment == 0.0: 
  return ""neutral""
 else: 
  return ""negative"""
"In Python, find the index of a character in a given string.","string = ""Hello World""
character = 'l'

index = string.index(character)
print(index)"
Write a python function to find the difference between highest and least frequencies in a given array.,"def find_Diff(arr,n): 
    arr.sort()  
    count = 0; max_count = 0; min_count = n 
    for i in range(0,(n-1)): 
        if arr[i] == arr[i + 1]: 
            count += 1
            continue
        else: 
            max_count = max(max_count,count) 
            min_count = min(min_count,count) 
            count = 0
    return max_count - min_count "
Can you modify this Python program to store strings in a dictionary instead of lists?,"data = {'a': [1, 4], 'b': [2], 'c': [3]}"
Write a function to sort the given list of tuples in Python according to the second element of the tuple.,"def sort_by_second_elem(tuple_list):
    return sorted(tuple_list, key=lambda x: x[1])"
Edit a Python program to modify a numpy array into a pandas Dataframe.,"import numpy as np
import pandas as pd

# Load the data
data = np.load('data.npy')

# Create the pandas DataFrame
df = pd.DataFrame(data)"
Create an algorithm in Python to count all the even numbers in a given list of numbers,"def count_even(array):
    count = 0
    for num in array:
        if num % 2 == 0:
            count += 1
    return count

arr = [1, 2, 3, 4, 5, 6]
print(count_even(arr)) # Output: 3"
Generate a set of unique random numbers in the range 0-10 using Python.,"import random
random_numbers = set()
while len(random_numbers) < 10:
    random_numbers.add(random.randint(0, 10))

print(random_numbers)"
Create a function to parse a JSON string and return a Python dictionary.,"def parse_json(json_string):
    return json.loads(json_string)"
"Given 2 integers, write a Python program to check whether the numbers are divisible.","def is_divisible(num1, num2):
  if num1 % num2 == 0:
    return True
  else:
    return False

check_result = is_divisible(5, 10)

if check_result == True: 
  print(""The numbers are divisible"")
else:
  print(""The numbers are not divisible"")"
"Given a sentence and a word, extract the POS tag of the word using nltk library in Python.","import nltk

sentence = ""He is enjoying the warm weather""
word = ""enjoying""

tokens = nltk.word_tokenize(sentence)
tagged = nltk.pos_tag(tokens)

for (token, tag) in tagged:
   if token == word:
     print(""POS Tag of the word:"", tag)"
Create a loop in Python that prints out all the natural numbers below 6.,"for num in range(6): 
  print(num)"
Create a basic calculator in Python,"def calculator():
  while True:
    try:
      userInput = input('Input equation (type ""quit"" to exit): ')

      if userInput == ""quit"":
        break
        
      result = eval(userInput)
      print(result)

    except:
      print('Invalid equation')

calculator()"
Construct a program in Python to stack and scale input data,"import numpy as np

def preprocess(data):
    # Stack the data
    data = np.stack(data)

    # Scale the data
    data = (data - np.min(data)) / (np.max(data) - np.min(data))
    return data"
Create a Python program to display a matrix of characters.,"def printMatrix(matrix):
 for row in matrix:
 for char in row:
 print("" {}"".format(char), end="""")
 print()

matrix = [
  [""X"", ""O"",""X""],
  [""X"", ""O"",""X""]
]

printMatrix(matrix)"
Create a function in Python that takes in a list and returns the median value of the list.,"def median(nums):
    nums.sort()
    mid = len(nums) // 2
    
    if len(nums) % 2 == 0:
        return (nums[mid] + nums[mid-1]) / 2
    else:
        return nums[mid]"
Write a Python script to generate the dates for the next 3 months.,"import datetime

start_date = datetime.date.today()

# Get the next 3 months
date_list = []
for i in range(3):
 month = start_date.month + i
 year = start_date.year + (month // 12)
 month = month % 12
 if month == 0:
  month = 12
 date_list.append(datetime.date(year, month, 1))

# Print the dates
for date in date_list:
 print(date)

# Output"
Determine the maximum possible profits by writing a Python program to optimize the given input.,$164 
Generate a correct python script to identify string elements whose length is even,"my_list = [""House"", ""Car"", ""Tree"", ""Planet"", ""Satellite""]

def find_even_length(lst):
    even_list = []
    for l in lst:
        if len(l) % 2 == 0:
            even_list.append(l)
    return even_list

even_list = find_even_length(my_list)
print(even_list)"
Python Script to normalize a list of numbers.,"def normalize(numbers):
  min_num = min(numbers)
  max_num = max(numbers)

  for i in range(0, len(numbers)):
    numbers[i] = (numbers[i] - min_num) / (max_num - min_num)

  return numbers

print(normalize([-1, 0.2, 5.66, -2.344, 0]))"
Create a Python program to group a list of numbers into two lists according to their parity (even/odd) in the most efficient way.,"even_list = []
odd_list = []

for num in input_list:
 if num % 2 == 0:
 even_list.append(num)
 else:
 odd_list.append(num)

print('Even list:', even_list)
print('Odd list:', odd_list)"
Write a class in Python that can generate a Fibonacci sequence up to a given number.,"class Fibonacci():

    def __init__(self, n):
        self.n = n
        self.fibonacci_list = [0, 1]

    def generate_list(self):
        for i in range(2, self.n):
            self.fibonacci_list.append(self.fibonacci_list[i-2] + self.fibonacci_list[i-1])
        return self.fibonacci_list

fibonacci = Fibonacci(10)
print(fibonacci.generate_list())"
Could you please craft a Python solution to find the total number of days between two dates?,"import datetime

def diff_in_days(date1, date2):
    d1 = datetime.datetime.strptime(date1, ""%d %B %Y"")
    d2 = datetime.datetime.strptime(date2, ""%d %B %Y"")
    delta = d2 - d1
    return delta.days

date1 = ""29 June 1999""
date2 = ""29 July 1999""

difference = diff_in_days(date1, date2)
print(""Difference is"", difference, ""days"")"
Create a function in Python to find the smallest positive number which is not present in a given unsorted array.,"def smallestMissingPositiveNumber(arr): 
    s = set() 
    for i in arr: 
        s.add(i) 
  
    for i in range(1, len(arr) + 1): 
        if i not in s: 
            return i 
  
    return len(arr)+1
  
arr = [3, 1, 2, 6, 0, -2, -1]
missing = smallestMissingPositiveNumber(arr)
print(missing) # 4"
Generate a Python program to filter a given list of names based on user search input.,"names = [""Taylor"", ""Hilton"", ""John"", ""Jack"", ""Justin""]

search_input = input(""Enter a name to search: "")

filtered_names = []
for name in names:
 if search_input in name:
  filtered_names.append(name)
print(filtered_names)"
Edit the given Python code to add a try-except block.,"try:
  x = 5
  y = 0
  z = x/y
  print(z)
except ZeroDivisionError as e:
  print('Cannot divide by zero!')"
Create a Python program which will take a number n as input and prints the nth fibonacci number in the series,"def Fibonacci(n): 
    if n<0: 
        print(""Incorrect input"") 
    # First Fibonacci number is 0 
    elif n==1: 
        return 0
    # Second Fibonacci number is 1 
    elif n==2: 
        return 1
    else: 
        return Fibonacci(n-1)+Fibonacci(n-2) 
  
# Driver Program 
print(Fibonacci(8))"
Debug and fix the following Python program that calculates a list of square roots.,"nums = [1, 4, 9, 16] 
for num in nums:
  print(num ** 0.5)"
Convert the following JavaScript code to Python,"days = [""Monday"", ""Tuesday"", ""Wednesday"", ""Thursday"", ""Friday""]

for day in days:
    print(day)"
Design a function in Python to search for a specific subset in a given set.,"def containsSubset(s1, s2): 
  for i in s2: 
    if i not in s1: 
      return False
  return True

s1 = {1, 2, 3, 4, 5}
s2 = {2, 4}
print(containsSubset(s1, s2))"
Construct a program in Python 3 for getting the first two busiest airports in the USA,"import pandas as pd

airports = pd.read_csv('/path/to/airports/csv/file.csv')
top_airports = airports.sort_values('Total_Arrivals', ascending=False).head(2)
print(top_airports)"
Write a Python script to convert a string containing temperatures in Celsius to Fahrenheit,"def convertCelsiusToFahrenheit(celsius):
 temperature_fahrenheit = []

 for c in celsius.split(','):
 temperature_fahrenheit.append(float(c)*1.8 + 32)

 return temperature_fahrenheit

fahrenheit = convertCelsiusToFahrenheit(celsius)
print(fahrenheit)"
Find the most expensive item from the given list using Python.,"most_expensive_item = max(list_of_items, key=lambda x: x['price'])"
Generate a class in Python with the given properties and methods.,"class Student:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def getInfo(self):
        return ""Name: {}, Age: {}"".format(self.name, self.age)"
Write a Python program to detect if a given string contains any of the given keywords.,"def keyword_detector(string, keywords):
 for i in keywords:
 if i in string:
 return True
 return False

print(keyword_detector(""I love ice cream"", [""chocolate"", ""vanilla""]))"
Create an algorithm in Python to check if a given string contains valid parentheses.,"def isValid(s):
    stack = []
    dict = {""]"":""["", ""}"":""{"", "")"":""(""}
    for char in s:
        if char in dict.values():
            stack.append(char)
        elif char in dict.keys():
            if stack == [] or dict[char] != stack.pop():
                return False
        else:
            return False
    return stack == []

print(isValid('[[{{}}]]'))"
Create a Python script to display a table of values given a range of x and y coordinates.,"import pandas as pd
import numpy as np

x = np.arange(0, 50, 1)
y = np.arange(0, 10, 1)

xytable = []

for xi in x:
    for yi in y:
        xytable.append([xi, yi, xi*yi])

table = pd.DataFrame(xytable, columns=['X', 'Y', 'Product'])

print(table)"
Create a python program to filter a list of words by length.,"def filter_words_by_length(word_list, length):
    return [word for word in word_list if len(word) == length]"
Write a class in Python that encodes a DataFrame object.,"class DataFrameEncoder:
    def __init__(self, data):
        self.data = data
        
    def encode(self):
        encoded = []
        for row in self.data:
            encoded_row = []
            for column in row:
                encoded_column = str(column)
                encoded_row.append(encoded_column)
            encoded.append(encoded_row)
        return encoded"
Create a Python program to print out the elements of a list in reverse order.,"# Creating a new reversed list
reversed_list = mylist[::-1]

# Iterating through the list and printing each element
for num in reversed_list:
    print(num)"
Develop a linear search algorithm in Python to find an element in an array.,"def linearSearch(arr, x): 
    for i in range(len(arr)): 
        if arr[i] == x: 
            return i 
    return -1
  
# Driver Code 
arr = [1, 5, 8, 10] 
x = 8
  
# Function call 
result = linearSearch(arr, x) 
  
if(result == -1): 
    print(""Element is not present in the array"") 
else: 
    print(""Element is present at index"", result)"
Create a Python script to remove all occurrences of duplicate elements from a given list.,"mylist = [1,1,2,3,4,4,5,6]

unique_list = []
for element in mylist:
    if element not in unique_list:
        unique_list.append(element)

print(unique_list)"
Find the average of the numbers 10 and 15 in a python program.,"def average(x, y):
 return (x + y) / 2

result = average(10, 15)
print(result)"
Write a function to check if a nested list is a subset of another nested list.,"def check_subset(list1,list2): 
    return all(map(list1.__contains__,list2)) "
Generate a Python program to find the minimum number of operations required to convert a given number into 1.,"def minOperations(n): 
  
    if n==0: 
        return 0
    elif n==1: 
        return 1
  
    x = n 
  
    for i in range(2, n): 
        if i>x: 
            break
  
        if n%i == 0: 
            x = minOperations(int(n/i)) +  i 
  
    return x 
  
result = minOperations(18)
print(result)"
Write a function to increment the numeric values in the given strings by k.,"def increment_numerics(test_list, K):
  res = [str(int(ele) + K) if ele.isdigit() else ele for ele in test_list]
  return res "
"Given a sorted array of n elements, write a Python program to search for a target element.","def linear_search(sorted_ary, n, target):
	for i in range(0,n):
		if sorted_ary[i] == target:
			return i
	return -1

result = linear_search(sorted_ary, n, target)

if result == -1:
   print(""Element is not present in array"")
else:
   print(""Element is present at index"", result)"
Create a basic Python application to fetch data from an SQL database and display it in the console.,"import sqlite3

conn = sqlite3.connect('example.db')

cursor = conn.cursor()

cursor.execute('SELECT * FROM users')
rows = cursor.fetchall()

for row in rows:
 print(row)

conn.close()"
Write a Python program to generate a mock version of the given data set.,"import random

mock_data_set = []
for row in data_set:
    name = row[0] + str(random.randint(1,100))
    age = random.randint(1, 100)
    gender = random.choice(['Male', 'Female'])
    new_row = (name, age, gender)
    mock_data_set.append(new_row)

print(mock_data_set)"
Construct an algorithm in Python that calculates the factorial of a number,"def factorial(number):
    factorial = 1
    for i in range(1, number + 1):
        factorial = factorial * i
    return factorial

n = 5
result = factorial(n)
print(result) # 120"
Create a recursive function in Python that prints the values from 0 to n.,"def print_values(n):
    if n == 0:
        return
    else:
        print(n)
        print_values(n-1)

print_values(5)"
Generate a Python script for computing the sum of the numbers of a given list.,"def sum_nums(nums_list):
  result = 0
  for num in nums_list:
    result += num
  return result

print(sum_nums(nums_list))

# Output
25"
Create a Python code to calculate the Slope of the line when two points are given.,"#Calculate the Slope of the line
def findSlope(x1, y1, x2, y2):
    m = (y2-y1)/(x2-x1)
    return m

x1 = 5
y1 = 9
x2 = 15
y2 = 40

result = findSlope(x1, y1, x2, y2)
print(""The slope of the line is"", result)"
Create a Python script that takes a list of numbers as input and prints out the mean and the standard deviation of the list.,"def mean(lst):
    return sum(lst) / len(lst)

def std_dev(lst):
    avg = mean(lst)
    variance = 0
    for num in lst:
        variance += (num - avg)**2
    variance /= len(lst)
    return variance**0.5

# Driver Code
lst = [5, 7, 10, 8, 6]

print(""Mean: "", mean(lst))
print(""Standard Deviation: "", std_dev(lst))"
Generate a function in Python to check if an integer is a palindrome. A number is a palindrome if it reads the same forward and backward.,"def is_palindrome(num):
    temp = num
    rev = 0
    
    while(temp > 0):
        digit = temp % 10
        rev = rev * 10 + digit
        temp = temp // 10
 
    if rev == num:
        return True
    else:
        return False"
Implement a sorting algorithm in Python that takes a list of integers as input and outputs the list sorted in ascending order.,"def sort_ascending(nums):
    for i in range(len(nums)):
        min_idx = i
        for j in range(i + 1, len(nums)):
            if nums[min_idx] > nums[j]:
                min_idx = j
        nums[i], nums[min_idx] = nums[min_idx], nums[i] 
    return nums"
Create a function in Python to sort a dictionary by value and return the result as a list.,"def sort_dictionary_by_value(my_dict): 
	sorted_list = sorted(my_dict.items(), key=lambda x: x[1])
	return sorted_list 

my_dict = {'A': 1, 'B': 2, 'C': 3}
print(sort_dictionary_by_value(my_dict))"
Write a Python program to take a list of numbers and remove all duplicates.,"OldList = [5,5,5,2,1,2,3,5]
NewList = []

for Num in OldList:
    if Num not in NewList:
        NewList.append(Num)

print(NewList)"
Translate the given Bash shell script to Python.,"print(""Hello World!"")"
Write a Python code to calculate the mean and variance of a given list of numbers.,"def calculate_mean_variance(nums):
 mean = sum(nums)/len(nums)
 variance = 0

for num in nums:
 variance += (num - mean)**2
 variance = variance/len(nums)

return mean, variance"
Write a Python program to get all possible unique subsets of a given set of numbers.,"def get_subsets(S):
 subsets = [[]]
 for i in S:
 for j in range(len(subsets)):
 subsets.append(subsets[j] + [i])
 return subsets

S = [1, 2, 3]
print(get_subsets(S))
# Output: [[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3]]"
Design an object-oriented class in Python to represent a circle.,"class Circle:
 
    def __init__(self, radius):
        self.radius = radius
 
    def area(self):
        return self.radius**2 * 3.14
 
    def circumference(self):
        return 2 * 3.14 * self.radius"
Edit the following Python code to include a try/except block to catch any ValueError errors that occur.,"def check_input(val):
 try:
 if type(val) != str:
 return False
 else:
 return True
 except ValueError:
 print('Input is not a string!')"
"In Python, write a program to find a single missing number in a sorted array of unique integers.","def findMissingNumber(arr):
    n = len(arr)
    total_sum = (n+1)*(n+2)//2
    arr_sum = sum(arr)
    
    missing_number = total_sum - arr_sum
    
    return missing_number

arr = [1,2,3,4,6,7,8]

print(findMissingNumber(arr))"
"Create a class in Python that contains a property called ""name"" and a constructor to set the value of the name property.","class Person:
    def __init__(self, name):
        self.name = name

person = Person(""John"")"
"Create a Python program that takes a list of numbers and a target number as input, and returns all pairs of integers whose sum is equal to the target number","def two_sum(arr, target):
    result = []
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if (arr[i] + arr[j] == target):
                result.append((arr[i], arr[j]))
    return result

result = two_sum([8, 3, 10, 5], 13)
print(result)"
Build a program in Python that prints out all the prime numbers between 2 and 100.,"def prime_numbers():
    primes = [2]
    for num in range(3, 101):
        if all(num % prime != 0 for prime in primes):
            primes.append(num)
    print(primes)

prime_numbers()"
Generate minimum test cases for a Python program to check if a given integer is positive or not.,"import unittest

# Define the class
class TestInteger(unittest.TestCase):
    def test_integer_positive(self):
        self.assertEqual(is_positive(5), True)

    def test_integer_zero(self):
        self.assertEqual(is_positive(0), False)

    def test_integer_negative(self):
        self.assertEqual(is_positive(-5), False)


if __name__ == '__main__':
    unittest.main()"
Optimize the following Python program that shows the odd numbers in a given range,"for i in range(1, 20, 2):
    print(i)"
Create a Python script that creates random numbers in the range of 0-20 and displays the result.,"import random

def generateRandomNumbers():
	randomNumbers = []
	for i in range(0, 20):
		randomNumbers.append(random.randint(0, 20))
	return randomNumbers

print(generateRandomNumbers())"
Write an efficient sorting algorithm in Python that will sort a list of numbers.,"def sort(nums):
    for i in range(len(nums)):
        min_index = i
        for j in range(i + 1, len(nums)):
            if nums[min_index] > nums[j]:
                min_index = j
        
        nums[i], nums[min_index] = nums[min_index], nums[i]
    
    return nums

print(sort([5, 3, 1, 4, 7, 2, 6]))"
Modify the following Python code for calculating the factorial of a number.,"def factorial(n):
    if n == 0:
        return 1
    else:
        fact = 1
        for i in range(1,n+1):
            fact = fact*i
        return fact"
Design a function in Python that takes a list of integers and returns a list of the sum of the two largest integers.,"def get_largest_sum(nums):
  nums.sort()
  return nums[-1] + nums[-2]"
"Write a correct python program to find the minimum value in an array of integers, without using in-built functions.","def find_min(arr):
    # Initialize the minimum value
    min_val = arr[0]

    # Iterate through the array
    for i in range(1, len(arr)):
        if arr[i] < min_val:
            min_val = arr[i]

    return min_val"
Create a function in Python to display numbers from 1 to 10.,"def display_nums():
    for i in range(1, 11):
        print(i)"
Write a Python script to sort a list of tuples by its third element.,"def sort_by_third_element(input_list):
    sorted_list = sorted(input_list, key = lambda x: x[2])
    return sorted_list"
Write a python function to check whether the elements in a list are same or not.,"def chkList(lst): 
    return len(set(lst)) == 1"
Optimize a code snippet in Python that sorts the given array.,"# optimized code snippet to sort the given array
arr = [5, 4, 3, 2, 1]
arr.sort()
print(arr)
# arr is now sorted in ascending order as [1, 2, 3, 4, 5]"
"Given an array of numbers, generate a Python program to find the maximum value.","def find_max(arr):
    max_val = arr[0]
    for el in arr:
        if el > max_val:
            max_val = el
    return max_val

arr = [1, 4, 6, 8, 3, 9, 5]
print(find_max(arr))"
Optimize this code to calculate the sum of squares of all numbers from 1 to 10 in Python.,"total = sum(i**2 for i in range(1, 11))"
Write an algorithm in Python that inputs a large dataset and clusters it into several groups using k-Means Clustering.,"import pandas as pd
from sklearn.cluster import KMeans

# Load data
data = pd.read_csv('data.csv')

# Train the model
model = KMeans(n_clusters=6).fit(data)

# Predict the clusters
clusters = model.predict(data)

# Visualize the clusters
plt.scatter(data[:,0], data[:,1], c=clusters)
plt.show()"
Design a Python dictionary for storing data about countries and their corresponding capital cities.,"countries_cities = {
    ""UK"": ""London"", 
    ""France"": ""Paris"", 
    ""Spain"": ""Madrid"", 
    ""Germany"": ""Berlin"", 
    ""Italy"": ""Rome""
    }"
Write a function in Python to detect duplicate elements in an array.,"def find_duplicates(arr):
    seen = set()
    duplicates = []
    for x in arr:
        if x in seen:
            duplicates.append(x)
        else:
            seen.add(x)
    return duplicates

print(find_duplicates([3, 5, 6, 7, 3, 5]))"
Edit a Python program to take input from a user.,"def hello():
 name = input('What is your name? ')
 print(f'Hello {name}')"
Write a python function to count hexadecimal numbers for a given range.,"def count_Hexadecimal(L,R) :  
    count = 0;  
    for i in range(L,R + 1) : 
        if (i >= 10 and i <= 15) : 
            count += 1;  
        elif (i > 15) : 
            k = i;  
            while (k != 0) :  
                if (k % 16 >= 10) : 
                    count += 1;  
                k = k // 16;  
    return count;  "
Write a Python program that allows a user to enter a number and prints out the sum of the digits of the number.,"num = int(input(""Enter a number: "")) 

# find sum of its digits 
sum = 0
while num > 0: 
	digit = num % 10
	sum += digit 
	num //= 10
	
# print the result 
print(""Sum of digits of the number:"", sum)"
Optimize the following Python code for improved performance.,"def factorial(n):
 fact = 1
 for i in range(1, n+1):
   fact *= i
  return fact"
Create a class in Python that represents a vector in a 3-dimensional space.,"class Vec3:
    def __init__(self, x, y, z):
        self.x = x
        self.y = y
        self.z = z

    def __str__(self):
        return ""({}, {}, {})"".format(self.x, self.y, self.z)"
Create an algorithm in Python to calculate the prime factors of an integer number.,"def primeFactors(n): 
    pf = [] 
    i = 2
    while i * i <= n: 
        if n % i: 
            i += 1
        else: 
            n //= i 
            pf.append(i)
    if n > 1: 
        pf.append(n)
  
    return pf"
Write a Python function to multiply two given numbers.,"def multiply(num1, num2):
    return num1 * num2"
Program a function in Python that creates all substrings of a given string.,"def createSubstrings(string): 
    length = len(string) 
    subString = []
    
    # Loops through the string  
    # and the length of substring to be formed 
    for i in range(length): 
        for j in range(i + 1, length + 1): 
            subString.append(string[i:j]) 
  
    return subString"
"Create a program in Python that takes a website URL as input, scrapes all the links on the page, and prints out the URLs of the links on the page.","import requests
from bs4 import BeautifulSoup

url = ""https://www.example.com""   
resp = requests.get(url) 
soup = BeautifulSoup(resp.text, 'html.parser') 
links = soup.find_all('a', href=True) 

for link in links:
 print(link['href'])"
Write Python code to find the sum of the factorial of a given number.,"def find_sum_factorial_number(n):
    sum_num = 0
    for i in range(1, n + 1):
        sum_num += math.factorial(i)
    return sum_num

if __name__ == '__main__':
    n = int(input('Input a number: '))
    print(find_sum_factorial_number(n))"
Create a Python program for extracting text from an online book.,"import requests
from bs4 import BeautifulSoup

# Input web address of the book
url = 'https://www.example.com/book.html'

# Download the page
page = requests.get(url)

# Parse the HTML
soup = BeautifulSoup(page.content, 'html.parser')

# Extract the text
text = soup.find_all('p')
for p in text:
 print(p.text)"
Create a Python function to convert Pascal Case string to hyphen-separated string.,"def convert_pascal_to_hyphen(string):
    output_string = """"
    for char in string:
        if char.isupper():
            output_string += ""-""+char.lower()
        else:
            output_string += char
    return output_string[1:]
    
convert_pascal_to_hyphen(""HelloWorld"")"
Write a Python program to detect errors in a given json string.,"import json

def detect_errors(json_string):
 try:
     data = json.loads(json_string)
     return None
 except Exception as e:
     return e"
Write a Python code to store and print the multiplication table of a given number.,"# Function to print the multiplication table
def print_multiplication_table(num):
    # Iterate over numbers from 1 to 10
    for i in range(1, 11):
        print('{0} x {1} = {2}'.format(num, i, num*i))

print_multiplication_table(5)"
"Classify the following snippet of Python code as data wrangling, visualization, or machine learning.",Machine learning.
Design a python class for a shopping cart.,"class ShoppingCart:
    def __init__(self):
        self.items = []
    
    def add_item(self, item):
        self.items.append(item)
    
    def remove_item(self, item):
        if item in self.items:
            self.items.remove(item)
    
    def get_total_amount(self):
        total_amount = 0
        for item in self.items:
            total_amount += item.price
        return total_amount"
Write a python function to find highest power of 2 less than or equal to given number.,"def highest_Power_of_2(n): 
    res = 0; 
    for i in range(n, 0, -1):  
        if ((i & (i - 1)) == 0): 
            res = i; 
            break;      
    return res; "
Please write a code to extract the URL from a given string.,"#!/usr/bin/python
import re

# input string
string = ""There is a website: https://example.com""

# regex
pattern = r'(https?://\S+)'

# match url
url = re.findall(pattern, string)[0]

# print result
print(url) # Output: https://example.com"
Write a Python script to input a numeric value and generate the output in a formatted table structure.,"for x in range(5):
    for y in range(3):
        col = input(""Enter Value: "")
        print(col, end=""\t\t"")
    print()"
Create a Python program that takes a string and indicates whether it is a palindrome or not.,"def is_palindrome(s):
  s = s.lower()
  left = 0
  right = len(s) - 1
  
  while left < right:
    if s[left] != s[right]:
      return False
    left += 1
    right -= 1
  return True
  
print(is_palindrome(""racecar""))"
Write a Python program to print out the ASCII table.,"def print_ascii_table():
    for i in range(32, 127):
        print(f""Character:{chr(i)}, ASCII Number:{i}"")"
Develop a Python program which uses a sorting algorithm to sort the provided dataset by its second column in ascending order.,"def sort_by_column(dataset): 
	# extract second column from dataset
	second_column = [row[1] for row in dataset] 

	# sort dataset using second column
	sorted_dataset = [row for _, row in sorted(zip(second_column, dataset))] 
	
	return sorted_dataset"
Create a program for counting the number of elements present in a user-provided array using Python.,"def count_elements(array):
    count = 0
    for item in array:
        count += 1
    return count

user_array = [1, 5, 15, 20]
result = count_elements(user_array)
print(result) # 4"
Write a python function to convert the given string to lower case.,"def is_lower(string):
  return (string.lower())"
Generate a Python program that scores words based on their length - shorter words should receive a higher score.,"def score_by_length(s):
    score = 0
    for word in s.split():
        score += len(word)**(-1)
    return score

print(score_by_length(""Hello World!"")) # Output: 1.8333333333333335"
Create a Python function to format a given ip address to IPv4 format.,"def ipv4_format(ip):
 octets = ip.split('.')
 octets.extend(['0', '0', '0', '0'])
 octets = octets[:4]
 return '.'.join(octets)

if __name__ == '__main__':
 ip = '192.168.1'
 print(ipv4_format(ip))"
Generate a function in Python to sort a given list of integers in increasing order using Quick Sort.,"def quickSort(arr): 
    if len(arr) <= 1:
        return arr
    else:
        pivot = arr[0]
        lessThanPivot = [x for x in arr[1:] if x < pivot]
        moreThanPivot = [x for x in arr[1:] if x >= pivot]
        sortedArray = quickSort(lessThanPivot) + [pivot] + quickSort(moreThanPivot)
        return sortedArray"
Create a Python program to sort a given list of integers in descending order without using a library/built-in function.,"def sort_list(lst):
    for i in range(len(lst) - 1):
        for j in range(i+1, len(lst)):
            if lst[i] < lst[j]:
                lst[i], lst[j] = lst[j], lst[i]
    return lst"
Construct a function in Python to compare the two given dictionaries and return true if both of them contains the same elements.,"def compare_dicts(dict1, dict2):
  # Iterate through keys in both dictionaries and compare values
  for key, value in dict1.items():
    if key not in dict2 or dict2[key] != value:
      return False
 
  # If all elements matched
  return True"
What is the best way to debug a Python program?,"The best way to debug a Python program is to use a debugger. Popular Python debuggers include pdb, ipdb, and the Python built-in debugger. These debuggers allow you to step through code line-by-line, view and modify variables, and set breakpoints. Additionally, some IDEs such as PyCharm have built-in debuggers which incorporate some of these features."
Create a function in Python to calculate the standard deviation from a given array of numbers.,"def compute_std_dev(nums): 
	mean = sum(nums) / len(nums)
	variance = 0
	for n in nums:
		variance += (n - mean) ** 2
	variance /= len(nums)

	std_dev = variance ** 0.5
	return std_dev"
Find a Python library to create a connection to a MongoDB database and import the data.,"# Import the necessary library
import pymongo

# Establish a connection to the MongoDB database
client = pymongo.MongoClient(""mongodb://localhost:27017/"")

# Import the data into the database
db = client.myDatabase
records = db.myCollection
with open('data.json', 'r') as f:
    data = json.load(f)
    records.insert_many(data)"
Create a Python program to estimate the number of unique words in a string of text.,"def count_unique_words(s):
    words = s.split()
    unique_words = set(words)
    return len(unique_words)

input_string = ""One two three four, five. Six seven eight nine, ten.""
print(""The number of unique words is"", count_unique_words(input_string))

# Output
# The number of unique words is 10"
Design a Python program to apply the bubble sort to a given array of numbers.,"def bubble_sort(arr):
    for i in range(len(arr)-1):
        for j in range(len(arr)-i-1): 
            if arr[j] > arr[j+1] : 
                arr[j], arr[j+1] = arr[j+1], arr[j] 
    return arr"
"In Python, create a list mode with the numbers from 0 to 50.",list_mode = [i for i in range(51)]
Create a Python class that defines a Rectangle object that has two attributes - length and breadth and a method to calculate the area of the rectangle.,"class Rectangle:
    
    def __init__(self, length, breadth):
        self.length = length
        self.breadth = breadth
    
    def find_area(self):
        return self.length * self.breadth

rect = Rectangle(5, 10)
area = rect.find_area()
print(area)"
Create a Python implementation of the bubble sort algorithm.,"def bubble_sort(arr):
    for i in range(len(arr)-1):
        for j in range(len(arr)-i-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
    return arr

result = bubble_sort([12, 11, 13, 5, 6])
print(result) # Output: [5, 6, 11, 12, 13]"
Write a python function to check whether the given number can be represented by sum of two squares or not.,"def sum_Square(n) : 
    i = 1 
    while i*i <= n : 
        j = 1
        while (j*j <= n) : 
            if (i*i+j*j == n) : 
                return True
            j = j+1
        i = i+1     
    return False"
Write a Python class to store a student's name and age.,"class Student:
    def __init__(self, name, age):
        self.name = name
        self.age = age"
Create a class in Python that defines the concept of a Shape. The class should contain a method to check if an object is a valid shape.,"class Shape:
  def __init__(self, sides):
    self.sides = sides
  
  def isValid(self):
    if len(self.sides) >= 3: 
      return True
    else:
      return False"
Write an algorithm in Python to find a solution to the Tower of Hanoi game.,"def hanoi_solver(n, start, temp, end):
 if n == 1:
 print(f'Move disc 1 from {start} to {end}')
 else:
 hanoi_solver(n-1, start, end, temp)
 print(f'Move disc {n} from {start} to {end}')
 hanoi_solver(n-1, temp, start, end)

# Solve the Tower of Hanoi with 3 discs
hanoi_solver(3, 'A', 'B', 'C')"
Write a python code to get the maximum element from a given list.,"def get_max_elem(nums):
    max_elem = nums[0]
    for num in nums:
        if num > max_elem:
            max_elem = num
    return max_elem"
Write a Python program to edit a given text string and capitalize the first letter of every word.,"def capitalize_words(string):
 words = string.split(' ')
 capitalized = [word.capitalize() for word in words]
 return ' '.join(capitalized)"
Develop a Python program to find the common elements in two lists.,"common_elements = [] 
  
# using loop 
for i in [3, 9, 15, 21, 27]:  
    for j in [21, 7, 13, 29, 31]:  
        if i == j: 
            common_elements.append(i) 
  
# printing common elements 
print(common_elements) 
# Output: [21]"
Generate a function using Python that takes two numbers as input and returns their sum.,"def add_numbers(a, b):
 return a + b"
Write a function to find common elements in given nested lists. * list item * list item * list item * list item,"def common_in_nested_lists(nestedlist):
    result = list(set.intersection(*map(set, nestedlist)))
    return result"
Create a Python program to generate all the possible permutations of a given array.,"def permutations(arr):
    if len(arr) == 0:
        return [] 
  
    if len(arr) == 1:
        return [arr]

    l = [] 
    
    for i in range(len(arr)):
       m = arr[i]
       remLst = arr[:i] + arr[i+1:]
       for p in permutations(remLst):
           l.append([m] + p)
    return l"
Construct an algorithm in Python that takes a list of numbers and returns the mean.,"def mean(nums):
    total = 0
    for num in nums:
        total += num
    return total / len(nums)"
Create a Python function to calculate the sum of two numbers given as inputs.,"def calculateSum(a, b):
    return a + b

sum = calculateSum(5, 6)
print(sum)"
Create a function to calculate the Fibonacci number at a given index in Python.,"def FibonacciNumber(index):
    if index == 0:
        return 0
    elif index == 1:
        return 1
    else: 
        return FibonacciNumber(index - 1) + FibonacciNumber(index - 2)"
Write a class definition in python that will initialize an object of the class with given parameters,"class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age"
"Create a Python class ""Person"" with a name and age.","class Person(object):
  def __init__(self, name, age):
    self.name = name
    self.age = age"
Write a Python code snippet to sort a dictionary based on its key.,"sorted_dict = dict(sorted(dictionary.items(), key=lambda item: item[0]))"
Create code to generate a Fibonacci sequence in Python.,"def Fibonacci(n): 
     a, b = 0, 1
     if n < 0: 
        print(""Incorrect input"") 
     elif n == 0: 
        return a 
     elif n == 1: 
        return b 
     else: 
        for _ in range(2,n): 
            c = a + b 
            a = b 
            b = c 
        return b"
Construct a Python function to insert a node at the head of a given linked list.,"class Node:
 def __init__(self, data):
  self.data = data
  self.next = None

class LinkedList:
 def __init__(self):
  self.head = None
  
 # Recursive function to insert a node at the beginning of the linked list 
 def insert_at_head(self, new_node): 
  current_head = self.head 
  new_node.next = current_head
  self.head = new_node

list = LinkedList()
list.insert_at_head(Node(1))"
Create a Python Pandas program to generate a report summarizing the total sales for each customer.,"import pandas as pd 

# Create dataframe
df = pd.DataFrame(customer_df)

# Group by customer and sum up sales
report = df.groupby(['customer_id'])['sales'].sum()
print(report)"
Implement a sorting algorithm in Python to sort a given list of numbers in ascending order.,"def sort(list):
  for i in range(len(list)):
    min_idx = i
    for j in range(i+1, len(list)):
      if list[min_idx] > list[j]:
        min_idx = j
  list[i], list[min_idx] = list[min_idx], list[i]

  return list

list = [3,7,1,4,9,5]
sorted_list = sort(list)

print(sorted_list)"
Write a Python method that takes a list of strings as an argument and returns a list of the words which are the same length as the longest word in the list.,"def same_length(words):
 longest = max([len(word) for word in words])
 longest_words = [word for word in words if len(word) == longest]
 return longest_words

print(same_length(my_list))
# Output: [""apple"", ""banana"", ""mango""]"
Create a Python class to generate random passwords. The class should contain a method to generate a random password of specified length.,"import random
import string

class PasswordGenerator:
 def generate_password(length):
 password_characters = string.ascii_letters + string.digits + string.punctuation
 return ''.join(random.choice(password_characters) for i in range(length))

password = PasswordGenerator.generate_password(16)
print(password)"
Write a Python program to compress the given string by reducing the consecutive characters to single characters with a number indicating the count of appearance.,"def compress_string(string):
 result = """"
 count = 1
 
 for i in range(1, len(string)):
  if string[i] == string[i-1]:
   count += 1
  else:
   result += string[i-1] + str(count)
   count = 1
  
 result += string[-1] + str(count)
 return result"
Develop a REST API in Python that fetches the number of likes of a specific post.,"from flask import Flask
import requests
 
app = Flask(__name__)
 
@app.route('/post-likes/<int:id>', methods=['GET'])
def post_likes(id):
    response = requests.get('https://api.example.com/likes?id={id}')
    return response.json()

if __name__ == '__main__':
    app.run()"
Develop a Python program to convert the following Fahrenheit value to Celsius.,"def convert_to_celsius(fahrenheit):
    celsius = (fahrenheit - 32) / 1.8

    return celsius

fahrenheit = 212
celsius = convert_to_celsius(fahrenheit)
print(celsius)"
Create a Python program to edit a given list according to a given condition,"def edit_list(l, condition):
    result = []
    for i in l:
        if condition(i):
            result.append(i)
    return result

l = [1,3,5,8,2,6]
condition = lambda x : x%2==0

print(edit_list(l, condition))"
Generate a Python code to convert a given number from decimal format to its binary equivalent.,"def decToBin(num):
    if num > 1:
        decToBin(num//2) 
    print(num % 2,end = '')
  
# Driver code to test above
if __name__ == '__main__': 
    num = 25
    decToBin(num)"
Construct a Python script to find the sum of all odd numbers between 1 to n.,"def sum_odd_numbers(n):
    sum = 0
    for i in range(1,n+1):
        if i % 2 != 0:
            sum += i
    return sum

odd_sum = sum_odd_numbers(10)
print(odd_sum)"
Design a class in Python for representing a student.,"class Student:
    def __init__(self, name, age, gender):
        self.name = name
        self.age =  age
        self.gender = gender"
Design a function in Python that takes in a list and returns its reverse.,"def reverse_list(list):
    return list[::-1]

result = reverse_list([1,2,3,4])
print(result)"
Create a Python function that sorts a list of strings in descending order of length.,"def sort_by_length_descending(list_of_strings):
    list_of_strings.sort(key=len, reverse=True)
    return list_of_strings

result = sort_by_length_descending(['Math', 'English', 'Computer Science', 'Physics'])
print(result)"
Create a Python function to convert a temperature from Fahrenheit to Celsius.,"def fahrenheit_to_celsius(fahrenheit):
    celsius = (fahrenheit - 32) * 5.0/9.0
    return celsius"
Write a function to check if the given integer is a prime number.,"def prime_num(num):
  if num >=1:
   for i in range(2, num//2):
     if (num % i) == 0:
                return False
     else:
                return True
  else:
          return False"
Develop a python program that takes a paragraph as input and outputs a list of words in descending order of frequencies.,"from collections import Counter

def word_frequency(paragraph): 
  words = paragraph.split()
  counts = Counter(words)
  return counts.most_common()

paragraph = ""This is a sample sentence to try out the program.""
print(word_frequency(paragraph))"
Develop an algorithm in Python to add two given integers.,"def add_two_integers(a, b):
  return a + b

x = 5
y = 7

sum = add_two_integers(x, y)
print('The sum of ', x, ' and ', y, ' is ', sum)"
Write a function in Python to evaluate an expression given in the form of a string.,"def evaluate(expression):
    return eval(expression)"
Create an algorithm in Python for removing duplicates from an array of integers.,"def remove_duplicates(arr):
    s = set()
    result = []
    for i in arr:
        if i not in s:
            s.add(i)
            result.append(i)
    return result

arr = [1, 2, 4, 5, 6, 2, 7, 4]

print(remove_duplicates(arr))
# Output: [1, 2, 4, 5, 6, 7]"
Write a python function to find the length of the last word in a given string.,"def length_Of_Last_Word(a): 
    l = 0
    x = a.strip() 
    for i in range(len(x)): 
        if x[i] == "" "": 
            l = 0
        else: 
            l += 1
    return l "
Write a Python program that checks whether two given strings are anagrams or not.,"def is_anagram(s1, s2):
    s1_dict = {}
    s2_dict = {}

    for char in s1:
        if char in s1_dict:
            s1_dict[char] += 1
        else:
            s1_dict[char] = 1

    for char in s2:
        if char in s2_dict:
            s2_dict[char] += 1
        else:
            s2_dict[char] = 1

    return s1_dict == s2_dict"
Create a Python script to scrape a website for text.,"import requests
from bs4 import BeautifulSoup

url = 'example.com'
page = requests.get(url)
soup = BeautifulSoup(page.content, 'html.parser')

scraped_text = soup.find_all(text=True)

for txt in scraped_text:
  print(txt)"
Write a function to calculate the area of a regular polygon.,"from math import tan, pi
def area_polygon(s,l):
  area = s * (l ** 2) / (4 * tan(pi / s))
  return area"
Write a class in Python that represents a chess piece.,"class Piece:
 def __init__(self, color: str) -> None:
 self.color = color
 self.has_moved = False

 def move(self, row: int, column: int) -> str:
 if self.has_moved:
 return f""{self.color.capitalize()} piece already moved!""
 self.has_moved = True
 return f""{self.color.capitalize()} piece moved to {chr(column + 97)}{row + 1}.""

piece = Piece('white')
print(piece.move(7, 4))"
Generate a RandomForest classifier in Python that predicts a binary outcome from three numerical input features.,"import pandas as pd
from sklearn.ensemble import RandomForestClassifier

# Load the data
data = pd.read_csv('data.csv')

# Split the data into features and target
X = data[['feature1','feature2','feature3']]
y = data['outcome']

# Train the model
clf = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=42)
clf.fit(X, y)"
Create a program in Python to determine the frequency of each letter in a given sentence.,"sentence = ""hello world""

freq = {} 
for i in sentence: 
	if i in freq: 
		freq[i] += 1
	else: 
		freq[i] = 1

# Print frequencies 
for key in freq.keys(): 
	print (key, ':', freq[key])"
"Using Python, create an algorithm to count the number of vowels in a given string.","def countVowels(string):
    string = string.lower()
    count = 0
    vowels = 'aeiou'

    for char in string:
        if char in vowels:
            count += 1
    return count

string = 'Hello, World!'
vowelCount = countVowels(string)
print(""Number of vowels is:"", vowelCount)"
Write a function to remove particular data type elements from the given tuple.,"def remove_datatype(test_tuple, data_type):
  res = []
  for ele in test_tuple:
    if not isinstance(ele, data_type):
      res.append(ele)
  return (res) "
Create a generic univariate linear regression model using Python.,"import numpy as np
from sklearn.linear_model import LinearRegression

def linreg_univariate_model(X, y):
   linreg = LinearRegression()
   linreg.fit(X.reshape(-1,1), y)
   return linreg"
Write a Python program to generate a list of all prime numbers between 1 and n (inclusive).,"def generate_primes(n):
    primes = []
    for num in range(1, n+1):
        is_prime = True
        for i in range(2, num):
            if num % i == 0:
                is_prime = False
        # Append if the number is prime
        if is_prime:
            primes.append(num)
    return primes

print(generate_primes(n))"
Create a Python API endpoint to search a database for a given item.,"@app.route('/search', methods=['POST'])
def search():
    req = request.get_json()
    search_term = req['search_term']

    # Query your database here
    query_result = db.find_by_search_term(search_term)

    return jsonify({'result': query_result})"
Create a Python script to search for a (partial) substring in a string.,"def find_substring(string, substring):
  if substring in string:
    index = string.find(substring)
    return ""Substring found at index "" + str(index)
  else:
    return ""Substring not found"""
Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.,"def round_and_sum(list1):
  lenght=len(list1)
  round_and_sum=sum(list(map(round,list1))* lenght)
  return round_and_sum"
Write a python function to convert a decimal number to binary number.,"def decimal_To_Binary(N): 
    B_Number = 0
    cnt = 0
    while (N != 0): 
        rem = N % 2
        c = pow(10,cnt)  
        B_Number += rem*c  
        N //= 2 
        cnt += 1
    return B_Number  "
Come up with a function in Python that takes two integers as arguments and returns the sum.,"def add_two_int(a, b):
    return a + b"
Create a python program to display the numbers divisible by 3 in the given range,"for num in range(1, 21):
    if num % 3 == 0:
        print(num)"
Modify the following Python code to print the length of a given string.,"string = ""Hello World!""

def print_length(string):
    print(len(string))"
Rewrite the following code snippet to find prime numbers using Python.,"def is_prime(num):
    # Iterate from 2 to the square root of the number
    for i in range(2, int(num ** 0.5) + 1):
        if num % i == 0:
            return False
    return True

# Iterate from 2 to n
for n in range(2, n+1):
    # Check if the number is prime
    if is_prime(n):
        print(n)"
Create a function in Python to remove all characters which are not alphanumeric from a given string.,"def remove_nonalphanum(text):
  new_string = """"
  for char in text:
    if char.isalnum():
      new_string += char
  return new_string

cleaned_string = remove_nonalphanum(text)
print(cleaned_string) #prints ""ThisisaStringwithymbols"""
Generate a Python program that determines the largest number in the given array.,"arr = [7, 12, 5, 9]

def find_max(arr):
    max_num = arr[0]
    for num in arr:
        if num > max_num:
            max_num = num
    return max_num

print(""The largest number is:"", find_max(arr))"
Write a function to find the number which occurs for odd number of times in the given array.,"def get_odd_occurence(arr, arr_size):
  for i in range(0, arr_size):
    count = 0
    for j in range(0, arr_size):
      if arr[i] == arr[j]:
        count += 1
    if (count % 2 != 0):
      return arr[i]
  return -1"
"Write a function to replace all occurrences of spaces, commas, or dots with a colon.","import re
def replace_specialchar(text):
 return (re.sub(""[ ,.]"", "":"", text))"
Write a python function to minimize the length of the string by removing occurrence of only one character.,"def minimum_Length(s) : 
    maxOcc = 0
    n = len(s) 
    arr = [0]*26
    for i in range(n) : 
        arr[ord(s[i]) -ord('a')] += 1
    for i in range(26) : 
        if arr[i] > maxOcc : 
            maxOcc = arr[i] 
    return n - maxOcc "
Generate a while loop in Python to print numbers in reverse from 15 to 10.,"num = 15
while num >= 10:
    print(num)
    num -= 1"
Write a Python class to model a polynomial.,"class Polynomial:
    def __init__(self, coeffs):
        self.coeffs = coeffs
    
    # Implement a method to evaluate the polynomial at a given x value.
    def evaluate(self, x):
        result = 0
        for i, coeff in enumerate(self.coeffs):
            result += coeff * x**i
        return result"
Create a Python class for a polygon shape.,"class Polygon:
    def __init__(self, sides):
        self.sides = sides
    
    def perimeter(self):
        perimeter = 0
        for side in self.sides:
            perimeter += side
        return perimeter"
Write a Python program to create a list with the square of all the numbers from 0 to 10.,"# Create a list with the square of all the numbers from 0 to 10
# Create an empty list
squares = []
# Iterate over the range from 0 to 10
for i in range(11):
 # Append the square of the current number to the list
 squares.append(i ** 2)
# Print the list
print(squares)"
Create a function in Python to extract words from a sentence.,"def extract_words(sentence): 
    return sentence.split()"
Generate a Markov chain model that can generate text. This model should be able to generate realistic natural language sentences when given an input text.,"from markov_python.cc_markov import MarkovChain

#Creating a Markov Chain
mc = MarkovChain()

# Generate text
text_file = open('input.txt', 'r')
mc.add_file(text_file)
print(mc.generate_text())"
Write a function to find the minimum difference in the tuple pairs of given tuples.,"def min_difference(test_list):
  temp = [abs(b - a) for a, b in test_list]
  res = min(temp)
  return (res) "
Write a function to find t-nth term of geometric series.,"import math
def tn_gp(a,n,r):
  tn = a * (math.pow(r, n - 1))
  return tn"
Analyze the given python code and suggest any possible optimizations.,"n = int(input())
arr = [int(x) for x in input().split()]
x = int(input())

j = 0
for i in range(n):
    if arr[i] > x:
        print(arr[i])
        j = i
        break

for i in range(j+1, n):
    if arr[i] > x and arr[i] < arr[j]:
        print(arr[i])
        j = i"
Generate a Python program to display a Fibonacci sequence of first n numbers.,"def Fibonacci(n):
    if n==1:
        return 0
    elif n==2:
        return 1
    else:
        return Fibonacci(n-1)+Fibonacci(n-2)

n = 10
for i in range(1, n):
    print(Fibonacci(i))"
Develop a python class to model a book with attributes title and authors.,"class Book:
    def __init__(self, title, authors):
        self.title = title
        self.authors = authors

myBook = Book('The Great Gatsby', 'F. Scott Fitzgerald')
print(myBook.title, myBook.authors)"
Generate a list of prime numbers from 1 to N in Python.,"def generate_primes(n): 
    primes = [] 
    for num in range(2, n+1): 
        prime = True 
        for i in range(2, num): 
            if (num % i) == 0: 
                prime = False
        if prime: 
            primes.append(num) 
    return primes"
Create a python program to fetch data from the website http://example.com,"import requests

url = 'http://example.com'
resp = requests.get(url)
data = resp.json()
print(data)"
Write a Python program to compute the probability of an event based on the input data.,"def probability_calc(data):
    total = data['success'] + data['failure']
    return data['success']/total"
Write a Python program to calculate the DFT of a signal using the Fast Fourier Transform (FFT) algorithm.,"import numpy as np
 
# Number of sample points
N = 600
 
# sample spacing
T = 1.0 / 800.0
x = np.linspace(0.0, N*T, N)
y = np.sin(50.0 * 2.0*np.pi*x) + 0.5*np.sin(80.0 * 2.0*np.pi*x)
yf = np.fft.fft(y)
xf = np.fft.fftfreq(N, T)
 
import matplotlib.pyplot as plt
plt.plot(xf, 2.0/N * np.abs(yf[0:N//2]))
plt.grid()
plt.show()"
Create a class in Python to represent a die with 6 faces.,"class Die:
    def __init__(self):
        self.faces = [1, 2, 3, 4, 5, 6]

    def roll(self):
        return random.choice(self.faces)"
Write a Python class that prints the mean and median of a given list.,"class MeanMedianCalculator:
    def __init__(self, data):
        self.data = data
    
    def mean(self):
        return sum(self.data) / len(self.data)
    
    def median(self):
        self.data.sort()
        return self.data[(len(self.data)-1) // 2]

calculator = MeanMedianCalculator([2, 4, 6, 8, 10])
print(""Mean is {}, Median is {}"".format(calculator.mean(), calculator.median()))"
Create a Python program that predicts the next value from a given list of integer numbers.,"def predict_next_value(nums):
  # calculate average
  avg = sum(nums) / len(nums)

  # predict next value
  return avg
  
# test  
print(predict_next_value([7, 3, 5, 9, 4])) # prints 6.0"
Write a python function to check whether the hexadecimal number is even or odd.,"def even_or_odd(N): 
    l = len(N) 
    if (N[l-1] =='0'or N[l-1] =='2'or 
        N[l-1] =='4'or N[l-1] =='6'or 
        N[l-1] =='8'or N[l-1] =='A'or 
        N[l-1] =='C'or N[l-1] =='E'): 
        return (""Even"") 
    else: 
        return (""Odd"") "
Combine the given lists using the zip method in Python.,"list3 = list(zip(list1, list2))
print(list3) 
# Output: [(1, 5), (2, 6), (3, 7), (4, 8)]"
Generate a Python code snippet to print the first N numbers of the Fibonacci sequence.,"def print_fibonacci(n):
    first_number = 0
    second_number = 1
    for num_ in range(0, n):
        if num_ <= 1:
            next_number = num_
        else:
            next_number = first_number + second_number
            first_number = second_number
            second_number = next_number
        print(next_number)"
Write a Python program to process an array of strings. The program should print out the characters in each string in reverse order.,"# Input array
arr = [""Hello"", ""World""]

# Loop through each string
for s in arr:
 # Print the string in reverse order
 print(s[::-1])

# Output
olleH
dlroW"
Write a Python program to generate a random key of a given length containing characters from the given set of characters.,"import random

def generate_random_key(length,characters):
    key = """"
    for _ in range(length):
        key += random.choice(characters)
    return key

length = 6
characters = ""ACGT""

print(generate_random_key(length,characters)) # GTGGCA"
Come up with a Python program to aggregate a list of strings based on the number of character occurrences in each string.,"from collections import defaultdict

strings = [""Apple"", ""Orange"", ""Banana"", ""Pineapple""]

dictionary = defaultdict(list)
for string in strings:
    char_count = len(string)
    dictionary[char_count].append(string)

print(dictionary)"
Create a Python dictionary to associate months with their respective number of days.,"months_and_days = {
    'January': 31, 
    'February': 28, 
    'March': 31,
    'April': 30,
    'May': 31,
    'June': 30,
    'July': 31,
    'August': 31,
    'September': 30,
    'October': 31,
    'November': 30,
    'December': 31
}"
Create a python program to check if a list is palindromic.,"def is_palindrome(lst):
  if len(lst) < 2:
    return True
  if lst[0] != lst[-1]:
    return False
  return is_palindrome(lst[1:-1])"
Write a fucntion in Python to implement binary search.,"def binary_search(list, item):
 low = 0
 high = len(list) - 1

 while low <= high:
 mid = (low + high) // 2
 guess = list[mid]
 if guess == item:
 return mid
 if guess > item:
 high = mid - 1
 else:
 low = mid + 1
 
 return None"
Generate code to print the multiplication tables from 1 to 10 in Python.,"for i in range(1, 11):
 for j in range(1, 11):
 print(i*j, end='\t')
 print()"
Write a Python function for reversing a string and identify the time and space complexity.,"def reverse_string(string):
 rev_string = ''
 for char in string:
  rev_string = char + rev_string

 return rev_string

 # Time Complexity: O(N)
 # Space Complexity: O(N)"
Create a class in Python to extend object class,"class MyClass(object):
    pass"
Write a python function to check whether the given two integers have opposite sign or not.,"def opposite_Signs(x,y): 
    return ((x ^ y) < 0); "
Write a Python program to generate random data and create a scatterplot.,"""""""
Generate random data and create a scatterplot
""""""

import matplotlib.pyplot as plt
import numpy as np

# Generate 1000 random points
np.random.seed(0)
x = np.random.rand(1000)
y = np.random.rand(1000)

# Create a scatter plot
plt.scatter(x,y)
plt.show()"
Create a Python script that takes two integers as input and prints out their greatest common divisor.,"def gcd(a, b): 
    if b == 0:
        return a 
    else:
        return gcd(b, a % b)

if __name__ == ""__main__"":
        a = int(input(""Enter first integer: ""))
        b = int(input(""Enter second integer: ""))
        result = gcd(a, b)
        print(""The GCD of {} and {} is: {}"".format(a, b, result))"
Write a Python program to determine the sum of even elements in a given array.,"def sum_even_elems(arr):
    sum_of_even = 0
    for elem in arr:
        if elem % 2 == 0:
            sum_of_even += elem
    return sum_of_even

arr = [1,2,3,4,5,6]
print(sum_even_elems(arr))"
Write a Python program to scrape the HTML content of a website and extract all links.,"import requests
from bs4 import BeautifulSoup

url = 'http://example.com'

r = requests.get(url)
soup = BeautifulSoup(r.text, 'html.parser')

links = [link.get('href') for link in soup.find_all('a')]
print(links)"
Write a function in Python to remove all punctuation and special characters.,"import string

def removePunctuation(input_string):
    punctuations = string.punctuation
    output_string = """"
    for char in input_string:
        if char not in punctuations:
            output_string += char
    return output_string

print(removePunctuation(""Hello, World!!!""))  # Output: Hello World"
Generate a code snippet to calculate the average of an array of numbers in Python.,"def average(numbers):
 return sum(numbers) / len(numbers)"
Produce a Python script to display the first n Fibonacci numbers,"def printFibo(n):
    first = 0
    second = 1

    print(first)
    print(second)

    for i in range(2, n):
        next = first + second
        print(next)
        first = second
        second = next

#Test
printFibo(5)"
Write a Python program to optimize the sorting of a given list of items.,"def optimize_sort(items):
  sorted_items = sorted(items)
  return sorted_items"
Create a Python function to detect a specific sequence,"def find_sequence(list_a, pattern):
    result = []
    for i in range(len(list_a)-len(pattern)+1):
        if list_a[i:i+len(pattern)] == pattern:
            result.append(i)
    return result"
Create a program in Python to display the powers of 2 from 0 to 10.,"# Python program to display the power of 2 from 0 to 10
 
for i in range(0,11):
    print(""2**"",i,""="",2**i)
   
# Output:
# 2** 0 = 1
# 2** 1 = 2
# 2** 2 = 4
# 2** 3 = 8
# 2** 4 = 16
# 2** 5 = 32
# 2** 6 = 64
# 2** 7 = 128
# 2** 8 = 256
# 2** 9 = 512
# 2** 10 = 1024"
Create a Python code to traverse a binary tree in depth-first search order.,"def dfs(root): 
    if root is not None: 
        print(root.data) 
        dfs(root.left) 
        dfs(root.right)"
Replace the for-loop in the following Python function with an equivalent while loop.,"def count_down(value):
    ret = 1
    while value > 0:
        ret *= value
        value -= 1
    return ret"
"Create a class called Player in Python, which contains a name, health, and gold attributes.","class Player:
    def __init__(self, name, health, gold):
        self.name = name
        self.health = health
        self.gold = gold"
Write a Python function that calculates the sum of all even numbers within a given range,"def sum_even_in_range(start, end):
    # Initialise the result
    result = 0

    # Loop over the Range
    for i in range(start, end+1):
        # Check if number is even 
        if i % 2 == 0:
            result += i
            
    return result"
Create a program in Python to calculate the sum of the digits in a number using recursion.,"def sum_of_digits(number):
 if len(str(number)) == 1:
  return number
 else:
  return number % 10 + sum_of_digits(number // 10)

# example
sum_of_digits(1234)
# returns 10"
Create a program in Python to parse a string and replace all vowels with the letter “X”.,"def replace_vowels(string): 
    vowels = ('a', 'e', 'i', 'o', 'u') 
    for x in string.lower(): 
        if x in vowels: 
            string = string.replace(x, ""X"") 
  
    # Print string without vowels 
    print(string) 
  
# Driver program 
if __name__ == ""__main__"": 
    string = ""Hello, world!""
    replace_vowels(string)"
You need to write a python script that takes user input for hours worked and outputs the amount of salary due.,"def calculate_salary(hours_worked):
    wage_per_hour = 8.0
    salary = wage_per_hour * hours_worked
    return salary"
Design a class in Python to generate a stack with a set of operations.,"class Stack:
  def __init__(self):
    self.items = []

  def push(self, item):
    self.items.append(item) 

  def pop(self):
    self.items.pop()

  def peek(self):
    return self.items[-1]

  def is_empty(self):
    return self.items == []

  def size(self):
    return len(self.items)"
Write a Python program to check whether an element exists within a given list.,"def is_element_in_list(list_a, target):
 return target in list_a

is_element_in_list(list_a, target)"
Create a Python class for a student with the following attributes.,"class Student(object):

    def __init__(self, name, age, address):
        self.name = name
        self.age = age
        self.address = address"
Generate a Python program to calculate the Fibonacci number at a given position.,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n-1) + fibonacci(n-2)

n = 10
print(fibonacci(n))"
Generate a Python function to generate a bar chart of a DataFrame containing two columns of data.,"import matplotlib.pyplot as plt

def generate_bar_chart(df):
 x = df.columns[0]
 y = df.columns[1]
 df.plot.bar(x,y)
 plt.show()"
Write a Python program to filter out all the strings longer than 10 characters in a list of strings.,"def filter_long_strings(my_list):
  long_strings = []
  for i in my_list:
    if len(i) > 10:
      long_strings.append(i)
  return long_strings"
Generate a recursive Python function to compute the Fibonacci sequence.,"def fibonacci(n): 
    if n <= 1: 
        return n 
    else: 
        return(fibonacci(n-1) + fibonacci(n-2)) 

for i in range(10): 
    print(fibonacci(i))"
Write a Python program to remove the duplicates in a list and print the list in ascending order.,"""""""
Write a Python program to remove the duplicates in a list and print the list in ascending order
""""""

def remove_duplicates_ascending(l):
    return sorted(list(set(l)))

if __name__ == ""__main__"":
    l = [10,7,9,12,11,7,9,10]
    res = remove_duplicates_ascending(l)
    print(res) # [7, 9, 10, 11, 12]"
Create a python class object for the following data:,"class Customer:
    def __init__(self, name, age, emailid, phone_number):
        self.name = name
        self.age = age
        self.emailid = emailid
        self.phone_number = phone_number"
Create a function in Python to add two numbers.,"def adder(a, b):
    return a + b"
Debug the following python code,"def compute_sum(x, y):
    return x + y # Added a missing indentation to the return statement."
Write a function to convert the given snake case string to camel case string by using regex.,"import re
def snake_to_camel(word):
  return ''.join(x.capitalize() or '_' for x in word.split('_'))"
Create a Python code to calculate the speed of an object at a given time.,"def calculate_speed(position, time): 
    speed = position / time 
    return speed

if __name__ == '__main__':
    position = 50
    time = 10
    speed = calculate_speed(position, time)
    print(speed)"
Create a Python program to retrieve data from a given URL.,"# Import the built-in ""requests"" package
import requests

# Set the URL
url = ""https://example.com/index.html""

# Retrieve the data
data = requests.get(url)

# Output the retrieved data
print(data.text)"
Create a Python script that extracts the text from a webpage,"import requests
from bs4 import BeautifulSoup

url = ""https://www.example.com""

page = requests.get(url)

soup = BeautifulSoup(page.content, 'html.parser')

text = soup.find_all(text=True)

for t in text:
    print(t.strip())"
Edit the following Python program to print all the even numbers from 0 to 10.,"for i in range(11):
  if i % 2 == 0:
    print(i)"
Evaluate the accuracy of a machine learning model.,Create a python script to evaluate the performance of the classification model. The script should measure the accuracy of the model by measuring the accuracy score on a held-out test set. The test should compare the model's predictions to the true labels for the image samples.
Design a Python program to convert minutes to hours and minutes.,"def convert_minutes(minutes):
    hours = minutes // 60
    remaining_minutes = minutes % 60
    return hours, remaining_minutes

hours, minutes = convert_minutes(150)
print(hours, minutes)"
Develop a Python function that can detect the spoken language of a user’s input.,"def detect_language(text):
 """"""Detect the language of a given text.

 Args:
  text (str): The text to detect the language of.

 Returns:
  str: The detected language of the text.
 """"""

 language = detect(text)
 return language"
Create a program for unsupervised learning in Python.,"#!/usr/bin/env python

from sklearn import cluster

# define model
k_means = cluster.KMeans(n_clusters=4)

# fit and predict
k_means.fit(X)
predictions = k_means.predict(X)"
Write a Python program that takes a URL and downloads the HTML page as a string.,"import requests

def get_html_page(url):
 response = requests.get(url)
 return response.text"
Identify the complexity of the following python sorting algorithms.,"[Selection Sort]: O(n^2)
[Insertion Sort] : O(n^2)
[Merge Sort]: O(nlogn)
[Quick Sort]: O(nlogn)
[Heap Sort]: O(nlogn)"
Write a python function to check whether the word is present in a given sentence or not.,"def is_Word_Present(sentence,word): 
    s = sentence.split("" "") 
    for i in s:  
        if (i == word): 
            return True
    return False"
Design a Python function to evaluate the number of underlying characters in a string.,"def getNumberOfChars(String):
    total_len = 0
    for word in string.split():
        total_len += len(word)
    return total_len"
Convert the following java program to python.,"# Converting from Java to Python

number = 10
square = number * number
print(""Square of given number is: ""+str(square))"
Write a Python program to identify the largest number in the given list.,"max_num = 0 

for num in lst : 
    if num > max_num : 
        max_num = num 

print(max_num)"
Design a Python program to predict output given input,"def predict_divison_output(x, y):
    return x / y"
Create a Python program to sort a dictionary according to the values.,"def sort_dict(d):
    sorted_dict = {}
    for k, v in sorted(d.items(), key=lambda x: x[1], reverse=True):
        sorted_dict[k] = v
    return sorted_dict

input_data = {""John"": 90, ""Mary"": 95, ""Aaron"": 80}
sorted_dict = sort_dict(input_data)
print(sorted_dict)  # Output: {""Mary"": 95, ""John"": 90, ""Aaron"": 80}"
Rewrite the current function using Python 3.x code instead of Python 2.7.,"def sum(a, b):
    return a + b"
Implement a Python class to represent a sentence.,"class Sentence:
  def __init__(self, text):
    self.text = text
    self.words = self.text.split()
    
  def get_num_words(self):
    return len(self.words)"
Create a program that counts the number of words in a given sentence using the split() method.,"sentence = ""I am learning Python""

def count_words(sentence):
    words = sentence.split()
    return len(words)

word_count = count_words(sentence)
print(word_count)"
"Create a Python list that contains strings [""apple"", ""banana"", ""lemon"", ""mango""].","my_list = [""apple"", ""banana"", ""lemon"", ""mango""]"
Write a Python program to validate a US phone number.,"def is_valid_phone_number(phone):
 
  if len(phone) != 12:
    return False
 
  if phone[3] != '-' or phone[7] != '-':
    return False
 
  for i in range(0, 12):
    if i != 3 and i != 7:
      if not phone[i].isdecimal():
        return False
 
  return True

result = is_valid_phone_number(""123-456-7890"")
print(result)"
Write a Python program to print out the grade of a student based on the given marks,"def get_grade(marks):
    if marks >= 90:
        grade = ""A+""
    elif marks >= 80 and marks < 90:
        grade = ""A""
    elif marks >= 70 and marks < 80:
        grade = ""B+""
    elif marks >= 60 and marks < 70:
        grade = ""B""
    elif marks >= 50 and marks < 60:
        grade = ""C+""
    else:
        grade = ""F""
    
    print(""Grade: %s"" %grade)

marks = 60
get_grade(marks)"
Create a function in Python that takes a list and sorts its elements in ascending order.,"def sortAsc(numbers):
    numbers.sort()
    return numbers"
Generate a program in Python that takes a list of numbers and prints out the average value.,"def find_average(nums):
  sum = 0
  for num in nums:
    sum += num
  return sum/len(nums)"
Generate the output for the following Python code.,2 is even
Create a Python program that takes the average of all numbers in a list.,"def averageList(numbers):
    total = 0
    for num in numbers:
        total += num
    return total / len(numbers)

print(averageList([10, 15, 20, 25]))"
Develop a Python program to read a character from the user and print its ASCII value.,"# Get the character from user
char = input('Please enter a character: ')

# Print the ASCII value
print(ord(char))"
Create a function in Python to find the most common elements in a list.,"def most_common_element(lst):
    max_count = 0
    most_common = None
    
    for num in lst:
        count = lst.count(num)
        if count > max_count:
            most_common = num
            max_count = count
    return most_common

most_common_element([2, 4, 1, 4, 5, 6, 4, 8])"
Create a python program to replace specific words in a given input string with a custom word.,"def replace_word(inp, src, target):
    inp = inp.split()
    for i in range(len(inp)):
        if inp[i] == src:
            inp[i] = target
    return ' '.join(inp)"
Reverse the words in this sentence using Python.,"""sentence. a is This"""
Create a Python function that takes in a list of words and check if every word in the list is a palindrome.,"def is_all_palindrome(words):
    for word in words:
        if word == word[::-1]:
            continue
        else:
            return False
    return True

words = [""abcd"", ""anna"", ""mom"", ""live""]

print(is_all_palindrome(words))"
Create a class in Python to define a point in 3D space.,"class Point3D(object):
    def __init__(self, x, y, z):
        self.x = x
        self.y = y
        self.z = z

    def to_string(self):
        return ""({}, {}, {})"".format(self.x, self.y, self.z)"
"Write a Python program to generate a random password. The password must contain at least 8 characters including upper and lower case letters, numbers, and symbols.","import random
import string

def generate_password():
 password_length = 8
 password = ''.join(random.choice(
 string.ascii_uppercase +
 string.ascii_lowercase +
 string.digits +
 string.punctuation) for _ in range(password_length))
 
 return password

print(generate_password())"
Write a Java program to remove all whitespace from a string.,"public class RemoveWhitespace { 

    public static String removeWhitespace(String str) 
    { 
        str = str.replaceAll(""\\s"", """"); 
        return str; 
    } 
  
    public static void main(String[] args) 
    { 
        String str = ""Python Programming""; 
        System.out.println(removeWhitespace(str)); 
    } 
}"
Generate a random character string in Python of length 10.,"import random
random_string = ''.join(random.choices(string.ascii_letters + string.digits, k=10))"
Create a Python program to compare two strings and generate a string with all characters that are present in both strings.,"def compare_strings(first_string, second_string):
    string_list = set(list(first_string)) & set(list(second_string))
    common_string = ''.join(string_list)
    return common_string

print(compare_strings(""hello"", ""world""))"
Write a Python program that prints the Fibonacci sequence up to n terms.,"def print_fibonacci_sequence(n):
  a = 0
  b = 1
  
  print(a, end=' ')
  print(b, end=' ')
  
  for i in range(2, n):
    c = a + b
    a = b
    b = c
    print(c, end=' ')

n = 10
print_fibonacci_sequence(n)"
Create a method in Python to sort all the elements in the given dictionary in descending order of the values.,"def sortByValue(dictionary):
    sorted_dict = dict(sorted(dictionary.items(), key=lambda x: x[1], reverse=True))
    return sorted_dict

dictionary = {""A"": 30, ""B"": 40, ""C"": 20}
result = sortByValue(dictionary)
print(result) # prints {'B': 40, 'A': 30, 'C': 20}"
Create a new Python module to validate input data against some desired conditions.,"def check_validity(data):
    try:
        # Validation logic goes here 
        return True
    except Exception as e:
        return False"
Write a Python function that takes a list of numbers and prints out a list of their squares.,"def squares(arr):
  res = []
  for i in arr:
    res.append(i**2)
  return res

arr = [1, 2, 3]
res = squares(arr)
print(res)"
"Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.","import re
def is_allowed_specific_char(string):
    get_char = re.compile(r'[^a-zA-Z0-9.]')
    string = get_char.search(string)
    return not bool(string)"
Write a Python function to take the given list and return its elements joined into a single string.,"def join_list(lst):
    return "" "".join(lst)"
Write a Python program to compare two dictionaries to check if they are equal.,"def compare_dicts(dict1, dict2):
    if dict1 == dict2:
        return True
    return False

result = compare_dicts(d1, d2)
print(result)"
Write a Python program that takes a list of strings as input and returns a string containing all the strings joined together in alphabetical order.,"def alphabetize_list(arr):
  arr.sort()
  return ' '.join(arr)

data = ['apple', 'banana', 'orange']
result = alphabetize_list(data)
print(result)"
Create a Python program to generate a new dictionary from an existing dictionary given a set of key-pair values.,"dct = {
 ""name"": ""John"",
 ""age"": 20,
 ""species"": ""Human""
}
desired_pairs = {""name"": ""Alex"", ""species"": ""AI""}

# Generate the new dictionary
new_dct = {**dct, **desired_pairs}

print(new_dct)

# Output: {'name': 'Alex', 'age': 20, 'species': 'AI'}"
Create a K Nearest Neighbors classifier using scikit-learn in Python.,"#import packages
from sklearn.neighbors import KNeighborsClassifier
import numpy as np

# Create a KNearestNeighbors classifier
knn = KNeighborsClassifier(n_neighbors=5)

# Train the classifier using fit
X = np.array([[1,2,3], [2,3,4],[4,5,6]])
y = np.array([1,0,1])
knn.fit(X, y)

# Use the trained classifier to make predictions
knn.predict([[1,2,2],[2,2,2]])
# Output: array([1, 0])"
Create a Python program to find the sum of the Fibonacci sequence.,"def fibonacci_sum(n): 
    if n <= 1: 
        return n 
    previous = 0
    current  = 1
    sum      = 1
    
    for _ in range(n - 1): 
        previous, current = current, previous + current 
        sum += current 
      
    return sum"
Construct a Python program that creates a web server running on port 80.,"import http.server
import socketserver

# web server running on port 80
PORT = 80
Handler = http.server.SimpleHTTPRequestHandler

with socketserver.TCPServer(("""", PORT), Handler) as httpd:
    print(""serving at port"", PORT)
    httpd.serve_forever()"
Write a Python program to remove duplicate items from a list.,"def remove_duplicate(inlist):
    outlist = []
    for item in inlist:
        if item not in outlist:
            outlist.append(item)
    return outlist

result = remove_duplicate([1, 2, 3, 4, 3, 2, 4])
print(result)"
Design a Python class to represent a circle with a center and a radius.,"class Circle:
    def __init__(self, center, radius):
        self.center = center
        self.radius = radius

    def area(self):
        return 3.14 * self.radius * self.radius

    def circumference(self):
        return 2 * 3.14 * self.radius

circle = Circle((1, 2), 5)
print(f""Area of the circle: {circle.area()}"")
print(f""Circumference of the circle: {circle.circumference()}"")"
Generate a Python script which prints out the first 10 perfect squares.,"for i in range(10): 
    print(""Perfect square at position"", i+1, ""is"", (i+1)*(i+1))"
Offer a suggestion for increasing the performance of the following Python Script,"def function(arg):
    for i in arg:
        print(i)"
"Translate the following pseudocode to Python:

IF x IS GREATER THAN 0
    PRINT ""x is positive""
ELSE
    PRINT ""x is not positive""","if x > 0:
    print(""x is positive"")
else:
    print(""x is not positive"")"
Write a Python code to update the values in a table.,"cur.execute(""UPDATE orders SET customer_name = %s, price = %s WHERE order_id = %s"", (customer_name, price, order_id))
conn.commit()"
Create a Python script to generate a histogram from an input dataset.,"import numpy as np
import matplotlib.pyplot as plt

data = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])

# histogram the data
plt.hist(data)

# labels
plt.xlabel('Value')
plt.ylabel('Frequency')

plt.show()"
Generate a Python code to create a class which creates an empty dictionary with the given keys.,"class EmptyDictionary:
    def __init__(self, keys):
        self.keys = [k.strip() for k in keys.split("","")]
        self.dictionary = {k: None for k in self.keys}
            
    def get_dictionary(self):
        return self.dictionary"
Create a Python function to return the elements of two lists as a dictionary.,"list_one = [1, 2, 3]
list_two = ['a', 'b', 'c']

def list_to_dict(list_one, list_two):
  if len(list_one) != len(list_two):
    return None
  d = {}
  for i in range(len(list_one)):
    d[list_one[i]] = list_two[i]
  return d
  
dictionary = list_to_dict(list_one, list_two)
print(dictionary)"
Execute the following python program,The output of the code is 12.
Implement a Python function to swap two values in a list.,"def swapPositions(list, pos1, pos2): 
  
    first_ele = list[pos1] 
    list[pos1] = list[pos2] 
    list[pos2] = first_ele 
  
    return list
  
# Driver function 
list = [4, 8, 1, 5] 
pos1, pos2  = 0, 3
  
print(swapPositions(list, pos1, pos2))"
Write a Python function to count the number of digits in a given number.,"def count_digits(num):
    return len(str(abs(num)))"
Write a function to find the minimum value in a given heterogeneous list.,"def min_val(listval):
     min_val = min(i for i in listval if isinstance(i, int))
     return min_val"
Generate a bash script to run a given python code.,"#!/bin/bash
if [[ $1 -lt 0  ]]
   then echo ""Incorrect input""
fi
python3 fib.py $1"
Create a web scraper in Python to access the data in a given url,"import requests
from bs4 import BeautifulSoup

url = 'https://www.example.com/'
resp = requests.get(url)
soup = BeautifulSoup(resp.content, 'html.parser')

# Scraping code goes here"
Convert this JavaScript code to Python.,"a = 1
b = 2
c = a + b
print(c)"
Suggest a python code that checks if two strings are anagrams of each other,"def isAnagram(str1, str2):
    str1 = str1.replace("" "", """")
    str2 = str2.replace("" "", """")
    # remove all whitespaces
 
    if sorted(str1) == sorted(str2):
        return True
    else:
        return False"
Generate a Python program for creating a tiered dictionary with nested keys and values.,"def generate_dict(keys, values):
 n = len(keys)
 if n != len(values):
  return None

 dct = {}
 for i in range(n):
  dct[keys[i]] = values[i] if i == (n-1) else generate_dict(keys[:i+1], values[i])

 return dct

keys = [‘a’, ‘b’, ‘c’, ‘d’]
values = [1, 2, 3, 4]
result = generate_dict(keys, values)
print(result)"
Write a Python program to sort a dictionary by its values and return the sorted list?,"unsortedDict = {""Red"":120,""Blue"":90,""Yellow"":50,""Purple"":75}

sortedList = sorted(unsortedDict.items(), key=lambda x: x[1])
print(sortedList)"
Write a function to multiply two integers without using the * operator in python.,"def multiply_int(x, y):
    if y < 0:
        return -multiply_int(x, -y)
    elif y == 0:
        return 0
    elif y == 1:
        return x
    else:
        return x + multiply_int(x, y - 1)"
Construct a Python class that behaves like a stack.,"class Stack:
    def __init__(self):
        self.items = []

    def isEmpty(self):
        return self.items == []

    def push(self, item):
        self.items.append(item)

    def pop(self):
        return self.items.pop()

    def peek(self):
        return self.items[len(self.items)-1]

    def size(self):
        return len(self.items)"
Write a Python program to merge two given dictionaries and update the values of common keys.,"def merge_dicts(dict1, dict2):
 result = {**dict1, **dict2}
 for key in result:
  if key in dict1 and key in dict2:
   result[key] = dict1[key] + dict2[key]

 return result

dict1 = {'a': 10, 'b': 20, 'c': 30}
dict2 = {'a': 15, 'd': 40}

merge_dicts(dict1, dict2)
# {'a': 25, 'b': 20, 'c': 30, 'd': 40}"
Implement a stack class in Python.,"class Stack:
    def __init__(self):
        self.stack = []
 
    def push(self, x):
        self.stack.append(x)
 
    def pop(self):
        if self.stack == []:
            raise IndexError(""pop from an empty stack"")
        else:
            return self.stack.pop()
 
    def is_empty(self):
        return self.stack == []"
Generate a function in Python to replace every character in a string with the character that follows it in the alphabet.,"def replace_char(string):
    encoded = """"
    for char in string:
        if char == 'z':
            encoded += 'a'
        else:
            encoded += chr(ord(char) + 1)
    return encoded"
Generate a random alphanumeric string of 20 characters in length in Python.,"import string
import random

def generate_random_string():
 chars = string.ascii_letters + string.digits
 random_string = ''.join(random.choice(chars) for _ in range(20))
 return random_string
 
random_string = generate_random_string()
print(random_string) // ""xVUqrHZkXDjzXFVfBmO7"""
"Can you write a Python function that takes two strings as arguments, and concatenates them together?","def concatenate_strings(string1, string2):
    return string1 + string2"
Create a Python program that calculates the factorial of a number.,"def factorial(n):
    if n == 0:
        return 1
    
    return n*factorial(n-1)

fact = factorial(5)
print('Factorial of 5 is ' + str(fact))"
Write a function to compute the sum of digits of each number of a given list.,"def sum_of_digits(nums):
    return sum(int(el) for n in nums for el in str(n) if el.isdigit())"
Write a python program to create an even number generator.,"def even_number_generator():
    num = 0
    while True:
        if num % 2 == 0:
            yield num
        num += 1"
You need to write a Python program for computing the factorial of a number.,"def factorial(num):
    if num == 0:
        return 1
    else:
        return num * factorial(num - 1)

print(factorial(5))"
Write a Python program to print the numbers of a specified list after removing even numbers from it.,"def remove_even_numbers(data_list):
    return [x for x in data_list if x%2 != 0]

print(remove_even_numbers(data_list))"
Develop a program in Python to sort a given list of integers in ascending order.,"def sort_list(list): 
    for i in range(len(list)-1,0,-1):
        for j in range(i):
            if list[j] > list[j+1] :
                temp = list[j]
                list[j] = list[j+1]
                list[j+1] = temp
    return list"
Write a Python program to read CSV data and store it in a dictionary.,"import csv

def read_csv_record(filename):
    data = {}
    with open(filename) as csv_file:
        reader = csv.DictReader(csv_file)
        for row in reader:
            data[row['key']] = row['value']
    return data"
Implement a data structure for a stack in Python.,"class Stack(object):
    def __init__(self):
        self.items = []

    def is_empty(self):
        return self.items == []

    def push(self, item):
        self.items.append(item)

    def pop(self):
        return self.items.pop()

    def peek(self):
        return self.items[len(self.items)-1]

    def size(self):
        return len(self.items)"
Generate a function in Python that takes a list of integers and returns a boolean indicating whether or not there are any duplicates in the input list.,"def contains_duplicates(list):
 
 seen = set()
 
 for element in list:
 if element in seen:
 return True
 seen.add(element)
 
 return False"
Write a function to find modulo division of two lists using map and lambda function.,"def moddiv_list(nums1,nums2):
  result = map(lambda x, y: x % y, nums1, nums2)
  return list(result)"
Rewrite the following Python code avoiding nested if-statements.,"def check_integer(x):
  if x <= 0:
    return False
  if x*x > 10:
    return True
  return False"
Create a Python program to perform currency conversion.,"def currency_converter(amount, rate):
 return amount * rate

# US Dollars to Euro
print(currency_converter(10, 0.86))  # Output: 8.6

# Euro to US Dollars 
print(currency_converter(10, 1.16))  # Output: 11.6"
Build a web scraper with Python to extract the text of a website.,"import requests
from bs4 import BeautifulSoup

# Copy the link to the website
url = 'https://www.example.com/'

# Make a request for the page
r = requests.get(url)

# Parse the response using BeautifulSoup
soup = BeautifulSoup(r.text, 'html.parser')

# Extract the text from the page
text = soup.find_all(text=True)

# Output the text
for t in text:
 print(t.strip())"
write a python program for its purpose,"""""""
Compute the factorial of a given number
""""""

def factorial(n): 
	if n == 1: 
		return 1
	else: 
		return n * factorial(n-1) 

if __name__ == '__main__': 
	num = int(input()) 
	print(factorial(num))"
Develop a Python script to calculate the sum of the squares of all elements in a given array.,"def sum_of_squares(arr):
    sum = 0 
    for num in arr:
        sum += num*num
    return sum

arr = [1,2,3]
sum_of_squares = sum_of_squares(arr)
print(sum_of_squares)"
Write a Python program to print the first 10 positive integers in reverse order.,"for i in range(10, 0, -1):
    print(i)"
"Write a python program to count how many times the word ""the"" appears in a given text.","def count_the(text):
    count = 0
    words = text.split()
    for word in words:
        if word == ""the"":
            count += 1
    return count

if __name__ == '__main__':
    text = ""The quick brown fox jumps over the lazy dog""
    print(count_the(text))"
Develop a function in Python that prints out the Pascal's triangle for a given number of rows.,"def pascal_triangle(n): 
    trow = [1] 
    y = [0] 
    for x in range(max(n, 0)): 
        print(trow) 
        trow=[l+r for l,r in zip(trow + y, y + trow)] 
    return n>=1

pascal_triangle(5)"
Compare two strings to check if they are anagrams or not in Python.,"def is_anagram(w1, w2):
    # Check if lengths are equal
    if len(w1) == len(w2):
        # Sort the strings
        s1 = sorted(w1)
        s2 = sorted(w2)
        # Check if sorted strings are equal
        if s1 == s2:
            return True
    return False

# Example
w1 = ""silent""
w2 = ""listen""

print(is_anagram(w1, w2)) #Output: True"
Optimize a Python algorithm that computes the maximum value in a given array.,"def max_value(list):
    max_val = list[0]
    for val in list[1:]:
        if val > max_val:
            max_val = val
    return max_val

list = [23, 45, 67, 89, 13, 99, 19, 20]
print(max_value(list)) # 99"
Create a Python program that implements the insertion sort algorithm.,"def insertion_sort(list_):
    for i in range(1, len(list_)):
        temp = list_[i]

        j = i-1
        while j >= 0 and temp < list_[j]:
            list_[j+1] = list_[j]
            j -= 1
        list_[j+1] = temp

    return list_"
Build a command-line tool in Python 3 that will print a table of Prime Numbers up to a specified number (argument).,"#!/usr/bin/env python3

import sys

maximum = int(sys.argv[1])

print('Prime numbers up to {}:'.format(maximum))
print('----------------------------')

for num in range(2, maximum+1):
    prime = True
    for i in range(2, num):
        if num % i == 0:
            prime = False
            break

    if prime:
        print(num, end=' ')"
Implement a Python script which encodes a given string using #Base64.,"import base64
 
#encode
def encode(string):
    string_bytes = string.encode('ascii')
    base64_bytes = base64.b64encode(string_bytes)
    base64_string = base64_bytes.decode('ascii')
    return base64_string
 
string = 'This is a test string'
print('Encoded string: ', encode(string))

// Output: Encoded string: VGhpcyBpcyBhIHRlc3Qgc3RyaW5n"
Suggest a modification to the following python code to optimize its runtime performance,"def get_sum(numbers):
  sum = 0
  for i in range(len(numbers)):
    sum += numbers[i]
  return sum"
Write a Python script that takes an integer as input and outputs the Fibonacci number corresponding to that index.,"# Input number
num = int(input())

# Numbers
a = 0
b = 1

for i in range(num):
     # Sum of all preceding numbers
     c = a + b
     # Set the second number as the first number
     a = b
     # Set the new sum as the second number
     b = c

# Print the nth Fibonacci number
print(a)"
Create a Python function to generate a 8-letter random alphanumeric string.,"import random
import string

def randomString(stringLength=8):
 lettersAndDigits = string.ascii_letters + string.digits
 return ''.join(random.choice(lettersAndDigits) for i in range(stringLength))

print(randomString()) // output '7Oti2cgn'"
Write a Python program to take in a list of phrases and generate a string with the each phrase followed by its length.,"result = ""A bird in the hand (17)is worth two in the bush (25)""
 
code:
input_phrases = [""A bird in the hand"", ""is worth two in the bush""]
 
result = """"
for phrase in input_phrases:
 result += phrase + ' (' + str(len(phrase)) + ')'
 
print(result)"
Optimize a Python script to filter all strings of length 5.,"def filter_length(words):
    new_words = []
    for word in words:
        if len(word) == 5:
            new_words.append(word)

    return new_words

words = [""Hello"", ""Hello World"", ""World"", ""Python"", ""Coding""]
 print(filter_length(words))"
Write a function to count the same pair in two given lists using map function.,"from operator import eq
def count_same_pair(nums1, nums2):
    result = sum(map(eq, nums1, nums2))
    return result"
Read the following data structure and generate a Python program to sort the list by name alphabetically.,"sorted_list = sorted(student_list, key=lambda k: k[""name""])
 
for student in sorted_list:
    print(student[""name""])"
Write a function to check if two lists of tuples are identical or not.,"def check_identical(test_list1, test_list2):
  res = test_list1 == test_list2
  return (res) "
Create a Python script that servers a realtime notifications to subscribed users.,"import time
import websocket

# Server script to send realtime notifications to subscribed users 
# Connect to websocket host
ws = websocket.WebSocket()
ws.connect(""ws://localhost:8888/"")

# handle incoming messages
while True:
 msg = ws.recv()
 print(f""Notification to users: {msg}"")
 
# broadcast the message to subscribed users
ws.send(msg)

# wait for 5 seconds 
time.sleep(5)"
Generate a Python script to delete the duplicate element from an array.,"def removeDuplicates(arr): 
    final_list = [] 
    for num in arr: 
        if num not in final_list: 
            final_list.append(num) 
    return final_list 
          
# Driver Code 
arr = [3, 8, 4, 3, 2, 8]  
print(removeDuplicates(arr))"
Design a class in Python to model a bank account.,"class BankAccount:
    def __init__(self, name, balance):
        self.name = name
        self.balance = balance
    
    def deposit(self, amount):
        self.balance += amount

    def withdraw(self, amount):
        self.balance -= amount

    def get_balance(self):
        return self.balance"
Write a Python script that takes a list of numbers as an input and outputs their average.,"def average(arr):
    return sum(arr) / len(arr)

mylist = [3, 5, 7, 9, 12]

print(""Average of mylist is:"", average(mylist))"
Write a Python script that computes the sum of two given integers.,"def sum_two_ints(a, b):
 return a + b"
Write a Python code to check if a given list contains all unique elements.,"def is_unique_list (numbers):
    return len(numbers) == len(set(numbers))"
Write a Python program to find the nth term of Fibonacci Series.,"def nth_term_fibonacci(n): 
    a = 0
    b = 1
    if n < 0: 
        print(""Incorrect input"") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2,n): 
            c = a + b 
            a = b 
            b = c 
        return b"
Create a web scraper using Python to scrape the title of all articles on a given website and store them in a list.,"import requests
from bs4 import BeautifulSoup

url = ""http://example.com/articles""
r = requests.get(url)
html = r.text
soup = BeautifulSoup(html, ""html.parser"")

titles = []
for art in soup.find_all(""h2""):
 titles.append(art.get_text())

print(titles)"
Code up a web scraper in Python for a particular website.,"import requests
from bs4 import BeautifulSoup

url = 'https://www.example.com'
page = requests.get(url)

soup = BeautifulSoup(page.text, 'html.parser')

all_divs = soup.find_all('div')

for div in all_divs:
    try:
        print(div['class'])
    except:
        print(div.text)"
Generate a for loop in Python for iterating an array.,"arr = [2, 5, 9, 8]
for num in arr:
    print(num)"
You need to edit an existing Python program. The program to accept and print a sentence.,"str1 = ""Hello World""

print(str1)"
Provide an algorithm in python to calculate the power of an integer.,"def power_of_integer(x, n):
    if n == 0:
        return 1
    
    if n % 2 == 0:
        return power_of_integer(x*x, n//2)
    else:
        return x * power_of_integer(x*x, (n-1)//2)"
Create a script in Python to check for palindromes.,"def is_palindrome(s): 

    # Strip punctuation and make input lowercase 
    s = ''.join(e.lower() for e in s if e.isalnum())

    # Check if the string is a palindrome 
    return s == s[::-1] 

# Driver Code
string = ""A man, a plan, a canal: Panama""
print(is_palindrome(string)) # Output: true"
"Write a Python script that takes a list of integers, and returns a list of tuples that contain the index and square of each number in the original list.","def square_index(nums):
    return [(index, num ** 2) for index, num in enumerate(nums)]

square_index(nums)
# Output: [(0, 1), (1, 4), (2, 9), (3, 16), (4, 25)]"
Create a database using Python to store information about movie reviews.,"import sqlite3

# create an in-memory SQLite3 database
db_connection = sqlite3.connect(':memory:') 
cursor = db_connection.cursor()

# Create a table called 'reviews'
cursor.execute('''CREATE TABLE reviews
                (movie_name text, review_text text, reviewer_name text, rating int)''')

db_connection.commit()"
Create a Python program that calculates the total cost of an online purchase.,"def calculate_total_cost(product_name, quantity, price):
    return quantity * price

total_cost = calculate_total_cost(""Powerbank"", 3, 15)
print(""Total cost of the purchase is $"" + str(total_cost))"
Please construct a function in Python that constructs and returns a dictionary containing all unique characters in a given string.,"def unique_characters(string):
    unique_chars = {}
    for char in string:
        if char in unique_chars:
            continue
        else:
            unique_chars[char] = True
    return unique_chars

result = unique_characters('missisippi')
print(result) # Output: {'m': True, 'i': True, 's': True, 'p': True}"
Design a code for clustering data using Python and the K-means algorithm.,"import numpy as np
from sklearn.cluster import KMeans

# Load the data
data = np.loadtxt('data.txt')

#Train Clustering Model
kmeans = KMeans(n_clusters=3, random_state=0)
kmeans.fit(data)

#Make Predictions
labels = kmeans.predict(data)

#Print the labels
print(labels)"
Edit a given Python program to add error handling to it.,"def read_csv(filename):
    try:
        with open(filename, 'r') as f: 
            data = f.readlines()
            return data
    except FileNotFoundError: 
        print(""File not found. Please provide a valid filename"")"
Develop a Python script for calculating the Fibonacci numbers for a given input.,"def Fibonacci(n): 
    if n<0: 
        print(""Incorrect input"") 
    # First Fibonacci number is 0 
    elif n==1: 
        return 0
    # Second Fibonacci number is 1 
    elif n==2: 
        return 1
    else: 
        return Fibonacci(n-1)+Fibonacci(n-2) 

# Driver Program 
  
print(Fibonacci(8))"
Write a Python program that prints the first 10 prime numbers,"def get_prime_numbers(n):
    prime_nums = []
    i = 2
    while len(prime_nums) < n:
        isPrime = True
        for num in prime_nums:
            if i % num == 0:
                isPrime = False
                break
        if isPrime:
            prime_nums.append(i)
        i += 1
    return prime_nums

if __name__ == '__main__':
    print(get_prime_numbers(10))"
Generate a python script to extract a random subset of size 100 from a given list of items.,"import random

def extract_random_subset(li, size=100): 
    subset = [] 
    while len(subset) < size: 
        rand_ele = random.choice(li)
        if rand_ele not in subset: 
            subset.append(rand_ele) 
    return subset"
Write a function to find the index of the last occurrence of a given number in a sorted array.,"def find_last_occurrence(A, x):
    (left, right) = (0, len(A) - 1)
    result = -1
    while left <= right:
        mid = (left + right) // 2
        if x == A[mid]:
            result = mid
            left = mid + 1
        elif x < A[mid]:
            right = mid - 1
        else:
            left = mid + 1
    return result "
Sort a list of strings in Python alphabetically.,"def sort_list(string_list):
  sorted_list = sorted(string_list)
  return sorted_list"
Generate a python code that adds a delimiter string between every list item.,"def join_list_items(my_list, delimiter):
    joined_list = delimiter.join(my_list)
    return joined_list

list_string = join_list_items([""apple"", ""orange"", ""mango""], "", "")
print(list_string)
# Output: apple, orange, mango"
"Write a Python program to create a list that contains the elements of the previous list, but with all duplicates removed.",no_duplicates_list = list(set(list_with_duplicates))
"Develop a Python script that prints the unique words in a string, along with their respective counts.","from collections import Counter

string = ""The quick brown fox jumped over the lazy dog.""
words = string.split()
word_counts = Counter(words)

unique_words = set(words)

for word in unique_words:
    print(f""{word:15} {word_counts[word]:3}"")"
Create a python program to calculate the sum of odd numbers within a given range.,"total = 0
for i in range(1, 10):
    if i % 2 != 0:
        total += i
print(total)"
"Create a Python program that takes in a positive integer, then uses a while loop to output the numbers counting down to 1.","num = int(input(""Enter a positive integer: ""))

while num > 0:
    print(num)
    num -= 1

print(""Done!"")"
Write Python code to calculate the sum of all the items in a dictionary.,"def sum_dict_items(dictionary):
    total = 0
    for key, value in dictionary.items():
        total = total + value
        return total"
Generate a Python function to return the index of a given item in a list.,"def findIndex(lst, item):
 for i, v in enumerate(lst):
 if v == item:
 return i
 return -1

findIndex(lst, 4) // 3"
Optimize this Python program for better efficiency.,"def add_two_lists(l1, l2):
    return [x + y for x, y in zip(l1, l2)]"
Create a Python code to generate a random string of length 8 made of uppercase letters and numbers.,"import string
import random

length = 8
chars = string.ascii_uppercase + string.digits
password = ''.join(random.choice(chars) for i in range(length))

print (password)"
Write a python function to convert octal number to decimal number.,"def octal_To_Decimal(n):  
    num = n; 
    dec_value = 0; 
    base = 1; 
    temp = num; 
    while (temp): 
        last_digit = temp % 10; 
        temp = int(temp / 10); 
        dec_value += last_digit*base; 
        base = base * 8; 
    return dec_value; "
Write a python class to represent a Person. The Person class will have name and age properties as well as a method that prints the name and age.,"class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
    
    def print_person(self):
        print('Name:', self.name, ', Age:', self.age)"
Write a Python program to find the numbers between 2000 and 3000 which are divisible by 7 and not a multiple of 5.,"numbers = []

for i in range(2000, 3001):
	if (i%7 == 0) and (i%5 != 0):
		numbers.append(str(i))

print (','.join(numbers))"
Create a python program that modifies a given string to remove all spaces.,"def remove_spaces(my_string):
    return my_string.replace(' ', '')

#test
my_string = ""This is a string with spaces""
no_spaces_string = remove_spaces(my_string)
print(no_spaces_string) # Output: Thisisastringwithspaces"
Convert a given list of numbers into a Python dictionary using a for loop.,"list_of_nums = [1, 2, 3, 4, 5]

dictionary = {}
for num in list_of_nums:
 dictionary[num] = num

print(dictionary)

# Output {1: 1, 2: 2, 3: 3, 4: 4, 5: 5}"
Construct a Python program that takes a string as input and creates a new string with the first character of each word in the given string,"def first_letter_string(input_str):
    output_str = """"

    for w in input_str.split():
        output_str += w[0]

    return output_str

input_str = ""This is a sample string""
print(first_letter_string(input_str))"
Create a Python program to detect and print the number of vowels in a given string.,"def number_of_vowels(s):
    count = 0
    for char in s:
        if char in 'aeiouAEIOU':
            count += 1
    return count

s = 'Hi everyone'
print('The number of vowels in the given string is :', number_of_vowels(s))"
Create a Python program to calculate the electric bill for a customer based on kilowatt hour of electricity used.,"def calculate_electric_bill(kw_usage):
  rate = 0.15
  bill = kw_usage * rate
  return bill

x = 500
bill = calculate_electric_bill(x)
print(""Your bill is:"", str(bill))"
"Build a Python program which creates a directory, switches to it and creates two child directories within it.","import os

# Create the root directory
os.mkdir(""root"")

# Switch to the root directory
os.chdir(""root"")

# Create two child directories
os.mkdir(""child_dir_1"")
os.mkdir(""child_dir_2"")"
Generate a code snippet in Python that validates whether a number is within a given range or not.,"def number_in_range(num, start, end):
  if num >= start and num <= end:
    return True
  else:
    return False"
Optimize the following Python code to be as efficient as possible.,"def fun(N):
 result = (N*(N+1))/2
 result *= (2 * N + 1)
 result /= 3
 return int(result)"
Write a python function to check whether the last element of given array is even or odd after performing an operation p times.,"def check_last (arr,n,p): 
    _sum = 0
    for i in range(n): 
        _sum = _sum + arr[i] 
    if p == 1: 
        if _sum % 2 == 0: 
            return ""ODD""
        else: 
            return ""EVEN""
    return ""EVEN""
      "
Compute the sum of a list of numbers using a for loop in Python.,"total = 0

nums = [1, 2, 3, 4]

for num in nums:
    total += num

print(total)"
"Create a function in Python that takes a given number, removes all its digits and returns an integer.","def removeDigits(x):
    str_x = str(x)
    without_digits = int("""".join([i for i in str_x if not i.isdigit()]))
    return without_digits

x = 356
print(removeDigits(x))"
Create a Python code snippet to print the number of elements in an array,"arr = [1, 2, 3, 4]

print(len(arr))"
Write a Python function to calculate the sum of a list of numbers after transforming them using a given function.,"def transform_sum(numbers, transform_function):
 transformed_numbers = [transform_function(x) for x in numbers]
 return sum(transformed_numbers)"
Create a web scrapper in Python that extracts the number of subscribers from a YouTube Channel.,"import requests
from bs4 import BeautifulSoup

url = 'https://www.youtube.com/user/mahalo'
page = requests.get(url)
soup = BeautifulSoup(page.content, 'html.parser')
subs = soup.find(id='subscriber-count').text

subscribers = int(subs.replace(',', '').split(' ')[0])
print('Number of subscribers: ', subscribers)"
Write a python function to check whether the given number is even or not using bitwise operator.,"def is_Even(n) : 
    if (n^1 == n+1) :
        return True; 
    else :
        return False; "
Develop a Python program to perform this operation.,"def sum_digits(n):
    sum = 0
    while n > 0:
        sum += n % 10
        n = n // 10
    return sum

result = sum_digits(323)
print(result)"
Write a function in Python to delete duplicates from a list.,"def remove_duplicates(lst): 
	return list(set(lst)) 
remove_duplicates([1,1,3,4,4,5])"
Develop a Python algorithm to detect an anagram in a given sentence.,"def isAnagram(sentence, anagram):  
    sentence = ''.join(sentence.split())
    anagram = ''.join(anagram.split())

    if(sorted(sentence) == sorted(anagram)): 
        return True  
    else: 
        return False

if isAnagram(sentence, anagram): 
    print(""The given strings are anagrams!"")
else: 
    print(""The given strings are not anagrams."")"
Create a Python program to generate a bar chart of a given data set.,"import matplotlib.pyplot as plt

plt.bar(range(len(data_points)), data_points)
plt.title('Bar Chart')
plt.xlabel('index') 
plt.ylabel('value')
plt.show()"
Write a Python program to generate a list containing all permutations of the characters of a given string.,"from itertools import permutations

def generate_permutations(string):
    return list(permutations(string))

string = 'ABC'
print(generate_permutations(string))
# Output: [('A', 'B', 'C'), ('A', 'C', 'B'), ('B', 'A', 'C'), ('B', 'C', 'A'), ('C', 'A', 'B'), ('C', 'B', 'A')]"
Write a Python program that takes a list of numbers as input and returns a list of all numbers in the original list which are divisible by 7.,"def divisible_by_seven(numbers): 
    return [number for number in numbers if number % 7 == 0]

numbers = [14, 21, 49, 28, 35, 56, 16]
print(divisible_by_seven(numbers))

# Output  [14, 21, 28, 56]"
Write a function in Python for displaying the current system time.,"import time

def show_time():
    print(time.strftime('%H:%M:%S'))

show_time()"
"Write a Python program that takes in an email address, checks it is valid and then prints the domain.","import re 
  
def validate_email(email): 
  
    regex = '^[a-z0-9]+[\._]?[a-z0-9]+[@]\w+[.]\w{2,3}$'
  
    if(re.search(regex,email)):  
        domain = email.split('@')[1] 
        print(""Domain name:"", domain)      
    else:  
        print(""Invalid Email"")  
  
  
email = ""test@example.com""
validate_email(email)"
Write a Python program to create a directory named 'myDir'.,"import os
if not os.path.exists('myDir'):
    os.mkdir('myDir')"
Design an algorithm in Python that checks if a string is a palindrome.,"def isPalindrome(string): 
    l = """".join(re.findall(""[a-zA-z]+"", string)).lower() 
    return l == l[::-1]"
Generate a Python code to find all substrings in a given string.,"def find_all_substrings(string):
    substrings = []
    for i in range(len(string)):
        for j in range(i + 1, len(string) + 1):
            substrings.append(string[i:j])
    return substrings"
Generate a Python function to return the index of a given number in a sorted list.,"def index_of(number, lst): 
    hi = len(lst) 
    lo = 0
    index = -1

    while hi > lo: 
        mid = (hi + lo)//2
        if lst[mid] < number: 
            lo = mid + 1
        elif lst[mid] > number: 
            hi = mid 
        else: 
            index = mid 
            return index 
    return index"
Write a Python program to create a class for handling web requests that returns a response in the UTF-8 encoding.,"import requests

class RequestHandler:
 def __init__(self):
 self.session = requests.Session()
 
 def get(self, url):
 response = self.session.get(url)
 response.encoding = 'utf-8'
 return response
 
 def post(self, url, data):
 response = self.session.post(url, data=data)
 response.encoding = 'utf-8'
 return response"
Create a Python program to print out the first 20 terms of the Fibonacci sequence.,"def PrintFibonacci(n):
 a = 0
 b = 1
 for _ in range(n):
 c = a + b 
 print(c, end = "" "")
 a = b 
 b = c 

PrintFibonacci(20)"
Write a class that implements the singleton pattern in Python.,"class Singleton:
    instance = None

    @staticmethod
    def get_instance():
        if Singleton.instance is None:
            Singleton.instance = Singleton()
        return Singleton.instance"
Write a function to reflect the run-length encoding from a list.,"from itertools import groupby
def encode_list(list1):
    return [[len(list(group)), key] for key, group in groupby(list1)]"
Generate the code to combine 2 strings in Python.,"def combine_strings(str1, str2):
    return str1 + str2"
Create a Python program to calculate the sum of series 1 + ½ + ⅓ + ... + 1/n.,"def seriesSum(n):
    # set the initial sum to 0
    total = 0

    # loop over the range
    for i in range(1, n+1):
        total += 1 / i

    return total

print(seriesSum(5))"
Come up with a code in Python to find the union of two lists.,"list1 = [1, 2, 3, 4, 5]
list2 = [3, 4, 5, 6, 7]

def unionList(list1, list2):
    return set(list1 + list2)

result = unionList(list1, list2)
print(result)"
"Create a program in your language of choice to classify the following two items:

Apple
Orange","# Python

items = ['apple', 'orange']
classes = ['fruit', 'vegetable']

for item in items:
 if item == 'apple':
  print(f'{item} is a {classes[0]}')
 elif item == 'orange':
  print(f'{item} is a {classes[1]}')"
Improve the following code by simplifying it using Python's built-in functions.,"def add_two_nums(a, b):
 return a * b"
Write a function in Python that takes in a size n and returns the n-th prime number.,"def nth_prime_number(n):
    prime_numbers = [2]
    i = 3
    while len(prime_numbers) < n:
        for number in prime_numbers:
            if i % number == 0:
                break
        else:
            prime_numbers.append(i)
        i+= 2
    return prime_numbers[-1]


# test 
prime_number = nth_prime_number(5)
print(prime_number) # Output: 11"
Implement a linear search using Python.,"def linearSearch(arr, x): 
    for i in range(len(arr)): 
  
        if arr[i] == x: 
            return i 
  
    return -1
  
arr = [1, 2, 3, 4, 5] 
x = 4
  
result = linearSearch(arr, x) 
if result == -1:
    print('There is no element with value {}'.format(x))
else:
    print(""The element {} is found at index {}"".format(x, result))"
Write a function in Python to compute the mean of a list of numbers.,"def compute_mean(nums):
    sum = 0
    for num in nums:
        sum += num
    return sum/len(nums)

a = [1, 3, 4, 8, 5]
print(""Mean ="", compute_mean(a)) # Output: Mean = 4.4"
Generate a python function that takes an array and returns its maximum element.,"def maxElement(arr): 
    max = arr[0] 
    for i in arr: 
        if i > max: 
            max = i 
    return max 
 
arr = [5, 25, 10, 9]
out = maxElement(arr) 
print(out)"
Develop a Python script to generate an array of given size filled with random numbers.,"import random

def arr_of_random_numbers(size):
    arr = []
    for i in range(size):
        arr.append(random.randint(1, 100))
    return arr

size = 10
arr = arr_of_random_numbers(size)
print(arr)"
Write a Python script for splitting a given string into a list of words.,"sentence_words = my_sentence.split("" "")
print(sentence_words)"
Produce an algorithm in Python to calculate the total area of a polygon given its side lengths?,"def polygon_area(sides):
	x = sum(sides) / 2
	n = len(sides)
	
	area = (x * (x-sides[0]) * (x-sides[1]) * (x-sides[2]) * ... * (x-sides[n-1])) ** 0.5
	
	return area

total_area = polygon_area([2, 3, 4, 5, 6])
print(total_area)"
Write a Python program to sort a list of dictionaries using a custom key.,"sorted_list = sorted(lst, key = lambda x: x['name'])
print(sorted_list)"
Construct a Python script to search a text for a given string and returns the number of iterations found.,"def search_string(string, search):
    count = 0 
    for i in range(len(string)):
        if string[i] == search:
            count += 1
    return count

searched_string = search_string(""Hello World!"", ""l"") 
print(searched_string)"
Develop a function in Python to filter out invalid emails from a given list of emails.,"def filter_invalid_emails(email_list):
    valid_emails = []
    for email in email_list:
        if '@' in email and '.' in email:
            valid_emails.append(email)
    return valid_emails"
Generate an optimized Python data structure for sorting a large list of numbers.,"def optimized_sort(numbers):
    # Create a heap
    heap = []

    # Insert each element into the heap
    for num in numbers:
        heapq.heappush(heap, num)

    # Pop elements from the heap and append to result list
    sorted_nums = []
    while heap:
        sorted_nums.append(heapq.heappop(heap))

    return sorted_nums"
Write a code to perform Principal Component Analysis (PCA) in Python.,"from sklearn.decomposition import PCA

# create PCA object
pca = PCA(n_components=None)

# fit the object with the data
pca.fit(data)

# transform the data into lower dimension
pca_data = pca.transform(data)

# variance of each PC
pca.explained_variance_ratio_"
You need to write a program in Python that takes a string and replaces all the vowels in it with underscores.,"def replace_vowels(str):
    result = """"
    for c in str:
        if c.lower() in ['a', 'e', 'i', 'o', 'u']:
            result += '_'
        else:
            result += c
    return result

result = replace_vowels(""Hello World"")
print(result)"
Write a python function to remove first and last occurrence of a given character from the string.,"def remove_Occ(s,ch): 
    for i in range(len(s)): 
        if (s[i] == ch): 
            s = s[0 : i] + s[i + 1:] 
            break
    for i in range(len(s) - 1,-1,-1):  
        if (s[i] == ch): 
            s = s[0 : i] + s[i + 1:] 
            break
    return s "
Develop a model in Python to forecast a time series.,"from pylab import *

from statsmodels.tsa.arima_model import ARIMA

# create a dataset
data = [12, 15, 8, 7, 8, 10, 13, 6, 11, 10, 13]

# fit model
model = ARIMA(data, order=(1, 1, 0))
model_fit = model.fit(disp=0)
# print summary of fit model
print(model_fit.summary())
# make prediction
yhat = model_fit.predict(len(data), len(data))
print('Prediction: %f' % yhat)"
Write a Python program to read a list of numbers and return the sum of elements in the list.,"def sum_list(nums):
    if not nums: 
        return 0
    return nums[0] + sum_list(nums[1:])

sum_list([1,2,3,4,5]) # 15"
Generate a python function that takes in a string and replaces certain characters,"def replaceChar(s, charToReplace, replacementChar): 
    newStr = """"
    for char in s:
        if char == charToReplace:
            newStr += replacementChar
        else: 
            newStr += char
    return newStr

print(replaceChar(""hello world"", ""l"", ""a"")) # Output: ""heaaao worad"""
Create a Python script which takes in a sentence and prints the 2nd and 5th words.,"sentence = ""The quick brown fox jumped over the lazy dog"" 
words = sentence.split(' ') 
  
# 2nd and 5th words 
print(words[1] + "" "" + words[4])"
"Generate a Python class to store a student’s information including their name, age, and phone number.","class Student:
    def __init__(self, name, age, phone_number):
        self.name = name
        self.age = age
        self.phone_number = phone_number"
Create a basic Python program to generate a string of unique random characters.,"import random
import string

def generateRandomString(length):
 characters = string.ascii_lowercase + string.ascii_uppercase + string.digits

 return ''.join(random.choice(characters) for _ in range(length))

print(generateRandomString(10))"
Create a Python program to retrieve real time data from a web API.,"import requests
 
# Make a get request to get the latest position of the International Space Station
response = requests.get(""http://api.open-notify.org/iss-now.json"")
 
# Print the status code of the response
print(response.status_code)"
Create a Python program to find the highest common factor of two given numbers.,"def hcf(x, y):
  if x > y:
    smaller = y
  else:
    smaller = x
  for i in range(1, smaller+1):
    if((x % i == 0) and (y % i == 0)):
      hcf = i
  return hcf

num1 = int(input(""Enter first number: ""))
num2 = int(input(""Enter second number: ""))

print(""The Highest Common Factor is"", hcf(num1, num2))"
Create a Python list comprehension that generates a list of all even numbers between 10 and 30.,"even_nums = [x for x in range(10, 30) if x%2 == 0]"
Write a Python program to take a list of numbers and reverse the order of the elements in the list in place.,"def reverse_list(numbers):
 # get the length of the list
 n = len(numbers)

 # loop through the list
 for i in range(n // 2):
 # swap the elements
 numbers[i], numbers[n - i - 1] = numbers[n - i - 1], numbers[i]

numbers = [1, 2, 3, 4, 5]
reverse_list(numbers)
print(numbers) # [5, 4, 3, 2, 1]"
Write Python code to count the number of nodes in a BST.,"def countNodes(root): 
    if root is None: 
        return 0
    
    return (1 + countNodes(root.left) + 
            countNodes(root.right))"
Implement a basic algorithm in Python to calculate the nth Fibonacci number.,"def fibonacci(n):
 if n == 0:
 return 0
 elif n == 1:
 return 1
 else:
 return fibonacci(n - 1) + fibonacci(n - 2)
 
print(fibonacci(6)) // 8"
Create a program in Python to grade an essay.,"def grade_essay(essay):
 score = 0
 # Score based on content
 # Score based on grammar
 # Score based on spelling
 # Score based on punctuation
 # Score based on style
 
 # Final score should be in range of 0-10
 if score < 0:
    score = 0
 elif score > 10:
    score = 10
 
 return score"
Build a Python script to optimize a given linear equation by minimizing the cost.,"import numpy as np
from scipy.optimize import minimize

def cost_function(X): 
    x = X[0]
    y = X[1]
    return x + 2*y - 4

X = minimize(cost_function, [0, 0])

x_opt = X.x[0]
y_opt = X.x[1]

# the optimal solution is x = 2, y = 1"
Generate an array of random numbers in Python.,"import numpy as np

size = 10
random_array = np.random.randint(0, 100, size)
print(random_array)"
Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).,"def sum_series(n):
  if n < 1:
    return 0
  else:
    return n + sum_series(n - 2)"
"Create a class in Python to store employee information such as name, address, age and salary.","class Employee:

    def __init__(self, name, address, age, salary):
        self.name = name
        self.address = address
        self.age = age
        self.salary = salary
    
    def get_info(self):
        return self.name, self.address, self.age, self.salary"
Write a Python program to encode an integer into a base64 string.,"import base64

def encode_base64(num):
    return base64.b64encode(num.to_bytes(
        (num.bit_length() + 7) // 8, 'big'))"
Identify the programming language embedded in the following code snippet,Python
Create a Python code that generates a combination of elements from a given array.,"def combinations(arr, n):
    for i in range(len(arr)):
        for j in range(i + 1, len(arr)):
            print(arr[i], arr[j])
combinations(arr, n)"
Create a bash script which runs a Python program called “script.py” and prints out its output.,"#!/bin/bash

python script.py
echo $?"
Create a Python program to list all the integers between a given range input.,"def list_integers(start, end):
    integers_list=[]
    while (start <= end):
        integers_list.append(start)
        start = start + 1
    return integers_list
  
print(""The list of integers in the given range is:"")
result = list_integers(3,10)
print(result)"
Create a program in any programming language that takes two input arguments and prints the larger number.,"# Python program
def main(num1, num2):
 if num1 > num2:
  print(num1)
 else:
  print(num2)

if __name__ == ""__main__"":
 num1 = int(input())
 num2 = int(input())
 main(num1, num2)"
"Create a Python function clamp that takes a number, a lower bound and an upper bound and clamps the value between the two bounds.","def clamp(number, lower, upper):
    if number < lower:
        return lower
    elif number > upper:
        return upper
    else:
        return number"
Create a function in Python for evaluating a given polynomial expression.,"def evaluate_polynomial(expression):
  expression = expression.strip()
  tokens  = expression.split(""+"")
  result = 0
  for term in tokens:
    term = term.strip()
    coefficient, exponent = term.split(""x"")
    result += float(coefficient) * float(expoent)

  return result"
Generate a for-loop in Python that prints out the numbers from 1 to 10,"for i in range(1, 11):
    print(i)"
Design a function in Python that takes a string and a number and removes the characters at the specified positions from that string.,"def remove_chars_at_indices(str, indices):
    new_str = """"
    for i in range(len(str)):
        if i not in indices:
            new_str += str[i]
    return new_str

str = ""Hello World!""
index = [0, 5, 9]
result = remove_chars_at_indices(str, index)
print(result)"
Write a Python program to create a list containing all the prime numbers from 0 to 100.,"primes = [2]
for number in range(3,101):
	is_prime = True
	for element in primes:
		if number % element == 0:
			is_prime = False
	if is_prime:
		primes.append(number)
print(primes)"
Create a Python function that takes two strings and checks if the second string is a substring of the first.,"def check_substring(string1, string2):
    if string2 in string1:
        return True
    else:
        return False

# example
result = check_substring(""Hello world!"", ""world"")
print(result)"
Create a Python function which will take a list of numbers as input and return a list but with each value doubled.,"def double_list(lst):
    new_list = []
    for num in lst:
        new_list.append(num * 2)
    return new_list

my_list = [1, 2, 3, 4, 5]

double_list(my_list) #[2, 4, 6, 8, 10]"
Optimize a python program that prints out all the even numbers in a list using list comprehension.,"even_numbers = [x for x in numbers if x % 2 == 0]

print(even_numbers)"
Generate a Python program that uses a recursive function to reverse a given string combining with loops and conditionals.,"def reverseString(s): 
    if len(s) == 0: 
        return s 
    else: 
        return reverseString(s[1:]) + s[0] 
  
# Driver code 
s = ""thequickbrownfox""
  
print (""The original string  is : "",end="""") 
print (s) 
  
print (""The reversed string(using recursion) is : "",end="""") 
print (reverseString(s))"
Generate a Python program which takes a list of numbers and returns only the even numbers,"def get_even_numbers(list_of_numbers):
    even_nums = []
    for num in list_of_numbers:
        if num % 2 == 0:
            even_nums.append(num)
    return even_nums

list_of_nums = [1, 2, 3, 4, 5, 6]
result = get_even_numbers(list_of_nums)
print(result)"
Create an algorithm in Python 3 to identify the characters in a given string.,"def identify_characters(s): 
    characters = []
        
    for char in s:
        if char not in characters:
            characters.append(char)
        
    return characters
 
print(identify_characters('Abe erotically jitters')) #['A', 'b', 'e', ' ', 'r', 'o', 't', 'i', 'c', 'a', 'l', 'y', 'j', 'i', 't', 's']"
"Write a Python script that takes a list of strings as an input and creates a dictionary containing the unique letters in each string, and their respective counts.","char_dict = {}

for string in string_list:
 for char in string:
 if char in char_dict:
 char_dict[char] += 1
 else:
 char_dict[char] = 1

print(char_dict)

# Output:
# {'a': 3, 'p': 2, 'l': 1, 'e': 1, 'b': 1, 'n': 2, 'c': 1, 'r': 2, 'o': 1, 't': 1}"
"Create a Python code snippet to separate colored objects into two groups, one for red and the other for blue.","def separate_objects(objects):
    red_group = []
    blue_group = []
    for obj in objects:
        if obj.color == 'red':
            red_group.append(obj)
        else:
            blue_group.append(obj)
    return (red_group, blue_group)"
Write a python function to find the minimum number of swaps required to convert one binary string to another.,"def min_Swaps(str1,str2) : 
    count = 0
    for i in range(len(str1)) : 
        if str1[i] != str2[i] : 
            count += 1
    if count % 2 == 0 : 
        return (count // 2) 
    else : 
        return (""Not Possible"") "
Write a Python program to join two given lists with a specific separator.,"list_1 = [""Hello"", ""World""]
list_2 = [""Python"", ""Programming""]
separator = "",""

result = separator.join(list_1 + list_2)
print(result)"
Create a basic machine learning program in Python that uses a Support Vector Machine (SVM) to classify a given dataset.,"import pandas as pd
from sklearn import datasets
from sklearn import svm

data = pd.read_csv('data.csv')

# Load data
X = data.drop('target', axis=1)
y = data['target']

# Train the model
clf = svm.SVC()
clf.fit(X, y)

# Test the model
y_pred = clf.predict(X)

# Evaluate accuracy
accuracy = metrics.accuracy_score(y, y_pred)
print('Accuracy:', accuracy)"
How would you check if a string ends with a given substring in Python?,"if InputString.endswith(Substring):
    print('The input string ends with the given substring.')
else:
    print('The input string does not end with the given substring.')"
"Implement a Python class with the name Contact. This class should contain three public properties - name, email, and phone.","class Contact:
    def __init__(self, name, email, phone):
        self.name = name
        self.email = email
        self.phone = phone"
Create a unique list of items from a given list in Python.,"# Unique list
unq_list = list(set(given_list))

#Print unique list
print(unq_list)"
Analyse the sentiment of the given sentence using python.,"from textblob import TextBlob

# Get the sentiment of the sentence
sentence = 'I am so excited that I was chosen for the job.'
blob = TextBlob(sentence)
sentiment = blob.sentiment
print('Polarity:', sentiment.polarity)  # Output: Polarity: 0.8"
Implement an algorithm to determine if a number is prime in Python.,"def is_prime(num):
    if num < 2:
        return False

    for i in range(2, num):
      if num % i == 0:
          return False

    return True"
Provide a valid Python class definition that uses the below given values.,"class Automobile:
    def __init__(self, speed, color):
        self.speed = speed
        self.color = color

    def set_speed(self, speed):
        self.speed = speed
    
    def set_color(self, color):
        self.color = color"
Create a Text-to-Speech Python application to read out a simple sentence.,"import pyttsx3

def text_to_speech(sentence):
    engine = pyttsx3.init()
    engine.say(sentence)
    engine.runAndWait()
    
text_to_speech(""Hello, this is a simple sentence"")"
Describe how to create a web service for a database.,"A web service for a database can be created by writing an application layer that accepts requests from a client, queries the database, and returns the results back to the client. The application layer can be written using a language that is supported by the database's driver, such as Java or Python. The application layer should also handle security, user authentication, and access control."
Create a function in Python that takes in two dates and returns the number of days between them.,"def compute_days_between_dates(date1, date2):
    today_datetime = datetime.datetime.strptime(date1, '%Y/%m/%d')
    tomorrow_datetime = datetime.datetime.strptime(date2, '%Y/%m/%d')
    return (tomorrow_datetime-today_datetime).days

print(compute_days_between_dates(""2020/05/20"", ""2020/05/21""))"
Write a Python program to check if a given list of strings consists only of unique elements.,"def check_unique_list(my_list):
    unique_list =[]
    for i in my_list:
        if i not in unique_list:
            unique_list.append(i)
    if len(unique_list) == len(my_list):
        return True
    else:
        return False"
Create a data structure in Python to store details of an employee.,"# Define the Employee class
class Employee:
    def __init__(self, name, email, id, salary):
        self.name = name 
        self.email = email
        self.id = id
        self.salary = salary
# Create an empty dictionary to store employee details
employee_details = {}"
Write a Python program to calculate the total number of characters in a given string.,"def total_characters(string):
    count = 0
    for char in string:
        count += 1
    return count"
Create a class called Student in Python with appropriate attributes and methods.,"class Student: 
    def __init__(self, name, age, gender): 
        self.name = name 
        self.age = age
        self.gender = gender
  
    def getName(self): 
        return self.name 
  
    def getAge(self): 
        return self.age
      
    def getGender(self): 
        return self.gender"
"Write a Python program to print out the numbers from 1 to 20, one number per line.","for i in range(1, 21):
    print(i)"
Develop a Python function for calculating the sum of two numbers.,"def sum_of_numbers(num1, num2):
    return num1 + num2"
Create a Python 2 program to print the following pattern.,"for i in range(1, 11):
    for j in range(1, i+1):
        print(i+(j-1)*i, end="" "")
    print()"
Generate a function to calculate the Fibonacci series in Python.,"def fibonacci(n): 
    a = 0
    b = 1
    if n < 0: 
        print(""Incorrect input"") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2,n): 
            c = a + b 
            a = b 
            b = c 
        return b"
Write a Python program to simulate a coin flip. The program should randomly pick between heads or tails and output the result.,"import random

def coin_flip():
  # Get a random number between 0 and 1
  coin = random.randint(0, 1)

  # if the number is 0, outcome is heads
  if coin == 0:
    return ""Heads""

  # if the number is 1, outcome is tails
  else:
    return ""Tails""

print(coin_flip())"
Write a Python program to remove all duplicates from a list.,"def remove_dups(lst):
  return list(dict.fromkeys(lst))"
Write a function to group a sequence of key-value pairs into a dictionary of lists.,"def group_keyvalue(l):
    result = {}
    for k, v in l:
         result.setdefault(k, []).append(v)
    return result"
Generate a python program to create a matrix of n rows and m columns.,"def create_matrix(n, m):
    matrix = [[0 for _ in range(m)] for _ in range(n)]
    return matrix"
Create a program in Python to play a simple guessing game.,"import random 
  
# randomly 
number = random.randint(1, 20) 
print(""I am thinking of a number between 1 and"
Edit the Python code to print the sum of two given numbers.,"a = 1 
b = 2
sum = a + b 
print(sum) # 3"
Generate Python code for finding the minimum of two given numbers.,"def min_num(x, y):
  if x < y:
    return x
  else:
    return y

print(min_num(5, 10))

# Output
5"
"Write a function to count alphabets,digits and special charactes in a given string.","def count_alpha_dig_spl(string):
  alphabets=digits = special = 0
  for i in range(len(string)):
    if(string[i].isalpha()):
        alphabets = alphabets + 1
    elif(string[i].isdigit()):
        digits = digits + 1
    else:
        special = special + 1
  return (alphabets,digits,special)   "
"Create a class in Python containing attributes, methods and constructors","class MyClass:
    def __init__(self, attr1, attr2):
        self.attr1 = attr1
        self.attr2 = attr2
    
    def my_method(self):
        # Do something
        pass"
Create a virtual environment for Python using pipenv in the current directory.,pipenv --three
Write a Python program to create a dictionary with numbers from 0 to 4 as keys and corresponding values as given below.,"d = {0:1, 1:2, 2:3, 3:4, 4:4}"
"Write a Python program to create a dictionary from two lists. Make the dictionary keys from the first list, and the value from the second list.","dictionary = { ""Tractors"": 100, ""Cars"": 50 }"
"Given the input, create a Python program which prints out all the words inside the input in alphabetical order.","def print_words_in_order(string):
    """"""Print out all the words in the input in alphabetical order""""""
    words = string.split()
    words.sort()
    for word in words:
        print(word)"
Generate a Python regular expression that can identify valid email addresses.,^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$
Write a code that calculates the Euclidean distance between two given points.,"# Python
def euclidean_distance(point1, point2):
  x1, y1 = point1
  x2, y2 = point2
  return ((x2-x1)**2 + (y2-y1)**2)**0.5

# JavaScript
function euclideanDistance(point1, point2) {
  let [x1, y1] = point1;
  let [x2, y2] = point2;
  return Math.sqrt((x2 - x1)**2 + (y2 - y1)**2);
}"
Write a Python program to generate a random array of numbers,"import random

def generate_random_array(size):
    return random.sample(range(100), size)"
Design a data structure in Python to store a sequence of integers that supports deleting the median of the sequence in O(n) time.,"class MedianSequence:
    def __init__(self):
        self.nums = []
        
    def __len__(self):
        return len(self.nums)
        
    def add(self, num):
        self.nums.append(num)
        self.nums.sort()
        
    def remove_median(self):
        mid = len(self.nums) // 2
        self.nums.pop(mid)"
Generate a Python program to calculate the minimum cost of a given shopping cart.,"def minimum_cost(cart): 
    min_cost = 0
    for item, cost in cart.items():
        min_cost += int(cost) 
    return min_cost

print(minimum_cost(cartItems))"
Write a Python program to generate a 3x4 matrix containing random numbers.,"import random

def generate_random_matrix():
    matrix = [[random.randint(1, 10) for col in range(4)] for row in range(3)]
    return matrix"
Create a loop in Python that prints the numbers from 5 to 10 in sequence.,"for i in range(5, 11):
    print(i)"
Create a python class that implements a stack.,"class Stack:
    
    def __init__(self):
        self.items = []
    def push(self, item):
        self.items.append(item)
    def pop(self):
        return self.items.pop()
    def isEmpty(self):
        return self.items == []
    def peek(self):
        return self.items[len(self.items)-1]
    def size(self):
        return len(self.items)"
"Create a Python generator to iterate over the strings in the list ['cat', 'dog', 'bird'].","def string_generator(strings):
  for string in strings:
    yield string

for string in string_generator(['cat', 'dog', 'bird']):
  print(string)"
Generate a random 3 x 3 matrix with integer values in Python.,"import random 
  
def random_matrix(rows, cols): 
      
    # creating a 2d array/list  
    matrix = [[random.randint(0, 9) for i in range(cols)] for j in range(rows)] 
  
    return(matrix) 
  
# taking inputs for number of rows and cols 
rows = 3
cols = 3
print(random_matrix(rows, cols))"
Write a python function to choose points from two ranges such that no point lies in both the ranges.,"def find_Points(l1,r1,l2,r2): 
    x = min(l1,l2) if (l1 != l2) else -1
    y = max(r1,r2) if (r1 != r2) else -1
    return (x,y)"
"Create a function in Python that prints the sentence ""Hello, World!"" n times.","def print_hello_world(n): 
    for i in range(n):
        print(""Hello, World!"")

print_hello_world(3)
# Output:
Hello, World!
Hello, World!
Hello, World!"
Write a Python program that prints all prime numbers between two given numbers.,"for num in range(2, 20):
    if num > 1: 
        for i in range(2, num): 
            if (num % i) == 0: 
                break
        else: 
            print(num)"
Create a function in Python that takes an integer and prints all its factors.,"def find_factors(num):
  factors = []
  for i in range(2, num):
    if (num % i == 0):
      factors.append(i)
  print(f""Factors of {num}: {factors}"")

find_factors(60)"
Generate a Python program to perform a linear search of an array.,"def linear_search(arr, x): 
    for i in range(len(arr)): 
        if arr[i] == x: 
            return i 
    return -1"
Write a python program to retrieve the value at a given index of a list.,"def getValueAtIndex(my_list, index):
    return my_list[index]

result = getValueAtIndex([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) 
print(result)"
Write a Python program to generate a randomly sized array with random numbers between 0 and 1000.,"import random

n = random.randint(1, 10)
array = [random.randint(0, 1000) for i in range(n)]
print(array)"
Create a dictionary in Python containing the following key-value pairs:,"my_dict = {""name"":""John"", ""age"":30, ""occupation"":""teacher""}"
Create a Python program to convert HTML to plain text without using any libraries.,"def html_to_text(html_string):
    output = ''
    in_tag = False
    for char in html_string:
        if char == '<':
            in_tag = True
        elif char == '>':
            in_tag = False
        elif in_tag == False:
            output += char
    return output"
Use the Python snippet below to create a Lambda function that returns the sum of two given numbers.,"def sum_numbers(event, context):
 num1 = event['num1']
 num2 = event['num2']
 result = num1 + num2
 return {
 'statusCode': 200,
 'body': result
 }"
Create a function in Python to normalize a vector.,"def normalize(vector):
    norm = np.linalg.norm(vector)
    normalized = []
    for i in vector:
        normalized.append(i/norm)
    return normalized

vector = [1, 5, 2, 8, 9, 4]

normalized_vector = normalize(vector)
print(normalized_vector) # [0.10938925979875006, 0.5469462984987499, 0.21877851959750005, 0.8750559279949998, 1.0000000000000002, 0.43693269989949995]"
Generate a Python function to create an n-by-n matrix where the element at row i and column j is i*j,"def create_matrix(n): 
    matrix = [[i * j for j in range(n)] for i in range(n)]
    return matrix"
"Given an array of integers, write a Python function to find the index of the largest element in that array.","def find_largest_element_index(nums):
        largest = nums[0]
        largest_element_index = 0
        for i in range(0, len(nums)):
            if nums[i] > largest:
                largest = nums[i]
                largest_element_index = i
        return largest_element_index"
Develop a code to rate sentiments in a given text using Python.,"# sentiment_rating function takes in a string of text 
# and returns a sentiment score from -1 to 1
def sentiment_rating(text):
    # Create a sentiment analyzer object
    sentiment_analyzer = SentimentIntensityAnalyzer()
 
    # Calculate the sentiment score
    sentiment_score = sentiment_analyzer.polarity_scores(text)

    return sentiment_score['compound']"
Write a Python code to find the number of odd and even numbers in a given array.,"arr = [8, 5, 6, 3, 9]

odd = 0
even = 0

for num in arr: 
    if num % 2 == 0: 
        even += 1
    else: 
        odd += 1

print(""Number of odd numbers in the array: "", odd)
print(""Number of even numbers in the array: "", even)"
Generate an algorithm to calculate the sum of two numbers entered by the user using Python.,"def sum(n1, n2): 
 return n1 + n2

n1 = 5
n2 = 7
print(""Sum of {0} and {1} is {2}"".format(n1, n2, sum(n1, n2)))"
Rewrite a JavaScript code to an equivalent Python code.,"def is_odd_number(num):
    if num % 2 != 0:
        return True
    else:
        return False"
Create a Python program to randomly generate a mixture of two Gaussian distributions.,"import random 
import math

def random_mixture(mean1, mean2, stddev1, stddev2, N):
    data = []
    for _ in range(N):
        if random.random() < 0.5:
            data.append(random.normalvariate(mean1, stddev1))
        else:
            data.append(random.normalvariate(mean2, stddev2))
    return data"
Write a python function to get the difference between two lists.,"def Diff(li1,li2):
    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))
 "
Automate an online registration process with Python.,"import requests

# input
form_data = {
 'firstname': 'Jane', 
 'lastname': 'Doe', 
 'email': 'janedoe@example.com', 
 'phone': '123-456-7890'
}

# process
url = 'https://example.com/register'
response = requests.post(url, data=form_data)

# output
if response.status_code == 200:
 print('Registration was successful!')"
Update the Python function below so that it sorts the given list of numbers in ascending order.,"def sort_list(numbers):
    numbers.sort()
    return numbers

result = sort_list([2, 4, 5, 1, 3])
print(result)"
Develop a Python function that squares a given number.,"def square(number):
    return number * number"
Generate a Python code to print the symmetric differences between two sets.,"# Define sets
Set1 = {1, 3, 4, 8} 
Set2 = {2, 3, 5, 6}

# Compute the symmetric difference
difference = Set1.symmetric_difference(Set2) 
  
# Print the symmetric differences 
print(""The symmetric differences between the two sets :"", difference)"
Create a basic web scraper using Python to retrieve the content of a web page.,"import requests
from bs4 import BeautifulSoup

url = ""https://www.example.com""

page = requests.get(url)

soup = BeautifulSoup(page.text, 'html.parser')

content = soup.find_all('p')

print(content)"
Write a Python code which will print out the number of words in a string.,"def wordCount(str): 
    count = len(str.split()) 
    return count 

print(wordCount(""Example string"")) 

# Output: 2"
"Write a Python program to find the number of ways to express n as the sum of 1, 3, and 4.","def num_ways_sum(n):
    # base case
    if n == 0 or n == 1:
        return 1

    # recursive case
    return num_ways_sum(n - 1) + num_ways_sum(n - 3) + num_ways_sum(n - 4)

# example
print(num_ways_sum(5))"
Optimize an existing Python program for computing the reverse of a string.,"def reverse_string(string):
  return """".join(reversed(string))"
Write a python function to remove all digits from a list of strings.,"import re  
def remove(list): 
    pattern = '[0-9]'
    list = [re.sub(pattern, '', i) for i in list] 
    return list"
Implement a Python Visualization Library that plots 2D data points.,"import matplotlib.pyplot as plt

def plot_2d_data(data):
 x = [p[0] for p in data]
 y = [p[1] for p in data]
 plt.scatter(x, y)
 plt.title('2D Data Points')
 plt.show()

#Testing the visualization
data_points = [(1, 2), (3, 4), (5, 6), (7, 8)]
plot_2d_data(data_points)"
Create a sorting algorithm in Python that sorts a list of numbers from low to high.,"def bubble_sort(lst):
    for i in range(len(lst) - 1): 
        for j in range (0, len(lst) - i - 1): 
            if lst[j] > lst[j + 1] : 
                lst[j], lst[j + 1] = lst[j + 1], lst[j] 
    return lst

sorted_list = bubble_sort([10, 6, 8, 4])
print(sorted_list)"
Write a function in Python to return the top 3 most frequent words in a given string.,"from collections import Counter

def top_3_words(str):
  word_list = list(str.split())
  word_dict = Counter(word_list)
  sorted_words = sorted(word_dict.items(), key=lambda kv: kv[1], reverse=True)
  top_3 = sorted_words[:3]
  return [word for word, count in top_3]

top_3_words('This is a sample string')"
Edit the following Python code to calculate the average of three values given by the user.,"a = int(input(""Enter first value: ""))
b = int(input(""Enter second value: ""))
c = int(input(""Enter third value: ""))

average = (a + b + c) / 3
print(""The average is: "" + str(average))"
Create a Python script to generate all combinations of two integers in a list.,"def generate_combinations(list1):
    result = []
    for x in range(len(list1)): 
        for y in range(x + 1, len(list1)): 
            result.append((list1[x], list1[y])) 
    return result"
Create a python function to count the number of unique elements from a given list.,"def count_unique_elements(arr):
    unique_elements = set(arr)
    return len(unique_elements)
    
if __name__ == '__main__':
    arr = [1, 4, 2, 1, 5, 4, 3]
    print(count_unique_elements(arr))"
Create a Python class named `Car` with and instance variable `speed` and `direction`. Include a method that changes the car's direction.,"class Car:
    # Initializer for the car
    def __init__(self, speed, direction):
        self.speed = speed
        self.direction = direction

    # Change direction of the car
    def change_direction(self, direction):
        self.direction = direction"
Suggest a way to shuffle a python list of integers,"import random

def shuffle_list(lst):
    random.shuffle(lst)
    return lst

my_list = [1,2,3,4,5]
shuffled_list = shuffle_list(my_list)
print(shuffled_list)"
Create a Python program to rearrange the elements of an array in the maximum possible order,"arr = [1,2,3]

def rearrange(arr):
    i = 1
    while i < len(arr):
        key = arr[i]
        j = i - 1
        while j >= 0 and arr[j] < key:
            arr[j+1] = arr[j]
            j -= 1
        arr[j+1] = key
        i += 1
    return arr"
"Write a Python program to calculate the probability of getting ""heads"" in a given number of tosses of a fair coin.","def calc_prob(n):
    return (1/2)**n"
Create a Python function to remove all the elements in a list that are greater than a specified value.,"def remove_greater_than(arr, value):
    new_arr = []
    for item in arr:
        if item <= value:
            new_arr.append(item)
    return new_arr

result = remove_greater_than([1, 2, 3, 4, 5], 3)
print(result)"
Develop a Python program that takes an array of integers and returns the largest element.,"def find_max(arr):
    
    max_val = arr[0]
    
    for num in arr:
        if num > max_val:
            max_val = num
            
    return max_val

print(find_max([2, 4, 8, 9, 10]))"
Create a simple web page using HTML and CSS to display a list of the top 5 most popular programming languages.,"<!DOCTYPE html>
<html>
<head>
 <title>Top 5 Programming Languages</title>
 <style>
 ul {
 list-style: none;
 font-family: sans-serif;
 font-size: 20px;
 }
 li {
 padding-top: 10px;
 }
 </style>
</head>
<body>
 <h1>Top 5 Programming Languages</h1>
 <ul>
 <li>JavaScript</li>
 <li>Python</li>
 <li>Java</li>
 <li>C#</li>
 <li>C++</li>
 </ul>
</body>
</html>"
"Write a Python script with two arguments, a minimum value and a maximum value, to generate a randomly selected number between them.","import random

def generate_random_number(min_value, max_value):
    return random.randint(min_value, max_value)"
Develop a linear regression model in Python to predict housing prices.,"import numpy as np
from sklearn.linear_model import LinearRegression

# Create feature and target vector
X=np.array([num_bedrooms, size_sqft, num_bathrooms, age]).T
y=np.array([price]).T

# Create and train the model
model = LinearRegression().fit(X, y)

# Output the result
print('Coefficients:', model.coef_)
print('Intercept:', model.intercept_)"
Create a function in Python that solves the Fibonacci sequence.,"def fibonacci(n): 
    if n<0: 
        print(""Incorrect input"") 
    elif n==1: 
        return 0
    elif n==2: 
        return 1
    else: 
        return fibonacci(n-1)+fibonacci(n-2)"
Write a Python program to print out all the distinct elements of an array.,"def print_distinct(lst):
    seen = set()
    distinct = []
    for x in lst:
        if x not in seen:
            distinct.append(x)
            seen.add(x)
    print(distinct)"
Edit the following Python code to remove the syntax errors.,"print('Please enter a number:')
n = int(input())"
"Edit the existing Python code to forward declare a function called ""compute"" that takes two arguments, ""a"" and ""b"", and returns the result of ""a + b"".","def compute(a,b):
    return a + b

def func1():
    result = compute(2,3)
    print(result)"
Can you write a Python script to search an input string for a specific character and return its position in the string?,pos = string.find(search_char) # 2
"Write a Python function to classify a given animal as a mammal, bird, reptile, or fish.","def classify_animal(animal): 
 if animal == ""lion"": 
  return ""mammal"" 
 elif animal == ""eagle"": 
  return ""bird"" 
 elif animal == ""crocodile"": 
  return ""reptile"" 
 elif animal == ""salmon"": 
  return ""fish"" 
 else: 
  return ""unknown"""
Create a python function which sorts an array of integers into ascending order.,"def sort_int_asc(arr):
    arr.sort()
    return arr

print(sort_int_asc([3, 7, 8, 1, 5, 4]))"
Write a function to get a colon of a tuple.,"from copy import deepcopy
def colon_tuplex(tuplex,m,n):
  tuplex_colon = deepcopy(tuplex)
  tuplex_colon[m].append(n)
  return tuplex_colon"
Design a numerical algorithm in Python that takes an input set of numbers and returns the maximum of this set.,"def find_max(arr): 
  
  max_value = arr[0] 
  
  for i in range(1, len(arr)): 
      if arr[i]> max_value: 
          max_value = arr[i] 
          
  return max_value 
  
#Test Array 
arr = [8, 15, 7, 6, 16] 

#Function call 
maxvalue = find_max(arr) 

print(""Maximum value:"",maxvalue)"
Develop a Python script to generate an RSA public/private key pair.,"from Crypto.PublicKey import RSA

def generate_key_pair():
 key = RSA.generate(2048)
 pub_key = key.publickey().export_key().decode()
 with open('public.pem', 'w') as file:
  file.write(pub_key)
 
 priv_key = key.export_key().decode()
 with open('private.pem', 'w') as file:
  file.write(priv_key)

generate_key_pair()"
Create a Python program that takes a 3-word string and prints individual words in the same order on separate lines.,"sentence = ""Hooray! Great!""
words = sentence.split(' ')
for word in words:
 print(word)"
Generate a python method to solve the given system of linear equations.,"def solve_linear_eq(a,b,c,d):
    x = (b*d - c*a) / (b*d - c*a)
    y = (d*a - b*c) / (b*d - c*a)
    return x, y"
Create a Python program to accept two values from the user and calculate the greatest common divisor.,"# Function for calculating the 
# greatest common divisor
def gcd(a, b): 
    if (a == 0): 
        return b 
    return gcd(b%a, a) 

# Take input from the user 
val1 = int(input(""Enter the first value: "")) 
val2 = int(input(""Enter the second value: "")) 
  
# Calculate the gcd 
result = gcd(val1, val2) 
print(""The GCD of"",val1,""and"",val2,""is"",result)"
"Write a python program to generate a random password given a set of letters, numbers, and characters.","import random 
  
  
# All the possible characters 
# that could go into the password 
string = ""abcdefghijklmnopqrstuvwxyz01234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()?""
  
# Using the choice function of the 
# random module choose any 
# character randomly from the set of characters 
password =  """".join(random.sample(string, 8)) 
print(password)"
"Design a Python Program to calculate the harmonic mean of two numbers, given their product and sum.","def harmonic_mean(product, summation):
    # calculate denominator by subtracting sum from product
    denominator = product - summation
    # calculate harmonic mean by dividing sum by denominator 
    harmonic_mean = summation/denominator
    return harmonic_mean"
Construct a Python program that takes a number as an input and prints all its divisors.,"def find_divisors(num):
    divisors = []
    for i in range(2,num+1):
        if num % i == 0:
            divisors.append(i)
    return divisors

num = 48
divisors = find_divisors(num)
print(""The divisors of {} are: {}"".format(num, divisors))"
Create an algorithm to check if a sentence is a palindrome in Python.,"def is_sentence_palindrome(sentence):
    sentence = sentence.lower().replace("" "", """")
    return sentence == sentence[::-1]

is_sentence_palindrome(""Rise to vote, Sir"")  # False"
Create a method in Python to flatten a 2-Dimentional array.,"def flatten(arr):
  flat_list = []
  for sublist in arr:
    for item in sublist:
      flat_list.append(item)
  return flat_list

flatten(array)"
Write a function to find the previous palindrome of a specified number.,"def previous_palindrome(num):
    for x in range(num-1,0,-1):
        if str(x) == str(x)[::-1]:
            return x"
Edit the given Python program to handle a KeyError.,"my_dict = {
 'key1' : 'value1',
 'key2': 'value2'
 
}

try:
 value2 = my_dict['key3']
except KeyError:
 print(f""The key 'key3' does not exist in the dictionary."")"
Write code in Python that takes a given dictionary and returns the difference of the maximal and minimal values of the dictionary.,"def calculate_difference(input_dict):
    max_val = max(input_dict.values())
    min_val = min(input_dict.values())
    return max_val - min_val

input_dict = {'a': 5, 'b': -2, 'c': 3}
difference = calculate_difference(input_dict)
print(difference)"
Create a search algorithm using Python to find an item in a list of tuples.,"def search(arr, key): 
    for item in arr: 
        if item[0] == key: 
            return item[1] 
    return ""Not found""
  
# Driver code 
arr = [('a', 2), ('b', 4), ('c', 6), ('d', 7)] 
key = 'd'
  
print(search(arr, key))"
Write a function to add all the numbers in a list and divide it with the length of the list.,"def sum_num(numbers):
    total = 0
    for x in numbers:
        total += x
    return total/len(numbers) "
Write a Python program to sort a list of dictionaries by a given key,"def sort_dicts(list_dicts, key):
    list_dicts.sort(key=lambda x: x[key])
    return list_dicts

print(sort_dicts([{'name': 'Alice', 'age': 26}, {'name': 'Bob', 'age': 24}], 'age'))"
Write a Python program to generate the powerset of a given set of elements.,"def powerset(arr):
    result = [[]]
    for ele in arr:
        result.extend([subset + [ele] for subset in result])
    return result

print(powerset([1, 2, 3]))"
Implement a python code that yields the factorial of a given number.,"def factorial(n):
    fact = 1
    for i in range(1, n+1):
        fact = fact * i
    return fact"
Create a function in Python that will generate a random number between 1 and 10.,"import random

def random_number():
  return random.randint(1,10)"
Find the number of ways to reach nth step in a staircase if a person can take 1 or 2 steps at a time in Python.,"def stairs(n): 
    step = [0] * (n + 2) 
    step[1] = 1
    step[2] = 2
  
    for i in range(3, n + 2): 
        step[i] = step[i - 1] + step[i - 2] 
  
    return step[n] 
      
n = 6
print(stairs(n))"
Construct a single line of code in python to get the last element of a list,"last_element = [1, 8, 3, 10, 5][-1]"
Create a Python program to print the numbers in descending order.,"lst = [10, 3, 5, 8, 7]

lst.sort(reverse=True)

for n in lst:
    print(n)"
Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.,"from itertools import zip_longest, chain, tee
def exchange_elements(lst):
    lst1, lst2 = tee(iter(lst), 2)
    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))"
Identify the programming language in the given code snippet.,Python
How would you create a 3D Array in python?,"A 3D array can be created using the numpy.array() method in Python and specifying three dimensions, such as:

array_3d = numpy.array([[[0, 0, 0], [1, 1, 1], [2, 2, 2]],
                       [[3, 3, 3], [4, 4, 4], [5, 5, 5]],
                       [[6, 6, 6], [7, 7, 7], [8, 8, 8]]])"
Create a Python script which calculate the sum of all even numbers from 0 to 100.,"def calculateSumOfEvenNumbers(number):
  sum = 0
  for i in range(number+1):
    if i % 2 == 0:
      sum += i
  return sum

sum = calculateSumOfEvenNumbers(100)
print(sum)"
What is a list comprehension in Python?,"A list comprehension in Python is a quick and concise way to create a list from an existing list or iterable. A list comprehension consists of brackets containing an expression, followed by a for clause, then by zero or more additional clauses. The result is a new list resulting from the evaluation of the expression in the context of the for and additional clauses."
Generate random numbers between 2 given numbers using the random module in Python.,"import random

def generate_random_numbers(start, end):
    random_numbers = []
    for i in range(start, end+1):
        random_number = random.randint(start, end)
        random_numbers.append(random_number)

    return random_numbers"
Generate a function in Python to find the length of a given string.,"def find_length(string):
     length = 0
     for i in string:
         length = length+1 
     return length"
Create a basic program in Python that takes in two numbers and calculates the product.,"def product(a, b):
 	return a * b
 
print(product(5, 10))"
Incorporate AI into an existing Python program to sort a list of integers.,"def AI_sort(list):
  sorted_list = sorted(list) 
  return sorted_list

list = [4,3,7,8,2,1,6]
print(""Sorted list is :"", AI_sort(list))"
Develop a Python program to generate a random sequence of alphabets.,"import random

def generate_sequence():
    sequence = """"
    for _ in range(20):
        char = chr(random.randint(97, 122))
        sequence += char
    return sequence

output = generate_sequence()
print(output)"
Write a python program to repeatedly ask the user for a string and print the number of vowels in the string.,"while True:
    s = input(""Enter a string: "")
    count = 0
    for i in s:
        if(i=='a' or i=='e' or i=='i' or i=='o' or i=='u'):
            count+=1
    print(""The number of vowels in the string:"", count)"
Write a Python program to predict the probability of an employee leaving the company given their age.,"def predict_probability(age):
    # Fit your model and get predicted probabilities
    probabilities = model.predict_proba(age)
    # Return probability for leaving class
    return probabilities[0][1]"
Write a function in Python that takes in a list of integers. The function should return a list of integers such that the result is made up of the elements of the original list sorted in descending order.,"def sorted_descending(list_of_ints):
  result = sorted(list_of_ints, reverse=True)
  return result"
Create a Python script to compare two sets of data and print the differences.,"set1 = [1, 2, 3, 4, 5]
set2 = [2, 4, 6, 8, 10]

difference = []
for i in set1:
 if i not in set2:
 difference.append(i)
 
print(f""The difference between set1 and set2 is: {difference}"")"
Write a python function to reverse an array upto a given position.,"def reverse_Array_Upto_K(input, k): 
  return (input[k-1::-1] + input[k:]) "
Optimize this Python code for finding the maximum value in an array.,"def find_max(arr): 
    return max(arr)"
Create a python script to find the last element of a given list.,"def last_element(list):
    """"""Find the last element of a given list.""""""
    return list[-1]

# Usage Example 
list = [1, 2, 3, 4, 5]
last_element = last_element(list)
print(last_element)  # 5"
Write a Python program to allow a user to input a sentence and print the words in the sentence in reverse order.,"def reverse_words_in_sentence(sentence):
    words_list = sentence.split()
    words_list.reverse()
    reversed_sentence = "" "".join(words_list)
    return reversed_sentence

sentence = ""This is my sentence.""
result = reverse_words_in_sentence(sentence)
print(result)"
Develop an algorithm in Python to sort a list of numbers using an insertion sort.,"def insertion_sort(nums):
    for i in range(1,len(nums)):
        key = nums[i]
        j = i-1
        while j >= 0 and key < nums[j]:
            nums[j + 1] = nums[j]
            j -= 1
        nums[j + 1] = key

nums = [7, 8, 5, 4, 1, 9, 6, 3, 2]
print(""Unsorted Array:"", nums)
insertion_sort(nums)
print(""Sorted Array:"", nums)"
Write a python function to remove negative numbers from a list.,"def remove_negs(num_list): 
    for item in num_list: 
        if item < 0: 
           num_list.remove(item) 
    return num_list"
Develop a Python Program to determine if two given strings are an anagram or not.,"def is_anagram(string1, string2):
    # check if strings have equal length 
    if len(string1) != len(string2): 
        return False 
    sorted1 = sorted(string1); 
    sorted2 = sorted(string2); 
    # check if sorted strings are the same 
    if sorted1 == sorted2:
        return True 
    return False"
Write a function in Python that takes a list of strings and returns a dictionary of counts for each string.,"def count_list_items(list_of_strings):
 counts = {}
 
 for item in list_of_strings:
 if item not in counts:
 counts[item] = 1
 else:
 counts[item] += 1
 
 return counts
 
print(count_list_items(list_of_strings))
# Output: {""apple"": 2, ""banana"": 1, ""orange"": 1, ""kiwi"": 1}"
Write a function in Python that calculates the average of two numeric values.,"def avg(x, y):
""""""
Calculates the average of two numbers

Args:
 x (float): The first number
 y (float): The second number

Returns:
 avg (float): The average of the two numbers
""""""
 return (x + y) / 2"
Generate a Python script to filter a list of words by length.,"def filter_by_length(words, length):
    return [word for word in words if len(word) == length]"
"Given a list of numbers and a target number, write a python code to find two integer elements in the list whose sum equals the target.","def find_sum_in_list(numbers_list, target_num):
 for num1 in numbers_list:
 for num2 in numbers_list:
 if num1 + num2 == target_num:
 return (num1, num2)

find_sum_in_list(numbers_list, target_num)"
"Edit the following Python program so that it prints out a list of numbers from 50 to 100, exclusive.","lst = list(range(50, 100))

for n in lst:
 print(n)"
Design a class in Python that can be used to show the status of an order and print out the details in the console.,"class OrderStatus:
  def __init__(self, status):
    self.status = status

  def show_status(self):
    print(f""Order Status: {self.status}"")"
Write a code snippet to fetch the first character of a given string in Python.,"string = 'example'

first_char = string[0]

print(first_char)"
"Generate a Python function that takes in a list of numbers, and creates a new list with each number doubled.","def double_numbers(numbers):
    # use list comprehesion to double each number
    doubled_numbers = [num * 2 for num in numbers]
    return doubled_numbers

numbers = [1, 2, 3, 4]
doubled_numbers = double_numbers(numbers)
print(doubled_numbers) # [2, 4, 6, 8]"
Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.,"def max_product(arr, n ): 
	mpis =[0] * (n) 
	for i in range(n): 
		mpis[i] = arr[i] 
	for i in range(1, n): 
		for j in range(i): 
			if (arr[i] > arr[j] and
					mpis[i] < (mpis[j] * arr[i])): 
						mpis[i] = mpis[j] * arr[i] 
	return max(mpis)"
Write a Python program to compare two integers and prints if one is greater then another.,"# compare two integers
int1=1
int2=2
if int1 > int2:
    print(""int1 is greater than int2"")
elif int2 > int1:
    print(""int2 is greater than int1"")
else:
    print(""int1 and int2 are equal"")"
Create a program that takes a name as input and prints the length of the name using Python.,"def nameLength(name): 
    return len(name) 

name = ""Jane""
print(""Length of the name is:"", nameLength(name))"
Write a python function to count number of vowels in the string.,"def Check_Vow(string, vowels): 
    final = [each for each in string if each in vowels] 
    return(len(final)) 
"
Automatically analyze and optimize the given Python code snippet.,"def factorial(n):
 return 1 if n in (0, 1) else n * factorial(n - 1)"
Create a function in Python to find the greatest common divisor of two given numbers.,"def get_gcd(num1, num2):
    for i in range(max(num1, num2), 0, -1):
        if num1 % i == 0 and num2 % i == 0:
            return i

result = get_gcd(7, 8)
print(result)
# Output: 1"
Generate a Python program to process an array of strings and count the number of times each string is repeated in the array.,"occurence_map = {}

for item in inputArray:
 if item not in occurence_map:
  occurence_map[item] = 1
 else:
  occurence_map[item] += 1

print(occurence_map) # Output: {'a': 4, 'b': 2, 'c': 1, 'd': 1}"
Create an algorithm in Python to convert a string to upper and lower case letters alternately.,"def alternatingCase(s): 
    result = """" 
    for i in range(len(s)):
        if i % 2 == 0: 
            result = result + s[i].upper() 
        else: 
            result = result + s[i].lower() 
    return result 

s = ""Hello World""
print(alternatingCase(s))"
"Given a list of strings, write a python program to sort the list alphabetically and print it.","strings = [""ada"", ""javascript"", ""c++"", ""python""]

strings.sort()

print(strings)
# Output: ['ada', 'c++', 'javascript', 'python']"
"Given two strings, write a Python function to check if they are anagrams of each other.","def is_anagram(s1, s2):
    s1 = s1.lower().replace("" "", """")
    s2 = s2.lower().replace("" "", """")
    return sorted(s1) == sorted(s2)

result = is_anagram(""schoolmaster"", ""the classroom"")
print(result)"
Create a Python Program to sort a list of strings according to the length of their elements.,"def ascending_sort(list):
    list.sort(key=len)
    return list

list = [""apple"", ""cat"", ""banana"", ""dog""]
result = ascending_sort(list)
print(result)"
Write a Python program to sort a dictionary by key.,"def sort_dict_by_key(d):
    """"""Sort a dictionary by key.""""""
    return {k: d[k] for k in sorted(d)}"
Generate a python script to sort a list of numbers.,"def sort_numbers(nums):
    for i in range(len(nums)-1):
        for j in range(i+1, len(nums)):
            if nums[i] > nums[j]:
                temp = nums[i]
                nums[i] = nums[j]
                nums[j] = temp
    return nums"
"Convert the following pseudocode into a Python program: 

<Set X to be the sum of the cubes of all numbers from 1 to 10>","x = 0

for i in range(1,11):
    x += i**3

print(x)"
Convert a given text into speech using Python,"import pyttsx3

engine = pyttsx3.init()
engine.say(""Hello world!"")
engine.runAndWait()"
Create a class in Python with three attributes and three methods.,"class SampleClass:
    def __init__(self, attr1, attr2, attr3):
        self.attr1 = attr1
        self.attr2 = attr2
        self.attr3 = attr3
    
    def method1(self):
        # code here
        
    def method2(self):
        # code here
    
    def method3(self):
        # code here"
Generate a Python program to calculate the average of a list of numbers,"def list_average(numbers):
    total = sum(numbers)
    length = len(numbers)
    return total/length"
Create a Python program that calculates the total cost of goods based on their prices and quantity.,"def calculate_costs(prices, quantities): 
    total = 0
    
    for price, quantity in zip(prices, quantities): 
        total += price * quantity 
        
    return total

prices = [3, 5, 2, 1]
quantities = [2, 4, 3, 5]

print(calculate_costs(prices, quantities))"
Optimize a Python code snippet to make it run faster.,"import random

def generate_numbers(n):
 numbers = [random.randint(1, 1000) for _ in range(n)]

 return numbers"
Design a python program which takes a positive integer and returns the prime factorization of that number.,"def prime_factorization(n): 
    prime_numbers = []
    i = 2
    while i * i <= n:
        if n % i == 0:
            prime_numbers.append(i)
            n = n / i
        else:
            i += 1
    if n > 1:
        prime_numbers.append(n)
    return prime_numbers"
Write a python program to invert a given dictionary.,"def invert_dictionary(d): 
    inverse = dict() 
    for key in d: 
        # Go through the original dictionary 
        val = d[key] 
        # Check if key already exists in the inverse dictionary 
        if val not in inverse: 
            # If not, create a new key-value pair 
            inverse[val] = [key] 
        else: 
            inverse[val].append(key) 
    return inverse"
Build a function in Python to convert a list of strings to a string.,"def listOfStringsToString(list):  
    
    # Using join() 
    s = "" "".join(list) 
    
    return s 

#Testing
list = [""This"",""is"",""an"",""example""]  
print(listOfStringsToString(list)) # Output: This is an example"
Write a Python program which prints the first n terms of the Fibonacci sequence.,"def print_fibonacci(n): 
    a = 0
    b = 1
    if n < 0: 
        print(""Incorrect input"")
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        print(a)
        print(b)
        for i in range(2,n): 
            c = a + b 
            a = b 
            b = c 
            print(c)
    
print_fibonacci(10)"
Implement a natural language processing algorithm in Python to detect the sentiment of an English sentence.,"import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer

def detect_sentiment(sentence):
 nltk.download('vader_lexicon')
 sid = SentimentIntensityAnalyzer()
 scores = sid.polarity_scores(sentence)
 return scores['compound']"
Write a Python program to convert a given temperature from Celsius to Fahrenheit using a given formula.,"def celsius_to_fahrenheit(celsius):
 fahrenheit = (celsius * 9/5) + 32
 return fahrenheit

celsius_to_fahrenheit(30) # returns 86.0"
Create a program in Python which will return the index of the maximum value in a given array.,"def find_max(arr):
  max_val = max(arr)
  for i in range(len(arr)):
    if arr[i] == max_val:
      return i"
Generate a numerical sequence in a given range using Python.,"def generate_sequence(start, end):
 nums = []
 for i in range(start, end+1):
 nums.append(i)
 return nums

nums = generate_sequence(3, 15)
print(nums) // [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]"
Generate a code snippet to parse JavaScript Object Notation (JSON) with the Python programming language.,"import json

# parse file
data = json.loads(json_string)

# get values
name = data[""name""]
age = data[""age""]
city = data[""city""]"
Develop a class in Python to optimize the existing code.,"class Display():
  def __init__(self, message):
    self.message = message
    
  def display_message(self):
    print(self.message)
    
message = input('Enter a message: ')
display_obj = Display(message)
display_obj.display_message()"
Convert this Java code sample to Python.,"def sum_of_array(array):
    sum = 0 
    for i in range(len(array)):
        sum += array[i]
    return sum"
Design a class using Python that represents a bank account with a balance.,"class BankAccount:
 
    def __init__(self, balance=0.0):
        self.balance = balance
 
    def deposit(self, amount):
        self.balance += amount
        return self.balance
 
    def withdraw(self, amount):
        self.balance -= amount
        return self.balance"
Produce a machine learning algorithm in Python that can identify digits from 0-9 in MNIST dataset.,"from sklearn.neighbors import KNeighborsClassifier

# Load the data
from sklearn.datasets import fetch_openml
X, y = fetch_openml('mnist_784', version=1, return_X_y=True)

# Create the model and train it
model = KNeighborsClassifier(n_neighbors=3)
model.fit(X, y)

# Test the model
print(model.score(X, y))"
Write a Python function to search for an element in a given array of integers.,"def search_in_list(list, element):
  for item in list:
    if item == element:
      return element
  return None

result = search_in_list([1,5,8,2], 2)
print(result)"
Generate a regular expression in Python to match strings containing three digits.,"import re

pattern = re.compile(r'\d{3}')"
Create a Python program which reads a list of numbers and stores them in an array.,"my_list = [1, 2, 3, 4, 5]

my_array = []

for number in my_list:
    my_array.append(number)

print(my_array)"
Create a Python script that takes a URL as an input and outputs the website title and description.,"import requests
from bs4 import BeautifulSoup 

url = 'https://www.example.com'

r = requests.get(url)
soup = BeautifulSoup(r.content, 'html.parser')

title = soup.title.string
description = soup.find('meta', attrs={'name': 'description'})['content']

print('Title:', title)
print('Description:', description)"
"Given a list of strings, write a Python program to calculate the maximum length of a string.","max_length = 0

for string in list_of_strings:
    max_length = max(max_length, len(string))

print(max_length)"
Design a Python program to create a set of unique elements from a given list,"def unique_list(nums):
  return list(set(nums))"
"Create a python function ""add_numbers"" that takes two ints and returns their sum","def add_numbers(a, b):
    return a + b"
What function will you use to count the number of words in a string?,"There are 5 words in the given string. 

To count the number of words in a string, you can use the `len()` or `count()` functions in Python. 

For example: 
```
num_words = len(string.split())
```
or 
```
num_words = string.count("" "") + 1
```"
Create a function in Python to compute the sum of all the natural numbers in a given range.,"def sum_natural_numbers(start, end):
    """"""
    Computes the sum of all natural numbers in a given range.
    
    Parameters:
    start (int): start of the range
    end (int): end of the range
    
    Returns:
    int: the sum of the natural numbers in the range
    """"""
    total = 0
    for i in range(start, end+1):
        total += i
    return total"
Design a class for a Binomial Tree in Python.,"class BinomialTree:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None

    def add_left_child(self, data):
        self.left = BinomialTree(data)

    def add_right_child(self, data):
        self.right = BinomialTree(data)"
Generate a function in Python to edit a given string and capitalize a given character at a specific position.,"def capitalizeCharacter(s, pos): 
    # Grab single characters from the string  
    # starting from the given index 
    result = s[:pos] + s[pos].upper() + s[pos + 1:] 
    return result"
Edit the python code to add try-except blocks for any potential error.,"def function(num1, num2):
 try:
 result = num1/num2;
 return result;
 except ZeroDivisionError:
  print(""Division by 0 not allowed"")"
Generate datasets in Python with a feature combination of 5 features drawn randomly from a normal distribution.,"import numpy as np
def generate_data(n_samples=1000):
    # Generate 5 features randomly drawn from a normal distribution
    features = np.random.randn(n_samples, 5)

    # Generate labels
    labels = np.zeros(n_samples)

    return (features, labels)"
Create a Python dictionary which contains a list of key-value pairs of word counts.,"word_count = {
  'cat': 1, 
  'apple': 1,
  'dog': 1,  
  'banana': 1
}"
Generate Python code to implement linear search in a given list.,"def linear_search(list, item):
    """"""
    Implement linear search in a given list.
    list: the list to be searched
    item: the item to be searched for
    """"""
    for i in range(len(list)):
        if list[i] == item:
            return i 
    return -1"
Design a Python class that represents a taxi.,"class Taxi:
    
    def __init__(self, capacity, license_number):
        self.capacity = capacity
        self.license_number = license_number
        self.passengers = []
    
    def add_passenger(self, passenger):
        if self.capacity > len(self.passengers):
            self.passengers.append(passenger)
            return True
        else:
            return False"
Modify the code below to slice a 2 dimensional array in python.,"def get_slice(data, start, end):
    return [row[start:end] for row in data]"
Write a Python program to generate a random password of length 8 with the following requirements:,"import string
import random

def generate_password(length):
    chars = string.ascii_uppercase + string.ascii_lowercase + string.digits + string.punctuation
    password = ''.join(random.choice(chars) for _ in range(length))
    return password"
Create a program in Python that extracts titles of all YouTube videos from a URL.,"import requests
import re

url = ""https://www.youtube.com/user/Thexvid/videos""

r = requests.get(url)
titles = re.findall('<a href=""/watch\?v=([^""]+)"">(.+?)<\/a>',r.content.decode('utf-8'))

for title in titles:
 print(title[1])"
Create a program in Python that takes a positive integer of arbitrary size and checks if it is a prime number.,"def is_prime(num):
    if num > 1:
        for i in range(2, num):
            if (num % i) == 0:
                return False
    else:
        return False
    return True"
Design a data structure in Python to keep track of a student's attendance.,"class Student:
    def __init__(self, name):
        self.name = name
        self.attendance_record = {}
 
    def mark_attendance(self, date, attended):
        self.attendance_record[date] = attended
 
    def get_attendance_record(self):
        return self.attendance_record"
Write a function to zip the two given tuples.,"def zip_tuples(test_tup1, test_tup2):
  res = []
  for i, j in enumerate(test_tup1):
    res.append((j, test_tup2[i % len(test_tup2)])) 
  return (res) "
Could you create a function in Python for reaching an element in a given list with a specific index?,"def get_element(lst, index):
    return lst[index]"
"In Python, write a program to find and count the occurrences of all alphabets in the given string.","from collections import Counter

def count_alphabets(str):
    return Counter(str.lower())

my_str = ""The Quick Brown Fox Jumps Over the Lazy Dog""
alphabet_count = count_alphabets(my_str)

print(alphabet_count)"
Create a Python program to store multiple names of your friends in a list and access the names using indices.,"my_friends = [""Greg"", ""Emily"", ""Sam"", ""Jess"", ""Leo""]

for i in range(len(my_friends)):
    print(my_friends[i]) 

# Output
# Greg
# Emily
# Sam
# Jess
# Leo"
"Create a Python class for a particle whose properties include mass, velocity and temperature.","class Particle():
    def __init__(self, mass, velocity, temperature):
        self.mass = mass
        self.velocity = velocity
        self.temperature = temperature"
Design a python class for representing a node in a binary tree.,"class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None"
Generate a code snippet to find the duplicate words in a string.,"s = ""Python is a programming language programming used widely""
words = s.split(' ')

duplicate_words = []

for i in range(len(words)):
    for j in range(i + 1, len(words)):
        if words[i] == words[j]:
            duplicate_words.append(words[i])
            
print(duplicate_words)"
Generate a Python script to iterate through a list and print each element.,"for item in lst:
  print(item)"
Write a script in Python to get the largest and smallest number from a given list.,"# Solution
# First, let's define our list of numbers
my_list = [9, 10, -12, 0, 5]

# Now, let's get the largest and the smallest numbers
max_val = max(my_list)
min_val = min(my_list)

# Finally, we can print out the results
print(""Largest number:"", max_val)
print(""Smallest number:"", min_val)"
Write a python program to classify a given list of sentences as positive or negative,"def classify_sentence(sentences):
    
    labels = []
    for sentence in sentences:
        # add code to classify the sentence
        # e.g. using a sentiment classifier
        labels.append(""positive"" if is_positive(sentence) else ""negative"")
    
    return labels"
Write a Python program to sort a given array of numbers.,"def sort_numbers(arr): 
    for i in range(len(arr)): 
        min_idx = i 
        for j in range(i+1, len(arr)): 
            if arr[min_idx] > arr[j]: 
                min_idx = j 
        arr[i], arr[min_idx] = arr[min_idx], arr[i] 

arr = [2, 5, 1, 3, 8, 4] 
sort_numbers(arr)"
Convert the following loop code into a recursive function in Python.,"def sum_of_n_natural_numbers_recursive(n, s=0):
    if n == 0:
        return s
    
    s += n
    return sum_of_n_natural_numbers_recursive(n-1, s)

result = sum_of_n_natural_numbers_recursive(10)
print(result)"
Create a python program to calculate the average of the numbers in a list (not including null values).,"# Calculate the average
def avg(lst): 
    sum = 0
    count = 0
    for num in lst:
        if num is not None:
            sum += num
            count += 1
    return sum / count

# Create list of numbers
lst = [30, 28, 40, 10, 0, None, 33, None]

# Print average
print(avg(lst))

# Output: 25.5"
"Given an array of integers, write a Python program to classify each number as even or odd.","def classify_number(arr): 
 result = []
 for num in arr: 
 if num % 2 == 0: 
 result.append(""even"")
 else: 
 result.append(""odd"")
 return result 

print(classify_number([10, 27, 32, 11]))"
Create a script to scrape a web page and extract data in Python,"# Python program to scrape a web page and extract data

import requests
from bs4 import BeautifulSoup 

# fetch the web page
r = requests.get('http://example.com')
 
# parse the web page
soup = BeautifulSoup(r.text, 'html.parser')
 
# scrape the data from the page
data = soup.find_all('h2', { 'class': 'title' })
 
# print the extracted data
for item in data:
   print(item.text)"
Create a Python program to sort a dictionary by value,"def sort_dict_by_value(input_dict):
    output_list = []
    for item in sorted(input_dict.items(), key=lambda x: x[1]):
        output_list.append(item)
    return output_list

d = {'z': 1, 'b': 2, 'a': 4, 'c': 3}
result = sort_dict_by_value(d)
print(result)"
"Using the input as a guide, modify the following Python code to add a new feature of sorting the dictionary by value.","from operator import itemgetter

names_and_points = {
  ""Dave"": 20,
  ""John"": 40,
  ""Rachel"": 55
}

sorted_dict = sorted(names_and_points.items(), key=itemgetter(1))

print(sorted_dict)"
Develop a Python script to generate random numbers between a minimum and maximum value.,"# Define the function 
def random_number(min_val, max_val):
 # Generate a random number
 rnd = np.random.randint(min_val, max_val+1)
 
 return rnd

# Call the function
random_num = random_number(5, 10)

# Print the random number
print('Random number between 5 and 10:', random_num)"
Make an iterative Binary Search algorithm using Python,"def binary_search_iterative(arr, start, end, target):
    while start <= end:
        mid = (start + end) //2
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            start = mid+1
        else:
            end = mid-1
    return -1"
Convert the following Python code into C++.,"#include <iostream>

void greet(std::string name)
{
    std::cout << ""Hello, "" << name << std::endl;
}"
Generate a random string with 8 characters in Python.,"import string
import random

def generate_random_string(stringLength=8):
    """"""Generate a random string of fixed length """"""
    letters = string.ascii_lowercase
    return ''.join(random.choice(letters) for i in range(stringLength))

print(generate_random_string())"
Generate a random password of the given length in Python.,"import random
import string

def generate_password(length):
 chars = string.ascii_letters + string.digits
 return ''.join(random.choice(chars) for _ in range(length))

random_password = generate_password(8)
print(random_password)"
Generate Python code to print out the number of times each character appears in a string.,"from collections import Counter

string = 'mississippi'
c = Counter(string)
for char, count in c.most_common():
    print(f""{char}: {count}"")"
Write a function in Python that calculates the maximum value in a 2-dimensional array.,"def find_max_val(arr):
    max_val = 0

    for lst in arr:
        for num in lst:
            if num > max_val:
                max_val = num
    return max_val

print(find_max_val([[1, 4, 8], [7, 9, 6]])) # Output: 9"
Write a Python program which takes in a sentence and lists out all the words sorted by length.,"sentence = ""He had seen too many terrible things""
words = sentence.split()
sorted_words = sorted(words, key=len)
print(sorted_words) 
# Output: ['He', 'had', 'too', 'many', 'seen', 'things', 'terrible']"
Implement a Tree class to represent trees in Python.,"class Tree:
    def __init__(self):
        self.children = []
        self.data = None

    def add_child(self, child):
        self.children.append(child)

    def get_data(self):
        return self.data

    def set_data(self, data):
        self.data = data"
Generate a dictionary of objects in Python from a list of words given by the user.,"words_dict = {
 ""hello"": {},
 ""world"": {},
 ""foo"": {},
 ""bar"": {}
}"
Can you provide a Python program to remove all punctuation from a given sentence?,"import string

def remove_punctuation(sentence):
    translator = str.maketrans('', '', string.punctuation)
    return sentence.translate(translator)

#Test
print(remove_punctuation(""This is a sentence; with, punctuation.""))"
Write a Python program that takes a list and a search query as input and returns the indices of all elements in the list which match the search query.,"def search_list(list, search_query):
    result = []
    for i in range(len(list)):
        if list[i] == search_query:
            result.append(i)
    return result

search_list(list, search_query) # returns [0]"
"Write a Python script to generate a random password with at least 8 characters containing the following characters: lowercase letters, uppercase letters, numbers, and special characters.","import random
import string

def generate_password():
    pass_characters = string.ascii_letters + string.digits + string.punctuation
    return ''.join(random.choice(pass_characters) for i in range(8))

print(generate_password())

//Output
sd.V%T8d1"
Create a Python class that stores information about a person's function.,"class Person:
 
    def __init__(self, name, age):
        self.name = name
        self.age = age
 
    def getInformation(self):
        return ""Name: ""+ self.name + "", Age: "" + str(self.age)

person = Person(""John"", 19)
print(person.getInformation())"
Write a Python program to convert a set of strings to a single dictionary.,"my_dict = dict(zip([""apple"", ""bat"", ""cat""], [""red"", ""grey"", ""black""]))

#Print the dictionary
print(my_dict)"
Write a function that matches a string that has an a followed by three 'b'.,"import re
def text_match_three(text):
        patterns = 'ab{3}?'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')"
Develop a class in Python to store 3D vectors.,"class Vector3D(object):
    def __init__(self, x=0, y=0, z=0):
        self.x = x
        self.y = y
        self.z = z

    def magnitude(self):
         return math.sqrt(self.x**2 + self.y**2 + self.z**2)

    def __add__(self, other):
        return Vector3D(self.x + other.x,
                        self.y + other.y,
                        self.z + other.z)"
Create a function in Python to replace all spaces in a given string with an underscore.,"def replace_space(string):
    return string.replace("" "", ""_"")

replace_space(""The quick brown fox"") # Outputs: The_quick_brown_fox"
Create functions in Python for validating if a number is prime or not.,"def is_prime(n):
    if n == 1:
        return False
    for i in range(2,int(n**(1/2))+1):
        if n%i == 0:
            return False
    return True

if is_prime(12):
    print(""Prime"")
else:
    print(""Not Prime"")"
Write a Python script to find the second highest number in a list of numbers.,"list_nums = [12, 2, 6, 8, 19, 15] 
  
# sorting the list in ascending order
list_nums.sort() 
  
# printing the second last element 
print(""Second highest number is:"", list_nums[-2])"
Modify a Python program to accept input from a user.,"def printMessage(): 
    message = input(""Type your message here: "")
    print(message)"
Modify the existing Python code below so that it returns the sum of odd numbers less than the input n.,"def sum_odd_numbers(n):
    result = 0
    for i in range(n):
        if i % 2 != 0:
            result += i
    return result"
Remove the duplicates from a given array using Python,"def remove_duplicates(data):
    result = []
    for element in data:
        if element not in result:
            result.append(element)
    return result

print(remove_duplicates([1, 3, 3, 4, 5, 6, 6, 7]))"
Write a Python function that takes two lists as input and returns true if all the elements in List 1 are available in List 2.,"def check_if_all_in_list_2(list1, list2):
    for item in list1: 
        if item not in list2: 
            return False
    return True"
Create a Python function that takes an array as input and returns a dictionary with each element as the key and its frequency as the value.,"def getElementFrequency(arr):
    frequency = {}
    for item in arr:
        if item in frequency:
            frequency[item] += 1
        else:
            frequency[item] = 1
    return frequency

print(getElementFrequency([1, 1, 2, 3]))"
Rewrite this Python function to be as efficient as possible.,"def get_values(dictionary):
    return [value for key, value in dictionary.items() if value > 0]"
Create an algorithm in Python for the classification of numbers into even or odd.,"def classifyNumber(num): 
    if num % 2 == 0: 
        return ""even""
    else: 
        return ""odd"" 
  
print(classifyNumber(3))"
Develop a function in Python to accept a positive integer as input and print its reverse.,"def reverse_integer(number):
    reversed_number = 0
    while number > 0: 
        remainder = number % 10
        reversed_number *= 10
        reversed_number += remainder
        number //= 10
      
    return reversed_number

number = 12345
print(""Reversed Number:"", reverse_integer(number))"
Optimize a Python program to calculate factorials.,"def factorial(n):
  if n <= 1:
    return 1
  else:
    return n * factorial(n-1)

print(factorial(5)) # 120"
Create a web crawler in Python to get all web page URLs from a given website.,"import requests
from bs4 import BeautifulSoup

url = 'https://en.wikipedia.org/wiki/Web_crawler'
request = requests.get(url)
soup = BeautifulSoup(request.content, 'html.parser')
for link in soup.find_all('a', href=True):
  print(link['href'])"
"Refactor the following code to use the most Pythonic approach:

```
for i in range(0, list_items_len):
    if list_items[i] == target_item:
        index = i
        break
```","list_items = ['a', 'b', 'c', 'd', 'e']
target_item = 'c'

index = list_items.index(target_item) if target_item in list_items else None"
Write a for-loop in Python to find the average of 5 numbers.,"total = 0
for num in [10, 15, 20, 25, 30]:
    total += num

average = total / 5
print(average)"
How would you code a function in Python to rotate elements of an array?,"def rotate_array(array, n):
    '''
    This function takes in an array and an integer n and rotates the elements of the array by n positions.
    '''
    return array[n:] + array[:n]"
"Create a program to generate a random password using Python that includes at least one uppercase, one lowercase, and one special character","import random
import string

def get_password(length):
    letters =string.ascii_lowercase+string.ascii_uppercase+string.digits+string.punctuation
    return ''.join(random.choice(letters) for i in range(length))

# Output
result = get_password(8)
print(result)"
Translate the given Python program into C++ code.,"#include <iostream>
#include <string>

void say_hello(std::string name="""") {
    if (name.empty()) {
        std::cout << ""Hello World"" << std::endl;
    } else {
        std::cout << ""Hello, "" << name << ""!"" << std::endl;
    }
}

int main() {
    say_hello();
    say_hello(""John"");
    return 0;
}"
"Write a Python program to edit a given string to replace each vowel with its following character as defined below.
Vowel-> next character
a->e
e->i
i->o
o->u
u->a","def edit_vowels(string): 
    vowels = 'aeiou'
    next_chars = 'eioua'
    result_string = ''
    for char in string:
        if char in vowels:
            result_string += next_chars[vowels.index(char)]
        else:
            result_string += char
    return result_string"
Create an algorithm in Python to calculate the maximum profit that one can achieve from stock purchasing.,"def max_profit(prices):
   max_profit = 0
   for i in range(len(prices) - 1): 
      for j in range(i + 1, len(prices)): 
         if prices[j] - prices[i] > max_profit: 
            max_profit = prices[j] - prices[i]
   return max_profit 

prices = [15, 12, 13, 10, 11, 16] 
print(""Maximum profit :"", max_profit(prices))"
Write a class in Python to implement a stack. The class should have methods to push and pop elements and check the size of the stack.,"class Stack:
 def __init__(self):
 self.stack = []

 def push(self, element):
 self.stack.append(element)

 def pop(self):
 if self.stack:
 return self.stack.pop()
 else:
 return None

 def size(self):
 return len(self.stack)"
Write a Python method which generates a Fibonacci sequence up to the n-th number.,"def Fibonacci(n): 
    if n<0: 
        print(""Incorrect input"") 
    elif n==1: 
        return 0
    elif n==2: 
        return 1
    else: 
        return Fibonacci(n-1)+Fibonacci(n-2)"
Create a Python script that prints an inverted pyramid pattern.,"# Create an empty list 
pattern = [] 
# Add the elements to the list for the desired pattern 
rows = 5
for i in range(1, rows+1): 
    rows = rows - i 
    pattern.append(""*""*i +  "" ""*rows) 
   
# print the pattern 
for i in pattern[::-1]: 
    print(i)"
Write a python function to find the cube sum of first n odd natural numbers.,"def cube_Sum(n): 
    sum = 0   
    for i in range(0,n) : 
        sum += (2*i+1)*(2*i+1)*(2*i+1) 
    return sum"
Create a Python function to generate a web page from a given set of HTML and CSS code.,"def generate_web_page(html, css):
    html = html.encode('utf-8')
    css = css.encode('utf-8')
    html = html.replace(""<style>"", f""<style>{css}"")
    page = f""""""<!DOCTYPE html>
    <html>
    <head>
    <title>Generated web page</title>
    </head>
    <body>
    {html}
    </body>
    </html>""""""
    return page"
"Write a function to extract year, month and date from a url by using regex.","import re
def extract_date(url):
        return re.findall(r'/(\d{4})/(\d{1,2})/(\d{1,2})/', url)"
Create a Python program for finding the second highest number in a list.,"def findSecondHighest(lst): 
  max = float(""-inf"")
  sec_max = float(""-inf"")
	
  for num in lst: 
    if (num > max): 
      sec_max = max 
      max = num 
    elif (num > sec_max): 
      sec_max = num	
  return sec_max

print(findSecondHighest([1, 2, 3, 4, 5]))"
Write a Python program that prints all the keys and their values in a given dictionary.,"def print_dict_items(dct):
  for key, value in dct.items():
    print(""Key: {}, Value: {}"".format(key, value))"
Make a Python program to check if a given string is a pangram or not. A pangram is a sentence that contains all letters of the English alphabet.,"import string 

def is_pangram(sentence): 
   alphabet = ""abcdefghijklmnopqrstuvwxyz""
   for char in alphabet: 
      if char not in sentence.lower(): 
         return False
   return True"
Create a Matrix of size 3X3 filled with random numbers in Python,"import numpy as np

matrix = np.random.rand(3,3)

print(matrix)

# Output
[[0.88549813 0.66875685 0.3422321 ]
 [0.26914325 0.86840147 0.14631629]
 [0.97593031 0.79918964 0.28827702]]"
Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.,"def count_binary_seq(n): 
	nCr = 1
	res = 1
	for r in range(1, n + 1): 
		nCr = (nCr * (n + 1 - r)) / r 
		res += nCr * nCr 
	return res "
Generate a Python code to find the sum of natural numbers up to n.,"def findSum(n): 
    sum = 0
    for num in range(0, n+1):
        sum += num 
    return sum

n = 10
sum_of_natural_num = findSum(n)
print(sum_of_natural_num)"
Write a Python program to group two lists of numbers into a dictionary. The keys would be the first list and the values would be the second list.,"list_a = [1,2,3,4,5]
list_b = [6,7,8,9,10]

d = dict(zip(list_a, list_b)) 

print(d) // {1: 6, 2: 7, 3: 8, 4: 9, 5: 10}"
Create a python program which takes a list and returns the elements which appear twice.,"def find_duplicates(input_list):
    seen = set() 
    duplicates = [] 
  
    for i in input_list: 
        if i not in seen: 
            seen.add(i)
        else: 
            duplicates.append(i) 
    return duplicates"
Write a Python program to print out all prime numbers under 100.,"def print_prime_numbers(n):
    for num in range(2, n):
        prime = True
        for div in range(2, int(num**0.5)+1):
            if num % div == 0:
                prime = False
                break
        if prime:
            print(num)
            
print_prime_numbers(100)"
"Generate a list of 10 random numbers in Python between 0 and 1 (including 0, excluding 1).","import random
rand_nums = [None] * 10
for i in range(10):
 rand_nums[i] = random.random()
print(rand_nums)"
Code a function in Python that takes an array as input and returns an array with the elements in reverse order.,"def reverse_array(arr):
    return arr[::-1]"
Create a function in Python which will return the maximum and minimum elements from a given list of numbers.,"def max_min(lst):
  return max(lst), min(lst)"
Write a Python program to check whether two strings are anagrams or not.,"def is_anagram(s1, s2):
 s1 = s1.replace("" "", """")
 s2 = s2.replace("" "", """")
 if len(s1) != len(s2):
 return False
 s1_count = Counter(s1)
 s2_count = Counter(s2)
 for i in s1_count:
 if s1_count[i] != s2_count[i]:
 return False
 return True

s1 = ""listen""
s2 = ""silent""
print(is_anagram(s1, s2))
# Output: True."
Design a Python code to extract the characters from from a given string in reverse order.,"def reverseCharacters (string):
    reverseStr = """"
    for i in range(len(string)-1, -1, -1):
        reverseStr += string[i]
    return reverseStr"
Construct a Python program to convert degrees Celsius to Fahrenheit.,"#Program to convert Celsius to Fahrenheit

#user input
C = 32

#Celsius to Fahrenheit conversion
F = (C*9/5)+32

#print the result
print('%0.2f degree Celsius is equal to %0.2f degree Fahrenheit' %(C, F))"
Generate Python code to visualize this data using a bar chart.,"import matplotlib.pyplot as plt 

# Create data
labels = ['Boys', 'Girls']  
values =[50, 80, 100, 90, 60, 70, 90, 95]
  
# naming the x-axis 
plt.xlabel('Category') 
# naming the y-axis 
plt.ylabel('Score') 
# plot title 
plt.title('Bar Plot') 
  
# plot the generated values  
plt.bar(labels, values) 
# function to show the plot 
plt.show()"
Implement a stack data structure in Python.,"class Stack():
    def __init__(self):
        self.items = []

    def push(self, data):
        self.items.append(data)

    def pop(self):
        return self.items.pop()

    def is_empty(self):
        return self.items == []"
Write a function in Python to count the occurrences of a given character in a string.,"def count_char(s, c):
    count = 0
    for ch in s:
        if ch == c:
            count += 1
    return count

print(count_char('hello world', 'l'))"
Write a Python program to query Twitter to get the most recent tweets from a user.,"import tweepy

# Authenticate to Twitter
auth = tweepy.OAuthHandler(""CONSUMER_KEY"", ""CONSUMER_SECRET"")
auth.set_access_token(""ACCESS_TOKEN"", ""ACCESS_TOKEN_SECRET"")
# Create API object
api = tweepy.API(auth)

# Get the most recent tweets from the given user
tweets = api.user_timeline(screen_name=""@elonmusk"")

for tweet in tweets:
 print(tweet.text)"
Create a Python program to predict the stock value of a certain company.,"def stock_predictor(company):
    # Load data 
    data = load_data(company)
    # Pre-process data
    data = preprocess(data)
    # Build the prediction model 
    model = build_model(data)
    # Make prediction  
    predicted = model.predict(data)
    # Return the predictions 
    return predicted"
"Given a JSON object, write a Python program to list out all the keys present in the object","keys = [""Stud1"", ""Roll No"", ""Class"", ""Stud2""]"
Make a linear regression model with Python to predict the stock prices of Apple Inc.,"import pandas as pd
from sklearn.linear_model import LinearRegression

# Load the training set
data = pd.read_csv(""apple_data.csv"")

# Separate the features and target
X = data.iloc[:, :-1].values
y = data.iloc[:, -1].values

# Train the model
model = LinearRegression().fit(X, y)"
Implement a Python function to convert a float to a string with two decimal places.,"def float_to_string(number):
     # Round the number
    rounded_num = round(number, 2)
     # Return the number converted to a string
    return str(rounded_num)"
Create a Python program to generate a random day of the week.,"import random

def random_day():
    days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
    return random.choice(days)"
Write a function in Python to remove duplicates from a list.,"def remove_duplicates(nums):
    # create a set to remove duplicates
    unique_list = set(nums)
    # convert the set back to a list
    nums = list(unique_list)
    return nums

input_list = [2, 2, 3, 4, 5, 5]
result = remove_duplicates(input_list)
print(result)"
Develop a function that returns the sum of three numbers,"# Python3 program to return the sum of three numbers

def sum_three(a,b,c): 
    return a + b + c"
Create a stack data structure in Python.,"class Stack:
 
    def __init__(self):
        self.stack = []
 
    # Add to the top of stack
    def push(self, data):
        self.stack.append(data)
 
    # Remove from the top of stack
    def pop(self):
        if self.stack:
            return self.stack.pop()
 
    # Peek top element
    def peek(self):
        return self.stack[-1]
 
    # Check if stack is empty
    def is_empty(self):
        return not bool(self.stack)"
Write a function in Python to convert a given list of strings to a list of integers.,"def convert_to_integers(lst):
    return [int(i) for i in lst]"
Construct a try-except block with Python that captures errors from invalid user input.,"try:
  user_input = int(input(""Please enter an integer: ""))
except ValueError:
  print(""That's not an integer!"")"
Generate a Python program to perform matrix multiplication on two given matrices.,"def matrix_multiplication(A, B):  
    rows_A = len(A)  
    cols_A = len(A[0])  
    rows_B = len(B)  
    cols_B = len(B[0])  
    result = [[0 for i in range(cols_B)] for j in range(rows_A)]  
    for i in range(rows_A): 
        for j in range(cols_B): 
            for k in range(cols_A): 
                result[i][j] += A[i][k] * B[k][j] 
    return result"
Create a program to sort the elements of an unsorted array using the bubble sort technique in Python.,"""""""
Create a program to sort the elements of an unsorted array using the bubble sort technique in Python
""""""
def bubbleSort(arr):
	length = len(arr)
	for i in range(length):
		for j in range(length-1-i):
			if arr[j] > arr[j+1]:
				arr[j], arr[j+1] = arr[j+1], arr[j]
	return arr
 
# Driver Code
arr = [4, 5, 7, 3, 8, 1, 9]
 
result = bubbleSort(arr)
 
print(result)"
Translate the given program from Python to C.,"#include<stdio.h>
#define PI 3.14

float calculate_area(float r)
{
    float area = PI * r * r;
    return area;
}"
Generate a python program to reverse an integer.,"def reverse_integer(n):
    # initialize the output to 0
    rev = 0

    # use a while loop to iterate through the number,
    # adding each digit to the output
    while n > 0:
        rev = (rev * 10) + (n % 10)
        n = n // 10

    return rev"
Design a system in Python that encrypts and decrypts text messages using a one-time pad encryption technique.,"def encrypt(message, key):
 cipher_text = []
 for i in range(len(message)):
 cipher_text.append(ord(message[i]) ^ ord(key[i]))
 return cipher_text

def decrypt(cipher_text, key):
 message = []
 for i in range(len(cipher_text)):
 message.append(chr(cipher_text[i] ^ ord(key[i])))
 return """".join(message)"
Turn the given input string into a valid Python statement.,"def printHelloWorld():
    print(""Hello world"")"
Design a python program which will return the maximum element of a given list.,"def find_max_element(arr):
    max_element = arr[0]
    for num in arr[1:]:
        if num > max_element:
            max_element = num
    return max_element"
Generate a function in Python which checks whether a number is even or odd.,"def is_even_odd(num):
    if num % 2 == 0:
        return ""Even""
    else:
        return ""Odd"""
"Construct a SQL query to find all the authors whose book titles contain ""python"" in a given database.","SELECT author 
FROM books 
WHERE title LIKE '%python%';"
Suggest a function for concatenating two strings in Python.,"def concatenate_strings(str1, str2):
    '''This function concatenates two strings, str1 and str2.'''
    return str1 + str2"
Write a Python program to check if it contains the specified substring.,"my_string = ""Hello World""
if ""World"" in my_string:
    print(""Yes, the specified substring is found."")
else:
    print(""No, the substring is not found."")"
Write a Python code snippet to reverse the order of words in a sentence.,"def reverseWords(sentence):
  words = sentence.split()
  words.reverse()
  newSentence = ' '.join(words)
  print(newSentence)
reverseWords(""Hello, World!"")"
Debug this python code to find and fix any issues it contains.,"def check_anagrams(s1, s2):
    s1 = s1.lower().replace("" "", """")
    s2 = s2.lower().replace("" "", """")
    return sorted(s1) == sorted(s2)"
Develop a python code to calculate the number of overlapping elements in two unsorted arrays.,"def overlap_count(a1, a2):
    a1_set = set(a1)
    a2_set = set(a2)
    overlap_set = a1_set.intersection(a2_set)
    return len(overlap_set)

arr1 = [1, 2, 2, 4]
arr2 = [2, 3, 4]

print(overlap_count(arr1, arr2)) # 3"
Write a python function to find the sum of non-repeated elements in a given array.,"def find_Sum(arr,n): 
    arr.sort() 
    sum = arr[0] 
    for i in range(0,n-1): 
        if (arr[i] != arr[i+1]): 
            sum = sum + arr[i+1]   
    return sum"
Sort a list of dictionaries in Python by a given key.,"list_of_dicts = [{'food': 'apple', 'color': 'red'}, {'food': 'banana', 'color': 'yellow'}, {'food': 'pear', 'color': 'green'}]

# Sort list by given key
sorted_list = sorted(list_of_dicts, key=lambda item:item['color'])

print(sorted_list)"
Write a function in Python that takes an integer and returns an array of digits of the number except the last two digits.,"def remove_last_two_digits(num):
    num = str(num)
    return [int(x) for x in num[:-2]]"
Create a stack data structure in Python.,"class Stack:

    def __init__(self):
        self.items = []
    
    def push(self, item):
        self.items.append(item)
    
    def pop(self):
        if self.items:
            return self.items.pop()
        else:
            return None
    
    def peek(self):
        if self.items:
            return self.items[-1]
        else:
            return None
    
    def size(self):
        return len(self.items)"
Write a python function to generate the power set for a given set.,"def powerset(A):
    result = []
    for i in range(len(A)+1):
        for subset in itertools.combinations(A,i):
            result.append(subset)
    return result

A = {1, 2, 3}
print(powerset(A))

#Output:
#[(), (1, ), (2, ), (3, ), (1, 2), (1, 3), (2, 3), (1, 2, 3)]"
Create a Python script to remove certain characters given in a set from a string.,"string = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ""
remove_chars = set(['A', 'C', 'D', 'E'])
 
result = """".join(char for char in string if char not in remove_chars)

print(result)"
Write a Python program to find the index of an item in a list.,"def find_index(lst,item):
  for i in range(len(lst)):
    if item == lst[i]:
      return i

index = find_index(my_list, item)
print(index) # 2"
Create a program in Python that takes user input and prints out its type.,"user_input = input('Please enter anything: ')

print('The type of user input is:', type(user_input))"
"Create a program in Python that takes in a sentence from the user, and reverse the sentence.","def reverseSentence(sentence): 
    words = sentence.split(' ') 
  
    newWords = [word[::-1] for word in words] 
      
    newSentence = ' '.join(newWords) 
      
    return newSentence 
  
sentence = input(""Enter a sentence: "")
print(reverseSentence(sentence))"
Write a function to remove words from a given list of strings containing a character or string.,"def remove_words(list1, charlist):
    new_list = []
    for line in list1:
        new_words = ' '.join([word for word in line.split() if not any([phrase in word for phrase in charlist])])
        new_list.append(new_words)
    return new_list"
Write a Python function to convert a string to an integer.,"def string_to_int(string):
    num = 0 
    for char in string:
        num = num * 10 + (ord(char) - ord('0')) 
    return num"
"Create a Python class for a Person with properties name, age and city.","class Person:
    def __init__(self, name, age, city):
        self.name = name
        self.age = age
        self.city = city"
Generate a 3D array of size 2 x 3 x 2 in Python.,"import numpy as np

# Generate a 3D array
x = np.zeros((2, 3, 2))

# Print the array
print(x)"
"Given Python code, fix the bug.","def my_function(n):
    while n > 1000 :
        n = n//10
    return n

n = 2000
print(my_function(n))"
Create a program in python to find the sum of all multiples of 3 and 5 below a given number.,"def sumMultiples(num):
    sum = 0
    for i in range(1, num):
        if (i % 3 == 0 or i % 5 == 0):
            sum += i
    return sum

# Driver Code
num = 20
print(sumMultiples(num))"
"Translate the following Python code to JavaScript:

def sum(a, b):","function sum(a, b) {
 return a + b;
}"
Create a program in Python that takes a text and tokenizes it into words.,"import re 

#Replace special characters with space 
text = re.sub(r'[^\w\s]',' ',text)
#Split text 
tokens = text.split() 

print(tokens)
#Output: ['This', 'is', 'an', 'example', 'of', 'tokenization']"
Write a Python program to enter two integers as arguments and calculate the sum of them.,"def calculate_sum(num1, num2):
    sum = num1 + num2
    return sum

num1 = int(input('Enter first number: '))
num2 = int(input('Enter second number: '))

result = calculate_sum(num1, num2)
print('The sum of the two numbers is:', result)"
Write a Python program to generate a random number between 1 and 10.,"import random 

random_num = random.randint(1, 10)  
print(random_num)"
"Create a solution for object-oriented programming in Python. The solution should include a way to represent base class, derived class, single inheritance, and multiple inheritance.","# Base class
class Base:
    pass

# Derived class
class Derived(Base):
    pass

# Single inheritance
class SingleInheritance(Base):
    pass

# Multiple inheritance
class MultipleInheritance(Base, Derived):
    pass"
Implement the Naive Bayes classifier in Python to solve a multi-class classification problem.,"import numpy as np  
from sklearn.naive_bayes import GaussianNB 

# declare data  
X = np.array([[0, 0], [1, 1], [2, 2], [3, 3], [4, 4]]) 
Y = np.array([0, 1, 2, 3, 4]) 
  
# create Gaussian Naive Bayes model object and train it with the data 
clf = GaussianNB() 
clf.fit(X, Y) 
  
# predict the outcome 
predicted_label = clf.predict([[2, 0]]) 
print(predicted_label)"
Write a Python generator to generate a range of integer numbers indefinitely.,"def generate_numbers():
    n = 0
    while True:
        yield n 
        n += 1"
Write a Python script to filter a list of text strings by removing all strings that contain a certain substring.,"filtered_list = [x for x in word_list if keyword not in x]
# filtered_list = ['hello', 'this', 'word']"
"Given a list of numbers, create a Python script to print all the elements greater than 50.","nums = [2, 60, 5, 4, 78, 32, 99]

for num in nums:
    if num > 50:
        print(num)"
Design a function in Python to create a dictionary object mapping the letters of the alphabet to their corresponding numerals.,"def create_alphabet_mapping():
    alphabet = ""abcdefghijklmnopqrstuvwxyz""
    code = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]
    alphabet_mapping = dict(zip(alphabet, code))
    return alphabet_mapping

# Test
print(create_alphabet_mapping())"
Create a python program to find the power of a number without using the built-in functions.,"def power_of(x, n):
    result = 1
    for i in range(n):
        result = result * x
    return result

power = power_of(2, 5)
print(power)"
Write a Python program to calculate the total sales revenue for a list of item prices and quantities.,"# Calculate total sales

item_prices = [1.99, 3.00, 2.50]
item_quantities = [5, 10, 8]

total_sales = 0

for price, quantity in zip(item_prices, item_quantities):
 total_sales += price * quantity

print(total_sales)"
Write a Python function to check whether a number is in the given range.,"def is_in_range(num, a, b):
    if num >= a and num <= b:
        return True
    else:
        return False

result = is_in_range(4, 2, 4)
print(result)"
Write a python function to find the maximum difference between any two elements in a given array.,"def max_Abs_Diff(arr,n): 
    minEle = arr[0] 
    maxEle = arr[0] 
    for i in range(1, n): 
        minEle = min(minEle,arr[i]) 
        maxEle = max(maxEle,arr[i]) 
    return (maxEle - minEle) "
"Write a Python program that takes a given number and prints out the numbers from 1 to the given number. If a number is divisible by 3, add the word “fizz”. If a number is divisible by 5, add the word “buzz”.","def fizz_buzz(n):
  for i in range(1, n+1):
    if i % 3 == 0:
      print(""fizz"", end="" "")
    elif i % 5 == 0:
      print(""buzz"", end="" "")
    else:
      print(i, end="" "")
  print("""")"
Develop a Python program to find the distance between two points on the x-axis.,"# Calculate distance between two points
def findDistance(x1, x2):
 return abs(x2 - x1)

x1 = -3
x2 = 4
distance = findDistance(x1, x2)

print(""Distance:"", distance)"
Write a Python program that encodes an input string with a given shift value.,"def encode_string(input_str, shift):
    output_str = """"
    for ch in input_str:
        if ch != "" "":
            output_str += chr(ord(ch) + shift)
        else:
            output_str += "" ""
    return output_str

# Example
print(encode_string(""hello"", 5))  # Prints mjqqt"
Write a Python program to generate algebraic equations with randomly generated coefficients.,"import random

def generate_equation():
  a = random.randint(-10, 10)
  b = random.randint(-10, 10)
  c = random.randint(-10, 10)

  equation = f'{a}x^2 + {b}x + {c} = 0'
  return equation

result = generate_equation()
print(result)"
Design a function to print a chessboard of size n x n in Python.,"def print_chessboard(n):
    for i in range(1, n+1):
        for j in range(1, n+1):
            if (i+j) % 2 == 0: 
                print(""X"",end="" "")
            else: 
                print(""O"",end="" "")
        print()

print_chessboard(8)"
"Design a class in Python to represent a Rectangle, which has the two attributes 'length' and 'width'.","class Rectangle:
  def __init__(self, length, width):
    self.length = length
    self.width = width"
Develop a Python script which sorts a list of names in alphabetical order,"names = [""John"", ""Anna"", ""David"", ""Bob"", ""Alex""]
  
# sorting the names 
names.sort() 
  
# printing the first name in the sorted list 
print(""The first name in the sorted list is:"") 
print(names[0])"
Develop an algorithm in Python to optimize a given set of integers.,"def optimize_ints(nums): 
    left = 0
    right = len(nums) - 1

    while left < right: 
        min_num = min(nums[left], nums[right]) 
        nums[right] = nums[left] = min_num + 
                                 nums[left] - nums[right] 
        left += 1
        right -= 1
    return nums

nums = [2, 4, 6, 10, 12]
print(optimize_ints(nums))"
Create a function in Python to find the maximum value among five elements.,"def find_max_value(list_of_values): 
    return max(list_of_values) 
  
# Driver code 
list_of_values = [1, 5, 9, 4, 8]
max_value = find_max_value(list_of_values) 
print(""The maximum value is:"", max_value)"
Can you provide a script to remove any dot (.) in an URL string?,"url_string = ""https://www.google.com/example/?q=python.""

def remove_dot(url_string):
    url_string = url_string.replace('.', '')
    
    return url_string

modified_url_string = remove_dot(url_string)
print(modified_url_string)
# https://wwwgooglecom/example/?q=python"
"Given a list of numbers with one missing, create a Python program to find the missing number.","def find_missing_number(lst): 
    n = len(lst) 
    total = (n + 1)*(n + 2)/2
    sum_of_lst = sum(lst) 
    missing_number = total - sum_of_lst 
    return missing_number 
  
lst = [1, 2, 4, 6, 7, 8] 
missing_number = find_missing_number(lst) 
print(missing_number)"
Generate a Python program to find the nth Fibonacci number.,"def fibonacci(n): 
    # base condition
    if n == 0 or n == 1: 
        return n
    
    # calculate Fibonacci number for n
    return fibonacci(n-1) + fibonacci(n-2)

# test 
print(fibonacci(5))

Output:
5"
"Create a Python program that prints the numbers from 1 to 100 and prints ""Fizz"" if the number is divisible by 3 and ""Buzz"" if the number is divisible by 5 and ""FizzBuzz"" if the number is divisible by both 3 and 5.","for i in range(1, 101):
    if i % 15 == 0:
        print(""FizzBuzz"")
    elif i % 3 == 0:
        print(""Fizz"")
    elif i % 5 == 0:
        print(""Buzz"")
    else:
        print(i)"
Write a function in Python to sort a given list according to the second element in the sublist,"def sort_by_second_element(list):
    list.sort(key= lambda x : x[1])
    return list

list = [['B', 'b'], ['A', 'a'], ['C', 'c']]

print(sort_by_second_element(list)) # [['A', 'a'], ['B', 'b'], ['C', 'c']]"
Edit this Python program to print a concatenated string of two given strings with a space between them?,"string1 = ""Hello""
string2 = ""World""

# Concatenate two strings
concatenated_string = string1 + "" "" + string2 

# Print the result
print(concatenated_string)"
Write a function in Python to parse text from the HTML of a given web page.,"def parse_html(html):
    soup = BeautifulSoup(html, 'html.parser')
    text = soup.get_text()
    return text"
Find the maximum number in an array of integers using a Python program.,"def max_number(array):
    max = array[0]
    for num in array:
        if num > max:
            max = num
    return max

maximum = max_number([12, 5, 23, 1, 11])
print(maximum) # prints: 23"
Create a function in Python which takes a list and returns a list of unique elements in ascending order.,"def unique_list(list): 
  new_list = list(set(list)) 
  new_list.sort() 
  return new_list

print (unique_list([15, 2, 4, 15, 46, 4, 3, 21]))"
Create a python class that stores customer data as a dictionary and has methods for adding and subtracting customers.,"class Customers:
    def __init__(self):
        self.customers = {}
 
    def add_customer(self, name, info):
        self.customers[name] = info
 
    def remove_customer(self, name):
        if name in self.customers:
            del self.customers[name]"
Write a Python program which,"def replace_substring(string, substring, replacement):
    res = """"
    for i in range(len(string)):
        if string[i:i+len(substring)] == substring:
            res += replacement
            i += len(substring)
        else:
            res += string[i]
    return res"
Create a Python program to find the average of any list of numbers.,"def get_average(numbers):
    # take the sum and divide by number of elements
    return sum(numbers)/len(numbers)

input_list = [2, 4, 6, 8]
result = get_average(input_list)
print(result)"
Create a program to detect a palindrome string in Python.,"# Function to check if a string is a palindrome
def is_palindrome(original_string):  
    reversed_string = original_string[::-1]  
    if original_string == reversed_string:
        return True 
    else:
        return False  
  
# Print result
print(is_palindrome(original_string))"
Can you develop a function in Python to iteratively sum all the numbers in a list of numbers?,"def sum_list(list): 
  total = 0
  for num in list:
    total += num  
  return total

print(sum_list([4, 9, 13, 5])) # Output: 31"
"Cut and paste the following code into Python, then fix the errors:","print(""Hello World!"")"
Create a Python program to check if two strings are anagrams.,"def is_anagram(s1, s2): 
    # Convert both strings to lower case 
    s1 = s1.lower() 
    s2 = s2.lower() 

    # Sort both strings 
    s1 = sorted(s1) 
    s2 = sorted(s2) 

    if s1 == s2: 
        return True 
    else: 
        return False"
Create a Python program to generate Random Strings with 5 characters,"import random

def generate_random_str(): 
    char_set = ""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789""
    random_str = ''.join(random.sample(char_set, 5))

    return random_str"
Generate a python code to sort a dictionary in descending order by its values,"sorted_d = dict(sorted(d.items(), key = lambda kv:(kv[1], kv[0]), reverse = True))
print(sorted_d)"
Write a Python function to generate a random list containing n numbers from 0 to n-1.,"import random

def generate_random_list(n):
 return random.sample(range(n), n)"
Write a python function to find number of integers with odd number of set bits.,"def count_With_Odd_SetBits(n): 
    if (n % 2 != 0): 
        return (n + 1) / 2
    count = bin(n).count('1') 
    ans = n / 2
    if (count % 2 != 0): 
        ans += 1
    return ans "
Write an object oriented Python program to create an Employee class that stores employee details.,"class Employee:
 
    #constructor
    def __init__(self, name, salary, age):
        self.name = name
        self.salary = salary
        self.age = age
 
    #methods
    def getName(self):
        return self.name
 
    def getSalary(self):
        return self.salary
 
    def getAge(self):
        return self.age"
Create a web application using Flask and Python to read in a dataset and print the number of unique items.,"@app.route('/', methods=['GET','POST'])
def read_dataset():
    if request.method == 'POST':
        data = request.form['data']
        unique_items = len(set(data.split()))
        print('Number of Unique items is:',unique_items)
    return render_template('index.html')"
"For a given list of numbers, generate a python code that finds the largest number in the list.","def find_max(arr):
    max_number = 0

    for i in arr:
        if i > max_number:
            max_number = i
    return max_number"
Generate a correct Python program to build an inverted index.,"def build_inverted_index(filename):
    inverted_index = {}

    with open(filename) as fin:
        for line in fin:
            for word in line.split():
                if word in inverted_index:
                    inverted_index[word].append(fin.tell())
                else:
                    inverted_index[word] = [fin.tell()]

    return inverted_index"
"Write a Python program to generate an array of random numbers in the range [0,99], with the length given as input.","import random

def generate_random_array(length):
    return [random.randint(0, 99) for _ in range(length)]"
Create a Python program to group words that are anagrams into a list.,"def group_anagrams(words): 
    result = {} 
      
    for word in words: 
        key = ''.join(sorted(word)) 
        if key in result.keys(): 
            result[key].append(word) 
        else: 
            result[key] = [word] 
  
    return list(result.values()) 

words = ['eat', 'tea', 'tan', 'ate', 'nat', 'bat'] 
print(group_anagrams(words))"
Can you generate a python program to print out the nth Fibonacci number?,"def fibonacci(n): 
    a = 0
    b = 1
    if n < 0: 
        print(""Incorrect input"") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2, n): 
            c = a + b 
            a = b 
            b = c 
        return b 

print(fibonacci(n))"
Edit the following Python code to improve its speed.,"def find_missing_numbers(arr):
    complete_sum = (arr[-1]*(arr[-1]+1))//2
    arr_sum = 0
    for i in arr:
        arr_sum += i
    return complete_sum - arr_sum

print(find_missing_numbers([1,2,3,4,5,7,8,9]))"
Can you write an algorithm in Python to check if a given variable is palindrome?,"def is_palindrome(variable):
  var = variable.lower()
  rev_var = var[::-1]
  if (var == rev_var):
    return True
  else:
    return False"
Build a solution using the given resources. The end result should present the user with a search bar to query a database.,"Create a React application that sends user queries to a Python backend, which runs the queries against a MongoDB database. The backend will communicate results back to the React application. The React application will then display the results to the user."
Create a Python program that takes a list as input and sorts it using bubble-sort algorithm.,"def bubble_sort(lst): 
    for i in range(len(lst)): 
        for j in range(0, len(lst)-i-1): 
            if lst[j] > lst[j+1] : 
                lst[j], lst[j+1] = lst[j+1], lst[j]
 
list = [3,2,5,6,1,4]
bubble_sort(list)
print('Sorted list is: ', list)"
Write a function to find the triplet with sum of the given array,"def check_triplet(A, n, sum, count):
    if count == 3 and sum == 0:
        return True
    if count == 3 or n == 0 or sum < 0:
        return False
    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\
           check_triplet(A, n - 1, sum, count)"
Create a Python script to filter a list and return all elements which are divisible by a given number (i.e. create a filter function).,"def filter_list(num_list, divisor):
    return list(filter(lambda n: n % divisor == 0, num_list))

num_list = [1, 2, 3, 4, 5, 6]
divisor = 2

divisible_nums = filter_list(num_list, divisor)
print(divisible_nums) # [2, 4, 6]"
Write a Python program that takes in a list containing 100 integers and finds the number of occurrences of each number in the list.,"from collections import Counter
 
def findOccurrences(arr):
    counter = Counter(arr)
    for i in counter:
        print('Number', i, 'occurs', counter[i], 'time(s).')
 
arr = [1, 2, 3, 4, 4, 2, 3, 2, 1, 3, 4, 2, 1]
findOccurrences(arr)"
Develop an algorithm in Python to identify the majority element in an unsorted array.,"def find_majority_element(array):
    count = 0
    majority_element = None

    for element in array:
        if count == 0:
            majority_element = element

        count += (1 if element == majority_element else -1)

    return majority_element"
Develop a function in Python that takes in a string of sentences and removes all the punctuations.,"import string

def remove_punctuations(s):
    return s.translate(str.maketrans('', '', string.punctuation))

if __name__ == '__main__':
    sentence = ""This is a sample string!""
    print(remove_punctuations(sentence))"
Generate Python code to find the smallest and largest numbers from a list of numbers.,"# Finding smallest number
list_of_nums = [2, 5, 3, 8, 10, 11, 9]
smallest_num = min(list_of_nums)
print('The smallest number is:', smallest_num)

# Finding largest number
list_of_nums = [2, 5, 3, 8, 10, 11, 9]
largest_num = max(list_of_nums)
print('The largest number is:', largest_num)"
"Given a list, write a Python function to separate the odd numbers from the even numbers.","def separate_odd_even(numbers):
    odd_numbers = []
    even_numbers = []
    for num in numbers:
        if num % 2 == 0:
            even_numbers.append(num)
        else:
            odd_numbers.append(num)
    
    return odd_numbers, even_numbers"
Develop a Python script to calculate the standard deviation of a list of numbers.,"import statistics

# Store the list of numbers 
number_list = [3, 8, 19, 24, 7, 50]
 
# Calculate the standard deviation  
stdev = statistics.stdev(number_list) 
 
# Print the standard deviation 
print(stdev)"
Generate a Python script to calculate the total cost of items in a grocery list.,"# Calculating the total cost of items in a grocery list

list_cost = 0
list_items = {""banana"": 2.5, ""apple"": 3.7, ""orange"": 4.2, ""tomato"": 1.2}

for item, price in list_items.items():
    list_cost += price
    
print('The total cost of the items in the list is {}'.format(list_cost)"
Design a program in Python to Sum the digits in an integer.,"def sum_digits(n):
    sum = 0
    while n > 0:
        sum+= n % 10
        n //= 10
    return sum"
"You are provided an English sentence, please write the corresponding code in Python.","print(""Hello world!"")"
Create a Python program to convert Celsius temperatures to Fahrenheit temperatures.,"def celsius_to_fahrenheit(tempCelsius):
    """"""Convert temperature from Celsius to Fahrenheit.

    Args:
        tempCelsius (int): Temperature in Celsius

    Returns:
        float: Temperature in Fahrenheit
    """"""
    return (tempCelsius * 1.8) + 32

tempCelsius = 15
tempFahrenheit = celsius_to_fahrenheit(tempCelsius)
print(f""{tempCelsius}°C = {tempFahrenheit}°F"")"
Write a Python code to compute the greatest common divisor of two numbers.,"def gcd(x, y): 
    while(y): 
        x, y = y, x % y 
  
    return x

a = int(input(""Enter the first number: ""))
b = int(input(""Enter the second number: ""))
print(gcd(a, b))"
Write a function to find the n’th carol number.,"def get_carol(n): 
	result = (2**n) - 1
	return result * result - 2"
Create a Python program to calculate the sum of the digits for a number that is provided as input.,"# Function to find the sum of digits
def sum_digits(num):
 # Variable to store the sum of digits
 sum = 0
 
 while num > 0:
  digit = num % 10
  sum = sum + digit
  num = num // 10
 
 return sum
 
num = 1234
sum = sum_digits(num)
print(""Sum of digits of %d is %d"" % (num, sum))
# Output: Sum of digits of 1234 is 10"
Create a Python function to sort a list of tuples by the second item in the tuple.,"def sort_by_second_item(my_list): 
    return sorted(my_list, key = lambda x: x[1])"
Solve this system of equations using Python:,"a = np.array([[3, 1, -9], [1, 10, 5], [2, 5, -1]])
b = np.array([15, 55, 0])
x = np.linalg.solve(a, b)

print(x)
# Output 
#[2. 4. 8.]"
Write a Python program to print out all even numbers in a given range.,"def print_even_numbers(start, end):
    for i in range(start, end + 1):
        if i % 2 == 0:
            print(i)

if __name__ == '__main__':
    print_even_numbers(1, 10)

# Output
2
4
6
8
10"
Write a code to find the number of distinct words in a string.,"def count_distinct_words(string):
    words = string.split()  
    distinct_words = set(words)  
    return len(distinct_words)

if __name__ == '__main__':
    string = ""I love to code in Python""
    print(""Number of distinct words:"", count_distinct_words(string))"
Create a function in Python that will take a list of elements and return the sum of their cube.,"def cube_sum(nums): 
  sum = 0 
  for num in nums: 
    sum += num*num*num 
  return sum"
Write a function to sort a list of tuples in increasing order by the last element in each tuple.,"def sort_tuple(tup): 
	lst = len(tup) 
	for i in range(0, lst): 
		for j in range(0, lst-i-1): 
			if (tup[j][-1] > tup[j + 1][-1]): 
				temp = tup[j] 
				tup[j]= tup[j + 1] 
				tup[j + 1]= temp 
	return tup"
Write a function to check if the given tuples contain the k or not.,"def check_K(test_tup, K):
  res = False
  for ele in test_tup:
    if ele == K:
      res = True
      break
  return (res) "
Create a Python program to calculate the distance between two points given their x and y coordinates.,"def calculateDistance(x1, y1, x2, y2):
 distance = ((x2 - x1)**2 + (y2 - y1)**2)**(1/2)
 return distance

# main
x1 = 0
y1 = 0
x2 = 10
y2 = 10

dist = calculateDistance(x1, y1, x2, y2)

print(""Distance between the two points is"", dist)"
"Create a Python program to generate random passwords of fixed length that contain random combinations of numbers, symbols, and uppercase and lowercase letters.","import string
import random

# length of the generated password
length = 8

# generate the random password
alphabet = string.ascii_letters + string.digits + string.punctuation
password = ''.join(random.choice(alphabet) for i in range(length))

# output the password
print(password)"
Write a code snippet in Python to print the last 3 characters of a given string,print(string[-3:])
Write a Python script that prints out a multiplication table from 1 to 10.,"for i in range(1, 11):
    for j in range(1, 11):
        print(i*j, end='\t')
    print()"
Write a function in Python to identify all the keywords present in a given sentence.,"def find_keywords(sentence):
 keywords = set()
 words = sentence.split(' ')
 for word in words:
  if word.iskeyword():
   keywords.add(word)
 return list(keywords)"
Design an algorithm in Python to check if two strings are anagrams.,"def is_anagram(str1, str2): 
	
	# Get lengths of both strings 
	n1 = len(str1) 
	n2 = len(str2) 

	# If length of both strings is not same, 
	# then they cannot be anagram 
	if n1 != n2: 
		return 0

	# Sort both strings 
	str1 = sorted(str1) 
	str2 = sorted(str2) 

	# Compare sorted strings 
	for i in range(0, n1): 
		if str1[i] != str2[i]: 
			return 0

	return 1"
Write a Python script to create a dictionary with each values doubled.,"dictionary = {1:'a', 2:'b', 3:'c'}

doubled = {}
for key, value in dictionary.items():
 doubled[key] = value * 2

print(doubled) # {1: 'aa', 2: 'bb', 3: 'cc'}"
Write a function to find the n-th number in newman conway sequence.,"def sequence(n): 
	if n == 1 or n == 2: 
		return 1
	else: 
		return sequence(sequence(n-1)) + sequence(n-sequence(n-1))"
Create a function in Python that takes a list as an argument and returns the sum of all the numbers in the list.,"def sum_list(nums):
    total = 0
    for num in nums:
        total += num
    return total"
Construct a while loop in Python to iterate through a list of items.,"list_items = ['apple', 'banana', 'pear', 'strawberry']

index = 0
while index < len(list_items):
   item = list_items[index]
   print(item)
   index += 1"
Write a Python program to filter a list of strings according to a given pattern.,"def filter_strings(pattern, strings):
    filtered_strings = [x for x in strings if pattern in x]
    return filtered_strings

result = filter_strings('asterisks', [""daisy"", ""sunflower"", ""asterisk"", ""cat"", ""monkey""])
print(result)"
"Write a function in Python that takes two positive integers, a and b, and returns a random number between 1 and a^b.","def random_int(a, b):
    random_number = random.randint(1, a**b)
    return random_number"
Develop a Python program to sort a given list of strings by length,"def sort_by_length(array):
    return sorted(array, key=len)"
Build a Python program to print the smallest number in a list.,"def smallest_list(list_numbers):
    smallest = list_numbers[0]
    for i in list_numbers[1:]:
        if i < smallest:
            smallest = i
    return smallest"
Write a Python program to scrape a website and find the most common words and phrases used in the content.,"from bs4 import BeautifulSoup
import requests
import collections

URL = ""https://example.com""
page = requests.get(URL)
soup = BeautifulSoup(page.content, 'html.parser')
text = soup.get_text().split()

wordcount = collections.Counter(text)

top_words = wordcount.most_common(10)

print(top_words)"
Make a Python program that takes a list of strings as input and returns a dictionary whose keys are the strings and values are the length of the string.,"def get_string_lengths(list_strings):
    res = {}
    for string in list_strings:
        res[string] = len(string)
    return res

test_strings = ['help', 'me', 'please']
result = get_string_lengths(test_strings)
print(result)"
Write a function in Python to filter out duplicates from a list.,"def remove_duplicates(List): 
  return list(set(List))"
Write a Python function that takes a list of integers as an argument and returns a list of the squares of all the elements in the input list.,"def squareList(inputList): 
	# Returns a list of the squares of all the elements in inputList
	squaredList = [] 

	for num in inputList:
		squaredList.append(num ** 2) 

	return squaredList

# Example 
inputList = [1, 2, 3, 4, 5] 

squaredList = squareList(inputList) 

print(squaredList)

# Output: [1, 4, 9, 16, 25]"
Write a python function to find the sum of squares of binomial co-efficients.,"def factorial(start,end): 
    res = 1 
    for i in range(start,end + 1): 
        res *= i      
    return res 
def sum_of_square(n): 
   return int(factorial(n + 1, 2 * n)  /factorial(1, n)) "
Write a Python script to concatenate two strings.,"def concatenate(word1, word2):
    return word1 + word2"
Serialize a list of dictionaries in Python,"import json

data = [{'name':'John', 'age':30},
{'name':'Paul', 'age':22}]

serialized_data = json.dumps(data)
print(serialized_data)"
Create a function in Python to calculate the square root of a number.,"def cal_sqrt(num):
    return num ** 0.5

num1 = 16
sqrt_of_num1 = cal_sqrt(num1)
print(sqrt_of_num1) # 4.0"
Develop a function in Python to swap the first and last elements of a given input list.,"def swap(list):
    # swapping first and last elements 
    temp = list[0] 
    list[0] = list[-1] 
    list[-1] = temp 

list = [1, 2, 3, 4, 5]
swap(list)

print(list)"
Create a machine learning model in Python using scikit-learn to classify fruits into oranges and apples.,"from sklearn.ensemble import RandomForestClassifier 

# Create a random forest classifier 
clf = RandomForestClassifier(n_estimators=100) 

# Train the model using the training sets 
clf.fit(X_train, y_train) 

# Create predictions
y_pred = clf.predict(X_test) 

# Evaluate the model
print('Accuracy Score :', accuracy_score(y_test, y_pred))"
Generate a function in Python for generating a random integer between two given numbers (inclusive).,"import random

def random_integer(start, end):
  return random.randint(start, end)"
Generate a Python program to transform a given list of integers into a dictionary with each list element as the key and its square root as the value.,"def to_dict(lst): 
    # Initialize a new dictionary 
    new_dict = {}
      
    # Iterate over the list and assign the square root of each element as value  
    for item in lst:
        new_dict[item] = item**0.5
      
    # Return the dictionary  
    return new_dict"
Write a Python program to generate random walk data.,"""""""
Write a Python program to generate random walk data.
""""""

import numpy as np

def random_walk(n):
    """"""
    Generates a n-step random walk
    """"""
    steps = np.random.normal(0, 1, n)
    return np.cumsum(steps)

if __name__ == '__main__':
    n = 10
    random_walk_data = random_walk(n)
    print(random_walk_data)"
Compute the mean value of an array of integers using Python.,"def calculate_mean(values):
    total_sum = 0

    for num in values:
        total_sum += num

    return total_sum / len(values)

values = [1, 2, 3, 4, 5]

mean = calculate_mean(values)
print(""Mean Value:"", mean)"
Write Python code to include exception handling in this code.,"try:
    a = 1
    b = 0
    c = a / b
    print(c)
except ZeroDivisionError:
    print(""Cannot divide by zero"")"
Write a code in Python to find out how long a given string is.,"def get_length(string):
    return len(string)

length = get_length(""Hello"")
print(length)"
Write a Python program to generate a random password of 8 characters including at least one number and one lowercase letter.,"import string
import random

def generate_password(): 
    chars = string.ascii_lowercase + string.digits + string.ascii_uppercase
    size = 8
    return ''.join(random.choice(chars) for x in range(size))

password = generate_password()
print(password)"
Write a python program to convert the given temperature from Celsius to Fahrenheit.,"""""""
Convert the given temperature from Celsius to Fahrenheit
""""""

def celsius_to_fahrenheit(celsius):
    fahrenheit = (celsius * 9/5) + 32
    return fahrenheit

if __name__ == '__main__':
    celsius = 0
    print(celsius_to_fahrenheit(celsius))"
Can you design a Python program to sort a list of tuples?,"def sort_tuples(lst): 
    return sorted(lst, key = lambda x : x[1]) 
  
# Driver code 
tuple_list = [(4, 20), (3, -5), (10, 0)] 
print(sort_tuples(tuple_list))"
Generate a Python program to generate a random password of length 10 containing alphanumeric as well as special characters.,"import string
import random

def generate_password():
  chars = string.ascii_letters + string.digits + '!@#$%^&*'
  size = 10
  return ''.join(random.choice(chars) for x in range(size,20))

print(generate_password())"
Combine two lists into a dictionary using Python.,"""""""
Combine two lists into a dictionary using Python
""""""

list1 = [1, 2, 3]
list2 = ['a', 'b', 'c']

dict = dict(zip(list1, list2))

print(dict) # Output {1: 'a', 2: 'b', 3: 'c'}"
Write a Python function to find all factors of a given number,"def all_factors(num):
    results = []
    for i in range(1, num + 1):
        if num % i == 0:
            results.append(i)
    return results"
Create a Python script to extract the top 10 words from the text.,"import collections

def extract_top_words(file_name):
    with open(file_name, 'r') as f:
        data = f.read()
        words = data.split()

    counts = collections.Counter(words).most_common(10)
    return counts

file_name = 'test.txt'
top_words = extract_top_words(file_name) 
print(top_words)"
Write a Python function to find the maximum of three numbers.,"def max_of_three(a, b, c):
    if a > b and a > c:
        return a
    elif b > a and b > c:
        return b
    else:
        return c

result = max_of_three(3, 4, 5)
print(result)"
Write a function in Python for calculating the sum of squares of a list of elements.,"def calculateSumSquare(lst):
    sum = 0
    for element in lst:
        sum += element**2
    return sum

lst = [3, 5, 7]
print(calculateSumSquare(lst))"
"Create a neural network with two layers using Keras, a Python library for deep learning.","import keras
from keras.models import Sequential
from keras.layers import Dense

# Define the model
model = Sequential()
model.add(Dense(8, input_dim=6, activation='relu'))
model.add(Dense(4, activation='softmax'))
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])"
"Write a Python program to calculate the sum of two given integers, if the two values are equal then return the triple of their sum.","def calculate_sum(a, b):
    if a == b:
        return (a + b) * 3
    else:
        return a + b
    
a = 2
b = 2
result = calculate_sum(a, b)
print(result)"
Write a Python program to crawl the web and extract webpages into a document.,"import requests
from bs4 import BeautifulSoup

def crawl(url):
 page = requests.get(url)
 soup = BeautifulSoup(page.text, ""html.parser"")
 with open(""document.txt"", ""w"") as f:
 f.write(soup.prettify())

crawl(""https://www.example.com"")"
Create a basic Python program that includes a function to find the greatest common divisor (GCD) of two numbers.,"def gcd(x, y): 
    while(y): 
        x, y = y, x % y 
  
    return x 
  
# Driver code
num1 = 21
num2 = 15
  
print(""The GCD is"", gcd(num1, num2))"
Find a way to split the string below into an array of length 3.,"string = ""Python is a great language""
arr = string.split(' ', 3) 
print(arr)"
Analyze the following Python function to detect any potential errors.,"The function is attempting to modify the list while iterating over it. This can lead to unexpected behavior and should be avoided. To fix the code, the list should be copied before the iteration takes place: 

def expand_list(list):
    list_copy = list[:]   # make a copy of the list
    for item in list_copy:
        list *= 2"
Implement a Python program to find the maximum and minimum of a list.,"# Function to find the maximum and minimum of a list
def find_max_min(nums):
    max = nums[0]
    min = nums[0]
    for num in nums:
        if num > max:
            max = num
        if num < min:
            min = num
    return (max, min)

# Test program
nums = [3, 2, 8, 9, 5]
max, min = find_max_min(nums)
print('Maximum:', max)
print('Minimum:', min)"
Develop a Python program to calculate the slope of a line using two given points,"def slope(point1, point2):
    x1, y1 = point1
    x2, y2 = point2
   
    if x2 - x1 == 0:
        return None
    else:
        return (y2 - y1) / (x2 - x1)

point1 = (1, 0)
point2 = (0, 1)
slope = slope(point1, point2)
print(slope)"
"Code a Python program to classify elements in a provided array into two categories, odd and even.","def classify_elements(arr):
    odd = []
    even = []
    for x in arr:
        if x % 2 == 0:
            even.append(x)
        else:
            odd.append(x)
    return (odd, even)

elements = [1, 2, 3, 4, 5, 6]
result = classify_elements(elements)

print(""Odd Elements:"")
print(result[0])

print(""Even Elements:"")
print(result[1])"
"Generate a hashmap implementation in Python. The implementation should store keys and values, and be able to retrieve the value stored under the given key.","class HashMap:
 
 def __init__(self):
 self.map = {}
 
 def put(self, key, value):
 self.map[key] = value
 
 def get(self, key):
 return self.map.get(key)"
Create a Python function to print every character in a given string.,"# Python Function
def printChars(string): 
    # Iterate over the string 
    for i in range(len(string)):  
        print(string[i]) 
  
# Test
string = ""Hello World!""
printChars(string)"
Write a Python program to divide a given string into pairs such that each pairs has 2 characters.,"def split_into_pairs(inputString):
    resultList = []
    counter = 0
    
    while counter < len(inputString):
        resultList.append(inputString[counter:counter + 2])
        counter += 2
    
    return resultList

pairs = split_into_pairs(""abcd"")

print(pairs)"
"Please generate a Python function that takes a string as input and prints every character in the string contained between ""a"" and ""e"" in a newline.","def extract_abce(string):
  output = """"
  for char in string:
                    if ord(char) >= 97 and ord(char) <= 101:
                                    output += char + ""\n""
  print(output)"
"Design a Python program to calculate simple interest given the principal amount, rate of interest and duration.","def calculateSimpleInterest(principal, rate, duration):
    if rate != 0:
        interest = (principal * rate * duration) / 100
    else:
        interest = 0
    return interest"
Write a function to sort a tuple by its float element.,"def float_sort(price):
  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)
  return float_sort"
Design a program in Python to find the greatest of three numbers.,"def greatest_num(num1, num2, num3):
    greatest = 0
    if num1 > num2 and num1 > num3:
        greatest = num1
    elif num2 > num1 and num2 > num3:
        greatest = num2
    else:
        greatest = num3
    print(""The greatest of the three numbers is:"", greatest)
    
# Here we call the function with the three numbers 
greatest_num(25, 39, 12)"
Generate a function in Python which takes two values and returns the largest one.,"def max_of_two_values(val1, val2):
    if val1 > val2:
        return val1
    else:
        return val2

# Function call with two arguments
largest_one = max_of_two_values(38, 64)

# Print the largest number
print('The largest one is:', largest_one)"
Write a Python script to remove all repeated characters from a string.,"def removeRepeatedChars(str):
    result = """"
    for c in str:
        if c not in result:
            result += c
    return result

print(removeRepeatedChars(""aaabbccddeeff""))"
Create a program in Python to find the second highest number in a list of numbers.,"# Create an array of numbers
nums = [8, 5, 11, 6, 9, 15]

# Sort the array in descending order
nums.sort(reverse=True)

# Get the second highest number
second_highest = nums[1]

# Output the result
print(""The second highest number is"", second_highest)"
Generate a function in Python that takes an integer value from a dictionary and returns its value as a string.,"def get_string_value(input_dict):
  """"""Return string value in the input dictionary""""""
  output_value = """"
  for key, value in input_dict.items():
      output_value = str(value)
  return output_value"
Design a natural language processing algorithm in Python to extract names from a text.,"import nltk

#tokenize the text
text = ""John and Mary went to the park. They had a great time.""
tokenized_text = nltk.word_tokenize(text)

# tag the tokens with their part-of-speech
tagged_words = nltk.pos_tag(tokenized_text)

# filter for proper nouns
names = [word for word,pos in tagged_words if (pos == 'NNP' or pos == 'NNPS')]

print(names)
# Output: ['John', 'Mary']"
Sum up all the elements of a given list in Python.,"my_list = [10,20,30,40]

total = 0
for num in my_list:
    total += num

print(""The sum of all elements in the list is: "" + str(total))"
Create a program in Python that rotates an array right by one place,"def rotateArrayRight(arr): 
    temp = arr[len(arr) - 1] 
    
    for i in range(len(arr)-1, 0, -1): 
        arr[i] = arr[i-1] 
          
    arr[0] = temp 
    return arr

arr = [1, 2, 3, 4, 5]

print(rotateArrayRight(arr))"
Generate a Python program to convert a given binary string into its equivalent decimal number.,"# Convert the given binary string to an integer number
binary_string = ""1101""
decimal_number = int(binary_string, 2)

# Print the result
print(decimal_number) # 13"
Write a code snippet to convert a Python object to a JSON string.,"import json

obj = {
  ""name"": ""John"",
  ""age"": 42
}

json_string = json.dumps(obj)"
Create a function in Python to detect cycles in a given linked list.,"def detect_cycle(head): 
   slow_p = head 
    fast_p = head 
    while(slow_p and fast_p): 
        slow_p = slow_p.next
        fast_p = fast_p.next.next
        if slow_p == fast_p: 
            return True
    return False"
Rewrite the following Python program using recursion to sum the numbers in a list.,"# Using recursion to sum the numbers in a list
def recursive_sum(arr):
    if len(arr) == 0:  
        return 0   # Base case 
    else:
        return arr[0] + recursive_sum(arr[1:])   # Recursive case

print(""Sum of the list:"", recursive_sum([2, 4, 6, 8]))"
Write a function to remove a specified column from a given nested list.,"def remove_column(list1, n):
   for i in list1: 
    del i[n] 
   return list1"
Create a Python function that returns the longest string in a list of strings.,"def get_longest_string(list_strings):
 longest_string = list_strings[0]
 for item in list_strings:
 if len(item) > len(longest_string):
 longest_string = item
 return longest_string

list_strings = [""abc"", ""def"", ""ghij""]
print(get_longest_string(list_strings)) # prints ""ghij"""
Generate an algorithm in Python to remove an element from a given array at a given index.,"def remove(arr, index): 
  
      # If the array is empty or index is not in array range 
      if len(arr) == 0 or index >= len(arr): 
          return arr 
  
      # Remove the element from the array 
      tempArr = arr[:index] + arr[index+1:] 
              
      return tempArr"
Write a Python script to check whether a given number is in between two given values.,"if lowerBound <= num <= upperBound:
    print(""The number is inside the limit."")
else:
    print(""The number is outside the limit."")"
Generate a Python program which determines if a given number is divisible by 7,"def is_divisible_by_7(num):
    if num % 7 == 0:
        return True
    else:
        return False

result = is_divisible_by_7(28)
print(result)"
Design aPython program to replace the last element in a list with another list.,"def replace_last_element(list1, list2): 
    list1[-1:] = list2 
    return list1"
Develop a Python program that tells how many characters are there in a given string.,"# Python program to count the number of characters in a string

string = input('Enter a string: ')

count = 0
for char in string:
    count += 1

print(f'The string contains {count} characters.')"
Write a function in Python to generate n numbers of Fibonacci series.,"def fibonacci_series(n): 
    # First two terms 
    a = 0
    b = 1
    c = 0
    print(""Fibonacci Series:"", end = "" "")
    print(a , b , end = "" "")
    for i in range(2,n): 
        c = a + b 
        a = b 
        b = c 
        print(c , end = "" "") 

# Output should come like
# 0 1 1 2 3 5 8 13 21 34"
"Write a Python class for a book library. The class should have two methods: one for adding books to the library, and one for searching for books by title.","class BookLibrary:
 def __init__(self):
  self.books = []

 def add_book(self, book):
  self.books.append(book)

 def search_by_title(self, title):
  return [book for book in self.books if book.title.lower() == title.lower()]"
Program a function in Python that takes a string and capitalizes the first letter of each word.,"def capitalize_words(string):
  words = string.split()
  capitalized_words = [word.capitalize() for word in words]
  return ' '.join(capitalized_words)"
"Develop a Python function to calculate the maximum, minimum and average of a given list.","def calculate_stats(numbers):
    maximum = max(numbers)
    minimum = min(numbers)
    average = sum(numbers)/len(numbers)
    return (maximum, minimum, average)"
Write a python function to find the first odd number in a given list of numbers.,"def first_odd(nums):
  first_odd = next((el for el in nums if el%2!=0),-1)
  return first_odd"
Write a Python program to get the largest number from a list.,"def get_largest_number(nums):
  return max(nums)"
Generate code that optimizes a Python program so it runs faster.,"import numpy as np

n = 30

# Optimized code using numpy
result = np.sum(np.multiply(np.arange(n), np.arange(n)))"
"Design a data structure in Python to store employee information (name, age, salary, etc.).","class Employee:
 def __init__(self, name, age, salary):
  self.name = name
  self.age = age
  self.salary = salary

employeeA = Employee('John Doe', 35, 5000)
employeeB = Employee('Jane Smith', 28, 6000)"
Create a python program to remove duplicate entries in a list and return the unique items.,"def remove_duplicate(list): 
	return list(set(list)) 

remove_duplicate([1,1,2,3,4,4]) #returns [1, 2, 3, 4]"
"Create a Python method that takes a list and a value as arguments, and returns the index of the value if it exists in the list.","def find_index(list, value):
 for i in range(len(list)):
 if list[i] == value:
 return i
 return -1"
Generate python code which prints all the prime numbers in the range of 1-100,"def print_primes():
    for number in range(2, 101):
        prime = True
        for i in range(2,number):
            if (number % i == 0):
                prime = False
        if prime:
            print(number, end=' ')
            
print_primes()"
Implement a class in Python called “Multiplier” with a constructor function that takes an argument “factor”. The class should have a method called “multiply” which takes a number as an argument and returns this multiplied by “factor”.,"class Multiplier:
    def __init__(self, factor):
        self.factor = factor
 
    def multiply(self, num):
        return num * self.factor"
Create a Python class to represent a bank account.,"class BankAccount:
    def __init__(self, owner, balance):
        self.owner = owner
        self.balance = balance
        
    def deposit (self, amount):
        self.balance += amount
        return self.balance
        
    def withdraw (self, amount):
        self.balance -= amount
        return self.balance"
Convert the given Python code to Java.,"public static int search(int[] arr, int x) { 
        int n = arr.length; 
        for (int i = 0; i < n; i++) { 
            if (arr[i] == x) { 
                return i; 
            } 
        } 
        return -1; 
    }"
Create a Python script for scraping a website and extracting a list of URLs from it.,"import requests
from bs4 import BeautifulSoup

url = 'https://example.com'

response = requests.get(url)
soup = BeautifulSoup(response.content, 'html.parser')

urls = []

for link in soup.find_all('a', href=True):
 if link['href'].startswith('http'):
 urls.append(link['href'])

print(urls)"
Write a Python program to calculate the total number of days between two given dates.,"from datetime import date 

def daysDifference(date1, date2): 
    return (date2-date1).days 

date1 = date(2020, 12, 20) 
date2 = date(2021, 1, 10) 
print(daysDifference(date1, date2))"
Write an optimal code to calculate the sum over a range of numbers,"# Python 3 program to find sum over a range
# A recursive function to find the sum of given range
def rangeSum(start, end):
  
    # If range consists of only one number
    if (start == end):
        return start
    return start + rangeSum(start + 1 , end)
  
# Driver code
start = 1
end = 5
print(rangeSum(start, end))"
Create a simple Python program that finds the number of even numbers in a given list.,"def count_even_numbers(list1):
    count = 0
    for item in list1:
        if item % 2 == 0:
            count += 1
    return count

print(count_even_numbers(list1))"
Create a Python program that takes a user's input and converts it into pig latin.,"def pig_latin(word):
 vowels = ""aeiouy""
 if word[0].lower() in vowels:
  return word + ""ay""
 else:
  return word[1:] + word[0] + ""ay""

print(pig_latin(""hello"")) # Output: ""ellohay"""
Create a Python program to find the sum of all the multiples of 3 and 5 below 1000.,"total = 0
for i in range(1000):
    if i % 3 == 0 or i % 5 == 0:
        total += i
print(total)"
"Given a list of integers, write a code in Python to find a sublist whose sum is divisible by 7.","def find_sublist_divisible_by_7(list):
    for i in range(len(list)):
        sum_so_far = 0
        for j in range(i, len(list)):
            sum_so_far += list[j]
            if sum_so_far % 7 == 0:
                return list[i:j+1]
    return None"
Optimize a Python program to reverse the elements of a list.,"def reverse_list(l): 
    return [ele for ele in reversed(l)] 
  
my_list = [1, 2, 3, 4, 5]
 
print(reverse_list(my_list))"
Generate a code in Python to sort an array using insertion sort.,"def insertion_sort(arr):
    for j in range(1, len(arr)):
        key = arr[j]
        i = j - 1
        while i >= 0 and arr[i] > key:
            arr[i + 1] = arr[i]
            i -= 1
        arr[i + 1] = key
    return arr

# Main program
input_array = [1, 3, 5, 2, 4]
output_array = insertion_sort(input_array)
print(output_array)"
Write a function in Python to count the number of vowels in a string.,"def count_vowels(string):
    count = 0
    vowels = set(""aeiouAEIOU"")
    for letter in string:
        if letter in vowels:
            count += 1
    return count"
Create a Python script that fills in the missing data with median values.,"import numpy as np

def fillWithMedian(data):
    data = np.array(data)
    median_val = np.nanmedian(data)
    data[np.isnan(data)] = median_val 
    return data

data = [1, None, 4, 5, None, 10]
print(fillWithMedian(data))"
Develop a Python program that counts the number of times each word appears in a given sentence.,"sentence = input('Enter a sentence: ') 
words = sentence.split()
word_freq = {} 
  
for word in words: 
    if word in word_freq: 
        word_freq[word] += 1
    else: 
        word_freq[word] = 1
  
for key, value in word_freq.items(): 
    print (key,"":"", value)"
Write a basic web scraper in Python using the requests and BeautifulSoup libraries to extract the titles of articles from a given URL.,"import requests
from bs4 import BeautifulSoup

url = 'https://en.wikipedia.org/wiki/Python_(programming_language)'
r = requests.get(url)
soup = BeautifulSoup(r.content, 'html.parser')

articles = soup.find_all('h1', class_='firstHeading')
for article in articles:
 print(article.text)"
Create an algorithm in Python to detect an Anagram.,"def isAnagram(a, b):
a = a.lower()
b = b.lower()

# remove spaces and sort letter
a_sorted = ''.join(sorted(a.replace(' ', '')))
b_sorted = ''.join(sorted(b.replace(' ', '')))

# check if they are equal
if a_sorted == b_sorted:
 return True
return False

a = 'listen'
b = 'silent'
print(isAnagram(a, b))

# Output: True"
Write a Python program to calculate the sum of the values for all numbers between 1 and n (inclusive).,"def sum_of_values(n):
    """"""Find the sum of all numbers between 1 and n (inclusive).""""""
    return sum(range(1, n+1))"
Generate a list of prime numbers from 1 to 100 in Python.,"# Initialize a list
primes = []

for x in range(2, 101):
    prime = True
    for y in range(2, x):
        if x % y == 0:
            prime = False
            break
    if prime:
        primes.append(x)
        
print(primes) # Output: [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]"
Design a small container application in Python which asks to enter numbers and find the sum.,"def container_application():
    print(""Welcome to the container application!"")
    print(""Enter the numbers separated by a space:"")
    nums = input().split()
    sum = 0
    for num in nums:
        sum += int(num)
    print(""The sum of the numbers is:"", sum)
 
container_application()"
Generate a python program to output the largest element in a list.,"def largest_element(x):
    max_element = x[0]
    for number in x:
        if number > max_element:
            max_element = number
    return max_element"
What should this Python program do?,"def is_palindrome(s):
    '''This function returns True if the string s is a palindrome and False if it isn't.''' 
    return s == s[::-1]  # Checks if s is the same as its reverse."
Generate a python script which sorts a series of numbers from lowest to highest.,"unsorted_list = [7, 2, 5, 1, 3]
def bubblesort(unsorted_list):
    length = len(unsorted_list)
    for i in range(length):
        for j in range(length - i - 1):
            if unsorted_list[j] > unsorted_list[j + 1]:
                unsorted_list[j], unsorted_list[j + 1] = unsorted_list[j + 1], unsorted_list[j]
    return unsorted_list
print(bubblesort(unsorted_list))"
Fix the syntax error in the provided Python function.,"def add_numbers(x, y):
    return x + y"
"Create a Python program to display the Fibonacci sequence up to the nth term, as specified by the user.","def fibonacci(n): 
 # Fibonacci numbers are 0, 1, 1, 2, 3, 5,... 
 a = 0
 b = 1
 if n < 0: 
 print(""Incorrect input"") 
 elif n == 0: 
 return a 
 elif n == 1: 
 return b 
 else: 
 for i in range(2,n): 
 c = a + b 
 a = b 
 b = c 
 return b 

print(fibonacci(n))"
"Create a Python class named 'Song' with an attribute 'title', a constructor, and a method 'play' that prints the title of the song.","class Song:
    def __init__(self, title):
        self.title = title

    def play(self):
        print(self.title)"
Design a program in Python that takes a list of strings and returns a list containing the length of each of the strings.,"def string_lengths(arr):
    lengths = [len(s) for s in arr]
    return lengths

result = string_lengths(['hello', 'world'])
print(result)"
Create a REST API call in Python that sends a GET request and displays the response.,"import requests

# Send GET request
r = requests.get('https://reqres.in/api/users')

# Get response
if r.status_code == 200:
 print(r.text)"
Create a program in Python to print all numbers divisible by 7 and not multiple of 5 between 2000 and 3200 (both included).,"for num in range(2000, 3201):
    if (num % 7 == 0) and (num % 5 != 0):
        print(num)"
Generate a python program that takes the diameter of a circle as an input and outputs the circumference of the circle.,"def circumference_of_circle(diameter):
    circumference = 3.14 * diameter
    return circumference"
Design a program in Python to classify data into one of two categories,"def classify_data(data):
    if data[0] <= 5:
        return 'Category A'
    else:
        return 'Category B'

x = classify_data([4, 5, 8, 1, 9])
print(x)"
Write a Python program to read input from the user?,"# prompt the user for input
data = input('Enter a value: ')

# print the user's input
print('You entered:', data)"
Write a function to extract maximum and minimum k elements in the given tuple.,"
def extract_min_max(test_tup, K):
  res = []
  test_tup = list(test_tup)
  temp = sorted(test_tup)
  for idx, val in enumerate(temp):
    if idx < K or idx >= len(temp) - K:
      res.append(val)
  res = tuple(res)
  return (res) "
"create a loop in Python to generate the following sequence [1,2,4,8,16,32,64]","seq = [1]

for i in range(1,7):
    seq.append(seq[-1]*2)

print(seq)"
Design a graphical user interface application in Python to display today's date in the format DD/MM/YYYY.,"import datetime
import tkinter

root=tkinter.Tk()
root.title(""Date"")

# gets current date
today = datetime.datetime.now()
# formats date
date_string = today.strftime(""%d/%m/%Y"")

# creates label with date
current_date_label=tkinter.Label(root, text=date_string, fg=""blue"")
# pack/add label to app
current_date_label.pack()

# run application
root.mainloop()"
Develop an algorithm in Python that finds the minimum element from a given array.,"def findMin(arr): 
     
    # Initialize minimum element as first 
    # element of array 
    min = arr[0] 
  
    # Loop through the array and get 
    # the current element 
    for i in range(len(arr)): 
        if arr[i] < min: 
            min = arr[i] 
  
    return min

arr = [14, 7, 25, 16]

print(findMin(arr))"
Write a Python program to find the number of uniquely identifiable countries in the list given below.,"def unique_countries(lst): 
    return len(set(lst))"
"Construct a program in Python to compute the sum of square numbers in a given range, including the start and end numbers.","def sumOfRanges(start, end):
 sum = 0
 
 for i in range(start, end+1):
 sum += i*i
 
 return sum

sumOfRanges(10,20) #673"
Write a Python program to calculate the sum of an arbitrary number of arguments.,"def calc_sum(*args):
    result = 0
    for num in args:
        result += num
    return result

result = calc_sum(1, 2, 3, 4, 5)
print(result)"
Create a function in Python to return the index of the largest value in given array.,"def max_index(arr):
    max_value = arr[0]
    max_index = 0

    for i in range(1, len(arr)):
        if arr[i] > max_value:
            max_index = i
            max_value = arr[i]
    
    return max_index"
Create a python program that reads a list of numbers and returns the average of the numbers in the list.,"def compute_average(numbers):
    total = 0
    for num in numbers:
        total += num
    return total / len(numbers)

if __name__ == '__main__':
    numbers = [1, 5, 7, 10]
    print(compute_average(numbers)) # 6.0"
Code a Python script to find the sum of the digits in a given number.,"def find_sum_of_digits(n):
    sum = 0
    while(n > 0):
        rem = n % 10
        sum += rem
        n = n // 10
    return sum"
Generate a python program to find the most frequent element in a given array.,"def most_frequent(arr):
    max_val = 0
    max_count = 0
    counts = {}
    for i in arr:
        if i in counts:
            counts[i] += 1
        else:
            counts[i] = 1
        if counts[i] > max_count:
            max_val = i
            max_count = counts[i]
    return max_val"
Combine two strings using Python.,"string1 = ""Hello ""
string2 = ""World""

new_str = string1 + string2

print(new_str)"
Write a code snippet in Python to split a string by its whitespaces.,"string = ""This is a sample string""
str_list = string.split()
print(str_list)"
Create a function in Python using list-comprehension to turn all the strings in the list to lowercase.,"def to_lowercase(words):
    return [word.lower() for word in words]"
"Create a Python program to store information of a student like name, age and marks in three different variables and print the stored values.","name = ""John""
age = 15
marks = 90

print(""Name: "", name)
print(""Age: "", age)
print(""Marks: "", marks)"
Create a function in Python to generate a random data matrix with a given shape.,"import numpy as np

def generate_random_matrix(rows, columns):
    matrix = np.random.randint(low = 0, high = 100, size = (rows,columns))
    return matrix"
Generate a class in Python to represent a student.,"class Student:
    def __init__(self, name, age, major):
        self.name = name
        self.age = age
        self.major = major
        
    def get_name(self):
        return self.name
    
    def get_age(self):
        return self.age
    
    def get_major(self):
        return self.major"
Create a python program to concatenate n strings and return the concatenated string,"def concatenate_strings(input_strings):
    output_string = """"
    for string in input_strings:
        output_string += string
    return output_string"
Generate code to create a REST API in Python that parses JSON and returns the values of a nested object.,"@app.route('/parseJSON', methods=['POST'])
def parse_json():
    data = request.get_json()
    name = data['data']['name']
    age = data['data']['age']

    response = {
        ""name"": name,
        ""age"": age
    }
    return jsonify(response)"
Optimize this program in Python to find the highest peak in a given array.,"def find_highest_peak(arr):
  highest_peak = arr[0]
  for i in range(1, len(arr)): 
    highest_peak = max(highest_peak, arr[i]) 
  return highest_peak"
Write a Python program to remove all duplicate items from a list.,"def remove_duplicates(lst): 
	return list(dict.fromkeys(lst)) 

result = remove_duplicates([1, 2, 2, 4, 5]) 
print(result)"
Write a function to find the nth delannoy number.,"def dealnnoy_num(n, m): 
	if (m == 0 or n == 0) : 
		return 1
	return dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)"
Write a Python program to get a randomly generated board configuration given a board size.,"import random

def get_board_config(size):
    board = [[0 for _ in range(size)] for _ in range(size)]

    for i in range(size):
        for j in range(size):
            board[i][j] = random.randint(0, 1)

    return board"
Edit this Python code to execute the following tasks:,"for i in range(1, 11):
    print(str(i) + "" squared is "" + str(i ** 2))"
Write a Python code snippet to calculate the average of the given numbers.,"def calc_avg(nums):
    total = 0
    for n in nums:
        total += n
 
    return total/len(nums)
 
avg = calc_avg([5, 10, 15, 20, 25])
print(avg)"
Generate a Python program to find the sum of all even numbers in an array,"def sumEven(array):
    sum = 0
    for x in array:
        if x % 2 == 0:
            sum += x
    return sum

print(sumEven([1, 5, 9, 11, 2, 8]))"
"Create a python program that takes two numbers as input, and outputs the result of multiplying them.","def multiply(a, b):
    return a * b

ans = multiply(3, 5)
print(ans) # 15"
Write a Python function to sort a list of numbers in ascending order.,"def sort_list(list): 
  list.sort() 
  return list
  
print(sort_list([2,4,3,1,5]))"
Compute the nearest prime number less than the given number using a python program.,"def nearest_prime(num):
    if num <= 2:
        return -1
    for i in range(num-1,2,-1):
        for j in range(2,i):
            if i % j == 0:
                break
        else:
            return i

print(nearest_prime(173))"
Create a Python program which takes a given list of temperatures (in Celsius) and converts them to Fahrenheit.,"def c2f(c):
 return (c * 9 / 5) + 32

celsius = [21, 12, -4]

fahrenheit = []
for temp in celsius:
 fahrenheit.append(c2f(temp))

print(fahrenheit) 
# Output: [69.8, 53.6, 24.8]"
Rewrite a python program to take input from the user,"n1 = int(input(""Enter first number: ""))
n2 = int(input(""Enter second number: ""))"
Generate a python function to calculate the volume of a rectangular prism.,"def calculate_volume_rectangular_prism(length, width, height):
    return length * width * height;"
Create a class in Python that implements the stack data structure.,"class Stack:
 def __init__(self):
 self.stack = []
 
 def push(self, item):
 self.stack.append(item)
 
 def pop(self):
 if self.is_empty():
 return None
 return self.stack.pop()
 
 def is_empty(self):
 return len(self.stack) == 0"
"Create a python class named ""Car"" with two fields ""make"" and ""model"".","class Car:
    def __init__(self, make, model):
        self.make = make
        self.model = model"
Write a Python program to convert a positive integer to negative or vice versa using bitwise NOT operator.,"def convert_to_negative(x): 
    return ~x + 1 
  
def convert_to_positive(x): 
    return ~(x-1)"
Write a Python program to check given temperature is between two numbers.,"if (temperature >= low_limit and temperature <= high_limit):
    print(""Temperature is in range"")
else:
    print(""Temperature is out of range"")"
Develop a function in Python that will find the sum of all prime numbers in a given range.,"def primeSum(lower, upper): 
    sum = 0
    for num in range(lower, upper + 1): 
        if num > 1: 
            for i in range(2, num): 
                if (num % i) == 0: 
                    break 
            else: 
                sum += num 
  
    return sum"
Write a function to perform the exponentiation of the given two tuples.,"def find_exponentio(test_tup1, test_tup2):
  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res)
"
"Using the comment as a guide, replace the ""TODO"" comment with the necessary code for a decision tree classifier in Python.","import pandas as pd
from sklearn.tree import DecisionTreeClassifier

# Define X and y
X = pd.DataFrame(columns=['feature1', 'feature2', 'feature3'])
y = pd.DataFrame(columns=['target'])

# Train the decision tree classifier
clf = DecisionTreeClassifier().fit(X, y)"
Optimize a Python function that takes two strings and counts the number of times the first string occurs in the second string.,"def count_occurences(s1, s2):
    count = 0
    for i in range(len(s2) - len(s1) + 1):
        if s2[i:i + len(s1)] == s1:
            count += 1
    return count

if __name__ == '__main__':
    s1 = 'aa'
    s2 = 'aaaaaa'
    count = count_occurences(s1, s2)
    print(count)"
Create a Python program to encrypt a given string using ROT13 string encoding.,"import string
 
def rot13(str):
  rot13 = str.maketrans(
    ""ABCDEFGHIJKLMabcdefghijklmNOPQRSTUVWXYZnopqrstuvwxyz"", 
    ""NOPQRSTUVWXYZnopqrstuvwxyzABCDEFGHIJKLMabcdefghijklm"")
  return str.translate(rot13)

print(rot13(str))"
Write a Python function for converting an array of strings into a list of integers,"def convert_strings_to_int(arr): 
  return list(map(int, arr))
  
list_of_integers = convert_strings_to_int([""1"", ""2"", ""3"", ""4""]) # [1, 2, 3, 4]"
Compare a given set of strings and sort them in descending order using Python.,"strings = ['Python', 'Java', 'C++', 'C']

strings.sort(reverse=True)

print(strings) # ['Python', 'Java', 'C++', 'C']"
Create a Python program which asks the user to enter 10 numbers and it prints out the largest number that was entered.,"numbers = []

for i in range(10):
    n = int(input(""Enter a number: ""))
    numbers.append(n)

print(""The largest number entered is:"", max(numbers))"
Write a Python program to swap keys and values in a given dictionary.,"def swap_dict_keys_values(d):
  d_new = dict()
  for key, value in d.items():
    d_new.setdefault(value,[]).append(key)
  return d_new"
Create a web API in Python that will return a list of all users.,"@app.route('/users/api/v1.0/users')
def get_users():
 users = [
 {
 'id': 1,
 'name': 'John Smith',
 'email': 'john.smith@example.com'
 },
 {
 'id': 2,
 'name': 'Jane Doe',
 'email': 'jane.doe@example.com',
 }
 ]
 return jsonify({'users': users})"
"Create a Python program to sum all the numbers below 1000 which are divisible by 2, 3 or 5.","sum_of_docs = 0
for i in range(1000):
     if i % 2 == 0 or i % 3 == 0 or i % 5 == 0:
          sum_of_docs += i
 
print(sum_of_docs)"
Write a function to find the closest smaller number than n.,"def closest_num(N):
  return (N - 1)"
Generate a for loop in Python to print numbers from 1 to 10,"for i in range(1,11):
    print(i)"
Generate a Python program to calculate the Fibonacci sequence up to a certain number.,"def fibonacci_sequence(num): 
    result = [0, 1] 
    if num < 0: 
        return None
    elif num == 0 or num == 1: 
        return 0
    elif num == 2: 
        return result 
    else: 
        for i in range(2,num): 
            next_num = result[i-1] + result[i-2] 
            result.append(next_num) 
        return result 

print(fibonacci_sequence(num))"
Code an optimization problem using Python that finds the maximum of a function with two optimization variables and a given constraint.,"from scipy.optimize import minimize

def f(x):
 return 3*x[0] + 2*x[1]

def con(x):
 return x[0] + x[1] - 10

cons = ({'type': 'ineq', 'fun': con})

result = minimize(f, [0, 0], method='SLSQP', constraints=cons)
x = result.x

print('Solution:', x)
print('Maximum value:', result.value)"
Write a Python program that uses a template engine to generate HTML web page. The program should define a template for a simple website and generate the webpage from that template.,"from string import Template

mytemplate = Template('<html><body><title>$title</title><h1>$heading</h1>$content</body></html>')

data = {
    'title':'My Website',
    'heading':'Hello World!',
    'content': 'This is my website!'
}

html = mytemplate.substitute(data)

print(html)"
Generate a code snippet to convert a string to an integer in Python.,"num = int(str)
print(num) # Prints 145"
Create a Python program to parse an XML document.,"import xml.etree.ElementTree as ET 

tree = ET.parse('data.xml') 
root = tree.getroot() 

# print all items
for item in root.findall('.//item'):
    print(item.attrib)"
Optimize the given Python program and reduce its time complexity.,"def find_duplicates(arr): 
    seen = set() 
    duplicates = []
    for value in arr:
        if value in seen:
            duplicates.append(value)
        else:
            seen.add(value)
    return duplicates"
Write a function to check if any list element is present in the given list.,"def check_element(test_tup, check_list):
  res = False
  for ele in check_list:
    if ele in test_tup:
      res = True
      break
  return (res) "
Compute the factorial of a given number using a recursive function in Python.,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)"
Can you write a Python program to find all prime numbers between two given numbers?,"def checkPrime(num):
    if (num == 1): 
        return False
    for i in range(2, num):
        if (num % i == 0): 
            return False
    return True

n1 = 20
n2 = 50

for num in range(n1, n2 + 1):
    if (checkPrime(num)):
        print(num)"
Write a Python script to check how many words with length 5 are in the given string,"def count_words_length(string):
    count = 0
    words = string.split("" "")
    for word in words:
        if len(word) == 5:
            count += 1
    return count

string = ""The quick brown fox jumped over the lazy dog.""
print(count_words_length(string))"
Write a function to perform the mathematical bitwise xor operation across the given tuples.,"def bitwise_xor(test_tup1, test_tup2):
  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) "
Write a Python program to sort a given list of numbers in ascending order.,"list = [3, 4, 7, 1, 6, 9, 2] 
list.sort() 
print(""Ascending :"",list)"
Create a functions to implement a linear search algorithm in Python.,"def linear_search(arr, key):
  pos = 0 
  while pos < len(arr):
    if arr[pos] == key:
      return pos 
    pos += 1
  return -1"
Write a Python function that takes a string as input and checks if it is a palindrome or not.,"def is_palindrome(string):
   # reverse the string
   rev_string = string[::-1] 
   
   # check if the string is equal to its reverse
   if (string == rev_string): 
     return True
   return False

# Example usage:

result = is_palindrome('racecar')
# result = True"
Generate code using Python to find the largest and smallest number in a given list.,"def min_max(array):
    min_val = array[0]
    max_val = array[0]
    for element in array:
        if(element > max_val):
            max_val = element
        if(element < min_val):
            min_val = element
    return (min_val, max_val)"
"Using Python, create a program to get the grade corresponding to a percentage.","def grade(percentage):
    if percentage >= 90:
        return 'A'
    elif percentage >= 80:
        return 'B'
    elif percentage >= 70:
        return 'C'
    elif percentage >= 60:
        return 'D'
    else:
        return 'F'"
Generate a Python code to calculate average temperatures from a list of temperatures.,"def get_average(temps):
    sum = 0
    for temp in temps:
        sum += temp
    avg = sum / len(temps)
    return avg
    
temperatures = [22.5, 18.7, 30.1]
average_temp = get_average(temperatures)
print(""Average temperature:"", average_temp)"
Create a Python class that can detect whether a given number is a prime number.,"class Number:
    """"""Class to detect if a given number is a prime number.""""""

    def __init__(self, number):
        self.number = number
    
    def is_prime(self):
        """"""
        Method to detect if a given number is a prime number
        """"""

        for i in range(2, self.number):
            if self.number % i == 0:
                return False
        
        return True"
Design a Python program to detect if two strings have the same characters.,"def same_chars(str1, str2):
    if len(str1) != len(str2):
        return False
    for i in range(len(str1)):
        if str1[i] != str2[i]:
            return False
    return True"
Create a python program to find the fibonacci series up to n-th number.,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    
    fib = [0, 1]
    for i in range(2, n + 1):
        fib.append(fib[i - 1] + fib[i - 2])
    return fib[-1]

result = fibonacci(8)
print(result) # 13"
Create a Python program to remove all trailing zeroes from a given number.,"def remove_trailing_zeros(num): 
  num = str(num) 
  return float(num.rstrip('0').rstrip('.')) 
  
result = remove_trailing_zeros(123.4500) 
print(result)"
"Using a while loop, write a Python program to reverse a given sentence.","# Initialize an empty string 
revString = """"

# Set 'idx' to point to the end of the string 
idx = len(sent) - 1
 
# Iterate in reverse through the string 
while idx >= 0:
    # Append each individual character to the result string
    revString += sent[idx]
    # Decrement the index
    idx -= 1

# Output the reversed result
print(revString)"
"Create a function in Python to generate an array of numbers, each element in the array being twice the value of its previous one.","def generate_double_array(size):
	arr = [1]
	for i in range(1, size):
		arr.append(arr[i - 1] * 2)
	return arr"
Create a trigonometric function using Python that produces a sinusoidal wave.,"def sinusoidal_wave(x):
    return np.sin(2*np.pi*x)"
Write a python code that takes in a list of integers and removes all the duplicate elements from it.,"final_list = [] 
for num in list_of_integers: 
    if num not in final_list: 
    	final_list.append(num) 
print(final_list)"
Create a class in Python that defines a student information data structure.,"class Student:
    def __init__(self, name, age, gender):
        self.name = name
        self.age = age
        self.gender = gender"
Convert the following JSON string to a valid Python dictionary.,"data = json.loads('{""name"": ""John"", ""age"": 32, ""city"": ""New York""}')"
Your client has asked you to convert an existing Java program into a Python program. The Java program takes a list of integers and returns the maximum value.,"def get_max_value(listOfIntegers):
 maxValue = listOfIntegers[0]
 for num in listOfIntegers:
 if num > maxValue:
 maxValue = num
 return maxValue

print(get_max_value(listOfIntegers))"
Can you provide a Python function that sorts a given list of elements in descending order?,"def sort_list(lst):
 return sorted(lst, reverse=True)"
Can you make a function in Pyhton that takes in two strings and returns a new string with all the letters from the second string which are not in the first string?,"def new_string(s1, s2):
    new_str = """"
    for char in s2:
        if char not in s1:
            new_str += char

    return new_str

print(new_string(""Python"", ""Programming"")) # Output: ""roammig"""
Generate a method in Python that determines if a given string contains a URL.,"import re

def isUrl(string): 
    urlPattern = re.compile(r'https?://(www\.)?(\w+)(\.\w+)') 
    match = urlPattern.search(string) 
    return bool(match)"
Find the most common words in a document using Python.,"from collections import Counter

text = ""The quick brown fox jumps over the lazy dog.""
words = text.split()

word_count = Counter(words)

# print the most common words
print(word_count.most_common(3))

# Output: [('the', 2), ('quick', 1), ('brown', 1)]"
"Write a python program that reads in the following input and then prints it out in the same order:

{
  ""num1"": ""4"",
  ""num2"": ""3"",
  ""num3"": ""2"",
  ""num4"": ""1""
}","import json
 
data = {
  ""num1"": ""4"",
  ""num2"": ""3"",
  ""num3"": ""2"",
  ""num4"": ""1""
}
 
for key, value in data.items():
    print(key, value)"
Write a Python function to multiple two matrices.,"def multiply_matrices(m1, m2):
    # create a 3x3 matrix to hold the result
    result = [[0, 0], [0, 0]]

    for i in range(len(m1)): 
        for j in range(len(m2[0])): 
            for k in range(len(m2)): 
                result[i][j] += m1[i][k] * m2[k][j] 

    return result

result = multiply_matrices([[1, 2], [3, 4]], [[5, 6], [7, 8]])
print(result)"
Write a function to validate a gregorian date.,"import datetime
def check_date(m, d, y):
    try:
        m, d, y = map(int, (m, d, y))
        datetime.date(y, m, d)
        return True
    except ValueError:
        return False"
Create a program in Python which seeks for a number in a given list.,"list = [2, 5, 7, 8, 11, 13]
seek = 8

if seek in list:
    print(""Found!"")
else:
    print(""Not Found"")"
Write a python function to find the smallest prime divisor of a number.,"def smallest_Divisor(n): 
    if (n % 2 == 0): 
        return 2; 
    i = 3;  
    while (i*i <= n): 
        if (n % i == 0): 
            return i; 
        i += 2; 
    return n; "
Write a Python program to find the sum of all numbers in a nested list,"def sum_nested_list(lst):
    total = 0
    for i in lst:
        if isinstance(i,list):
            total += sum_nested_list(i)
        else:
            total += i
    return total"
Create a python program to extract the name and phone number from a given string.,"# Extract the name and phone number from a given string
def extract_name_phone(input_string):
    name_phone_dict = {}
    data = input_string.split(': ')
    
    name_phone_dict['name'] = data[0]
    name_phone_dict['phone'] = data[1]
    
    return name_phone_dict

result = extract_name_phone(""John Doe: (+1) 555-665-8877"")
print(result)"
Generate a function in Python that takes a string and counts the number of capitalized letters.,"def countCapitalized(str): 
    count = 0
    for i in range(len(str)): 
        if str[i].isupper():
            count += 1
    return count

print(countCapitalized(""ViVaViVaViVa""))"
Create a Python program to print all the numbers between 1 and 5.,"for num in range(1, 6):
    print(num)"
Write a function to extract every first or specified element from a given two-dimensional list.,"def specified_element(nums, N):
    result = [i[N] for i in nums]
    return result
    "
Create a basic Python script that executes a calculation of the total cost of a purchase (price * quantity).,"#calculate the total
total_cost = price * quantity

#print the total
print(total_cost) # Output: 30"
Create a program to solve the knapsack problem using Python.,"def knapsack(wt, val, n, W):
    if n == 0 or W == 0:
        return 0 
    elif wt[n - 1] > W: 
        return knapsack(wt, val, n - 1, W) 
    else: 
        return max(val[n - 1] + knapsack(wt, val, n - 1, W - wt[n - 1]), knapsack(wt, val, n - 1, W)) 
  
if __name__ == ""__main__"": 
    val = [60, 100, 120] 
    wt = [10, 20, 30] 
    W = 50
    n = len(val) 
    print(knapsack(wt, val, n, W))"
Convert the following pseudocode into Python code.,x += 1
Create a program in Python to print the greatest of three numbers.,"def get_max(x, y, z):
    if (x > y) and (x > z):
        maximum = x
    elif (y > x) and (y > z):
        maximum = y
    else:
        maximum = z

    return maximum

result = get_max(2, 4, 3)
print(result)"
Create an AI Chatbot in Python using the nltk library. The program should ask the user to enter a phrase and respond accordingly.,"# Load Packages
import nltk
from nltk.chat.util import Chat, reflections

# Set up the conversation
reflection_map = {
 ""hello"": ""Hi there!"",
 ""hi"": ""Hello!""
}

cref = reflections.keys()
Chat = Chat(reflection_map, cref)

# Start the conversation
Chat.converse()"
"Create an SQL query to find all articles with the word ""python"" in the title.",SELECT * FROM articles WHERE title LIKE '%Python%';
Write a python function to count true booleans in the given list.,"def count(lst):   
    return sum(lst) "
Implements an algorithm in Python to find common elements in two given unsorted arrays.,"def common_elements(arr1, arr2): 
    commonList = [] 
  
    for num1 in arr1: 
        for num2 in arr2: 
            if(num1 == num2): 
                commonList.append(num1) 
  
    return commonList 
  
arr1 = [1, 2, 3] 
arr2 = [2, 4, 5] 
  
print (""Common elements: "", common_elements(arr1, arr2))"
Write an algorithm in Python that takes an array of numbers and returns an array of only the even numbers.,"def keep_even_only(arr):
    return [n for n in arr if n%2 == 0]

arr = [2, 5, 8, 9, 10, 13, 11]
even_arr = keep_even_only(arr)

print(even_arr)

# Output:
# [2, 8, 10]"
Develop a Python script that can query a SQL database and return the total number of entries in all the tables,"import sqlite3

conn = sqlite3.connect(""example.db"")
cur = conn.cursor()

sql = ""SELECT name FROM sqlite_master WHERE type='table';""
cur.execute(sql)
tables = cur.fetchall()

count = 0
for table in tables:
    sql = f""SELECT COUNT(*) FROM {table[0]};""
    cur.execute(sql)
    count += cur.fetchone()[0]

print(f""Number of entries: {count}"")"
"Create a class definition in Python called 'Student' that contains member variables for name, age, and GPA.","class Student:
    def __init__(self, name, age, gpa):
        self.name = name
        self.age = age
        self.gpa = gpa"
Generate a Python function that will double the given input value.,"def double(x):
    return x * 2"
Optimize the following code in Python by improving its complexity.,"def my_function(input_array):
  output_array = set()
  return output_array.union(input_array)"
Create a Python program to identify whether a number is prime or not.,"def is_prime(num):
    if num > 1:
        for n in range(2, num):
            if (num % n) == 0:
                return False
        return True
    else:
        return False

num = int(input(""Enter a number: ""))
 
if is_prime(num):
    print(num, ""is a Prime number"")
else:
    print(num, ""is not a Prime number"")"
Design a program in Python which takes a list of strings as input and prints out the number of strings with a length equal to 3.,"def count_length_3(words):
    count = 0
    for word in words:
        if len(word) == 3:
            count += 1
    print(count)

count_length_3(['word', 'cat', 'bat', 'car', 'apple', 'dog'])"
Create a list comprehension in Python for printing all the numbers divisible by 4.,divisible_by_four = [num for num in range(1000) if num % 4 == 0]
Optimize the existing Python script to improve the performance.,"import timeit

def find_value(l):
    for v in l:
        if v >= 0:
            # Early exit once value is found
            return v
    return -1

print(timeit.timeit('find_value([-5, 0, 4, -1, 3])', number=10000))"
Create a program in Python that takes a website URL as input and returns the number of HTML tags in the page.,"import requests
from bs4 import BeautifulSoup

def count_tags(url):
    r = requests.get(url)
    soup = BeautifulSoup(r.text, 'html.parser')
    count = len(soup.find_all())
    return count"
Edit the given Python code to return the maximum value from a list,"def max_val(nums):
    maximum = nums[0]
    for i in range(len(nums)):
        if nums[i] > maximum:
            maximum = nums[i]
    return maximum

list = [1, 4, 8, 10]"
Construct a Python function to remove all instances of an element from a given list of integers.,"def remove_element(nums, x):
   return [y for y in nums if y != x]"
"Create a password generator using Python that places random characters, numbers, and symbols into an output phrase.","import string
import random

def password_generator(length):
   password_characters = string.ascii_letters + string.digits + string.punctuation
   new_password = """".join(random.choice(password_characters) for i in range(length))
   return new_password"
Generate a python program that takes a string and an integer as input and outputs a string repeated the given integer number of times.,"def repeat(string, n):
    return string * n"
Optimize a given Python code to print the factorial of a number.,"def factorial(n): 
    factorial = 1
  
    for i in range(1, n+1): 
        factorial = factorial * i 
    print(factorial) 
  
number = 5
factorial(number)"
Design an algorithm in Python to check if an integer is a power of two.,"def isPowerOfTwo(n):
  if(n == 0): 
    return False
  while(n != 1): 
    if(n % 2 != 0): 
      return False
    n = n // 2
    
  return True
  
# The following call will return True
isPowerOfTwo(16)"
Generate Python code to calculate the average of a given list of numbers.,"def calc_avg(nums):
    total = 0
    for item in nums:
        total += item
    avg = total / len(nums)
    return avg"
Create a Python function to search for a specific piece of text in a string. This function should return true if the string contains the text and false otherwise.,"def search(text, string):
 return text in string"
Design a Python program to find which number is missing between a given range of numbers.,"def find_missing_number(arr):
    n = len(arr)
    total = (n+1)*(arr[0] + arr[n-1]) / 2
    sum_arr = sum(arr)
    return total - sum_arr"
Create a python program to print the Fibonacci sequence for the first ten numbers.,"def fibonacciSequence(n):
    a = 0
    b = 1
    sequence = [a, b]
    for _ in range(2, n):
        c = a + b
        a = b
        b = c
        sequence.append(c)
    return sequence

print(fibonacciSequence(10)) # [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]"
"Write a Python program to accept user input as a string and check if the user input is a palindrome (a word, phrase, or sequence that reads the same backward as forward).","input_word = input(""Enter a word: "")

def is_palindrome(word):
 word = word.lower()
 reversed_word = word[::-1]

 if reversed_word == word:
 return True
 else:
 return False

print(is_palindrome(input_word))
# Output: True"
Write a Python program to extract all words from a sentence and print them.,"sentence = ""The quick brown fox""
words = sentence.split("" "")

for word in words:
 print(word)

# Output
# The
# quick
# brown
# fox"
Write a Python program to swap the values of two variables.,"x = 5
y = 10

# Swapping process 
x, y = y, x 

print(""x:"", x) 
print(""y:"", y)"
"Write an algorithm in Python that finds the maximum sum of an array of non-negative integers, given an upper limit value.","def findMaxSum(limit, array):
    maxSum = 0
    for i in range(len(array)):
        currentSum = 0
        for j in range(i, len(array)):
            currentSum += array[j]
            if currentSum <= limit and currentSum > maxSum:
                maxSum = currentSum
    return maxSum"
Optimize a Python program to run faster and use less memory.,"import math
 
# Faster loop implementation
def fast_loop(num):
    result = 1
    for i in range(int(num)):
        result += math.sqrt(i*i + 1)
    return result"
Create a regular expression in Python to match strings that contain two consecutive identical numbers.,"import re

pattern = re.compile(r'(\d)\1')

pattern.search(""ab890087kkk"") # returns None
pattern.search(""ab89888kkk"") # returns <re.Match object; span=(2, 5), match='888'>"
Write a function to push all values into a heap and then pop off the smallest values one at a time.,"import heapq as hq
def heap_sort(iterable):
    h = []
    for value in iterable:
        hq.heappush(h, value)
    return [hq.heappop(h) for i in range(len(h))]"
Write a function to find the area of a rombus.,"def rombus_area(p,q):
  area=(p*q)/2
  return area"
Write a python function to count the number of substrings with same first and last characters.,"def check_Equality(s): 
    return (ord(s[0]) == ord(s[len(s) - 1])); 
def count_Substring_With_Equal_Ends(s): 
    result = 0; 
    n = len(s); 
    for i in range(n):
        for j in range(1,n-i+1): 
            if (check_Equality(s[i:i+j])): 
                result+=1; 
    return result; "
Write a Dockerfile that sets up a Python environment for a web application.,"FROM python:3.8

# Set environment variables
ENV PYTHONUNBUFFERED 1
ENV PYTHONDONTWRITEBYTECODE 1

# Copy project files
WORKDIR /usr/src/app
RUN mkdir static
RUN mkdir templates
COPY requirements.txt .

# Install dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Run the app
CMD uvicorn app:app --host=0.0.0.0 --port=8000"
Create a variable in Python which stores a list of tuples that contains student names and their scores.,"students = [('John', 85.5), ('Chris', 90.5), ('Jane', 95.7)]"
Create code to print out the Fibonacci numbers using a Python recursive function,"def Fibonacci(n): 
    if n<0: 
        print(""Incorrect input"") 
    # First Fibonacci number is 0 
    elif n==1: 
        return 0
    # Second Fibonacci number is 1 
    elif n==2: 
        return 1
    else: 
        return Fibonacci(n-1)+Fibonacci(n-2) 
    
# Driver Code 
print(Fibonacci(9))"
Write a function in python to split an given array into two parts with equal sum.,"def split_equal_sum(arr):
    n = len(arr) 
    leftsum = 0
    rightsum = sum(arr)
    
    for i in range(n): 
        rightsum -= arr[i]
        if leftsum == rightsum:
            return True 
        leftsum += arr[i] 
    return False"
Create a code that can be run in both Python and Java to find the sum of all the elements in a given array.,"def sumArray(arr):
    sum = 0
    for x in arr:
        sum += x
    return sum

public static int sumArray(int[] arr) {
    int sum = 0;
    for(int ele : arr) {
        sum += ele;
    }
    return sum;
}"
"Write a Python program to print the following pattern using a ""for loop"".","for i in range(1,6):
 for j in range(1,i+1):
  print('*',end='')
 print()

Output:
*
**
***
****
*****"
Build a Python program to edit a string,"def replace_spaces_with_underscore(string):
    return string.replace("" "", ""_"")"
Write a function to find sum and average of first n natural numbers.,"def sum_average(number):
 total = 0
 for value in range(1, number + 1):
    total = total + value
 average = total / number
 return (total,average)"
Write a function to convert more than one list to nested dictionary.,"def convert_list_dictionary(l1, l2, l3):
     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]
     return result"
"Create a Python program to normalize a given list of strings by removing leading and trailing whitespace, and converting all letters to lowercase.","list_of_strings = ["" HELLO  "", "" WorLD  "", ""HeLlo"", ""DELL""]
normalized_strings = [s.strip().lower() for s in list_of_strings]"
Refactor the following code to use list comprehension in Python.,double_list = [num * 2 for num in range(10)]
Sort the following array from smallest to largest without using the built in sort method in Python.,"def bubbleSort(arr):
    n = len(arr) 
    for i in range(n): 
        for j in range(0, n-i-1): 
            if arr[j] > arr[j+1] : 
                arr[j], arr[j+1] = arr[j+1], arr[j]

arr = [5, 4, 2, 1, 3]
bubbleSort(arr) 
print (""Sorted array is:"") 
for i in range(len(arr)): 
    print (""%d"" %arr[i])"
Write a Python program to determine if a number provided by the user is prime or not.,"# Ask the user for a number
num = int(input('Enter a number: '))

# Set initial values
is_prime = True

# Check for prime
for i in range(2, num):
 if num % i == 0:
 is_prime = False
 break

# Output result
if is_prime:
 print(f'{num} is a prime number.')
else:
 print(f'{num} is not a prime number.')"
Develop an AI-based system in Python to classify an incoming request.,"from sklearn import svm

# Create the model
model = svm.SVC()

# Fit and predict the model
model.fit(X, y)
predictions = model.predict(X)"
Write a Python script to generate a random password string with length 20 that contains all the characters in the string.,"import random 
  
def generate_password(length): 
    password_str = ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+""
    password =  """".join(random.sample(password_str,length )) 
    return password

# Driver Code 
length = 20
print(generate_password(length))"
Design a Python program for implementing Bubble Sort.,"def bubbleSort(arr):
    n = len(arr) 
 
    for i in range(n): 
        for j in range(0, n-i-1):
            if arr[j] > arr[j+1] :
                arr[j], arr[j+1] = arr[j+1], arr[j] 
  
    return arr
 
arr = [64, 34, 25, 12, 22, 11, 90]
 
bubbleSort(arr)
 
print (""Sorted array is:"")
for i in range(len(arr)):
    print (""%d"" %arr[i]),"
Upgrade a Python program to use async/await instead of time.sleep().,"import asyncio

async def do_something():
	print('starting something')
	await asyncio.sleep(2)
	print('done with something')

asyncio.run(do_something())"
Program a python method to randomly shuffle a given list of integers.,"import random

def shuffle_list(numbers):
 random.shuffle(numbers)
 return numbers"
Create a Python function that shuffles an array of numbers.,"import random

def shuffle_array(arr):
    random.shuffle(arr)
    return arr"
Design a simple class in Python that stores quiz scores of students.,"class QuizScores:
    def __init__(self):
        self.scores = {}

    def add_score(self, student_name, score):
        self.scores[student_name] = score

    def get_average(self):
        if len(self.scores) == 0:
            return 0
        total_score = 0
        for student, score in self.scores.items():
            total_score += score
        return total_score / len(self.scores)"
Write a Python program to find the most common element in an array.,"def most_common_element(arr):
    frequency = 0
    most_common = None

    for element in arr:
        count = arr.count(element)
        if count > frequency:
            frequency = count
            most_common = element

    return most_common

print(most_common_element([3, 4, 2, 3, 5, 3, 2, 3]))"
Create a Python program to encode a given string using the the SHA-256 encryption algorithm.,"import hashlib
def encode_string_sha256(string):
  return hashlib.sha256(string.encode('utf-8')).hexdigest()"
Generate a python list comprehension to square each item in the list.,[i**2 for i in alist]
Create a Python script that takes the two lists that are provided and combines them together.,"def combine_lists(list1, list2):
  combined_list = list1 + list2
  return combined_list
combined_list = combine_lists(list1, list2)
print(combined_list) # [1, 2, 3, 4, 5, 6]"
Create a Python code snippet toshuffle a given list of numbers.,"import random 
  
def shuffle_list(list_nums):
    random.shuffle(list_nums)
    print(""Shuffled list :"",  list_nums)

list_nums = [1, 2, 3, 4, 5]
shuffle_list(list_nums)"
Generate a Fibonacci sequence using a recursive function in Python.,"def Fibonacci(n): 
  if n<0: 
    print(""Incorrect input"") 
  elif n==1: 
    return 0
  elif n==2: 
    return 1
  else: 
    return Fibonacci(n-1)+Fibonacci(n-2) 
# Driver Program 
print(Fibonacci(9))"
Create a Python program that takes a string and replaces all spaces with underscores.,"def replace_spaces(string):
    return string.replace(' ', '_')

string = 'Hello World'

print(replace_spaces(string))"
Modify the following Python code to make it faster by using an appropriate data structure.,"numbers = [1, 2, 3, 4, 5]
total = 0

for num in numbers:
    total += num"
Write a function to find average value of the numbers in a given tuple of tuples.,"def average_tuple(nums):
    result = [sum(x) / len(x) for x in zip(*nums)]
    return result"
Write a function to find the area of a pentagon.,"import math
def area_pentagon(a):
  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0
  return area"
Create a function in Python that takes a string as an argument and capitalizes the first letter of each word.,"def capitalize(s):
  return ' '.join(w.capitalize() for w in s.split())"
Make a python program to check the palindrome of a given word,"def palindrome(word): 
    if word == word[::-1]: 
        return True
    else: 
        return False"
"In a Python list, swap the items at index 3 and 4.","def swap(arr, idx1, idx2):
    arr[idx1], arr[idx2] = arr[idx2], arr[idx1]

arr = [10, 20, 30, 40, 50]
swap(arr, 3, 4)
print(arr)"
Generate code to build an API using python and Flask,"from flask import Flask

app = Flask(__name__)

@app.route(""/"")
def greet():
    return ""Hello world!""

if __name__ == ""__main__"":
    app.run()"
"Using python, modify the code provided below to add the items in the list.","list = [1,2,3,4]
sum = 0

for item in list:
    sum += item

print(sum)"
Create a Python program to classify inputs into one of three classes.,"def classify_inputs(lst):
    result = []
    for num in lst:
        if num <= 0:
            result.append('negative')
        elif num > 0 and num <= 10:
            result.append('non-negative')
        else:
            result.append('positive')
    return result

print(classify_inputs([-2, 10, 11, 4, -1]))"
Generate a Python method which will check whether an input number is even or odd.,"def is_even(num):
""""""
This function takes a number as input 
and checks whether it is even or odd.

Parameters
----------
num : int
    The number to be checked.

Returns
-------
bool
    Returns True if the number is even, 
    False otherwise.
""""""

if num % 2 == 0:
 return True
else:
 return False"
Create a class in Python which will represent a shopping cart.,"class ShoppingCart():
    def __init__(self):
        self.items = []
    
    def add_item(self, item):
        self.items.append(item)

    def remove_item(self, item):
        if item in self.items:
            self.items.remove(item)"
Edit the following Python code to find all records in the table where the age is greater than 18.,"data = cursor.execute(f""SELECT * FROM users WHERE age > 18"")"
Write an algorithm in Python to sort a given list using the bubble sort technique.,"def bubble_sort(arr): 
    n = len(arr) 
    for i in range(n): 
        for j in range(0, n-i-1): 
            if arr[j] > arr[j+1] :
                arr[j], arr[j+1] = arr[j+1], arr[j]"
Develop a Python program which takes two numbers in input and prints the sum of them.,"def add(num1, num2): 
    sum = num1 + num2 
    print(sum) 
  
# Driver code 
num1 = int(input(""Enter num1: "")) 
num2 = int(input(""Enter num2: "")) 
add(num1, num2)"
Create an algorithm in python to sort a list of numbers using bubble sort.,"def bubble_sort(nums):
    for i in range(len(nums)-1):
        for j in range(0, len(nums)-i-1):
            if nums[j] > nums[j+1]:
                nums[j], nums[j+1] = nums[j+1], nums[j]
    return nums"
Create a class definition for a Dog in Python.,"class Dog:
    def __init__(self, name, breed):
        self.name = name
        self.breed = breed
    
    def bark(self):
        print(""Woof!"")
    
    def __str__(self):
        return f""Name: {self.name}, Breed: {self.breed}"""
Write a python function to get the position of rightmost set bit.,"import math
def get_First_Set_Bit_Pos(n):
     return math.log2(n&-n)+1"
Develop a Python program to find the most common word in a sentence,"def frequency(sentence):
    words = sentence.split()
    frequency = {}
    for word in words:
        if word in frequency:
            frequency[word] += 1
        else:
            frequency[word] = 1
    
    most_common_word, frequency = max(frequency.items(), key=lambda x: x[1])
    return most_common_word, frequency"
Write Python code to print the following at the end of the code.,"for i in range(5):
    for j in range(5):
        print(""*"", end="" "")
    print()"
Write a function to generate a 3d array having each element as '*'.,"def array_3d(m,n,o):
 array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]
 return array_3d"
Generate a Python program that will convert an array of strings with comma-separated values to a comma-separated string.,"def to_csv(input_list):
  return ','.join(input_list)

if __name__ == '__main__':
  input_list = ['John','Joseph','Shirley']
  output_str = to_csv(input_list)
  print(f'Result: {output_str}')"
Create a Python program to print the sum of two given numbers,"def add_two_numbers(a, b):
    return a + b"
Design a function in Python that takes two strings as parameters and combines them into a new string.,"def combine_strings(string1, string2):
    return string1 + "" "" + string2

combined_string = combine_strings(""Hello"", ""World"")
print(combined_string)"
Create a class in Python to store user information with the given attributes.,"class UserInformation:
    def __init__(self, username, email, profile_picture):
        self.username = username
        self.email = email
        self.profile_picture = profile_picture"
Write a Python program to print out the alphabet pattern 'ABCD...XYZ'.,"for i in range(65, 91): 
    print(chr(i), end="" "")"
Construct a class in Python to represent a 2D vector and contains methods to perform basic operations.,"class Vector:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def length(self):
        return (self.x**2 + self.y**2)**(1/2)

    def add(self, other):
        return Vector(self.x + other.x, self.y + other.y)

    def subtract(self, other):
        return Vector(self.x - other.x, self.y - other.y)"
Write a Python program to optimize a given system by choosing the lowest energy configuration.,"def optimize_system(system):
    min_energy = sys.maxsize
    for configuration in system:
        energy = calculate_energy(configuration)
        if energy < min_energy:
            min_energy = energy
            best_configuration = configuration
    return best_configuration"
Generate a function in Python that takes a web page URL and returns the page's HTML source code.,"import requests

def get_html_source(url):
    """"""
    This function takes a web page URL and returns the page's HTML source code.
    :param url: url
    :return: html source
    """"""
    response = requests.get(url)
    return response.text"
Write a Python program to check if two strings are isomorphic.,"def is_isomorphic(s1, s2):
    if len(s1) != len(s2):
        return False

    s1_dict = dict()
    for i, char in enumerate(s1):
        if char in s1_dict:
            if s1_dict[char] != s2[i]:
                return False
        else:
            s1_dict[char] = s2[i]

    return True"
Build a Python class to represent a math vector in 3D space.,"class Vector3D: 
    def __init__(self, x, y, z): 
        self.x = x 
        self.y = y 
        self.z = z 

    def magnitude(self): 
        return (self.x**2 + self.y**2 + self.z**2)**0.5 
  
    def normalize(self): 
        magnitude = self.magnitude() 
        self.x /= magnitude 
        self.y /= magnitude 
        self.z /= magnitude"
Create a code snippet in Python that sets the length of a list to 0.,"myList = [1, 2, 3, 4, 5] 

myList.clear()
print(myList) // Output: []"
Write a function to check whether the given month name contains 28 days or not.,"def check_monthnum(monthname1):
  if monthname1 == ""February"":
    return True
  else:
    return False"
Write a Python program to find the minimum number of swaps needed to sort the given array in ascending order.,"def min_swaps(nums):
 n = len(nums)
 count = 0
 for i in range(n):
 while nums[i] != i + 1:
 swap(nums, i, nums[i] - 1)
 count += 1
 return count

def swap(nums, i, j):
 nums[i], nums[j] = nums[j], nums[i]"
Write a Python script to simulate a coin toss experiment.,"import random

def coin_toss():
    coin_side = random.choice(['Heads', 'Tails'])
    print('The coin landed on', coin_side)

coin_toss()"
Generate a Python program to multiply each element in a given list by a given number.,"def multiply_list(lst, num):
    res = []
    for item in lst:
        res.append(item*num)
    return res"
Write a function in Python that takes in two numbers and finds the greatest common divisor of them.,"def gcd(a, b): 
    if b == 0: 
        return a 
    return gcd(b, a % b) 

a = 10
b = 25
print (""GCD of"", a, ""and"", b, ""="", gcd(a, b))"
Implement a python program to check if a number is powerful. A powerful number is one who has a power of 2 as any of its prime divisors.,"def is_power(number):
    flag = False
    if number > 2:
        for i in range(2, number // 2 + 1):
            while number % i == 0:
                if number % (i ** 2) == 0:
                    flag = True
                number = number / i
    
    return flag

print(is_power(18))"
Write a function in Python that prints the Fibonacci numbers,"def Fibonacci(n): 
	if n<0: 
		print(""Incorrect input"") 
	elif n==1: 
		return 0
	elif n==2: 
		return 1
	else: 
		return Fibonacci(n-1)+Fibonacci(n-2) 

# Driver function 
print(Fibonacci(9))"
"Create a Python function that takes two inputs, a list of integers and an integer n,and returns a new list of all the integers in the first list that are larger than n.","def greater_than_n(nums, n):
 return [num for num in nums if num > n]

greater_than_n([3,4,5,6,7], 5)
# Returns [6,7]"
Create a function to fetch data from a web page using Python.,"import requests

def fetch_data(url):
    response = requests.get(url)
    return response.text

fetched_data = fetch_data('http://www.example.com')"
Create a Python script to define a set that contains the names of the days of the week.,"# Create a set containing the names of the days of the week
days_of_the_week = set([""Monday"", ""Tuesday"", ""Wednesday"", ""Thursday"", ""Friday"", ""Saturday"", ""Sunday""])

# Print the set 
print(days_of_the_week)"
Write a Python code for converting a given sentence into pig latin.,"def convert_string_to_pig_latin(sentence):
    words = sentence.split()
    pig_latin_words = []
    for word in words:
        if word[0] in 'aeiou':
            pig_word = word + 'way'
        else:
            pig_word = word[1:] + word[0] + 'ay'
        pig_latin_words.append(pig_word)
    return ' '.join(pig_latin_words)"
Develop an algorithm in Python to generate a random permutation of a given list.,"import random

def generate_permutation(nums):
 n = len(nums)
 permutation = []

# Generate a random index and add the element at that index to the list
 for _ in range(n):
 idx = random.randint(0, len(nums) - 1)
 permutation.append(nums[idx])
 nums.pop(idx)

return permutation

# Test the function
print(generate_permutation([1, 2, 3, 4, 5]))    # Output: [4, 2, 5, 3, 1]"
Can you create a function in Python that prints all permutations of a given word?,"def print_permutations(string):
    if len(string) == 1:
        print(string)
    else:
        for i, char in enumerate(string):
            for perm in print_permutations(string[:i] + string[i+1:]):
                print(char + perm)"
Write a Python program to filter a list of strings and only return strings with two or more words.,"my_list = [""hello world"", ""how are you"", ""I am fine""]

filtered_list = [i for i in my_list if len(i.split())>1]

print(filtered_list)

# Output: ['hello world', 'how are you', 'I am fine']"
Write a Python script to display the result of a mathematical expression.,"# code to display the result of a mathematical expression

expr = '(3 + 4) * 5'

# Evaluate the expression
result = eval(expr)

# Print the result
print(""Result of the expression: "" + str(result))"
Write a Python function to return the area of an equilateral triangle.,"def area_equilateral(side):
    """"""Calculate the area of an equilateral triangle from the side length.""""""
    return (math.sqrt(3)/4)*side**2;"
Generate a Python program that will multiply two given matrices.,"def multiply_matrices(m1, m2): 

    # Initializing empty list
    result = [[0 for x in range(len(m2[0]))] for y in range(len(m1))]

    # Iterate through rows and columns
    for i in range(len(m1)):
        for j in range(len(m2[0])):
            for k in range(len(m2)):
                result[i][j] += m1[i][k] * m2[k][j]
    return result"
"Write a Kubernetes deployment configuration for a Python web application, called “my-app”, running on port 8080.","apiVersion: apps/v1
kind: Deployment
metadata:
 name: my-app-deployment
spec:
 replicas: 3
 selector:
  matchLabels:
   app: my-app
 template:
  metadata:
   labels:
    app: my-app
  spec:
   containers:
   - name: my-app
    image: my-app-image
    ports:
    - containerPort: 8080"
Write a code in Python to generate unique random numbers between 1 and 100,"import random

def generate_unique_randoms(n):
    res = [] 
    while len(res) < n: 
        x = random.randint(1, 100 )
        if x not in res: 
            res.append(x) 
    return res"
Write a function to remove everything except alphanumeric characters from the given string by using regex.,"import re
def remove_extra_char(text1):
  pattern = re.compile('[\W_]+')
  return (pattern.sub('', text1))"
Write a Python program to generate all binary strings of a given length n.,"def generate_binary_str(n): 
    result = []
    for i in range(2 ** n): 
        s = bin(i)[2:] 
        s = (n - len(s)) * ""0"" + s 
        result.append(s) 
    return result

result = generate_binary_str(3)
print(result)

# Output: ['000', '001', '010', '011', '100', '101', '110', '111']"
Convert the following code from Python to JavaScript.,"function add_two_numbers(a,b) {
    return a + b;
}"
Optimize the following Python code by removing unnecessary lines.,"def fibonacci(n):
    a, b = 0, 1
    result = []
    while a < n:
        result.append(a)
        a, b = b, a+b
    return result"
"Generate keywords from the text ""How to build a machine learning model in Python"".","""keywords"": [""machine learning model"", ""build machine learning model"", ""Python"", ""machine learning"", ""machine learning Python"", ""model building machine learning"", ""build model Python""]"
Construct a basic class in Python for a Rectangle with two methods to calculate its area and perimeter.,"class Rectangle():
    def __init__(self,length,width):
        self.length = length 
        self.width = width
  
    def area(self):
        return self.length * self.width

    def perimeter(self):
        return 2 * (self.length + self.width)"
Write a Python script that classifies text using a given model.,"import nltk
from nltk.tokenize import word_tokenize 
from sklearn.externals import joblib 

text = 'This is some example text' 

# Tokenize the text
tokens = word_tokenize(text)

# Load the saved model
model = joblib.load('model.pkl')

# Generate the preditions
predictions = model.predict(tokens)

# Print the predictions
for prediction in predictions:
 print (prediction)"
Create a Python method that accepts two strings as arguments and concatenates them.,"def concatenate_strings(str1, str2):
    return str1 + str2"
Create a python program to input two numbers and then swap their values.,"x = 3
y = 4

temp = x 
x = y 
y = temp 

print(""x ="", x) 
print(""y ="", y)"
"Construct a program, in Python code, to calculate the histogram of the elements in a list.","def histogram_elements(example_list):
    histogram = {}
    for i in example_list:
        histogram[i] = example_list.count(i)
    return histogram"
Create a Python function that returns a nested dictionary given a list of keys and their corresponding values.,"def create_nested_dict(keys, values): 
  my_dict = {}
  for i in range(len(keys)):
    my_dict[keys[i]] = values[i]
  return my_dict"
Create an algorithm using Python that finds the maximum and minimum in a list of numbers.,"def find_max_min(mylist):
  max_num = mylist[0]
  min_num = mylist[0]

  for num in mylist:
    if num > max_num:
      max_num = num
    if num < min_num:
      min_num = num
  
  return [min_num, max_num]

list1 = [9,6,7,11,14,5]

print(find_max_min(list1)) #[5, 14]"
Create a web crawler in Python which takes an URL as input and extract all the links from the page.,"import requests
from bs4 import BeautifulSoup

def extract_links(url):
 r = requests.get(url)
 soup = BeautifulSoup(r.content, 'html.parser')
 links = []
 for link in soup.find_all('a'):
  links.append(link.get('href'))
 return links

url = ""https://www.example.com""
print(extract_links(url))"
Create a Python program that takes two strings and returns the result of concatenating them.,"def concatStrings(string1, string2):
  return string1 + string2

print(concatStrings('Hello', 'World'))"
Create a Python program that returns the index of an integer in a sorted array.,"def binarySearch(arr, x): 
    l = 0
    r = len(arr)-1
    while l <= r: 
        mid = l + (r - l)//2
        if arr[mid] == x: 
            return mid 
        elif arr[mid] < x: 
            l = mid + 1
        else: 
            r = mid - 1
    return -1"
Design an algorithm in Python to display the total number of odd numbers between a given range,"def odd_count(start, end):
    count = 0
    for i in range(start, end+1):
        if i%2 != 0:
            count += 1
    return count"
Write a Python program to parse a JSON object.,"import json

data = {
    ""name"": ""John Doe"",
    ""age"": 45,
    ""city"": ""New York""
}

data_parsed = json.loads(json.dumps(data))

name = data_parsed['name']
age = data_parsed['age']
city = data_parsed['city']"
Write a function to extract the sum of alternate chains of tuples.,"def sum_of_alternates(test_tuple):
  sum1 = 0
  sum2 = 0
  for idx, ele in enumerate(test_tuple):
    if idx % 2:
      sum1 += ele
    else:
      sum2 += ele
  return ((sum1),(sum2)) "
Write a function in Python that takes a sentence as an input and prints out the words in reverse order.,"def reverse_words(sentence):
 words = sentence.split()
 reversed_words = words[::-1]
 return ' '.join(reversed_words)

print(reverse_words(""This is a test sentence""))

# Output: ""sentence test a is This"""
Use a given class to deserialize a JSON response into a Python dictionary.,"class MyDeserializer(Deserializer):
    def deserialize(self, response):
        return json.loads(response)

deserializer = MyDeserializer()
deserialized_data = deserializer.deserialize(response)

print(deserialized_data)"
Create a python program to output an alphabetically sorted list of strings from an input list of strings.,"def sort_words(words):
    words.sort()
    return words

print(sort_words([""blue"", ""red"", ""green"", ""yellow""]))"
Create an algorithm in Python that finds a 'magic number' in an array. A magic number is an integer in the array that is strictly greater than the number of elements before it in the array.,"def find_magic_number(a):
 m = -1
 for i in range(len(a)):
 if a[i] > i:
 m = a[i]
 break

return m

print(find_magic_number([1, 2, 5, 7, 9, 10]))
# 7"
Create a Python program to convert a list of temperatures from Celcius to Fahrenheit.,"temp_list = [30,15,17,18]

# Convert each element in the list to Fahrenheit
fahrenheit_list = []

for temp in temp_list:
 fahrenheit_list.append(temp*9/5 + 32)

print(fahrenheit_list)
# [86.0, 59.0, 62.6, 64.4]"
Create a Python program to calculate the average score of students in a classroom.,"# List of student scores
scores = [72, 84, 85, 90]

# Calculating the average score
total = 0
for score in scores:
 total += score

average = total / len(scores)

print(""The average score in the class is {:.2f}"".format(average))

# Output:
# The average score in the class is 82.50"
Write a python function to check whether the length of the word is even or not.,"def word_len(s): 
    s = s.split(' ')   
    for word in s:    
        if len(word)%2==0: 
            return True  
        else:
          return False"
"Write a Python script to generate a dictionary that contains (i, i*i) such that i is an integer from 1 to n (both included).","n = 3
my_dict = {} 
for i in range(1, n+1): 
    my_dict[i] = i * i

print(my_dict)"
Create an open-source Python program to generate random passwords.,"import random
import string


def generate_password(length=12):
 password_characters = string.ascii_letters + string.digits + string.punctuation
 return ''.join(random.choice(password_characters) for i in range(length))


if __name__ == '__main__':
 password = generate_password()
 print(f'Your randomly generated password is:\n{password}')"
Write a function in Python that takes in a string and returns a list containing its individual words.,"def string_to_list(s):
    return s.split(' ')"
Create a Python function takes a string and an integer and returns the reversed string with the first letter of each word capitalized,"def reverse_capitalize(string, n):
    string_list = string.split() 
    reverse_list = string_list[-n:] + string_list[:-n] 
    new_string = "" "".join(reverse_list) 
    return new_string.title()

string = ""the quick brown fox""
n = 3

print(reverse_capitalize(string, n))"
Create a python function named 'square' that squares a given number.,"def square(x):
 return x * x"
Build a program in Python for finding the largest prime number in a given range.,"def largest_prime(num):
    largest_prime = 0
    for n in range (num):
        if(isPrime(n)):
            largest_prime = n
    return largest_prime

def isPrime(n):
    if(n == 1):
        return False
    elif(n == 2):
        return True
    else:
        for x in range(2,n//2+1):
            if(n % x == 0):
                return False
        return True

print(largest_prime(100))"
Convert the given algorithm written in pseudo code to Python.,"def selection_sort(A): 
    for i in range(len(A)): 
        minimum = i 
        for j in range(i+1, len(A)): 
            if A[minimum] > A[j]: 
                minimum = j 
        A[i], A[minimum] = A[minimum], A[i]"
Create a python script to generate random passwords.,"""""""
Create a python script to generate random passwords 

""""""
import string
import random

def generate_password(length=16, chars=string.ascii_letters + string.digits + string.punctuation):
    return ''.join(random.choice(chars) for _ in range(length))

if __name__ == '__main__':
    print(generate_password())"
Design a linear search algorithm for a given list in Python.,"def linearSearch(arr, value):
    
    for i in range(len(arr)):
        if arr[i] == value:
            return i
        
    return -1

arr = [10, 20, 80, 30, 60, 50, 110, 100, 130, 170]
value = 110

idx = linearSearch(arr, value)

if idx != -1:
    print(""Element is present at index"", idx)
else:
    print(""Element is not present in the array"")"
Implement a Python class to sort a given array of integers using Insertion Sort.,"class InsertionSort:
    def sort(self, arr): 
        for i in range(1, len(arr)): 
            key = arr[i] 
            j = i-1
            while j >=0 and key < arr[j] : 
                    arr[j+1] = arr[j] 
                    j -= 1
            arr[j+1] = key
        return arr

InsertionSort().sort([5, 2, 4, 1, 3])"
"Design an algorithm in Python that takes in a string and searches for a given pattern, returning it or -1 if not found.","def pattern_search(string, pattern):
    i = 0
    while i < len(string):
        j = 0
        while j < len(pattern):
            if string[i+j] != pattern[j]:
                break
            j += 1
        if j == len(pattern):
            return i
        i += 1
    return -1"
Create a Python script to print out the multiplication table for the numbers 1 - 10.,"for i in range(1, 11):
 for j in range(1, 11):
  print(f'{i} * {j} = {i * j}')
 print()"
Find the maximum element in an array of integers and return its index.,"// Python
def findMaxElementIndex(arr):
    max_val = max(arr)
    max_index = arr.index(max_val)
    return max_index"
Write a Python program to calculate the total cost of a customer's online orders.,"total_cost = 0
for order in orders: 
 total_cost += order['price']

print('Total cost is', total_cost)"
Develop a Python script for swapping two variable values.,"a, b = b, a"
Generate a Python program to edit a given string such that it reverses the words in the string.,"def reverse_words(string):
    words = string.split(' ')
    reversed_words = words[::-1]
    reversed_string = ' '.join(reversed_words)
    return reversed_string"
Write a Python kernel for a Jupyter Notebook that supports control flow statements (if & for loops).,"from IPython.core.magic import register_cell_magic

@register_cell_magic
def if_(line, cell):
    _, condition = line.split("" "", 1)
    result = f""if {condition}:""
    return f""{result}\n    {cell}""

@register_cell_magic
def for_(line, cell):
    _, condition = line.split(' ', 1)
    result = f""for {condition}:""
    return f""{result}\n    {cell}"""
Write a Python program to determine if a given list of words are anagrams or not.,"def is_anagram(words):
 anagram = True
 for i in range(len(words)):
 for j in range(i + 1, len(words)):
 if len(words[i]) != len(words[j]):
 anagram = False
 break
 else:
 if sorted(words[i]) != sorted(words[j]):
 anagram = False
 break
 return anagram

result = is_anagram(words)
print(result) # True"
"Create a Python class with two instance methods: one for calculating the area of a circle, and one for calculating the circumference.","class Circle:

def __init__(self, radius):
  self.radius = radius

def area(self):
  return 3.14 * self.radius * self.radius

def circumference(self):
  return 3.14 * (2 * self.radius)"
"Design a Python program that finds the most common elements in a list""","from collections import Counter 
def most_common(list): 
     counter = Counter(list) 
     most_occur = counter.most_common(1)[0][0] 
     return most_occur

print(most_common(list))"
Write a Python program to convert a given string to its equivalent base-64 encoding.,"def encode_base64(data): 
    b64 = base64.b64encode(data.encode(""utf-8"")) 
    return b64"
"Create a function in Python to check if a number is even or odd, without using modulo (%) operator.","def is_even_odd(num):
 if int(num / 2) * 2 == num:
 return ""even""
 else:
 return ""odd"""
Develop a Python script to print the first 10 cubes of natural numbers.,"for i in range(1, 11):
    print(i**3)"
Modify the given Python code to add exception handling.,"def divide(a,b):
    try:
        return a/b
    except (ZeroDivisionError) as e:
        print('Division by zero')
    except Exception as e:
        print(str(e))
        return None"
Design an algorithm in Python to traverse a 2D array top-down and left-right and output its contents as a single array.,"def traverse2DArray(arr):
    output = []
    for i in range(len(arr)):
        for j in range(len(arr[0])):
            output.append(arr[i][j])
    return output

print(traverse2DArray([[1,2,3], [4,5,6], [7,8,9]])) # [1,2,3,4,5,6,7,8,9]"
Design an algorithm in Python to sort an array of strings alphabetically.,"def sort_strings_alphabetically(arr):
    arr.sort(key=str.lower)
    return arr"
Write a Python program to format a specified string to limit the number of characters to 6.,"def limit_string(string):
    """"""Format the specified string to limit the number of characters to 6.""""""
    return string[:6]"
"Write a Python program to filter a list of strings so that strings containingthe substring ""bad"" are removed.","list_of_string = [""good"",""weird"",""great"",""amazing""]

filtered_list = [s for s in list_of_string if ""bad"" not in s]

print(filtered_list)"
Implement a decision tree classifier in Python.,"# Importing DecisionTreeClassifier from sklearn library
from sklearn.tree import DecisionTreeClassifier

# Defining the decision tree classifier
# Using ""entropy"" as criterion to decide the further split
clf = DecisionTreeClassifier(criterion=""entropy"")

# Fitting the decision tree classifier on the data
clf = clf.fit(X, y)"
Generate a list comprehension in Python for the following operation.,"[x * 3 for x in (1, 2, 3, 4)]"
Create a web scrapper in Python that fetches the title of headlines from a web page.,"import requests
from bs4 import BeautifulSoup

result = requests.get(""http://example.com"")
soup = BeautifulSoup(result.text, 'lxml')

for link in soup.find_all('a'):
    title = link.text
    print(title)"
Write a python function to find gcd of two positive integers.,"def gcd(x, y):
    gcd = 1
    if x % y == 0:
        return y
    for k in range(int(y / 2), 0, -1):
        if x % k == 0 and y % k == 0:
            gcd = k
            break  
    return gcd"
"Write a Python program to convert a given list of strings to integers. If a string is not a number, then that string should be dropped from the list.","def convert_to_ints(lst):
    result = []
    for i in lst:
        try:
            result.append(int(i))
        except:
            pass
    
    return result

result = convert_to_ints(['1', '2', '3', 'four', '5'])
print(result)"
Construct a Python program for finding the intersection of two arrays.,"def intersection(arr1, arr2):
  result = [i for i in arr1 if i in arr2]
  return result

arr1 = [1, 2, 3, 4]
arr2 = [3, 4, 5, 6]
result = intersection(arr1, arr2)
print(result)  # [3, 4]"
Generate a Python program that calculates the total number of vowels in a sentence,"def count_vowels(sentence):
  vowels = ['a', 'e', 'i', 'o', 'u'] 
  count = 0
  for word in sentence.split(): 
    for letter in word:
      if letter in vowels:
        count += 1
  return count

#Test 
sentence = ""This sentence has five vowels""
print(""Number of vowels:"", count_vowels(sentence))"
Write a function to find the sum of maximum increasing subsequence of the given array.,"def max_sum_increasing_subsequence(arr, n): 
	max = 0
	msis = [0 for x in range(n)] 
	for i in range(n): 
		msis[i] = arr[i] 
	for i in range(1, n): 
		for j in range(i): 
			if (arr[i] > arr[j] and
				msis[i] < msis[j] + arr[i]): 
				msis[i] = msis[j] + arr[i] 
	for i in range(n): 
		if max < msis[i]: 
			max = msis[i] 
	return max"
Generate a function in Python that adds two numbers together.,"def add_numbers(a, b):
   """"""
   This function takes two numbers as arguments and
   returns their sum.
   """"""

   return a + b"
Write a Python program to process a list of numbers and print out the maximum and minimum values.,"numbers = [4, 19, -3, 27, -9, 5]

max_num = max(numbers)
min_num = min(numbers)

print(""The maximum number in the list is {}"".format(max_num))
print(""The minimum number in the list is {}"".format(min_num))"
Write a code in Python to show a histogram distribution of data.,"import matplotlib.pyplot as plt

# example data
data = [2, 3, 5, 6, 7, 8, 9, 10]

# create histogram
plt.hist(data)

# show plot
plt.show()"
Develop an algorithm in Python for solving the Tower of Hanoi problem.,"def hanoi(discs, source, aux, dest):
    if discs == 1:
        print (""Move disc 1 from {} to {}"".format(source, dest))
        return

    hanoi(discs-1, source, dest, aux)
    print (""Move disc {} from {} to {}"".format(discs, source, dest))
    hanoi(discs-1, aux, source, dest)

hanoi(3,'A', 'B', 'C')"
Use Python to create an array that stores the Fibonacci sequence up to the nth number.,"def fibonacci(n): 
    a = 0
    b = 1
    fibo = []

    for i in range(n):
        fibo.append(a)
        c = a + b
        a = b
        b = c

    return fibo

fibonacci(10)"
Write a Python function to determine if a string contains any punctuation characters,"def contains_punctuation(string):
    for character in string:
        if character in string.punctuation:
            return True
    return False

result = contains_punctuation('Hello world!')
print(result)"
Create a script in Python that calculates the average length of a given list of strings,"def calculate_avg_string_length(string_list):
    total_length = 0

    for item in string_list:
        total_length += len(item)
    
    return total_length / len(string_list)

list_of_strings = [""cat"", ""dog"", ""mouse"", ""elephant""]

result = calculate_avg_string_length(list_of_strings)
print(result)"
"Write a Python script to generate a random string of 12 characters, containing both alphanumeric characters and special symbols.","import random
import string

def generate_random_string():
    char_set = string.ascii_letters + string.digits + '!@#$%^&*()'
    characters = [random.choice(char_set) for _ in range(12)]
    random_string = ''.join(characters)
    return random_string

rand_str = generate_random_string()
print(rand_str)"
"Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.","import re
def text_starta_endb(text):
        patterns = 'a.*?b$'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')"
Create a python program to calculate Fibonacci sequence for a given number.,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n-1) + fibonacci(n-2)

if __name__ == '__main__':
    n = 8
    print(fibonacci(n))"
"In Python, create an algorithm for efficiently sorting a list of numbers in ascending order.","def sort_list(numbers):
    for i in range(len(numbers)-1):
        for j in range(i+1, len(numbers)):
            if numbers[i] > numbers[j]:
                numbers[i], numbers[j] = numbers[j], numbers[i]
    return numbers"
Write a Python script to generate a random alphanumeric string with a length of 10.,"import random
import string

def random_string(length):
    return ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(length))

print(random_string(10))"
Generate a Python Program to Sort a List by Frequency,"def sort_by_frequency(list_a):
    frequency = {}
    for a in list_a:
        if a not in frequency:
            frequency[a] = 1
        else:
            frequency[a] += 1
    list_sorted = []
    for key, value in sorted(frequency.items(), key=lambda item: item[1], reverse=True):
        for _ in range(value):
            list_sorted.append(key)
    return list_sorted"
"Using Python, create a function that calculates the objective function of a linear equation.","def linear_eq(a, b, c):
    return a*x + b*y - c

# For example:
result = linear_eq(3, 5, 7)
print(result)"
Can you generate a sorting algorithm in Python that would sort this array of numbers in ascending order?,"def bubble_sort(arr):
  n = len(arr)
  for i in range(n): 
    for j in range(0, n-i-1):
      if arr[j] > arr[j+1] :
        arr[j], arr[j+1] = arr[j+1], arr[j]
  return arr

bubble_sort([9, 2, 5, 6, 4, 3, 7, 10, 1, 8])"
"Create a Python program to read numbers from stdin and produce a histogram, showing the frequency of the numbers in each 10 buckets.","import sys

# Define buckets
buckets = [0]*10

# Read line-by-line
for line in sys.stdin:
 # Read as integer
 value = int(line)

 # Find the bucket
 bucket = max(int(value/10), 0)
 buckets[bucket] += 1

# Output result
for i, count in enumerate(buckets):
 print('{}-{}: {}'.format(i*10, i*10+9, count))"
Create a Python program to convert an English sentence to Pig Latin.,"def pig_latin(sentence):
    words = sentence.split("" "")
    result = """"
    for word in words:
        result += word[1:] + word[0] + ""ay ""
    return result[:-1]"
Create a post request in python with the given parameters.,"import requests

url = 'https://api.endpoint.com'
headers = {'Authorization': 'Bearer abcdefg', 'Content-Type': 'application/json'}
parameters = {'name': 'John', 'age': 25}

response = requests.post(url, headers=headers, json=parameters)"
Write an optimized Python code snippet to reverse the words in a given string.,"def reverse_words(string):
    words = string.split("" "")
    words.reverse()
    output_string = "" "".join(words)
    return output_string

print(reverse_words(""Hello, World!"")) # Output: ""World! Hello,"""
"Utilizing the given data, write a Python code to calculate the average of numbers stored in a list.","def calculate_average(lst):
sum = 0
for num in lst:
 sum+=num
avg = sum/len(lst)
return avg

list = [2, 3, 6, 8, 9]
average = calculate_average(list)
print(""Average of list:"", average)"
Write a Python program to check if a string contains a specific substring,"def contains_substring(string, substring):
    return substring in string"
Write a function to find the maximum sum that can be formed which has no three consecutive elements present.,"def max_sum_of_three_consecutive(arr, n): 
	sum = [0 for k in range(n)] 
	if n >= 1: 
		sum[0] = arr[0] 
	if n >= 2: 
		sum[1] = arr[0] + arr[1] 
	if n > 2: 
		sum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2])) 
	for i in range(3, n): 
		sum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3]) 
	return sum[n-1]"
Implement a Python program to calculate the average of every two numbers in a given array.,"def average_every_two_numbers(arr):
    result = []
    for i in range(0, len(arr), 2):
        if i+1 < len(arr):
            result.append( (arr[i] + arr[i+1])/2.0)
        else:
            result.append(arr[i])
    return result

print(average_every_two_numbers([1, 3, 5, 7, 9]))"
Write a function to separate and print the numbers and their position of a given string.,"import re
def num_position(text):
 for m in re.finditer(""\d+"", text):
    return m.start()"
Devise a Python code to make a pyramid of stars.,"def stars(n): 
    for i in range(1, n + 1): 
        for j in range(1, i + 1): 
            print(""* "", end="""")  
        print()"
Write a function that returns the sum of all the elements of a list in Python.,"def mySum(list):
    total = 0
    for num in list:
        total += num
    return total"
Design an algorithm in Python that reverses the order of strings in a list.,"def reverseList(list):
    list.reverse()
    return list

list = [""Apple"", ""Banana"", ""Carrot"", ""Durian""]

reverseList(list)"
"Create a Python program that prints ""Hello World!"" 10 times.","for i in range(10):
    print(""Hello World!"")"
Write a Python function to get the common items from two given lists.,"def get_common_items(list_1, list_2):
    common_items = []
  
    for i in list_1:
        for j in list_2:
            if i == j:
                common_items.append(i)
    return common_items

list_1 = [1, 2, 3, 4, 5]
list_2 = [2, 4, 6, 8]

print(get_common_items(list_1, list_2))"
Create a for loop to output the numbers from 0 to 9 in Python.,"for i in range(10):
    print(i)"
Create a function that checks if the given year is a leap year in Python.,"def is_leap_year(year):
  if year % 4 == 0: 
    if year % 100 == 0: 
      if year % 400 == 0: 
        return True 
      else: 
        return False 
    else: 
      return True 
  else:
    return False"
Create a function in Python that prints the numbers between 0 and 10 (inclusive) in descending order.,"def printDescending(): 
  for i in range(10,-1,-1): 
    print (i) 

printDescending()"
Create a python module that reads the sentiment of a given text.,"import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer

def sentiment_score(text): 
    sentiment_scores = SentimentIntensityAnalyzer().polarity_scores(text) 
    return sentiment_scores[""compound""]"
"Generate a Python program to generate a list of all the prime numbers in given range [n,m], where n and m are input parameters.","def generatePrimes(n, m):
  primes = []
  for i in range(n, m + 1):
    isPrime = True
    for j in range(2,i):
      if i % j == 0:
        isPrime = False
        break
    
    if isPrime:
      primes.append(i)
  
  return primes
  
n = 5
m = 20
primes = generatePrimes(n, m)
print(primes)  #Output: [5, 7, 11, 13, 17, 19]"
Determine the best Python library for detecting malicious URLs.,The best Python library for detecting malicious URLs is URL Observatory. It uses a combination of machine learning and data mining algorithms to detect and flag malicious URLs. It is available on Github and has been tested and found to be reliable.
"Classify the following statement as true or false. The following statement is a valid Python statement - ""my_list = [1, 2, 3]""",TRUE
Develop a program in Python to find the count of all prime numbers between two given numbers.,"def count_primes(start_number, end_number):
    count = 0
    for i in range (start_number, end_number+1):
        is_prime = True
        for j in range (2, i-1):
            if i % j == 0:
                is_prime = False
        if is_prime:
            count += 1
    return count"
Create a Python function to delete the fourth element of a given list.,"def removeFourthElement(lst):
  lst.pop(3)
  return lst

print(removeFourthElement([1,2,3,4,5]))"
Design a Python function that rearranges the elements of a given array,"def rearrange_arr(arr): 
    arr.sort(reverse = True) 
    return arr"
Create a script in Python to generate a random alphanumeric string with a length of 10.,"import random
import string

def random_str():
  return ''.join(random.choices(string.ascii_letters + string.digits, k=10))

print(random_str())"
Write a function in Python that takes a list of numbers as input and returns the minimum value.,"def find_min(numbers):
    min_value = numbers[0]
    for num in numbers:
        if num < min_value:
            min_value = num
    return min_value

result = find_min([4,6,2,1,10,8])
print(result)"
Create a function in Python to remove a specified element from a string of words.,"def remove_elem(string, elem):
    """"""This function removes a specified element from the given string of words""""""
    return ' '.join([word for word in string.split() if word != elem])"
Write a Python program to optimize the given cost function.,"def optimize_cost(x, y):
    return 2*x + 9*y"
Write a Python script to take in a 2D array as an input and return the sum of all the elements.,"def sum_elements(arr):
  s = 0
  for row in arr:
    s += sum(row)
  return s

arr = [[1,2,3],
[4,5,6],
[7,8,9]]

print(sum_elements(arr))

# Output: 45"
Write a Python program that multiplies all even numbers in a given list.,"def multiplyEvens(numbers):
    # Initialize result 
    result = 1
      
    # Multiply all even elements 
    for x in numbers: 
        if x % 2 == 0: 
            result = result * x 
    return result 
  
# Driver code 
assert multiplyEvens([2, 3, 4, 5, 6]) == 48"
Create a Python program to optimize a given multivariate function.,"import scipy.optimize as opt 
  
def optimize_function(function, initial_guess): 
    result = opt.minimize(function, initial_guess) 
    return result.x"
Write a python function to find whether the given number is present in the infinite sequence or not.,"def does_Contain_B(a,b,c): 
    if (a == b): 
        return True
    if ((b - a) * c > 0 and (b - a) % c == 0): 
        return True
    return False"
Generate a Python script to filter the data in a given DataFrame and store the filtered data in a new DataFrame,"def filter_df_by_age(df, age):
    # Filter the dataframe
    filtered_df = df[df['age'] > age]

    # Create the new dataframe
    new_df = filtered_df.copy()

    # Return the new dataframe
    return new_df"
Create a python class for an Inventory Manager.,"class InventoryManager:
    def __init__(self):
        self.items = []

    def add_item(self, item):
        self.items.append(item)

    def remove_item(self, item):
        self.items.remove(item)

    def print_inventory(self):
        for item in self.items:
            print(item)"
"Create a Python class called 'Car' that contains three attributes, such as 'make', 'model' and 'year'.","class Car():
    def __init__(self, make, model, year):
        self.make = make
        self.model = model
        self.year = year"
Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.,"def max_sub_array_sum_repeated(a, n, k): 
	max_so_far = -2147483648
	max_ending_here = 0
	for i in range(n*k): 
		max_ending_here = max_ending_here + a[i%n] 
		if (max_so_far < max_ending_here): 
			max_so_far = max_ending_here 
		if (max_ending_here < 0): 
			max_ending_here = 0
	return max_so_far"
Create a Python function that takes two strings and count the total number of characters made from the two strings combined.,"def countChars(firstStr, secondStr):
    combinedStr = firstStr + secondStr
    return len(combinedStr)"
"Optimize a given Python program for speed, memory usage and readability.","def factorial(n):
    result = 1
    for i in range(2, n+1):
        result *= i
    return result"
Develop a Python script to add a given list of numbers.,"def sum_list(list_of_nums):
    total = 0
    for number in list_of_nums:
        total += number
    return total

result = sum_list([4, 8, 15, 20])
print(result)"
Write a python function to find the most significant bit number which is also a set bit.,"def set_Bit_Number(n): 
    if (n == 0): 
        return 0; 
    msb = 0; 
    n = int(n / 2); 
    while (n > 0): 
        n = int(n / 2); 
        msb += 1; 
    return (1 << msb)"
Create a recursive function in Python that calculates the factorial of a given number.,"def factorial(n): 
    if n == 1:
        return 1
    else:
        return n * factorial(n-1)

result = factorial(5)
print(result) # prints 120"
Edit the existing Python code to make the program more efficient.,"def sum_array(array):
  total = 0
  for element in array:
    total = total + element
  return total"
Design a Python program to switch the indices of two values in a given 2-dimensional array.,"def switchIndexes(arr): 
    result = [[0 for i in range(len(arr[0]))] for j in range(len(arr))] 
    for i in range(0, len(arr)): 
        for j in range(0, len(arr[0])): 
            result[j][i] = arr[i][j] 
    return result 

switchIndexes(arr)"
Write a function to find all five characters long word in the given string by using regex.,"import re
def find_long_word(text):
  return (re.findall(r""\b\w{5}\b"", text))"
Convert the given Python program from procedural to object-oriented.,"class Multiplier:
    def __init__(self):
        pass
 
    def multiply(self, a, b):
        c = a * b
        print(""Result is: "", c)

mult = Multiplier()
mult.multiply(a, b)"
Generate a correct python program to perform linear regression.,"import numpy as np

def linear_regression(X, y):
    X_b = np.array([np.ones(X.shape[0]), X]).T
    theta = np.linalg.inv(X_b.T @ X_b) @ X_b.T @ y
    return theta"
Can you write a Python program to search a list of numbers and return the index positions of matches?,"def search(lst, number):
    for i, n in enumerate(lst):
        if n == number:
            return i
    return -1

result = search(lst, number)
print(result)"
Create a Python class that identifies if a number is a multiple of five.,"class MultipleOfFive:
    def __init__(self, number):
        self.number = number
    
    def is_multiple_of_five(self):
        return self.number % 5 == 0"
Create a REST API in Python that allows a user to post a message and returns the message and a unique identifier.,"import uuid
import flask

app = flask.Flask(__name__)

messages = []

@app.route('/message', methods=['POST'])
def add_message():
 data = flask.request.get_json()
 data['id'] = str(uuid.uuid4)
 messages.append(data)
 return {'message': 'Added message', 'data': data}, 200

if __name__ == '__main__':
 app.run()"
Generate a Python class with the following variables.,"class Person:
  def __init__(self, name, job, age):
    self.name = name
    self.job = job
    self.age = age"
Create a Python program to find all pairs of numbers that add up to a given sum.,"def find_pairs(lst, sum):
 pairs = []

 for i in range(len(lst)-1):
   for j in range(i+1, len(lst)):
     if lst[i] + lst[j] == sum:
       pairs.append((lst[i], lst[j]))

 return pairs

pairs = find_pairs([1, 2, 3, 4, 5], 8)
print(pairs) # [(3,5), (2,6), (1,7)]"
Create a Python script that takes in a positive integer as argument and prints out the Fibonacci sequence up to that number.,"def fibonacci(n):
 a, b = 0, 1
 fibonacci = [a]
 
 while b < n:
 fibonacci.append(b)
 a, b = b, a + b
 
 return fibonacci

print(fibonacci(5))
# Output: [0, 1, 1, 2, 3]"
Create Python functions to shuffle an array and calculate the median of an array.,"import random

def shuffle(array):
 random.shuffle(array)
 return array
 
def calculate_median(array):
 n = len(array)
 if n < 1:
 return None
 if n % 2 == 0:
 return (array[n//2 - 1] + array[n//2]) / 2.0
 else:
 return array[n//2]"
Create a Python function that takes an object and prints all of its contents in a table.,"def print_object_table(obj): 
    print(""Name\t Age\t Gender\t City"")
    print(""----\t----\t-------\t-------"")
    print(obj['name'], ""\t"", obj['age'], ""\t"", obj['gender'], ""\t"", obj['city'])

print_object_table({
  'name': 'John', 
  'age': 32, 
  'gender': 'Male',
  'city': 'New York'
})"
Generate a random 10 character string using Python.,"import string
import random

def generate_random_string(length):
    letters = string.ascii_lowercase
    return ''.join(random.choice(letters) for i in range(length))

random_string = generate_random_string(10)
print(random_string)"
Create a Python program to extract the email and phone numbers within a given string.,"import re

text = 'My email is hello@domain.com and my phone number is +123456789'

email = re.findall(""[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+"", text)
phone = re.findall(""\+(9[976]\d|8[987530]\d|6[987]\d|5[90]\d|42\d|3[875]\d|
2[98654321]\d{9}|9[8543210]\d{8})\b"", text)

print(email)
print(phone)"
Produce a Python program to convert a given number of minutes to years and days.,"def convertMinutesToYears(minutes):
    years = minutes / 525600
    days = minutes % 525600 / 1440 
    
    print(""The given"" + str(minutes) + "" minutes is equal to "" + 
    str(round(years)) + "" year(s) and "" + str(round(days)) + "" day(s)"")

convertMinutesToYears(76586)"
Create a Python program to find all elements in a list that appear more than once.,"def duplicate_elements(lst):
 
 seen_elements = set()
 duplicates = set()
 
 for element in lst:
 if element in seen_elements:
 duplicates.add(element)
 else:
 seen_elements.add(element)
 
 return duplicates
 
list = [1, 2, 3, 2, 4, 5, 1, 0]
duplicates = duplicate_elements(list)
print(duplicates) # {1, 2}"
Write a function to find the maximum value in record list as tuple attribute in the given tuple list.,"def maximum_value(test_list):
  res = [(key, max(lst)) for key, lst in test_list]
  return (res) "
Create a function in Python which takes a list of numbers as input and returns the maximum of the numbers.,"def findMax(l): 
    max = l[0] 
    for x in l: 
        if x > max: 
            max = x 
    return max 
  
# Driver code 
l = [2, -1, 15, 8, 9, 10] 
print(findMax(l))"
Write a Python program to find the minimum number of coins that sum up to a given amount.,"def find_min_coins(amount, denominations):
    min_coins = [float(""inf"")] * (amount + 1)
    min_coins[0] = 0

    for i in range(1, amount + 1):
        for c in denominations:
            if i - c >= 0:
                min_coins[i] = min(min_coins[i - c] + 1, min_coins[i])

    return min_coins[amount]"
"Write a Python program to find an index in a list of numbers, where sum of numbers before it is equal to the sum of numbers after it","def index_sum_equal(nums): 
    total = sum(nums) 
    left_sum = 0 
    for i in range(len(nums)): 
        right_sum = total - left_sum - nums[i] 
        if left_sum == right_sum: 
            return i 
        left_sum += nums[i] 
    return -1"
Create a python script to calculate the moving average of the given data,"def moving_average(data, num_points):
    moving_average_list = []
    for i in range(0, len(data)-num_points+1):
        window_sum = 0
        for j in range(i, i+num_points):
            window_sum += data[j]
        moving_average_list.append(window_sum/num_points)
    return moving_average_list"
Create a Python function that accepts a list of numbers as input and returns a new list with the numbers in reversed order.,"def reverseList(List):
    revList = []
    for i in range(len(List)):
        revList.append(List[len(List) - i - 1])
    return revList"
Write a python program to execute the following statement with a given input,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n*factorial(n-1)
      
result = factorial(5)
print(result)"
Generate a python algorithm to swap two elements in an array,"def swap_array(arr, pos_1, pos_2):
    arr[pos_1], arr[pos_2] = arr[pos_2], arr[pos_1]
    return arr"
Generate a Python code to find the minimum and maximum of a given array of integers.,"def get_min_max(numbers):
  minimum = min(numbers)
  maximum = max(numbers)
  return minimum, maximum"
Create a function in Python that calculates the sum of all even numbers in a given list,"def sum_evens(nums):
 total = 0
 for num in nums:
 if num % 2 == 0:
 total += num
 return total

a = [1, 2, 3, 4, 5, 6, 7, 8, 9]
print(sum_evens(a)) # 20"
Write a Python function that normalizes a given string. The function should remove all the special characters from the string and convert it to all lowercase.,"def normalize_string(text):
	text = text.lower()
	text = ''.join(ch for ch in text if ch.isalnum() or ch == ' ')
	return text"
Model a function in Python that swaps the values of two variables without using a third one.,"def swap(x, y):
    x, y = y, x 
    return x, y

x, y = swap(x, y)
print('x =', x) 
print('y =', y)"
Construct a web scraper in Python that downloads some content from website www.example.com,"import requests
from bs4 import BeautifulSoup

# Make a GET request to fetch the raw HTML content
html_content = requests.get('http://www.example.com').text

# Parse the html content
soup = BeautifulSoup(html_content, ""lxml"")

# Scrape the content
content = soup.p

# Save the content in a text file
with open('content.txt', 'w') as file:
    file.write(content)"
Create a python program to convert a string containing comma seperated values into a list of integers.,"def str_to_list(input_str):
    result = [int(i) for i in input_str.split("","")]
    return result

str = ""12,34,55,67""
int_list = str_to_list(str)
print(int_list) # Output: [12, 34, 55, 67]"
Create a Python script that runs a Monte Carlo simulation to generate a set of random points.,"import random

def monte_carlo_simulation(n):
    points = []
    for _ in range(n):
        x = random.uniform(-1, 1)
        y = random.uniform(-1, 1)
        points.append((x, y))
    return points

result = monte_carlo_simulation(50)
print(result)"
Design a program in Python that takes a string as an input and checks whether all the vowels are present in the string or not.,"def check_vowels(string):
    vowels = ['a','e','i','o','u']
    for vowel in vowels:
        if vowel not in string:
            return False
    return True

print(check_vowels('This is a test'))"
"Create a data structure in Python that stores customer name, address, and phone number.","customer_data = {
    'Name': 'John Smith',
    'Address': '123 Main Street, Anytown, CA 12345',
    'Phone': '555-555-5555'
}"
Perform a sentiment analysis on a body of text using Python.,"import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer

text = ""This is a very positive sentiment!""
sentiment_analyzer = SentimentIntensityAnalyzer()
scores = sentiment_analyzer.polarity_scores(text)

if scores['compound'] > 0.05:
 print(""Positive sentiment!"")
else:
 print(""Negative sentiment!"")"
"Create a data structure in Python to store employee name, salary and designation.","emp_dict = {
    'name':[], 
    'salary':[], 
    'designation':[]
};"
Write a code in Python to remove duplicate elements from a list.,"def remove_duplicates(nums):
  new_list = []
  for num in nums:
    if num not in new_list:
      new_list.append(num)
  return new_list

print(remove_duplicates([1,2,3,4,2,2,4]))"
Create a Python 3 class called 'Bicycle' which has two attributes: 'brand' and 'colour'.,"class Bicycle():
    
    def __init__(self, brand, colour):
        self.brand = brand
        self.colour = colour"
Create a Python class for a Person with name and age attributes.,"class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age"
Generate a python code to find the size of an object.,"import sys
  
def size_of_object(obj): 
    return (sys.getsizeof(obj)) 
  
object1 = 10
print(size_of_object(object1))"
Can you write an Python program to find the sum of two given numbers?,"def sum_integers(a, b): 
    return a + b 
    
# Driver Program 
a = 4
b = 5

print(""Sum of {} and {} is: {}"".format(a, b, sum_integers(a, b)))"
Generate different configurations for a web application using Python.,"config = {
 'templates': {
 'index': 'templates/index.html',
 'about': 'templates/about.html',
 'contact': 'templates/contact.html'
 },
 'static': {
 'css': 'static/css/main.css',
 'js': 'static/js/main.js'
 },
 'credentials': {
 'db_host': 'localhost',
 'db_port': 3306,
 'db_user': 'root',
 'db_pass': '123456'
 }
}"
Develop a function in Python to perform linear search on a given array and return the position of the target element.,"def linear_search(arr, target):
    for i in range(len(arr)):
        if arr[i] == target:
            return i
    return -1

arr = [10, 50, 30, 20, 11]
target = 20

index = linear_search(arr, target)
if index != -1:
    print(""Element found at index"", index)
else:
    print(""Element is not present in the array"")"
Write a function to split a given list into two parts where the length of the first part of the list is given.,"def split_two_parts(list1, L):
    return list1[:L], list1[L:]"
Design a Python program to print out all prime numbers in a range,"def is_prime(n):
    for i in range(2, n):
        if n%i == 0:
            return False
    return True

for num in range(1, 10):
    if is_prime(num):
        print(num)"
Write a function in Python to calculate the nth value of the Fibonacci sequence.,"def fibonacci(n):
  if n == 0 or n == 1:
    return n
  else:
    return fibonacci(n - 1) + fibonacci(n - 2)
  
result = fibonacci(7)
print(result)"
Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.,"def find_longest_conseq_subseq(arr, n): 
	ans = 0
	count = 0
	arr.sort() 
	v = [] 
	v.append(arr[0]) 
	for i in range(1, n): 
		if (arr[i] != arr[i - 1]): 
			v.append(arr[i]) 
	for i in range(len(v)): 
		if (i > 0 and v[i] == v[i - 1] + 1): 
			count += 1
		else: 
			count = 1
		ans = max(ans, count) 
	return ans "
Design a python program that returns the third smallest element from a given list.,"def thirdSmallest(x):
    y = sorted(x)[2]
    return y"
Create a Python script to get the values of a key from a given dictionary.,"d = {""name"": ""John"", ""age"": 35, ""city"": ""New York""}
value = d.get(""age"")
print(value)"
Write a Python function to compute a similarity score between two input strings.,"def get_similarity_score(str1, str2):
    str1_words = str1.split()
    str2_words = str2.split()

    common_words = set(str1_words).intersection(str2_words)
    num_common_words = len(common_words)

    score = num_common_words / len(str1_words) * len(str2_words)
    return score"
Generate a Python program to fill missing values in the given table.,"import pandas as pd

# Read the student data
data = pd.read_csv('student_data.csv')

# Fill the missing values
data['age'] = data['age'].fillna(data['age'].mean())

# Print the result
print(data)"
Create a linear search algorithm in Python that returns the index of a target item in the list.,"def linear_search(arr, target):
    for i in range(len(arr)):
        if arr[i] == target:
            return i
    return -1"
"Create a python data structure that stores the following three values: ""apple"": 0, ""orange"": 25, and ""banana"": 52.","numbers = {""apple"": 0, ""orange"": 25, ""banana"": 52}"
Create an object in Python that includes data from a list comprehension.,"my_object = {x:x for x in my_list}
print(my_object)"
Can you develop a Python script that takes in a URL and prints out the source code?,"import urllib.request
 
url = 'http://www.example.org/'

response = urllib.request.urlopen(url)

print(response.read())"
Generate a Python program that iterates through a given list of numbers and prints the doubled values.,"def double_list(list_nums):
 for num in list_nums:
 print(num * 2)
 
list_nums = [4, 6, 2, 8]
double_list(list_nums)"
Add a sorting feature to this Python script.,"my_list = [1, 5, 7, 2, 8]
my_list.sort()
print(my_list)"
Create a class in Python which calculates the average of two numbers passed to it as parameters.,"class AverageCalculator:
  def __init__(self, num1, num2):
    self.num1 = num1
    self.num2 = num2
  
  def get_average(self):
    return (self.num1 + self.num2) / 2

ac = AverageCalculator(4, 8)
print(""The average of 4 and 8 is: "" + str(ac.get_average()))"
Write a Python program to create a SQL statement for inserting data into a table.,"INSERT INTO users (col1, col2, col3, col4, col5) VALUES (?, ?, ?, ?, ?)"
Create a Python code to generate HTML output from a given text input.,"def generate_html(text): 
    
    html_string = """"
    for line in text.splitlines():
        html_string += ""<p align=\""justify\"">{}</p>\n"".format(line)
    
    return html_string"
Create a Python program that takes a string of words and returns the reverse order of words.,"def reverse_words(words):
    words_list = words.split(' ')
    reversed_list = words_list[::-1] 
    reversed_words = ' '.join(reversed_list) 
    return reversed_words

input_string = 'Hello World' 
result = reverse_words(input_string) 
  
print(result)"
Write Python code to implement a decision tree classifier.,"from sklearn import tree

#features 
features = [[104,0], [100,0], [120,1], [80,0], [105,1]]
#labels
labels = [0,0,1,0,1]

clf = tree.DecisionTreeClassifier()
clf = clf.fit(features, labels)

print(""Predicted Label:"", clf.predict([[120,1]]))"
Generate a list of square numbers in Python.,square_numbers = [x**2 for x in range(10)]
Reverse a given string using python.,"def reverse_string(my_str): 
  rev_str = """" 
  
  for i in my_str: 
    rev_str = i + rev_str
  
  return rev_str

my_str = 'Hello World'

reverse_string(my_str)"
Write a Python function which takes a list of words and counts the number of vowels.,"def count_vowels(words): 
    vowels = ""aeiou"" 
    count = 0 
  
    for word in words: 
        for char in word: 
            if char in vowels: 
                count += 1
    return count"
Generate a function in python that takes in an array argument and counts the number of elements in it.,"def count_elements(arr): 
    return len(arr)"
"Develop an algorithm for calculating the sum of two numbers, in Python.","def add_numbers(a, b):
    return a + b

print(""The sum of 2 and 20 is: "", add_numbers(2, 20))"
Construct an Python program for binary search for an item in a sorted list.,"def binary_search(my_list, item):
    low = 0
    high = len(my_list)-1
    while low<=high: 
        mid = (low+high)//2
        if my_list[mid] == item:
            return mid
        elif my_list[mid] > item: 
            high = mid - 1
        else: 
            low = mid + 1
    return -1"
Develop a program in Python that takes two lists as input and creates a new list that contains only the common elements of both lists.,"def common_elements(list1, list2):
    common_list = []
    for element1 in list1:
        for element2 in list2:
            if element1 == element2: 
                common_list.append(element1)
    return common_list

common_elements_list = common_elements([1,2,3], [2,3,4])
print(common_elements_list)"
Generate a Python program that takes in a string of text and returns the count of each unique word in the string,"def count_words(string):
 word_counts = {} 
 words = string.split()
 
 for word in words:
 if word in word_counts:
 word_counts[word] += 1 
 else:
 word_counts[word] = 1
 
 return word_counts

print(count_words(""This is a sample string"")) 
# Output {'This': 1, 'is': 1, 'a': 1, 'sample': 1, 'string': 1}"
Create a Python program to replace all the vowels in a string with a corresponding number.,"def replace_vowels(string):
    result = """"
    for char in string:
        if char in ""aeiouAEIOU"":
            result += str(ord(char))
        else:
            result += char 
    return result

string = ""Hello World""
result = replace_vowels(string)
print(result)"
Create a python program that prints all the prime numbers between the two numbers provided in the command line.,"import sys 
  
# Find prime numbers between two numbers 
k = int(sys.argv[1]) 
n = int(sys.argv[2]) 
  
print(""List of prime numbers between"", k, 
      ""and"", n, ""are:"") 
for num in range(k, n + 1): 
  
    if num > 1: 
        for i in range(2, num): 
            if (num % i) == 0: 
                break
        else: 
            print(num)"
Write a function to find all words which are at least 4 characters long in a string by using regex.,"import re
def find_char_long(text):
  return (re.findall(r""\b\w{4,}\b"", text))"
Can you build a Python program which calculates the sum of digits of an inputted number?,"def sumDigits(num): 
    sum = 0
    while(num): 
        sum += num % 10
        num = num//10
    return sum

# main function
num = 12345
print(""Sum of digits of specified number is: "", 
      sumDigits(num))"
Create a Python program to determine whether a given spectrum is valid.,"def is_valid_spectrum(spectrum):
    m = spectrum[0]
    for n in spectrum[1:]:
        if n - m not in [1, 2]:
            return False
        m = n
    return True"
Create a high-level algorithm in Python that takes in two integers and returns the maximum value of the two,"def max_value(x, y):
 if x > y:
 return x
 else: 
 return y"
Write a Python program to group all words of a given sentence into a dictionary. Keys of the dictionary should be alphabetically sorted and each key should contain a list of words starting with that letter.,"{
 'a': ['A', 'into'],
 'c': ['cat'],
 'j': ['jumped'],
 'k': ['kitchen'],
 'w': ['wild']
}"
Launch a web server in Docker using Python,"FROM python:3

WORKDIR /app

COPY . /app

RUN pip install flask

EXPOSE 5000

CMD [""python"", ""app.py""]"
Design a Python program to switch the order of two given integers.,"def switch_order(a, b):
  c = a
  a = b
  b = c
  return a, b"
Construct a python program that prints a multiplication table given two numbers (x and y).,"int x = 5; 
int y = 10;

for i in range(1, y+1):
    for j in range(1, x+1):
        print('{} x {} = {}'.format(i, j, i*j))"
Create a program in Python to extract words of length 4 from a given string.,"words = s.split()

four_letter_words = []
for word in words:
   if len(word) == 4:
      four_letter_words.append(word)
      
print(four_letter_words)"
Construct a class for a triangle in the Python language.,"class Triangle:
    def __init__(self, side1, side2, side3):
        self.side1 = side1
        self.side2 = side2
        self.side3 = side3
    
    def get_perimeter(self):
        return self.side1 + self.side2 + self.side3
    
    def get_area(self):
        s = self.get_perimeter() / 2
        return (s * (s-self.side1) * (s-self.side2) * (s-self.side3)) ** 0.5"
Write a Python function to calculate the maximum value of two numbers given by the user.,"def maximum_numbers(x, y):
 if x > y:
 return x
 else:
 return y

print(maximum_numbers(x, y))"
Generate a Python program to find all palindromes in a given list.,"def find_palindromes(lst):
    palindromes = []
    for item in lst:
        if item == item[::-1]:
            palindromes.append(item)
    return palindromes"
develop a python code to calculate the area of a circle.,"def area_of_circle(radius):
    return 3.14 * (radius ** 2)

if __name__ == '__main__':
    radius = 5
    print(area_of_circle(radius)) # 78.5"
Create a function in Python to create a basic calculator.,"def calculator():
    while True:
    print(""Options:"")
    print(""Enter 'add' to add two numbers"")
    print(""Enter 'subtract' to subtract two numbers"")
    print(""Enter 'multiply' to multiply two numbers"")
    print(""Enter 'divide' to divide two numbers"")
    print(""Enter 'quit' to end the program"")"
Create a class in Python to represent a circle in a Euclidean plane.,"class Circle:
    def __init__(self, radius, x=0, y=0):
        self.x = x
        self.y = y
        self.radius = radius

    def area(self):
        return (self.radius ** 2) * math.pi

    def circumference(self):
        return 2 * math.pi * self.radius

    def __str__(self):
        return f'Circle  at ({self.x}, {self.y}) with radius {self.radius}'"
Write a function that matches a string that has an a followed by zero or more b's.,"import re
def text_match(text):
        patterns = 'ab*?'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')"
Can you show how to perform regular expression matching in Python with a given string and pattern?,"import re

s = ""Hello World""
p = ""W.*d""

m = re.match(p, s)
if m is not None:
    print(""Match found!"")
    print(""Position: "" + str(m.start()) + "","" + str(m.end()))
    print(""Matched string: "" + m.group())
else:
    print(""No match found!"")"
Create an algorithm in python to sort the given dataset in ascending order.,"arr = [15, -12, 0, 14, 23, -2]

def insertion_sort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i-1
        while j>=0 and key<arr[j]:
            arr[j+1] = arr[j]
            j -= 1
        arr[j+1] = key
    return arr

print(insertion_sort(arr))"
Construct a function in Python to remove a given value from a list of integers.,"def remove_element(list, element):
  for i in list:
    if i == element:
      list.remove(i)
  return list

list = [5, 7, 6, 1, 3]
element = 3

print(remove_element(list, element)) # => [5, 7, 6, 1]"
Identify the type of an expression in Python.,The expression x is of type string.
Write a Python function to remove all elements from a given list present in another list.,"def remove_elements(list1, list2):
    for item in list2:
        if item in list1:
            list1.remove(item)
    
    return list1

result = remove_elements([1, 2, 3, 4, 5], [4, 5, 6])
print(result)"
Create a function in Python to calculate the sum of 1 to n numbers.,"def sum_nums(n):
    result = 0
    for i in range(1, n+1):
        result += i
    return result

print(sum_nums(10))"
Create a Python3 program to process a list of strings and print each string in uppercase.,"list_of_strings = ['this', 'is', 'a', 'list', 'of', 'strings']

for string in list_of_strings:
    print(string.upper())"
Build a web scraper in Python that scrapes the content from a web page.,"import requests
from bs4 import BeautifulSoup
 
URL = 'https://example.com/page'
r = requests.get(URL)
 
soup = BeautifulSoup(r.content, 'html5lib')
 
# Get all the links on the page
links = soup.find_all('a')
 
# Get the text from all the links
link_text = [link.text for link in links]
 
# Get the URLs for all the links
link_urls = [link.get('href') for link in links]"
Create a web crawler in Python which searches for all links on a given website and prints them out in the terminal.,"import requests
from bs4 import BeautifulSoup

# Get the HTML from the given URL
resp = requests.get(url)

# Parse the HTML
soup = BeautifulSoup(resp.text, 'html.parser')

# Find all the links
for link in soup.find_all('a'):
    print(link.get('href'))"
Convert a C++ program to a Python program.,"print(""Hello World!"")"
Generate Python code to automatically close a database connection after a specific duration of time,"import time

# Connect to the database
db_conn = db_connect()

# Set the duration in seconds    
duration = 10
 
# Start the timer
start_time = time.time()

# Check if the duration has been exceeded
while (time.time() - start_time) < duration:
    # Continue with the database operation.
 
# Close the database connection
db_conn.close()"
Generate an algorithm in Python for reversing an array of numbers.,"def reverse_array(arr):

    # Use the two pointer technique
    start = 0
    end = len(arr) - 1

    while start < end:
        # Swap the values at each pointer position
        arr[start], arr[end] = arr[end], arr[start]
        # Move the pointer to the next position
        start += 1
        end -= 1

    return arr

arr = [1, 2, 3, 4, 5]
reverse_array(arr)"
"Given an array and a target value, write a Python program to find theIndex of the target value in the array.","def find_index(arr, target):
 for i in range(len(arr)):
  if arr[i] == target:
   return i
 return -1"
Generate a Python function that takes a string and reverses its order of characters.,"def reverse_string(my_string):
  reversed_string = ''
  for i in range(len(my_string) - 1, -1, -1):
    reversed_string += my_string[i]

  return reversed_string"
Write a function to find the minimum product from the pairs of tuples within a given list.,"def min_product_tuple(list1):
    result_min = min([abs(x * y) for x, y in list1] )
    return result_min"
Construct an algorithm in Python to find the deepest node in a binary tree.,"def find_deepest_node(root):
    if root is None: 
        return 
    queue = [] 
    queue.append(root) 
  
    deepest_node = None
    while queue:
        node = queue.pop(0)
        deepest_node = node 
  
        if node.left: 
            queue.append(node.left)
        if node.right: 
            queue.append(node.right)
    return deepest_node"
Generate a program in Python that accepts a string as input and removes all vowels from it.,"def removeVowels(str):
    vowels = ('a', 'e', 'i', 'o', 'u') 
    res = """"
    for char in str:
        if char.lower() not in vowels:
            res += char
    return res

print(removeVowels(""Hello World""))"
Create a python program that calculates and prints the average of the three given numbers.,"def avg(x, y, z):
    total = x + y + z
    return total / 3

x = 4
y = 5
z = 6

average = avg(x, y, z)
print('Average of the three numbers is:', average)"
Evaluate the following expression in Python.,44
Develop a program in Python which takes two inputs and returns the sum of their squares.,"def sum_of_squares(num1, num2):
  return num1**2 + num2**2

x = 5
y = 9

print(sum_of_squares(x, y))
# output: 106"
"Using the provided input, write a Python program to find all combinations of two numbers in a list and return the summation of each pair.","def combinationSum(lst):
 result = []
 for i in range(len(lst)):
 for j in range(i + 1, len(lst)):
 result.append(lst[i] + lst[j])
 return result

input_list = [2, 4, 6, 8]
print(combinationSum(input_list))

# Output: [6, 10, 12, 16]"
Create a Python function for encrypting strings using a “Vigenere Cipher”.,"def encrypt_vigenere(plaintext, key):
 ciphertext = """"
 index = 0
 for c in plaintext:
     ciphertext += chr((ord(c) - 65 + ord(key[index]) - 65) % 26 + 65)
     index = (index + 1) % len(key)
 return ciphertext"
Construct a Python program to scrape a web page for specific data.,"import requests
import bs4

url = ""YOUR WEBPAGE URL""
response = requests.get(url)
soup = bs4.BeautifulSoup(response.text, 'html.parser')

# Retrieve appropriate data from webpage
data = soup.find_all('YOUR TAGS')

# Code to write the data to a file
with open('scraped_data.txt', 'w') as file:
    for item in data:
        file.write(str(item))"
Write a Python program that calculates the mean of ten numbers.,"def mean(numbers):
    total = 0
    for num in numbers:
        total += num
    return total / len(numbers)

ten_numbers = [15,18,14,21,12,21,19,6,17,18]
mean = mean(ten_numbers)
print(""Mean of ten numbers:"", mean)"
Edit the following Python code to calculate the average of an array of numbers.,"arr = [3, 4, 5]
sum = 0
for i in arr:
    sum = sum + i

average = sum / len(arr)
print(average)"
Implement a function in Python that takes a list of integers and returns the sum of the squares of the even numbers.,"def sum_of_squares_of_evens(list_):
  sum_ = 0
  for num in list_:
    if num % 2 == 0:
      sum_ += num**2
  
  return sum_"
Write a function in Python that takes a list of numbers and returns a new list with all the elements sorted in descending order.,"def sort_descending(input):
 input.sort(reverse=True)
 return input"
Write a Python function which takes the 3 sides of a triangle as the arguments and calculates the area.,"def calculate_area_triangle(a, b, c):
    '''This function will calculate the area of a triangle given the three sides as parameters.'''
    s = (a + b + c) / 2
    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5
    return area"
Create a function in Python to find the minimum value in a given array.,"def findMin(arr): 
   
    # Initialize minimum element 
    min = arr[0] 
   
    # Traverse array elements starting from 
    # 1st to the last 
    for i in range(1, len(arr)): 
        if arr[i] < min: 
            min = arr[i]
   
    return min

arr = [10, 11, 8, 9, 2] 
print(findMin(arr))"
Create a Python program to read and parse XML data from a URL.,"import requests
import xml.etree.ElementTree as ET

url = 'https://example.com/data.xml'
r = requests.get(url)
xml_data = r.text

root = ET.fromstring(xml_data)

for child in root:
 print(child.tag, child.attrib)"
Create a python program to find the prime factors of an input number.,"def prime_factors(num):
        factors = []
        i = 2
        while num > 1:
            while num % i == 0:
                num = num / i
                factors.append(i)
            i += 1
        return factors

num = 50
factors = prime_factors(num)
print(factors) # -> [2, 5,  5]"
Write a code to perform strings concatenation in Python,"result = ""Hello"" + "" "" + ""World""
print(result)"
"Create a function in Python that takes a string argument, and returns all the possible permutations of that string.","def permutations(str):
 if len(str) == 1:
 return [str]
 else:
 perms = []
 for i in range(len(str)):
 remaining_elements = str[:i] + str[i+1:]
 z = permutations(remaining_elements)
 for t in z:
 perms.append(str[i] + t)
 
 return perms"
Create a Python program to calculate the average of five numbers entered by a user.,"nums = []
for i in range(5):
    nums.append(int(input(""Please enter number: "")))

#Calculate average
average = sum(nums) / len(nums)

#Print average
print(""The average is "", average)"
Edit the following Python function so that it returns a list of the factors of a number.,"def factors(n):
    factors =[]
    for i in range(1, n + 1):
        if n % i == 0:
            factors.append(i)
    return factors"
Develop a Python program that can find the average of any set of numbers.,"def find_average(nums):
    total = 0
    for num in nums:
        total += num
    return total / len(nums)"
Write a function to merge two dictionaries into a single expression.,"import collections as ct
def merge_dictionaries(dict1,dict2):
    merged_dict = dict(ct.ChainMap({}, dict1, dict2))
    return merged_dict"
Generate a Python script to sort a given list of numbers without using the built-in function ``sort()``,"def sort_list(list):
    '''This function will sort a given list of numbers without using the built-in function sort()'''
    for i in range(len(list)):
        for j in range(i+1, len(list)):
            if list[i] > list[j]:
                list[i], list[j] = list[j], list[i]
    return list"
Write a python program to fill in missing values in a given list of strings.,"input_list = ['a', '', 'b', '', 'c']

for i, val in enumerate(input_list):
    if val == '':
        input_list[i] = input_list[i-1]

print(input_list) # ['a', 'a', 'b', 'b', 'c']"
Design a Python program to print all keywords in a given paragraph.,"text = ""The best way to learn a programming language is to practice coding.""
words = text.split()

keywords = [""for"", ""if"", ""while"", ""in"", ""range"", ""def"", ""import"", ""from"", ""as"", ""return""]

for word in words:
    if word in keywords:
        print(word)"
Create a Python program to retrieve the hours worked by an employee from a given list of timestamps.,"def total_hours(timestamps):
    total_hours = 0
    for i in range(1, len(timestamps)):
        total_hours += (timestamps[i] - timestamps[i-1]) / 3600
    return total_hours

timestamps = [1577296930, 1577297490, 1577299030]

print(total_hours(timestamps))

# Output should be 3.33"
Write a function in Python that takes two lists of integers as arguments and returns the elements that are present in both lists.,"def intersection(list1, list2):
 result = []
 
 for element in list1:
 if element in list2:
 result.append(element)
 
 return result

intersection(list1, list2) // Output: [3, 5]"
Generate a Python program to remove all the elements equal to the given target from an array.,"def remove_target(arr, target): 
    result = [] 
    for num in arr: 
        if num != target: 
            result.append(num) 
    return result"
Write a Python program to find the pi (π) value to 5 decimal places.,"import math

# Caluclate pi to the 5th decimal place
pi = round(math.pi, 5)

# Print the pi
print(pi)"
"Using the provided dataset, create a Python program that returns the total number of people in a given age range.","def count_people_in_age_range(ageGroup1, ageGroup2):
 total = 0
 for age in ageGroup1 + ageGroup2:
  if age >= 10 and age <= 20:
   total += 1
 return total"
Write a function for nth catalan number.,"def catalan_number(num):
    if num <=1:
         return 1   
    res_num = 0
    for i in range(num):
        res_num += catalan_number(i) * catalan_number(num-i-1)
    return res_num"
Write a Python program to generate a fibonacci series until the total count reaches 50.,"def fibonacci_series(num) : 
    num1, num2 = 0, 1
    count = 0
    while count < num : 
        print(num1) 
        nth = num1 + num2 
        num1 = num2 
        num2 = nth 
        count += 1

# fibonacci series until count reaches 50 
fibonacci_series(50)"
Write a Python program to calculate the probability of two dice rolling the same number.,"def two_dice_same(n_dice): 
 total_prob = 0 
 for i in range(1, n_dice + 1): 
 probability = (1/6)**i * (5/6)**(n_dice - i) 
 total_prob += probability 
 return total_prob

result = two_dice_same(2)
print(result)"
Program a Python script that has a given list of integers as input and returns the sum of the list elements.,"def sum_list(my_list):
	total = 0
	for i in my_list:
		total += i
	return total"
Write a python function to check whether one root of the quadratic equation is twice of the other or not.,"def Check_Solution(a,b,c): 
    if (2*b*b == 9*a*c): 
        return (""Yes""); 
    else: 
        return (""No""); "
Develop a Python program that calculates the maximum and minimum of a given list.,"def get_min_max(nums): 
  min_value = min(nums) 
  max_value = max(nums) 
  return (min_value, max_value)"
Write a function that gives loss amount if the given amount has loss else return none.,"def loss_amount(actual_cost,sale_amount): 
  if(sale_amount > actual_cost):
    amount = sale_amount - actual_cost
    return amount
  else:
    return None"
Generate a function for calculating the average of a list of numbers in Python.,"def avg_list(lst):
 sum = 0
 count = 0
 for i in lst:
  sum += i
  count += 1
 avg = sum / count
 return avg"
Rewrite this Python code in Java.,"int[] nums = {1, 5, 7, 10};

for (int i : nums) {
    System.out.println(i);
}"
Create a class in Python with properties to store the name and age of a person.,"class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
    
    def get_name(self):
        return self.name
    
    def get_age(self):
        return self.age"
Create a method in the Python language that takes a list of integers and returns a list containing only the values greater than 10.,"def filter_greater_than_10(nums):
 filtered_nums = []
 for num in nums:
 if num > 10:
 filtered_nums.append(num)
 return filtered_nums

nums = [1, 5, 10, 15, 20]
filtered_nums = filter_greater_than_10(nums)
print(filtered_nums) # [15, 20]"
Generate a function in Python that receives a number and adds 15 to it.,"def add_fifteen(num):
    return num + 15"
Develop a program in Python for converting a base 10 number to binary.,"def decimalToBinary(n):
    binary = 0
    power = 1
    
    while (n != 0):
        last_bit = n % 2
        binary = binary + last_bit * power
        n = n // 2
        power = power * 10
 
    return binary

n = 17
print('Binary Representation of', n, 'is', decimalToBinary(n))"
"Create a CLI program in Python that takes two arguments, multiplies them together and prints out the result.","import argparse

parser = argparse.ArgumentParser()
parser.add_argument('number1', type=int, help='First number to multiply')
parser.add_argument('number2', type=int, help='Second number to multiply')
args = parser.parse_args()

result = args.number1 * args.number2
print(result)"
Design a Python program to calculate the sum of all prime numbers in a given range of numbers.,"def sum_prime_numbers(start, end):
  total = 0
  for num in range(start, end + 1):
    if is_prime(num):
      total += num
  return total

def is_prime(num):
  for i in range(2, num):
    if num % i == 0:
      return False
  
  return True"
"Create a Python class to represent an Employee. The Employee class should have the following attributes: name, salary, and department name.","class Employee:
    def __init__(self, name, salary, department):
        self.name = name
        self.salary = salary
        self.department = department

emp = Employee(""John"", 10000, ""Accounting"")
print(emp.name)
# Output: John"
Write a loop in Python for printing ‘Hello World’ 10 times,"for _ in range(10):
  print('Hello World')"
Write a python program that adds all the elements in a given list,"def list_sum(list):
    sum = 0
    for num in list:
        sum += num
    return sum"
"Given an input sentence with 4 different words, create a python program that phrases each word with the same first letter.","""""""
Given an input sentence with 4 different words, create a python program that phrases each word with the same first letter
""""""

words = 'Hello World Goodbye Mars'.split()

for word in words:
  print(word[0] + word[1:])"
Use matplotlib in Python to create a pie chart depicting a survey result.,"import matplotlib.pyplot as plt
 
labels = list(responses.keys())
values = list(responses.values())
colors = ['#F08080', '#F8A458', '#9BC808', '#000080']
 
plt.pie(values, labels = labels, colors = colors, autopct='%1.2f%%')
plt.title('Favorite Fruits')
plt.axis('equal')
plt.show()"
"Modify the following Python script to create a new object 'obj2' that has the same data as 'obj1', but with the 'val2' value changed to 100.","obj1 = {'key1': 'val1', 'key2': 'val2'}

# create a copy of obj1
obj2 = obj1.copy()
# modify the value of key2
obj2['key2'] = 100"
Convert the following Python script to Java.,"List<Integer> myList = Arrays.asList(1, 2, 3, 4, 5);
for(int i = 0; i < myList.size(); i++){
    System.out.print(myList.get(i) + "" "");
}"
"Define a Python class called “Car”, with attributes for make, model, and color.","class Car:
    def __init__(self, make, model, color):
        self.make = make
        self.model = model
        self.color = color
        
    def get_description(self):
        return f""The {self.make} {self.model} is {self.color}."""
Create a Python program to mark a character as asterisk (*) if it's the same as the previous one?,"def mark_asterisk(input):
    res = """"
    temp = input[0]
    for char in input:
        if char == temp:
            res += '*'
        else:
            res += char
            temp = char
    return res"
"Create a Python dictionary representing the following data:
   - A points to 4 
   - B points to 6 
   - C points to 10","d = { ""A"": 4, ""B"": 6, ""C"": 10 }"
Design a Python program to print a triangle of numbers.,"def triangle_of_nums(n):
    k = 0
    for i in range(1, n + 1):
        # inner loop to handle number of columns 
        for j in range(0, i): 
           # printing numbers 
           print(k, end="" "") 
           # incrementing k 
           k = k + 1
        # ending line after each row 
        print(""\r"") 

n = 4
triangle_of_nums(n)

# Output:
# 0 
# 1 2 
# 3 4 5 
# 6 7 8 9"
Create an algorithm in Python that finds the maximum and minimum numbers in an unsorted array.,"def get_max_min(arr):
    max_num = None
    min_num = None

    for n in arr:
        if max_num is None or n > max_num:
            max_num = n

        if min_num is None or n < min_num:
            min_num = n

    return max_num, min_num

max_num, min_num = get_max_min([-5, 7, 2, 11, -9])
print(f""max = {max_num}, min = {min_num}"")"
Create a Python function to calculate the length of the hypotenuse of a right triangle.,"def hypotenuse(a, b):
  return (a**2 + b**2) ** 0.5

print(hypotenuse(3, 4)) # 5.0"
Write a Python script to traverse a directory and its subdirectories.,"""""""
Write a Python script to traverse a directory and its subdirectories.
""""""

import os

def list_files(start_path):
    for root, dirs, files in os.walk(start_path):
        for name in files:
            print(os.path.join(root, name))

if __name__ == '__main__':
    start_path = '.'
    list_files(start_path)"
Create a Python program to read the contents of a JSON document and store it in a list.,"import json

with open('data.json', 'r') as f:
 data = json.load(f)

data_list = []

for item in data:
 data_list.append(item)

print(data_list)"
"Design a REST API in Python for connecting a remote database, and fetching One user’s all records from the database.","import requests

# Connect the remote database
url = ""http://{database_url}/connect""
data = {
   'username': 'John',
   'password': '12345'
}

response = requests.post(url, data=data)

# Get user data
url = ""http://{database_url}/user/data""
response = requests.get(url)

# Print user data
print(response.json())"
Create a Python module that can encrypt and decrypt strings.,"from cryptography.fernet import Fernet

def encrpyt_string(text):
    key = Fernet.generate_key()
    cipher_suite = Fernet(key)
    token = cipher_suite.encrypt(text.encode())  

    return token

def decrpyt_string(token):
    key = Fernet.generate_key()
    cipher_suite = Fernet(key)
    plain_text = cipher_suite.decrypt(token)

    return plain_text"
Write a python function to find the first even number in a given list of numbers.,"def first_even(nums):
    first_even = next((el for el in nums if el%2==0),-1)
    return first_even"
Create a Python module that takes in an array and returns the greatest common divisor (GCD).,"def gcd(arr):
    gcd = arr[0]
    for i in arr[1:]:
        while i:
            gcd, i = i, gcd % i
    return gcd

arr = [30,42]
print(gcd(arr))"
"Design a Python class to represent a 3D vector (x, y, z).","class Vector3:
    def __init__(self, x, y, z):
        self.x = x
        self.y = y
        self.z = z
        
    def __str__(self):
        return ""x = {}, y = {}, z = {}"".format(self.x, self.y, self.z)
        
    def __add__(self, vector): 
        x = self.x + vector.x 
        y = self.y + vector.y 
        z = self.z + vector.z
        return Vector3(x, y, z)"
Write a script in Python that prints all prime numbers between two given numbers.,"start = 10
end = 20

for num in range(start, end + 1):
   # all prime numbers are greater than 1
   if num > 1:
       for i in range(2, num):
           if (num % i) == 0:
               break
       else:
           print(num)"
"Write a Python function that takes two input strings and returns TRUE if the second string is a rotation of the first one (e.g., 'hello' and 'lohel' should return true).","def is_rotation(str1, str2):
    return len(str1) == len(str2) and str2 in str1 + str1

# testing
print(is_rotation('hello', 'lohel'))  # prints True"
Create a quick sort algorithm in Python.,"def quick_sort(a): 
    if len(a) <= 1: 
        return a 
  
    lower, equal, greater = [], [], [] 
  
    pivot = a[len(a) - 1] 
  
    for i in a: 
        if i < pivot: 
            lower.append(i) 
        elif i == pivot: 
            equal.append(i) 
        else: 
            greater.append(i) 
  
    return quick_sort(lower) + equal + quick_sort(greater)"
Write a Python program to find the first non-repeated letter in a string.,"def first_non_repeating_letter(str):
    for char in str:
        if str.lower().count(char.lower()) == 1:
            return char

    return ''

# main
str = ""apple""
print(""First non-repeating letter:"", first_non_repeating_letter(str))"
Create a function in Python that takes 2 lists and returns their intersection.,"def intersection(list1, list2): 
    intersection_elements = set(list1) & set(list2) 
    return list(intersection_elements)

intersection_list = intersection(list1, list2)
print(intersection_list)"
Write a Python program to get the latest news article from a news website.,"import requests
from bs4 import BeautifulSoup

url = 'https://example.com/news'

response = requests.get(url)
soup = BeautifulSoup(response.content, 'lxml')

latest_news = soup.find('div', id='latest_news')
latest_article = latest_news.find('h2')

print(latest_article.text)"
Construct Python code to count the occurrence of a specific word in a given sentence.,"def word_count(sentence,word):
        word_count=0
        words=sentence.split("" "")
        for w in words:
            if(w==word):
                word_count+=1
                return word_count


sentence = ""She sells sea shells on the sea shore""
word = ""sea""
res = word_count(sentence, word) 
print(res)"
"Create a Python class for a ""Student"" with fields for ""name"" and ""age"".","class Student:
    def __init__(self, name, age):
        self.name = name
        self.age = age"
Generate a valid python class that captures person information,"class Person:
    def __init__(self, name, age, gender, nationality):
        self.name = name
        self.age = age
        self.gender = gender
        self.nationality = nationality
 
    def __str__(self):
        return 'Name: {}\nAge: {}\nGender: {}\nNationality: {}'.format(
            self.name, self.age, self.gender, self.nationality)"
Generate a list of alphabets in Python,"alphabets = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']"
Write a Python function to calculate the greatest common factor (GCF) of two numbers.,"def gcf(m, n):
    while m != 0:
        m, n = n % m, m 
    return n

print(gcf(15, 25))"
Can you generate the Fibonacci sequence up to 20 using Python?,"# Fibonacci Sequence up to 20
a, b = 0, 1
while a < 20:
    print(a)
    a, b = b, a+b"
Write a function in Python to traverse a multi-dimensional array and print each item in the array.,"def traverse_array(arr): 
 if isinstance(arr, list) or isinstance(arr, tuple): 
 for item in arr:
 traverse_array(item)
 else:
 print(arr)

arr = [[1,2,3], [4,5,6], [7,8,9]] 
traverse_array(arr)"
Create an API request using Python to get the status of your favorite website.,"import requests

url = 'http://example.com'

r = requests.get(url)

if r.status_code == 200:
  print('Website is up and running.')
else:
  print('Website is not responding.')"
Write a python function to find the hamming distance between given two integers.,"def hamming_Distance(n1,n2) : 
    x = n1 ^ n2  
    setBits = 0
    while (x > 0) : 
        setBits += x & 1
        x >>= 1
    return setBits  "
Develop a program in Python that calculates the total surface area of a cube.,"def cube_surface_area(side):
    """""" 
    Calculate and return the total surface area of a cube 
    given the side length.
    """"""
    return 6 * side**2"
Write a Python program to generate a combination of random characters.,"import random
 
characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
length = 8
 
randstring = ''.join(random.choice(characters) for i in range(length))"
Write an algorithm in Python to detect duplicate values in a given array.,"def find_duplicates(arr):
    duplicates = []
    seen = set()
    for i in arr:
        if i not in seen:
            seen.add(i)
        else:
            duplicates.append(i)
    return duplicates"
"Create a Python function to sort a list of strings lexicographically, where strings are of varying lengths.","def lexicographic_sort(string_list):
    # Sort by length
    string_list.sort(key=len)
 
    # Second, sort by alphabetical order
    string_list.sort()
 
    return string_list

string_list = [""abcd"", ""def"", ""fh"", ""ac"", ""a""]
print(lexicographic_sort(string_list)) # [""a"", ""ac"", ""def"", ""fh"", ""abcd""]"
"Using the comment as guide, construct a python program that checks whether a given value is in a list","def search_list(input_list, input_value):
    """"""Checks whether a given value is in a list""""""
    for num in input_list:
        if num == input_value:
            return True
    return False"
Design a python program to find the maximum value of an array.,"def maxVal(arr):
    maxVal = -float(""inf"")
    for num in arr:
        if num > maxVal:
            maxVal = num
    return maxVal

maxVal([2, 4, 7, 6]) #returns 7"
Write a function to count the number of inversions in the given array.,"def get_inv_count(arr, n): 
	inv_count = 0
	for i in range(n): 
		for j in range(i + 1, n): 
			if (arr[i] > arr[j]): 
				inv_count += 1
	return inv_count "
Create a Python script for calculating the area of a circle with radius r.,"def calculate_area_circle(r):
    PI = 3.1415
    area = PI * r**2
    return area"
Build a Python program to fetch 10 top trending articles from `medium.com` every 5 minutes.,"import requests
import os
import time

while True:
    response = requests.get(""https://medium.com/top-stories"")
    if response.status_code == 200:
        with open(""trending-articles.html"", ""w"") as f:
            f.write(response.text)
            time.sleep(300)
    else:
        print(""Error fetching webpage."")"
Modify the given Python code to handle errors more precisely.,"try:
    a = 5 / 0
except ZeroDivisionError as error:
    print(error)
except Exception as error:
    print(error)"
Write a Python program to check whether a number is divisible by a given divisor.,"def is_divisible(num, divisor):
    return num % divisor == 0
 
num = int(input(""Number: ""))
divisor = int(input(""Divisor: ""))

print(""Number is divisible by the divisor :"", is_divisible(num, divisor))"
Create a function in Python that takes two list of numbers and outputs the product of each element in both lists.,"def productOfLists(arr1, arr2):
    res = []
    for i in range(len(arr1)):
        for j in range(len(arr2)):
            if i == j:
                res.append(arr1[i] * arr2[j])
    return res

product = productOfLists([1, 2, 3], [3, 4, 5])
print(product)"
Create a Python program that takes any number of lists and combines them into a single list.,"def combine_lists(*lists):
    '''This function takes any number of lists and combines them into a single list.'''
    combined_list = []

    for list in lists:
        for item in list:
            combined_list.append(item)

    return combined_list

combined_list = combine_lists(list_1, list_2, list_3)
print(combined_list)"
Develop a Python function that sorts a given list of strings on the basis of the length of the string.,"def sort_list(lst):
    return sorted(lst, key = len)

lst = ['Coders', 'NS', 'Coding', 'Program']

result = sort_list(lst)

print(result)  # ['NS', 'Coding', 'Coders', 'Program']"
Create a Python program that takes an integer as an input and calculates the sum of all the digits of the integer.,"# take a number 
number = int(input(""Please enter a number: "")) 
  
#initialize sum
sum = 0
  
#Find the sum of the digits of the number
temp = number
while temp > 0: 
   digit = temp % 10
   sum += digit 
   temp //= 10
  
# print the output
print(""The sum of the digits of the given number is"", sum)"
Generate a random 4-digit number using Python.,"import random

random.randint(1000, 9999)"
Devise a Python function to calculate Fibonacci series up to n numbers.,"def Fibonacci(n): 
    if n<0: 
        print(""Incorrect input"") 
    # First Fibonacci number is 0 
    elif n==1: 
        return 0
    # Second Fibonacci number is 1 
    elif n==2: 
        return 1
    else: 
        return Fibonacci(n-1)+Fibonacci(n-2) 
  
# Driver Program 
  
print(Fibonacci(10))"
Write a Python function to sort a dictionary (key: value) by its values in descending order.,"def desc_sort_dict(my_dict):
  return {k: v for k, v in sorted(my_dict.items(), key=lambda item: item[1], reverse=True)}"
Write a Python program to print Fibonacci series up to a given number.,"def Fibonacci(n): 
    if n==0: 
        return 0
    elif n==1: 
        return 1
    else: 
        return Fibonacci(n-1)+Fibonacci(n-2)  

# Driver Code
print(""Fibonacci series:"") 
for i in range(10): 
    print(Fibonacci(i), end="" "")"
Create a list expression and a set expression in Python that converts the given list to a set.,"list_expression = set([x for x in list]) 

set_expression = set(list)"
Write a python program to check if a list contains a pair of elements that sum up to a given total.,"def is_sum_possible(nums, target_sum):
    num_set = set(nums)

    for num in num_set:
        if (target_sum - num) in num_set:
            return True
    return False"
Create an algorithm in Python that takes a string as input and returns a list of words from that string.,"def string_to_words(s):
    return s.split(' ')

words = string_to_words('Hello World')
print(words)"
Create a python program to classify if a given string contains any numbers.,"import re

def contains_numbers(string):
    """"""Classify if a given string contains any numbers.""""""
    return bool(re.search(r'\d', string))

# Usage Example
string = ""password123""
contains_numbers = contains_numbers(string)
print(contains_numbers)  # True"
Write a python function that takes two lists of numbers and returns the intersection between them.,"def intersection(list1, list2):
 result = []
 set1 = set(list1)
 set2 = set(list2)

 for item in set1 & set2:
 result.append(item)

 return result

list1 = [1,2,3,4,5]
list2 = [3,4,5,6,7]
result = intersection(list1, list2)
print(result) # prints [3, 4, 5]"
Create a Python function that prints the largest of three numbers.,"def max_number(num1,num2,num3):
  max_num=max(num1,num2,num3)
  print(f""The largest number is {max_num}"")"
Create a Python program that generate a random sequence of numbers with length of 5.,"import random

def generate_sequence():
  sequence = [random.randint(0,20) for i in range(5)]
  print(sequence)
  
generate_sequence()"
Can you design a function in Python to sort a list of tuples based on the second item in the tuple?,"def sort_tuple(tuples):
    # sort by 2nd item of the tuple
    tuples.sort(key=lambda x: x[1])
    return tuples

# Test
tuples = [(""b"", 0), (""a"", 1), (""c"", -1)]
sorted_tuples = sort_tuple(tuples)
print(sorted_tuples) # [(""c"", -1), (""b"", 0), (""a"", 1)]"
Write a function to find the perimeter of a rombus.,"def rombus_perimeter(a):
  perimeter=4*a
  return perimeter"
Construct a function to calculate the sums of the rows of a 2D array in Python.,"def calculateRowSums(arr: List[List[int]]): 
    sums = [] 
    for row in arr: 
        sums.append(sum(row)) 
    return sums 
  
if __name__ == ""__main__"": 
    arr = [[1, 2, 3], [4, 5, 6]] 
    print(calculateRowSums(arr))"
Generate a correct python script to identify the output of a given expression.,"a = (4 + 2) * 3
print(a)"
How can you generate a series of random numbers using Python?,"import random

for i in range(10):
    num = random.random()
    print(num)"
Build a mathematical model in Python to calculate the probability of heads on a coin toss.,"def probability_of_heads(n):
    total_outcomes = 2**n
    heads_outcomes = total_outcomes/2
    
    probability_of_heads = heads_outcomes / total_outcomes
    
    return probability_of_heads"
Write a Python program to take two numbers as input and find the greatest common divisor.,"def gcd(a, b):
 if a == 0:
  return b

 while b != 0:
  if a > b:
   a = a - b
  else:
   b = b - a
 return a

# Test
print(gcd(36, 18)) # Output: 18"
"Write a Python program to return the day, date and time when the user enters a specific date as an argument.","import datetime

def get_day_date_time(date_string):
    date = datetime.datetime.strptime(date_string, '%Y-%m-%d')
    return date.strftime('%A, %d %B %Y, %H:%M:%S')

date_string = input('Please enter a date in the format YYYY-MM-DD: ')
print(get_day_date_time(date_string))"
Edit the following Python code so that it will run without any errors.,"print(""Hello World"")
if a == b:
 print(""A is equal to B"")"
Generate a generic sorting algorithm in Python.,"def sort(data):
    """"""Generic sorting algorithm.""""""
    if len(data) == 0:
        return []
    else:
        pivot = data[0]
        less = [i for i in data[1:] if i <= pivot]
        greater = [i for i in data[1:] if i > pivot]
        return sort(less) + [pivot] + sort(greater)"
Suggest a code to generate the Fibonacci series in Python.,"# Define a function to generate the Fibonacci series
def FibonacciSeries(n):
    # Declare two variables to store the series
    a = 0 
    b = 1
    # Print the initial values of the series
    print(a)
    print(b)
    # Iterate and generate the series
    for i in range(2, n):
        c = a + b 
        print(c) 
        a, b= b, c

# Call the function with the n-terms
FibonacciSeries(10)"
Write a function to check for a number at the end of a string.,"import re
def end_num(string):
    text = re.compile(r"".*[0-9]$"")
    if text.match(string):
        return True
    else:
        return False"
Write a Python program to find the common elements in two given arrays,"def common_elements(arr1, arr2):
  result = []
  for ele in arr1:
    if ele in arr2:
      result.append(ele)
  return result"
Optimize a simple Python program for finding the sum of two numbers. The program should take two numbers as an input and return the sum as an output.,"def add_numbers(num1, num2):
 '''
 Function to add two numbers 
 '''
 return num1 + num2 

# Driver code 
print(add_numbers(15, 7))"
Create a Python script that takes a list of strings as input and prints them in reverse order.,"def reverse_list(lst):
  lst.reverse()
  for item in lst:
    print(item)
  
reverse_list([""apple"", ""banana"", ""cherry""])"
Create a string function in Python to convert all words in a string to uppercase.,"def to_upper(string):
 return string.upper()
 
print(to_upper(string))  # THIS IS A SAMPLE STRING"
Write a Python program that prints out the number of days since a given date.,"from datetime import date

def days_since(date_str):
    today = date.today()
    given_date = date.fromisoformat(date_str)
    days = today - given_date
    return days.days"
Reconstruct the following Python function such that the output is reduced to one line.,"def calculate_sum(numbers):
    return sum(numbers)"
"Write a Python program to generate random passwords. The passwords should include letters, numbers, and special characters (like $, &, #). The passwords should be at least 8 characters long.","import random
import string

def generate_password(length):
 chars = string.ascii_letters + string.digits + '$#&'
 return ''.join(random.choice(chars) for _ in range(length))

length = 8
password = generate_password(length)
print(password)"
"Given the following Python code, determine how many lines of code are in the code.",4
Create a GPT model to generate a Python program that carries out the following task,"def sumOdd(lst):
    sum = 0
    for ele in lst:
        if ele%2 == 1:
            sum+=ele
    return sum"
Develop a Python code snippet to compute the Euclidean distance between two points.,"def euclidean_distance(point1, point2):
    dx = point1[0] - point2[0]
    dy = point1[1] - point2[1]
    return (dx*dx + dy*dy)**0.5"
Write a Python program to classify the following sentence as either positive or negative.,"def classify(sentence):
    if ""horrible"" in sentence:
        return ""negative""
    else:
        return ""positive""

sentiment = classify(""This is an horrible movie"")
print(sentiment)"
Write a Python program to parse a JSON object from a given string.,"import json

givenString = ""{\""name\"": \""John Doe\"", \""age\"": 28}""

data = json.loads(givenString)

print(data)"
Create a list of words from a sentence using Python,"sentence = ""The quick brown fox jumps over the lazy dog"" 
word_list = sentence.split("" "") 
print(word_list) 

# Output: ['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']"
Optimize a Python script to find the maximum value of a series of numbers.,"def find_max(lst):
 max_value = None
 for number in lst:
 if max_value is None or number > max_value:
 max_value = number
 return max_value

# Main
lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
max_value = find_max(lst)
print('The maximum value of the list is {}'.format(max_value))"
Implement a sorting algorithm in Python to sort a list of integers.,"def sort(list): 

    for i in range(len(list)): 
        min_idx = i 
        for j in range(i+1, len(list)): 
            if list[min_idx] > list[j]: 
                min_idx = j 
                
        list[i], list[min_idx] = list[min_idx], list[i] 
 
list = [5, 2, 8, 1, 4] 
sort(list) 
print(list)"
Create a geometric figure that uses Python Turtle graphics.,"import turtle 

def draw_square(some_turtle):
    for i in range(1,5):
        some_turtle.forward(100)
        some_turtle.right(90)

# Create a turtle object
my_turtle = turtle.Turtle()

# Draw a figure 
draw_square(my_turtle)"
Create a class in Python for an object that can contain two strings.,"class TwoStringObject:
    def __init__(self, str1, str2):
        self.str1 = str1
        self.str2 = str2"
"Use Python to generate a random password that is 20 characters long and contains symbols, numbers, and letters.","import string
import random

length = 20

password = ''
for c in range(length):
 password += random.choice(string.ascii_letters + string.digits + string.punctuation)

print(password)"
Write a function to find the greatest common divisor (gcd) of two integers by using recursion.,"def recur_gcd(a, b):
	low = min(a, b)
	high = max(a, b)
	if low == 0:
		return high
	elif low == 1:
		return 1
	else:
		return recur_gcd(low, high%low)"
Build a class in Python that will generate a random number between 1 and 1000.,"import random

class RandomNumberGenerator:
    def generate(self):
        return random.randint(1, 1000)"
"Given a list, write a Python script to reverse the order of the list.","list = [10, 20, 30, 40, 50]
list.reverse()
print(list)"
Create a Python function to generate a 2-dimensional array of random numbers between 0 and 1.,"def generate_random_array(m, n):
    array = [[random.random() for i in range(m)] for j in range(n)]
    return array"
Write a python function to count negative numbers in a list.,"def neg_count(list):
  neg_count= 0
  for num in list: 
    if num <= 0: 
      neg_count += 1
  return neg_count "
Generate a loop to iterate through each character of a string in Python.,"""""""
Generate a loop to iterate through each character of a string
""""""

# Define a string
string = 'Example string'

# Iterate through the characters of the string
for char in string:
    # Print each character
    print(char)"
Write a function to calculate the value of 'a' to the power 'b'.,"def power(a,b):
	if b==0:
		return 1
	elif a==0:
		return 0
	elif b==1:
		return a
	else:
		return a*power(a,b-1)"
Implement the K-Nearest Neighbors (KNN) algorithm in Python using the scikit-learn library.,"from sklearn.neighbors import KNeighborsClassifier

# creating 3x3 data
X = [[1, 2, 3],
     [4, 5, 6],
     [7, 8, 9]]

# creating output
y = [1,2,3]

# creating and fitting KNN model 
model = KNeighborsClassifier(n_neighbors=3)
model.fit(X, y)

# predicting an example
test = [[1,2,3]]
result = model.predict(test)
print(result)"
Write an algorithm using Python that calculates the prime factors of an input number.,"def prime_factorize(x):
 if x == 1:
 return []
 i = 2
 prime_factors = []
 while x > 1:
 if x % i == 0:
 prime_factors.append(i)
 x= x / i
 else:
 i += 1
 return prime_factors

prime_factorize(10) # Output: [2, 5]"
Create a Python function to find the longest word in a given sentence.,"def longest_word(sentence):
    words = sentence.split()
    longest_word = """"
    for word in words:
        if len(word) > len(longest_word):
            longest_word = word
    return longest_word"
"Generate a Python program that reads a city name from the user, fetches data from the weather API and displays the temperature.","import requests

city = input(""Enter city name:"")
url = ""http://openweathermap.org/data/2.5/weather?q=""+city
r = requests.get(url)
data = r.json()

print(""The temperature in {0} is {1} degree Celsius."".format(city,data[""main""][""temp""]))"
Create a Python script to break the given sentence into words.,"def break_sentence(sentence):  
    return sentence.split("" "")"
How would you convert this comma separated string to a list in Python?,"Str = ""apple, banana, orange, grapes""
my_list = Str.split("", "")

# Output
my_list = [""apple"",""banana"",""orange"",""grapes""]"
Generate a python program to determine if two objects are mutually exclusive or not.,"def mutually_exclusive(object1, object2):
    if len(object1.intersection(object2)) > 0:
        return False
    else:
        return True
    
object1 = set([1, 2, 3])
object2 = set([4, 5, 6])

result = mutually_exclusive(object1, object2)
print(result) # Outputs True as objects don't share elements."
Create a Python dictionary of 5 key-value pairs with the keys being strings and the values being integers.,"sample_dict = {""key1"": 1, ""key2"": 2, ""key3"": 3, ""key4"": 4, ""key5"": 5}"
Develop a Python program that computes the sum of integers from 1 to n.,"def find_sum(n):
  if n == 0:
    return 0
  return n + find_sum(n-1)

n = int(input(""Enter a number:""))

print(""The sum of integers from 1 to"", n,  ""is"",  find_sum(n))"
Design a Python function to check if two given strings are anagrams or not.,"def check_anagram(str1, str2):
 
    if sorted(str1) == sorted(str2):
        return True
    else:
        return False"
Design a program that outputs the average value of a list in Python.,"# Given a list of numbers
nums = [1, 4, 10, 6]

# Calculate the average
total = 0
for num in nums:
    total += num

average = total/ len(nums)

# Output the average
print(average)"
Generate a random 4 character long string in Python.,"import random

def random_string(string_length=4):
 letters = string.ascii_lowercase
 return ''.join(random.choice(letters) for i in range(string_length))

random_string()"
Create a Python module that calculates the perimeter of a circle.,"import math

def calculate_circle_perimeter(radius):
        return 2 * math.pi * radius"
Generate a random full name with Python.,"import random

# List of first names
first_names = ['John', 'Jane', 'Jack', 'Jill', 'Joe', 'Jenny']

# List of lastnames 
last_names = ['Smith', 'Johnson', 'Williams', 'Jones', 'Brown', 'Davis']

# Generate a random full name
random_first_name = random.choice(first_names)
random_last_name = random.choice(last_names)
random_full_name = random_first_name + ' ' + random_last_name

print(random_full_name) # Jane Smith"
What is the output of the following Python code?,"The output of the code is [1, 2, 3, 4, 5], which is the sorted version of the list nums."
Write a Python function to check if a given number is an Armstrong number or not. An Armstrong number is a number whose sum of cubes of its digits is equal to the number itself.,"def is_armstrong(n):
 num_list = list(map(int, str(n)))
 _sum = 0
 for num in num_list:
 _sum += num ** 3
 return n == _sum"
Create a Python program that computes the square root of a number without using the math library.,"def sqrt(x):
    guess = x
    i = 0
    while guess * guess != x and i < 20:
        guess = (guess + x / guess) / 2.0
        i += 1
    return guess

print(sqrt(25))"
Construct a Python program to classify the data given.,"def classify_data(data_points):
    classified_data = []
    for point in data_points:
        if point % 2 == 0:
            classified_data.append('green')
        else:
            classified_data.append('red')
    return classified_data"
Create a function in a Python script to produce the sum of an arbitrary number of integers.,"def sum_of_ints(*args):
 return sum(args)

# Example Usage:
sum_of_ints(1,2,3,4,5,6) # 21"
"Create a Python function that takes in two parameters (n,k) and returns the value of n^k.","def power(n,k):
    result = 1
    for i in range(0,k):
        result *= n
    return result"
Generate a Python Program that sorts a list of numbers in non-increasing order,"def descending_sort(list): 
    list.sort(reverse=True) 
    return list

list = [3, 8, 1, 5]
result = descending_sort(list)
print(result)"
Create a Python script that takes a list of email addresses as input and prints a filtered list of email addresses that belong to a particular domain.,"filtered_list = [email for email in list if email.endswith(""@gmail.com"")]

print(filtered_list)
# Output: [""john@gmail.com"", ""sophie@gmail.com""]"
Create a Python program to reverse a dictionary. The program should take a dictionary as input and return a new dictionary with the keys and values swapped.,"def reverse_dictionary(dictionary): 
 result = dict() 
  
 for key, value in dictionary.items(): 
  result[value] = key 
  
 return result 

dictionary = { 'a': 1, 'b':  2, 'c': 3 }
res = reverse_dictionary(dictionary) 
print(res) # Output: {1: 'a', 2: 'b', 3: 'c'}"
Create an interface using Python and Tkinter to read data from an external source and show it in a canvas.,"import tkinter as tk
from tkinter import Canvas
import requests

# Window
window = tk.Tk()
window.title('Data Display')
window.geometry('800x600')

# Canvas and Frame
canvas = Canvas(window, bg='white')
canvas.pack()

# Retrieve data
response = requests.get('http://example.com/data.json')
data = response.json()

# Render data onto canvas
# ...

window.mainloop()"
Create a Python program that prints the most frequent item in a given list.,"from collections import Counter

def most_frequent(items):
    c = Counter(items)
    return c.most_common(1)[0][0]

items = [6, 5, 8, 3, 6, 5, 8, 6]
result = most_frequent(items)
print(result)"
"Create a Python program for classifying an array of numbers into one of three classes (low, medium, or high).","def classify(arr):
 output = []
 for n in arr:
 if n < 0:
 output.append('low')
 elif n < 5:
 output.append('medium')
 else:
 output.append('high')
 return output

# Example Usage
example_array = [-5, 0, 2, 10, 15]
result = classify(example_array)
print(result) # ['low', 'medium', 'medium', 'high', 'high']"
Design an algorithm in Python for reversing a string.,"def reverse_string(exampleString): 
    return exampleString[::-1] 

print(reverse_string(exampleString))"
Create a function in Python to sum up all odd digits in a given number.,"def sum_odd_digits(num):
    sum = 0
    for x in str(num):
        if int(x) % 2 != 0:
            sum += int(x)
 
    return sum

print(sum_odd_digits(2243))"
Create a function in Python to sort the elements of a list in ascending order.,"def sort_asc(lst):
    lst.sort()
    return lst"
Generate a solution to the Tower of Hanoi problem by writing a Python program.,"def hanoi(n, source, auxiliary, target):
    if n > 0:
        hanoi(n - 1, source, target, auxiliary)
        target.append(source.pop())
        hanoi(n - 1, auxiliary, source, target)"
Generate an algorithm in Python to swap two numbers without using a third variable,"def swap_two_numbers(a, b):
    a = a + b 
    b = a - b
    a = a - b
    return a, b

a = 6
b = 10
print(""The value of a is %d and b is %d"" %(a, b))
a,b = swap_two_numbers(a,b)
print(""The value of a is %d and b is %d"" %(a, b))"
Generate a graphical representation of a function using Python.,"import matplotlib.pyplot as plt

x = range(-10, 11)
y = [2 * x_coord + 3 for x_coord in x]
plt.plot(x, y)
plt.title('Graph of the function: f(x) = 2x + 3')
plt.xlabel('x')
plt.ylabel('2x + 3')

plt.show()"
Write a python function to find the sum of common divisors of two given numbers.,"def sum(a,b): 
    sum = 0
    for i in range (1,min(a,b)): 
        if (a % i == 0 and b % i == 0): 
            sum += i 
    return sum"
Suggest an efficient algorithm for sorting an array of integers in Python.,"def sort_array(array):
    for i in range(len(array)):
        lowest = i
        for j in range(i + 1, len(array)):
            if array[lowest] > array[j]:
                lowest = j
        array[i], array[lowest] = array[lowest], array[i]
    return array

result = sort_array([1, 5, 3, 8, 4, 2])
print(result)"
Create a look-up table implementation using a Python dictionary.,"lookup_table = {""key1"":""value1"", ""key2"":""value2"", ""key3"":""value3""}"
Create an algorithm in Python to determine if the given array contains two elements with the given sum.,"def twoSum(arr, sum):
    for i in range(len(arr) - 1):
        for j in range(i+1, len(arr)):
            if arr[i] + arr[j] == sum:
                return True

    return False

print(twoSum(arr, sum))
# Output: True"
"Handle the following errors in a python program - Type Error, Key Error and Value Error.","try:
    # Code that might raise an error
except TypeError:
    # Code to handle type errors
except KeyError:
    # Code to handle key errors
except ValueError:
    # Code to handle value errors"
Create a web scraper in Python that searches a given website for a specified HTML element.,"import requests
from bs4 import BeautifulSoup

url = 'https://www.example.com'
response = requests.get(url)
html = response.content

soup = BeautifulSoup(html, 'html.parser')
for div in soup.find_all('div'):
 print(div.text)"
Create a Python function to find the area of a circle with the given radius.,"def area_circle (radius):
    return 3.14159 * (radius ** 2)

# Test
print(area_circle(3.5)) # prints 38.48685"
Construct a loop in Python to remove all even numbers from a list.,"nums = [1, 2, 3, 4, 5, 6, 7, 8]
odd_nums = [num for num in nums if num % 2 != 0]
print(odd_nums)"
Write a python function to count minimum number of swaps required to convert one binary string to another.,"def min_Swaps(str1,str2) : 
    count = 0
    for i in range(len(str1)) :  
        if str1[i] != str2[i] : 
            count += 1
    if count % 2 == 0 : 
        return (count // 2) 
    else : 
        return (""Not Possible"") "
Create a python program that can lowercase an input string,"def lowerCase_string(string):
    return string.lower()"
Construct a Python algorithm to find the largest palindrome from the given array.,"def largest_palindrome(arr):
    max_palindrome = 0
    for item in arr:
        temp = str(item)
        if temp == temp[::-1] and max_palindrome < item:
            max_palindrome = item
    return max_palindrome

print(largest_palindrome([12, 521, 1212, 84561, 91332]))"
Write a Python program to return the difference between the largest and smallest elements in a given list of integers.,"def diff(nums):
    return max(nums) - min(nums)

print(diff([10, 4, 2, 5, 7])) # 8"
"Generate an appropriate script in Python for converting minutes to hours, rounding off the result to the nearest integer.","def minutes_to_hours(minutes):
    hours = minutes//60
    return int(round(hours))"
Write a code snippet in Python to print the date after 30 days from the current date.,"from datetime import date, timedelta
 
d = date.today() 
print(d + timedelta(days = 30))"
Write a function to perform an HTTP request using Python.,"import requests

def http_request(url):
    response = requests.get(url)
    if response.status_code == 200:
        return response.text
    else:
        return None

http_result = http_request('https://www.example.com/')"
Convert the given code from Python to C++.,"string capitalize_word(string word){
    return string(1, toupper(word[0])) + word.substr(1);
}"
Suggest a completion for the following python function in order to generate a random number between 0 and 1.,"import random

def generate_random():
    return random.random()"
Produce a python code to satisfy the following requirements:,"def merge_dictionaries(d1, d2):
    d3 = {}
    
    for key in d1:
        d3[key] = d1[key]
    for key in d2:
        d3[key] = d2[key]
        
    return d3"
Write a script in python to print the first 10 Fibonacci numbers.,"# Initialise the first two numbers of the sequence
prev, nxt = 0, 1

# Iteratively compute and print out the Fibonacci numbers 
for i in range(10):
    #Print the current number in the sequence
    print(prev) 
    #Compute the next number in the sequence
    prev, nxt = nxt, prev + nxt"
Create a Python function to remove duplicates from the given list.,"def remove_duplicates(list):
  new_list = []
  for item in list:
    if item not in new_list:
      new_list.append(item)
  return new_list"
Write a Python program to partition a list into sublists of given size.,"def partition_list(list_a, size):
 return [list_a[i * size:(i + 1) * size] for i in range((len(list_a) + size - 1) // size )] 
 
partition_list(list_a, size)"
Edit the following Python code to improve its readability.,"def calculate_trade():
 coal = 50
 barley = 50
 while coal > 0 and barley > 0:
  coal -= 1
  barley -= 2
 return coal + barley"
Develop a Python algorithm to validate a given palindrome string.,"def isPalindrome(s):
    i = 0
    j = len(s) - 1
    while i < j:
        if s[i] != s[j]:
            return False
        i += 1
        j -= 1
    return True
  
# Driver code 
s = ""level""
  
if isPalindrome(s):
    print(""Yes"")
else:
    print(""No"")"
Find the top 3 values in the given Python dictionary.,"top_values = []
for key, value in dict.items():
    if len(top_values)<3:
        top_values.append(value)
    else:
        min_value = min(top_values)
        if value > min_value:
            top_values.remove(min_value)
            top_values.append(value)

print(top_values)"
Generate a function in Python which takes a string and returns a dictionary with count of each character.,"def char_count(string):
    char_dict = {}
    for char in string:
        if char in char_dict:
            char_dict[char] += 1
        else:
            char_dict[char] = 1
    return char_dict"
Write a function to convert a tuple of string values to a tuple of integer values.,"def tuple_int_str(tuple_str):
    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)
    return result"
Code a Factorial function in Python.,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)

print(factorial(5))"
Create a search engine using Python.,"def search(query):
    results = []
    for document in documents:
        if query in document:
            results.append(document)
    return results"
Design an algorithm in Python that sorts a list in descending order.,"def sort_list(List):
 for i in range(len(List)-1, 0, -1):
  for j in range(i):
   if List[j] < List[j+1]:
    List[j], List[j+1] = List[j+1], List[j]
 
 return List
 

List = [3, 4, 1, 2]

sorted_list = sort_list(List)

print(sorted_list) # [4, 3, 2, 1]"
Write a function to get the angle of a complex number.,"import cmath
def angle_complex(a,b):
  cn=complex(a,b)
  angle=cmath.phase(a+b)
  return angle"
Create an AI assistant in Python to detect whether a sentence is a question or not.,"import nltk

sentence = ""Is this a question?""
words = nltk.word_tokenize(sentence)

# Check if the sentence ends with a question mark
if words[-1] == '?':
 print(""This is a question."")
else:
 print(""This is not a question."")"
Generate a Python program to compare two strings and return the largest string.,"def largest_string(str1, str2): 
    if len(str1) >= len(str2): 
        return str1 
    else: 
        return str2"
Write a Python program to define and execute a callback method.,"def callback(a, b): 
    # perform calculation 
    return c 
  
# define a function to use for the callback 
def my_function(x): 
    return x*x 

result = callback(5, my_function) 
print(result)"
"Given the instruction and the sample data below, generate the corresponding Python program.","sentence = ""Hello World!""
words = sentence.split()

for word in words:
  print(f""{word} has {len(word)} characters."")"
"Write a Python program to create all possible strings by using 'a', 'e', 'i', 'o', 'u'. The length of the string should be at least two characters.","import itertools

vowels = ['a', 'e', 'i', 'o', 'u']

for s in itertools.combinations_with_replacement(vowels, 2):
        print(''.join(s))"
Create a Python program for sorting a list of words into alphabetical order.,"def sort_words(words):
  return sorted(words)

words = [""dog"", ""cat"", ""apple"", ""banana""]

sorted_words = sort_words(words)

print(sorted_words)"
Compose a function in Python to check if a given number is a power of two.,"def is_power_two(num):
    if num == 0:
        return False
    
    while num != 1:
        if num % 2 != 0:
            return False
        num = num // 2
    return True"
"Create a web scraper in Python that retrieves the titles of all posts of a given web page, and prints them on the screen.","import requests
from bs4 import BeautifulSoup

url = ""https://example.com/blog""

r = requests.get(url)
html = r.text

soup = BeautifulSoup(html, 'html.parser')
titles = soup.find_all('h2')

for title in titles:
 print(title.text)"
Write a Python function that takes three numbers as argument and prints the largest one.,"def largest_number(a, b, c):
    max = a
    if b > max:
        max = b
    if c > max:
        max = c
    print(max) 

largest_number(3, 5, 9)"
Expand this function to compute the sum of a list in Python.,"def computeSum(L):
    """"""Computes the sum of a list

    Parameters
    ----------
    L : list
        A list of numbers

    Returns
    -------
    total : int
        The sum of all the numbers in the list
    """"""
    total = 0
    for x in L:
        total += x
    return total"
Write a Python program to remove all the duplicates from a given list of numbers.,"def remove_duplicates(numbers):
    return list(set(numbers))"
"Create a script in Python to generate a random password of length 10 characters, consisting of numbers, upper-case letters, and symbols.","import string
import random

def generate_password():
 characters = string.ascii_letters + string.digits + string.punctuation
 password = ''
 for _ in range(10):
 password += random.choice(characters)
 return password

print(generate_password())"
Create an algorithm in Python to show all the prime numbers from 0 to 1000.,"def is_prime(num): 
    if num <= 1:
        return False 
    for i in range(2,num): 
        if num % i == 0:
            return False 
    return True

for num in range(0,1001):
    if is_prime(num): 
        print(num)"
"Create a function in Python that takes in an array of integers, and returns a new array with all the elements in the original array multiplied by two.","def double_array(array):
    return [element*2 for element in array]

double_array([1, 2, 3, 4]) # [2, 4, 6, 8]"
"Suggest a method to optimize the following code segment in Python:

    x = 10
    y = 20",The code segment does not need to be optimized as it does not contain any code that can be improved. It simply sets two variables to a given value.
Generate a correct python program to calculate the mean of a list,"def mean(numbers):
    total = 0
    for num in numbers:
        total += num
    return total / len(numbers)"
"Write a python program to make an API call, return the response status code, and store return json data in a dictionary.","import requests

url = 'https://api.example.com/users'
response = requests.get(url)
response_status_code = response.status_code
data = response.json()
data_dict = dict(data)

print(response_status_code)
print(data_dict)"
Create a class in Python that can be used to model and store data about a person.,"class Person:
 def __init__(self, name, age, gender, height, weight):
  self.name = name
  self.age = age
  self.gender = gender
  self.height = height
  self.weight = weight

def get_name(self):
  return self.name

def get_age(self):
  return self.age

def get_gender(self):
  return self.gender

def get_height(self):
  return self.height

def get_weight(self):
  return self.weight"
Write a python function to find number of solutions in quadratic equation.,"def Check_Solution(a,b,c) : 
    if ((b*b) - (4*a*c)) > 0 : 
        return (""2 solutions"") 
    elif ((b*b) - (4*a*c)) == 0 : 
        return (""1 solution"") 
    else : 
        return (""No solutions"") "
Create a program in Python that will fill a list with 5 random integers between -15 and 15.,"import random

def createRandomList():
    result = []
    for i in range(5):
        result.append(random.randint(-15, 15))

    return result

print(createRandomList())"
Write a python function to check whether an array is subarray of another or not.,"def is_Sub_Array(A,B,n,m): 
    i = 0; j = 0; 
    while (i < n and j < m):  
        if (A[i] == B[j]): 
            i += 1; 
            j += 1; 
            if (j == m): 
                return True;  
        else: 
            i = i - j + 1; 
            j = 0;       
    return False; "
Write a Python program to check if an array contains a particular value.,"def check_value(arr, val):
	for i in arr:
		if i == val:
			return True 
	return False 

arr = [2, 3, 7, 8]
val = 7

if(check_value(arr, val)):
	print(""Array contains number "" + str(val))
else:
	print(""Array does not contain number "" + str(val))"
Write a function to find the product of it’s kth index in the given tuples.,"def get_product(val) : 
	res = 1
	for ele in val: 
		res *= ele 
	return res 
def find_k_product(test_list, K):
  res = get_product([sub[K] for sub in test_list])
  return (res) "
Create a Python program to find the largest number in a given list.,"def largestNumber(list): 
    max_num = 0
    for i in list:  
        if i > max_num: 
            max_num = i 
    return max_num 
  

list = [3, 6, 4, 8, 1]
largestNumber = largestNumber(list) 
print(""Largest element in the list is: "", largestNumber);"
Create a Python dictionary with the given list of keys and values.,"dict = {
 'chair': 4,
 'table': 2,
 'sofa': 5
}"
Write a class in Python that can find the median of an unsorted list of numbers.,"class MedianFinder:
 def __init__(self):
     self._data = []
 
 def add(self, num):
     self._data.append(num)
 
 def find_median(self):
     data = sorted(self._data)
     n = len(data)
     return (data[(n-1)//2] + data[n//2])/2"
Create a new class in Python to represent a point in the Euclidean plane.,"class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y"
Write a Python function that will calculate the average temperature for the past week.,"def calc_avg_temperature(temperatures):
  total = 0
  for temp in temperatures:
    total += temp
  avg = total / len(temperatures)
  return avg

print(calc_avg_temperature([64.7, 67.3, 71.3, 73.1, 75.7, 73.2, 75.7]))

# Output: 71.17142857142857"
Create a function in Python to count the number of vowels in a sentence.,"def countVowels(sentence):
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    vowel_count = 0
    
    for char in sentence.lower():
        if char in vowels:
            vowel_count += 1
    
    return vowel_count

sentence = ""This is a sample sentence""
vowel_count = countVowels(sentence)
print(f""Number of vowels in the sentence = {vowel_count}"")"
Develop a Python program to find the nth number in the Fibonacci sequence.,"def fibonacci(n):
    a = 0
    b = 1
    if n == 0:
        return a
    elif n == 1:
        return b
    else:
        for i in range(2, n+1):
            c = a + b
            a = b
            b = c
        return b

n = 15

print(""The {0}th number in the Fibonacci sequence is {1}"".format(n, fibonacci(n)))"
Optimize the performance of a Python function to calculate the sum of an array of numbers.,"def optimize_sum(arr):
    result = 0
    for num in arr:
        result += num
    return result

# Using numpy:
import numpy as np

def optimize_sum_np(arr):
    return np.sum(arr)

# Using reduce function:
from functools import reduce

def optimize_sum_reduce(arr):
    return reduce((lambda x, y: x + y), arr)"
Write a python code allowing the user to convert strings to ints and ints to strings.,"def str_to_int(string):
    return int(string)
  
def int_to_str(integer):
    return str(integer)"
Write a function that matches a string that has an a followed by two to three 'b'.,"import re
def text_match_two_three(text):
        patterns = 'ab{2,3}'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')"
Generate a python script which calculates the average of ten numbers stored in a list.,"my_list = [4, 6, 8, 10, 11, 12, 22, 34, 36, 37] 
  
# calculate sum of the list numbers 
sum_numbers = sum(my_list) 
  
# length of the list 
length = len(my_list) 
  
# average of the list 
average = sum_numbers/length 
  
# print the result 
print(average)"
Write a function to remove the matching tuples from the given two tuples.,"def remove_matching_tuple(test_list1, test_list2):
  res = [sub for sub in test_list1 if sub not in test_list2]
  return (res) "
Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.,"def remove_replica(test_tup):
  temp = set()
  res = tuple(ele if ele not in temp and not temp.add(ele) 
				else 'MSP' for ele in test_tup)
  return (res)"
"Create a function in Python to compute the sum of two numbers, x and y.","def sum(x, y):
 return x + y

# testing
print(sum(2, 3)) # Output: 5"
Write a Python program to edit a given string replacing every character after 2nd occurrence with '*'.,"def edit_str(string):
 return string[:2] + '*' * (len(string)-2)"
Write a Python program to append multiple lists into one list.,"list1 = [2, 3, 4]
list2 = [5, 6, 7]
list3 = [8, 9, 10]

list = list1 + list2 + list3
print(list) 
# Output: [2, 3, 4, 5, 6, 7, 8, 9, 10]"
Create a Python script to generate random numbers in the given range,"def generate_random_numbers(start, end):
    import random 
    return random.randint(start, end)"
Create a python function that returns the year from a given date,"def get_year(date):
    return date.split('/')[2]

year = get_year('02/03/2019')
print(year)"
Convert a Python program that uses multiple functions to a single function using only a single recursive call.,"def main(x):
 if x == 1:
  print(2)
 else:
  main(x + 1)
 
main(1)"
"Design a class in Python for a circle, where one field is the radius of the circle.","class Circle:
    def __init__(self, radius):
        self.radius = radius

    def get_area(self):
        return 3.14 * self.radius ** 2"
Write a code in Python to remove all entries from a dictionary which have even numbers as values.,"my_dict = {1:1, 3:3, 5:5 }

new_dict = {}

for key, value in my_dict.items():
    if value % 2 != 0:
        new_dict[key] = value

my_dict = new_dict"
Design a Python class that models a simple arithmetic calculator.,"class Calculator:
    def __init__(self):
        pass
    
    def add(self, a, b):
        return a + b
    
    def subtract(self, a, b):
        return a - b
    
    def multiply(self, a, b):
        return a * b
    
    def divide(self, a, b):
        if b == 0:
            raise ValueError(""Cannot divide by zero."")
        else:
            return a/b"
Implement an algorithm in Python to produce all valid combinations of some given elements.,"def combinations(input_list):
    out_list = []
    # get all the possible combination from the input
    for i in range(1 << len(input_list)):
        out_list.append([input_list[bit] for bit in range(len(input_list)) if is_bit_set(i, bit)])
    return out_list

def is_bit_set(num, bit):
    return num & (1 << bit) > 0"
Write a Python program to sort a list of tuples based on the second element of each tuple.,"def sort_list(lst): 
	lst.sort(key = lambda x: x[1]) 
	return lst 

# Driver code 
lst = [(3, 4), (2, 5), (1, 6)] 
print(sort_list(lst)) 

# Output: [(3, 4), (2, 5), (1, 6)]"
Devise a function in Python that will find the number of characters in a string.,"def find_length(string):
  return len(string)

print(find_length(""Hello World!"")) # Output: 12"
Write a code snippet in Python to print Pascal’s triangle for a given value of n.,"def printPascalTriangle(n) : 
    for line in range(1, n + 1) : 
        C = 1 
        for i in range(1, line + 1) : 
            print(C, end = """") 
            C = int(C * (line - i) / i); 
        print("""") 

n = 4
printPascalTriangle(n)"
You are given a JSON object. Parse it into a Python object.,"import json

# sample json
json_object = {
    ""name"": ""John Doe"",
    ""age"": 25,
    ""hobbies"": [""sports"", ""gaming"", ""reading""]
}

# parse to Python object
python_object = json.loads(json.dumps(json_object))

print(python_object)"
Generate a Python program to calculate the number of days between two given dates.,"from datetime import date

start_date = date(2020, 6, 5)
end_date = date(2020, 6, 17)
delta = end_date - start_date
print(delta.days)"
Create an interactive program in Python that allows users to enter two numbers and then prints out the sum of the two numbers.,"# define a function to take in two numbers
def adder(num1, num2):
    return num1 + num2

# prompt the user to enter the two numbers
num1 = float(input(""Enter number 1: ""))
num2 = float(input(""Enter number 2: ""))

# print the sum of the two numbers
print(""The sum of the two numbers is:"", adder(num1, num2))"
"Given a sentence, write a Python program to count the number of words and average length of words.","def word_count_average_len(sentence):
    words = sentence.split()
    sum_length = 0
    for word in words:
        sum_length += len(word)
    return len(words), sum_length/len(words)"
Converting the following algorithm into executable Python code,"def farthest_from_begining_index(arr):
    index = -1
    max_index = 0
    for i in range(len(arr)):
        if arr[i] == 0:
            index = i
            if index > max_index:
                max_index = index
    return max_index"
Create a Python program to detect duplicate words in a given string.,"def findDuplicates(text):
 words = text.split(' ')
 duplicate_words_list = []
 
 for i in range(len(words)):
  for j in range(i+1, len(words)):
   if words[i] == words[j]:
    duplicate_words_list.append(words[i]) 
 
 return duplicate_words_list

print(findDuplicates('Hello my name is John I live in Virginia')) 
# Output: ['my', 'is', 'in']"
Write a Python program that takes two lists as input and merges the values from both these lists into the third list.,"list3 = []

list3.extend(list1)
list3.extend(list2)
  
print(list3)"
"Using the given dictionary, write a program in Python to find the most frequent word.","def most_frequent(sample_dict):
    key = max(sample_dict, key=sample_dict.get) 
    return key 
    
print(most_frequent(sample_dict)) # Outputs: ""quantum"""
Create a basic Python script that computes the sum of two variables and stores the result in a third variable.,"# compute the sum of x and y
result = x + y

# store the result in a third variable
z = result

#print the result
print(z) # Output: 13"
Create a python script to create an NxN matrix with the values in the range 0 to NxN-1,"def generate_matrix(N):
    matrix = [] 
    for i in range(N): 
        row = [] 
        for j in range(N): 
            row.append(i * N + j) 
        matrix.append(row) 
    return matrix"
Write a Python function to calculate the total cost of an item given its base price and additional cost.,"def calculate_total_cost(base_price, additional_cost):
 return base_price + additional_cost"
Create a Python program that acquires data from a database and generates a histogram of the values.,"import matplotlib.pyplot as plt 
import pandas as pd 

data = pd.read_sql_query(""SELECT column_name FROM table_name"", db) 
data.hist(bins=10, figsize=(10, 6)) 

plt.tight_layout() 
plt.show()"
Create a Python program that takes a string as input and outputs the string with all characters replaced with their corresponding ASCII values.,"def ascii_repr_str(str):
    ans = ''
    for ch in str:
        ans += str(ord(ch))
    return ans

print(ascii_repr_str(""Python"")) # result: 080 121 116 104 111 110"
Generate a Python program to calculate the area of a provided room.,"length_meters = 5
width_meters = 8
height_meters = 3

# Calculate area of room
room_area_meters_squared = length_meters * width_meters * height_meters

# Print the area
print(f""The area of the room is {room_area_meters_squared} meters squared."")"
"Create a Python program to convert a list of numbers to a comma separated string. The program should take a list of integers as input and return a string with the elements of the list separated by a comma (',').","def list_to_string(list):
 return ','.join(str(x) for x in list)

list_of_integers = [1, 2, 3, 4]
print(list_to_string(list_of_integers)) // Outputs: 1,2,3,4"
Take a Python program written in procedural style and convert it to functional style.,"def sort_list(arr):
  sorted_arr = sorted(arr)
  return sorted_arr"
Write a Python program to find a substring in a string. The program should return the index of the beginning of the substring or -1 if the substring is not found.,"def findSubstring(string, substring):
 index = string.find(substring)
 if index != -1:
  return index
 else:
  return -1

string = ""Hello World""
substring = ""World""
print(findSubstring(string, substring)) # returns 6"
Develop a web-scraper using Python that can extract text from websites.,"import requests
from bs4 import BeautifulSoup

url = ""https://example.com""
page = requests.get(url)
soup = BeautifulSoup(page.content, 'html.parser')

text = soup.get_text()
print(text)"
Convert the following code from C to Python.,"def sum(arr, n):
    s = 0
    for i in range(n):
        s += arr[i]
    return s"
Create a function in Python that will take a list as an argument and return the average of the first 3 elements in the list.,"def getAverageOfFirstThree(data):
    sum = 0
    for i in range(3):
        sum += data[i]
    
    return sum / 3"
Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.,"import heapq
def nth_super_ugly_number(n, primes):
    uglies = [1]
    def gen(prime):
        for ugly in uglies:
            yield ugly * prime
    merged = heapq.merge(*map(gen, primes))
    while len(uglies) < n:
        ugly = next(merged)
        if ugly != uglies[-1]:
            uglies.append(ugly)
    return uglies[-1]"
Write a Python function to compare two given lists and return a list containing only the common elements.,"def common_elements(lst1, lst2):
  return [element for element in lst1 if element in lst2]

list1 = [1, 2, 3, 4]
list2 = [2, 4, 6]
common_elements = common_elements(list1, list2)

print(""Common elements:"", common_elements)"
Write a function to convert the given set into ordered tuples.,"def set_to_tuple(s):
  t = tuple(sorted(s))
  return (t)"
Write a Python program to remove the duplicates from a given list of numbers while preserving the order of elements.,"def remove_duplicates(lst):
    new_list = []
    for i in lst:
        if i not in new_list:
            new_list.append(i)
    return new_list

print(remove_duplicates([1, 2, 3, 2, 1]))"
Optimize a given Python code by reducing the running time to the minimum possible.,"n = 10

def func(n):
    # Use range to only loop through half of the values
    res = 0
    for i in range(n//2 + 1):
        for j in range(n):
            res = res + i + j
    # Double the result by multiplying with 2
    return res*2

func(n)"
Write a python function to find the cube sum of first n natural numbers.,"def sum_Of_Series(n): 
    sum = 0
    for i in range(1,n + 1): 
        sum += i * i*i       
    return sum"
Optimize a code snippet written in Python. The code snippet should create a list of numbers from 0 to 10 that are divisible by 2.,arr = [i for i in range(11) if i % 2 == 0]
Write a Python program to delete duplicate elements from a list.,"def removeDuplicates(inputList):
      tempList = [] 
      for elem in inputList: 
          if elem not in tempList: 
              tempList.append(elem)
      return tempList
    
outputList = removeDuplicates([2, 3, 4, 5, 4, 6, 7, 5, 8]) 
print(outputList)"
Provide a Python script that returns the number of words in a given sentence,"def word_count(sentence):
    words = sentence.split()
    return len(words)"
Write a Python program to randomly shuffle a given list of numbers.,"import random

def shuffle(numbers):
 random.shuffle(numbers)
 return numbers

shuffle(numbers)"
"Develop a Python routine that takes a string, separates words and prints the first word.","def print_first_word(sentence):
    words = sentence.split(' ')
    print(words[0])

sentence = ""Hello, World!""
print_first_word(sentence)"
Could you come up with a function in Python that removes all occurrences of the word 'impossible' from the given string?,"def remove_word(text):
    return text.replace('impossible', '')"
Create a python program to remove odd numbers from a list of numbers.,"def remove_odd_numbers(arr):
    result = [i for i in arr if i % 2 == 0]
    return result"
Write an algorithm in Python that checks whether a given number is a prime number or not.,"def isPrime(num):
  if num < 2:
    return False

  if num ==2:
    return True

  for i in range(2, num):
    if num % i == 0:
      return False

  return True"
Create a Python program to generate 4 random numbers from 0 - 9.,"import random

for i in range(4):
 num = random.randint(0,9)
 print(num)"
"Create a class in Python for representing a movie with fields for title, release year, and rating.","class Movie:
 def __init__(self, title, release_year, rating):
 self.title = title
 self.release_year = release_year
 self.rating = rating

# Test
movie = Movie(""The Godfather"", 1972, 9.2)
print(movie.title) # The Godfather"
Write a Python program to compute the sum of the values of a given dictionary,"def dict_sum(dict):
    sum = 0
    for key, value in dict.items():
        sum += value
    return sum"
Write a Python program to find all numbers in a list and replace them with their product.,"my_list = [1, 2, 3, 4, 5]
new_list = [x * y for x, y in zip(my_list, my_list[1:] + [1])]"
"Given a list of numbers, write a Python program to compute the average of all numbers.","def compute_average(numbers):
 sum = 0
 for number in numbers:
 sum += number
 return sum/len(numbers)

numbers = [10, 20, 45, 60]
result = compute_average(numbers)
print(result)

# Output:
31.25"
Generate a random number using the built-in function of Python.,"import random

number = random.randint(1,100)
print(number)"
Create a program in Python for counting the occurrence of a character in a string.,"String = ""Hello! What is your name?""
def characterCounter(string, character):
    count = 0
    for ch in string:
        if ch == character:
            count += 1
    return count

print(characterCounter(String, 'o')) # 2"
Generate a Python program to return the sum of abs(x1 - x2) for each pair in an array.,"def sum_diff_pair(arr):
    total = 0
    for i in range(len(arr)-1):
        for j in range(i+1, len(arr)):
            total += abs(arr[i]-arr[j])
    return total"
Write a function to find the fixed point in the given array.,"def find_fixed_point(arr, n): 
	for i in range(n): 
		if arr[i] is i: 
			return i 
	return -1"
Create a Python program which takes in two numbers and prints out the first number divided by the second number.,"def divide(a,b):
    return a/b

result = divide(3,5)
print(result)"
Optimize the following Python code by changing its structure and by incorporating efficient algorithms.,"def factor_of_three(n):
  return len([i for i in range(1, n+1) if i % 3 == 0])
  
factor_of_three(50)"
Develop a Python code to parse an XML string.,"import xml.etree.ElementTree as ET

def parse_xml(xml_string):

    root  = ET.fromstring(xml_string)
    for node in root:
        print(f'Node: {node.tag}: {node.text}')

if __name__ == '__main__':
    xml_string = ""<node><child>text</child></node>""
    parse_xml(xml_string) # prints Node: child: text"
Create a function in Python that will determine whether a given number is composite or prime.,"def isPrime(x): 
	if x > 1: 
		for i in range(2,x): 
			if (x % i) == 0: 
				return False
		else: 
			return True
	else: 
		return False

num = 21
if(isPrime(num)) : 
	print(num, ""is a prime number"") 
else : 
	print(num, ""is a composite number"")"
Design a function in Python to remove all occurrences of a given number from a given list.,"def remove_num(lst, num):
  return [n for n in lst if n != num]

print(remove_num([1, 7, 3, 1, 4, 7, 9], 7))  # [1, 3, 1, 4, 9]"
Compose a Python algorithm that generates a list of 10 random numbers between 1 and 100.,"import random

random_numbers = []
for _ in range(10):
    random_numbers.append(random.randint(1,100))

print(random_numbers)"
Construct a python snippet to list out the keys present in a dictionary.,"for key in dictionary.keys():
    print(key)"
Write a function to sum a specific column of a list in a given list of lists.,"def sum_column(list1, C):
    result = sum(row[C] for row in list1)
    return result"
Compose a code in Python to check if a list contains any duplicate elements.,"def has_duplicates(arr):
    seen = set()
    for elem in arr:
        if elem in seen:
            return True
        else:
            seen.add(elem)
    return False

test_arr = [1, 2, 3, 4, 5]
result = has_duplicates(test_arr)
print(result)"
Write a python function to check whether an array contains only one distinct element or not.,"def unique_Element(arr,n):
    s = set(arr)
    if (len(s) == 1):
        return ('YES')
    else:
        return ('NO')"
Generate code to calculate factorial using a while loop in Python,"def factorial(n):
    fact = 1
    while(n>0):
        fact=fact*n
        n=n-1
    return fact"
Produce a Python program that takes a list of numbers as an input and prints the result of finding the sum of the list.,"def sum_list(arr):
    """"""Finds the sum of a given list of numbers.
    
    Args:
        arr (list): List of numbers.
        
    Returns:
        int: Sum of list elements.
    """"""
    sum = 0
    for num in arr:
        sum += num
    return sum"
Generate a Python script to create a list of numbers between a given range.,"def generate_list(start, end):
    result = []
    for num in range(start, end+1):
        result.append(num)
    return result

list = generate_list(5, 10)
print(list)  # Output: [5, 6, 7, 8, 9, 10]"
Write a function to find the specified number of largest products from two given lists.,"def large_product(nums1, nums2, N):
    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]
    return result"
Create a function in Python to convert a given list of strings to integers.,"def convert_string_to_ints(strings):
    return [int(string) for string in strings]"
Given a list of objects and a property of each object. Can you create a Python program to output the value of the property of the first and last object?,"nameFirst = 'Alice'
nameLast = 'Charlie'
ageFirst = 24
ageLast = 28"
Write a python function to toggle bits of the number except the first and the last bit.,"def set_middle_bits(n):  
    n |= n >> 1; 
    n |= n >> 2; 
    n |= n >> 4; 
    n |= n >> 8; 
    n |= n >> 16;  
    return (n >> 1) ^ 1
def toggle_middle_bits(n): 
    if (n == 1): 
        return 1
    return n ^ set_middle_bits(n) "
Rewrite the given SQL query to fetch the same results using Python.,"import sqlite3

conn = sqlite3.connect('database.db')
cursor = conn.cursor()

cursor.execute(""SELECT CustomerID, FirstName, LastName FROM Customers WHERE Country = 'Germany'"") 
rows = cursor.fetchall()

conn.close()

# Output rows
for row in rows:
    print(row[0], row[1], row[2])"
Create a python program that takes two numbers and calculates the exponent of the first number raised to the power of the second number.,"# This program takes two numbers and calculates the 
# exponent of the first number raised to the power of the second number

def calculateExponent(base, exponent):
    return base**exponent

base = 2
exponent = 3

result = calculateExponent(base, exponent)
print(""The result is:"", result) # The result is: 8"
"Create a password generator in Python that generates passwords with a combination of letters (both uppercase and lowercase), numbers, and symbols. The password should contain at least 6 characters.","import string
import random

def password_generator(size=6):
 chars = string.ascii_uppercase + string.ascii_lowercase + string.digits + '!@#$%^&*()'
 return ''.join(random.choice(chars) for x in range(size))
 
password = password_generator()
print(password)"
Create a python script to find the longest words in a dictionary.,"def longest_words(dict):
    longest_words = []
    max_length = 0
    for word, length in dict.items():
        if length > max_length:
            longest_words = [word]
            max_length = length
        elif length == max_length:
            longest_words.append(word)
    return longest_words"
Generate a function to find the sum of an element in a nested list in Python.,"def sum_of_element(arr):
    s = 0
    for sub_list in arr:
        for element in sub_list:
            s += element
    return s

arr = [[1, 2], [3, 4], [5, 6]]
total = sum_of_element(arr)
print(total)"
Develop an algorithm to find the largest palindrome in a given string using Python.,"def find_largest_palindrome(string):
    palindrome = ''
    for i in range(len(string)):
        for j in range(i + 1, len(string)):
            substring = string[i:j + 1]
            if substring == substring[::-1] and len(substring) > len(palindrome):
                palindrome = substring

    return palindrome"
"Using Python, create a function that returns the first 10 prime numbers.","def find_prime_numbers(num):
 prime_numbers = []
 for x in range(2, num):
 flag = True
 for y in prime_numbers:
 if x % y == 0:
 flag = False
 break
 if flag:
 prime_numbers.append(x)
 if len(prime_numbers) == 10
 break

return prime_numbers
 
# Usage
find_prime_numbers(100)
# Output
[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]"
Write a function in Python to encrypt a given message using AES256.,"import base64
from cryptography.fernet import Fernet
def encrypt_message(message):
key = Fernet.generate_key()
f = Fernet(key)
encoded_message = message.encode()
encrypted_message = f.encrypt(encoded_message)
return base64.encodestring(encrypted_message)"
Implement a gradient descent optimizer in Python.,"def gradient_descent_optimizer(X, y, theta, alpha, num_iterations):
    m = len(y)
    for i in range(num_iterations):
        h = np.dot(X,theta)
        loss = h-y
        grad = np.dot(X.T,loss)/m
        theta = theta - alpha*grad
    return theta"
Generate a Python program that returns the smallest even number in a given list,"def find_smallest_even(nums):
    smallest = None
    for num in nums:
        if (num % 2 == 0) and (smallest == None or num < smallest):
            smallest = num
    return smallest"
Generate a random password of 8 characters in Python,"import random
import string

length = 8

chars = string.ascii_letters + string.digits + string.punctuation
password = ''.join(random.choice(chars) for _ in range(length))

print(password)"
Write a Python program to calculate the total cost of an order from an online shop. The program should take a price of a product and the quantity of that product as inputs.,"total = ProductPrice * Quantity
print(f""Total cost of the order is {total}"")  # Total cost of the order is 60"
Create a Python dictionary where the keys are the cities and the values are corresponding population densities.,"cities_populations = {
 ""Lahore"": 3,883,
 ""Karachi"": 8,130,
 ""Islamabad"": 2,572
}"
Build an algorithm in Python to check if a string is a palindrome.,"def is_palindrome(str):
    # Get the length of the string
    n = len(str)

    for i in range(n//2):
        # Compare characters from both ends
        if str[i] != str[n-i-1]:
            return False
    return True

str = ""abccba""
print(is_palindrome(str))"
Create a Python program to generate the nth prime number.,"def nth_prime(n):
  prime_numbers = [2]
  num = 3
  while len(prime_numbers) < n:
    is_prime = True
    for i in range(2, int(num ** 0.5)+1):
      if num % i == 0:
        is_prime = False
        break
    if is_prime:
      prime_numbers.append(num)
    num += 1
  return prime_numbers[-1]

print(nth_prime(10))"
Design a Python program to work out the percentage of vowels present in a given string.,"def vowel_percentage(text):
    vowels = ""aeiouAEIOU""
    num_vowels = 0
    for letter in text:
        if letter in vowels:
            num_vowels += 1
    percentage = (num_vowels/len(text)) * 100
    return percentage

print(vowel_percentage(""Hello World!""))"
Create a Python function that takes in two strings and concatenates them with a space in between.,"def concatStringsWithSpace(str1, str2):
  return str1 + "" "" + str2

result = concatStringsWithSpace(""Programming"", ""is Fun"")
print(result)"
Write a Python program to calculate the average of three integers.,"def avg_three_nums(num1, num2, num3):
 return (num1 + num2 + num3) / 3"
Write a function to convert the given binary tuple to integer.,"def binary_to_integer(test_tup):
  res = int("""".join(str(ele) for ele in test_tup), 2)
  return (str(res)) "
Write a function that returns the maximum value between two numbers in Python.,"def get_max(a, b):
    if a > b:
        return a
    else:
        return b"
Write a Python program that takes a list of integers and returns the largest number,"def find_largest_number(numbers):
    largest_number = -float('inf')
    for number in numbers:
        if number > largest_number:
            largest_number = number
    return largest_number

my_list = [1, 5, 10, 15, 20]
largest_number = find_largest_number(my_list)
print(largest_number)"
Design a python program that stores data associated to each user as a dictionary.,"users = {} 

def addUser(name, details): 
    users[name] = details 

def getUser(name): 
    return users[name] 

# Add new user
addUser('John', {'age': 25, 'email': 'john@example.com'})

# Get user details
user_details = getUser('John')
print('Age: ', user_details['age'])
print('Email: ', user_details['email'])"
Generate a Python program to extract the emailIDs from a text string.,"import re

text = ""The list of contacts is john@test.com,jane@example.com,bob@test.com""

pattern = r'[\w\.-]+@[\w\.-]+'

match = re.findall(pattern, text)

print(match)"
Create a function in Python that takes two integers as arguments and print the sum of them.,"def add_numbers(a, b):
    """"""Returns the sum of two numbers""""""
    return a + b

if __name__ == '__main__':
    print(add_numbers(2, 3))"
Create a Python program to convert a list of words into its corresponding abbreviations.,"def word_abbreviations(words):
 abbreviations = []
 for word in words:
  abbreviations.append(word[0].upper() + str(len(word)-2) + word[-1].upper())
 return abbreviations

list_of_words = [""Hello"",""World"",""Amazing""]
print(word_abbreviations(list_of_words))

Output: ['H4o', 'W4d', 'A5g']"
Design an algorithm in Python to generate the Fibonacci series until n.,"def Fibonacci(n): 
 a = 0
 b = 1
 if n < 0: 
  print(""Incorrect input Given"") 
 elif n == 0: 
  return a 
 elif n == 1: 
  return b 
 else: 
  for i in range(2,n): 
   c = a + b 
   a = b 
   b = c 
 return b"
Implement a Python program to print the following structure using for loop.,"# Program to print pyramid pattern in Python

for i in range(0,5):
    for j in range(0,i+1):
        print(""*"",end="""")
    print(""\r"")

""""""
*
**
***
****
*****
"""""""
"In the following Python list, remove an item with the index of 3 and then add a new item to the list with a value of 99.","my_list = [1, 4, 5, 8]
my_list.append(99)"
Create a Python script to detect if a number is prime.,"def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, n):
        if n % i == 0:
            return False
    return True

if __name__ == ""__main__"":
    n = 10
    if is_prime(n):
        print(""{} is a prime number"".format(n))
    else:
        print(""{} is not a prime number"".format(n))"
Declare a Python class that demonstrates inheritance.,"class ParentClass:
    def __init__(self):
        self.message = 'Hello, Parent'

class ChildClass(ParentClass):
    def __init__(self):
        ParentClass.__init__(self)
        self.message = 'Hello, Child'

obj = ChildClass()
print(obj.message) //Prints 'Hello, Child'"
Generate a Python code snippet to search for a specific value in a 2D list and return its index.,"def search_2d(value, lst):
 for i, row in enumerate(lst):
  if value in row:
   return (i, row.index(value))

print(search_2d(""hello"", [[12, ""goodbye"", 21], [""hello"", 67, 55]]))
# Output: (1, 0)"
Develop a function in Python to find the maximum number in a binary search tree.,"class Node:
 def __init__(self, val):
 self.val = val
 self.left = None
 self.right = None

def findMaxValue(root):
 if root is None:
 return None
 
 if root.right is None:
 return root.val
 
 return findMaxValue(root.right)

# Usage example
root = Node(3)
root.left = Node(2)
root.right = Node(5)

maxValue = findMaxValue(root)
print('Max Value:', maxValue)"
Write a Python function to calculate the product of elements in a list.,"def product(arr):
    product = 1
    for num in arr:
        product *= num
    return product

product([1, 2, 3, 4])"
"Write a Python program to create functions for min, max, and mean of a given list.","def min_list(numbers):
  min_num = min(numbers)
  return min_num

def max_list(numbers):
  max_num = max(numbers)
  return max_num

def mean_list(numbers):
  mean_num = sum(numbers)/len(numbers)
  return mean_num

numbers = [1,2,3,4,5,6,7,8,9,10]

print(min_list(numbers))
print(max_list(numbers))
print(mean_list(numbers))

# Output
# 1
# 10
# 5.5"
Categorize the following code snippets into their respective languages:,Python
Develop a script in Python to print out all the combinations of a given list of numbers.,"import itertools

lst = [1,2,3,4]

# Get all possible combinations of the list
result = list(itertools.combinations(lst, 2))

# Print the combinations
for combination in result:
    print(combination)"
Design an algorithm in Python to estimate future house prices.,"import pandas as pd
from sklearn.linear_model import LinearRegression

# Read the data
data = pd.read_csv('housing.csv')
# Split into X and y
X = data.drop('price', axis=1)
y = data['price']
# Initialize the model
model = LinearRegression()
# Fit the model to the training data
model.fit(X, y)
# Estimate future prices using the model
predictions = model.predict(X)"
Write a Python script to transform a given list of integers into a single integer.,"def int_to_int(int_list):
    return int(''.join(str(e) for e in int_list))"
Create a Python program to find factorial for a given number.,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)

num = 5
print(""The factorial of"", num, ""is"", factorial(num))"
Develop a program which reverts a string without using reverse(),"def reverseString(str): 
  
    i = len(str) 
    rev_str = """" 
    while i > 0: 
        rev_str += str[i-1] 
        i = i-1
    return rev_str

str = ""Python""
print(""Original string: "" + str)
print(""Reversed string: "" + reverseString(str))"
Define a class in Python for a circle.,"class Circle:
    def __init__(self, radius):
        self.radius = radius 

    # Getter method 
    def getRadius(self): 
        return self.radius 
  
    # Setter method 
    def setRadius(self, radius): 
        self.radius = radius 
  
    # Area method 
    def getArea(self): 
        return 3.14 * (self.radius**2)"
Create a Python program to scrape data from a website. The program should accept the website's URL as input.,"import requests
from bs4 import BeautifulSoup

url = ""https://example.com""
response = requests.get(url)
soup = BeautifulSoup(response.text, 'html.parser')

# Scrape data from the website
# ...
# ..."
Add code to a Python program that will print a multiplication table of numbers from 1 to 5.,"for i in range(1,6):
    for j in range(1,6):
        print(i*j,end=""\t"")
    print(""\n"")

# Output:
1	2	3	4	5	
2	4	6	8	10	
3	6	9	12	15	
4	8	12	16	20	
5	10	15	20	25"
Create a Python script to interpolate missing data points from a Pandas dataframe.,"import pandas as pd
import numpy as np

df = pd.DataFrame({
 'x': [0,1,3,4,5],
 'y': [1,2,4,8,16]
})

# interpolate the missing data
new_x = np.linspace(0, 5, 6)
df = df.set_index('x').reindex(new_x).interpolate().reset_index()
print(df)"
Create a Python program to average the elements of a 2-dimensional array.,"def averageMatrix(matrix):
 sum = 0
 for row in matrix:
  for e in row:
   sum += e

 return sum / (len(matrix) * len(matrix[0]))

a = [[3,2,6],
     [8,5,9],
     [4,7,1]]

print(averageMatrix(a)) # 4.77"
Generate a Python function that splits a given string into its individual words.,"def split_words(string):
    words = string.strip().split("" "")
    return words"
Create a Python program that generates a histogram from a list of integers.,"import matplotlib.pyplot as plt 
  
def plot_histogram(data): 
    plt.hist(data) 
    plt.title(""Histogram"") 
    plt.xlabel(""Values"") 
    plt.ylabel(""Frequency"") 
    plt.show() 

if __name__ == ""__main__"": 
    data = [1, 2, 5, 7, 9, 4, 5, 9, 10, 12] 
    plot_histogram(data)"
Rewrite the following code to use Python's inbuilt sorting functions.,"def bubbleSort(arr): 
    arr.sort() 
    return arr"
Write a Python program to search for a given element in a list.,"def search_element(element, list_):
    for i in range(len(list_)):
        if element == list_[i]:
            return i
    return -1"
Write a Python program to find the index of an item in the given array.,"def search_index(arr, target):
  for i in range(len(arr)):
    if arr[i] == target:
      return i
  
  return -1

print(search_index([5, 7, 8, 6], 8)) # 2"
Write a function in Python to perform a selection sort on an unsorted array.,"def selection_sort(arr):
    for i in range(len(arr)): 
        min_idx = i 
        for j in range(i+1, len(arr)): 
            if arr[min_idx] > arr[j]: 
                min_idx = j
        arr[i], arr[min_idx] = arr[min_idx], arr[i]
    return arr
        
const result = selection_sort([4, 6, 1, 3, 8, 2]);
console.log(result);"
Construct an algorithm for factoring a large number in Python.,"def get_factor(n):
    factors = []
   
    for i in range(2, n + 1):
        if n % i == 0:
            factors.append(i)
            n //= i
    return factors

number = 600851475143
print(get_factor(number))"
Write a function to rotate a given list by specified number of items to the left direction.,"def rotate_left(list1,m,n):
  result =  list1[m:]+list1[:n]
  return result"
Create a Python class that defines a circle with a radius.,"class Circle:
    def __init__(self, radius):
        self.radius = radius
        
    def get_area(self):
        return 3.14 * (self.radius ** 2)
        
    def get_circumference(self):
        return 2 * 3.14 * self.radius"
Create a script in Python to download the content of a webpage with a given URL.,"import requests
 
url = ""https://github.com""
 
response = requests.get(url)
 
with open('webpage.txt', 'w') as file:
    file.write(response.text)"
Write a Python script for sorting an array of numbers.,"arr = [4, 2, 3, 5, 1]
arr.sort()
print(arr)"
"Write a Python program to compute the sum of two given integers, a and b.","def sum_ints(a, b):
    return a + b"
Create an optimized data structure in Python to store information about a person's profile.,"class Profile(object):
 def __init__(self, name, age, location, hobbies):
 self.name = name
 self.age = age
 self.location = location
 self.hobbies = hobbies

profile = Profile(""Kiran"", 25, ""Australia"", [""Travelling"", ""Swimming""])"
Design an algorithm in Python to find the highest one digit number in a given list.,"def get_highest_one_digit(list_nums):
    highest_num = 0
    for num in list_nums:
        if num <= 9 and num > highest_num:
            highest_num = num
    return highest_num"
Rewrite the code from this Python2 code to be compatible with Python3 code.,"#This code prints the numbers from 0 to 5.
for i in range(6):
    print(i)"
Develop a Python script to convert a list of words into a dictionary with its frequency count as the key and the words as the value.,"words = [""hello"",""world"",""hello"",""python"",""hello""] 

# counting frequency of each word in a list 
wordFrequencyDict = {}
for word in words: 
    if (word in wordFrequencyDict): 
        wordFrequencyDict[word] += 1
    else: 
        wordFrequencyDict[word] = 1

print(wordFrequencyDict)"
Create a program in Python to generate random numbers.,"import random

def generate_random_numbers(n):
    numbers = []
    for _ in range(n):
        numbers.append(random.randint(0, 100))
    return numbers

# Generate 10 random numbers
numbers = generate_random_numbers(10)
print(numbers)"
Create a bubble sort algorithm in Python.,"def bubble_sort(nums):
    # Repeat until the array is sorted
    sorted_array = False
    while not sorted_array:
        sorted_array = True
        for i in range(len(nums) - 1):
            if nums[i] > nums[i + 1]:
                # If the next element is greater, swap them
                nums[i], nums[i + 1] = nums[i + 1], nums[i]
                sorted_array = False
    # Return the sorted array
    return nums"
Construct a for loop in Python to iterate over a given list and print the elements.,"for i in my_list:
    print(i)"
Create a Python function to generated permutations of a given list of numbers.,"def permutations(arr):
    if len(arr) == 0:
        return []

    if len(arr) == 1:
        return [arr]

    l = []
    for i in range(len(arr)):
        m = arr[i]
        remL = arr[:i] + arr[i+1:]
        for p in permutations(remL):
            l.append([m] + p)
    return l

permutations([1, 2, 3])"
Create a Python script to clean the given text and make it ready for processing.,"text_cleaned = ""This is the text for processing!
Some punctuation must be removed.
Lets Trim the whitespace too.
Please preserve the cases as is."""
Write a Python program that takes in two lists and returns a merged list with unique elements.,"list1 = [1, 2, 3]
list2 = [2, 3, 4]

merged_list = list(set(list1 + list2))
print(merged_list) #Output: [1, 2, 3, 4]"
Create a function in Python to check if a list contains duplicates.,"def contains_duplicates(list):
    seen = set()
    for item in list:
        if item in seen:
            return True
        seen.add(item)
    return False
 
list = [1, 3, 2, 4, 5, 3]
 
print(contains_duplicates(list))"
Write a web scraper in Python that extracts the price of Apple's iPhone from an e-commerce website.,"import requests
from bs4 import BeautifulSoup

link = 'https://store.apple.com/us/buy-iphone/iphone-11'

page = requests.get(link)
soup = BeautifulSoup(page.content, 'html.parser')

price = soup.find('span', id='pricing-product-price-value').text
print(price)"
Design an algorithm in Python to find the closest pair of numbers from two given lists.,"def closest_pair(list_1, list_2):
    min_diff = float(""inf"")
    
    for a in list_1:
        for b in list_2:
            diff = abs(a - b)
            if diff < min_diff:
                min_diff = diff
                closest_pair = (a, b)
    
    return closest_pair"
Design a system in Python to find and count the number of vowels in a given string of words.,"def count_vowels(words):
  vowels = 'aeiou'
  count = 0
  for char in words.lower():
    if char in vowels:
      count += 1
  return count"
Handle exceptions in Python program while fetching data from a web API and display a message.,"import urllib.request
import json

try:
 response = urllib.request.urlopen('http://example.com/api')
 data = json.loads(response.read().decode('utf-8'))
 
except urllib.request.HTTPError as e:
 print(""Error: "", e.code)

except urllib.request.URLError as e:
 print(""Error: "", e.reason)

except:
 print(""An unknown error occurred"")"
Formulate a python code to remove the characters of odd index in a given string.,"def remove_odd_index_char(string):
    """"""
    Remove the characters of odd index in a given string
    """"""
    result = """" 
    for i in range(len(string)):
        if i % 2 == 0:
            result = result + string[i] 
    return result

if __name__ == '__main__':
    string = ""welcome""
    print(remove_odd_index_char(string)) # wloe"
Write a Python program to find the difference of two sets.,difference = set_1.difference(set_2)
Generate a Python program that reads a line from the user and prints out the number of words in the line.,"def count_words():
    sentence = input(""Please enter a sentence here: "")
    num_words = len(sentence.split())
    print(""The sentence has"", num_words, ""words."")

count_words()"
Write a Python program to calculate the sum of the digits of an integer.,"def digitSum(n):
    if n == 0: 
        return 0
    else:
        return (n % 10) + digitSum(int(n / 10))"
Create a class in Python to store 3D coordinates in Euclidean space.,"class Euclidean3D:
    def __init__(self, x, y, z):
        self.x = x
        self.y = y
        self.z = z

if __name__ == '__main__':
    point1 = Euclidean3D(1, 2, 3)
    point2 = Euclidean3D(4, 5, 6)"
"Develop a Python program to remove all characters from an input string that are not a-z, A-Z, 0-9, or white space.","import re

def remove_non_alphanum(s):
  return re.sub('[^a-zA-Z0-9 \n\.]', '', s)

string = ""Hello,@ $World.""
res = remove_non_alphanum(string) 

print(res)"
Create a utility in Python to generate a PDF of a webpage. The utility should accept a URL as input and generate a PDF of the webpage in the same directory.,"import pdfkit

def generate_pdf(url):
 filename = url.rsplit('/', 1)[-1] + '.pdf'
 pdfkit.from_url(url, filename)

if __name__ == '__main__':
 url = input('Enter a URL: ')
 generate_pdf(url)"
Debug the following python code to make the code run properly,"x = ""Hello World""
if x == ""Hello World"":
    print('Yes')"
Generate a Python program to reverse the order of every letter in a sentence.,"def reverseLetterOrder(string):
 reversed = ''

 for char in string:
  reversed = char + reversed

 return reversed

print(reverseLetterOrder('The quick brown fox jumps over the lazy dog')) # returns ""god yzal eht revo spmuj xof nworb kciuq ehT"""
Create a class in Python with two methods - one for adding two numbers and another for subtracting two numbers.,"class Calculator:
    """"""
    Class with two methods - add and subtract
    """"""

    def add(self, num1, num2):
        """"""
        Method to add two numbers
        """"""
        return num1 + num2

    def subtract(self, num1, num2):
        """"""
        Method to subtract two numbers
        """"""
        return num1 - num2"
Write a function to reverse words in a given string.,"def reverse_words(s):
        return ' '.join(reversed(s.split()))"
Edit the following Python code to re-rank the numbers in descending order.,"numbers = [4, 7, 2, 3]
numbers.sort(reverse=True)
print(numbers)"
Suggest a code improvement for the following python code to ensure that all input is valid.,"def get_user_info(username):
    query = 'SELECT * FROM users WHERE username = %s'
    result = Database.execute_query(query, (username,))
    return result"
"Write a python program that takes in 2 parameters, a list and a number, and returns a dictionary with the words in the list and the number of characters in each word as its value.","my_list = ['the', 'cat', 'in', 'the', 'hat']

def get_word_length_dict(my_list):
    my_dict = {}
    for word in my_list:
        my_dict[word] = len(word)
    return my_dict

print(get_word_length_dict(my_list))"
Write a function to count unique keys for each value present in the tuple.,"from collections import defaultdict 
def get_unique(test_list):
  res = defaultdict(list)
  for sub in test_list:
    res[sub[1]].append(sub[0])
  res = dict(res)
  res_dict = dict()
  for key in res:
    res_dict[key] = len(list(set(res[key])))
  return (str(res_dict)) "
"Write a Python script that generates a table with four columns, ""user"", ""password"", ""hint"" and ""expiry"".","import csv

with open('table.csv', mode='w') as csv_file:
    fieldnames = ['user', 'password', 'hint', 'expiry']
    writer = csv.DictWriter(csv_file, fieldnames=fieldnames)
    writer.writeheader()
    writer.writerow({'user': 'jdoe', 'password': '123', 'hint': 'dog', 'expiry': '2021'})"
Modify the following Python code to raise an exception if the input value is not an integer,"def square_root(x):
    if not isinstance(x, int):
        raise TypeError('Input must be an integer')
    return x**0.5"
Generate a Python program that takes an input string and reverse it.,"def reverse(string):
  return string[::-1]
  
string = ""Hello world!""
print(reverse(string))"
Generate a python function that takes a list of strings and returns the longest one.,"def longest_string(words):
    longest = 0
    result = ''
    for w in words:
        if len(w) > longest:
            longest = len(w)
            result = w
    return result"
Create a program in Python that takes an integer and prints out the Fibonacci sequence up to the given integer.,"def fibonacci(num):
    if num<=0: 
        print(""Incorrect input"") 
    elif num==1: 
        return 0
    elif num==2: 
        return 1
    else: 
        return fibonacci(num-1)+fibonacci(num-2) 

for x in range(1, num+1): 
    print(fibonacci(x))"
Write a function to sort a list of elements using pancake sort.,"def pancake_sort(nums):
    arr_len = len(nums)
    while arr_len > 1:
        mi = nums.index(max(nums[0:arr_len]))
        nums = nums[mi::-1] + nums[mi+1:len(nums)]
        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]
        arr_len -= 1
    return nums"
Write a function to find the n-th power of individual elements in a list using lambda function.,"def nth_nums(nums,n):
 nth_nums = list(map(lambda x: x ** n, nums))
 return nth_nums"
Develop a python script to print all the numbers between 1 and 100,"for i in range(1,101):
  print(i)"
Create a python program to simulate the rolling of three six-sided dice and print out the results.,"import random

# Function to simulate rolling 3 dice
def roll_dice():
    d1 = random.randint(1, 6)
    d2 = random.randint(1, 6)
    d3 = random.randint(1, 6)

    print(d1, d2, d3)

# Roll the dice 3 times
for roll in range(3):
    roll_dice()"
Develop a python program to calculate the average score of a student over the course of a semester.,"def avg_score(scores):
    """"""
    Calculate the average score of a student over the course of a semester
    """"""
 
    avg = 0
    for score in scores:
        avg += score
    return round(avg/len(scores),2)
    
if __name__ == '__main__':
    scores = [10,8,9,6,7]
    print(avg_score(scores))"
Create a Python program that takes a positive integer as an input and prints all its prime factors.,"def prime_factors(num):
 prime_list = []
 i = 2
 while i * i <= num:
 if num % i:
 i += 1
 else:
 num //= i
 prime_list.append(i)
 if num > 1:
 prime_list.append(num)
 return prime_list

n = int(input('Enter a positive integer: '))
print(prime_factors(n))"
Develop a function to search for a value in a list.,"def search_list(lst, value): 
    for item in lst: 
        if item == value:  
            return True 
    return False

# Driver Code 
lst = ['hello', 'world', 'python'] 
value = 'python'

is_present = search_list(lst, value) 
if is_present == True: 
    print(value, ""is present in the list"") 
else: 
    print(value, ""is not present in the list"")"
Generate a new Python list with the squared value of each element in a given list.,"def squared_list(list):
    squared_list = []
    for num in list:
        squared_list.append(num **2)
    return squared_list

list = [1, 2, 3, 4, 5, 6]
print(squared_list(list)) # Outputs [1, 4, 9, 16, 25, 36]"
Write a python program that creates and prints a range of numbers.,"for number in range(0, 11, 2):
    print(number)"
Create a web scraper in Python that loads a website page and extracts a particular string of text.,"import requests
from bs4 import BeautifulSoup
 
url = ""https://www.example.com/""
page = requests.get(url)
 
soup = BeautifulSoup(page.content, 'html.parser')
text = soup.find(string=""Hello, world!"")
print(text)"
Design an algorithm in Python for finding and printing all prime numbers between 1 and a given number.,"def find_all_primes(n): 
  for num in range(2,n + 1):
    for i in range(2,num):
      if (num % i) == 0:
        break 
    else:
      print(num)

find_all_primes(100)"
Write a Python program to count words in a sentence. The program should take in a sentence as input and return a dictionary with the words as the keys and the frequencies as the values.,"sentence = ""The quick brown fox jumps over the lazy dog""
word_freq = {}

for word in sentence.split():
  if word in word_freq:
    word_freq[word] += 1
  else:
    word_freq[word] = 1

print(word_freq)"
Write a python program to print the following pattern.,"def pattern(n):
  # Outer loop 
    for i in range(0, n): 
      
    # Inner loop to handle number of columns 
    # values changing according to outer loop 
      for j in range(0, i+1): 
        
    # Printing stars 
        print(""* "",end="""") 
    
    # Ending line after each row 
      print(""\r"") 
  
# Driver Code 
pattern(5)"
Create a webhook in Python to handle incoming HTTP POST requests. This webhook should process the JSON payload in the POST request and log the output to console.,"import json
from flask import Flask, request

app = Flask(name)

@app.route('/webhook', methods=['POST'])
def webhook():
 payload = json.loads(request.data)
 print(payload)
 return ""OK""

if name == 'main':
 app.run(debug=True)"
